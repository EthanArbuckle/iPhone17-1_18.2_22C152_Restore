void sub_198760750(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,WebKit::WebProcessDataStoreParameters *a45,WTF::StringImpl **a46,char a47,__int16 a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,WTF *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,WTF::StringImpl *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a70;
  char a71;
  char a72;
  char a73;
  const char **a74;
  uint64_t v74;
  unsigned int *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  WTF::StringImpl *v81;
  const void *v82;

  if (a71)
  {
    if ((a70 & 0x8000000000000) != 0)
    {
      v76 = (unsigned int *)(a70 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a70 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v76);
        WTF::fastFree((WTF *)v76, a2);
      }
    }
  }
  if ((a11 & 1) == 0 && v74) {
    WTF::HashTable<WebCore::CSSValueKey,WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValueKey,WebCore::Color>>,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashMap<WebCore::CSSValueKey,WebCore::Color,WTF::DefaultHash<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::CSSValueKey>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValueKey>>::deallocateTable(v74, a2);
  }
  if (a73) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a72, a2);
  }
  if (LOBYTE(STACK[0x208]) && LOBYTE(STACK[0x200])) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&a74);
  }
  if (LOBYTE(STACK[0x220]) && LOBYTE(STACK[0x218])) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&STACK[0x210]);
  }
  if (LOBYTE(STACK[0x238])) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x228], a2);
  }
  if (LOBYTE(STACK[0x880]) && LOBYTE(STACK[0x878])) {
    WebKit::WebProcessDataStoreParameters::~WebProcessDataStoreParameters((const char ***)&STACK[0x7E0]);
  }
  if (LOBYTE(STACK[0x250]) && STACK[0x248]) {
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(STACK[0x248], a2);
  }
  if (LOBYTE(STACK[0x268])) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x258], a2);
  }
  if (LOBYTE(STACK[0x278]))
  {
    v82 = (const void *)STACK[0x270];
    STACK[0x270] = 0;
    if (v82) {
      CFRelease(v82);
    }
  }
  if ((a47 & 1) == 0 && a46) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a46, (WTF::StringImpl *)a2);
  }
  if ((a49 & 1) == 0 && a20) {
    CFRelease(*(CFTypeRef *)(a20 + 8));
  }
  if (LOBYTE(STACK[0x288])) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&STACK[0x280]);
  }
  if (LOBYTE(STACK[0x298]))
  {
    v77 = (WTF::StringImpl *)STACK[0x290];
    STACK[0x290] = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2) {
        WTF::StringImpl::destroy(v77, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v77 -= 2;
      }
    }
  }
  if (LOBYTE(STACK[0x2A8]))
  {
    v78 = (WTF::StringImpl *)STACK[0x2A0];
    STACK[0x2A0] = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2) {
        WTF::StringImpl::destroy(v78, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v78 -= 2;
      }
    }
  }
  if (LOBYTE(STACK[0x2B8]))
  {
    v79 = (WTF::StringImpl *)STACK[0x2B0];
    STACK[0x2B0] = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2) {
        WTF::StringImpl::destroy(v79, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v79 -= 2;
      }
    }
  }
  if (LOBYTE(STACK[0x2D0])) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x2C0], a2);
  }
  if (LOBYTE(STACK[0x2E8])) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x2D8], a2);
  }
  if (LOBYTE(STACK[0x300])) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x2F0], a2);
  }
  if (LOBYTE(STACK[0x318])) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x308], a2);
  }
  if (LOBYTE(STACK[0x330])) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x320], a2);
  }
  if (LOBYTE(STACK[0x348])) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x338], a2);
  }
  if (LOBYTE(STACK[0x360])) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x350], a2);
  }
  if (LOBYTE(STACK[0x378])) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x368], a2);
  }
  if (LOBYTE(STACK[0x390])) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x380], a2);
  }
  if (LOBYTE(STACK[0x3A8])) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x398], a2);
  }
  if (LOBYTE(STACK[0x3C0])) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x3B0], a2);
  }
  if (LOBYTE(STACK[0x3D8])) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x3C8], a2);
  }
  if (LOBYTE(STACK[0x3F0])) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x3E0], a2);
  }
  if (LOBYTE(STACK[0x408])) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x3F8], a2);
  }
  if (LOBYTE(STACK[0x420])) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x410], a2);
  }
  if (LOBYTE(STACK[0x430]))
  {
    v80 = STACK[0x428];
    STACK[0x428] = 0;
    if (v80) {
      CFRelease(*(CFTypeRef *)(v80 + 8));
    }
  }
  if (LOBYTE(STACK[0x448])) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x438], a2);
  }
  if (LOBYTE(STACK[0x458])) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&STACK[0x450]);
  }
  if (LOBYTE(STACK[0x468]))
  {
    v81 = (WTF::StringImpl *)STACK[0x460];
    STACK[0x460] = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2) {
        WTF::StringImpl::destroy(v81, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v81 -= 2;
      }
    }
  }
  std::__optional_destruct_base<WebKit::AuxiliaryProcessCreationParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x470], (WTF::StringImpl *)a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::WritingDirection>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::CacheModel,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::ScreenProperties>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ScreenProperties,void>::decode(a1, a2);
  if (!a2[16])
  {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

unint64_t IPC::Decoder::decode<WebKit::AccessibilityPreferences>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebKit::AccessibilityPreferences,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(unsigned char *a1, IPC::Decoder *a2)
{
  unint64_t v4 = IPC::Decoder::decode<unsigned long long>(a2);
  if (v5)
  {
    unint64_t v6 = v4;
    if (!v4)
    {
      v9 = 0;
LABEL_5:
      uint64_t result = WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned long const,18446744073709551615ul>((uint64_t)a1, v9, v6);
      a1[16] = 1;
      return result;
    }
    unint64_t v7 = IPC::Decoder::decodeSpan<unsigned long const>(a2, v4);
    if (v7)
    {
      v9 = (uint64_t *)v7;
      if (v8 == v6) {
        goto LABEL_5;
      }
    }
  }
  IPC::Decoder::markInvalid(a2);
  *a1 = 0;
  a1[16] = 0;

  return IPC::Decoder::markInvalid(a2);
}

void IPC::ArgumentCoder<API::Data,void>::decode(uint64_t a1, void *a2)
{
  IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)v5);
  if (*a2)
  {
    if (v6)
    {
      API::Data::create((WTF *)v5[1], v5[0], &v4);
      *(void *)a1 = v4;
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
  }
}

void API::Data::create(WTF *this@<X1>, const void *a2@<X0>, WebKit **a3@<X8>)
{
  if (this)
  {
    char v6 = (void *)WTF::fastMalloc(this);
    memcpy(v6, a2, (size_t)this);
  }
  else
  {
    char v6 = 0;
  }
  unint64_t v7 = (WebKit *)API::Object::newObject(0x30uLL, 8);
  *(void *)unint64_t v7 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v7);
  *(void *)unint64_t v7 = &unk_1EE9B5358;
  *((void *)v7 + 2) = v6;
  *((void *)v7 + 3) = this;
  *((void *)v7 + 4) = API::Data::create(std::span<unsigned char const,18446744073709551615ul>)::{lambda(unsigned char *,void const*)#1}::__invoke;
  *((void *)v7 + 5) = 0;
  *a3 = v7;
}

uint64_t WebKit::NavigationState::setNavigationDelegate(uint64_t a1, void *a2)
{
  objc_storeWeak((id *)(a1 + 24), a2);
  char v3 = objc_opt_respondsToSelector();
  int v5 = *(_DWORD *)(a1 + 32);
  unint64_t v4 = (unsigned int *)(a1 + 32);
  *unint64_t v4 = v5 & 0xFFFFFFFE | v3 & 1;
  char v6 = objc_opt_respondsToSelector();
  int v7 = 2;
  if ((v6 & 1) == 0) {
    int v7 = 0;
  }
  unint64_t v8 = *v4 & 0xFFFFFFFD | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFFFFFFD | v7;
  *((unsigned char *)v4 + 4) = BYTE4(v8);
  char v9 = objc_opt_respondsToSelector();
  int v10 = 4;
  if ((v9 & 1) == 0) {
    int v10 = 0;
  }
  unint64_t v11 = *v4 & 0xFFFFFFFB | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFFFFFFB | v10;
  *((unsigned char *)v4 + 4) = BYTE4(v11);
  char v12 = objc_opt_respondsToSelector();
  int v13 = 8;
  if ((v12 & 1) == 0) {
    int v13 = 0;
  }
  unint64_t v14 = *v4 & 0xFFFFFFF7 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFFFFFF7 | v13;
  *((unsigned char *)v4 + 4) = BYTE4(v14);
  char v15 = objc_opt_respondsToSelector();
  int v16 = 16;
  if ((v15 & 1) == 0) {
    int v16 = 0;
  }
  unint64_t v17 = *v4 & 0xFFFFFFEF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFFFFFEF | v16;
  *((unsigned char *)v4 + 4) = BYTE4(v17);
  if (objc_opt_respondsToSelector()) {
    int v18 = 32;
  }
  else {
    int v18 = 0;
  }
  unint64_t v19 = *v4 & 0xFFFFFFDF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFFFFFDF | v18;
  *((unsigned char *)v4 + 4) = BYTE4(v19);
  if (objc_opt_respondsToSelector()) {
    int v20 = 64;
  }
  else {
    int v20 = 0;
  }
  unint64_t v21 = *v4 & 0xFFFFFFBF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFFFFFBF | v20;
  *((unsigned char *)v4 + 4) = BYTE4(v21);
  if (objc_opt_respondsToSelector()) {
    int v22 = 128;
  }
  else {
    int v22 = 0;
  }
  unint64_t v23 = *v4 & 0xFFFFFF7F | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFFFFF7F | v22;
  *((unsigned char *)v4 + 4) = BYTE4(v23);
  if (objc_opt_respondsToSelector()) {
    int v24 = 256;
  }
  else {
    int v24 = 0;
  }
  unint64_t v25 = *v4 & 0xFFFFFEFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFFFFEFF | v24;
  *((unsigned char *)v4 + 4) = BYTE4(v25);
  char v26 = objc_opt_respondsToSelector();
  int v27 = 0x4000;
  if ((v26 & 1) == 0) {
    int v27 = 0;
  }
  unint64_t v28 = *v4 & 0xFFFFBFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFFFBFFF | v27;
  *((unsigned char *)v4 + 4) = BYTE4(v28);
  char v29 = objc_opt_respondsToSelector();
  int v30 = 0x8000;
  if ((v29 & 1) == 0) {
    int v30 = 0;
  }
  unint64_t v31 = *v4 & 0xFFFF7FFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFFF7FFF | v30;
  *((unsigned char *)v4 + 4) = BYTE4(v31);
  char v32 = objc_opt_respondsToSelector();
  int v33 = 0x20000;
  if ((v32 & 1) == 0) {
    int v33 = 0;
  }
  unint64_t v34 = *v4 & 0xFFFDFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFFDFFFF | v33;
  *((unsigned char *)v4 + 4) = BYTE4(v34);
  char v35 = objc_opt_respondsToSelector();
  int v36 = 0x40000;
  if ((v35 & 1) == 0) {
    int v36 = 0;
  }
  unint64_t v37 = *v4 & 0xFFFBFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFFBFFFF | v36;
  *((unsigned char *)v4 + 4) = BYTE4(v37);
  char v38 = objc_opt_respondsToSelector();
  int v39 = 0x80000;
  if ((v38 & 1) == 0) {
    int v39 = 0;
  }
  unint64_t v40 = *v4 & 0xFFF7FFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFF7FFFF | v39;
  *((unsigned char *)v4 + 4) = BYTE4(v40);
  char v41 = objc_opt_respondsToSelector();
  int v42 = 0x100000;
  if ((v41 & 1) == 0) {
    int v42 = 0;
  }
  unint64_t v43 = *v4 & 0xFFEFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFEFFFFF | v42;
  *((unsigned char *)v4 + 4) = BYTE4(v43);
  char v44 = objc_opt_respondsToSelector();
  int v45 = 0x200000;
  if ((v44 & 1) == 0) {
    int v45 = 0;
  }
  unint64_t v46 = *v4 & 0xFFDFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFDFFFFF | v45;
  *((unsigned char *)v4 + 4) = BYTE4(v46);
  char v47 = objc_opt_respondsToSelector();
  int v48 = 0x800000;
  if ((v47 & 1) == 0) {
    int v48 = 0;
  }
  unint64_t v49 = *v4 & 0xFF7FFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFF7FFFFF | v48;
  *((unsigned char *)v4 + 4) = BYTE4(v49);
  char v50 = objc_opt_respondsToSelector();
  int v51 = 0x1000000;
  if ((v50 & 1) == 0) {
    int v51 = 0;
  }
  unint64_t v52 = *v4 & 0xFEFFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFEFFFFFF | v51;
  *((unsigned char *)v4 + 4) = BYTE4(v52);
  char v53 = objc_opt_respondsToSelector();
  int v54 = 0x2000000;
  if ((v53 & 1) == 0) {
    int v54 = 0;
  }
  unint64_t v55 = *v4 & 0xFDFFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFDFFFFFF | v54;
  *((unsigned char *)v4 + 4) = BYTE4(v55);
  if (objc_opt_respondsToSelector()) {
    int v56 = 512;
  }
  else {
    int v56 = 0;
  }
  unint64_t v57 = *v4 & 0xFFFFFDFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFFFFDFF | v56;
  *((unsigned char *)v4 + 4) = BYTE4(v57);
  if (objc_opt_respondsToSelector()) {
    int v58 = 2048;
  }
  else {
    int v58 = 0;
  }
  unint64_t v59 = *v4 & 0xFFFFF7FF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFFFF7FF | v58;
  *((unsigned char *)v4 + 4) = BYTE4(v59);
  if (objc_opt_respondsToSelector()) {
    int v60 = 4096;
  }
  else {
    int v60 = 0;
  }
  unint64_t v61 = *v4 & 0xFFFFEFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFFFEFFF | v60;
  *((unsigned char *)v4 + 4) = BYTE4(v61);
  if (objc_opt_respondsToSelector()) {
    int v62 = 0x2000;
  }
  else {
    int v62 = 0;
  }
  unint64_t v63 = *v4 & 0xFFFFDFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFFFDFFF | v62;
  *((unsigned char *)v4 + 4) = BYTE4(v63);
  char v64 = objc_opt_respondsToSelector();
  int v65 = 0x10000;
  if ((v64 & 1) == 0) {
    int v65 = 0;
  }
  unint64_t v66 = *v4 & 0xFFFEFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFFEFFFF | v65;
  *((unsigned char *)v4 + 4) = BYTE4(v66);
  char v67 = objc_opt_respondsToSelector();
  int v68 = 0x400000;
  if ((v67 & 1) == 0) {
    int v68 = 0;
  }
  unint64_t v69 = *v4 & 0xFFBFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFFBFFFFF | v68;
  *((unsigned char *)v4 + 4) = BYTE4(v69);
  char v70 = objc_opt_respondsToSelector();
  int v71 = 0x4000000;
  if ((v70 & 1) == 0) {
    int v71 = 0;
  }
  unint64_t v72 = *v4 & 0xFBFFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xFBFFFFFF | v71;
  *((unsigned char *)v4 + 4) = BYTE4(v72);
  char v73 = objc_opt_respondsToSelector();
  int v74 = 0x8000000;
  if ((v73 & 1) == 0) {
    int v74 = 0;
  }
  unint64_t v75 = *v4 & 0xF7FFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xF7FFFFFF | v74;
  *((unsigned char *)v4 + 4) = BYTE4(v75);
  char v76 = objc_opt_respondsToSelector();
  int v77 = 0x10000000;
  if ((v76 & 1) == 0) {
    int v77 = 0;
  }
  unint64_t v78 = *v4 & 0xEFFFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xEFFFFFFF | v77;
  *((unsigned char *)v4 + 4) = BYTE4(v78);
  char v79 = objc_opt_respondsToSelector();
  int v80 = 0x20000000;
  if ((v79 & 1) == 0) {
    int v80 = 0;
  }
  unint64_t v81 = *v4 & 0xDFFFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xDFFFFFFF | v80;
  *((unsigned char *)v4 + 4) = BYTE4(v81);
  char v82 = objc_opt_respondsToSelector();
  int v83 = 0x40000000;
  if ((v82 & 1) == 0) {
    int v83 = 0;
  }
  unint64_t v84 = *v4 & 0xBFFFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0xBFFFFFFF | v83;
  *((unsigned char *)v4 + 4) = BYTE4(v84);
  char v85 = objc_opt_respondsToSelector();
  unsigned int v86 = 0x80000000;
  if ((v85 & 1) == 0) {
    unsigned int v86 = 0;
  }
  unint64_t v87 = *v4 & 0x7FFFFFFF | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32);
  *unint64_t v4 = *v4 & 0x7FFFFFFF | v86;
  *((unsigned char *)v4 + 4) = BYTE4(v87);
  char v88 = objc_opt_respondsToSelector();
  uint64_t v89 = 0x100000000;
  if ((v88 & 1) == 0) {
    uint64_t v89 = 0;
  }
  unint64_t v90 = (*v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32)) & 0xFFFFFFFEFFFFFFFFLL;
  *unint64_t v4 = *v4;
  *((unsigned char *)v4 + 4) = (v90 | v89) >> 32;
  char v91 = objc_opt_respondsToSelector();
  uint64_t v92 = 0x200000000;
  if ((v91 & 1) == 0) {
    uint64_t v92 = 0;
  }
  unint64_t v93 = (*v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32)) & 0xFFFFFFFDFFFFFFFFLL;
  *unint64_t v4 = *v4;
  *((unsigned char *)v4 + 4) = (v93 | v92) >> 32;
  char v94 = objc_opt_respondsToSelector();
  uint64_t v95 = 0x400000000;
  if ((v94 & 1) == 0) {
    uint64_t v95 = 0;
  }
  unint64_t v96 = (*v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32)) & 0xFFFFFFFBFFFFFFFFLL;
  *unint64_t v4 = *v4;
  *((unsigned char *)v4 + 4) = (v96 | v95) >> 32;
  char v97 = objc_opt_respondsToSelector();
  uint64_t v98 = 0x800000000;
  if ((v97 & 1) == 0) {
    uint64_t v98 = 0;
  }
  unint64_t v99 = (*v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32)) & 0xFFFFFFF7FFFFFFFFLL;
  *unint64_t v4 = *v4;
  *((unsigned char *)v4 + 4) = (v99 | v98) >> 32;
  char v100 = objc_opt_respondsToSelector();
  uint64_t v101 = 0x1000000000;
  if ((v100 & 1) == 0) {
    uint64_t v101 = 0;
  }
  unint64_t v102 = (*v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32)) & 0xFFFFFFEFFFFFFFFFLL;
  *unint64_t v4 = *v4;
  *((unsigned char *)v4 + 4) = (v102 | v101) >> 32;
  char v103 = objc_opt_respondsToSelector();
  uint64_t v104 = 0x2000000000;
  if ((v103 & 1) == 0) {
    uint64_t v104 = 0;
  }
  unint64_t v105 = (*v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32)) & 0xFFFFFFDFFFFFFFFFLL;
  *unint64_t v4 = *v4;
  *((unsigned char *)v4 + 4) = (v105 | v104) >> 32;
  char v106 = objc_opt_respondsToSelector();
  uint64_t v107 = 0x4000000000;
  if ((v106 & 1) == 0) {
    uint64_t v107 = 0;
  }
  unint64_t v108 = (*v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32)) & 0xFFFFFFBFFFFFFFFFLL;
  *unint64_t v4 = *v4;
  *((unsigned char *)v4 + 4) = (v108 | v107) >> 32;
  char v109 = objc_opt_respondsToSelector();
  unint64_t v110 = 0xFFFFFF8000000000;
  if ((v109 & 1) == 0) {
    unint64_t v110 = 0;
  }
  *((unsigned char *)v4 + 4) = (v110 & 0xFFFFFF80FFFFFFFFLL | ((unint64_t)(v4[1] & 0x7F) << 32)) >> 32;
  *((unsigned char *)v4 + 5) = objc_opt_respondsToSelector() & 1;
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFFFE | objc_opt_respondsToSelector() & 1;
  if (objc_opt_respondsToSelector()) {
    __int16 v111 = 2;
  }
  else {
    __int16 v111 = 0;
  }
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFFFD | v111;
  if (objc_opt_respondsToSelector()) {
    __int16 v112 = 4;
  }
  else {
    __int16 v112 = 0;
  }
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFFFB | v112;
  if (objc_opt_respondsToSelector()) {
    __int16 v113 = 8;
  }
  else {
    __int16 v113 = 0;
  }
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFFF7 | v113;
  if (objc_opt_respondsToSelector()) {
    __int16 v114 = 16;
  }
  else {
    __int16 v114 = 0;
  }
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFFEF | v114;
  if (objc_opt_respondsToSelector()) {
    __int16 v115 = 32;
  }
  else {
    __int16 v115 = 0;
  }
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFFDF | v115;
  if (objc_opt_respondsToSelector()) {
    __int16 v116 = 64;
  }
  else {
    __int16 v116 = 0;
  }
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFFBF | v116;
  if (objc_opt_respondsToSelector()) {
    __int16 v117 = 128;
  }
  else {
    __int16 v117 = 0;
  }
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFF7F | v117;
  if (objc_opt_respondsToSelector()) {
    __int16 v118 = 256;
  }
  else {
    __int16 v118 = 0;
  }
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFEFF | v118;
  if (objc_opt_respondsToSelector()) {
    __int16 v119 = 512;
  }
  else {
    __int16 v119 = 0;
  }
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFDFF | v119;
  if (objc_opt_respondsToSelector()) {
    __int16 v120 = 1024;
  }
  else {
    __int16 v120 = 0;
  }
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xFBFF | v120;
  if (objc_opt_respondsToSelector()) {
    __int16 v121 = 2048;
  }
  else {
    __int16 v121 = 0;
  }
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xF7FF | v121;
  if (objc_opt_respondsToSelector()) {
    __int16 v122 = 4096;
  }
  else {
    __int16 v122 = 0;
  }
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xEFFF | v122;
  uint64_t result = objc_opt_respondsToSelector();
  if (result) {
    __int16 v124 = 0x2000;
  }
  else {
    __int16 v124 = 0;
  }
  *((_WORD *)v4 + 3) = *((_WORD *)v4 + 3) & 0xDFFF | v124;
  return result;
}

#error "198761FC8: too big function (funcsize=0)"

void sub_198772E34(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,WTF::StringImpl *a44,uint64_t a45,WTF::StringImpl *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,WTF::StringImpl *a53,WTF::StringImpl *a54,uint64_t a55,WTF::StringImpl *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,WTF::StringImpl *a61)
{
  if (a44)
  {
    if (*(_DWORD *)a44 == 2) {
      WTF::StringImpl::destroy(a44, a2);
    }
    else {
      *(_DWORD *)a44 -= 2;
    }
  }
  if (a46)
  {
    if (*(_DWORD *)a46 == 2) {
      WTF::StringImpl::destroy(a46, a2);
    }
    else {
      *(_DWORD *)a46 -= 2;
    }
  }
  if (a53)
  {
    if (*(_DWORD *)a53 == 2) {
      WTF::StringImpl::destroy(a53, a2);
    }
    else {
      *(_DWORD *)a53 -= 2;
    }
  }
  if (a54)
  {
    if (*(_DWORD *)a54 == 2) {
      WTF::StringImpl::destroy(a54, a2);
    }
    else {
      *(_DWORD *)a54 -= 2;
    }
  }
  if (a56)
  {
    if (*(_DWORD *)a56 == 2) {
      WTF::StringImpl::destroy(a56, a2);
    }
    else {
      *(_DWORD *)a56 -= 2;
    }
  }
  if (a61)
  {
    if (*(_DWORD *)a61 == 2) {
      WTF::StringImpl::destroy(a61, a2);
    }
    else {
      *(_DWORD *)a61 -= 2;
    }
  }
  unint64_t v63 = (WTF::StringImpl *)STACK[0x200];
  if (STACK[0x200])
  {
    if (*(_DWORD *)v63 == 2) {
      WTF::StringImpl::destroy(v63, a2);
    }
    else {
      *(_DWORD *)v63 -= 2;
    }
  }
  char v64 = *(WTF::StringImpl **)(v61 - 248);
  if (v64)
  {
    if (*(_DWORD *)v64 == 2) {
      WTF::StringImpl::destroy(v64, a2);
    }
    else {
      *(_DWORD *)v64 -= 2;
    }
  }
  int v65 = *(WTF::StringImpl **)(v61 - 232);
  if (v65)
  {
    if (*(_DWORD *)v65 == 2) {
      WTF::StringImpl::destroy(v65, a2);
    }
    else {
      *(_DWORD *)v65 -= 2;
    }
  }
  unint64_t v66 = *(WTF::StringImpl **)(v61 - 224);
  if (v66)
  {
    if (*(_DWORD *)v66 == 2) {
      WTF::StringImpl::destroy(v66, a2);
    }
    else {
      *(_DWORD *)v66 -= 2;
    }
  }
  char v67 = *(WTF::StringImpl **)(v61 - 216);
  if (v67)
  {
    if (*(_DWORD *)v67 == 2) {
      WTF::StringImpl::destroy(v67, a2);
    }
    else {
      *(_DWORD *)v67 -= 2;
    }
  }
  int v68 = *(WTF::StringImpl **)(v61 - 208);
  if (v68)
  {
    if (*(_DWORD *)v68 == 2) {
      WTF::StringImpl::destroy(v68, a2);
    }
    else {
      *(_DWORD *)v68 -= 2;
    }
  }
  unint64_t v69 = *(WTF::StringImpl **)(v61 - 176);
  if (v69)
  {
    if (*(_DWORD *)v69 == 2) {
      WTF::StringImpl::destroy(v69, a2);
    }
    else {
      *(_DWORD *)v69 -= 2;
    }
  }
  char v70 = *(WTF::StringImpl **)(v61 - 160);
  if (v70)
  {
    if (*(_DWORD *)v70 == 2) {
      WTF::StringImpl::destroy(v70, a2);
    }
    else {
      *(_DWORD *)v70 -= 2;
    }
  }
  int v71 = *(WTF::StringImpl **)(v61 - 128);
  if (v71)
  {
    if (*(_DWORD *)v71 == 2) {
      WTF::StringImpl::destroy(v71, a2);
    }
    else {
      *(_DWORD *)v71 -= 2;
    }
  }
  unint64_t v72 = *(WTF::StringImpl **)(v61 - 112);
  if (v72)
  {
    if (*(_DWORD *)v72 == 2) {
      WTF::StringImpl::destroy(v72, a2);
    }
    else {
      *(_DWORD *)v72 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_19877366C()
{
}

void sub_198773678()
{
}

void sub_198773680()
{
}

void sub_198773688()
{
}

void sub_198773690()
{
}

void sub_1987736C4()
{
}

void sub_1987736D0()
{
}

void sub_1987736E4()
{
}

BOOL WebKit::checkUsageDescriptionStringForType@<W0>(WebKit *a1@<X0>, BOOL a2@<W8>)
{
  if (a1 == 2)
  {
    if (byte_1EB359A2B)
    {
      if (!dword_1EB359A30) {
        return 1;
      }
    }
    else
    {
      TCC_kTCCServiceCamera = (WebKit *)WebKit::get_TCC_kTCCServiceCamera(a1);
      dword_1EB359A30 = WebKit::softLinkTCCTCCAccessPreflight(TCC_kTCCServiceCamera, 0, v6);
      byte_1EB359A2B = 1;
      if (!dword_1EB359A30) {
        return 1;
      }
    }
    if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EB359A40, memory_order_acquire) != -1)
    {
      int v10 = &v8;
      char v9 = &v10;
      std::__call_once(&qword_1EB359A40, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::$_1 &&>>);
    }
    int v2 = byte_1EB359A29;
    return v2 != 0;
  }
  if (a1 == 1)
  {
    if (byte_1EB359A2A)
    {
      if (dword_1EB359A2C)
      {
LABEL_5:
        if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EB359A38, memory_order_acquire) != -1)
        {
          int v10 = &v8;
          char v9 = &v10;
          std::__call_once(&qword_1EB359A38, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::checkUsageDescriptionStringForType(WebKit::MediaPermissionType)::$_0 &&>>);
        }
        int v2 = _MergedGlobals_81;
        return v2 != 0;
      }
    }
    else
    {
      TCC_kTCCServiceMicrophone = (WebKit *)WebKit::get_TCC_kTCCServiceMicrophone(a1);
      dword_1EB359A2C = WebKit::softLinkTCCTCCAccessPreflight(TCC_kTCCServiceMicrophone, 0, v4);
      byte_1EB359A2A = 1;
      if (dword_1EB359A2C) {
        goto LABEL_5;
      }
    }
    return 1;
  }
  return a2;
}

uint64_t WebKit::initTCCTCCAccessPreflight(WebKit *this, const __CFString *a2, const __CFDictionary *a3)
{
  if (WebKit::initTCCTCCAccessPreflight(__CFString const*,__CFDictionary const*)::once != -1) {
    dispatch_once(&WebKit::initTCCTCCAccessPreflight(__CFString const*,__CFDictionary const*)::once, &__block_literal_global_20_1);
  }
  int v5 = WebKit::softLinkTCCTCCAccessPreflight;

  return ((uint64_t (*)(WebKit *, const __CFString *))v5)(this, a2);
}

uint64_t WebKit::get_TCC_kTCCServiceMicrophone(WebKit *this)
{
  if (qword_1EB358E78 != -1) {
    dispatch_once(&qword_1EB358E78, &__block_literal_global_8_2);
  }
  return qword_1EB358E70;
}

void sub_198773980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CFRelease(*(CFTypeRef *)(v3 + 8));
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

#error "1987739A0: too big function (funcsize=0)"

uint64_t WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 29))
  {
    uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (v6)
    {
      int v7 = (void *)v5;
      char v8 = *(uint64_t **)a2;
      uint64_t v9 = 8 * v6;
      do
      {
        uint64_t v10 = *v8;
        if (*v8) {
          CFRetain(*(CFTypeRef *)(v10 + 8));
        }
        *v7++ = v10;
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_198790EE4(_Unwind_Exception *exception_object, void *a2)
{
  CFDictionaryRef v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<WTF::String>::operator=[abi:sn180100]<WTF::String&,void>(uint64_t a1, WTF::StringImpl **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    WTF::String::operator=((uint64_t *)a1, a2);
  }
  else
  {
    uint64_t v3 = *a2;
    if (*a2) {
      *(_DWORD *)v3 += 2;
    }
    *(void *)a1 = v3;
    *(unsigned char *)(a1 + 8) = 1;
  }
  return a1;
}

uint64_t std::__throw_bad_optional_access[abi:sn180100]()
{
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore15SQLiteStatementEEEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSC_iEEEEEEDcSG_DpT0_();
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore15SQLiteStatementEEEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSC_iEEEEEEDcSG_DpT0_(uint64_t a1, WebCore::SQLiteStatement **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    WebCore::SQLiteStatement::operator delete(v2, 0x18uLL);
  }
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapperBase<void,BOOL>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,BOOL>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

uint64_t std::default_delete<WTF::Detail::CallableWrapperBase<void,BOOL>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a2);
  }
  return result;
}

uint64_t WebKit::WebPage::applicationDidBecomeActive(WebKit::WebPage *this)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v3 = (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::sharedManagerIfExists((WebCore::PlatformMediaSessionManager *)[v2 postNotificationName:*MEMORY[0x1E4FB6230] object:0]);
  if (v3) {
    WebCore::PlatformMediaSessionManager::applicationDidBecomeActive(v3);
  }
  uint64_t result = *((void *)this + 6);
  if (result)
  {
    return MEMORY[0x1F41727A0]();
  }
  return result;
}

WebKit::RemoteLayerTreeDrawingAreaProxyIOS *WebKit::RemoteLayerTreeDrawingAreaProxyIOS::pauseDisplayRefreshCallbacks(WebKit::RemoteLayerTreeDrawingAreaProxyIOS *this)
{
  *((unsigned char *)this + 232) = 0;
  if (!*((unsigned char *)this + 233))
  {
    v1 = WebKit::RemoteLayerTreeDrawingAreaProxyIOS::displayLinkHandler(this);
    return (WebKit::RemoteLayerTreeDrawingAreaProxyIOS *)[(WKDisplayLinkHandler *)v1 pause];
  }
  return this;
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::markAllBackingStoreVolatileFromTimer(WebKit::RemoteLayerBackingStoreCollection *this)
{
  int v2 = WebKit::RemoteLayerBackingStoreCollection::markAllBackingStoreVolatile((uint64_t *)this, 2, 0);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v3 = WebKit::RemoteLayerBackingStoreCollection::collectAllRemoteRenderingBufferIdentifiersToMarkVolatile((uint64_t *)this, 2u, 0, (uint64_t)&v10);
  if (HIDWORD(v11))
  {
    if (v3) {
      __int16 v5 = 256;
    }
    else {
      __int16 v5 = 0;
    }
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    uint64_t v6 = (atomic_uint *)*((void *)this + 1);
    if (v6) {
      atomic_fetch_add(v6, 1u);
    }
    uint64_t v7 = WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v7 = &unk_1EE9BFF50;
    *(_WORD *)(v7 + 8) = v5 | v2;
    *(void *)(v7 + 16) = v6;
    uint64_t v9 = v7;
    WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(*(WebKit::WebPage **)(*((void *)this + 2) + 24), (uint64_t)&v10, &v9, 0);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  else if ((v2 & v3) == 1 && (*((void *)this + 15) & 0xFFFFFFFFFFFFLL) != 0)
  {
    WebCore::TimerBase::stopSlowCase((WebKit::RemoteLayerBackingStoreCollection *)((char *)this + 88));
  }
  return WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v4);
}

void sub_19879124C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a4) {
    (*(void (**)(uint64_t))(*(void *)a4 + 8))(a4);
  }
  WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(WebKit::WebPage *a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v7 = (uint64_t *)WebKit::WebPage::ensureRemoteRenderingBackendProxy(a1);
  uint64_t v8 = *a3;
  *a3 = 0;
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9BFF78;
  v9[1] = v8;
  uint64_t v11 = v9;
  WebKit::RemoteRenderingBackendProxy::markSurfacesVolatile(v7, a2, (uint64_t *)&v11, a4);
  uint64_t result = (uint64_t)v11;
  uint64_t v11 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198791380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteLayerBackingStoreCollection::volatilityTimerFired(WebKit::RemoteLayerBackingStoreCollection *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 72))();
}

uint64_t WebKit::RemoteLayerTreeDrawingAreaProxy::commitLayerTreeNotTriggered(WebKit::RemoteLayerTreeDrawingAreaProxy *a1, IPC::Connection *a2, unint64_t a3)
{
  uint64_t result = WebKit::RemoteLayerTreeDrawingAreaProxy::processStateForConnection(a1, a2);
  if (*(void *)(result + 8) < a3)
  {
    *(_DWORD *)uint64_t result = 3;
    WebKit::RemoteLayerTreeDrawingAreaProxy::maybePauseDisplayRefreshCallbacks(a1);
    uint64_t v6 = *(void *)(*((void *)a1 + 5) + 8);
    if (v6) {
      uint64_t v7 = v6 - 16;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(void))(**(void **)(v7 + 248) + 32);
    return v8();
  }
  return result;
}

void *WebKit::VideoPresentationManagerProxy::applicationDidBecomeActive(WebKit::VideoPresentationManagerProxy *this)
{
  uint64_t v2 = *((void *)this + 7);
  uint64_t v4 = *(void *)(v2 + 72);
  uint64_t v3 = *(void *)(v2 + 80);
  v11[0] = "VideoPresentationManagerProxy";
  v11[1] = 30;
  v11[2] = "applicationDidBecomeActive";
  v11[3] = v3;
  if (*(unsigned char *)(v4 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 0, (WTF::Logger::LogSiteIdentifier *)v11);
  }
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 8);
  uint64_t v6 = (uint64_t)result;
  uint64_t v8 = v7;
  uint64_t v9 = *((void *)this + 8);
  if (v9) {
    uint64_t v10 = (void *)(v9 + 24 * *(unsigned int *)(v9 - 4));
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10 != result)
  {
    do
    {
      uint64_t result = (void *)WebCore::VideoPresentationInterfaceIOS::applicationDidBecomeActive(*(WebCore::VideoPresentationInterfaceIOS **)(v6 + 16));
      while (1)
      {
        v6 += 24;
        if (v6 == v8) {
          break;
        }
        if ((unint64_t)(*(void *)v6 + 1) > 1) {
          goto LABEL_12;
        }
      }
      uint64_t v6 = v8;
LABEL_12:
      ;
    }
    while ((void *)v6 != v10);
  }
  return result;
}

BOOL WebKit::ResourceLoadStatisticsStore::missingReferenceToObservedDomains(WebKit::ResourceLoadStatisticsStore *this)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::DatabaseUtilities::currentTableAndIndexQueries(this, (uint64_t)v8);
  uint64_t v2 = v8[0];
  v8[0] = 0;
  std::pair<WTF::String,std::optional<WTF::String>>::~pair(v8);
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v3);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  if (!v2) {
    return 0;
  }
  BOOL v5 = WTF::StringImpl::find() != -1;
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, v4);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  return v5;
}

uint64_t WebKit::ResourceLoadStatisticsStore::addMissingTablesIfNecessary(WebKit::ResourceLoadStatisticsStore *this)
{
  v1 = this;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t result = WebKit::ResourceLoadStatisticsStore::checkForMissingTablesInSchema((WebKit::ResourceLoadStatisticsStore *)&v35, this);
  if (v37)
  {
    WebKit::DatabaseUtilities::beginTransactionIfNecessary(v1, (uint64_t)v34);
    if (v36)
    {
      uint64_t v3 = v35;
      uint64_t v4 = &v35[v36];
      int v33 = (WebKit::ResourceLoadStatisticsStore *)((char *)v1 + 16);
      char v32 = v1;
      while (1)
      {
        WebKit::ResourceLoadStatisticsStore::expectedTableAndIndexQueries(v1);
        uint64_t v6 = qword_1EB359890;
        if (!qword_1EB359890)
        {
          int v20 = 0;
          char v21 = 1;
          goto LABEL_18;
        }
        int v7 = qword_1EB359898;
        int v8 = dword_1EB3598A0;
        unsigned int v9 = *((_DWORD *)*v3 + 4);
        if (v9 >= 0x100)
        {
          unsigned int v10 = v9 >> 8;
        }
        else
        {
          unsigned int v10 = WTF::StringImpl::hashSlowCase(*v3);
          uint64_t v6 = qword_1EB359890;
        }
        unsigned int v11 = v7 - 1;
        uint64_t v12 = (v10 ^ v8) & (v7 - 1);
        uint64_t v13 = v6 + 32 * v12;
        unint64_t v14 = *(WTF **)v13;
        if (!*(void *)v13) {
          break;
        }
        char v15 = v4;
        int v16 = -1;
        while (1)
        {
          unsigned int v17 = *((_DWORD *)v14 + 4);
          if (v17 >= 0x100) {
            unsigned int v18 = v17 >> 8;
          }
          else {
            unsigned int v18 = WTF::StringImpl::hashSlowCase(v14);
          }
          if (++v16 > ((v12 + v7 - ((v18 ^ v8) & v11)) & v11))
          {
LABEL_26:
            int v20 = 0;
            char v21 = 1;
            uint64_t v4 = v15;
            v1 = v32;
            goto LABEL_18;
          }
          if (v18 == v10 && (WTF::equal(*(WTF **)v13, *v3, v5) & 1) != 0) {
            break;
          }
          uint64_t v12 = (v12 + 1) & v11;
          uint64_t v13 = qword_1EB359890 + 32 * v12;
          unint64_t v14 = *(WTF **)v13;
          if (!*(void *)v13) {
            goto LABEL_26;
          }
        }
        int v20 = *(WTF::StringImpl **)(v13 + 8);
        if (v20) {
          *(_DWORD *)v20 += 2;
        }
        uint64_t v4 = v15;
        v1 = v32;
        if (*(unsigned char *)(v13 + 24))
        {
          int v24 = *(WTF::StringImpl **)(v13 + 16);
          if (v24)
          {
            int v25 = *(_DWORD *)v24;
            *(_DWORD *)v24 += 2;
            if (v25) {
              *(_DWORD *)int v24 = v25;
            }
            else {
              WTF::StringImpl::destroy(v24, v19);
            }
          }
        }
        if (!v20) {
          goto LABEL_30;
        }
        char v21 = 0;
LABEL_18:
        if ((WebCore::SQLiteDatabase::executeCommandSlow() & 1) == 0)
        {
          unint64_t v23 = qword_1EB358460;
          if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
          {
            uint64_t v26 = *((void *)v1 + 82);
            int Error = WebCore::SQLiteDatabase::lastError(v33);
            uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v33);
            *(_DWORD *)buf = 134218755;
            int v39 = v1;
            __int16 v40 = 2048;
            uint64_t v41 = v26;
            __int16 v42 = 1024;
            int v43 = Error;
            __int16 v44 = 2081;
            uint64_t v45 = ErrorMsg;
            _os_log_error_impl(&dword_1985F2000, v23, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::addMissingTablesIfNecessary: failed to execute statement", buf, 0x26u);
          }
        }
        if ((v21 & 1) == 0)
        {
          if (*(_DWORD *)v20 == 2) {
            WTF::StringImpl::destroy(v20, v22);
          }
          else {
            *(_DWORD *)v20 -= 2;
          }
        }
        if (++v3 == v4) {
          goto LABEL_40;
        }
      }
      int v20 = 0;
LABEL_30:
      char v21 = 1;
      goto LABEL_18;
    }
LABEL_40:
    if (!WebKit::ResourceLoadStatisticsStore::createUniqueIndices(v1))
    {
      char v29 = qword_1EB358460;
      if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = *((void *)v1 + 82);
        *(_DWORD *)buf = 134218240;
        int v39 = v1;
        __int16 v40 = 2048;
        uint64_t v41 = v31;
        _os_log_error_impl(&dword_1985F2000, v29, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu] - ResourceLoadStatisticsStore::addMissingTablesIfNecessary: failed to create unique indices", buf, 0x16u);
      }
    }
    WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit(v34);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v30);
  }
  return result;
}

BOOL WebKit::ResourceLoadStatisticsStore::missingUniqueIndices(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (WebKit::ResourceLoadStatisticsStore *)((char *)this + 16);
  WebCore::SQLiteDatabase::prepareStatement();
  unsigned int v3 = v13;
  if (!v13)
  {
    if (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v12) == 100)
    {
      if (v13) {
        std::__throw_bad_variant_access[abi:sn180100]();
      }
      BOOL v4 = (int)WebCore::SQLiteStatement::columnInt((WebCore::SQLiteStatement *)v12) < 13;
      goto LABEL_5;
    }
    uint64_t v6 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
LABEL_12:
      BOOL v4 = 0;
LABEL_5:
      unsigned int v3 = v13;
      goto LABEL_6;
    }
    uint64_t v9 = *((void *)this + 82);
    int Error = WebCore::SQLiteDatabase::lastError(v2);
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    *(_DWORD *)buf = 134218755;
    char v15 = this;
    __int16 v16 = 2048;
    uint64_t v17 = v9;
    __int16 v18 = 1024;
    int v19 = Error;
    __int16 v20 = 2081;
    uint64_t v21 = ErrorMsg;
    int v8 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::missingUniqueIndices: faile"
         "d to step statement";
LABEL_14:
    _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, v8, buf, 0x26u);
    goto LABEL_12;
  }
  uint64_t v6 = qword_1EB358460;
  if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = *((void *)this + 82);
    *(_DWORD *)buf = 134218755;
    char v15 = this;
    __int16 v16 = 2048;
    uint64_t v17 = v7;
    __int16 v18 = 1024;
    int v19 = WebCore::SQLiteDatabase::lastError(v2);
    __int16 v20 = 2081;
    uint64_t v21 = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    int v8 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::missingUniqueIndices: faile"
         "d to prepare statement";
    goto LABEL_14;
  }
  BOOL v4 = 0;
LABEL_6:
  if (v3 != -1) {
    (*(&off_1EE9C7600 + v3))((int)buf, (WebCore::SQLiteStatement *)v12);
  }
  return v4;
}

BOOL WebKit::ResourceLoadStatisticsStore::createUniqueIndices(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (WebKit::ResourceLoadStatisticsStore *)((char *)this + 16);
  if (WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && WebCore::SQLiteDatabase::executeCommand()
    && (WebCore::SQLiteDatabase::executeCommand() & 1) != 0)
  {
    return 1;
  }
  BOOL v4 = qword_1EB358460;
  BOOL result = os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR);
  if (result)
  {
    uint64_t v5 = *((void *)this + 82);
    int v6 = 134218755;
    uint64_t v7 = this;
    __int16 v8 = 2048;
    uint64_t v9 = v5;
    __int16 v10 = 1024;
    int Error = WebCore::SQLiteDatabase::lastError(v2);
    __int16 v12 = 2081;
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createUniqueIndices: failed to execute statement", (uint8_t *)&v6, 0x26u);
    return 0;
  }
  return result;
}

uint64_t WebKit::ResourceLoadStatisticsStore::needsUpdatedSchema(WebKit::ResourceLoadStatisticsStore *this)
{
  if (WebKit::ResourceLoadStatisticsStore::missingReferenceToObservedDomains(this)
    || WebKit::ResourceLoadStatisticsStore::missingUniqueIndices(this))
  {
    return 1;
  }
  WebKit::ResourceLoadStatisticsStore::expectedTableAndIndexQueries(this);
  if (HIDWORD(qword_1EB359898))
  {
    if (qword_1EB359898)
    {
      uint64_t v3 = 32 * qword_1EB359898;
      BOOL v4 = (void *)qword_1EB359890;
      uint64_t result = 0;
      while (!*v4)
      {
        v4 += 4;
        v3 -= 32;
        if (!v3) {
          return result;
        }
      }
    }
    else
    {
      BOOL v4 = (void *)qword_1EB359890;
    }
    uint64_t v5 = qword_1EB359890 + 32 * qword_1EB359898;
    if (v4 != (void *)v5)
    {
      while (1)
      {
        v4 += 4;
        if (v4 == (void *)v5) {
          break;
        }
        if (*v4)
        {
          uint64_t result = 0;
          if (v4 == (void *)v5) {
            return result;
          }
        }
      }
    }
  }
  return 0;
}

BOOL WebKit::ResourceLoadStatisticsStore::createSchema(WebKit::ResourceLoadStatisticsStore *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (WebKit::ResourceLoadStatisticsStore *)((char *)this + 16);
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    BOOL v4 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *((void *)this + 82);
      int v19 = 134218755;
      __int16 v20 = this;
      __int16 v21 = 2048;
      uint64_t v22 = v18;
      __int16 v23 = 1024;
      int Error = WebCore::SQLiteDatabase::lastError(v2);
      __int16 v25 = 2081;
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
      int v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to e"
           "xecute statement createObservedDomain";
      goto LABEL_44;
    }
    return 0;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    BOOL v4 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    uint64_t v5 = *((void *)this + 82);
    int v19 = 134218755;
    __int16 v20 = this;
    __int16 v21 = 2048;
    uint64_t v22 = v5;
    __int16 v23 = 1024;
    int Error = WebCore::SQLiteDatabase::lastError(v2);
    __int16 v25 = 2081;
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    int v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createTopLevelDomains";
LABEL_44:
    _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v19, 0x26u);
    return 0;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    BOOL v4 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    uint64_t v7 = *((void *)this + 82);
    int v19 = 134218755;
    __int16 v20 = this;
    __int16 v21 = 2048;
    uint64_t v22 = v7;
    __int16 v23 = 1024;
    int Error = WebCore::SQLiteDatabase::lastError(v2);
    __int16 v25 = 2081;
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    int v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createStorageAccessUnderTopFrameDomains";
    goto LABEL_44;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    BOOL v4 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    uint64_t v8 = *((void *)this + 82);
    int v19 = 134218755;
    __int16 v20 = this;
    __int16 v21 = 2048;
    uint64_t v22 = v8;
    __int16 v23 = 1024;
    int Error = WebCore::SQLiteDatabase::lastError(v2);
    __int16 v25 = 2081;
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    int v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createTopFrameUniqueRedirectsTo";
    goto LABEL_44;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    BOOL v4 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    uint64_t v9 = *((void *)this + 82);
    int v19 = 134218755;
    __int16 v20 = this;
    __int16 v21 = 2048;
    uint64_t v22 = v9;
    __int16 v23 = 1024;
    int Error = WebCore::SQLiteDatabase::lastError(v2);
    __int16 v25 = 2081;
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    int v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createTopFrameUniqueRedirectsToSinceSameSiteStrictEnforcement";
    goto LABEL_44;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    BOOL v4 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    uint64_t v10 = *((void *)this + 82);
    int v19 = 134218755;
    __int16 v20 = this;
    __int16 v21 = 2048;
    uint64_t v22 = v10;
    __int16 v23 = 1024;
    int Error = WebCore::SQLiteDatabase::lastError(v2);
    __int16 v25 = 2081;
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    int v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createTopFrameUniqueRedirectsFrom";
    goto LABEL_44;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    BOOL v4 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    uint64_t v11 = *((void *)this + 82);
    int v19 = 134218755;
    __int16 v20 = this;
    __int16 v21 = 2048;
    uint64_t v22 = v11;
    __int16 v23 = 1024;
    int Error = WebCore::SQLiteDatabase::lastError(v2);
    __int16 v25 = 2081;
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    int v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createTopFrameLinkDecorationsFrom";
    goto LABEL_44;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    BOOL v4 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    uint64_t v12 = *((void *)this + 82);
    int v19 = 134218755;
    __int16 v20 = this;
    __int16 v21 = 2048;
    uint64_t v22 = v12;
    __int16 v23 = 1024;
    int Error = WebCore::SQLiteDatabase::lastError(v2);
    __int16 v25 = 2081;
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    int v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createTopFrameLoadedThirdPartyScripts";
    goto LABEL_44;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    BOOL v4 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    uint64_t v13 = *((void *)this + 82);
    int v19 = 134218755;
    __int16 v20 = this;
    __int16 v21 = 2048;
    uint64_t v22 = v13;
    __int16 v23 = 1024;
    int Error = WebCore::SQLiteDatabase::lastError(v2);
    __int16 v25 = 2081;
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    int v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createSubframeUnderTopFrameDomains";
    goto LABEL_44;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    BOOL v4 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    uint64_t v14 = *((void *)this + 82);
    int v19 = 134218755;
    __int16 v20 = this;
    __int16 v21 = 2048;
    uint64_t v22 = v14;
    __int16 v23 = 1024;
    int Error = WebCore::SQLiteDatabase::lastError(v2);
    __int16 v25 = 2081;
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    int v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createSubresourceUnderTopFrameDomains";
    goto LABEL_44;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    BOOL v4 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    uint64_t v15 = *((void *)this + 82);
    int v19 = 134218755;
    __int16 v20 = this;
    __int16 v21 = 2048;
    uint64_t v22 = v15;
    __int16 v23 = 1024;
    int Error = WebCore::SQLiteDatabase::lastError(v2);
    __int16 v25 = 2081;
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    int v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createSubresourceUniqueRedirectsTo";
    goto LABEL_44;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    BOOL v4 = qword_1EB358460;
    if (!os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    uint64_t v16 = *((void *)this + 82);
    int v19 = 134218755;
    __int16 v20 = this;
    __int16 v21 = 2048;
    uint64_t v22 = v16;
    __int16 v23 = 1024;
    int Error = WebCore::SQLiteDatabase::lastError(v2);
    __int16 v25 = 2081;
    uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
    int v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to exe"
         "cute statement createSubresourceUniqueRedirectsFrom";
    goto LABEL_44;
  }
  if ((WebCore::SQLiteDatabase::executeCommand() & 1) == 0)
  {
    BOOL v4 = qword_1EB358460;
    if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *((void *)this + 82);
      int v19 = 134218755;
      __int16 v20 = this;
      __int16 v21 = 2048;
      uint64_t v22 = v17;
      __int16 v23 = 1024;
      int Error = WebCore::SQLiteDatabase::lastError(v2);
      __int16 v25 = 2081;
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg(v2);
      int v6 = "%p - [sessionID=%llu, error=%d, message=%{private}s] - ResourceLoadStatisticsStore::createSchema: failed to e"
           "xecute statement createOperatingDates";
      goto LABEL_44;
    }
    return 0;
  }

  return WebKit::ResourceLoadStatisticsStore::createUniqueIndices(this);
}

void WebKit::RemoteRenderingBackendProxy::didMarkLayersAsVolatile(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 208);
  uint64_t v5 = (uint64_t *)(a1 + 208);
  uint64_t v6 = v7;
  if (v7)
  {
    unsigned int v10 = *(_DWORD *)(v6 - 8);
    unint64_t v11 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
    unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    uint64_t v14 = v10 & ((v13 >> 31) ^ v13);
    uint64_t v15 = *(void **)(v6 + 16 * v14);
    if (v15 != a2)
    {
      int v39 = 1;
      while (v15)
      {
        uint64_t v14 = (v14 + v39) & v10;
        uint64_t v15 = *(void **)(v6 + 16 * v14);
        ++v39;
        if (v15 == a2) {
          goto LABEL_3;
        }
      }
      uint64_t v14 = *(unsigned int *)(v6 - 4);
    }
LABEL_3:
    if (v14 != *(_DWORD *)(v6 - 4))
    {
      uint64_t v16 = (void *)(v6 + 16 * v14);
      uint64_t v17 = v16[1];
      v16[1] = 0;
      uint64_t v18 = *v5;
      if (!*v5 || (v18 += 16 * *(unsigned int *)(v18 - 4), (void *)v18 != v16))
      {
        if ((void *)v18 != v16)
        {
          *uint64_t v16 = -1;
          v16[1] = 0;
          ++*(_DWORD *)(*v5 - 16);
          uint64_t v19 = *v5;
          int v20 = *v5 ? *(_DWORD *)(v19 - 12) - 1 : -1;
          *(_DWORD *)(v19 - 12) = v20;
          uint64_t v21 = *v5;
          if (*v5)
          {
            unsigned int v22 = 6 * *(_DWORD *)(v21 - 12);
            unsigned int v23 = *(_DWORD *)(v21 - 4);
            if (v22 < v23 && v23 >= 9) {
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(BOOL)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(BOOL)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(v5, v23 >> 1);
            }
          }
        }
      }
      if (v17)
      {
        uint64_t v25 = *((unsigned int *)a3 + 3);
        if (v25)
        {
          uint64_t v26 = *a3;
          uint64_t v27 = v26 + 16 * v25;
          do
          {
            uint64_t v28 = *(void *)(a1 + 216);
            if (v28)
            {
              unsigned int v29 = *(_DWORD *)(v28 - 8);
              unint64_t v30 = *(void *)v26 + ~(*(void *)v26 << 32);
              unint64_t v31 = (v30 ^ (v30 >> 22)) + ~((v30 ^ (v30 >> 22)) << 13);
              unint64_t v32 = (9 * (v31 ^ (v31 >> 8))) ^ ((9 * (v31 ^ (v31 >> 8))) >> 15);
              uint64_t v33 = v29 & (((v32 + ~(v32 << 27)) >> 31) ^ (v32 + ~(v32 << 27)));
              uint64_t v34 = *(void *)(v28 + 16 * v33);
              if (v34 == *(void *)v26)
              {
LABEL_20:
                uint64_t v35 = *(void *)(v28 + 16 * v33 + 8);
                if (v35)
                {
                  atomic_fetch_add((atomic_uint *volatile)v35, 1u);
                  uint64_t v36 = *(void *)(v35 + 8);
                  if (v36) {
                    *(unsigned char *)(v36 + 57) |= *(unsigned char *)(v26 + 8);
                  }
                  if (atomic_fetch_add((atomic_uint *volatile)v35, 0xFFFFFFFF) == 1)
                  {
                    atomic_store(1u, (unsigned int *)v35);
                    WTF::fastFree((WTF *)v35, a2);
                  }
                }
              }
              else
              {
                int v37 = 1;
                while (v34)
                {
                  uint64_t v33 = (v33 + v37) & v29;
                  uint64_t v34 = *(void *)(v28 + 16 * v33);
                  ++v37;
                  if (v34 == *(void *)v26) {
                    goto LABEL_20;
                  }
                }
              }
            }
            v26 += 16;
          }
          while (v26 != v27);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, a4);
        char v38 = *(void (**)(uint64_t))(*(void *)v17 + 8);
        v38(v17);
      }
    }
  }
}

WTF *WebKit::RemoteRenderingBackendProxy::markSurfacesVolatile(uint64_t *a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  unint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v7 = *(unsigned int *)(a2 + 12);
  if (v7)
  {
    unsigned int v8 = 0;
    uint64_t v9 = *(unsigned __int8 **)a2;
    uint64_t v10 = *(void *)a2 + 16 * v7;
    do
    {
      uint64_t v11 = v9[8];
      *(void *)buf = *(void *)(*(void *)v9 + 24);
      *(void *)&buf[8] = v11;
      if (v8 == v91)
      {
        unint64_t v12 = (_OWORD *)WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v90, v8 + 1, (unint64_t)buf);
        *((_OWORD *)v90 + HIDWORD(v91)) = *v12;
      }
      else
      {
        *((_OWORD *)v90 + v8) = *(_OWORD *)buf;
      }
      unsigned int v8 = ++HIDWORD(v91);
      *(unsigned char *)(*(void *)v9 + 56) |= v9[8];
      v9 += 16;
    }
    while (v9 != (unsigned __int8 *)v10);
  }
  uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  p_uint64_t IdentifierInternal = &IdentifierInternal;
  unint64_t v87 = &v90;
  char v88 = a4;
  uint64_t v13 = a1[8];
  uint64_t v14 = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)a1, &v92);
  uint64_t v15 = v92;
  if (!v92) {
    goto LABEL_100;
  }
  double v16 = *((double *)v92 + 15);
  double v17 = INFINITY;
  if (fabs(v16) != INFINITY)
  {
    WTF::ApproximateTime::now(v14);
    double v17 = v16 + v18;
  }
  if (*((void *)v15 + 7) != v13)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v15 + 16), buf, v17);
    if (!buf[16]) {
      goto LABEL_97;
    }
    uint64_t v68 = *(void *)buf;
    unint64_t v69 = *(void *)&buf[8];
    unint64_t v70 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v71 = v70 - *(void *)buf;
    if (v70 < *(void *)buf)
    {
      unint64_t v73 = 0;
      unint64_t v72 = *(void *)&buf[8];
    }
    else
    {
      unint64_t v72 = 0;
      if (v71 > 0xFFFFFFFFFFFFFFFDLL)
      {
        unint64_t v73 = 0;
      }
      else
      {
        unint64_t v73 = 0;
        if (v71 + 2 <= *(void *)&buf[8])
        {
          *(_WORD *)(*(void *)buf + v71) = 2871;
          unint64_t v72 = v69;
          unint64_t v73 = v71 + 2;
        }
      }
    }
    int v74 = (void *)((v68 + v73 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v74 >= v68 + v73)
    {
      unint64_t v75 = (char *)v74 - v68;
      if ((unint64_t)v74 - v68 > 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_97;
      }
      unint64_t v73 = (unint64_t)(v75 + 8);
      if ((unint64_t)(v75 + 8) > v72) {
        goto LABEL_97;
      }
      *int v74 = v13;
    }
    if (!v72)
    {
LABEL_97:
      int v80 = off_1EB3583E8;
      if (os_log_type_enabled((os_log_t)off_1EB3583E8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v81 = a1[8];
        char v82 = IPC::errorAsString();
        *(_DWORD *)buf = 134218498;
        *(void *)&uint8_t buf[4] = v81;
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "RemoteRenderingBackend_MarkSurfacesVolatile";
        __int16 v95 = 2082;
        unint64_t v96 = v82;
        _os_log_impl(&dword_1985F2000, v80, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
      }
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v15, v83);
LABEL_100:
      uint64_t v84 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, void))(*(void *)v84 + 16))(v84, 0);
      (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
      goto LABEL_58;
    }
    unint64_t v76 = (*((void *)v15 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v77 = *((void *)v15 + 8);
    if (v76 + 16 >= v77) {
      unint64_t v76 = 0;
    }
    if (v73 <= 0x10) {
      unint64_t v73 = 16;
    }
    unint64_t v78 = v76 + v73;
    if (v77 <= v78) {
      unint64_t v79 = 0;
    }
    else {
      unint64_t v79 = v78;
    }
    *((void *)v15 + 10) = v79;
    IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v15, atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v15 + 9) + 16) + 128), v79) == 0x80000000);
    *((void *)v15 + 7) = v13;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v15 + 16), buf, v17);
  if (!buf[16]) {
    goto LABEL_97;
  }
  uint64_t v20 = *(void *)buf;
  unint64_t v21 = *(void *)&buf[8];
  unint64_t v22 = (*(void *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v23 = v22 - *(void *)buf;
  if (v22 < *(void *)buf) {
    goto LABEL_108;
  }
  unint64_t v24 = 0;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v25 = 0;
  }
  else
  {
    unint64_t v25 = 0;
    if (v23 + 2 <= *(void *)&buf[8])
    {
      *(_WORD *)(*(void *)buf + v23) = 1336;
      unint64_t v24 = v21;
      unint64_t v25 = v23 + 2;
    }
  }
  while (1)
  {
    unint64_t v26 = (v20 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
    BOOL v27 = v26 >= v20 + v25;
    unint64_t v28 = v26 - (v20 + v25);
    if (v27)
    {
      unint64_t v21 = 0;
      unint64_t v29 = v28 + v25;
      if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= v24)
      {
        *(void *)(v20 + v29) = *p_IdentifierInternal;
        unint64_t v21 = v24;
        unint64_t v25 = v29 + 8;
      }
    }
    else
    {
      unint64_t v21 = v24;
    }
    unint64_t v30 = (unsigned int *)v87;
    uint64_t v31 = *((unsigned int *)v87 + 3);
    unint64_t v32 = (void *)((v20 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v32 >= v20 + v25)
    {
      uint64_t v33 = (char *)v32 - v20;
      if ((unint64_t)v32 - v20 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v33 + 8) > v21)
      {
        unint64_t v21 = 0;
      }
      else
      {
        *unint64_t v32 = v31;
        uint64_t v31 = v30[3];
        unint64_t v25 = (unint64_t)(v33 + 8);
      }
    }
    if (v31)
    {
      uint64_t v34 = (unsigned char *)(*(void *)v30 + 8);
      uint64_t v35 = 16 * v31;
      do
      {
        unint64_t v36 = (v20 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v37 = v36 - (v20 + v25);
        if (v36 >= v20 + v25)
        {
          unint64_t v38 = v36 - v20;
          unint64_t v39 = v37 + v25 + 8;
          if (v38 > 0xFFFFFFFFFFFFFFF7 || v39 > v21)
          {
            unint64_t v21 = 0;
          }
          else
          {
            *(void *)(v20 + v38) = *((void *)v34 - 1);
            unint64_t v25 = v39;
          }
        }
        if (v25 >= v21) {
          unint64_t v21 = 0;
        }
        else {
          *(unsigned char *)(v20 + v25++) = *v34;
        }
        v34 += 16;
        v35 -= 16;
      }
      while (v35);
    }
    if (v25 < v21)
    {
      *(unsigned char *)(v20 + v25) = v88;
      unint64_t v41 = (*((void *)v15 + 10) + 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v42 = *((void *)v15 + 8);
      if (v41 + 16 >= v42) {
        unint64_t v41 = 0;
      }
      if (v25 <= 0xF) {
        unint64_t v25 = 15;
      }
      unint64_t v43 = v25 + v41;
      if (v42 > v43 + 1) {
        unint64_t v44 = v43 + 1;
      }
      else {
        unint64_t v44 = 0;
      }
      *((void *)v15 + 10) = v44;
      if (atomic_exchange((atomic_ullong *volatile)(*(void *)(*((void *)v15 + 9) + 16) + 128), v44) == 0x80000000
        || v15[29])
      {
        if (*((unsigned char *)v15 + 104)) {
          MEMORY[0x1997420B0](v15[23]);
        }
        v15[29] = 0;
      }
      goto LABEL_47;
    }
    uint64_t v20 = buf[16];
    if (buf[16]) {
      break;
    }
    __break(1u);
LABEL_108:
    unint64_t v25 = 0;
    unint64_t v24 = v21;
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v15, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v93, (uint64_t **)v15 + 1);
  int v85 = IPC::Connection::send<Messages::RemoteRenderingBackend::MarkSurfacesVolatile>((uint64_t)v93, (uint64_t)&p_IdentifierInternal, v13);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v93);
  if (v85) {
    goto LABEL_97;
  }
LABEL_47:
  WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref((unsigned int *)v15, v19);
  uint64_t v48 = a1[26];
  char v47 = a1 + 26;
  uint64_t v46 = v48;
  if (v48
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(BOOL)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(BOOL)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(v47),
        (uint64_t v46 = *v47) != 0))
  {
    int v49 = *(_DWORD *)(v46 - 8);
  }
  else
  {
    int v49 = 0;
  }
  uint64_t v50 = IdentifierInternal;
  unint64_t v51 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                               + ~(IdentifierInternal << 32)) >> 22);
  unint64_t v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
  unint64_t v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
  unsigned int v54 = v49 & ((v53 >> 31) ^ v53);
  unint64_t v55 = (uint64_t *)(v46 + 16 * v54);
  uint64_t v56 = *v55;
  if (*v55)
  {
    unint64_t v66 = 0;
    int v67 = 1;
    while (v56 != IdentifierInternal)
    {
      if (v56 == -1) {
        unint64_t v66 = v55;
      }
      unsigned int v54 = (v54 + v67) & v49;
      unint64_t v55 = (uint64_t *)(v46 + 16 * v54);
      uint64_t v56 = *v55;
      ++v67;
      if (!*v55)
      {
        if (v66)
        {
          *unint64_t v66 = 0;
          v66[1] = 0;
          --*(_DWORD *)(*v47 - 16);
          uint64_t v50 = IdentifierInternal;
          unint64_t v55 = v66;
        }
        goto LABEL_50;
      }
    }
  }
  else
  {
LABEL_50:
    *unint64_t v55 = v50;
    uint64_t v57 = *a3;
    *a3 = 0;
    uint64_t v58 = v55[1];
    v55[1] = v57;
    if (v58) {
      (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
    }
    uint64_t v59 = *v47;
    if (*v47) {
      int v60 = *(_DWORD *)(v59 - 12) + 1;
    }
    else {
      int v60 = 1;
    }
    *(_DWORD *)(v59 - 12) = v60;
    uint64_t v61 = *v47;
    if (*v47) {
      int v62 = *(_DWORD *)(v61 - 12);
    }
    else {
      int v62 = 0;
    }
    uint64_t v63 = (*(_DWORD *)(v61 - 16) + v62);
    unint64_t v64 = *(unsigned int *)(v61 - 4);
    if (v64 > 0x400)
    {
      if (v64 > 2 * v63) {
        goto LABEL_58;
      }
    }
    else if (3 * v64 > 4 * v63)
    {
      goto LABEL_58;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(BOOL)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(BOOL)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(v47);
  }
LABEL_58:
  uint64_t result = v90;
  if (v90)
  {
    unint64_t v90 = 0;
    LODWORD(v91) = 0;
    return (WTF *)WTF::fastFree(result, v45);
  }
  return result;
}

void WebKit::RemoteRenderingBackendProxy::didInitialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    IPC::StreamClientConnectionBuffer::setSemaphores(v3 + 64, a2, a3);
  }
}

WTF *WebKit::RemoteRenderingBackend::markSurfacesVolatile(void *a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v60 = 0;
  uint64_t v61 = a2;
  uint64_t v59 = 0;
  uint64_t v4 = *((unsigned int *)a3 + 3);
  if (v4)
  {
    uint64_t v5 = *a3;
    uint64_t v55 = *a3 + 16 * v4;
    int v6 = 1;
    while (1)
    {
      uint64_t v7 = *(void *)v5;
      char v8 = *(unsigned char *)(v5 + 8);
      uint64_t v9 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<IPC::ScopedActiveMessageReceiveQueue<WebKit::RemoteImageBufferSet,WTF::RefPtr<WebKit::RemoteImageBufferSet,WTF::RawPtrTraits<WebKit::RemoteImageBufferSet>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSet>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1[16], *(void *)v5);
      if (!v9)
      {
        unint64_t v51 = off_1EB358938;
        if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "void WebKit::RemoteRenderingBackend::markSurfacesVolatile(MarkSurfacesAsVolatileRequestId"
                               "entifier, const Vector<std::pair<RemoteImageBufferSetIdentifier, OptionSet<BufferInSetType>>> &, BOOL)";
          _os_log_fault_impl(&dword_1985F2000, v51, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/GPUProcess/graphics/RemoteRenderingBackend.cpp 498: Invalid message dispatched %{public}s: BufferSet is being marked volatile before being created", buf, 0xCu);
        }
        *(unsigned char *)(*(void *)(a1[6] + 56) + 98) = 1;
        goto LABEL_68;
      }
      uint64_t v10 = v9;
      int v57 = v6;
      int v11 = 1;
      atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
      unint64_t v12 = *(atomic_uchar *volatile **)(v9 + 40);
      if (!v12)
      {
        unsigned int v14 = 0;
        goto LABEL_16;
      }
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v12 + 1);
      if (v8)
      {
        if (a4)
        {
          WebCore::ImageBuffer::setVolatileAndPurgeForTesting((WebCore::ImageBuffer *)v12);
        }
        else
        {
          (*((void (**)(atomic_uchar *volatile *))*v12 + 13))(v12);
          if (!WebCore::ImageBuffer::setVolatile((WebCore::ImageBuffer *)v12))
          {
            unsigned int v14 = 0;
            int v11 = 0;
            goto LABEL_9;
          }
        }
        unsigned int v14 = 1;
      }
      else
      {
        unsigned int v14 = 0;
      }
LABEL_9:
      char v15 = 0;
      uint64_t v16 = *((void *)v12 + 1);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v16, (unsigned __int8 *)&v15, 1u, memory_order_acquire, memory_order_acquire);
      if (v15) {
        MEMORY[0x19972E8D0](v16);
      }
      uint64_t v17 = *(void *)(v16 + 8);
      uint64_t v18 = v17 - 1;
      *(void *)(v16 + 8) = v17 - 1;
      if (v17 == 1)
      {
        uint64_t v52 = *(void *)(v16 + 16);
        uint64_t v19 = *(void *)(v16 + 24);
        *(void *)(v16 + 24) = 0;
        BOOL v20 = v52 != 0;
      }
      else
      {
        uint64_t v19 = 0;
        BOOL v20 = 1;
      }
      int v21 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v16, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
      if (v21 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v16);
      }
      if (!v18)
      {
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
        }
        if (!v20) {
          WTF::fastFree((WTF *)v16, v13);
        }
      }
LABEL_16:
      unint64_t v22 = *(atomic_uchar *volatile **)(v10 + 48);
      if (!v22) {
        goto LABEL_28;
      }
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v22 + 1);
      if ((v8 & 2) != 0)
      {
        if (a4)
        {
          WebCore::ImageBuffer::setVolatileAndPurgeForTesting((WebCore::ImageBuffer *)v22);
        }
        else
        {
          (*((void (**)(atomic_uchar *volatile *))*v22 + 13))(v22);
          if (!WebCore::ImageBuffer::setVolatile((WebCore::ImageBuffer *)v22))
          {
            int v11 = 0;
            goto LABEL_21;
          }
        }
        v14 |= 2u;
      }
LABEL_21:
      char v24 = 0;
      uint64_t v25 = *((void *)v22 + 1);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v25, (unsigned __int8 *)&v24, 1u, memory_order_acquire, memory_order_acquire);
      if (v24) {
        MEMORY[0x19972E8D0](v25);
      }
      uint64_t v26 = *(void *)(v25 + 8);
      uint64_t v27 = v26 - 1;
      *(void *)(v25 + 8) = v26 - 1;
      if (v26 == 1)
      {
        uint64_t v53 = *(void *)(v25 + 16);
        uint64_t v28 = *(void *)(v25 + 24);
        *(void *)(v25 + 24) = 0;
        BOOL v29 = v53 != 0;
      }
      else
      {
        uint64_t v28 = 0;
        BOOL v29 = 1;
      }
      int v30 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v25, (unsigned __int8 *)&v30, 0, memory_order_release, memory_order_relaxed);
      if (v30 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v25);
      }
      if (!v27)
      {
        if (v28) {
          (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
        if (!v29) {
          WTF::fastFree((WTF *)v25, v23);
        }
      }
LABEL_28:
      uint64_t v31 = *(atomic_uchar *volatile **)(v10 + 56);
      if (!v31) {
        goto LABEL_40;
      }
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v31 + 1);
      if ((v8 & 4) != 0)
      {
        if (a4)
        {
          WebCore::ImageBuffer::setVolatileAndPurgeForTesting((WebCore::ImageBuffer *)v31);
LABEL_32:
          v14 |= 4u;
          goto LABEL_33;
        }
        (*((void (**)(atomic_uchar *volatile *))*v31 + 13))(v31);
        if (WebCore::ImageBuffer::setVolatile((WebCore::ImageBuffer *)v31)) {
          goto LABEL_32;
        }
        int v11 = 0;
      }
LABEL_33:
      char v33 = 0;
      uint64_t v34 = *((void *)v31 + 1);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v34, (unsigned __int8 *)&v33, 1u, memory_order_acquire, memory_order_acquire);
      if (v33) {
        MEMORY[0x19972E8D0](v34);
      }
      uint64_t v35 = *(void *)(v34 + 8);
      uint64_t v36 = v35 - 1;
      *(void *)(v34 + 8) = v35 - 1;
      if (v35 == 1)
      {
        uint64_t v54 = *(void *)(v34 + 16);
        uint64_t v37 = *(void *)(v34 + 24);
        *(void *)(v34 + 24) = 0;
        BOOL v38 = v54 != 0;
      }
      else
      {
        uint64_t v37 = 0;
        BOOL v38 = 1;
      }
      int v39 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v34, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
      if (v39 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v34);
      }
      if (!v36)
      {
        if (v37) {
          (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
        }
        int v6 = v57;
        if (!v38) {
          WTF::fastFree((WTF *)v34, v32);
        }
        goto LABEL_41;
      }
LABEL_40:
      int v6 = v57;
LABEL_41:
      if (!v11) {
        int v6 = 0;
      }
      if (v14)
      {
        *(void *)buf = v7;
        *(void *)&buf[8] = v14;
        uint64_t v40 = HIDWORD(v60);
        if (HIDWORD(v60) == v60)
        {
          unint64_t v43 = (long long *)WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v59, HIDWORD(v60) + 1, (unint64_t)buf);
          uint64_t v40 = HIDWORD(v60);
          unint64_t v41 = v59;
          long long v42 = *v43;
        }
        else
        {
          unint64_t v41 = v59;
          long long v42 = *(_OWORD *)buf;
        }
        *((_OWORD *)v41 + v40) = v42;
        ++HIDWORD(v60);
      }
      if (atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)(v10 + 8));
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      v5 += 16;
      if (v5 == v55) {
        goto LABEL_66;
      }
    }
  }
  LOBYTE(v6) = 1;
LABEL_66:
  *(void *)buf = &v61;
  *(void *)&buf[8] = &v59;
  char v64 = v6 & 1;
  uint64_t v44 = a1[12];
  uint64_t v45 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v45 = 1320;
  *((void *)v45 + 1) = v44;
  *((void *)v45 + 66) = (char *)v45 + 16;
  *((void *)v45 + 67) = 512;
  *((void *)v45 + 68) = 0;
  *((void *)v45 + 70) = 0;
  *((void *)v45 + 69) = 0;
  IPC::Encoder::encodeHeader(v45);
  int v62 = v45;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,0ul,1ul,2ul>(v45, (uint64_t)buf);
  (*(void (**)(void *, IPC::Encoder **, void))(*a1 + 32))(a1, &v62, 0);
  char v47 = v62;
  int v62 = 0;
  if (v47)
  {
    IPC::Encoder::~Encoder(v47, v46);
    WTF::fastFree(v49, v50);
  }
LABEL_68:
  uint64_t result = v59;
  if (v59)
  {
    uint64_t v59 = 0;
    LODWORD(v60) = 0;
    return (WTF *)WTF::fastFree(result, v46);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ApplicationDidBecomeActive>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2140;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  int v11 = v17;
  uint64_t v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v13, v14);
  }
  return v9;
}

void sub_1987937BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::vectorEqualsArray<WTF::String,WTF::ASCIILiteral,13ul>(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 12) == 13)
  {
    uint64_t v2 = result;
    BOOL v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = (void *)(a2 + 8);
    while (v4 < *(unsigned int *)(v2 + 12))
    {
      if (*v5) {
        uint64_t v6 = *v5 - 1;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t result = MEMORY[0x19972E990](*(void *)(*(void *)v2 + 8 * v4), *(v5 - 1), v6);
      if (result)
      {
        BOOL v3 = v4 > 0xB;
        v5 += 2;
        if (++v4 != 13) {
          continue;
        }
      }
      return v3;
    }
    __break(0xC471u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t WebKit::vectorEqualsArray<WTF::String,WTF::ASCIILiteral,12ul>(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 12) == 12)
  {
    uint64_t v3 = result;
    BOOL v2 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = (void *)(a2 + 8);
    while (v4 < *(unsigned int *)(v3 + 12))
    {
      if (*v5) {
        uint64_t v6 = *v5 - 1;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t result = MEMORY[0x19972E990](*(void *)(*(void *)v3 + 8 * v4), *(v5 - 1), v6);
      if (result)
      {
        BOOL v2 = v4 > 0xA;
        v5 += 2;
        if (++v4 != 12) {
          continue;
        }
      }
      return v2;
    }
    __break(0xC471u);
  }
  else
  {
    return 0;
  }
  return result;
}

void WebKit::DatabaseUtilities::columnsForTable(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a3) {
    size_t v5 = a3 - 1;
  }
  else {
    size_t v5 = 0;
  }
  if (v5 >> 31
    || __OFADD__(v5, 1)
    || (uint64_t v6 = (v5 + 19), __OFADD__(v5 + 1, 18))
    || (WTF::tryFastCompactMalloc((WTF *)(v6 + 20)), (uint64_t v9 = v18[0]) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x198793BD8);
  }
  *(_DWORD *)v18[0] = 2;
  *(_DWORD *)(v9 + 4) = v6;
  *(void *)(v9 + 8) = v9 + 20;
  *(_DWORD *)(v9 + 16) = 4;
  *(_WORD *)(v9 + 36) = 10351;
  *(_OWORD *)(v9 + 20) = *(_OWORD *)"PRAGMA table_info(";
  uint64_t v10 = (unsigned char *)(v9 + 38);
  if (v5)
  {
    if (v5 == 1) {
      *uint64_t v10 = *a2;
    }
    else {
      memcpy((void *)(v9 + 38), a2, v5);
    }
  }
  v10[v5] = 41;
  WebCore::SQLiteDatabase::prepareStatementSlow();
  if (*(_DWORD *)v9 == 2) {
    WTF::StringImpl::destroy((WTF::StringImpl *)v9, v11);
  }
  else {
    *(_DWORD *)v9 -= 2;
  }
  if (v19)
  {
    uint64_t v9 = qword_1EB3582F8;
    if (os_log_type_enabled((os_log_t)qword_1EB3582F8, OS_LOG_TYPE_ERROR))
    {
LABEL_35:
      uint64_t ErrorMsg = WebCore::SQLiteDatabase::lastErrorMsg((WebCore::SQLiteDatabase *)(a1 + 16));
      *(_DWORD *)buf = 134218243;
      *(void *)&uint8_t buf[4] = a1;
      __int16 v21 = 2081;
      uint64_t v22 = ErrorMsg;
      _os_log_error_impl(&dword_1985F2000, (os_log_t)v9, OS_LOG_TYPE_ERROR, "%p - Database::columnsForTable Unable to prepare statement to fetch schema for table, error message: %{private}s", buf, 0x16u);
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    while (WebCore::SQLiteStatement::step((WebCore::SQLiteStatement *)v18) == 100)
    {
      if (!v19)
      {
        WebCore::SQLiteStatement::columnText((WebCore::SQLiteStatement *)v18);
        uint64_t v13 = *(unsigned int *)(a4 + 12);
        if (v13 == *(_DWORD *)(a4 + 8))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>(a4, (unint64_t)buf);
        }
        else
        {
          uint64_t v14 = *(void *)a4;
          uint64_t v15 = *(void *)buf;
          if (*(void *)buf) {
            **(_DWORD **)buf += 2;
          }
          *(void *)(v14 + 8 * v13) = v15;
          *(_DWORD *)(a4 + 12) = v13 + 1;
        }
        char v16 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2) {
            WTF::StringImpl::destroy(v16, v12);
          }
          else {
            *(_DWORD *)v16 -= 2;
          }
        }
        if (!v19) {
          continue;
        }
      }
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_35;
    }
  }
  if (v19 != -1) {
    (*(&off_1EE9C31A0 + v19))((int)buf, (WebCore::SQLiteStatement *)v18);
  }
}

uint64_t WebKit::WebPageProxy::applicationDidBecomeActive(WebKit::WebPageProxy *this)
{
  BOOL v2 = (WebKit::VideoPresentationManagerProxy *)*((void *)this + 54);
  if (v2) {
    WebKit::VideoPresentationManagerProxy::applicationDidBecomeActive(v2);
  }
  uint64_t v3 = *((void *)this + 32);
  char v5 = 0;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ApplicationDidBecomeActive>(v3, (uint64_t)&v5, *(void *)(*((void *)this + 4) + 1928), 0);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(BOOL)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(BOOL)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 16 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v5;
    do
    {
      uint64_t v13 = (uint64_t *)(v4 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            unsigned int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            unsigned int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          uint64_t v22 = v18 & ((v21 >> 31) ^ v21);
          if (*(void *)(v17 + 16 * v22))
          {
            int v28 = 1;
            do
              uint64_t v22 = (v22 + v28++) & v18;
            while (*(void *)(v17 + 16 * v22));
          }
          uint64_t v23 = (uint64_t *)(v17 + 16 * v22);
          uint64_t v24 = v23[1];
          v23[1] = 0;
          if (v24) {
            (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
          }
          *uint64_t v23 = *v13;
          uint64_t v25 = v4 + 16 * v11;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          v23[1] = v26;
          uint64_t v27 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
        }
        else
        {
          uint64_t v15 = v4 + 16 * v11;
          uint64_t v16 = *(void *)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  else if (!v4)
  {
    return;
  }

  WTF::fastFree((WTF *)(v4 - 16), v8);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(BOOL)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(BOOL)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (unsigned int v2 = *(_DWORD *)(v1 - 4)) != 0)
  {
    if (6 * *(_DWORD *)(v1 - 12) >= 2 * v2) {
      v2 *= 2;
    }
  }
  else
  {
    unsigned int v2 = 8;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(BOOL)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(BOOL)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v2);
}

uint64_t WTF::Function<void ()(BOOL)>::~Function(uint64_t a1)
{
  return a1;
}

{
  WTF::Function<void ()(BOOL)>::~Function(a1);
  return a1;
}

uint64_t WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 16 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)uint64_t v4 = 0;
      if (v6) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 16), a2);
      }
      uint64_t v4 = (WTF *)((char *)v4 + 16);
      v5 -= 16;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = *(unsigned int *)(result + 12);
      uint64_t result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v5)
      {
        uint64_t v7 = result;
        char v8 = (WTF *)((char *)v4 + 16 * v5);
        uint64_t v9 = v4;
        do
        {
          uint64_t v10 = *(void *)v9;
          *(void *)uint64_t v9 = 0;
          *(void *)uint64_t v7 = v10;
          *(unsigned char *)(v7 + 8) = *((unsigned char *)v9 + 8);
          uint64_t v11 = *(void *)v9;
          *(void *)uint64_t v9 = 0;
          if (v11) {
            uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 16), v6);
          }
          uint64_t v9 = (WTF *)((char *)v9 + 16);
          v7 += 16;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)uint64_t v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 28))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(WTF **)result;
    uint64_t v5 = *(unsigned int *)(result + 12);
    uint64_t v6 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    if (v5)
    {
      uint64_t v8 = 16 * v5;
      uint64_t v9 = v4;
      do
      {
        long long v10 = *(_OWORD *)v9;
        uint64_t v9 = (WTF *)((char *)v9 + 16);
        *v6++ = v10;
        v8 -= 16;
      }
      while (v8);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1 <= a3 && v4 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    uint64_t v8 = a3 - v4;
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v8;
  }
  else
  {
    unint64_t v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v5 >= 0x10) {
      unint64_t v6 = v5 + 1;
    }
    else {
      unint64_t v6 = 16;
    }
    if (v6 > a2) {
      a2 = v6;
    }
    WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = *v3;
  if (*v3) {
    *v6 += 2;
  }
  *(void *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::markAllBackingStoreVolatileFromTimer(void)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BFF50;
  unint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::markAllBackingStoreVolatileFromTimer(void)::$_0,void,BOOL>::call(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (*(unsigned char *)(result + 8) && *(unsigned char *)(result + 9) && a2 && (*(void *)(v3 + 120) & 0xFFFFFFFFFFFFLL) != 0) {
        return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v3 + 88));
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&,BOOL)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9BFF78;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteLayerBackingStoreCollection::sendMarkBuffersVolatile(WTF::Vector<std::pair<WTF::Ref<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(BOOL)> &&,BOOL)::$_0,void,BOOL>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::RemoteLayerBackingStoreCollection::*&)(void),WebKit::RemoteLayerBackingStoreCollection*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

unint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reserveInitialCapacity(uint64_t a1, unsigned int a2)
{
  unsigned int v3 = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::computeBestTableSize(a2);
  if (v3 <= 8) {
    unsigned int v4 = 8;
  }
  else {
    unsigned int v4 = v3;
  }
  Table = (WTF *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::allocateTable(v4);
  *(void *)a1 = Table;
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = 0;
  unint64_t result = WTF::IntHash<unsigned long>::hash(Table);
  *(_DWORD *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 20) = 0;
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::computeBestTableSize(unsigned int a1)
{
  unsigned int v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  unsigned int v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  unsigned int v3 = ((v2 | HIWORD(v2)) + 1) << (20 * (unint64_t)a1 >= 19 * (unint64_t)((v2 | HIWORD(v2)) + 1));
  unsigned int v4 = v3 << ((double)v3 * 0.754166667 <= (double)a1);
  if (v4 <= 8) {
    return 8;
  }
  else {
    return v4;
  }
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::pair<WTF::String,std::optional<WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::pair<WTF::String,std::optional<WTF::String>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::allocateTable(unsigned int a1)
{
  uint64_t result = WTF::fastMalloc((WTF *)(32 * a1));
  if (a1)
  {
    uint64_t v3 = a1;
    uint64_t v4 = result;
    do
    {
      *(unsigned char *)(v4 + 24) = 0;
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(unsigned char *)(v4 + 16) = 0;
      v4 += 32;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(BOOL)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  unsigned int v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_19879454C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = IPC::ArgumentCoder<PAL::SessionID,void>::decode(a2);
  if (v5)
  {
    unint64_t v6 = a2[1];
    uint64_t v7 = *a2;
    unint64_t v8 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v6 < v8 || v6 - v8 <= 7)
    {
      unint64_t v27 = 0;
      uint64_t v28 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v29 = a2[3];
      if (v29)
      {
        if (v6)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v29 + 16))(v29, v7, v6);
          uint64_t v28 = *a2;
          unint64_t v27 = a2[1];
        }
        else
        {
          unint64_t v27 = 0;
          uint64_t v28 = 0;
        }
      }
      goto LABEL_35;
    }
    unint64_t v10 = (unint64_t *)(v7 + v8);
    a2[2] = (uint64_t)(v10 + 1);
    if (!v7)
    {
      unint64_t v27 = v6;
      uint64_t v28 = 0;
LABEL_35:
      *a2 = 0;
      a2[1] = 0;
      uint64_t v30 = a2[3];
      if (v30 && v27) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v28);
      }
      goto LABEL_30;
    }
    uint64_t v11 = v4;
    unint64_t v12 = *v10;
    unint64_t v41 = 0;
    uint64_t v42 = 0;
    if (v12 >= 0x10000)
    {
      while (1)
      {
        IPC::Decoder::decode<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>>((uint64_t)&v39, a2);
        if (!v40) {
          goto LABEL_28;
        }
        if (HIDWORD(v42) == v42)
        {
          WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>>((uint64_t)&v41, (unint64_t)&v39);
        }
        else
        {
          *((_OWORD *)v41 + HIDWORD(v42)) = v39;
          ++HIDWORD(v42);
        }
        if (!--v12)
        {
          WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v41, HIDWORD(v42));
          uint64_t result = v41;
          int v20 = v42;
          int v17 = HIDWORD(v42);
          goto LABEL_17;
        }
      }
    }
    if (v12)
    {
      LODWORD(v42) = v12;
      unint64_t v41 = (WTF *)WTF::fastMalloc((WTF *)(16 * v12));
      while (1)
      {
        IPC::Decoder::decode<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>>((uint64_t)&v39, a2);
        if (!v40) {
          break;
        }
        uint64_t v14 = HIDWORD(v42);
        if (HIDWORD(v42) == v42)
        {
          unsigned int v18 = (long long *)WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v41, HIDWORD(v42) + 1, (unint64_t)&v39);
          uint64_t v14 = HIDWORD(v42);
          uint64_t v15 = v41;
          long long v16 = *v18;
        }
        else
        {
          uint64_t v15 = v41;
          long long v16 = v39;
        }
        *((_OWORD *)v15 + v14) = v16;
        int v17 = ++HIDWORD(v42);
        if (!--v12)
        {
          uint64_t result = v41;
          int v20 = v42;
          goto LABEL_17;
        }
      }
LABEL_28:
      uint64_t v26 = v41;
      if (v41)
      {
        unint64_t v41 = 0;
        LODWORD(v42) = 0;
        WTF::fastFree(v26, v13);
      }
      goto LABEL_30;
    }
    int v17 = 0;
    int v20 = 0;
    uint64_t result = 0;
LABEL_17:
    unint64_t v21 = a2[1];
    uint64_t v22 = (char *)*a2;
    unint64_t v23 = a2[2] - *a2;
    if (v21 <= v23)
    {
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v33 = a2[3];
      if (v33)
      {
        BOOL v38 = result;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(void *)v33 + 16))(a2[3]);
          uint64_t v32 = *a2;
          uint64_t v31 = a2[1];
        }
        else
        {
          uint64_t v31 = 0;
          uint64_t v32 = 0;
        }
        uint64_t result = v38;
      }
    }
    else
    {
      uint64_t v24 = &v22[v23];
      a2[2] = (uint64_t)(v24 + 1);
      if (v22)
      {
        unsigned int v25 = *v24;
        if (v25 < 2)
        {
          *(void *)a1 = v11;
          *(void *)(a1 + 8) = result;
          *(_DWORD *)(a1 + 16) = v20;
          *(_DWORD *)(a1 + 20) = v17;
          *(unsigned char *)(a1 + 24) = v25 != 0;
          *(unsigned char *)(a1 + 32) = 1;
          return result;
        }
        goto LABEL_40;
      }
      uint64_t v31 = v21;
      uint64_t v32 = 0;
    }
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v34 = a2[3];
    if (v34)
    {
      uint64_t v37 = result;
      if (v31)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v34 + 16))(a2[3], v32, v31);
        uint64_t v22 = (char *)*a2;
        unint64_t v21 = a2[1];
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v22 = 0;
      }
      uint64_t result = v37;
    }
LABEL_40:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v35 = a2[3];
    if (v35 && v21)
    {
      uint64_t v36 = result;
      (*(void (**)(uint64_t, char *))(*(void *)v35 + 16))(a2[3], v22);
      uint64_t result = v36;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
    if (result) {
      WTF::fastFree(result, v22);
    }
    goto LABEL_31;
  }
LABEL_30:
  IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
LABEL_31:

  return (WTF *)IPC::Decoder::markInvalid((IPC::Decoder *)a2);
}

uint64_t IPC::Decoder::decode<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v5)
  {
    unint64_t v6 = a2[1];
    uint64_t v7 = *a2;
    unint64_t v8 = a2[2] - *a2;
    if (v6 <= v8)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v13 = a2[3];
      if (v13)
      {
        if (v6)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v7, v6);
          uint64_t v12 = *a2;
          uint64_t v11 = a2[1];
        }
        else
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
        }
      }
    }
    else
    {
      unint64_t v9 = (unsigned __int8 *)(v7 + v8);
      a2[2] = (uint64_t)(v9 + 1);
      if (v7)
      {
        unsigned int v10 = *v9;
        if (v10 < 8)
        {
          *(void *)a1 = result;
          *(unsigned char *)(a1 + 8) = v10;
          *(unsigned char *)(a1 + 16) = 1;
          return result;
        }
        goto LABEL_8;
      }
      uint64_t v11 = v6;
      uint64_t v12 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14 && v11) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12);
    }
LABEL_8:
    IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;

  return IPC::Decoder::markInvalid((IPC::Decoder *)a2);
}

uint64_t IPC::Decoder::markInvalid(IPC::Decoder *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  uint64_t result = *((void *)this + 3);
  if (result) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v1);
  }
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t *a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *((unsigned int *)a2 + 3));
  uint64_t v5 = *((unsigned int *)a2 + 3);
  if (v5)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = v6 + 16 * v5;
    while (1)
    {
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)v6);
      char v8 = *(unsigned char *)(v6 + 8);
      unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v9) {
        break;
      }
      *(unsigned char *)unint64_t result = v8;
      v6 += 16;
      if (v6 == v7) {
        return result;
      }
    }
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, *(uint64_t **)a2);
  IPC::VectorArgumentCoder<false,std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, *(uint64_t **)(a2 + 8));
  char v4 = *(unsigned char *)(a2 + 16);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<IPC::Semaphore,IPC::Semaphore>,void>::decode<IPC::Decoder,IPC::Semaphore,IPC::Semaphore>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 8) && *(unsigned char *)(a3 + 8))
  {
    uint64_t v5 = result;
    uint64_t v6 = WTF::MachSendRight::MachSendRight();
    int v7 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = 0;
    *(_DWORD *)(v6 + 4) = v7;
    unint64_t result = WTF::MachSendRight::MachSendRight();
    int v8 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = 0;
    *(_DWORD *)(v5 + 12) = v8;
    *(unsigned char *)(v5 + 16) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t __muloti4(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _DWORD *a5)
{
  *a5 = 0;
  if (!(a1 | a2 ^ 0x8000000000000000))
  {
    if (a3 <= 1) {
      return a3 * a1;
    }
    goto LABEL_13;
  }
  if (!(a3 | a4 ^ 0x8000000000000000))
  {
    if (a1 <= 1) {
      return a3 * a1;
    }
    goto LABEL_13;
  }
  uint64_t v8 = a2 >> 63;
  unsigned long long v9 = __PAIR128__((a2 >> 63) ^ (unint64_t)a2, (a2 >> 63) ^ a1) - __PAIR128__(v8, v8);
  uint64_t v10 = a4 >> 63;
  if ((__int128)(__PAIR128__((a2 >> 63) ^ (unint64_t)a2, (a2 >> 63) ^ a1) - __PAIR128__(v8, v8)) >= 2
    && (__int128)(__PAIR128__((a4 >> 63) ^ (unint64_t)a4, (a4 >> 63) ^ a3) - __PAIR128__(v10, v10)) >= 2)
  {
    if (v8 == v10)
    {
      uint64_t v11 = __udivti3();
      if (__PAIR128__(v12, v11) >= v9) {
        return a3 * a1;
      }
      goto LABEL_13;
    }
    uint64_t v13 = __udivti3();
    if (__PAIR128__(v14, v13) < v9) {
LABEL_13:
    }
      *a5 = 1;
  }
  return a3 * a1;
}

void API::CustomHeaderFields::~CustomHeaderFields(API::CustomHeaderFields *this, void *a2)
{
  uint64_t v2 = (char *)this + 16;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, a2);
  WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2, v3);
}

{
  char *v2;
  void *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)this + 16;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, a2);
  WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2, v3);

  JUMPOUT(0x199740C10);
}

void sub_198795754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_release(v9);
  WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

void sub_198795830(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, CFTypeRef cf)
{
}

void sub_1987958EC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_198795A20(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
}

BOOL WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>(BOOL result, uint64_t a2, unint64_t a3)
{
  if (!a3) {
    return 1;
  }
  unint64_t v3 = *(unsigned int *)(result + 4);
  if (a3 > v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(result + 8);
  if ((*(unsigned char *)(result + 16) & 4) != 0)
  {
    BOOL v5 = 0;
    uint64_t v6 = 0;
    while (v3 != v6)
    {
      if ((*(unsigned __int8 *)(v4 + v6) | 0x20) == *(unsigned __int8 *)(a2 + v6))
      {
        BOOL v5 = ++v6 >= a3;
        if (a3 != v6) {
          continue;
        }
      }
      return v5;
    }
  }
  else
  {
    BOOL v5 = 0;
    uint64_t v7 = 0;
    while (v3 != v7)
    {
      if ((*(unsigned __int16 *)(v4 + 2 * v7) | 0x20) == (unsigned __int16)*(char *)(a2 + v7))
      {
        BOOL v5 = ++v7 >= a3;
        if (a3 != v7) {
          continue;
        }
      }
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTTPHeaderField>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = (uint64_t *)WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  int v5 = v4 + 1;
  uint64_t v6 = (void *)(*(void *)a1 + 16 * v4);
  uint64_t v7 = *v3;
  *unint64_t v3 = 0;
  *uint64_t v6 = v7;
  uint64_t v8 = v3[1];
  v3[1] = 0;
  v6[1] = v8;
  *(_DWORD *)(a1 + 12) = v5;
  return 1;
}

unint64_t WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198795CC8);
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    uint64_t v5 = (WTF::StringImpl *)(*(void *)a1 + 16 * *(unsigned int *)(a1 + 12));
    uint64_t v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::HTTPHeaderField>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::HTTPHeaderField>::move(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  if (result != a2)
  {
    uint64_t v5 = (WTF::StringImpl **)result;
    do
    {
      uint64_t v6 = *v5;
      *uint64_t v5 = 0;
      *a3 = v6;
      unint64_t v7 = v5[1];
      v5[1] = 0;
      a3[1] = v7;
      unint64_t v8 = v5[1];
      v5[1] = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, a2);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      unint64_t result = *v5;
      *uint64_t v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v5 += 2;
      a3 += 2;
    }
    while (v5 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v3 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::HTTPHeaderField>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    unint64_t v3 = (WTF::StringImpl **)result;
    do
    {
      uint64_t v4 = v3[1];
      v3[1] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      unint64_t result = *v3;
      *unint64_t v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 2;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::HTTPHeaderField>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 16 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t API::ObjectImpl<(API::Object::Type)53>::type()
{
  return 53;
}

void sub_198796258(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c30_ZTSN3WTF9RetainPtrI7NSArrayEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN3WTF9RetainPtrI7NSArrayEE(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_1987963F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1987965E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void API::ResourceLoadStatisticsFirstParty::~ResourceLoadStatisticsFirstParty(WTF::StringImpl **this)
{
  int v2 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)this);
  if (WTF::RunLoop::isCurrent(v2))
  {
    uint64_t v4 = this[2];
    this[2] = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

{
  uint64_t vars8;

  API::ResourceLoadStatisticsFirstParty::~ResourceLoadStatisticsFirstParty(this);

  JUMPOUT(0x199740C10);
}

void sub_198796E6C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *(WTF::StringImpl **)(v2 + 16);
  *(void *)(v2 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198797064(_Unwind_Exception *a1)
{
  CFRelease(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void API::ResourceLoadStatisticsThirdParty::~ResourceLoadStatisticsThirdParty(WTF::StringImpl **this)
{
  uint64_t v2 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)this);
  if (WTF::RunLoop::isCurrent(v2))
  {
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 3), v3);
    uint64_t v5 = this[2];
    this[2] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

{
  uint64_t vars8;

  API::ResourceLoadStatisticsThirdParty::~ResourceLoadStatisticsThirdParty(this);

  JUMPOUT(0x199740C10);
}

void sub_19879711C(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 24, a2);
  uint64_t v5 = *(WTF::StringImpl **)(v2 + 16);
  *(void *)(v2 + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::ITPThirdPartyDataForSpecificFirstParty>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 24 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::ITPThirdPartyDataForSpecificFirstParty>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    unsigned int v3 = (WTF::StringImpl **)result;
    do
    {
      CFTypeRef result = *v3;
      *unsigned int v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          CFTypeRef result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 3;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)95>::type()
{
  return 95;
}

void sub_198797570(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198797694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19879781C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_19879792C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1987979E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198797AC0(_Unwind_Exception *exception_object, void *a2)
{
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198797BA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198797C84(_Unwind_Exception *exception_object, void *a2)
{
  if (v2) {
    WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198797E6C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t initBKSHIDEventSetDigitizerInfo(__IOHIDEvent *a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFString *a5, double a6, float a7)
{
  if (byte_1EB3589A1 == 1)
  {
    unint64_t v14 = (void *)qword_1EB3589B0;
  }
  else
  {
    unint64_t v14 = dlopen("/System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices", 2);
    if (!v14)
    {
LABEL_10:
      __break(0xC471u);
      JUMPOUT(0x1987982A0);
    }
    qword_1EB3589B0 = (uint64_t)v14;
    byte_1EB3589A1 = 1;
  }
  uint64_t v15 = (uint64_t (*)(__IOHIDEvent *, unsigned int, unsigned __int8, unsigned __int8, const __CFString *, double, float))dlsym(v14, "BKSHIDEventSetDigitizerInfo");
  softLinkBKSHIDEventSetDigitizerInfo = v15;
  if (!v15) {
    goto LABEL_10;
  }
  v16.n128_f64[0] = a6;
  v17.n128_f32[0] = a7;

  return ((uint64_t (*)(__IOHIDEvent *, uint64_t, uint64_t, uint64_t, const __CFString *, __n128, __n128))v15)(a1, a2, a3, a4, a5, v16, v17);
}

void sub_1987985A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, id *))off_1EE9B25E0[a15])(v15 - 33, &location);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(std::variant<WebKit::ContinueUnsafeLoad,WTF::URL> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1987986A8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t colorForItem(int a1, void *a2)
{
  uint64_t v4 = [MEMORY[0x1E4F428B8] colorWithRed:0.998 green:0.239 blue:0.233 alpha:1.0];
  uint64_t v26 = v4;
  uint64_t v5 = [MEMORY[0x1E4F428B8] colorWithRed:0.118 green:0.118 blue:0.118 alpha:1.0];
  uint64_t v25 = v5;
  uint64_t v6 = [MEMORY[0x1E4F428B8] colorWithRed:0.937 green:0.937 blue:0.937 alpha:1.0];
  uint64_t v7 = [MEMORY[0x1E4F428B8] whiteColor];
  uint64_t v24 = v7;
  uint64_t v9 = objc_msgSend((id)objc_msgSend(a2, "traitCollection"), "horizontalSizeClass");
  switch(a1)
  {
    case 0:
      if (a2)
      {
        [a2 warning];
        uint64_t v11 = v27[0];
      }
      else
      {
        uint64_t v11 = 0;
        v27[0] = 0;
      }
      int v20 = *((_DWORD *)v11 + 22);
      if (v20)
      {
        if (v20 != 1) {
          goto LABEL_54;
        }
        uint64_t v4 = v6;
      }
      v27[0] = 0;
      goto LABEL_43;
    case 1:
      if (a2)
      {
        [a2 warning];
        __n128 v16 = v27[0];
      }
      else
      {
        __n128 v16 = 0;
        v27[0] = 0;
      }
      int v21 = *((_DWORD *)v16 + 22);
      if (v21 == 1) {
        goto LABEL_50;
      }
      if (v21) {
        goto LABEL_54;
      }
      if (v9 == 1) {
        uint64_t v6 = v4;
      }
      else {
        uint64_t v6 = v7;
      }
LABEL_50:
      v27[0] = 0;
      WTF::RefCounted<WebKit::BrowsingWarning>::deref(v16, v8);
      return v6;
    case 2:
    case 3:
      if (a2)
      {
        [a2 warning];
        uint64_t v11 = v23;
      }
      else
      {
        uint64_t v11 = 0;
      }
      v27[4] = (WTF *)&v25;
      v27[5] = (WTF *)&v26;
      int v17 = *((_DWORD *)v11 + 22);
      if (v17 == 1)
      {
        uint64_t v19 = 5;
        if (a1 == 3) {
          uint64_t v19 = 4;
        }
        unsigned int v18 = (uint64_t *)v27[v19];
      }
      else
      {
        if (v17)
        {
          uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_55;
        }
        unsigned int v18 = &v26;
        if (v9 == 1) {
          unsigned int v18 = &v24;
        }
      }
      uint64_t v4 = *v18;
LABEL_43:
      WTF::RefCounted<WebKit::BrowsingWarning>::deref(v11, v8);
      return v4;
    case 4:
    case 5:
    case 7:
      if (a2)
      {
        [a2 warning];
        unint64_t v10 = v27[0];
      }
      else
      {
        unint64_t v10 = 0;
        v27[0] = 0;
      }
      int v12 = *((_DWORD *)v10 + 22);
      if (v12 == 1) {
        goto LABEL_10;
      }
      if (v12) {
        goto LABEL_54;
      }
      uint64_t v5 = v7;
      if (v9 == 1)
      {
LABEL_10:
        v27[0] = 0;
      }
      else
      {
        uint64_t v5 = [MEMORY[0x1E4F428B8] darkTextColor];
        unint64_t v10 = v27[0];
        v27[0] = 0;
        if (!v10) {
          return v5;
        }
      }
      WTF::RefCounted<WebKit::BrowsingWarning>::deref(v10, v8);
      return v5;
    case 6:
      [a2 warning];
      unint64_t v14 = v27[0];
      int v15 = *((_DWORD *)v27[0] + 22);
      if (v15 == 1)
      {
        uint64_t v7 = v5;
      }
      else if (v15)
      {
LABEL_54:
        uint64_t result = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_55:
        __break(1u);
        return result;
      }
      if (v9 == 1)
      {
        v27[0] = 0;
      }
      else
      {
        uint64_t v7 = [a2 tintColor];
        unint64_t v14 = v27[0];
        v27[0] = 0;
        if (!v14) {
          return v7;
        }
      }
      WTF::RefCounted<WebKit::BrowsingWarning>::deref(v14, v13);
      return v7;
    default:
      return 0;
  }
}

void sub_1987989CC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13)
{
  if (a13) {
    WTF::RefCounted<WebKit::BrowsingWarning>::deref(a13, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_198799368(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf,_DWORD *a21)
{
  if (a21) {
    WTF::RefCounted<WebKit::BrowsingWarning>::deref(a21, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t makeLabel(NSAttributedString *a1, uint64_t a2)
{
  uint64_t v4 = objc_opt_new();
  [v4 setAttributedText:a2];
  [v4 setLineBreakMode:0];
  [v4 setNumberOfLines:0];
  uint64_t result = [v4 setAccessibilityTraits:*MEMORY[0x1E4F43500]];
  a1->super.isa = (Class)v4;
  return result;
}

void sub_1987994C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void *makeButton(int a1, __CFString *a2, uint64_t a3)
{
  v16[4] = *MEMORY[0x1E4F143B8];
  if (a1 == 7)
  {
    WebCore::copyLocalizedString((uint64_t *)&arg, (WebCore *)@"Continue", a2);
    CFTypeRef v6 = arg;
    if (arg) {
      goto LABEL_8;
    }
  }
  else if (a1 == 5)
  {
    WebCore::copyLocalizedString((uint64_t *)&arg, (WebCore *)@"Show Details", a2);
    CFTypeRef v6 = arg;
    if (arg) {
      goto LABEL_8;
    }
  }
  else
  {
    WebCore::copyLocalizedString((uint64_t *)&arg, (WebCore *)@"Go Back", a2);
    CFTypeRef v6 = arg;
    if (arg)
    {
LABEL_8:
      CFAutorelease(v6);
      CFTypeRef v7 = arg;
      goto LABEL_9;
    }
  }
  CFTypeRef v7 = 0;
LABEL_9:
  unint64_t v8 = (void *)[MEMORY[0x1E4F427E0] buttonWithType:1];
  id v9 = objc_alloc(MEMORY[0x1E4F28B18]);
  uint64_t v10 = *MEMORY[0x1E4F425C8];
  v16[0] = &unk_1EEA529D8;
  uint64_t v11 = *MEMORY[0x1E4F425C0];
  v15[0] = v10;
  v15[1] = v11;
  v16[1] = [MEMORY[0x1E4F428B8] whiteColor];
  v15[2] = *MEMORY[0x1E4F42510];
  v16[2] = colorForItem(a1, a2);
  v15[3] = *MEMORY[0x1E4F42508];
  v16[3] = [MEMORY[0x1E4F42A30] preferredFontForTextStyle:*MEMORY[0x1E4F43870]];
  int v12 = (const void *)objc_msgSend(v9, "initWithString:attributes:", v7, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v16, v15, 4));
  [v8 setAttributedTitle:v12 forState:0];
  [v8 addTarget:a2 action:a3 forControlEvents:64];
  if (v12) {
    CFRelease(v12);
  }
  return v8;
}

void sub_1987996DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198799BC8(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    CFRelease(v3);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      CFRelease(v1);
      goto LABEL_8;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  CFRelease(v2);
  if (!v1) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_198799F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_198799FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9B25E0[a15])(v15 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19879A098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9B25E0[a15])(v15 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19879A1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9B25E0[a15])(v15 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19879A474(_Unwind_Exception *exception_object)
{
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit18ContinueUnsafeLoadEN3WTF3URLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t std::__throw_bad_variant_access[abi:sn180100]()
{
  std::__libcpp_verbose_abort("bad_variant_access was thrown in -fno-exceptions mode");
  return WTF::RefCounted<WebKit::BrowsingWarning>::deref(v0);
}

_DWORD *WTF::RefCounted<WebKit::BrowsingWarning>::deref(_DWORD *this, WTF::StringImpl *a2)
{
  uint64_t v2 = (uint64_t)this;
  if (*this == 1)
  {
    uint64_t v3 = this[22];
    if (v3 != -1) {
      ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit15BrowsingWarning23SafeBrowsingWarningDataENS7_26HTTPSNavigationFailureDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v3])(&v8, this + 20);
    }
    *(_DWORD *)(v2 + 88) = -1;
    uint64_t v4 = *(const void **)(v2 + 72);
    *(void *)(v2 + 72) = 0;
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = *(WTF::StringImpl **)(v2 + 56);
    *(void *)(v2 + 56) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    CFTypeRef v6 = *(WTF::StringImpl **)(v2 + 48);
    *(void *)(v2 + 48) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, a2);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    CFTypeRef v7 = *(WTF::StringImpl **)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, a2);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    return (_DWORD *)WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*this;
  }
  return this;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit15BrowsingWarning23SafeBrowsingWarningDataENS9_26HTTPSNavigationFailureDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, const void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_19879A8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  if (a15 != -1) {
    ((void (*)(uint64_t, char *))off_1EE9B25E0[a15])(v15 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19879C2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

id WebKit::objectForKey<NSNumber>(void *a1, uint64_t a2)
{
  uint64_t v2 = [a1 objectForKeyedSubscript:a2];
  objc_opt_class();
  uint64_t v3 = WTF::dynamic_objc_cast<NSNumber>(v2);

  return v3;
}

void sub_19879C670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t isArrayOfDomainsValid(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 count])
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    id v2 = v1;
    uint64_t v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v3)
    {
      uint64_t v4 = *(void *)v9;
      while (2)
      {
        uint64_t v5 = 0;
        do
        {
          if (*(void *)v9 != v4) {
            objc_enumerationMutation(v2);
          }
          if ((objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * v5), "canBeConvertedToEncoding:", 1, (void)v8) & 1) == 0)
          {
            uint64_t v6 = 0;
            goto LABEL_12;
          }
          ++v5;
        }
        while (v3 != v5);
        uint64_t v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
        if (v3) {
          continue;
        }
        break;
      }
    }
    uint64_t v6 = 1;
LABEL_12:
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_19879C79C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t isArrayOfExcludedDomainsValid(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v1 = a1;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v8;
    while (2)
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v8 != v3) {
          objc_enumerationMutation(v1);
        }
        if ((objc_msgSend(*(id *)(*((void *)&v7 + 1) + 8 * v4), "canBeConvertedToEncoding:", 1, (void)v7) & 1) == 0)
        {
          uint64_t v5 = 0;
          goto LABEL_11;
        }
        ++v4;
      }
      while (v2 != v4);
      uint64_t v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
  uint64_t v5 = 1;
LABEL_11:

  return v5;
}

void sub_19879C8D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19879CC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19879CD98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19879CE3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19879D054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19879D214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19879DB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_19879DE14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19879DED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19879DF98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19879E14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_19879E268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19879E4A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19879E608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t priorityForRuleType(NSString *a1)
{
  id v1 = a1;
  if ([(NSString *)v1 isEqualToString:@"allow"])
  {
    uint64_t v2 = 5;
  }
  else if ([(NSString *)v1 isEqualToString:@"allowAllRequests"])
  {
    uint64_t v2 = 4;
  }
  else if ([(NSString *)v1 isEqualToString:@"block"])
  {
    uint64_t v2 = 3;
  }
  else if ([(NSString *)v1 isEqualToString:@"upgradeScheme"])
  {
    uint64_t v2 = 2;
  }
  else if ([(NSString *)v1 isEqualToString:@"redirect"])
  {
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = [(NSString *)v1 isEqualToString:@"modifyHeaders"] - 1;
  }

  return v2;
}

void sub_19879E72C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19879E878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<NSNumber>(void *a1)
{
  id v1 = a1;
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_19879E968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<NSDictionary>(void *a1)
{
  id v1 = a1;
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_19879E9D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<NSString>(void *a1)
{
  id v1 = a1;
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_19879EA40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19879EB50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19879EC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19879ED9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  CFRelease(v14);
  _Unwind_Resume(a1);
}

void WTF::WeakObjCPtrArc<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::get(void *a1, id *location)
{
  id v3 = objc_loadWeakRetained(location);
  *a1 = v3;
  cf = v3;
  if (v3) {
    CFRetain(v3);
  }
}

void sub_19879EE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_48c77_ZTSN3WTF14WeakObjCPtrArcI47_WKWebExtensionDeclarativeNetRequestSQLiteStoreEE(uint64_t a1, uint64_t a2)
{
}

void __destroy_helper_block_ea8_48c77_ZTSN3WTF14WeakObjCPtrArcI47_WKWebExtensionDeclarativeNetRequestSQLiteStoreEE(uint64_t a1)
{
}

void sub_19879EF9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19879F5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *cf, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,const void *a56)
{
  if (a56) {
    CFRelease(a56);
  }
  _Unwind_Resume(a1);
}

id WebKit::SQLiteDatabaseFetch<>(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [[_WKWebExtensionSQLiteStatement alloc] initWithDatabase:v3 query:v4];
  uint64_t v6 = [(_WKWebExtensionSQLiteStatement *)v5 fetch];

  return v6;
}

void sub_19879F7A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19879F8FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19879FC4C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19879FF00(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_40c77_ZTSN3WTF14WeakObjCPtrArcI47_WKWebExtensionDeclarativeNetRequestSQLiteStoreEE(uint64_t a1, uint64_t a2)
{
}

void __destroy_helper_block_ea8_40c77_ZTSN3WTF14WeakObjCPtrArcI47_WKWebExtensionDeclarativeNetRequestSQLiteStoreEE(uint64_t a1)
{
}

void sub_1987A0014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A02A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1987A0594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1987A07C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A093C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A0A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::_SQLiteDatabaseExecuteAndReturnError<>(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  id v13 = 0;
  long long v7 = [[_WKWebExtensionSQLiteStatement alloc] initWithDatabase:v5 query:v6 error:&v13];
  id v8 = v13;
  long long v9 = v8;
  if (v7)
  {
    uint64_t v10 = [(_WKWebExtensionSQLiteStatement *)v7 execute];
    [(_WKWebExtensionSQLiteStatement *)v7 invalidate];
    if ((v10 - 100) >= 2 && v10 != 0) {
      objc_msgSend(v5, "reportErrorWithCode:statement:error:", v10, -[_WKWebExtensionSQLiteStatement handle](v7, "handle"), a2);
    }
  }
  else
  {
    if (a2) {
      *a2 = v8;
    }
    uint64_t v10 = [v9 code];
  }

  return v10;
}

void sub_1987A0B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A0F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1987A11D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1987A1628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1987A1758(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1987A1940(_Unwind_Exception *a1)
{
  long long v9 = v8;

  _Unwind_Resume(a1);
}

void sub_1987A1BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1987A1DD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A1EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A1FC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A215C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A22B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A26B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A2960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A2B8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A2DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1987A2F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  CFRelease(v14);
  _Unwind_Resume(a1);
}

void WTF::WeakObjCPtrArc<_WKWebExtensionRegisteredScriptsSQLiteStore>::get(void *a1, id *location)
{
  id v3 = objc_loadWeakRetained(location);
  *a1 = v3;
  cf = v3;
  if (v3) {
    CFRetain(v3);
  }
}

void sub_1987A2FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_48c73_ZTSN3WTF14WeakObjCPtrArcI43_WKWebExtensionRegisteredScriptsSQLiteStoreEE(uint64_t a1, uint64_t a2)
{
}

void __destroy_helper_block_ea8_48c73_ZTSN3WTF14WeakObjCPtrArcI43_WKWebExtensionRegisteredScriptsSQLiteStoreEE(uint64_t a1)
{
}

void sub_1987A3134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A3590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, CFTypeRef cf, uint64_t a14, uint64_t a15)
{
  CFRelease(cf);
  _Unwind_Resume(a1);
}

void sub_1987A37D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A386C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A3B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

void sub_1987A3D64(_Unwind_Exception *a1)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_40c73_ZTSN3WTF14WeakObjCPtrArcI43_WKWebExtensionRegisteredScriptsSQLiteStoreEE(uint64_t a1, uint64_t a2)
{
}

void __destroy_helper_block_ea8_40c73_ZTSN3WTF14WeakObjCPtrArcI43_WKWebExtensionRegisteredScriptsSQLiteStoreEE(uint64_t a1)
{
}

void sub_1987A3E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A40B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1987A4334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A450C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A4634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A46BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A47C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A490C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A4B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A4C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A4D50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A4E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A5094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A51BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A5334(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1987A53B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A5498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A5520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A55A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A5630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A57F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A5874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A5A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A5BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A5D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A5E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)_WKWebExtensionSQLiteStatement;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void sub_1987A5F74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A5FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A6068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A6140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A625C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A6378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A64CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A660C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A6734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A6864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A69C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A6AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A6C48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A6D78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A6F1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A6F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)_WKWebExtensionSQLiteStore;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1987A7090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A731C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A73EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A7764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A7A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  _Unwind_Resume(a1);
}

void sub_1987A7C9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A7E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A8008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A8160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A8200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A8314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987A861C(_Unwind_Exception *a1)
{
  CFRelease(v2);
  _Unwind_Resume(a1);
}

void WTF::WeakObjCPtrArc<_WKWebExtensionSQLiteStore>::get(void *a1, id *location)
{
  id v3 = objc_loadWeakRetained(location);
  *a1 = v3;
  cf = v3;
  if (v3) {
    CFRetain(v3);
  }
}

void sub_1987A86EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_48c56_ZTSN3WTF14WeakObjCPtrArcI26_WKWebExtensionSQLiteStoreEE(uint64_t a1, uint64_t a2)
{
}

void __destroy_helper_block_ea8_48c56_ZTSN3WTF14WeakObjCPtrArcI26_WKWebExtensionSQLiteStoreEE(uint64_t a1)
{
}

void sub_1987A8B4C(_Unwind_Exception *a1)
{
  CFRelease(v2);
  _Unwind_Resume(a1);
}

void sub_1987A8F88(_Unwind_Exception *a1)
{
  CFRelease(v2);
  _Unwind_Resume(a1);
}

uint64_t WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v3 = a2[1];
  BOOL v4 = v3 != 0;
  unint64_t v5 = v3 - 1;
  if (!v4) {
    unint64_t v5 = 0;
  }
  uint64_t v7 = *a2;
  if (v5 >> 31)
  {
    uint64_t result = 124;
    __break(0xC471u);
  }
  else
  {
    int v8 = v5;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)&v9, (uint64_t)&v7, a3);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)result;
  if (*(void *)result) {
    int v5 = *(_DWORD *)(v4 + 4);
  }
  else {
    int v5 = 0;
  }
  int v6 = *(_DWORD *)(a2 + 8);
  if ((v6 | v5) < 0 || (uint64_t result = (v5 + v6), __OFADD__(v5, v6)))
  {
    *a3 = 0;
  }
  else
  {
    BOOL v7 = !v4 || (*(unsigned char *)(v4 + 16) & 4) != 0;
    uint64_t result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v7, v4, *(int8x16_t **)a2, *(void *)(a2 + 8), &v8);
    *a3 = v8;
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int8x16_t *a4@<X3>, unsigned int a5@<W4>, void *a6@<X8>)
{
  int v9 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        long long v11 = v14;
        if (v14)
        {
          *unint64_t v14 = 2;
          v11[1] = v9;
          *((void *)v11 + 1) = v11 + 5;
          void v11[4] = 4;
          unint64_t v14 = (_DWORD *)a3;
          uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v14, (char *)v11 + 20);
          int64_t v12 = (int64_t)v14;
          if (v14) {
            int64_t v12 = v14[1];
          }
          if (a5)
          {
            uint64_t result = (uint64_t)v11 + v12 + 20;
            if (a5 == 1) {
              *(unsigned char *)uint64_t result = a4->i8[0];
            }
            else {
              uint64_t result = (uint64_t)memcpy((void *)result, a4, a5);
            }
          }
        }
        goto LABEL_10;
      }
LABEL_13:
      long long v11 = 0;
      goto LABEL_10;
    }
LABEL_14:
    long long v11 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_10;
  }
  if (!result) {
    goto LABEL_14;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_13;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  long long v11 = v14;
  if (v14)
  {
    id v13 = (char *)(v14 + 5);
    *unint64_t v14 = 2;
    v11[1] = v9;
    *((void *)v11 + 1) = v11 + 5;
    void v11[4] = 0;
    uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v13, a3, a4, a5);
  }
LABEL_10:
  *a6 = v11;
  return result;
}

void sub_1987A92D0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, int8x16_t *a3, int a4)
{
  uint64_t v20 = a2;
  uint64_t result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v20, __dst);
  uint64_t v8 = v20;
  if (v20) {
    uint64_t v8 = *(unsigned int *)(v20 + 4);
  }
  int v9 = &__dst[2 * v8];
  uint64_t v10 = &v9[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    long long v11 = &v9[2 * (a4 & 0xFFFFFFC0)];
    long long v12 = 0uLL;
    do
    {
      v21.val[0] = *a3;
      int8x16_t v13 = a3[1];
      v22.val[0] = a3[2];
      int8x16_t v14 = a3[3];
      a3 += 4;
      int8x16_t v15 = v14;
      v22.val[1] = 0uLL;
      v23.val[0] = v13;
      v21.val[1] = 0uLL;
      __n128 v16 = v9;
      vst2q_s8(v16, v21);
      v16 += 32;
      v23.val[1] = 0uLL;
      vst2q_s8(v16, v23);
      int v17 = v9 + 64;
      vst2q_s8(v17, v22);
      unsigned int v18 = v9 + 96;
      vst2q_s8(v18, *(int8x16x2_t *)(&v12 - 1));
      v9 += 128;
    }
    while (v9 != v11);
    int v9 = v11;
  }
  while (v9 != v10)
  {
    __int16 v19 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)int v9 = v19;
    v9 += 2;
  }
  return result;
}

uint64_t *WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(uint64_t *result, char *__dst)
{
  uint64_t v2 = *result;
  if (*result)
  {
    uint64_t v3 = *(int8x16_t **)(v2 + 8);
    uint64_t v4 = *(unsigned int *)(v2 + 4);
    if ((*(unsigned char *)(v2 + 16) & 4) != 0)
    {
      int v5 = &__dst[2 * v4];
      if (v4 >= 0x40)
      {
        int v6 = &__dst[2 * (v4 & 0xFFFFFFC0)];
        long long v7 = 0uLL;
        do
        {
          v15.val[0] = *v3;
          int8x16_t v8 = v3[1];
          v16.val[0] = v3[2];
          int8x16_t v9 = v3[3];
          v3 += 4;
          int8x16_t v10 = v9;
          v16.val[1] = 0uLL;
          v17.val[0] = v8;
          v15.val[1] = 0uLL;
          long long v11 = __dst;
          vst2q_s8(v11, v15);
          v11 += 32;
          v17.val[1] = 0uLL;
          vst2q_s8(v11, v17);
          long long v12 = __dst + 64;
          vst2q_s8(v12, v16);
          int8x16_t v13 = __dst + 96;
          vst2q_s8(v13, *(int8x16x2_t *)(&v7 - 1));
          __dst += 128;
        }
        while (__dst != v6);
        __dst = v6;
      }
      while (__dst != v5)
      {
        __int16 v14 = v3->u8[0];
        uint64_t v3 = (int8x16_t *)((char *)v3 + 1);
        *(_WORD *)__dst = v14;
        __dst += 2;
      }
    }
    else if (v4)
    {
      if (v4 == 1) {
        *(_WORD *)__dst = v3->i16[0];
      }
      else {
        return (uint64_t *)memcpy(__dst, v3, 2 * v4);
      }
    }
  }
  return result;
}

void sub_1987A97F8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WTF::WeakObjCPtrArc<_WKWebExtensionStorageSQLiteStore>::get(void *a1, id *location)
{
  id v3 = objc_loadWeakRetained(location);
  *a1 = v3;
  cf = v3;
  if (v3) {
    CFRetain(v3);
  }
}

void sub_1987A9894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_56c63_ZTSN3WTF14WeakObjCPtrArcI33_WKWebExtensionStorageSQLiteStoreEE(uint64_t a1, uint64_t a2)
{
}

void __destroy_helper_block_ea8_56c63_ZTSN3WTF14WeakObjCPtrArcI33_WKWebExtensionStorageSQLiteStoreEE(uint64_t a1)
{
}

void sub_1987A9E2C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1987AA064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987AA154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1987AA2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987AA56C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1987AAA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

void sub_1987AAB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1987AAF70(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

id rowFilterStringFromRowKeys(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v1 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v9, "count"));
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id obj = v9;
  uint64_t v2 = [obj countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v12 != v3) {
          objc_enumerationMutation(obj);
        }
        int v5 = [*(id *)(*((void *)&v11 + 1) + 8 * i) stringByReplacingOccurrencesOfString:@"'" withString:@"''"];
        int v6 = [NSString stringWithFormat:@"'%@'", v5];
        [v1 addObject:v6];
      }
      uint64_t v2 = [obj countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v2);
  }

  long long v7 = [v1 componentsJoinedByString:@","];

  return v7;
}

void sub_1987AB198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1987AB4FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987AB5E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987AB770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987AB94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987ABA78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987ABBC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987ABD58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987ABDE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987AC520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<NSArray>(void *a1)
{
  id v1 = a1;
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_1987AC698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987ACA84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987AD1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_1987AD314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987AD4F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _WKWebExtensionWebRequestResourceTypeFromResourceLoadInfo(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 113);
  uint64_t result = 2;
  switch(v1)
  {
    case 0:
      uint64_t result = 12;
      break;
    case 1:
      uint64_t result = 14;
      break;
    case 2:
      uint64_t result = 9;
      break;
    case 3:
      uint64_t result = *(unsigned __int8 *)(a1 + 48) == 0;
      break;
    case 4:
    case 13:
      uint64_t result = 7;
      break;
    case 5:
      uint64_t result = 5;
      break;
    case 6:
      uint64_t result = 4;
      break;
    case 7:
      uint64_t result = 10;
      break;
    case 8:
      uint64_t result = 6;
      break;
    case 10:
      uint64_t result = 8;
      break;
    case 11:
      uint64_t result = 3;
      break;
    case 12:
      return result;
    case 14:
      uint64_t result = 13;
      break;
    default:
      uint64_t result = 15;
      break;
  }
  return result;
}

void sub_1987AD834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987ADEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1987AE184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::AppAttestInternalLibrary(WebKit *this)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit24AppAttestInternalLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  char v3 = 0;
  if (qword_1EB358A90 != -1) {
    dispatch_once(&qword_1EB358A90, block);
  }
  return _MergedGlobals_41;
}

uint64_t ___ZN6WebKit24AppAttestInternalLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AppAttestInternal.framework/AppAttestInternal", 2);
  _MergedGlobals_41 = result;
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = result == 0;
  }
  if (v3)
  {
    uint64_t result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initAppAttestInternalAppAttest_WebAuthentication_IsSupported(WebKit *this)
{
  if (WebKit::initAppAttestInternalAppAttest_WebAuthentication_IsSupported(void)::once != -1) {
    dispatch_once(&WebKit::initAppAttestInternalAppAttest_WebAuthentication_IsSupported(void)::once, &__block_literal_global_2);
  }
  int v1 = (uint64_t (*)(void))WebKit::softLinkAppAttestInternalAppAttest_WebAuthentication_IsSupported[0];

  return v1();
}

uint64_t ___ZN6WebKitL60initAppAttestInternalAppAttest_WebAuthentication_IsSupportedEv_block_invoke(WebKit *a1)
{
  int v1 = (void *)WebKit::AppAttestInternalLibrary(a1);
  uint64_t result = (uint64_t)dlsym(v1, "AppAttest_WebAuthentication_IsSupported");
  WebKit::softLinkAppAttestInternalAppAttest_WebAuthentication_IsSupported[0] = (uint64_t (*)(WebKit *__hidden))result;
  if (!result)
  {
    uint64_t result = 35;
    __break(0xC471u);
  }
  return result;
}

void sub_1987AE534(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

WebPushD::ApplePushServiceConnection *WebPushD::ApplePushServiceConnection::ApplePushServiceConnection(WebPushD::ApplePushServiceConnection *this, const WTF::String *a2)
{
  *((void *)this + 9) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 10) = 0;
  uint64_t v4 = (id *)((char *)this + 80);
  *((void *)this + 13) = 0;
  *(void *)this = &unk_1EE9B2918;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((void *)this + 14) = 0;
  id v5 = objc_alloc(MEMORY[0x1E4F4E1E8]);
  if (*(void *)a2) {
    int v6 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    int v6 = &stru_1EEA10550;
  }
  uint64_t v7 = [v5 initWithEnvironmentName:*MEMORY[0x1E4F4E1D0] namedDelegatePort:v6 queue:MEMORY[0x1E4F14428]];
  id v8 = *v4;
  *uint64_t v4 = (id)v7;
  if (v8) {
    CFRelease(v8);
  }
  id v9 = [[_WKAPSConnectionDelegate alloc] initWithConnection:this];
  int8x16_t v10 = (const void *)*((void *)this + 11);
  *((void *)this + 11) = v9;
  if (v10)
  {
    CFRelease(v10);
    id v9 = (_WKAPSConnectionDelegate *)*((void *)this + 11);
  }
  [*v4 setDelegate:v9];
  return this;
}

void sub_1987AE718(_Unwind_Exception *a1, void *a2)
{
  uint64_t v6 = *((void *)v2 + 14);
  if (v6) {
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v6, a2);
  }
  if (*v4) {
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(*v4, a2);
  }
  uint64_t v7 = (const void *)*((void *)v2 + 11);
  *((void *)v2 + 11) = 0;
  if (v7) {
    CFRelease(v7);
  }
  id v8 = *v3;
  *BOOL v3 = 0;
  if (v8) {
    CFRelease(v8);
  }
  WebPushD::PushServiceConnection::~PushServiceConnection(v2);
  _Unwind_Resume(a1);
}

void WebPushD::PushServiceConnection::~PushServiceConnection(WebPushD::PushServiceConnection *this)
{
  *(void *)this = &unk_1EE9B9EF0;
  unint64_t v2 = *((void *)this + 6);
  unint64_t v3 = *((void *)this + 7);
  uint64_t v4 = *((void *)this + 8);
  if (v2 <= v3)
  {
    uint64_t v7 = v4 + 16 * v3;
    uint64_t v6 = v4 + 16 * v2;
  }
  else
  {
    WTF::VectorDestructor<true,std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>>::destruct(v4, v4 + 16 * v3);
    uint64_t v5 = *((void *)this + 8);
    uint64_t v6 = v5 + 16 * *((void *)this + 6);
    uint64_t v7 = v5 + 16 * *((unsigned int *)this + 18);
  }
  WTF::VectorDestructor<true,std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>>::destruct(v6, v7);
  id v9 = (WTF *)*((void *)this + 8);
  if (v9)
  {
    *((void *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v9, v8);
  }
  uint64_t v10 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  long long v11 = (WTF *)*((void *)this + 3);
  if (v11)
  {
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v11, v8);
  }
  uint64_t v12 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v8);
}

void WebPushD::ApplePushServiceConnection::~ApplePushServiceConnection(id *this)
{
  [this[10] setDelegate:0];
  uint64_t v3 = (uint64_t)this[14];
  if (v3) {
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v3, v2);
  }
  uint64_t v4 = (uint64_t)this[13];
  if (v4) {
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v4, v2);
  }
  id v5 = this[11];
  this[11] = 0;
  if (v5) {
    CFRelease(v5);
  }
  id v6 = this[10];
  this[10] = 0;
  if (v6) {
    CFRelease(v6);
  }

  WebPushD::PushServiceConnection::~PushServiceConnection((WebPushD::PushServiceConnection *)this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebPushD::ApplePushServiceConnection::~ApplePushServiceConnection(this);

  WTF::fastFree(v1, v2);
}

void sub_1987AE8F4(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = *((void *)v2 + 14);
  if (v4) {
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = *((void *)v2 + 13);
  if (v5) {
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v5, a2);
  }
  id v6 = (const void *)*((void *)v2 + 11);
  *((void *)v2 + 11) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)*((void *)v2 + 10);
  *((void *)v2 + 10) = 0;
  if (v7) {
    CFRelease(v7);
  }
  WebPushD::PushServiceConnection::~PushServiceConnection(v2);
  _Unwind_Resume(a1);
}

void WebPushD::ApplePushServiceConnection::subscribe(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  id v9 = (uint64_t *)(a1 + 104);
  uint64_t v8 = *(void *)(a1 + 104);
  int v10 = *(_DWORD *)(a1 + 96);
  int v11 = v10 + 1;
  *(_DWORD *)(a1 + 96) = v10 + 1;
  if (v8
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand((uint64_t *)(a1 + 104)),
        (uint64_t v8 = *v9) != 0))
  {
    int v12 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v12 = 0;
  }
  unsigned int v13 = 9 * ((v10 - (v11 << 15)) ^ ((v10 - (v11 << 15)) >> 10));
  unsigned int v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
  unsigned int v15 = v12 & (v14 ^ HIWORD(v14));
  uint64_t v16 = v8 + 16 * v15;
  int v17 = *(_DWORD *)v16;
  if (!*(_DWORD *)v16)
  {
LABEL_12:
    *(_DWORD *)uint64_t v16 = v11;
    uint64_t v20 = *a4;
    *a4 = 0;
    uint64_t v21 = *(void *)(v16 + 8);
    *(void *)(v16 + 8) = v20;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    uint64_t v22 = *v9;
    if (*v9) {
      int v23 = *(_DWORD *)(v22 - 12) + 1;
    }
    else {
      int v23 = 1;
    }
    *(_DWORD *)(v22 - 12) = v23;
    uint64_t v24 = *v9;
    if (*v9) {
      int v25 = *(_DWORD *)(v24 - 12);
    }
    else {
      int v25 = 0;
    }
    uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
    unint64_t v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 > 2 * v26) {
        goto LABEL_23;
      }
    }
    else if (3 * v27 > 4 * v26)
    {
      goto LABEL_23;
    }
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(v9);
    goto LABEL_23;
  }
  uint64_t v18 = 0;
  int v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1) {
      uint64_t v18 = v16;
    }
    unsigned int v15 = (v15 + v19) & v12;
    uint64_t v16 = v8 + 16 * v15;
    int v17 = *(_DWORD *)v16;
    ++v19;
    if (!*(_DWORD *)v16)
    {
      if (v18)
      {
        *(_DWORD *)uint64_t v18 = 0;
        *(void *)(v18 + 8) = 0;
        --*(_DWORD *)(*v9 - 16);
        uint64_t v16 = v18;
      }
      goto LABEL_12;
    }
  }
LABEL_23:
  uint64_t v28 = *(void **)(a1 + 80);
  WebPushD::makeTokenInfo(&cf, a2, a3);
  CFTypeRef v29 = cf;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v30 = *(atomic_uint **)(a1 + 8);
  if (v30) {
    atomic_fetch_add(v30, 1u);
  }
  uint64_t v31 = malloc_type_malloc(0x38uLL, 0x10E0040F12D5055uLL);
  *uint64_t v31 = MEMORY[0x1E4F14398];
  v31[1] = 50331650;
  v31[2] = WTF::BlockPtr<void ()(APSURLToken *,NSError *)>::fromCallable<WebPushD::ApplePushServiceConnection::subscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(NSString *,NSError *)> &&)::$_0>(WebPushD::ApplePushServiceConnection::subscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(NSString *,NSError *)> &&)::$_0)::{lambda(void *,APSURLToken *,NSError *)#1}::__invoke;
  v31[3] = &WTF::BlockPtr<void ()(APSURLToken *,NSError *)>::fromCallable<WebPushD::ApplePushServiceConnection::subscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(NSString *,NSError *)> &&)::$_0>(WebPushD::ApplePushServiceConnection::subscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(NSString *,NSError *)> &&)::$_0)::descriptor;
  v31[4] = a1;
  v31[5] = v30;
  *((_DWORD *)v31 + 12) = v11;
  [v28 requestURLTokenForInfo:v29 completion:v31];
  _Block_release(v31);
  CFTypeRef v32 = cf;
  if (cf)
  {
    CFRelease(v32);
  }
}

void sub_1987AEBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  _Block_release(v10);
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

void WebPushD::makeTokenInfo(void *a1, void *a2, uint64_t a3)
{
  id v6 = objc_alloc(MEMORY[0x1E4F4E1F0]);
  if (*a2) {
    uint64_t v7 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v7 = &stru_1EEA10550;
  }
  uint64_t v8 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:*(void *)a3 length:*(unsigned int *)(a3 + 12)];
  *a1 = [v6 initWithTopic:v7 vapidPublicKey:v8];
  if (v8)
  {
    CFRelease(v8);
  }
}

void sub_1987AED1C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebPushD::ApplePushServiceConnection::unsubscribe(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  id v9 = (uint64_t *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 112);
  int v10 = *(_DWORD *)(a1 + 96);
  int v11 = v10 + 1;
  *(_DWORD *)(a1 + 96) = v10 + 1;
  if (v8
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand((uint64_t *)(a1 + 112)),
        (uint64_t v8 = *v9) != 0))
  {
    int v12 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v12 = 0;
  }
  unsigned int v13 = 9 * ((v10 - (v11 << 15)) ^ ((v10 - (v11 << 15)) >> 10));
  unsigned int v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
  unsigned int v15 = v12 & (v14 ^ HIWORD(v14));
  uint64_t v16 = v8 + 16 * v15;
  int v17 = *(_DWORD *)v16;
  if (!*(_DWORD *)v16)
  {
LABEL_12:
    *(_DWORD *)uint64_t v16 = v11;
    uint64_t v20 = *a4;
    *a4 = 0;
    uint64_t v21 = *(void *)(v16 + 8);
    *(void *)(v16 + 8) = v20;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    uint64_t v22 = *v9;
    if (*v9) {
      int v23 = *(_DWORD *)(v22 - 12) + 1;
    }
    else {
      int v23 = 1;
    }
    *(_DWORD *)(v22 - 12) = v23;
    uint64_t v24 = *v9;
    if (*v9) {
      int v25 = *(_DWORD *)(v24 - 12);
    }
    else {
      int v25 = 0;
    }
    uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
    unint64_t v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 > 2 * v26) {
        goto LABEL_23;
      }
    }
    else if (3 * v27 > 4 * v26)
    {
      goto LABEL_23;
    }
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(v9);
    goto LABEL_23;
  }
  uint64_t v18 = 0;
  int v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1) {
      uint64_t v18 = v16;
    }
    unsigned int v15 = (v15 + v19) & v12;
    uint64_t v16 = v8 + 16 * v15;
    int v17 = *(_DWORD *)v16;
    ++v19;
    if (!*(_DWORD *)v16)
    {
      if (v18)
      {
        *(_DWORD *)uint64_t v18 = 0;
        *(void *)(v18 + 8) = 0;
        --*(_DWORD *)(*v9 - 16);
        uint64_t v16 = v18;
      }
      goto LABEL_12;
    }
  }
LABEL_23:
  uint64_t v28 = *(void **)(a1 + 80);
  WebPushD::makeTokenInfo(&cf, a2, a3);
  CFTypeRef v29 = cf;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  uint64_t v30 = *(atomic_uint **)(a1 + 8);
  if (v30) {
    atomic_fetch_add(v30, 1u);
  }
  uint64_t v31 = malloc_type_malloc(0x38uLL, 0x10E0040F12D5055uLL);
  *uint64_t v31 = MEMORY[0x1E4F14398];
  v31[1] = 50331650;
  v31[2] = WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebPushD::ApplePushServiceConnection::unsubscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,NSError *)> &&)::$_0>(WebPushD::ApplePushServiceConnection::unsubscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,NSError *)> &&)::$_0)::{lambda(void *,BOOL,NSError *)#1}::__invoke;
  v31[3] = &WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebPushD::ApplePushServiceConnection::unsubscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,NSError *)> &&)::$_0>(WebPushD::ApplePushServiceConnection::unsubscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,NSError *)> &&)::$_0)::descriptor;
  v31[4] = a1;
  v31[5] = v30;
  *((_DWORD *)v31 + 12) = v11;
  [v28 invalidateURLTokenForInfo:v29 completion:v31];
  _Block_release(v31);
  CFTypeRef v32 = cf;
  if (cf)
  {
    CFRelease(v32);
  }
}

void sub_1987AEFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  _Block_release(v10);
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

unsigned int *WebPushD::ApplePushServiceConnection::enabledTopics@<X0>(id *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)[this[10] enabledTopics];

  return WTF::makeVector<WTF::String>(v3, a2);
}

unsigned int *WebPushD::ApplePushServiceConnection::ignoredTopics@<X0>(id *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)[this[10] ignoredTopics];

  return WTF::makeVector<WTF::String>(v3, a2);
}

unsigned int *WebPushD::ApplePushServiceConnection::opportunisticTopics@<X0>(id *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)[this[10] opportunisticTopics];

  return WTF::makeVector<WTF::String>(v3, a2);
}

unsigned int *WebPushD::ApplePushServiceConnection::nonWakingTopics@<X0>(id *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)[this[10] nonWakingTopics];

  return WTF::makeVector<WTF::String>(v3, a2);
}

void WebPushD::ApplePushServiceConnection::setEnabledTopics(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)(a1 + 80);
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t *)&cf);
  [v2 _setEnabledTopics:cf];
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1987AF15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a1 + 12)];
  *a2 = v4;
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  if (v6)
  {
    uint64_t v7 = (void *)v4;
    uint64_t v8 = *(WTF **)a1;
    uint64_t v9 = 8 * v6;
    do
    {
      WTF::makeNSArrayElement((uint64_t *)&cf, v8, v5);
      if (cf)
      {
        objc_msgSend(v7, "addObject:");
        CFTypeRef v10 = cf;
        CFTypeRef cf = 0;
        if (v10) {
          CFRelease(v10);
        }
      }
      uint64_t v8 = (WTF *)((char *)v8 + 8);
      v9 -= 8;
    }
    while (v9);
  }
}

void sub_1987AF214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  *CFTypeRef v10 = 0;
  if (v11) {
    CFRelease(v11);
  }
  _Unwind_Resume(exception_object);
}

void WebPushD::ApplePushServiceConnection::setIgnoredTopics(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)(a1 + 80);
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t *)&cf);
  [v2 _setIgnoredTopics:cf];
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1987AF298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPushD::ApplePushServiceConnection::setOpportunisticTopics(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)(a1 + 80);
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t *)&cf);
  [v2 _setOpportunisticTopics:cf];
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1987AF304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPushD::ApplePushServiceConnection::setNonWakingTopics(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)(a1 + 80);
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t *)&cf);
  [v2 _setNonWakingTopics:cf];
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1987AF370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebPushD::ApplePushServiceConnection::setTopicLists(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3 = *(void **)(a1 + 80);
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t *)&v14);
  CFTypeRef v4 = v14;
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2 + 16, (uint64_t *)&v13);
  CFTypeRef v5 = v13;
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2 + 32, (uint64_t *)&v12);
  CFTypeRef v6 = v12;
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2 + 48, (uint64_t *)&cf);
  [v3 setEnabledTopics:v4 ignoredTopics:v5 opportunisticTopics:v6 nonWakingTopics:cf];
  CFTypeRef v7 = cf;
  CFTypeRef cf = 0;
  if (v7) {
    CFRelease(v7);
  }
  CFTypeRef v8 = v12;
  CFTypeRef v12 = 0;
  if (v8) {
    CFRelease(v8);
  }
  CFTypeRef v9 = v13;
  CFTypeRef v13 = 0;
  if (v9) {
    CFRelease(v9);
  }
  CFTypeRef v10 = v14;
  CFTypeRef v14 = 0;
  if (v10) {
    CFRelease(v10);
  }
}

void sub_1987AF45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, CFTypeRef a10, CFTypeRef a11, CFTypeRef a12)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a10) {
    CFRelease(a10);
  }
  if (a11) {
    CFRelease(a11);
  }
  if (a12) {
    CFRelease(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    CFTypeRef v4 = (void *)(a1 + 8);
    do
    {
      if (*((_DWORD *)v4 - 2) != -1)
      {
        uint64_t v5 = *v4;
        *CFTypeRef v4 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    CFTypeRef v4 = (void *)(a1 + 8);
    do
    {
      if (*((_DWORD *)v4 - 2) != -1)
      {
        uint64_t v5 = *v4;
        *CFTypeRef v4 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WTF::VectorDestructor<true,std::pair<WTF::RetainPtr<NSString>,WTF::RetainPtr<NSDictionary>>>::destruct(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1;
    do
    {
      CFTypeRef v4 = *(const void **)(v3 + 8);
      *(void *)(v3 + 8) = 0;
      if (v4) {
        CFRelease(v4);
      }
      uint64_t v5 = *(const void **)v3;
      *(void *)uint64_t v3 = 0;
      if (v5) {
        CFRelease(v5);
      }
      v3 += 16;
    }
    while (v3 != a2);
  }
}

unsigned int *WTF::BlockPtr<void ()(APSURLToken *,NSError *)>::fromCallable<WebPushD::ApplePushServiceConnection::subscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(NSString *,NSError *)> &&)::$_0>(WebPushD::ApplePushServiceConnection::subscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(NSString *,NSError *)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void *WTF::BlockPtr<void ()(APSURLToken *,NSError *)>::fromCallable<WebPushD::ApplePushServiceConnection::subscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(NSString *,NSError *)> &&)::$_0>(WebPushD::ApplePushServiceConnection::subscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(NSString *,NSError *)> &&)::$_0)::{lambda(void *,APSURLToken *,NSError *)#1}::__invoke(void *result, void *a2)
{
  uint64_t v2 = result[5];
  if (v2 && *(void *)(v2 + 8))
  {
    CFTypeRef v4 = result;
    uint64_t v5 = result[4];
    uint64_t v8 = *(void *)(v5 + 104);
    CFTypeRef v6 = (uint64_t *)(v5 + 104);
    uint64_t v7 = v8;
    if (!v8) {
      goto LABEL_11;
    }
    int v9 = *((_DWORD *)v4 + 12);
    unsigned int v10 = *(_DWORD *)(v7 - 8);
    unsigned int v11 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
    unsigned int v12 = (v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11);
    uint64_t v13 = v10 & (v12 ^ HIWORD(v12));
    int v14 = *(_DWORD *)(v7 + 16 * v13);
    if (v14 != v9)
    {
      int v15 = 1;
      while (v14)
      {
        uint64_t v13 = (v13 + v15) & v10;
        int v14 = *(_DWORD *)(v7 + 16 * v13);
        ++v15;
        if (v14 == v9) {
          goto LABEL_10;
        }
      }
      uint64_t v13 = *(unsigned int *)(v7 - 4);
    }
LABEL_10:
    if (v13 != *(_DWORD *)(v7 - 4))
    {
      uint64_t v16 = v7 + 16 * v13;
      uint64_t v17 = *(void *)(v16 + 8);
      *(void *)(v16 + 8) = 0;
      int v25 = (void *)v17;
      uint64_t v18 = *v6;
      if (!*v6 || (v18 += 16 * *(unsigned int *)(v18 - 4), v18 != v16))
      {
        if (v18 != v16)
        {
          int v19 = -1;
          *(_DWORD *)uint64_t v16 = -1;
          *(void *)(v16 + 8) = 0;
          ++*(_DWORD *)(*v6 - 16);
          uint64_t v20 = *v6;
          if (*v6) {
            int v19 = *(_DWORD *)(v20 - 12) - 1;
          }
          *(_DWORD *)(v20 - 12) = v19;
          uint64_t v21 = *v6;
          if (*v6)
          {
            unsigned int v22 = 6 * *(_DWORD *)(v21 - 12);
            unsigned int v23 = *(_DWORD *)(v21 - 4);
            if (v22 < v23 && v23 >= 9) {
              WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v6, v23 >> 1);
            }
          }
        }
      }
    }
    else
    {
LABEL_11:
      int v25 = 0;
    }
    [a2 tokenURL];
    WTF::CompletionHandler<void ()(NSString *,NSError *)>::operator()((uint64_t *)&v25);
    uint64_t result = v25;
    int v25 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

void sub_1987AF818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(NSString *,NSError *)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1987AF8FC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    uint64_t v9 = a2;
    uint64_t v10 = (void *)(result + 24);
    do
    {
      *((_DWORD *)v10 - 2) = 0;
      *uint64_t v10 = 0;
      v10 += 2;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    while (1)
    {
      unsigned int v12 = (int *)(v4 + 16 * v11);
      int v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          int v18 = 0;
          unsigned int v19 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
          unsigned int v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
          do
          {
            uint64_t v21 = v20 & v17;
            unsigned int v20 = ++v18 + v21;
          }
          while (*(_DWORD *)(v16 + 16 * v21));
          uint64_t v22 = v16 + 16 * v21;
          uint64_t v23 = *(void *)(v22 + 8);
          *(void *)(v22 + 8) = 0;
          if (v23) {
            (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
          }
          *(_DWORD *)uint64_t v22 = *v12;
          uint64_t v24 = v4 + 16 * v11;
          uint64_t v25 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          *(void *)(v22 + 8) = v25;
          uint64_t v15 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          if (!v15) {
            goto LABEL_22;
          }
LABEL_21:
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          goto LABEL_22;
        }
        uint64_t v14 = v4 + 16 * v11;
        uint64_t v15 = *(void *)(v14 + 8);
        *(void *)(v14 + 8) = 0;
        if (v15) {
          goto LABEL_21;
        }
      }
LABEL_22:
      if (++v11 == v5) {
        goto LABEL_25;
      }
    }
  }
  if (v4)
  {
LABEL_25:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

unsigned int *WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebPushD::ApplePushServiceConnection::unsubscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,NSError *)> &&)::$_0>(WebPushD::ApplePushServiceConnection::unsubscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,NSError *)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t result = *(unsigned int **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void *WTF::BlockPtr<void ()(BOOL,NSError *)>::fromCallable<WebPushD::ApplePushServiceConnection::unsubscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,NSError *)> &&)::$_0>(WebPushD::ApplePushServiceConnection::unsubscribe(WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(BOOL,NSError *)> &&)::$_0)::{lambda(void *,BOOL,NSError *)#1}::__invoke(void *result)
{
  uint64_t v1 = result[5];
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = result;
    uint64_t v3 = result[4];
    uint64_t v6 = *(void *)(v3 + 112);
    uint64_t v4 = (uint64_t *)(v3 + 112);
    uint64_t v5 = v6;
    if (!v6) {
      goto LABEL_11;
    }
    int v7 = *((_DWORD *)v2 + 12);
    unsigned int v8 = *(_DWORD *)(v5 - 8);
    unsigned int v9 = 9 * ((v7 + ~(v7 << 15)) ^ ((v7 + ~(v7 << 15)) >> 10));
    unsigned int v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
    uint64_t v11 = v8 & (v10 ^ HIWORD(v10));
    int v12 = *(_DWORD *)(v5 + 16 * v11);
    if (v12 != v7)
    {
      int v13 = 1;
      while (v12)
      {
        uint64_t v11 = (v11 + v13) & v8;
        int v12 = *(_DWORD *)(v5 + 16 * v11);
        ++v13;
        if (v12 == v7) {
          goto LABEL_10;
        }
      }
      uint64_t v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_10:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      uint64_t v14 = v5 + 16 * v11;
      uint64_t v15 = *(void *)(v14 + 8);
      *(void *)(v14 + 8) = 0;
      uint64_t v23 = (void *)v15;
      uint64_t v16 = *v4;
      if (!*v4 || (v16 += 16 * *(unsigned int *)(v16 - 4), v16 != v14))
      {
        if (v16 != v14)
        {
          int v17 = -1;
          *(_DWORD *)uint64_t v14 = -1;
          *(void *)(v14 + 8) = 0;
          ++*(_DWORD *)(*v4 - 16);
          uint64_t v18 = *v4;
          if (*v4) {
            int v17 = *(_DWORD *)(v18 - 12) - 1;
          }
          *(_DWORD *)(v18 - 12) = v17;
          uint64_t v19 = *v4;
          if (*v4)
          {
            unsigned int v20 = 6 * *(_DWORD *)(v19 - 12);
            unsigned int v21 = *(_DWORD *)(v19 - 4);
            if (v20 < v21 && v21 >= 9) {
              WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v4, v21 >> 1);
            }
          }
        }
      }
    }
    else
    {
LABEL_11:
      uint64_t v23 = 0;
    }
    WTF::CompletionHandler<void ()(BOOL,NSError *)>::operator()((uint64_t *)&v23);
    uint64_t result = v23;
    uint64_t v23 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

void sub_1987AFD34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(BOOL,NSError *)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1987AFE18(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    uint64_t v9 = a2;
    uint64_t v10 = (void *)(result + 24);
    do
    {
      *((_DWORD *)v10 - 2) = 0;
      *uint64_t v10 = 0;
      v10 += 2;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    while (1)
    {
      int v12 = (int *)(v4 + 16 * v11);
      int v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          int v18 = 0;
          unsigned int v19 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
          unsigned int v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
          do
          {
            uint64_t v21 = v20 & v17;
            unsigned int v20 = ++v18 + v21;
          }
          while (*(_DWORD *)(v16 + 16 * v21));
          uint64_t v22 = v16 + 16 * v21;
          uint64_t v23 = *(void *)(v22 + 8);
          *(void *)(v22 + 8) = 0;
          if (v23) {
            (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
          }
          *(_DWORD *)uint64_t v22 = *v12;
          uint64_t v24 = v4 + 16 * v11;
          uint64_t v25 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          *(void *)(v22 + 8) = v25;
          uint64_t v15 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          if (!v15) {
            goto LABEL_22;
          }
LABEL_21:
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          goto LABEL_22;
        }
        uint64_t v14 = v4 + 16 * v11;
        uint64_t v15 = *(void *)(v14 + 8);
        *(void *)(v14 + 8) = 0;
        if (v15) {
          goto LABEL_21;
        }
      }
LABEL_22:
      if (++v11 == v5) {
        goto LABEL_25;
      }
    }
  }
  if (v4)
  {
LABEL_25:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(NSString *,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(NSString *,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::CompletionHandler<void ()(BOOL,NSError *)>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,NSError *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, v3);
}

uint64_t WebKit::AssertionCapability::environmentIdentifier@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  int v2 = *(_DWORD **)(this + 16);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))();
}

void WebKit::AuthenticationManager::didReceiveMessage(WebKit::AuthenticationManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 2) {
    IPC::handleMessage<Messages::AuthenticationManager::CompleteAuthenticationChallenge,WebKit::AuthenticationManager,WebKit::AuthenticationManager,void ()(WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)>((uint64_t *)a3, (uint64_t)this);
  }
}

void IPC::handleMessage<Messages::AuthenticationManager::CompleteAuthenticationChallenge,WebKit::AuthenticationManager,WebKit::AuthenticationManager,void ()(WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  if (v5)
  {
    int v6 = (void *)v4;
    unsigned __int16 v7 = IPC::Decoder::decode<WebKit::AuthenticationChallengeDisposition>(a1);
    if (v7 >= 0x100u)
    {
      unsigned __int8 v8 = v7;
      IPC::Decoder::decode<WebCore::Credential>(a1, (uint64_t)&v24);
      if (v27)
      {
        long long v10 = v24;
        long long v24 = 0uLL;
        *(_OWORD *)unsigned int v20 = v10;
        char v21 = v25;
        uint64_t v11 = v26;
        uint64_t v26 = 0;
        CFTypeRef cf = v11;
        char v23 = 1;
        std::__optional_destruct_base<WebCore::Credential,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v24, v9);
        WebKit::AuthenticationManager::completeAuthenticationChallenge(a2, v6, v8, (uint64_t)v20);
        if (v23)
        {
          CFTypeRef v13 = cf;
          CFTypeRef cf = 0;
          if (v13) {
            CFRelease(v13);
          }
          uint64_t v14 = v20[1];
          v20[1] = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v12);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
          unsigned int v19 = v20[0];
          v20[0] = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, v12);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
        }
        return;
      }
      std::__optional_destruct_base<WebCore::Credential,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v24, v9);
    }
  }
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t v17 = a1[3];
  if (v17) {
    BOOL v18 = v16 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15);
  }
}

void non-virtual thunk to'WebKit::AuthenticationManager::didReceiveMessage(WebKit::AuthenticationManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 2) {
    IPC::handleMessage<Messages::AuthenticationManager::CompleteAuthenticationChallenge,WebKit::AuthenticationManager,WebKit::AuthenticationManager,void ()(WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebKit::AuthenticationChallengeDisposition,WebCore::Credential &&)>((uint64_t *)a3, (uint64_t)this - 8);
  }
}

uint64_t IPC::Decoder::decode<WebKit::AuthenticationChallengeDisposition>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::AuthenticationChallengeDisposition,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::AuthenticationChallengeDisposition,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      int v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v2, v1);
        a1 = v12;
        uint64_t v8 = *v12;
        unint64_t v7 = v12[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_6;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
    }
    goto LABEL_7;
  }
  unsigned int v5 = *v4;
  if (v5 >= 4)
  {
LABEL_7:
    unsigned int v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  int v6 = 1;
  return v5 | (v6 << 8);
}

void IPC::Decoder::decode<WebCore::Credential>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::Credential,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 32))
  {
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5 && v4 != 0)
    {
      unint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

uint64_t std::__optional_destruct_base<WebCore::Credential,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    unint64_t v3 = *(const void **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t WebKit::AuthenticationServicesCoreLibrary(WebKit *this)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit33AuthenticationServicesCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  char v3 = (char)this;
  if (qword_1EB358AA0 != -1) {
    dispatch_once(&qword_1EB358AA0, block);
  }
  return _MergedGlobals_42;
}

uint64_t ___ZN6WebKit33AuthenticationServicesCoreLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AuthenticationServicesCore.framework/AuthenticationServicesCore", 2);
  _MergedGlobals_42 = result;
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = result == 0;
  }
  if (v3)
  {
    uint64_t result = 31;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initASCWebKitSPISupport(WebKit *this)
{
  if (qword_1EB358AB8 != -1) {
    dispatch_once(&qword_1EB358AB8, &__block_literal_global_8);
  }
  return qword_1EB358AC0;
}

uint64_t WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain(WebKit *this)
{
  if (qword_1EB358AB0 != -1) {
    dispatch_once(&qword_1EB358AB0, &__block_literal_global_3);
  }
  return qword_1EB358AA8;
}

uint64_t ___ZN6WebKit58get_AuthenticationServicesCore_ASCAuthorizationErrorDomainEv_block_invoke()
{
  v0 = (void *)WebKit::AuthenticationServicesCoreLibrary(0);
  uint64_t result = (uint64_t)dlsym(v0, "ASCAuthorizationErrorDomain");
  if (result)
  {
    qword_1EB358AA8 = *(void *)result;
  }
  else
  {
    uint64_t result = 35;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initASCAgentProxy(WebKit *this)
{
  if (qword_1EB358AC8 != -1) {
    dispatch_once(&qword_1EB358AC8, &__block_literal_global_11);
  }
  return qword_1EB358AD0;
}

uint64_t WebKit::initASCAppleIDCredential(WebKit *this)
{
  if (qword_1EB358AD8 != -1) {
    dispatch_once(&qword_1EB358AD8, &__block_literal_global_14);
  }
  return qword_1EB358AE0;
}

uint64_t WebKit::initASCAuthorizationPresentationContext(WebKit *this)
{
  if (qword_1EB358AE8 != -1) {
    dispatch_once(&qword_1EB358AE8, &__block_literal_global_17);
  }
  return qword_1EB358AF0;
}

uint64_t WebKit::initASCAuthorizationPresenter(WebKit *this)
{
  if (qword_1EB358AF8 != -1) {
    dispatch_once(&qword_1EB358AF8, &__block_literal_global_20);
  }
  return qword_1EB358B00;
}

uint64_t WebKit::initASCCredentialRequestContext(WebKit *this)
{
  if (qword_1EB358B08 != -1) {
    dispatch_once(&qword_1EB358B08, &__block_literal_global_26);
  }
  return qword_1EB358B10;
}

uint64_t WebKit::initASCWebAuthenticationExtensionsClientInputs(WebKit *this)
{
  if (qword_1EB358B18 != -1) {
    dispatch_once(&qword_1EB358B18, &__block_literal_global_29);
  }
  return qword_1EB358B20;
}

uint64_t WebKit::initASCPlatformPublicKeyCredentialAssertion(WebKit *this)
{
  if (qword_1EB358B28 != -1) {
    dispatch_once(&qword_1EB358B28, &__block_literal_global_32);
  }
  return qword_1EB358B30;
}

uint64_t WebKit::initASCPlatformPublicKeyCredentialLoginChoice(WebKit *this)
{
  if (qword_1EB358B38 != -1) {
    dispatch_once(&qword_1EB358B38, &__block_literal_global_35);
  }
  return qword_1EB358B40;
}

uint64_t WebKit::initASCPlatformPublicKeyCredentialRegistration(WebKit *this)
{
  if (qword_1EB358B48 != -1) {
    dispatch_once(&qword_1EB358B48, &__block_literal_global_38);
  }
  return qword_1EB358B50;
}

uint64_t WebKit::initASCPublicKeyCredentialAssertionOptions(WebKit *this)
{
  if (qword_1EB358B58 != -1) {
    dispatch_once(&qword_1EB358B58, &__block_literal_global_41);
  }
  return qword_1EB358B60;
}

uint64_t WebKit::initASCPublicKeyCredentialCreationOptions(WebKit *this)
{
  if (qword_1EB358B68 != -1) {
    dispatch_once(&qword_1EB358B68, &__block_literal_global_44);
  }
  return qword_1EB358B70;
}

uint64_t WebKit::initASCPublicKeyCredentialDescriptor(WebKit *this)
{
  if (qword_1EB358B78 != -1) {
    dispatch_once(&qword_1EB358B78, &__block_literal_global_47);
  }
  return qword_1EB358B80;
}

uint64_t WebKit::initASCSecurityKeyPublicKeyCredentialAssertion(WebKit *this)
{
  if (qword_1EB358B88 != -1) {
    dispatch_once(&qword_1EB358B88, &__block_literal_global_50);
  }
  return qword_1EB358B90;
}

uint64_t WebKit::initASCSecurityKeyPublicKeyCredentialLoginChoice(WebKit *this)
{
  if (qword_1EB358B98 != -1) {
    dispatch_once(&qword_1EB358B98, &__block_literal_global_53);
  }
  return qword_1EB358BA0;
}

uint64_t WebKit::initASCSecurityKeyPublicKeyCredentialRegistration(WebKit *this)
{
  if (qword_1EB358BA8 != -1) {
    dispatch_once(&qword_1EB358BA8, &__block_literal_global_56);
  }
  return qword_1EB358BB0;
}

uint64_t WebKit::initASGlobalFrameIdentifier(WebKit *this)
{
  if (qword_1EB358BB8 != -1) {
    dispatch_once(&qword_1EB358BB8, &__block_literal_global_59);
  }
  return qword_1EB358BC0;
}

Class ___ZN6WebKitL23initASCWebKitSPISupportEv_block_invoke()
{
  WebKit::AuthenticationServicesCoreLibrary((WebKit *)1);
  Class result = objc_getClass("ASCWebKitSPISupport");
  qword_1EB358AC0 = (uint64_t)result;
  WebKit::getASCWebKitSPISupportClass[0] = WebKit::ASCWebKitSPISupportFunction;
  return result;
}

uint64_t WebKit::ASCWebKitSPISupportFunction(WebKit *this)
{
  return qword_1EB358AC0;
}

uint64_t ___ZN6WebKitL17initASCAgentProxyEv_block_invoke()
{
  WebKit::AuthenticationServicesCoreLibrary(0);
  uint64_t result = (uint64_t)objc_getClass("ASCAgentProxy");
  qword_1EB358AD0 = result;
  if (result)
  {
    WebKit::getASCAgentProxyClass[0] = WebKit::ASCAgentProxyFunction;
  }
  else
  {
    uint64_t result = 39;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCAgentProxyFunction(WebKit *this)
{
  return qword_1EB358AD0;
}

uint64_t ___ZN6WebKitL24initASCAppleIDCredentialEv_block_invoke()
{
  WebKit::AuthenticationServicesCoreLibrary(0);
  uint64_t result = (uint64_t)objc_getClass("ASCAppleIDCredential");
  qword_1EB358AE0 = result;
  if (result)
  {
    WebKit::getASCAppleIDCredentialClass = WebKit::ASCAppleIDCredentialFunction;
  }
  else
  {
    uint64_t result = 40;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCAppleIDCredentialFunction(WebKit *this)
{
  return qword_1EB358AE0;
}

uint64_t ___ZN6WebKitL39initASCAuthorizationPresentationContextEv_block_invoke()
{
  WebKit::AuthenticationServicesCoreLibrary(0);
  uint64_t result = (uint64_t)objc_getClass("ASCAuthorizationPresentationContext");
  qword_1EB358AF0 = result;
  if (result)
  {
    WebKit::getASCAuthorizationPresentationContextClass[0] = WebKit::ASCAuthorizationPresentationContextFunction;
  }
  else
  {
    uint64_t result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCAuthorizationPresentationContextFunction(WebKit *this)
{
  return qword_1EB358AF0;
}

uint64_t ___ZN6WebKitL29initASCAuthorizationPresenterEv_block_invoke()
{
  WebKit::AuthenticationServicesCoreLibrary(0);
  uint64_t result = (uint64_t)objc_getClass("ASCAuthorizationPresenter");
  qword_1EB358B00 = result;
  if (result)
  {
    WebKit::getASCAuthorizationPresenterClass[0] = WebKit::ASCAuthorizationPresenterFunction;
  }
  else
  {
    uint64_t result = 42;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCAuthorizationPresenterFunction(WebKit *this)
{
  return qword_1EB358B00;
}

uint64_t ___ZN6WebKitL31initASCCredentialRequestContextEv_block_invoke()
{
  WebKit::AuthenticationServicesCoreLibrary(0);
  uint64_t result = (uint64_t)objc_getClass("ASCCredentialRequestContext");
  qword_1EB358B10 = result;
  if (result)
  {
    WebKit::getASCCredentialRequestContextClass[0] = WebKit::ASCCredentialRequestContextFunction;
  }
  else
  {
    uint64_t result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCCredentialRequestContextFunction(WebKit *this)
{
  return qword_1EB358B10;
}

Class ___ZN6WebKitL46initASCWebAuthenticationExtensionsClientInputsEv_block_invoke()
{
  WebKit::AuthenticationServicesCoreLibrary((WebKit *)1);
  Class result = objc_getClass("ASCWebAuthenticationExtensionsClientInputs");
  qword_1EB358B20 = (uint64_t)result;
  WebKit::getASCWebAuthenticationExtensionsClientInputsClass[0] = WebKit::ASCWebAuthenticationExtensionsClientInputsFunction;
  return result;
}

uint64_t WebKit::ASCWebAuthenticationExtensionsClientInputsFunction(WebKit *this)
{
  return qword_1EB358B20;
}

uint64_t ___ZN6WebKitL43initASCPlatformPublicKeyCredentialAssertionEv_block_invoke()
{
  WebKit::AuthenticationServicesCoreLibrary(0);
  uint64_t result = (uint64_t)objc_getClass("ASCPlatformPublicKeyCredentialAssertion");
  qword_1EB358B30 = result;
  if (result)
  {
    WebKit::getASCPlatformPublicKeyCredentialAssertionClass[0] = WebKit::ASCPlatformPublicKeyCredentialAssertionFunction;
  }
  else
  {
    uint64_t result = 46;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCPlatformPublicKeyCredentialAssertionFunction(WebKit *this)
{
  return qword_1EB358B30;
}

uint64_t ___ZN6WebKitL45initASCPlatformPublicKeyCredentialLoginChoiceEv_block_invoke()
{
  WebKit::AuthenticationServicesCoreLibrary(0);
  uint64_t result = (uint64_t)objc_getClass("ASCPlatformPublicKeyCredentialLoginChoice");
  qword_1EB358B40 = result;
  if (result)
  {
    WebKit::getASCPlatformPublicKeyCredentialLoginChoiceClass[0] = WebKit::ASCPlatformPublicKeyCredentialLoginChoiceFunction;
  }
  else
  {
    uint64_t result = 47;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCPlatformPublicKeyCredentialLoginChoiceFunction(WebKit *this)
{
  return qword_1EB358B40;
}

uint64_t ___ZN6WebKitL46initASCPlatformPublicKeyCredentialRegistrationEv_block_invoke()
{
  WebKit::AuthenticationServicesCoreLibrary(0);
  uint64_t result = (uint64_t)objc_getClass("ASCPlatformPublicKeyCredentialRegistration");
  qword_1EB358B50 = result;
  if (result)
  {
    WebKit::getASCPlatformPublicKeyCredentialRegistrationClass[0] = WebKit::ASCPlatformPublicKeyCredentialRegistrationFunction;
  }
  else
  {
    uint64_t result = 48;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCPlatformPublicKeyCredentialRegistrationFunction(WebKit *this)
{
  return qword_1EB358B50;
}

uint64_t ___ZN6WebKitL42initASCPublicKeyCredentialAssertionOptionsEv_block_invoke()
{
  WebKit::AuthenticationServicesCoreLibrary(0);
  uint64_t result = (uint64_t)objc_getClass("ASCPublicKeyCredentialAssertionOptions");
  qword_1EB358B60 = result;
  if (result)
  {
    WebKit::getASCPublicKeyCredentialAssertionOptionsClass[0] = WebKit::ASCPublicKeyCredentialAssertionOptionsFunction;
  }
  else
  {
    uint64_t result = 49;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCPublicKeyCredentialAssertionOptionsFunction(WebKit *this)
{
  return qword_1EB358B60;
}

uint64_t ___ZN6WebKitL41initASCPublicKeyCredentialCreationOptionsEv_block_invoke()
{
  WebKit::AuthenticationServicesCoreLibrary(0);
  uint64_t result = (uint64_t)objc_getClass("ASCPublicKeyCredentialCreationOptions");
  qword_1EB358B70 = result;
  if (result)
  {
    WebKit::getASCPublicKeyCredentialCreationOptionsClass[0] = WebKit::ASCPublicKeyCredentialCreationOptionsFunction;
  }
  else
  {
    uint64_t result = 50;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCPublicKeyCredentialCreationOptionsFunction(WebKit *this)
{
  return qword_1EB358B70;
}

uint64_t ___ZN6WebKitL36initASCPublicKeyCredentialDescriptorEv_block_invoke()
{
  WebKit::AuthenticationServicesCoreLibrary(0);
  uint64_t result = (uint64_t)objc_getClass("ASCPublicKeyCredentialDescriptor");
  qword_1EB358B80 = result;
  if (result)
  {
    WebKit::getASCPublicKeyCredentialDescriptorClass[0] = WebKit::ASCPublicKeyCredentialDescriptorFunction;
  }
  else
  {
    uint64_t result = 51;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCPublicKeyCredentialDescriptorFunction(WebKit *this)
{
  return qword_1EB358B80;
}

uint64_t ___ZN6WebKitL46initASCSecurityKeyPublicKeyCredentialAssertionEv_block_invoke()
{
  WebKit::AuthenticationServicesCoreLibrary(0);
  uint64_t result = (uint64_t)objc_getClass("ASCSecurityKeyPublicKeyCredentialAssertion");
  qword_1EB358B90 = result;
  if (result)
  {
    WebKit::getASCSecurityKeyPublicKeyCredentialAssertionClass[0] = WebKit::ASCSecurityKeyPublicKeyCredentialAssertionFunction;
  }
  else
  {
    uint64_t result = 52;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCSecurityKeyPublicKeyCredentialAssertionFunction(WebKit *this)
{
  return qword_1EB358B90;
}

uint64_t ___ZN6WebKitL48initASCSecurityKeyPublicKeyCredentialLoginChoiceEv_block_invoke()
{
  WebKit::AuthenticationServicesCoreLibrary(0);
  uint64_t result = (uint64_t)objc_getClass("ASCSecurityKeyPublicKeyCredentialLoginChoice");
  qword_1EB358BA0 = result;
  if (result)
  {
    WebKit::getASCSecurityKeyPublicKeyCredentialLoginChoiceClass[0] = WebKit::ASCSecurityKeyPublicKeyCredentialLoginChoiceFunction;
  }
  else
  {
    uint64_t result = 53;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCSecurityKeyPublicKeyCredentialLoginChoiceFunction(WebKit *this)
{
  return qword_1EB358BA0;
}

uint64_t ___ZN6WebKitL49initASCSecurityKeyPublicKeyCredentialRegistrationEv_block_invoke()
{
  WebKit::AuthenticationServicesCoreLibrary(0);
  uint64_t result = (uint64_t)objc_getClass("ASCSecurityKeyPublicKeyCredentialRegistration");
  qword_1EB358BB0 = result;
  if (result)
  {
    WebKit::getASCSecurityKeyPublicKeyCredentialRegistrationClass[0] = WebKit::ASCSecurityKeyPublicKeyCredentialRegistrationFunction;
  }
  else
  {
    uint64_t result = 54;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASCSecurityKeyPublicKeyCredentialRegistrationFunction(WebKit *this)
{
  return qword_1EB358BB0;
}

Class ___ZN6WebKitL27initASGlobalFrameIdentifierEv_block_invoke()
{
  WebKit::AuthenticationServicesCoreLibrary((WebKit *)1);
  Class result = objc_getClass("ASGlobalFrameIdentifier");
  qword_1EB358BC0 = (uint64_t)result;
  WebKit::getASGlobalFrameIdentifierClass[0] = WebKit::ASGlobalFrameIdentifierFunction;
  return result;
}

uint64_t WebKit::ASGlobalFrameIdentifierFunction(WebKit *this)
{
  return qword_1EB358BC0;
}

uint64_t WebKit::AuthenticationServicesLibrary(WebKit *this)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit29AuthenticationServicesLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  char v3 = 0;
  if (qword_1EB358BD0 != -1) {
    dispatch_once(&qword_1EB358BD0, block);
  }
  return _MergedGlobals_43;
}

uint64_t ___ZN6WebKit29AuthenticationServicesLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result = (uint64_t)dlopen("/System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices", 2);
  _MergedGlobals_43 = result;
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = result == 0;
  }
  if (v3)
  {
    uint64_t result = 30;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initASAuthorizationController(WebKit *this)
{
  if (qword_1EB358BE8 != -1) {
    dispatch_once(&qword_1EB358BE8, &__block_literal_global_5);
  }
  return qword_1EB358BF0;
}

uint64_t WebKit::initASAuthorizationPlatformPublicKeyCredentialProvider(WebKit *this)
{
  if (qword_1EB358BF8 != -1) {
    dispatch_once(&qword_1EB358BF8, &__block_literal_global_8_0);
  }
  return qword_1EB358C00;
}

uint64_t WebKit::initASAuthorizationSecurityKeyPublicKeyCredentialProvider(WebKit *this)
{
  if (qword_1EB358C08 != -1) {
    dispatch_once(&qword_1EB358C08, &__block_literal_global_11_0);
  }
  return qword_1EB358C10;
}

uint64_t WebKit::initASPublicKeyCredentialClientData(WebKit *this)
{
  if (qword_1EB358C18 != -1) {
    dispatch_once(&qword_1EB358C18, &__block_literal_global_14_0);
  }
  return qword_1EB358C20;
}

uint64_t WebKit::initASAuthorizationPlatformPublicKeyCredentialRegistration(WebKit *this)
{
  if (qword_1EB358C28 != -1) {
    dispatch_once(&qword_1EB358C28, &__block_literal_global_17_0);
  }
  return qword_1EB358C30;
}

uint64_t WebKit::initASAuthorizationSecurityKeyPublicKeyCredentialRegistration(WebKit *this)
{
  if (qword_1EB358C38 != -1) {
    dispatch_once(&qword_1EB358C38, &__block_literal_global_20_0);
  }
  return qword_1EB358C40;
}

uint64_t WebKit::initASAuthorizationPlatformPublicKeyCredentialAssertion(WebKit *this)
{
  if (qword_1EB358C48 != -1) {
    dispatch_once(&qword_1EB358C48, &__block_literal_global_23);
  }
  return qword_1EB358C50;
}

uint64_t WebKit::initASAuthorizationPublicKeyCredentialParameters(WebKit *this)
{
  if (qword_1EB358C58 != -1) {
    dispatch_once(&qword_1EB358C58, &__block_literal_global_26_0);
  }
  return qword_1EB358C60;
}

uint64_t WebKit::initASAuthorizationPlatformPublicKeyCredentialDescriptor(WebKit *this)
{
  if (qword_1EB358C68 != -1) {
    dispatch_once(&qword_1EB358C68, &__block_literal_global_29_0);
  }
  return qword_1EB358C70;
}

uint64_t WebKit::initASAuthorizationSecurityKeyPublicKeyCredentialDescriptor(WebKit *this)
{
  if (qword_1EB358C78 != -1) {
    dispatch_once(&qword_1EB358C78, &__block_literal_global_32_0);
  }
  return qword_1EB358C80;
}

uint64_t WebKit::initASAuthorizationSecurityKeyPublicKeyCredentialAssertion(WebKit *this)
{
  if (qword_1EB358C88 != -1) {
    dispatch_once(&qword_1EB358C88, &__block_literal_global_35_0);
  }
  return qword_1EB358C90;
}

uint64_t WebKit::initASAuthorizationPublicKeyCredentialLargeBlobAssertionInput(WebKit *this)
{
  if (qword_1EB358C98 != -1) {
    dispatch_once(&qword_1EB358C98, &__block_literal_global_38_0);
  }
  return qword_1EB358CA0;
}

uint64_t WebKit::initASAuthorizationPublicKeyCredentialLargeBlobRegistrationInput(WebKit *this)
{
  if (qword_1EB358CA8 != -1) {
    dispatch_once(&qword_1EB358CA8, &__block_literal_global_41_0);
  }
  return qword_1EB358CB0;
}

uint64_t WebKit::get_AuthenticationServices_ASAuthorizationErrorDomain(WebKit *this)
{
  if (qword_1EB358BE0 != -1) {
    dispatch_once(&qword_1EB358BE0, &__block_literal_global_4);
  }
  return qword_1EB358BD8;
}

uint64_t ___ZN6WebKit53get_AuthenticationServices_ASAuthorizationErrorDomainEv_block_invoke(WebKit *a1)
{
  unint64_t v1 = (void *)WebKit::AuthenticationServicesLibrary(a1);
  uint64_t result = (uint64_t)dlsym(v1, "ASAuthorizationErrorDomain");
  if (result)
  {
    qword_1EB358BD8 = *(void *)result;
  }
  else
  {
    uint64_t result = 45;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initASAuthorizationPublicKeyCredentialPRFRegistrationInput(WebKit *this)
{
  if (qword_1EB358CB8 != -1) {
    dispatch_once(&qword_1EB358CB8, &__block_literal_global_44_0);
  }
  return qword_1EB358CC0;
}

uint64_t WebKit::initASAuthorizationPublicKeyCredentialPRFAssertionInputValues(WebKit *this)
{
  if (qword_1EB358CC8 != -1) {
    dispatch_once(&qword_1EB358CC8, &__block_literal_global_47_0);
  }
  return qword_1EB358CD0;
}

uint64_t WebKit::initASAuthorizationPublicKeyCredentialPRFAssertionInput(WebKit *this)
{
  if (qword_1EB358CD8 != -1) {
    dispatch_once(&qword_1EB358CD8, &__block_literal_global_50_0);
  }
  return qword_1EB358CE0;
}

uint64_t ___ZN6WebKitL29initASAuthorizationControllerEv_block_invoke(WebKit *a1)
{
  WebKit::AuthenticationServicesLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("ASAuthorizationController");
  qword_1EB358BF0 = result;
  if (result)
  {
    WebKit::getASAuthorizationControllerClass[0] = WebKit::ASAuthorizationControllerFunction;
  }
  else
  {
    uint64_t result = 32;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationControllerFunction(WebKit *this)
{
  return qword_1EB358BF0;
}

uint64_t ___ZN6WebKitL54initASAuthorizationPlatformPublicKeyCredentialProviderEv_block_invoke(WebKit *a1)
{
  WebKit::AuthenticationServicesLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("ASAuthorizationPlatformPublicKeyCredentialProvider");
  qword_1EB358C00 = result;
  if (result)
  {
    WebKit::getASAuthorizationPlatformPublicKeyCredentialProviderClass[0] = WebKit::ASAuthorizationPlatformPublicKeyCredentialProviderFunction;
  }
  else
  {
    uint64_t result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPlatformPublicKeyCredentialProviderFunction(WebKit *this)
{
  return qword_1EB358C00;
}

uint64_t ___ZN6WebKitL57initASAuthorizationSecurityKeyPublicKeyCredentialProviderEv_block_invoke(WebKit *a1)
{
  WebKit::AuthenticationServicesLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("ASAuthorizationSecurityKeyPublicKeyCredentialProvider");
  qword_1EB358C10 = result;
  if (result)
  {
    WebKit::getASAuthorizationSecurityKeyPublicKeyCredentialProviderClass[0] = WebKit::ASAuthorizationSecurityKeyPublicKeyCredentialProviderFunction;
  }
  else
  {
    uint64_t result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationSecurityKeyPublicKeyCredentialProviderFunction(WebKit *this)
{
  return qword_1EB358C10;
}

uint64_t ___ZN6WebKitL35initASPublicKeyCredentialClientDataEv_block_invoke(WebKit *a1)
{
  WebKit::AuthenticationServicesLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("ASPublicKeyCredentialClientData");
  qword_1EB358C20 = result;
  if (result)
  {
    WebKit::getASPublicKeyCredentialClientDataClass[0] = WebKit::ASPublicKeyCredentialClientDataFunction;
  }
  else
  {
    uint64_t result = 35;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASPublicKeyCredentialClientDataFunction(WebKit *this)
{
  return qword_1EB358C20;
}

uint64_t ___ZN6WebKitL58initASAuthorizationPlatformPublicKeyCredentialRegistrationEv_block_invoke(WebKit *a1)
{
  WebKit::AuthenticationServicesLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("ASAuthorizationPlatformPublicKeyCredentialRegistration");
  qword_1EB358C30 = result;
  if (result)
  {
    WebKit::getASAuthorizationPlatformPublicKeyCredentialRegistrationClass[0] = WebKit::ASAuthorizationPlatformPublicKeyCredentialRegistrationFunction;
  }
  else
  {
    uint64_t result = 36;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPlatformPublicKeyCredentialRegistrationFunction(WebKit *this)
{
  return qword_1EB358C30;
}

uint64_t ___ZN6WebKitL61initASAuthorizationSecurityKeyPublicKeyCredentialRegistrationEv_block_invoke(WebKit *a1)
{
  WebKit::AuthenticationServicesLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("ASAuthorizationSecurityKeyPublicKeyCredentialRegistration");
  qword_1EB358C40 = result;
  if (result)
  {
    WebKit::getASAuthorizationSecurityKeyPublicKeyCredentialRegistrationClass[0] = WebKit::ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationFunction;
  }
  else
  {
    uint64_t result = 37;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationFunction(WebKit *this)
{
  return qword_1EB358C40;
}

uint64_t ___ZN6WebKitL55initASAuthorizationPlatformPublicKeyCredentialAssertionEv_block_invoke(WebKit *a1)
{
  WebKit::AuthenticationServicesLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("ASAuthorizationPlatformPublicKeyCredentialAssertion");
  qword_1EB358C50 = result;
  if (result)
  {
    WebKit::getASAuthorizationPlatformPublicKeyCredentialAssertionClass[0] = WebKit::ASAuthorizationPlatformPublicKeyCredentialAssertionFunction;
  }
  else
  {
    uint64_t result = 38;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPlatformPublicKeyCredentialAssertionFunction(WebKit *this)
{
  return qword_1EB358C50;
}

uint64_t ___ZN6WebKitL48initASAuthorizationPublicKeyCredentialParametersEv_block_invoke(WebKit *a1)
{
  WebKit::AuthenticationServicesLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("ASAuthorizationPublicKeyCredentialParameters");
  qword_1EB358C60 = result;
  if (result)
  {
    WebKit::getASAuthorizationPublicKeyCredentialParametersClass[0] = WebKit::ASAuthorizationPublicKeyCredentialParametersFunction;
  }
  else
  {
    uint64_t result = 39;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPublicKeyCredentialParametersFunction(WebKit *this)
{
  return qword_1EB358C60;
}

uint64_t ___ZN6WebKitL56initASAuthorizationPlatformPublicKeyCredentialDescriptorEv_block_invoke(WebKit *a1)
{
  WebKit::AuthenticationServicesLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("ASAuthorizationPlatformPublicKeyCredentialDescriptor");
  qword_1EB358C70 = result;
  if (result)
  {
    WebKit::getASAuthorizationPlatformPublicKeyCredentialDescriptorClass[0] = WebKit::ASAuthorizationPlatformPublicKeyCredentialDescriptorFunction;
  }
  else
  {
    uint64_t result = 40;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPlatformPublicKeyCredentialDescriptorFunction(WebKit *this)
{
  return qword_1EB358C70;
}

uint64_t ___ZN6WebKitL59initASAuthorizationSecurityKeyPublicKeyCredentialDescriptorEv_block_invoke(WebKit *a1)
{
  WebKit::AuthenticationServicesLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("ASAuthorizationSecurityKeyPublicKeyCredentialDescriptor");
  qword_1EB358C80 = result;
  if (result)
  {
    WebKit::getASAuthorizationSecurityKeyPublicKeyCredentialDescriptorClass[0] = WebKit::ASAuthorizationSecurityKeyPublicKeyCredentialDescriptorFunction;
  }
  else
  {
    uint64_t result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationSecurityKeyPublicKeyCredentialDescriptorFunction(WebKit *this)
{
  return qword_1EB358C80;
}

uint64_t ___ZN6WebKitL58initASAuthorizationSecurityKeyPublicKeyCredentialAssertionEv_block_invoke(WebKit *a1)
{
  WebKit::AuthenticationServicesLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("ASAuthorizationSecurityKeyPublicKeyCredentialAssertion");
  qword_1EB358C90 = result;
  if (result)
  {
    WebKit::getASAuthorizationSecurityKeyPublicKeyCredentialAssertionClass[0] = WebKit::ASAuthorizationSecurityKeyPublicKeyCredentialAssertionFunction;
  }
  else
  {
    uint64_t result = 42;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationSecurityKeyPublicKeyCredentialAssertionFunction(WebKit *this)
{
  return qword_1EB358C90;
}

uint64_t ___ZN6WebKitL61initASAuthorizationPublicKeyCredentialLargeBlobAssertionInputEv_block_invoke(WebKit *a1)
{
  WebKit::AuthenticationServicesLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("ASAuthorizationPublicKeyCredentialLargeBlobAssertionInput");
  qword_1EB358CA0 = result;
  if (result)
  {
    WebKit::getASAuthorizationPublicKeyCredentialLargeBlobAssertionInputClass[0] = WebKit::ASAuthorizationPublicKeyCredentialLargeBlobAssertionInputFunction;
  }
  else
  {
    uint64_t result = 43;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPublicKeyCredentialLargeBlobAssertionInputFunction(WebKit *this)
{
  return qword_1EB358CA0;
}

uint64_t ___ZN6WebKitL64initASAuthorizationPublicKeyCredentialLargeBlobRegistrationInputEv_block_invoke(WebKit *a1)
{
  WebKit::AuthenticationServicesLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("ASAuthorizationPublicKeyCredentialLargeBlobRegistrationInput");
  qword_1EB358CB0 = result;
  if (result)
  {
    WebKit::getASAuthorizationPublicKeyCredentialLargeBlobRegistrationInputClass[0] = WebKit::ASAuthorizationPublicKeyCredentialLargeBlobRegistrationInputFunction;
  }
  else
  {
    uint64_t result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPublicKeyCredentialLargeBlobRegistrationInputFunction(WebKit *this)
{
  return qword_1EB358CB0;
}

uint64_t ___ZN6WebKitL58initASAuthorizationPublicKeyCredentialPRFRegistrationInputEv_block_invoke(WebKit *a1)
{
  WebKit::AuthenticationServicesLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("ASAuthorizationPublicKeyCredentialPRFRegistrationInput");
  qword_1EB358CC0 = result;
  if (result)
  {
    WebKit::getASAuthorizationPublicKeyCredentialPRFRegistrationInputClass[0] = WebKit::ASAuthorizationPublicKeyCredentialPRFRegistrationInputFunction;
  }
  else
  {
    uint64_t result = 47;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPublicKeyCredentialPRFRegistrationInputFunction(WebKit *this)
{
  return qword_1EB358CC0;
}

uint64_t ___ZN6WebKitL61initASAuthorizationPublicKeyCredentialPRFAssertionInputValuesEv_block_invoke(WebKit *a1)
{
  WebKit::AuthenticationServicesLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("ASAuthorizationPublicKeyCredentialPRFAssertionInputValues");
  qword_1EB358CD0 = result;
  if (result)
  {
    WebKit::getASAuthorizationPublicKeyCredentialPRFAssertionInputValuesClass[0] = WebKit::ASAuthorizationPublicKeyCredentialPRFAssertionInputValuesFunction;
  }
  else
  {
    uint64_t result = 48;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPublicKeyCredentialPRFAssertionInputValuesFunction(WebKit *this)
{
  return qword_1EB358CD0;
}

uint64_t ___ZN6WebKitL55initASAuthorizationPublicKeyCredentialPRFAssertionInputEv_block_invoke(WebKit *a1)
{
  WebKit::AuthenticationServicesLibrary(a1);
  uint64_t result = (uint64_t)objc_getClass("ASAuthorizationPublicKeyCredentialPRFAssertionInput");
  qword_1EB358CE0 = result;
  if (result)
  {
    WebKit::getASAuthorizationPublicKeyCredentialPRFAssertionInputClass[0] = WebKit::ASAuthorizationPublicKeyCredentialPRFAssertionInputFunction;
  }
  else
  {
    uint64_t result = 49;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ASAuthorizationPublicKeyCredentialPRFAssertionInputFunction(WebKit *this)
{
  return qword_1EB358CE0;
}

void WebKit::AuthenticatorManager::timeOutTimerFired(WebKit::AuthenticatorManager *this)
{
  unint64_t v7 = this;
  v4[0] = 31;
  uint64_t v2 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Operation timed out.", (const char *)0x14);
  WTF::String::String(&v5, v2, v3);
  std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v6, (uint64_t)v4);
  WebKit::AuthenticatorManager::invokePendingCompletionHandler((uint64_t)this, (WTF::RefCountedBase *)v6);
  std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v6);
  WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v4);
  WebKit::AuthenticatorManager::clearState(this);
}

WTF::RefCountedBase *WebKit::AuthenticatorManager::handleRequest(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v12 = a1;
  uint64_t v11 = a2;
  uint64_t v10 = a3;
  if (WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL())
  {
    v7[0] = 31;
    uint64_t v4 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"This request has been cancelled by a new request.", (const char *)0x31);
    WTF::String::String(&v8, v4, v5);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v9, (uint64_t)v7);
    WebKit::AuthenticatorManager::invokePendingCompletionHandler((uint64_t)a1, (WTF::RefCountedBase *)v9);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v9);
    WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v7);
    WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(a1 + 196));
  }
  WebKit::AuthenticatorManager::clearState((WebKit::AuthenticatorManager *)a1);
  WebKit::WebAuthenticationRequestData::operator=((uint64_t)(a1 + 8), v11);
  WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator=((uint64_t)(a1 + 194));
  WebKit::AuthenticatorManager::initTimeOutTimer((WebKit::AuthenticatorManager *)a1);
  if (a1[212]) {
    return WebKit::AuthenticatorManager::runPresenter((WebKit::AuthenticatorManager *)a1);
  }
  else {
    return (WTF::RefCountedBase *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 56))(a1);
  }
}

BOOL WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL()
{
  return WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL();
}

uint64_t WebKit::AuthenticatorManager::invokePendingCompletionHandler(uint64_t a1, WTF::RefCountedBase *a2)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  BOOL v7 = !std::holds_alternative[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>((uint64_t)a2);
  if (std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator BOOL[abi:sn180100]())
  {
    uint64_t v3 = std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
    WebKit::AuthenticatorPresenterCoordinator::dimissPresenter(v3, v7);
  }
  else
  {
    BOOL v5 = v7;
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void>(&v6, &v5);
    WebKit::AuthenticatorManager::dispatchPanelClientCall(a1, (uint64_t)&v6);
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function((uint64_t)&v6);
  }
  return WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator()((WTF::RefCountedBase *)(a1 + 776), v8);
}

uint64_t std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI1NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm1EJSB_EEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::__variant_detail::__impl<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__impl(a1);
  return a1;
}

void WebCore::ExceptionData::~ExceptionData(WebCore::ExceptionData *this)
{
}

{
  WTF::StringImpl *v1;
  void v2[4];
  WTF::StringImpl *v3;

  v2[1] = (char *)this + 8;
  v2[0] = 0;
  v2[3] = (char *)this + 8;
  v2[2] = v2;
  uint64_t v3 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 1);
  if (v3) {
    WTF::StringImpl::deref(v3, v1);
  }
}

void WebKit::AuthenticatorManager::clearState(WebKit::AuthenticatorManager *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL())
  {
    WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::clear((WebKit::AuthenticatorManager *)((char *)this + 840));
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WebKit::AuthenticatorManager *)((char *)this + 824));
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v2);
    std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::variant[abi:sn180100]<true,0>((uint64_t)&v3);
    WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v4);
    char v5 = 0;
    uint64_t v6 = 0;
    std::optional<WebCore::GlobalFrameIdentifier>::optional[abi:sn180100](v7);
    v7[32] = 0;
    v7[33] = 0;
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)&v8);
    memset(v9, 0, sizeof(v9));
    WebCore::SecurityOriginData::SecurityOriginData((WebCore::SecurityOriginData *)v9);
    memset(&v10, 0, sizeof(v10));
    WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v10);
    memset(v11, 0, sizeof(v11));
    WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::ProcessQualified(v11);
    std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::optional[abi:sn180100](v12);
    int v13 = 0;
    char v14 = 0;
    char v15 = 0;
    memset(&v16, 0, sizeof(v16));
    WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v16);
    WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v17);
    std::optional<WebCore::MediationRequirement>::optional[abi:sn180100](v18);
    std::optional<WebCore::SecurityOriginData>::optional[abi:sn180100](v19);
    WebKit::WebAuthenticationRequestData::operator=((uint64_t)this + 32, (uint64_t)v2);
    WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::WebAuthenticationRequestData *)v2);
    std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator=[abi:sn180100]((uint64_t)this + 816);
  }
}

void WebKit::WebAuthenticationRequestData::operator=(uint64_t a1, uint64_t a2)
{
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)a1, (uint64_t *)a2);
  std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::operator=[abi:sn180100](a1 + 16, a2 + 16);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=((uint64_t *)(a1 + 328), (uint64_t *)(a2 + 328));
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::operator=((uint64_t *)(a1 + 344), (uint64_t *)(a2 + 344));
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
  WebKit::FrameInfoData::operator=(a1 + 384, a2 + 384);
  WTF::String::operator=((uint64_t *)(a1 + 680), (uint64_t *)(a2 + 680));
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=((uint64_t *)(a1 + 688), (uint64_t *)(a2 + 688));
  *(_WORD *)(a1 + 696) = *(_WORD *)(a2 + 696);
  std::optional<WebCore::SecurityOriginData>::operator=[abi:sn180100]((WebCore::SecurityOriginData *)(a1 + 704), a2 + 704);
}

void WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator=(uint64_t a1)
{
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator=(a1);
  WTF::ThreadLikeAssertion::operator=();
}

uint64_t WebKit::AuthenticatorManager::initTimeOutTimer(WebKit::AuthenticatorManager *this)
{
  uint64_t v16 = this;
  char v15 = 3;
  uint64_t result = std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>((uint64_t)this + 728, &v15);
  if ((result & 1) == 0)
  {
    std::optional<unsigned int>::optional[abi:sn180100](v14);
    int v13 = v14;
    int v12 = v14;
    uint64_t v20 = (uint64_t)this + 48;
    v19[3] = &v13;
    v19[2] = &v12;
    BOOL v18 = v14;
    uint64_t v17 = v14;
    uint64_t v28 = v14;
    char v27 = v14;
    uint64_t v26 = v14;
    char v25 = v14;
    WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>::Visitor(v29, (uint64_t)v14, (uint64_t)v14);
    v19[1] = v29[1];
    v19[0] = v29[0];
    v29[2] = v20;
    long long v24 = v19;
    uint64_t v23 = v20;
    uint64_t v22 = 2;
    switch(std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](v20))
    {
      case 0:
        uint64_t v3 = v24;
        std::get[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v23);
        std::invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>,WebCore::PublicKeyCredentialCreationOptions &>(v3, v4);
        goto LABEL_36;
      case 1:
        uint64_t v5 = (uint64_t)v24;
        std::get[abi:sn180100]<1ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v23);
        std::invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>,WebCore::PublicKeyCredentialRequestOptions &>(v5, v6);
        goto LABEL_36;
      case 2:
        __break(1u);
        goto LABEL_6;
      case 3:
LABEL_6:
        __break(1u);
        goto LABEL_7;
      case 4:
LABEL_7:
        __break(1u);
        goto LABEL_8;
      case 5:
LABEL_8:
        __break(1u);
        goto LABEL_9;
      case 6:
LABEL_9:
        __break(1u);
        goto LABEL_10;
      case 7:
LABEL_10:
        __break(1u);
        goto LABEL_11;
      case 8:
LABEL_11:
        __break(1u);
        goto LABEL_12;
      case 9:
LABEL_12:
        __break(1u);
        goto LABEL_13;
      case 10:
LABEL_13:
        __break(1u);
        goto LABEL_14;
      case 11:
LABEL_14:
        __break(1u);
        goto LABEL_15;
      case 12:
LABEL_15:
        __break(1u);
        goto LABEL_16;
      case 13:
LABEL_16:
        __break(1u);
        goto LABEL_17;
      case 14:
LABEL_17:
        __break(1u);
        goto LABEL_18;
      case 15:
LABEL_18:
        __break(1u);
        goto LABEL_19;
      case 16:
LABEL_19:
        __break(1u);
        goto LABEL_20;
      case 17:
LABEL_20:
        __break(1u);
        goto LABEL_21;
      case 18:
LABEL_21:
        __break(1u);
        goto LABEL_22;
      case 19:
LABEL_22:
        __break(1u);
        goto LABEL_23;
      case 20:
LABEL_23:
        __break(1u);
        goto LABEL_24;
      case 21:
LABEL_24:
        __break(1u);
        goto LABEL_25;
      case 22:
LABEL_25:
        __break(1u);
        goto LABEL_26;
      case 23:
LABEL_26:
        __break(1u);
        goto LABEL_27;
      case 24:
LABEL_27:
        __break(1u);
        goto LABEL_28;
      case 25:
LABEL_28:
        __break(1u);
        goto LABEL_29;
      case 26:
LABEL_29:
        __break(1u);
        goto LABEL_30;
      case 27:
LABEL_30:
        __break(1u);
        goto LABEL_31;
      case 28:
LABEL_31:
        __break(1u);
        goto LABEL_32;
      case 29:
LABEL_32:
        __break(1u);
        goto LABEL_33;
      case 30:
LABEL_33:
        __break(1u);
        goto LABEL_34;
      case 31:
LABEL_34:
        __break(1u);
        break;
      default:
        break;
    }
    uint64_t v21 = 2;
    __break(1u);
LABEL_36:
    int v11 = 0;
    int v10 = std::optional<unsigned int>::value_or[abi:sn180100]<unsigned int const&>((uint64_t)v14);
    BOOL v7 = (WTF::Seconds *)std::min[abi:sn180100]<unsigned int>(&v10);
    int v11 = *(_DWORD *)v7;
    LODWORD(v8) = v11;
    double v9 = WTF::Seconds::fromMilliseconds(v7, (double)v8);
    return WTF::RunLoop::TimerBase::startOneShot((uint64_t)this + 784, v9);
  }
  return result;
}

WTF::RefCountedBase *WebKit::AuthenticatorManager::runPresenter(WebKit::AuthenticatorManager *this)
{
  v3[1] = (uint64_t)this;
  WebKit::AuthenticatorManager::getTransports(this, v3);
  if (WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::isEmpty(v3))
  {
    WebKit::AuthenticatorManager::cancel(this);
  }
  else
  {
    WebKit::AuthenticatorManager::startDiscovery((uint64_t)this, v3);
    if (*((_DWORD *)this + 212) != 1) {
      (*(void (**)(WebKit::AuthenticatorManager *, uint64_t *))(*(void *)this + 144))(this, v3);
    }
  }
  return WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::~HashSet((WTF::RefCountedBase *)v3);
}

uint64_t WebKit::AuthenticatorManager::cancelRequest(WebKit::AuthenticatorManager *a1, uint64_t a2, uint64_t a3)
{
  int v11 = a1;
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  uint64_t result = WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL();
  if (result)
  {
    v8[0] = *((void *)a1 + 48);
    v8[1] = *((void *)a1 + 49);
    v8[2] = *((void *)a1 + 50);
    v8[3] = *((void *)a1 + 51);
    if ((std::optional<WebCore::GlobalFrameIdentifier>::operator BOOL[abi:sn180100]((uint64_t)v8) & 1) == 0) {
      return WebKit::AuthenticatorManager::cancelRequest(a1);
    }
    std::optional<WebCore::GlobalFrameIdentifier>::operator->[abi:sn180100]((uint64_t)v8);
    uint64_t result = WTF::operator==<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,(WTF::SupportsObjectIdentifierNullState)0>(v5, v10);
    if (((result ^ 1) & 1) == 0)
    {
      if ((std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator BOOL[abi:sn180100](v9) & 1) == 0) {
        return WebKit::AuthenticatorManager::cancelRequest(a1);
      }
      uint64_t v6 = v9;
      std::optional<WebCore::GlobalFrameIdentifier>::operator->[abi:sn180100]((uint64_t)v8);
      uint64_t result = std::operator!=[abi:sn180100]<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v6, v7 + 8);
      if ((result & 1) == 0) {
        return WebKit::AuthenticatorManager::cancelRequest(a1);
      }
    }
  }
  return result;
}

uint64_t std::optional<WebCore::GlobalFrameIdentifier>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WebCore::GlobalFrameIdentifier,false>::has_value[abi:sn180100](a1) & 1;
}

BOOL WTF::operator==<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,(WTF::SupportsObjectIdentifierNullState)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = std::span<char const,18446744073709551615ul>::data[abi:sn180100](a1);
  return v2 == std::span<char const,18446744073709551615ul>::data[abi:sn180100](a2);
}

void std::optional<WebCore::GlobalFrameIdentifier>::operator->[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WebCore::GlobalFrameIdentifier,false>::has_value[abi:sn180100](a1) & 1) == 0) {
    __break(1u);
  }
  std::__to_address[abi:sn180100]<char const>();
}

uint64_t std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a1) & 1;
}

BOOL std::operator!=[abi:sn180100]<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t a1, uint64_t a2)
{
  if (std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator BOOL[abi:sn180100](a1))
  {
    std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator*[abi:sn180100](a1);
    return !WebCore::operator==(v2, a2);
  }
  else
  {
    return 1;
  }
}

uint64_t WebKit::AuthenticatorManager::cancelRequest(WebKit::AuthenticatorManager *this)
{
  char v15 = this;
  v12[0] = 31;
  uint64_t v2 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"This request has been cancelled by the user.", (const char *)0x2C);
  uint64_t v11 = v3;
  uint64_t v10 = v2;
  WTF::String::String(&v13, v2, v3);
  std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v14, (uint64_t)v12);
  WebKit::AuthenticatorManager::invokePendingCompletionHandler((uint64_t)this, (WTF::RefCountedBase *)v14);
  std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v14);
  WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v12);
  os_log_t oslog = (os_log_t)qword_1EB3587D0;
  char v8 = 16;
  if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = oslog;
    os_log_type_t v5 = v8;
    __os_log_helper_16_0_0(v7);
    _os_log_error_impl(&dword_1985F2000, v4, v5, "Request cancelled due to AuthenticatorManager::cancelRequest being called.", (uint8_t *)v7, 2u);
  }
  WebKit::AuthenticatorManager::clearState(this);
  return WTF::RunLoop::TimerBase::stop((WebKit::AuthenticatorManager *)((char *)this + 784));
}

uint64_t WebKit::AuthenticatorManager::cancelRequest(WebKit::AuthenticatorManager *this, const API::WebAuthenticationPanel *a2)
{
  isMain = (WTF *)WTF::RunLoop::isMain(this);
  if ((isMain ^ 1))
  {
    isIntegralOrPointerType = (WTF *)WTF::isIntegralOrPointerType(isMain);
    WTF::isIntegralOrPointerType(isIntegralOrPointerType);
    __break(0xC471u);
    JUMPOUT(0x1987B2D88);
  }
  uint64_t result = WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL();
  if (result)
  {
    uint64_t result = WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)this + 376);
    if ((const API::WebAuthenticationPanel *)result == a2) {
      return WebKit::AuthenticatorManager::cancelRequest(this);
    }
  }
  return result;
}

uint64_t WTF::RunLoop::isMain(WTF::RunLoop *this)
{
  unint64_t v1 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  return WTF::RunLoop::isCurrent(v1) & 1;
}

uint64_t WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t WebKit::AuthenticatorManager::cancel(WebKit::AuthenticatorManager *this)
{
  isMain = (WTF *)WTF::RunLoop::isMain(this);
  if ((isMain ^ 1))
  {
    isIntegralOrPointerType = (WTF *)WTF::isIntegralOrPointerType(isMain);
    WTF::isIntegralOrPointerType(isIntegralOrPointerType);
    __break(0xC471u);
    JUMPOUT(0x1987B2EE8);
  }
  uint64_t result = WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL();
  if (result) {
    return WebKit::AuthenticatorManager::cancelRequest(this);
  }
  return result;
}

uint64_t WebKit::AuthenticatorManager::enableNativeSupport(uint64_t this)
{
  *(_DWORD *)(this + 848) = 1;
  return this;
}

uint64_t *WebKit::AuthenticatorManager::clearStateAsync(WebKit::AuthenticatorManager *this)
{
  v4[1] = this;
  WTF::RunLoop::main(this);
  WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v3, (uint64_t)this);
  WTF::Function<void ()(void)>::Function<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>(v4, (uint64_t *)&v3);
  WTF::RunLoop::dispatch();
  WTF::Function<void ()(void)>::~Function((uint64_t)v4);
  return WebKit::AuthenticatorManager::clearStateAsync(void)::$_0::~$_0((uint64_t *)&v3);
}

atomic_uint **WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(atomic_uint **a1, uint64_t a2)
{
  return a1;
}

void *WTF::Function<void ()(void)>::Function<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  void v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>,WebKit::AuthenticatorManager::clearStateAsync(void)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t *WebKit::AuthenticatorManager::clearStateAsync(void)::$_0::~$_0(uint64_t *a1)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

void WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::clear(WTF::RefCountedBase *a1)
{
}

void WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(WTF::ASCIILiteral *a1)
{
}

void WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData(WebKit::WebAuthenticationRequestData *this)
{
}

{
  WTF::StringImpl *v2;
  void v3[4];
  API::Object *v4;
  char *v5;
  char *v6;
  void v7[4];
  WTF::StringImpl *v8;

  std::optional<WebCore::SecurityOriginData>::~optional((WebKit::WebAuthenticationRequestData *)((char *)this + 704));
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr((uint64_t *)this + 86);
  os_log_type_t v5 = (char *)this + 680;
  uint64_t v6 = (char *)this + 680;
  v7[1] = (char *)this + 680;
  v7[0] = 0;
  _WORD v7[3] = (char *)this + 680;
  v7[2] = v7;
  char v8 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 85);
  if (v8) {
    WTF::StringImpl::deref(v8, v2);
  }
  WebKit::FrameInfoData::~FrameInfoData((WebKit::WebAuthenticationRequestData *)((char *)this + 384));
  v3[1] = (char *)this + 344;
  v3[0] = 0;
  v3[3] = (char *)this + 344;
  uint64_t v3[2] = v3;
  uint64_t v4 = (API::Object *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 43);
  if (v4) {
    API::Object::deref((CFTypeRef *)v4);
  }
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr((uint64_t *)this + 41);
  std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::~variant[abi:sn180100]((uint64_t)this + 16);
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(this);
}

void std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator=[abi:sn180100](uint64_t a1)
{
}

{
  uint64_t v2;

  uint64_t v2 = std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::release[abi:sn180100]();
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::reset[abi:sn180100](a1, v2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::get_deleter[abi:sn180100]();
  std::to_address[abi:sn180100]<char const>();
}

uint64_t WebKit::AuthenticatorManager::authenticatorAdded(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  uint64_t v3 = (WebKit::Authenticator *)WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get(a2);
  WebKit::Authenticator::setObserver(v3, (atomic_uint *)(a1 + 16));
  uint64_t v4 = WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get(v7);
  WebKit::Authenticator::handleRequest(v4, a1 + 32);
  return WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::add((uint64_t)v6, (WTF::RefCountedBase *)(a1 + 840), v7);
}

uint64_t *WebKit::Authenticator::setObserver(WebKit::Authenticator *this, atomic_uint *a2)
{
  void v4[2] = (atomic_uint *)this;
  v4[1] = a2;
  WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(v4, (uint64_t)a2);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=((uint64_t *)this + 3, (uint64_t *)v4);
  return WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr((uint64_t *)v4);
}

uint64_t WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::add(uint64_t a1, WTF::RefCountedBase *a2, uint64_t a3)
{
  return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::add(a1, a2, a3);
}

void WebKit::AuthenticatorManager::serviceStatusUpdated(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v7 = a1;
  unsigned __int8 v6 = a2;
  if (std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator BOOL[abi:sn180100]())
  {
    uint64_t v3 = std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
    WebKit::AuthenticatorPresenterCoordinator::updatePresenter(v3, v6);
  }
  else
  {
    unsigned __int8 v4 = v6;
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void>(&v5, &v4);
    WebKit::AuthenticatorManager::dispatchPanelClientCall(a1, (uint64_t)&v5);
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function((uint64_t)&v5);
  }
}

BOOL std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator BOOL[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
  return *v0 != 0;
}

uint64_t *WebKit::AuthenticatorManager::dispatchPanelClientCall(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v10, (atomic_uint **)(a1 + 720));
  if (WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(&v10))
  {
    WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v9, a1 + 376);
    WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=((uint64_t *)&v10, (uint64_t *)&v9);
    WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr((uint64_t *)&v9);
  }
  BOOL v3 = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(&v10);
  if (v3)
  {
    int v8 = 1;
  }
  else
  {
    WTF::RunLoop::main((WTF::RunLoop *)v3);
    WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v5, (uint64_t *)&v10);
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function(&v6, v11);
    WTF::Function<void ()(void)>::Function<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>(&v7, &v5);
    WTF::RunLoop::dispatch();
    WTF::Function<void ()(void)>::~Function((uint64_t)&v7);
    WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)const::$_0::~$_0(&v5);
    int v8 = 0;
  }
  return WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr((uint64_t *)&v10);
}

void *WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void>(void *a1, unsigned char *a2)
{
  return a1;
}

{
  void v4[5];

  void v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>,WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function(uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

uint64_t WebKit::AuthenticatorManager::respondReceived(uint64_t a1, WTF::RefCountedBase *a2)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  uint64_t result = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(a1 + 784));
  char v4 = 0;
  if ((result & 1) == 0)
  {
    char v8 = 3;
    uint64_t result = std::operator!=[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(a1 + 728, &v8);
    char v4 = 1;
    if ((result & 1) == 0)
    {
      uint64_t result = WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL();
      char v4 = result ^ 1;
    }
  }
  if ((v4 & 1) == 0)
  {
    BOOL v7 = std::holds_alternative[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>((uint64_t)v9);
    if (!v7)
    {
      std::get[abi:sn180100]<WebCore::ExceptionData,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>((uint64_t)v9);
      BOOL v6 = 1;
      if (*v5 != 8) {
        BOOL v6 = *v5 == 6;
      }
      BOOL v7 = v6;
    }
    if (v7)
    {
      WebKit::AuthenticatorManager::invokePendingCompletionHandler(a1, v9);
      WebKit::AuthenticatorManager::clearStateAsync((WebKit::AuthenticatorManager *)a1);
      return WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(a1 + 784));
    }
    else
    {
      (*(void (**)(uint64_t, WTF::RefCountedBase *))(*(void *)a1 + 128))(a1, v9);
      return WebKit::AuthenticatorManager::restartDiscovery((WebKit::AuthenticatorManager *)a1);
    }
  }
  return result;
}

BOOL std::operator!=[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(uint64_t a1, char *a2)
{
  if (std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100](a1))
  {
    std::optional<WebCore::MediationRequirement>::operator*[abi:sn180100](a1);
    return *v2 != *a2;
  }
  else
  {
    return 1;
  }
}

BOOL std::holds_alternative[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>(uint64_t a1)
{
  return std::__holds_alternative[abi:sn180100]<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>(a1);
}

void std::get[abi:sn180100]<WebCore::ExceptionData,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>(uint64_t a1)
{
}

uint64_t WebKit::AuthenticatorManager::restartDiscovery(WebKit::AuthenticatorManager *this)
{
  uint64_t v5 = (unsigned int *)((char *)this + 824);
  uint64_t v4 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WebKit::AuthenticatorManager *)((char *)this + 824));
  uint64_t result = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v5);
  uint64_t v3 = result;
  while (v4 != v3)
  {
    uint64_t v2 = (WebKit::AuthenticatorTransportService *)WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
    uint64_t result = WebKit::AuthenticatorTransportService::restartDiscovery(v2);
    v4 += 8;
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::AuthenticatorManager::respondReceived(uint64_t a1, WTF::RefCountedBase *a2)
{
  return WebKit::AuthenticatorManager::respondReceived(a1 - 16, a2);
}

uint64_t WebKit::AuthenticatorManager::downgrade(WTF::RunLoop *a1, atomic_uint *a2, uint64_t a3)
{
  uint64_t v9 = a1;
  char v8 = a2;
  uint64_t v7 = a3;
  WTF::RunLoop::main(a1);
  WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(v5, (uint64_t)a1);
  v5[1] = v8;
  WTF::Function<void ()(void)>::Function<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>(&v6, (uint64_t *)v5);
  WTF::RunLoop::dispatch();
  WTF::Function<void ()(void)>::~Function((uint64_t)&v6);
  WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0::~$_0((uint64_t *)v5);
  return WebKit::AuthenticatorManager::authenticatorAdded((uint64_t)a1, v7);
}

void *WTF::Function<void ()(void)>::Function<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  void v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t *WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0::~$_0(uint64_t *a1)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

uint64_t non-virtual thunk to'WebKit::AuthenticatorManager::downgrade(uint64_t a1, atomic_uint *a2, uint64_t a3)
{
  return WebKit::AuthenticatorManager::downgrade((WTF::RunLoop *)(a1 - 16), a2, a3);
}

void WebKit::AuthenticatorManager::authenticatorStatusUpdated(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v9 = a1;
  unsigned __int8 v8 = a2;
  memset(&__b, 0, sizeof(__b));
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&__b);
  WTF::String::operator=((uint64_t *)(a1 + 712), &__b);
  p_b = &__b;
  uint64_t v11 = &__b;
  uint64_t v12 = &__b;
  v13[1] = &__b;
  v13[0] = 0;
  v13[3] = &__b;
  v13[2] = v13;
  char v14 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&__b);
  if (v14) {
    WTF::StringImpl::deref(v14, v3);
  }
  if (std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator BOOL[abi:sn180100]())
  {
    uint64_t v4 = std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
    WebKit::AuthenticatorPresenterCoordinator::updatePresenter(v4, v8);
  }
  else
  {
    unsigned __int8 v5 = v8;
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void>(&v6, &v5);
    WebKit::AuthenticatorManager::dispatchPanelClientCall(a1, (uint64_t)&v6);
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function((uint64_t)&v6);
  }
}

void *WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void>(void *a1, unsigned char *a2)
{
  return a1;
}

{
  void v4[5];

  void v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>,WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

void non-virtual thunk to'WebKit::AuthenticatorManager::authenticatorStatusUpdated(uint64_t a1, unsigned __int8 a2)
{
}

WTF::StringImpl *WebKit::AuthenticatorManager::requestPin(atomic_uint *a1, uint64_t a2, WTF::RefCountedBase *a3)
{
  unsigned int v19 = a1;
  uint64_t v18 = a2;
  uint64_t v17 = a3;
  if (WTF::String::isNull((WTF::String *)(a1 + 178)))
  {
    WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(v14, (uint64_t)a1);
    v14[1] = a1;
    WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler(&v15, (uint64_t)v17);
    if (std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator BOOL[abi:sn180100]())
    {
      uint64_t v6 = std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
      uint64_t v7 = v18;
      WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v12);
      WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)>&&)::$_0,void>(&v13, (uint64_t *)v14);
      WebKit::AuthenticatorPresenterCoordinator::requestPin(v6, v7, &v13);
      WTF::CompletionHandler<void ()(WTF::String const&)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v13);
      WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v12);
      int v11 = 1;
    }
    else
    {
      uint64_t v8 = v18;
      WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::$_0(v9, (uint64_t *)v14);
      WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void>(&v10, &v8);
      WebKit::AuthenticatorManager::dispatchPanelClientCall((uint64_t)a1, (uint64_t)&v10);
      WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function((uint64_t)&v10);
      WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1::~$_1((uint64_t)&v8);
      int v11 = 0;
    }
    return (WTF::StringImpl *)WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::~$_0((uint64_t *)v14);
  }
  else
  {
    WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(v17, (WTF::RefCountedBase *)(a1 + 178));
    memset(&__b, 0, sizeof(__b));
    WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&__b);
    WTF::String::operator=((uint64_t *)a1 + 89, &__b);
    p_b = &__b;
    uint64_t v21 = &__b;
    uint64_t v22 = &__b;
    v23[1] = &__b;
    v23[0] = 0;
    v23[3] = &__b;
    v23[2] = v23;
    uint64_t result = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&__b);
    long long v24 = result;
    if (result) {
      return WTF::StringImpl::deref(v24, v5);
    }
  }
  return result;
}

BOOL WTF::String::isNull(WTF::String *this)
{
  return WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(this);
}

uint64_t WTF::CompletionHandler<void ()(WTF::String const&)>::operator()(WTF::RefCountedBase *a1, WTF::RefCountedBase *a2)
{
  void v4[2] = a1;
  v4[1] = a2;
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  std::exchange[abi:sn180100]<WTF::Function<void ()(WTF::String const&)>,decltype(nullptr)>(v4, (uint64_t)a1);
  WTF::Function<void ()(WTF::String const&)>::operator()();
  return WTF::Function<void ()(WTF::String const&)>::~Function((uint64_t)v4);
}

void *WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Function<void ()(WTF::String const&)>::Function(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

void *WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)>&&)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Function<void ()(WTF::String const&)>::Function<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(WTF::String const&)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  return a1;
}

{
  char v3;
  WTF::ThreadLikeAssertion *v4;

  uint64_t v4 = a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::operator=();
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(a1);
  WTF::Function<void ()(WTF::String const&)>::~Function((uint64_t)a1);
  return a1;
}

void WTF::ThreadLikeAssertion::~ThreadLikeAssertion(WTF::ThreadLikeAssertion *this)
{
}

{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(this);
}

uint64_t *WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  a1[1] = a2[1];
  WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler(a1 + 2, (uint64_t)(a2 + 2));
  return a1;
}

void *WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void>(void *a1, void *a2)
{
  return a1;
}

{
  void v4[5];

  void v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void,API::WebAuthenticationPanel const&>,WTF::CompletionHandler<void ()(WTF::String const&)> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1::~$_1(uint64_t a1)
{
  return a1;
}

{
  WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::~$_0((uint64_t *)(a1 + 8));
  return a1;
}

uint64_t *WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::~$_0(uint64_t *a1)
{
  return a1;
}

{
  WTF::CompletionHandler<void ()(WTF::String const&)>::~CompletionHandler((WTF::ThreadLikeAssertion *)(a1 + 2));
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

WTF::StringImpl *non-virtual thunk to'WebKit::AuthenticatorManager::requestPin(uint64_t a1, uint64_t a2, WTF::RefCountedBase *a3)
{
  return WebKit::AuthenticatorManager::requestPin((atomic_uint *)(a1 - 16), a2, a3);
}

void WebKit::AuthenticatorManager::selectAssertionResponse(uint64_t a1, uint64_t *a2, char a3, uint64_t *a4)
{
  uint64_t v12 = a1;
  int v11 = (unsigned int *)a2;
  char v10 = a3;
  uint64_t v9 = a4;
  if (std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator BOOL[abi:sn180100]())
  {
    uint64_t v5 = std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
    WebKit::AuthenticatorPresenterCoordinator::selectAssertionResponse(v5, v11, v10 & 1, v9);
  }
  else
  {
    WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v6, (uint64_t *)v11);
    v6[16] = v10 & 1;
    WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler(&v7, (uint64_t)v9);
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void>(&v8, (uint64_t)v6);
    WebKit::AuthenticatorManager::dispatchPanelClientCall(a1, (uint64_t)&v8);
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function((uint64_t)&v8);
    WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0::~$_0((uint64_t)v6);
  }
}

uint64_t WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t *a2)
{
  return a1;
}

void *WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[5];

  void v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void,API::WebAuthenticationPanel const&>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0::~$_0(uint64_t a1)
{
  return a1;
}

{
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse *)>::~CompletionHandler((WTF::ThreadLikeAssertion *)(a1 + 24));
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)a1);
  return a1;
}

void non-virtual thunk to'WebKit::AuthenticatorManager::selectAssertionResponse(uint64_t a1, uint64_t *a2, char a3, uint64_t *a4)
{
}

WTF::ThreadLikeAssertion *WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(uint64_t a1, uint64_t a2)
{
  v5[2] = a1;
  v5[1] = a2;
  WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler(&v4, a2);
  WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void>(v5, (uint64_t)&v4);
  WebKit::AuthenticatorManager::dispatchPanelClientCall(a1, (uint64_t)v5);
  WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function((uint64_t)v5);
  return WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&v4);
}

void *WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[5];

  void v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void,API::WebAuthenticationPanel const&>,WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

WTF::ThreadLikeAssertion *WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0::~$_0(WTF::ThreadLikeAssertion *a1)
{
  return a1;
}

{
  WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)>::~CompletionHandler(a1);
  return a1;
}

WTF::ThreadLikeAssertion *non-virtual thunk to'WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(uint64_t a1, uint64_t a2)
{
  return WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(a1 - 16, a2);
}

WTF::ThreadLikeAssertion *WebKit::AuthenticatorManager::requestLAContextForUserVerification(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  if (std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator BOOL[abi:sn180100]())
  {
    uint64_t v3 = std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
    return (WTF::ThreadLikeAssertion *)WebKit::AuthenticatorPresenterCoordinator::requestLAContextForUserVerification(v3, v7);
  }
  else
  {
    WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler(&v5, (uint64_t)v7);
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void>(&v6, (uint64_t)&v5);
    WebKit::AuthenticatorManager::dispatchPanelClientCall(a1, (uint64_t)&v6);
    WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function((uint64_t)&v6);
    return WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&v5);
  }
}

void *WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void>(void *a1, uint64_t a2)
{
  return a1;
}

{
  void v4[5];

  void v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void,API::WebAuthenticationPanel const&>,WTF::CompletionHandler<void ()(LAContext *)> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

WTF::ThreadLikeAssertion *WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0::~$_0(WTF::ThreadLikeAssertion *a1)
{
  return a1;
}

{
  WTF::CompletionHandler<void ()(LAContext *)>::~CompletionHandler(a1);
  return a1;
}

WTF::ThreadLikeAssertion *non-virtual thunk to'WebKit::AuthenticatorManager::requestLAContextForUserVerification(uint64_t a1, uint64_t *a2)
{
  return WebKit::AuthenticatorManager::requestLAContextForUserVerification(a1 - 16, a2);
}

_WORD *__os_log_helper_16_0_0(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t non-virtual thunk to'WebKit::AuthenticatorManager::cancelRequest(WebKit::AuthenticatorManager *this)
{
  return WebKit::AuthenticatorManager::cancelRequest((WebKit::AuthenticatorManager *)((char *)this - 16));
}

WebKit::HidService *WebKit::AuthenticatorManager::createService@<X0>(unsigned __int8 a1@<W1>, WebKit::AuthenticatorTransportServiceObserver *a2@<X2>, WebKit::HidService **a3@<X8>)
{
  return WebKit::AuthenticatorTransportService::create(a1, a2, a3);
}

uint64_t WebKit::AuthenticatorManager::filterTransports(WebKit::NfcService *a1, uint64_t *a2)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  uint64_t isAvailable = WebKit::NfcService::isAvailable(a1);
  if ((isAvailable & 1) == 0)
  {
    unsigned __int8 v6 = 1;
    uint64_t isAvailable = WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove(v7, &v6);
  }
  if ((WebKit::LocalService::isAvailable((WebKit::LocalService *)isAvailable) & 1) == 0)
  {
    unsigned __int8 v5 = 3;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove(v7, &v5);
  }
  unsigned __int8 v4 = 2;
  return WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove(v7, &v4);
}

uint64_t WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = (WTF *)WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::find(a1, a2);
  return WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove(a1, v3, v4);
}

WTF::ASCIILiteral *WebKit::AuthenticatorManager::startDiscovery(uint64_t a1, uint64_t *a2)
{
  void v5[3] = a1;
  v5[2] = (uint64_t)a2;
  uint64_t v4 = a1;
  WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebKit::AuthenticatorManager::startDiscovery(WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&)::$_0,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const>((uint64_t)v5, a2, &v4);
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)(a1 + 824), v5);
  return WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v5);
}

BOOL WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebKit::AuthenticatorManager::startDiscovery(WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&)::$_0,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const>(uint64_t a1, uint64_t *a2, void *a3)
{
  return WTF::Mapper<WebKit::AuthenticatorManager::startDiscovery(WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&)::$_0,WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,void>::map(a1, a2, a3);
}

void WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF::ASCIILiteral *a1, uint64_t *a2)
{
  if (*((_DWORD *)a1 + 3))
  {
    uint64_t v3 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    uint64_t v4 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::destruct(v3, v4);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a2);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
}

WTF::ASCIILiteral *WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(WTF::ASCIILiteral *a1)
{
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;

  if (*((_DWORD *)a1 + 3))
  {
    uint64_t v2 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    uint64_t v3 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::destruct(v2, v3);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1);
  return a1;
}

BOOL std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(uint64_t a1, char *a2)
{
  if (std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100](a1))
  {
    std::optional<WebCore::MediationRequirement>::operator*[abi:sn180100](a1);
    return *v2 == *a2;
  }
  else
  {
    return 0;
  }
}

_DWORD *std::min[abi:sn180100]<unsigned int>(_DWORD *a1)
{
}

uint64_t std::optional<unsigned int>::value_or[abi:sn180100]<unsigned int const&>(uint64_t a1)
{
  if ((std::__optional_storage_base<unsigned int,false>::has_value[abi:sn180100](a1) & 1) == 0) {
    return 120000;
  }
  std::__to_address[abi:sn180100]<char const>();
  return *v1;
}

uint64_t WTF::RunLoop::TimerBase::startOneShot(uint64_t a1, double a2)
{
  double v4 = a2;
  *(void *)&uint64_t v3[2] = a1;
  v3[0] = WTF::seconds_literals::operator"" _s();
  v3[1] = *std::max[abi:sn180100]<WTF::Seconds>(&v4, v3);
  return WTF::RunLoop::TimerBase::start();
}

double WTF::Seconds::fromMilliseconds(WTF::Seconds *this, double a2)
{
  WTF::Seconds::Seconds((WTF::Seconds *)&v3, a2 / 1000.0);
  return v3;
}

WebKit::WebPageProxy *WebKit::AuthenticatorManager::runPanel(WebKit::AuthenticatorManager *this)
{
  v37[37] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v26 = this;
  uint64_t result = (WebKit::WebPageProxy *)WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get((uint64_t *)this + 45);
  char v25 = result;
  if (result)
  {
    long long v24 = 0;
    std::optional<WebCore::GlobalFrameIdentifier>::operator->[abi:sn180100]((uint64_t)this + 384);
    long long v23 = *(_OWORD *)(v3 + 8);
    uint64_t result = (WebKit::WebPageProxy *)WebKit::WebFrameProxy::webFrame(v23, *((uint64_t *)&v23 + 1));
    long long v24 = result;
    if (result)
    {
      uint64_t v22 = (uint64_t)this + 48;
      WebKit::AuthenticatorManager::getTransports(this, &v21);
      if (WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::isEmpty(&v21))
      {
        WebKit::AuthenticatorManager::cancel(this);
        int v20 = 1;
      }
      else
      {
        BOOL ClientDataType = WebKit::getClientDataType(v22);
        API::WebAuthenticationPanel::create((uint64_t)this, &v18, &v21, ClientDataType, &v17, &v19);
        WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::operator=<API::WebAuthenticationPanel>((uint64_t *)this + 47, &v19);
        WTF::Ref<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::~Ref(&v19);
        uint64_t v28 = &v17;
        CFTypeRef v29 = &v17;
        uint64_t v30 = &v17;
        v31[1] = &v17;
        v31[0] = 0;
        v31[3] = &v17;
        v31[2] = v31;
        CFTypeRef v32 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v17);
        if (v32) {
          WTF::StringImpl::deref(v32, v5);
        }
        char v27 = &v18;
        uint64_t v33 = &v18;
        uint64_t v34 = &v18;
        v35[1] = &v18;
        v35[0] = 0;
        v35[3] = &v18;
        v35[2] = v35;
        uint64_t v36 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v18);
        if (v36) {
          WTF::StringImpl::deref(v36, v6);
        }
        uint64_t v16 = WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)this + 376);
        uint64_t v7 = WebKit::WebPageProxy::uiClient(v25);
        uint64_t v8 = v25;
        uint64_t v9 = v16;
        char v10 = v24;
        WebKit::FrameInfoData::FrameInfoData(v37, (const String *)this + 52);
        WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::HashSet(&v12, (WTF::RefCountedBase *)&v21);
        WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v13, v16);
        WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(v14, (uint64_t)this);
        v14[1] = (atomic_uint *)this;
        WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v11);
        WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)>::CompletionHandler<WebKit::AuthenticatorManager::runPanel(void)::$_0,void>(&v15, &v12);
        (*(void (**)(uint64_t, WebKit::WebPageProxy *, uint64_t, WebKit::WebPageProxy *, CFTypeRef *, uint64_t *))(*(void *)v7 + 552))(v7, v8, v9, v10, v37, &v15);
        WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v15);
        WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v11);
        WebKit::AuthenticatorManager::runPanel(void)::$_0::~$_0(&v12);
        WebKit::FrameInfoData::~FrameInfoData((WebKit::FrameInfoData *)v37);
        int v20 = 0;
      }
      return WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::~HashSet((WTF::RefCountedBase *)&v21);
    }
  }
  return result;
}

uint64_t WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get(uint64_t *a1)
{
  if (!WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(a1)) {
    return 0;
  }
  uint64_t v2 = std::span<char const,18446744073709551615ul>::size[abi:sn180100](*a1);
  if (v2) {
    return v2 - 16;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::AuthenticatorManager::getTransports@<X0>(WebKit::AuthenticatorManager *this@<X0>, void *a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v12 = this;
  char v11 = 0;
  WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::HashSet(a2);
  char v10 = a2;
  uint64_t v9 = a2;
  uint64_t v17 = (uint64_t)this + 48;
  v16[3] = &v10;
  v16[2] = &v9;
  uint64_t v15 = a2;
  char v14 = a2;
  char v25 = a2;
  long long v24 = a2;
  long long v23 = a2;
  uint64_t v22 = a2;
  WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>::Visitor(v26, (uint64_t)a2, (uint64_t)a2);
  v16[1] = v26[1];
  v16[0] = v26[0];
  v26[2] = v17;
  uint64_t v21 = (WTF::RefCountedBase **)v16;
  uint64_t v20 = v17;
  uint64_t v19 = 2;
  switch(std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](v17))
  {
    case 0:
      double v4 = v21;
      std::get[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v20);
      std::invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(v4, v5);
      return (*(uint64_t (**)(WebKit::AuthenticatorManager *, void *))(*(void *)this + 136))(this, a2);
    case 1:
      uint64_t v6 = (uint64_t)v21;
      std::get[abi:sn180100]<1ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v20);
      std::invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(v6, v7);
      return (*(uint64_t (**)(WebKit::AuthenticatorManager *, void *))(*(void *)this + 136))(this, a2);
    case 2:
      __break(1u);
      goto LABEL_5;
    case 3:
LABEL_5:
      __break(1u);
      goto LABEL_6;
    case 4:
LABEL_6:
      __break(1u);
      goto LABEL_7;
    case 5:
LABEL_7:
      __break(1u);
      goto LABEL_8;
    case 6:
LABEL_8:
      __break(1u);
      goto LABEL_9;
    case 7:
LABEL_9:
      __break(1u);
      goto LABEL_10;
    case 8:
LABEL_10:
      __break(1u);
      goto LABEL_11;
    case 9:
LABEL_11:
      __break(1u);
      goto LABEL_12;
    case 10:
LABEL_12:
      __break(1u);
      goto LABEL_13;
    case 11:
LABEL_13:
      __break(1u);
      goto LABEL_14;
    case 12:
LABEL_14:
      __break(1u);
      goto LABEL_15;
    case 13:
LABEL_15:
      __break(1u);
      goto LABEL_16;
    case 14:
LABEL_16:
      __break(1u);
      goto LABEL_17;
    case 15:
LABEL_17:
      __break(1u);
      goto LABEL_18;
    case 16:
LABEL_18:
      __break(1u);
      goto LABEL_19;
    case 17:
LABEL_19:
      __break(1u);
      goto LABEL_20;
    case 18:
LABEL_20:
      __break(1u);
      goto LABEL_21;
    case 19:
LABEL_21:
      __break(1u);
      goto LABEL_22;
    case 20:
LABEL_22:
      __break(1u);
      goto LABEL_23;
    case 21:
LABEL_23:
      __break(1u);
      goto LABEL_24;
    case 22:
LABEL_24:
      __break(1u);
      goto LABEL_25;
    case 23:
LABEL_25:
      __break(1u);
      goto LABEL_26;
    case 24:
LABEL_26:
      __break(1u);
      goto LABEL_27;
    case 25:
LABEL_27:
      __break(1u);
      goto LABEL_28;
    case 26:
LABEL_28:
      __break(1u);
      goto LABEL_29;
    case 27:
LABEL_29:
      __break(1u);
      goto LABEL_30;
    case 28:
LABEL_30:
      __break(1u);
      goto LABEL_31;
    case 29:
LABEL_31:
      __break(1u);
      goto LABEL_32;
    case 30:
LABEL_32:
      __break(1u);
      goto LABEL_33;
    case 31:
LABEL_33:
      __break(1u);
      break;
    default:
      break;
  }
  uint64_t v18 = 2;
  __break(1u);
  return (*(uint64_t (**)(WebKit::AuthenticatorManager *, void *))(*(void *)this + 136))(this, a2);
}

BOOL WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::isEmpty(void *a1)
{
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmpty(a1);
}

WTF::String *WebKit::anonymous namespace'::getRpId(WTF::String *a1, uint64_t a2)
{
  if (std::holds_alternative[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a2))
  {
    std::get[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a2);
    std::optional<WTF::String>::operator*[abi:sn180100](v3 + 16);
    return WTF::String::String(a1, v4);
  }
  else
  {
    std::get[abi:sn180100]<WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a2);
    return WTF::String::String(a1, v6 + 3);
  }
}

WTF::String *WebKit::anonymous namespace'::getUserName(WTF::String *a1, uint64_t a2)
{
  BOOL v3 = std::holds_alternative[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a2);
  if (v3)
  {
    std::get[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a2);
    return WTF::String::String(a1, v4 + 4);
  }
  else
  {
    uint64_t v6 = (const String *)WTF::emptyString((WTF *)v3);
    return WTF::String::String(a1, v6);
  }
}

void WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::operator=<API::WebAuthenticationPanel>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3[2] = (uint64_t)a1;
  v3[1] = (uint64_t)a2;
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(v3, a2);
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v3);
  double v3[3] = (uint64_t)v3;
  v4[1] = v3;
  v4[0] = 0;
  v4[3] = v3;
  void v4[2] = v4;
  uint64_t v5 = (CFTypeRef *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v3);
  if (v5) {
    API::Object::deref(v5);
  }
}

uint64_t *WTF::Ref<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::~Ref(uint64_t *a1)
{
  return a1;
}

{
  uint64_t v2;
  CFTypeRef *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  CFTypeRef *v8;

  double v4 = a1;
  uint64_t v5 = a1;
  BOOL v3 = 0;
  uint64_t v2 = 0;
  uint64_t v7 = a1;
  uint64_t v6 = &v2;
  BOOL v3 = (CFTypeRef *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v3)
  {
    uint64_t v8 = v3;
    API::Object::deref(v3);
  }
  return v5;
}

uint64_t WebKit::WebPageProxy::uiClient(WebKit::WebPageProxy *this)
{
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
}

CFTypeRef *WebKit::FrameInfoData::FrameInfoData(CFTypeRef *this, const String *a2)
{
  return this;
}

{
  *(_WORD *)this = a2->m_impl.m_ptr;
  WebCore::ResourceRequest::ResourceRequest(this + 1, a2 + 1);
  WebCore::SecurityOriginData::SecurityOriginData((WebCore::SecurityOriginData *)(this + 26), (const WebCore::SecurityOriginData *)&a2[26]);
  WTF::String::String((WTF::String *)(this + 30), a2 + 30);
  memcpy(this + 31, &a2[31], 0x2EuLL);
  return this;
}

uint64_t *WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::HashSet(uint64_t *a1, WTF::RefCountedBase *a2)
{
  return a1;
}

{
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTable(a1, a2);
  return a1;
}

atomic_uint **WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(atomic_uint **a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v3;

  BOOL v3 = WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get(a2);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(a1, v3);
  return a1;
}

{
  atomic_uint *v5;

  uint64_t v5 = (atomic_uint *)WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::implForObject<API::WebAuthenticationPanel>(a2);
  if (v5) {
    WTF::ThreadSafeRefCountedBase::ref(v5);
  }
  *a1 = v5;
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(a1, a2);
  return a1;
}

{
  atomic_uint *v3;
  atomic_uint *v6;

  if (a2) {
    BOOL v3 = (atomic_uint *)WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::implForObject<API::WebAuthenticationPanel>(a2);
  }
  else {
    BOOL v3 = 0;
  }
  uint64_t v6 = v3;
  if (v3) {
    WTF::ThreadSafeRefCountedBase::ref(v3);
  }
  *a1 = v6;
  return a1;
}

void *WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)>::CompletionHandler<WebKit::AuthenticatorManager::runPanel(void)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Function<void ()(WebKit::WebAuthenticationPanelResult)>::Function<WebKit::AuthenticatorManager::runPanel(void)::$_0,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  return a1;
}

{
  char v3;
  WTF::ThreadLikeAssertion *v4;

  double v4 = a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::operator=();
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(a1);
  WTF::Function<void ()(WebKit::WebAuthenticationPanelResult)>::~Function((uint64_t)a1);
  return a1;
}

uint64_t *WebKit::AuthenticatorManager::runPanel(void)::$_0::~$_0(uint64_t *a1)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1 + 2);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1 + 1);
  WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::~HashSet((WTF::RefCountedBase *)a1);
  return a1;
}

void WebKit::FrameInfoData::~FrameInfoData(WebKit::FrameInfoData *this)
{
}

{
  WTF::StringImpl *v2;
  void v3[4];
  WTF::StringImpl *v4;

  v3[1] = (char *)this + 240;
  v3[0] = 0;
  double v3[3] = (char *)this + 240;
  uint64_t v3[2] = v3;
  double v4 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 30);
  if (v4) {
    WTF::StringImpl::deref(v4, v2);
  }
  WebCore::SecurityOriginData::~SecurityOriginData((WebKit::FrameInfoData *)((char *)this + 208));
  WebCore::ResourceRequest::~ResourceRequest((WebKit::FrameInfoData *)((char *)this + 8));
}

WTF::RefCountedBase *WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::~HashSet(WTF::RefCountedBase *a1)
{
  return a1;
}

{
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::~HashTable(a1);
  return a1;
}

WTF::StringImpl *WebKit::AuthenticatorManager::runPresenterInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = a1;
  uint64_t v12 = a2;
  uint64_t v11 = a1 + 48;
  uint64_t v3 = v12;
  BOOL ClientDataType = WebKit::getClientDataType(v11);
  uint64_t v21 = v10;
  uint64_t v20 = a1;
  uint64_t v19 = &v9;
  uint64_t v18 = v3;
  p_BOOL ClientDataType = &ClientDataType;
  uint64_t v16 = &v7;
  std::make_unique[abi:sn180100]<WebKit::AuthenticatorPresenterCoordinator,WebKit::AuthenticatorManager &,WTF::String,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,WebCore::ClientDataType,WTF::String>((WebKit::AuthenticatorPresenterCoordinator *)v10, a1, (uint64_t)&v9, v3, &ClientDataType, (uint64_t)&v7);
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator=[abi:sn180100](a1 + 816);
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::~unique_ptr[abi:sn180100]((uint64_t)v10);
  uint64_t v15 = &v7;
  uint64_t v22 = &v7;
  long long v23 = &v7;
  v24[1] = &v7;
  v24[0] = 0;
  v24[3] = &v7;
  v24[2] = v24;
  char v25 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v7);
  if (v25) {
    WTF::StringImpl::deref(v25, v4);
  }
  char v14 = &v9;
  uint64_t v26 = &v9;
  char v27 = &v9;
  v28[1] = &v9;
  v28[0] = 0;
  v28[3] = &v9;
  v28[2] = v28;
  uint64_t result = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v9);
  CFTypeRef v29 = result;
  if (result) {
    return WTF::StringImpl::deref(v29, v6);
  }
  return result;
}

uint64_t std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::reset[abi:sn180100](a1, 0);
  return a1;
}

void *WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void>(void *a1, unsigned char *a2)
{
  return a1;
}

{
  void v4[5];

  void v4[2] = a1;
  v4[1] = a2;
  void v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void,API::WebAuthenticationPanel const&>,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator()(WTF::RefCountedBase *a1, WTF::RefCountedBase *a2)
{
  void v4[2] = a1;
  v4[1] = a2;
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  std::exchange[abi:sn180100]<WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>,decltype(nullptr)>(v4, (uint64_t)a1);
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator()();
  return WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)v4);
}

uint64_t WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(unsigned int *a1)
{
  return WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)a1)
       + 8 * a1[3];
}

uint64_t WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->()
{
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
}

void *WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::HashSet(void *a1)
{
  return a1;
}

atomic_uint **WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(atomic_uint **a1, atomic_uint **a2)
{
  return a1;
}

{
  atomic_uint *v5;

  uint64_t v5 = *a2;
  if (*a2) {
    WTF::ThreadSafeRefCountedBase::ref(v5);
  }
  *a1 = v5;
  return a1;
}

BOOL WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(void *a1)
{
  BOOL v2 = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(a1);
  BOOL v3 = 1;
  if (!v2)
  {
    uint64_t v4 = WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)a1);
    return !WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::operator BOOL(v4);
  }
  return v3;
}

uint64_t *WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=(uint64_t *a1, uint64_t *a2)
{
  return WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=(a1, a2);
}

uint64_t *WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(uint64_t *a1)
{
  return a1;
}

void *WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function(void *a1, uint64_t a2)
{
  return a1;
}

void *WTF::Function<void ()(void)>::Function<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  void v4[2] = a1;
  v4[1] = a2;
  void v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>,WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t *WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)const::$_0::~$_0(uint64_t *a1)
{
  return a1;
}

{
  WTF::Function<void ()(API::WebAuthenticationPanel const&)>::~Function((uint64_t)(a1 + 1));
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

void WebKit::AuthenticatorManager::~AuthenticatorManager(WebKit::AuthenticatorManager *this)
{
}

{
  void *v2;

  WebKit::AuthenticatorManager::~AuthenticatorManager(this);
  WTF::FastMalloc::free(this, v2);
}

{
  *(void *)this = &unk_1EE9B3288;
  *((void *)this + 2) = &unk_1EE9B3330;
  WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::~HashSet((WebKit::AuthenticatorManager *)((char *)this + 840));
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebKit::AuthenticatorManager *)((char *)this + 824));
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::~unique_ptr[abi:sn180100]((uint64_t)this + 816);
  WTF::RunLoop::Timer::~Timer((WebKit::AuthenticatorManager *)((char *)this + 784));
  WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~CompletionHandler((WebKit::AuthenticatorManager *)((char *)this + 776));
  WebKit::WebAuthenticationRequestData::~WebAuthenticationRequestData((WebKit::AuthenticatorManager *)((char *)this + 32));
  WebKit::AuthenticatorObserver::~AuthenticatorObserver((WebKit::AuthenticatorManager *)((char *)this + 16));
  WebKit::AuthenticatorObserver::~AuthenticatorObserver(this);
}

uint64_t WebKit::AuthenticatorManager::isMock(WebKit::AuthenticatorManager *this)
{
  return 0;
}

uint64_t WebKit::AuthenticatorManager::isVirtual(WebKit::AuthenticatorManager *this)
{
  return 0;
}

void non-virtual thunk to'WebKit::AuthenticatorManager::~AuthenticatorManager(WebKit::AuthenticatorManager *this)
{
}

{
  WebKit::AuthenticatorManager::~AuthenticatorManager((WebKit::AuthenticatorManager *)((char *)this - 16));
}

void WebKit::AuthenticatorTransportServiceObserver::~AuthenticatorTransportServiceObserver(WebKit::AuthenticatorTransportServiceObserver *this)
{
}

{
  __break(1u);
}

void WebKit::AuthenticatorObserver::~AuthenticatorObserver(WebKit::AuthenticatorObserver *this)
{
}

{
  __break(1u);
}

{
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase((uint64_t *)this + 1);
}

void *WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::Ref(void *a1, _DWORD *a2)
{
  return a1;
}

{
  WTF::StringImpl::ref(a2);
  *a1 = a2;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI1NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm1EJSB_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI2NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm1EJSB_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm1EJSC_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__base[abi:sn180100]<1ul,WebCore::ExceptionData>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = 1;
  return a1;
}

uint64_t std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__union[abi:sn180100]<1ul,WebCore::ExceptionData>(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,1ul,WebCore::ExceptionData>::__union[abi:sn180100]<WebCore::ExceptionData>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__union<(std::__variant_detail::_Trait)1,1ul,WebCore::ExceptionData>::__union[abi:sn180100]<WebCore::ExceptionData>(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::__variant_detail::__alt<1ul,WebCore::ExceptionData>::__alt[abi:sn180100]<WebCore::ExceptionData>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__alt<1ul,WebCore::ExceptionData>::__alt[abi:sn180100]<WebCore::ExceptionData>(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  WebCore::ExceptionData::ExceptionData(a1, a2);
  return a1;
}

uint64_t WebCore::ExceptionData::ExceptionData(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  return a1;
}

uint64_t std::__variant_detail::__impl<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__impl(uint64_t a1)
{
  return a1;
}

{
  std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::~__copy_assignment(a1);
  return a1;
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::~__copy_assignment(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::~__move_assignment(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>>::~__assignment(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::~__copy_constructor(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::~__move_constructor(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>>::~__ctor(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](uint64_t a1)
{
  uint64_t v4 = a1;
  uint64_t result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::valueless_by_exception[abi:sn180100](a1);
  if ((result & 1) == 0) {
    uint64_t result = _ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0_((uint64_t)&v3, a1);
  }
  *(_DWORD *)(a1 + 16) = -1;
  return result;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__base(uint64_t a1)
{
  return a1;
}

BOOL std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::valueless_by_exception[abi:sn180100](uint64_t a1)
{
  return std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::index[abi:sn180100](a1) == -1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a1;
  v8[2] = a2;
  v8[0] = off_1EE9B2F30[0];
  v8[1] = off_1EE9B2F38[0];
  uint64_t v2 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::index[abi:sn180100](a2);
  _ZNSt3__116__variant_detail12__visitation6__base4__atB8sn180100IPFvOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS0_6__baseILSH_1EJSE_SF_EEEELm2EJEEEODaRKNS_8__farrayISJ_XT0_EEEmDpT1_((uint64_t)v8, v2);
  uint64_t v4 = *v3;
  uint64_t v5 = v9;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v6);
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::index[abi:sn180100](uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) == -1) {
    return -1;
  }
  else {
    return *(unsigned int *)(a1 + 16);
  }
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm0ESC_EEEEEDTclclsr3stdE7declvalISH_EEspclsr3stdE7declvalIT0_EEEEOSH_DpOSN_(a1, v2);
}

WebCore::ExceptionData *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm1ESD_EEEEEDTclclsr3stdE7declvalISH_EEspclsr3stdE7declvalIT0_EEEEOSH_DpOSN_(a1, v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base4__atB8sn180100IPFvOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS0_6__baseILSH_1EJSE_SF_EEEELm2EJEEEODaRKNS_8__farrayISJ_XT0_EEEmDpT1_(uint64_t a1, uint64_t a2)
{
}

uint64_t *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm0ESC_EEEEEDTclclsr3stdE7declvalISH_EEspclsr3stdE7declvalIT0_EEEEOSH_DpOSN_(uint64_t a1, uint64_t *a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &)#1}::operator()<std::__variant_detail::__alt<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>>>(a1, a2);
}

void std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>()
{
}

uint64_t *std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &)#1}::operator()<std::__variant_detail::__alt<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>>>(uint64_t a1, uint64_t *a2)
{
  return std::__variant_detail::__alt<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>>::~__alt(a2);
}

uint64_t *std::__variant_detail::__alt<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>>::~__alt(uint64_t *a1)
{
  return a1;
}

{
  WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(a1);
  return a1;
}

uint64_t *WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(uint64_t *a1)
{
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  uint64_t v4 = a1;
  uint64_t v5 = a1;
  char v3 = 0;
  uint64_t v2 = 0;
  uint64_t v7 = a1;
  uint64_t v6 = &v2;
  char v3 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v3)
  {
    uint64_t v8 = v3;
    WTF::RefCounted<WebCore::AuthenticatorResponse>::deref((WTF::RefCountedBase *)(v3 + 8));
  }
  return v5;
}

uint64_t WTF::RefCounted<WebCore::AuthenticatorResponse>::deref(WTF::RefCountedBase *a1)
{
  uint64_t result = WTF::RefCountedBase::derefBase(a1);
  if (result)
  {
    uint64_t result = (uint64_t)a1 - 8;
    if (a1 != (WTF::RefCountedBase *)8) {
      return (*(uint64_t (**)(void))(*(void *)result + 8))();
    }
  }
  return result;
}

uint64_t WTF::RefCountedBase::derefBase(WTF::RefCountedBase *this)
{
  return WTF::RefCountedBase::derefAllowingPartiallyDestroyedBase(this) & 1;
}

uint64_t WTF::RefCountedBase::derefAllowingPartiallyDestroyedBase(WTF::RefCountedBase *this)
{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(this);
  if (*(_DWORD *)this == 1)
  {
    char v3 = 1;
  }
  else
  {
    --*(_DWORD *)this;
    char v3 = 0;
  }
  return v3 & 1;
}

WebCore::ExceptionData *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm1ESD_EEEEEDTclclsr3stdE7declvalISH_EEspclsr3stdE7declvalIT0_EEEEOSH_DpOSN_(uint64_t a1, WebCore::ExceptionData *a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &)#1}::operator()<std::__variant_detail::__alt<1ul,WebCore::ExceptionData>>(a1, a2);
}

void std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>()
{
}

WebCore::ExceptionData *std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &)#1}::operator()<std::__variant_detail::__alt<1ul,WebCore::ExceptionData>>(uint64_t a1, WebCore::ExceptionData *a2)
{
  return std::__variant_detail::__alt<1ul,WebCore::ExceptionData>::~__alt(a2);
}

WebCore::ExceptionData *std::__variant_detail::__alt<1ul,WebCore::ExceptionData>::~__alt(WebCore::ExceptionData *a1)
{
  return a1;
}

{
  WebCore::ExceptionData::~ExceptionData(a1);
  return a1;
}

void std::__variant_detail::__access::__union::__get_alt[abi:sn180100]<std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &,1ul>()
{
}

uint64_t _ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSF_1EJSC_SD_EEEELm2EEixB8sn180100Em(uint64_t a1, uint64_t a2)
{
  return a1 + 8 * a2;
}

uint64_t std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__union(uint64_t a1)
{
  return a1;
}

WTF::ASCIILiteral *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF::ASCIILiteral *a1, uint64_t *a2)
{
  if (*((_DWORD *)a1 + 3))
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<unsigned char>::destruct();
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a2);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  return a1;
}

uint64_t std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::operator=[abi:sn180100](a1 + 8, a2 + 8);
}

void WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3[2] = (uint64_t)a1;
  v3[1] = (uint64_t)a2;
  uint64_t v3[4] = (uint64_t)v3;
  double v3[3] = (uint64_t)a2;
  v3[7] = (uint64_t)v3;
  v3[6] = (uint64_t)a2;
  v3[0] = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2);
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v3);
  v3[5] = (uint64_t)v3;
  v4[1] = v3;
  v4[0] = 0;
  v4[3] = v3;
  void v4[2] = v4;
  uint64_t v5 = (CFTypeRef *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v3);
  if (v5) {
    API::Object::deref(v5);
  }
}

void *WebKit::FrameInfoData::operator=(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  WebCore::ResourceRequest::operator=(a1 + 8, a2 + 8);
  WebCore::SecurityOriginData::operator=(a1 + 208, a2 + 208);
  WTF::String::operator=((uint64_t *)(a1 + 240), (uint64_t *)(a2 + 240));
  return memcpy((void *)(a1 + 248), (const void *)(a2 + 248), 0x2EuLL);
}

void std::optional<WebCore::SecurityOriginData>::operator=[abi:sn180100](WebCore::SecurityOriginData *a1, uint64_t a2)
{
  std::__optional_move_assign_base<WebCore::SecurityOriginData,false>::operator=[abi:sn180100](a1, a2);
}

void WTF::VectorTypeOperations<unsigned char>::destruct()
{
}

uint64_t WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  char v3 = (WTF::FastMalloc *)std::span<char const,18446744073709551615ul>::data[abi:sn180100](a1);
  WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::deallocateBuffer(a1, v3);
  uint64_t v7 = 0;
  *(void *)a1 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v8);
  unsigned int v6 = 0;
  *(_DWORD *)(a1 + 8) = std::exchange[abi:sn180100]<unsigned int,int>((unsigned int *)v8 + 2, &v6);
  unsigned int v5 = 0;
  uint64_t result = std::exchange[abi:sn180100]<unsigned int,int>((unsigned int *)v8 + 3, &v5);
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

uint64_t std::exchange[abi:sn180100]<unsigned int,int>(unsigned int *a1, unsigned int *a2)
{
  unsigned int v3 = *a1;
  *a1 = *a2;
  return v3;
}

uint64_t WTF::FastMalloc::free(WTF::FastMalloc *this, void *a2)
{
  return WTF::fastFree(this, a2);
}

uint64_t std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::operator=(a1, a2);
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::operator=(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::operator=(a1, a2);
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::operator=(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>>(a1, a2);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>>(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  if (!std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::valueless_by_exception[abi:sn180100](a1)
    || (uint64_t result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::valueless_by_exception[abi:sn180100](v6),
        (result & 1) == 0))
  {
    if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::valueless_by_exception[abi:sn180100](v6))
    {
      return std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
    }
    else
    {
      uint64_t v4 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](v6);
      uint64_t v5 = a1;
      return _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS6_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS9_LNS0_6_TraitE1EEEEEvOT_EUlRSF_OT0_E_JRSA_SE_EEEDcmSG_DpOT0_(v4, (uint64_t)&v5, a1, v6);
    }
  }
  return result;
}

BOOL std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::valueless_by_exception[abi:sn180100](uint64_t a1)
{
  return std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a1) == -1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](uint64_t a1)
{
  uint64_t v4 = a1;
  uint64_t result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::valueless_by_exception[abi:sn180100](a1);
  if ((result & 1) == 0) {
    uint64_t result = _ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS6_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0_((uint64_t)&v3, a1);
  }
  *(_DWORD *)(a1 + 296) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS6_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS9_LNS0_6_TraitE1EEEEEvOT_EUlRSF_OT0_E_JRSA_SE_EEEDcmSG_DpOT0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  v10[3] = a3;
  v10[2] = a4;
  v10[0] = off_1EE9B2F60[0];
  v10[1] = off_1EE9B2F68[0];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))_ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSF_1EJSC_SD_EEEELm2EEixB8sn180100Em((uint64_t)v10, a1);
  uint64_t v5 = v11;
  std::__to_address[abi:sn180100]<char const>();
  uint64_t v7 = v6;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v7, v8);
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](uint64_t a1)
{
  if (*(_DWORD *)(a1 + 296) == -1) {
    return -1;
  }
  else {
    return *(unsigned int *)(a1 + 296);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS6_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a1;
  v8[2] = a2;
  v8[0] = off_1EE9B2F40[0];
  v8[1] = off_1EE9B2F48[0];
  uint64_t v2 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a2);
  _ZNSt3__116__variant_detail12__visitation6__base4__atB8sn180100IPFvOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS0_6__baseILSH_1EJSE_SF_EEEELm2EJEEEODaRKNS_8__farrayISJ_XT0_EEEmDpT1_((uint64_t)v8, v2);
  uint64_t v4 = *v3;
  uint64_t v5 = v9;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v6);
}

WebCore::PublicKeyCredentialCreationOptions *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS4_33PublicKeyCredentialRequestOptionsEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm0ES5_EEEEEDTclclsr3stdE7declvalISA_EEspclsr3stdE7declvalIT0_EEEEOSA_DpOSG_(a1, v2);
}

WebCore::PublicKeyCredentialRequestOptions *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS4_33PublicKeyCredentialRequestOptionsEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm1ES6_EEEEEDTclclsr3stdE7declvalISA_EEspclsr3stdE7declvalIT0_EEEEOSA_DpOSG_(a1, v2);
}

WebCore::PublicKeyCredentialCreationOptions *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS4_33PublicKeyCredentialRequestOptionsEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm0ES5_EEEEEDTclclsr3stdE7declvalISA_EEspclsr3stdE7declvalIT0_EEEEOSA_DpOSG_(uint64_t a1, WebCore::PublicKeyCredentialCreationOptions *a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &)#1}::operator()<std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions>>(a1, a2);
}

WebCore::PublicKeyCredentialCreationOptions *std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &)#1}::operator()<std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions>>(uint64_t a1, WebCore::PublicKeyCredentialCreationOptions *a2)
{
  return std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions>::~__alt(a2);
}

WebCore::PublicKeyCredentialCreationOptions *std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions>::~__alt(WebCore::PublicKeyCredentialCreationOptions *a1)
{
  return a1;
}

{
  WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions(a1);
  return a1;
}

void WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions(WebCore::PublicKeyCredentialCreationOptions *this)
{
}

{
  std::optional<WebCore::AuthenticationExtensionsClientInputs>::~optional((WebCore::PublicKeyCredentialCreationOptions *)((char *)this + 144));
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebCore::PublicKeyCredentialCreationOptions *)((char *)this + 112));
  WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebCore::PublicKeyCredentialCreationOptions *)((char *)this + 88));
  WebCore::BufferSource::~BufferSource((WebCore::PublicKeyCredentialCreationOptions *)((char *)this + 72));
  WebCore::PublicKeyCredentialCreationOptions::UserEntity::~UserEntity((WebCore::PublicKeyCredentialCreationOptions *)((char *)this + 32));
  WebCore::PublicKeyCredentialCreationOptions::RpEntity::~RpEntity(this);
}

WebCore::AuthenticationExtensionsClientInputs *std::optional<WebCore::AuthenticationExtensionsClientInputs>::~optional(WebCore::AuthenticationExtensionsClientInputs *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_move_assign_base(a1);
  return a1;
}

WTF::ASCIILiteral *WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(WTF::ASCIILiteral *a1)
{
  return a1;
}

{
  WebCore::PublicKeyCredentialDescriptor *v2;
  WebCore::PublicKeyCredentialDescriptor *v3;

  if (*((_DWORD *)a1 + 3))
  {
    uint64_t v2 = (WebCore::PublicKeyCredentialDescriptor *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    char v3 = (WebCore::PublicKeyCredentialDescriptor *)WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WebCore::PublicKeyCredentialDescriptor>::destruct(v2, v3);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1);
  return a1;
}

WTF::ASCIILiteral *WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(WTF::ASCIILiteral *a1)
{
  return a1;
}

{
  if (*((_DWORD *)a1 + 3))
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<unsigned char>::destruct();
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1);
  return a1;
}

void WebCore::BufferSource::~BufferSource(WebCore::BufferSource *this)
{
}

{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~variant[abi:sn180100]((uint64_t)this);
}

void WebCore::PublicKeyCredentialCreationOptions::UserEntity::~UserEntity(WebCore::PublicKeyCredentialCreationOptions::UserEntity *this)
{
}

{
  WTF::StringImpl *v2;
  void v3[4];
  WTF::StringImpl *v4;

  v3[1] = (char *)this + 32;
  v3[0] = 0;
  double v3[3] = (char *)this + 32;
  uint64_t v3[2] = v3;
  uint64_t v4 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 4);
  if (v4) {
    WTF::StringImpl::deref(v4, v2);
  }
  WebCore::BufferSource::~BufferSource((WebCore::PublicKeyCredentialCreationOptions::UserEntity *)((char *)this + 16));
  WebCore::PublicKeyCredentialCreationOptions::Entity::~Entity(this);
}

void WebCore::PublicKeyCredentialCreationOptions::RpEntity::~RpEntity(WebCore::PublicKeyCredentialCreationOptions::RpEntity *this)
{
}

{
  std::optional<WTF::String>::~optional((uint64_t)this + 16);
  WebCore::PublicKeyCredentialCreationOptions::Entity::~Entity(this);
}

WebCore::AuthenticationExtensionsClientInputs *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_move_assign_base(WebCore::AuthenticationExtensionsClientInputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_copy_assign_base(WebCore::AuthenticationExtensionsClientInputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_move_base(WebCore::AuthenticationExtensionsClientInputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_copy_base(WebCore::AuthenticationExtensionsClientInputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_storage_base(WebCore::AuthenticationExtensionsClientInputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs *a1)
{
  if (*((unsigned char *)a1 + 144)) {
    WebCore::AuthenticationExtensionsClientInputs::~AuthenticationExtensionsClientInputs(a1);
  }
  return a1;
}

void WebCore::AuthenticationExtensionsClientInputs::~AuthenticationExtensionsClientInputs(WebCore::AuthenticationExtensionsClientInputs *this)
{
}

{
  WTF::StringImpl *v2;
  void v3[4];
  WTF::StringImpl *v4;

  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::~optional((WebCore::AuthenticationExtensionsClientInputs *)((char *)this + 64));
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::~optional((WebCore::AuthenticationExtensionsClientInputs *)((char *)this + 16));
  v3[1] = this;
  v3[0] = 0;
  double v3[3] = this;
  uint64_t v3[2] = v3;
  uint64_t v4 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this);
  if (v4) {
    WTF::StringImpl::deref(v4, v2);
  }
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::~optional(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_move_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::~optional(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_move_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_move_assign_base(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_copy_assign_base(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_move_base(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_copy_base(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_storage_base(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  if (*((unsigned char *)a1 + 72)) {
    WebCore::AuthenticationExtensionsClientInputs::PRFInputs::~PRFInputs(a1);
  }
  return a1;
}

void WebCore::AuthenticationExtensionsClientInputs::PRFInputs::~PRFInputs(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *this)
{
}

{
  std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)((char *)this + 48));
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~optional(this);
}

WTF::ASCIILiteral *std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(WTF::ASCIILiteral *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~optional(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_move_assign_base(a1);
  return a1;
}

WTF::ASCIILiteral *std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(WTF::ASCIILiteral *a1)
{
  return a1;
}

WTF::ASCIILiteral *std::__optional_copy_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_assign_base(WTF::ASCIILiteral *a1)
{
  return a1;
}

WTF::ASCIILiteral *std::__optional_move_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_base(WTF::ASCIILiteral *a1)
{
  return a1;
}

WTF::ASCIILiteral *std::__optional_copy_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_base(WTF::ASCIILiteral *a1)
{
  return a1;
}

WTF::ASCIILiteral *std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_storage_base(WTF::ASCIILiteral *a1)
{
  return a1;
}

WTF::ASCIILiteral *std::__optional_destruct_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_destruct_base[abi:sn180100](WTF::ASCIILiteral *a1)
{
  if (*((unsigned char *)a1 + 16)) {
    WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1);
  }
  return a1;
}

WTF::ASCIILiteral *WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(WTF::ASCIILiteral *a1)
{
  return a1;
}

{
  uint64_t *v2;
  uint64_t *v3;

  if (*((_DWORD *)a1 + 3))
  {
    uint64_t v2 = (uint64_t *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    char v3 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::destruct(v2, v3);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1);
  return a1;
}

uint64_t *WTF::VectorTypeOperations<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::destruct(uint64_t *a1, uint64_t *a2)
{
  return WTF::VectorDestructor<true,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::destruct(a1, a2);
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(unsigned int *a1)
{
  return WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)a1)
       + 48 * a1[3];
}

uint64_t WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer(uint64_t a1)
{
  uint64_t v2 = (WTF::FastMalloc *)std::span<char const,18446744073709551615ul>::data[abi:sn180100](a1);
  WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::deallocateBuffer(a1, v2);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t *WTF::VectorDestructor<true,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::destruct(uint64_t *result, uint64_t *a2)
{
  for (uint64_t i = result; i != a2; i += 6)
    uint64_t result = WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~KeyValuePair(i);
  return result;
}

uint64_t *WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~KeyValuePair(uint64_t *a1)
{
  return a1;
}

{
  WTF::StringImpl *v2;
  void v4[4];
  WTF::StringImpl *v5;

  WebCore::AuthenticationExtensionsClientInputs::PRFValues::~PRFValues((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)(a1 + 1));
  v4[1] = a1;
  v4[0] = 0;
  v4[3] = a1;
  void v4[2] = v4;
  uint64_t v5 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v5) {
    WTF::StringImpl::deref(v5, v2);
  }
  return a1;
}

void WebCore::AuthenticationExtensionsClientInputs::PRFValues::~PRFValues(WebCore::AuthenticationExtensionsClientInputs::PRFValues *this)
{
}

{
  std::optional<WebCore::BufferSource>::~optional((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)((char *)this + 16));
  WebCore::BufferSource::~BufferSource(this);
}

WebCore::BufferSource *std::optional<WebCore::BufferSource>::~optional(WebCore::BufferSource *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::BufferSource,false>::~__optional_move_assign_base(a1);
  return a1;
}

WebCore::BufferSource *std::__optional_move_assign_base<WebCore::BufferSource,false>::~__optional_move_assign_base(WebCore::BufferSource *a1)
{
  return a1;
}

WebCore::BufferSource *std::__optional_copy_assign_base<WebCore::BufferSource,false>::~__optional_copy_assign_base(WebCore::BufferSource *a1)
{
  return a1;
}

WebCore::BufferSource *std::__optional_move_base<WebCore::BufferSource,false>::~__optional_move_base(WebCore::BufferSource *a1)
{
  return a1;
}

WebCore::BufferSource *std::__optional_copy_base<WebCore::BufferSource,false>::~__optional_copy_base(WebCore::BufferSource *a1)
{
  return a1;
}

WebCore::BufferSource *std::__optional_storage_base<WebCore::BufferSource,false>::~__optional_storage_base(WebCore::BufferSource *a1)
{
  return a1;
}

WebCore::BufferSource *std::__optional_destruct_base<WebCore::BufferSource,false>::~__optional_destruct_base[abi:sn180100](WebCore::BufferSource *a1)
{
  if (*((unsigned char *)a1 + 16)) {
    WebCore::BufferSource::~BufferSource(a1);
  }
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_move_assign_base(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_copy_assign_base(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_move_base(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_copy_base(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_storage_base(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  if (*((unsigned char *)a1 + 40)) {
    WebCore::AuthenticationExtensionsClientInputs::PRFValues::~PRFValues(a1);
  }
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_move_assign_base(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_copy_assign_base(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_move_base(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_copy_base(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_storage_base(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  if (*((unsigned char *)a1 + 40)) {
    WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::~LargeBlobInputs(a1);
  }
  return a1;
}

void WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::~LargeBlobInputs(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *this)
{
}

{
  WTF::StringImpl *v2;
  void v3[4];
  WTF::StringImpl *v4;

  std::optional<WebCore::BufferSource>::~optional((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)((char *)this + 16));
  v3[1] = this;
  v3[0] = 0;
  double v3[3] = this;
  uint64_t v3[2] = v3;
  uint64_t v4 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this);
  if (v4) {
    WTF::StringImpl::deref(v4, v2);
  }
}

void WTF::VectorTypeOperations<WebCore::PublicKeyCredentialDescriptor>::destruct(WebCore::PublicKeyCredentialDescriptor *a1, WebCore::PublicKeyCredentialDescriptor *a2)
{
}

uint64_t WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(unsigned int *a1)
{
  return WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)a1)
       + 40 * a1[3];
}

void WTF::VectorDestructor<true,WebCore::PublicKeyCredentialDescriptor>::destruct(WebCore::PublicKeyCredentialDescriptor *a1, WebCore::PublicKeyCredentialDescriptor *a2)
{
  while (a1 != a2)
  {
    WebCore::PublicKeyCredentialDescriptor::~PublicKeyCredentialDescriptor(a1);
    a1 = (WebCore::PublicKeyCredentialDescriptor *)((char *)a1 + 40);
  }
}

void WebCore::PublicKeyCredentialDescriptor::~PublicKeyCredentialDescriptor(WebCore::PublicKeyCredentialDescriptor *this)
{
}

{
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebCore::PublicKeyCredentialDescriptor *)((char *)this + 24));
  WebCore::BufferSource::~BufferSource((WebCore::PublicKeyCredentialDescriptor *)((char *)this + 8));
}

WTF::ASCIILiteral *WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(WTF::ASCIILiteral *a1)
{
  return a1;
}

{
  if (*((_DWORD *)a1 + 3))
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<unsigned char>::destruct();
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1);
  return a1;
}

uint64_t WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(unsigned int *a1)
{
  return WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)a1)
       + 16 * a1[3];
}

uint64_t std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~variant[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__impl(a1);
  return a1;
}

uint64_t std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__impl(uint64_t a1)
{
  return a1;
}

{
  std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__copy_assignment(a1);
  return a1;
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__copy_assignment(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__move_assignment(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::~__assignment(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__copy_constructor(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__move_constructor(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::~__ctor(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](uint64_t a1)
{
  uint64_t v4 = a1;
  uint64_t result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](a1);
  if ((result & 1) == 0) {
    uint64_t result = _ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0_((uint64_t)&v3, a1);
  }
  *(_DWORD *)(a1 + 8) = -1;
  return result;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__base(uint64_t a1)
{
  return a1;
}

BOOL std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](uint64_t a1)
{
  return std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](a1) == -1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a1;
  v8[2] = a2;
  v8[0] = off_1EE9B2F50[0];
  v8[1] = off_1EE9B2F58[0];
  uint64_t v2 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](a2);
  _ZNSt3__116__variant_detail12__visitation6__base4__atB8sn180100IPFvOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS0_6__baseILSH_1EJSE_SF_EEEELm2EJEEEODaRKNS_8__farrayISJ_XT0_EEEmDpT1_((uint64_t)v8, v2);
  uint64_t v4 = *v3;
  uint64_t v5 = v9;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v6);
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) == -1) {
    return -1;
  }
  else {
    return *(unsigned int *)(a1 + 8);
  }
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm0ESC_EEEEEDTclclsr3stdE7declvalISK_EEspclsr3stdE7declvalIT0_EEEEOSK_DpOSQ_(a1, v2);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm1ESG_EEEEEDTclclsr3stdE7declvalISK_EEspclsr3stdE7declvalIT0_EEEEOSK_DpOSQ_(a1, v2);
}

uint64_t *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm0ESC_EEEEEDTclclsr3stdE7declvalISK_EEspclsr3stdE7declvalIT0_EEEEOSK_DpOSQ_(uint64_t a1, uint64_t *a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &)#1}::operator()<std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>>(a1, a2);
}

uint64_t *std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &)#1}::operator()<std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>>(uint64_t a1, uint64_t *a2)
{
  return std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::~__alt(a2);
}

uint64_t *std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::~__alt(uint64_t *a1)
{
  return a1;
}

{
  void v3[2];
  WTF::RefCountedBase *v4;
  void *v5;
  uint64_t *v6;

  v3[1] = a1;
  v3[0] = 0;
  uint64_t v6 = a1;
  uint64_t v5 = v3;
  uint64_t v4 = (WTF::RefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v4) {
    WTF::RefCounted<JSC::ArrayBufferView>::deref(v4);
  }
  return a1;
}

uint64_t WTF::RefCounted<JSC::ArrayBufferView>::deref(WTF::RefCountedBase *a1)
{
  uint64_t result = WTF::RefCountedBase::derefBase(a1);
  if (result)
  {
    if (a1) {
      return JSC::ArrayBufferView::operator delete();
    }
  }
  return result;
}

uint64_t *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm1ESG_EEEEEDTclclsr3stdE7declvalISK_EEspclsr3stdE7declvalIT0_EEEEOSK_DpOSQ_(uint64_t a1, uint64_t *a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &)#1}::operator()<std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>(a1, a2);
}

uint64_t *std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &)#1}::operator()<std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>(uint64_t a1, uint64_t *a2)
{
  return std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__alt(a2);
}

uint64_t *std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__alt(uint64_t *a1)
{
  return a1;
}

{
  void v3[2];
  WTF::DeferrableRefCountedBase *v4;
  void *v5;
  uint64_t *v6;

  v3[1] = a1;
  v3[0] = 0;
  uint64_t v6 = a1;
  uint64_t v5 = v3;
  uint64_t v4 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v4) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v4);
  }
  return a1;
}

uint64_t WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(WTF::DeferrableRefCountedBase *a1)
{
  uint64_t result = WTF::DeferrableRefCountedBase::derefBase(a1);
  if (result)
  {
    if (a1)
    {
      JSC::ArrayBuffer::~ArrayBuffer(a1);
      return WTF::FastMalloc::free(a1, v3);
    }
  }
  return result;
}

BOOL WTF::DeferrableRefCountedBase::derefBase(WTF::DeferrableRefCountedBase *this)
{
  *(_DWORD *)this -= 2;
  return *(_DWORD *)this == 0;
}

void JSC::ArrayBuffer::~ArrayBuffer(JSC::ArrayBuffer *this)
{
}

{
  JSC::Weak<JSC::JSArrayBuffer>::~Weak((void *)this + 10);
  JSC::InlineWatchpointSet::~InlineWatchpointSet((JSC::ArrayBuffer *)((char *)this + 72));
  JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBuffer *)((char *)this + 16));
  JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::~GCIncomingRefCounted((uint64_t)this);
}

void *JSC::Weak<JSC::JSArrayBuffer>::~Weak(void *a1)
{
  return a1;
}

{
  JSC::Weak<JSC::JSArrayBuffer>::clear(a1);
  return a1;
}

void JSC::InlineWatchpointSet::~InlineWatchpointSet(JSC::InlineWatchpointSet *this)
{
}

{
  if (!JSC::InlineWatchpointSet::isThin((JSC::InlineWatchpointSet **)this)) {
    JSC::InlineWatchpointSet::freeFat(this);
  }
}

void JSC::ArrayBufferContents::~ArrayBufferContents(JSC::ArrayBufferContents *this)
{
}

{
  uint64_t v2;
  uint64_t Unsafe;
  void v4[2];
  WTF::ThreadSafeRefCountedBase *v5;
  void *v6;
  char *v7;
  void v8[2];
  WTF::ThreadSafeRefCountedBase *v9;
  void *v10;
  char *v11;
  void v12[2];
  uint64_t v13;
  void *v14;
  char *v15;

  if (WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL((void *)this + 1))
  {
    uint64_t v2 = *((void *)this + 1);
    Unsafe = WTF::CagedPtr<(Gigacage::Kind)0,void,WTF::RawPtrTraits<void>>::getUnsafe((uint64_t *)this);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, Unsafe);
  }
  v4[1] = (char *)this + 24;
  v4[0] = 0;
  uint64_t v7 = (char *)this + 24;
  uint64_t v6 = v4;
  uint64_t v5 = (WTF::ThreadSafeRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 3);
  if (v5) {
    WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(v5);
  }
  v8[1] = (char *)this + 16;
  v8[0] = 0;
  uint64_t v11 = (char *)this + 16;
  char v10 = v8;
  uint64_t v9 = (WTF::ThreadSafeRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 2);
  if (v9) {
    WTF::ThreadSafeRefCounted<JSC::SharedArrayBufferContents,(WTF::DestructionThread)0>::deref(v9);
  }
  v12[1] = (char *)this + 8;
  v12[0] = 0;
  uint64_t v15 = (char *)this + 8;
  char v14 = v12;
  uint64_t v13 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 1);
  if (v13) {
    WTF::ThreadSafeRefCounted<WTF::SharedTask<void ()(void *)>,(WTF::DestructionThread)0>::deref((WTF::ThreadSafeRefCountedBase *)(v13 + 8));
  }
}

uint64_t JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::~GCIncomingRefCounted(uint64_t a1)
{
  if (JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::hasVectorOfCells(a1))
  {
    uint64_t v2 = (WTF::ASCIILiteral *)JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::vectorOfCells(a1);
    char v3 = v2;
    if (v2)
    {
      WTF::Vector<JSC::JSCell *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2);
      WTF::FastMalloc::free(v3, v4);
    }
  }
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__union(a1);
  return a1;
}

JSC::WeakImpl *JSC::Weak<JSC::JSArrayBuffer>::clear(void *a1)
{
  uint64_t result = (JSC::WeakImpl *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1);
  if (result)
  {
    uint64_t result = (JSC::WeakImpl *)JSC::WeakImpl::clear(result);
    *a1 = 0;
  }
  return result;
}

uint64_t JSC::WeakImpl::clear(JSC::WeakImpl *this)
{
  uint64_t result = WTF::bitwise_cast<unsigned char const*,char const*>(3);
  *((void *)this + 1) = result;
  return result;
}

BOOL JSC::InlineWatchpointSet::isThin(JSC::InlineWatchpointSet **this)
{
  return JSC::InlineWatchpointSet::isThin(*this);
}

BOOL JSC::InlineWatchpointSet::isThin(JSC::InlineWatchpointSet *this)
{
  return (this & 1) != 0;
}

uint64_t WTF::CagedPtr<(Gigacage::Kind)0,void,WTF::RawPtrTraits<void>>::getUnsafe(uint64_t *a1)
{
  uint64_t v8 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v1 = WTF::bitwise_cast<unsigned char const*,char const*>(MEMORY[0x1E4F309C0] + 32);
  uint64_t v2 = Gigacage::Config::basePtr(v1, 0);
  char v3 = 0;
  if (v2)
  {
    uint64_t v4 = WTF::bitwise_cast<unsigned char const*,char const*>(MEMORY[0x1E4F309C0] + 32);
    char v3 = 1;
    if ((*(unsigned char *)(v4 + 2) & 1) == 0) {
      char v3 = *MEMORY[0x1E4F309B8] ^ 1;
    }
  }
  if ((v3 & 1) == 0) {
    return v8;
  }
  uint64_t v5 = WTF::bitwise_cast<unsigned char const*,char const*>(MEMORY[0x1E4F309C0] + 32);
  uint64_t v6 = Gigacage::Config::basePtr(v5, 0);
  return v6 + (v8 & Gigacage::gigacageSizeToMask((Gigacage *)0x400000000));
}

uint64_t Gigacage::Config::basePtr(uint64_t a1, int a2)
{
  if (a2 >= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1987B8D98);
  }
  return *(void *)(a1 + 24 + 8 * a2);
}

uint64_t Gigacage::gigacageSizeToMask(Gigacage *this)
{
  return (uint64_t)this - 1;
}

uint64_t WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(WTF::ThreadSafeRefCountedBase *a1)
{
  uint64_t result = WTF::ThreadSafeRefCountedBase::derefBase(a1);
  if (result)
  {
    if (a1)
    {
      MEMORY[0x19972D200](a1);
      return WTF::FastMalloc::free(a1, v3);
    }
  }
  return result;
}

uint64_t WTF::ThreadSafeRefCountedBase::derefBase(WTF::ThreadSafeRefCountedBase *this)
{
  return WTF::ThreadSafeRefCountedBase::derefBaseWithoutDeletionCheck(this) & 1;
}

uint64_t WTF::ThreadSafeRefCountedBase::derefBaseWithoutDeletionCheck(WTF::ThreadSafeRefCountedBase *this)
{
  if (std::__atomic_base<unsigned int,true>::operator--[abi:sn180100]((atomic_uint *)this))
  {
    char v3 = 0;
  }
  else
  {
    std::atomic<unsigned int>::operator=[abi:sn180100]((unsigned int *)this, 1u);
    char v3 = 1;
  }
  return v3 & 1;
}

uint64_t std::__atomic_base<unsigned int,true>::operator--[abi:sn180100](atomic_uint *a1)
{
  return std::__atomic_base<unsigned int,true>::fetch_sub[abi:sn180100](a1, 1, 5) - 1;
}

uint64_t std::atomic<unsigned int>::operator=[abi:sn180100](unsigned int *a1, unsigned int a2)
{
  return a2;
}

uint64_t std::__atomic_base<unsigned int,true>::fetch_sub[abi:sn180100](atomic_uint *a1, int a2, int a3)
{
  return std::__cxx_atomic_fetch_sub[abi:sn180100]<unsigned int>(a1, a2, a3);
}

uint64_t std::__cxx_atomic_fetch_sub[abi:sn180100]<unsigned int>(atomic_uint *a1, int a2, int a3)
{
  switch(a3)
  {
    case 1:
    case 2:
      unsigned int add_explicit = atomic_fetch_add_explicit(a1, -a2, memory_order_acquire);
      break;
    case 3:
      unsigned int add_explicit = atomic_fetch_add_explicit(a1, -a2, memory_order_release);
      break;
    case 4:
    case 5:
      unsigned int add_explicit = atomic_fetch_add(a1, -a2);
      break;
    default:
      unsigned int add_explicit = atomic_fetch_add_explicit(a1, -a2, memory_order_relaxed);
      break;
  }
  return add_explicit;
}

void std::__atomic_base<unsigned int,false>::store[abi:sn180100](unsigned int *a1, unsigned int a2, int a3)
{
}

void std::__cxx_atomic_store[abi:sn180100]<unsigned int>(unsigned int *a1, unsigned int a2, int a3)
{
  if (a3 == 3 || a3 == 5) {
    atomic_store(a2, a1);
  }
  else {
    *a1 = a2;
  }
}

uint64_t WTF::ThreadSafeRefCounted<JSC::SharedArrayBufferContents,(WTF::DestructionThread)0>::deref(WTF::ThreadSafeRefCountedBase *a1)
{
  uint64_t result = WTF::ThreadSafeRefCountedBase::derefBase(a1);
  if (result)
  {
    if (a1)
    {
      MEMORY[0x19972D250](a1);
      return WTF::FastMalloc::free(a1, v3);
    }
  }
  return result;
}

uint64_t WTF::ThreadSafeRefCounted<WTF::SharedTask<void ()(void *)>,(WTF::DestructionThread)0>::deref(WTF::ThreadSafeRefCountedBase *a1)
{
  uint64_t result = WTF::ThreadSafeRefCountedBase::derefBase(a1);
  if (result)
  {
    uint64_t result = (uint64_t)a1 - 8;
    if (a1 != (WTF::ThreadSafeRefCountedBase *)8) {
      return (*(uint64_t (**)(void))(*(void *)result + 8))();
    }
  }
  return result;
}

BOOL JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::hasVectorOfCells(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  return (v1 & JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag()) == 0;
}

uint64_t JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::vectorOfCells(uint64_t a1)
{
  return WTF::bitwise_cast<unsigned char const*,char const*>(*(void *)(a1 + 8));
}

WTF::ASCIILiteral *WTF::Vector<JSC::JSCell *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(WTF::ASCIILiteral *a1)
{
  return a1;
}

{
  if (*((_DWORD *)a1 + 3))
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<unsigned char>::destruct();
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1);
  return a1;
}

uint64_t JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag()
{
  return 1;
}

void WebCore::PublicKeyCredentialCreationOptions::Entity::~Entity(WebCore::PublicKeyCredentialCreationOptions::Entity *this)
{
  v4[1] = (char *)this + 8;
  v4[0] = 0;
  v4[3] = (char *)this + 8;
  void v4[2] = v4;
  uint64_t v5 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 1);
  if (v5) {
    WTF::StringImpl::deref(v5, v2);
  }
  uint64_t v6 = this;
  uint64_t v7 = this;
  v8[1] = this;
  v8[0] = 0;
  void v8[3] = this;
  v8[2] = v8;
  uint64_t v9 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this);
  if (v9) {
    WTF::StringImpl::deref(v9, v3);
  }
}

uint64_t std::optional<WTF::String>::~optional(uint64_t a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WTF::String,false>::~__optional_move_assign_base(a1);
  return a1;
}

uint64_t std::__optional_move_assign_base<WTF::String,false>::~__optional_move_assign_base(uint64_t a1)
{
  return a1;
}

uint64_t std::__optional_copy_assign_base<WTF::String,false>::~__optional_copy_assign_base(uint64_t a1)
{
  return a1;
}

uint64_t std::__optional_move_base<WTF::String,false>::~__optional_move_base(uint64_t a1)
{
  return a1;
}

uint64_t std::__optional_copy_base<WTF::String,false>::~__optional_copy_base(uint64_t a1)
{
  return a1;
}

uint64_t std::__optional_storage_base<WTF::String,false>::~__optional_storage_base(uint64_t a1)
{
  return a1;
}

WebCore::PublicKeyCredentialRequestOptions *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS4_33PublicKeyCredentialRequestOptionsEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm1ES6_EEEEEDTclclsr3stdE7declvalISA_EEspclsr3stdE7declvalIT0_EEEEOSA_DpOSG_(uint64_t a1, WebCore::PublicKeyCredentialRequestOptions *a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &)#1}::operator()<std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions>>(a1, a2);
}

WebCore::PublicKeyCredentialRequestOptions *std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &)#1}::operator()<std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions>>(uint64_t a1, WebCore::PublicKeyCredentialRequestOptions *a2)
{
  return std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions>::~__alt(a2);
}

WebCore::PublicKeyCredentialRequestOptions *std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions>::~__alt(WebCore::PublicKeyCredentialRequestOptions *a1)
{
  return a1;
}

{
  WebCore::PublicKeyCredentialRequestOptions::~PublicKeyCredentialRequestOptions(a1);
  return a1;
}

void WebCore::PublicKeyCredentialRequestOptions::~PublicKeyCredentialRequestOptions(WebCore::PublicKeyCredentialRequestOptions *this)
{
}

{
  WTF::StringImpl *v2;
  void v3[4];
  WTF::StringImpl *v4;

  std::optional<WebCore::AuthenticationExtensionsClientInputs>::~optional((WebCore::PublicKeyCredentialRequestOptions *)((char *)this + 56));
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebCore::PublicKeyCredentialRequestOptions *)((char *)this + 32));
  v3[1] = (char *)this + 24;
  v3[0] = 0;
  double v3[3] = (char *)this + 24;
  uint64_t v3[2] = v3;
  uint64_t v4 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 3);
  if (v4) {
    WTF::StringImpl::deref(v4, v2);
  }
  WebCore::BufferSource::~BufferSource(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  uint64_t v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS4_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentIS7_LNS1_6_TraitE1EEEEEvOT_EUlRSD_OT0_E_JRNS1_5__altILm0ES5_EESK_EEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEESE_DpOSM_(a1, v3, v4);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS8_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  uint64_t v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS4_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentIS7_LNS1_6_TraitE1EEEEEvOT_EUlRSD_OT0_E_JRNS1_5__altILm1ES6_EESK_EEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEESE_DpOSM_(a1, v3, v4);
}

void _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS4_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentIS7_LNS1_6_TraitE1EEEEEvOT_EUlRSD_OT0_E_JRNS1_5__altILm0ES5_EESK_EEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEESE_DpOSM_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS6_LNS0_6_TraitE1EEEEEvOT_ENKUlRSC_OT0_E_clINS0_5__altILm0ES4_EESK_EEDaSE_SG_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__assign_alt[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  uint64_t v5 = a3;
  if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a1))
  {
    v4[0] = a1;
    v4[1] = v5;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__assign_alt[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions>(std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> &,WebCore::PublicKeyCredentialCreationOptions &&)::{unnamed type#1}::operator()[abi:sn180100](v4);
  }
  else
  {
    WebCore::PublicKeyCredentialCreationOptions::operator=(v6, v5);
  }
}

void WebCore::PublicKeyCredentialCreationOptions::operator=(uint64_t a1, uint64_t a2)
{
  WebCore::PublicKeyCredentialCreationOptions::RpEntity::operator=((uint64_t *)a1, (uint64_t *)a2);
  WebCore::PublicKeyCredentialCreationOptions::UserEntity::operator=((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
  WebCore::BufferSource::operator=(a1 + 72, a2 + 72);
  WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)(a1 + 88), (uint64_t *)(a2 + 88));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)(a1 + 112), (uint64_t *)(a2 + 112));
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator=[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)(a1 + 144), a2 + 144);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__assign_alt[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions>(std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> &,WebCore::PublicKeyCredentialCreationOptions &&)::{unnamed type#1}::operator()[abi:sn180100](uint64_t *a1)
{
}

uint64_t WebCore::PublicKeyCredentialCreationOptions::RpEntity::operator=(uint64_t *a1, uint64_t *a2)
{
  WebCore::PublicKeyCredentialCreationOptions::Entity::operator=(a1, a2);
  return std::optional<WTF::String>::operator=[abi:sn180100]((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
}

uint64_t *WebCore::PublicKeyCredentialCreationOptions::UserEntity::operator=(uint64_t *a1, uint64_t *a2)
{
  WebCore::PublicKeyCredentialCreationOptions::Entity::operator=(a1, a2);
  WebCore::BufferSource::operator=((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return WTF::String::operator=(a1 + 4, a2 + 4);
}

uint64_t WebCore::BufferSource::operator=(uint64_t a1, uint64_t a2)
{
  return std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::operator=[abi:sn180100](a1, a2);
}

void WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF::ASCIILiteral *a1, uint64_t *a2)
{
  if (*((_DWORD *)a1 + 3))
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<unsigned char>::destruct();
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a2);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
}

void WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF::ASCIILiteral *a1, uint64_t *a2)
{
  if (*((_DWORD *)a1 + 3))
  {
    uint64_t v3 = (WebCore::PublicKeyCredentialDescriptor *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    uint64_t v4 = (WebCore::PublicKeyCredentialDescriptor *)WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WebCore::PublicKeyCredentialDescriptor>::destruct(v3, v4);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a2);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
}

void std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs *a1, uint64_t a2)
{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::operator=[abi:sn180100](a1, a2);
}

uint64_t *WebCore::PublicKeyCredentialCreationOptions::Entity::operator=(uint64_t *a1, uint64_t *a2)
{
  WTF::String::operator=(a1, a2);
  return WTF::String::operator=(a1 + 1, a2 + 1);
}

uint64_t std::optional<WTF::String>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__optional_move_assign_base<WTF::String,false>::operator=[abi:sn180100](a1, a2);
}

uint64_t std::__optional_move_assign_base<WTF::String,false>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>(a1, a2);
}

uint64_t std::__optional_destruct_base<WTF::String,false>::reset[abi:sn180100](uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 8))
  {
    v3[1] = result;
    v3[0] = 0;
    double v3[3] = result;
    uint64_t v3[2] = v3;
    uint64_t result = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)result);
    uint64_t v4 = (WTF::StringImpl *)result;
    if (result) {
      uint64_t result = (uint64_t)WTF::StringImpl::deref(v4, v2);
    }
    *(unsigned char *)(v1 + 8) = 0;
  }
  return result;
}

uint64_t std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::operator=[abi:sn180100](a1, a2);
}

uint64_t std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::operator=(a1, a2);
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::operator=(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::operator=(a1, a2);
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::operator=(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>>(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  if (!std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](a1)
    || (uint64_t result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](v6),
        (result & 1) == 0))
  {
    if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](v6))
    {
      return std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
    }
    else
    {
      uint64_t v4 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](v6);
      uint64_t v5 = a1;
      return _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSK_SO_EEEDcmSQ_DpOT0_(v4, (uint64_t)&v5, a1, v6);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSK_SO_EEEDcmSQ_DpOT0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  v10[3] = a3;
  v10[2] = a4;
  v10[0] = off_1EE9B2F70[0];
  v10[1] = off_1EE9B2F78[0];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))_ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSF_1EJSC_SD_EEEELm2EEixB8sn180100Em((uint64_t)v10, a1);
  uint64_t v5 = v11;
  std::__to_address[abi:sn180100]<char const>();
  uint64_t v7 = v6;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v7, v8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t *a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  uint64_t v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISH_LNS1_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS1_5__altILm0ESC_EESU_EEEDTclclsr3stdE7declvalISN_EEspclsr3stdE7declvalIT0_EEEESO_DpOSW_(a1, v3, v4);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t *a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  uint64_t v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISH_LNS1_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS1_5__altILm1ESG_EESU_EEEDTclclsr3stdE7declvalISN_EEspclsr3stdE7declvalIT0_EEEESO_DpOSW_(a1, v3, v4);
}

void _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISH_LNS1_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS1_5__altILm0ESC_EESU_EEEDTclclsr3stdE7declvalISN_EEspclsr3stdE7declvalIT0_EEEESO_DpOSW_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
}

void _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_ENKUlRSM_OT0_E_clINS0_5__altILm0ESB_EESU_EEDaSO_SQ_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  uint64_t v5 = a3;
  if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](a1))
  {
    v4[0] = a1;
    v4[1] = v5;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> &&)::{unnamed type#1}::operator()[abi:sn180100]((uint64_t)v4);
  }
  else
  {
    WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::operator=(v6, v5);
  }
}

WTF::RefCountedBase *WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::operator=(uint64_t *a1, uint64_t *a2)
{
  void v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  char v10 = v4;
  uint64_t v9 = a2;
  uint64_t v12 = v4;
  uint64_t v11 = a2;
  v4[0] = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2);
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v4);
  v4[3] = (uint64_t)v4;
  v5[1] = v4;
  v5[0] = 0;
  uint64_t v8 = v4;
  uint64_t v7 = v5;
  uint64_t result = (WTF::RefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v4);
  uint64_t v6 = result;
  if (result) {
    return (WTF::RefCountedBase *)WTF::RefCounted<JSC::ArrayBufferView>::deref(v6);
  }
  return result;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> &&)::{unnamed type#1}::operator()[abi:sn180100](uint64_t a1)
{
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__emplace[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(uint64_t a1, uint64_t *a2)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__construct_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(v3, a2);
  *(_DWORD *)(a1 + 8) = 0;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__construct_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(uint64_t *a1, uint64_t *a2)
{
}

uint64_t *std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::__alt[abi:sn180100]<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  *a1 = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2);
  return a1;
}

void _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISH_LNS1_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS1_5__altILm1ESG_EESU_EEEDTclclsr3stdE7declvalISN_EEspclsr3stdE7declvalIT0_EEEESO_DpOSW_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
}

void _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_ENKUlRSM_OT0_E_clINS0_5__altILm1ESF_EESU_EEDaSO_SQ_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  uint64_t v5 = a3;
  if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](a1) == 1)
  {
    WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=(v6, v5);
  }
  else
  {
    v4[0] = a1;
    v4[1] = v5;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &&)::{unnamed type#1}::operator()[abi:sn180100]((uint64_t)v4);
  }
}

uint64_t *WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=(uint64_t *a1, uint64_t *a2)
{
  void v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  char v10 = v4;
  uint64_t v9 = a2;
  uint64_t v12 = v4;
  uint64_t v11 = a2;
  v4[0] = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2);
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v4);
  v4[3] = (uint64_t)v4;
  v5[1] = v4;
  v5[0] = 0;
  uint64_t v8 = v4;
  uint64_t v7 = v5;
  uint64_t v6 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v4);
  if (v6) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
  }
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &&)::{unnamed type#1}::operator()[abi:sn180100](uint64_t a1)
{
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__emplace[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(uint64_t a1, uint64_t *a2)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__construct_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(v3, a2);
  *(_DWORD *)(a1 + 8) = 1;
}

void std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs *a1, uint64_t a2)
{
}

void std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>>(WebCore::AuthenticationExtensionsClientInputs *a1, uint64_t a2)
{
  int v3 = *((unsigned char *)a1 + 144) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::has_value[abi:sn180100](a2) & 1))
  {
    if (*((unsigned char *)a1 + 144))
    {
      std::__to_address[abi:sn180100]<char const>();
      WebCore::AuthenticationExtensionsClientInputs::operator=((uint64_t)a1, v4);
    }
  }
  else if (*((unsigned char *)a1 + 144))
  {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs>((uint64_t)a1, v5);
  }
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(unsigned char *)(a1 + 144) & 1;
}

void WebCore::AuthenticationExtensionsClientInputs::operator=(uint64_t a1, uint64_t a2)
{
  WTF::String::operator=((uint64_t *)a1, (uint64_t *)a2);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8) & 1;
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator=[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)(a1 + 16), a2 + 16);
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator=[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)(a1 + 64), a2 + 64);
}

void std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::reset[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs *a1)
{
  if (*((unsigned char *)a1 + 144))
  {
    WebCore::AuthenticationExtensionsClientInputs::~AuthenticationExtensionsClientInputs(a1);
    *((unsigned char *)a1 + 144) = 0;
  }
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs>(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs*>(a1, a2);
  *(unsigned char *)(a1 + 144) = 1;
  return result;
}

void std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1, uint64_t a2)
{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::operator=[abi:sn180100](a1, a2);
}

void std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1, uint64_t a2)
{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::operator=[abi:sn180100](a1, a2);
}

void std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1, uint64_t a2)
{
}

void std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>>(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1, uint64_t a2)
{
  int v3 = *((unsigned char *)a1 + 40) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100](a2) & 1))
  {
    if (*((unsigned char *)a1 + 40))
    {
      std::__to_address[abi:sn180100]<char const>();
      WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::operator=((uint64_t)a1, v4);
    }
  }
  else if (*((unsigned char *)a1 + 40))
  {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>((uint64_t)a1, v5);
  }
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(unsigned char *)(a1 + 40) & 1;
}

void WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::operator=(uint64_t a1, uint64_t a2)
{
  WTF::String::operator=((uint64_t *)a1, (uint64_t *)a2);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  std::optional<WebCore::BufferSource>::operator=[abi:sn180100]((WebCore::BufferSource *)(a1 + 16), a2 + 16);
}

void std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::reset[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  if (*((unsigned char *)a1 + 40))
  {
    WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::~LargeBlobInputs(a1);
    *((unsigned char *)a1 + 40) = 0;
  }
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>(a1, a2);
  *(unsigned char *)(a1 + 40) = 1;
  return result;
}

void std::optional<WebCore::BufferSource>::operator=[abi:sn180100](WebCore::BufferSource *a1, uint64_t a2)
{
  std::__optional_move_assign_base<WebCore::BufferSource,false>::operator=[abi:sn180100](a1, a2);
}

void std::__optional_move_assign_base<WebCore::BufferSource,false>::operator=[abi:sn180100](WebCore::BufferSource *a1, uint64_t a2)
{
}

void std::__optional_storage_base<WebCore::BufferSource,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::BufferSource,false>>(WebCore::BufferSource *a1, uint64_t a2)
{
  int v3 = *((unsigned char *)a1 + 16) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a2) & 1))
  {
    if (*((unsigned char *)a1 + 16))
    {
      std::__to_address[abi:sn180100]<char const>();
      WebCore::BufferSource::operator=((uint64_t)a1, v4);
    }
  }
  else if (*((unsigned char *)a1 + 16))
  {
    std::__optional_destruct_base<WebCore::BufferSource,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WebCore::BufferSource,false>::__construct[abi:sn180100]<WebCore::BufferSource>((uint64_t)a1, v5);
  }
}

uint64_t std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) & 1;
}

void std::__optional_destruct_base<WebCore::BufferSource,false>::reset[abi:sn180100](WebCore::BufferSource *a1)
{
  if (*((unsigned char *)a1 + 16))
  {
    WebCore::BufferSource::~BufferSource(a1);
    *((unsigned char *)a1 + 16) = 0;
  }
}

uint64_t std::__optional_storage_base<WebCore::BufferSource,false>::__construct[abi:sn180100]<WebCore::BufferSource>(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__construct_at[abi:sn180100]<WebCore::BufferSource,WebCore::BufferSource,WebCore::BufferSource*>(a1, a2);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

uint64_t std::__construct_at[abi:sn180100]<WebCore::BufferSource,WebCore::BufferSource,WebCore::BufferSource*>(uint64_t a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::BufferSource,WebCore::BufferSource,WebCore::BufferSource*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::BufferSource,WebCore::BufferSource,WebCore::BufferSource*>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    __break(1u);
  }
  return WebCore::BufferSource::BufferSource(a1, a2);
}

uint64_t WebCore::BufferSource::BufferSource(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100](a1, a2);
  return a1;
}

uint64_t std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__impl[abi:sn180100](a1, a2);
  return a1;
}

{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__impl[abi:sn180100](a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__impl[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_assignment(a1, a2);
  return a1;
}

{
  std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__impl[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_assignment(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_assignment(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_assignment(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_assignment(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assignment(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assignment(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEENS0_13__valueless_tE(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1;
  uint64_t v5 = a2;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  uint64_t result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](v5);
  if ((result & 1) == 0)
  {
    uint64_t v4 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](v5);
    uint64_t result = _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0_(v4, (uint64_t)&v3, v6, v5);
    *(_DWORD *)(v6 + 8) = v4;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SF_EEEENS0_13__valueless_tE(uint64_t a1)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEENS0_13__valueless_tE(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__base[abi:sn180100](uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = -1;
  return a1;
}

unsigned char *std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100](unsigned char *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  v10[3] = a3;
  v10[2] = a4;
  v10[0] = off_1EE9B2F80[0];
  v10[1] = off_1EE9B2F88[0];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))_ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSF_1EJSC_SD_EEEELm2EEixB8sn180100Em((uint64_t)v10, a1);
  uint64_t v5 = v11;
  std::__to_address[abi:sn180100]<char const>();
  uint64_t v7 = v6;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v7, v8);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  char v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE19__generic_constructB8sn180100INS1_18__move_constructorISH_LNS1_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS1_5__altILm0ESC_EESV_EEEDTclclsr3stdE7declvalISO_EEspclsr3stdE7declvalIT0_EEEESP_DpOSX_(a1, v3, v4);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  char v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE19__generic_constructB8sn180100INS1_18__move_constructorISH_LNS1_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS1_5__altILm0ESC_EESV_EEEDTclclsr3stdE7declvalISO_EEspclsr3stdE7declvalIT0_EEEESP_DpOSX_(a1, v3, v4);
}

uint64_t *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE19__generic_constructB8sn180100INS1_18__move_constructorISH_LNS1_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS1_5__altILm0ESC_EESV_EEEDTclclsr3stdE7declvalISO_EEspclsr3stdE7declvalIT0_EEEESP_DpOSX_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return _ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_ENKUlRSN_OT0_E_clINS0_5__altILm0ESB_EESV_EEDaSP_SR_(a1, a2, a3);
}

uint64_t *_ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_ENKUlRSN_OT0_E_clINS0_5__altILm0ESB_EESV_EEDaSP_SR_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result = a2;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__construct_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(a2, a3);
  return result;
}

uint64_t std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>(uint64_t a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    __break(1u);
  }
  WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::LargeBlobInputs(a1, a2);
  return a1;
}

uint64_t WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::LargeBlobInputs(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((uint64_t *)a1, (uint64_t *)a2);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  std::optional<WebCore::BufferSource>::optional[abi:sn180100]((unsigned char *)(a1 + 16), a2 + 16);
  return a1;
}

unsigned char *std::optional<WebCore::BufferSource>::optional[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::BufferSource,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

{
  std::optional<WebCore::BufferSource>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::BufferSource,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

unsigned char *std::__optional_move_assign_base<WebCore::BufferSource,false>::__optional_move_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_copy_assign_base<WebCore::BufferSource,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

unsigned char *std::__optional_copy_assign_base<WebCore::BufferSource,false>::__optional_copy_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

unsigned char *std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100](a1, a2);
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::BufferSource,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::BufferSource,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a2);
  if (result)
  {
    std::__to_address[abi:sn180100]<char const>();
    return std::__optional_storage_base<WebCore::BufferSource,false>::__construct[abi:sn180100]<WebCore::BufferSource>(a1, v4);
  }
  return result;
}

void std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1, uint64_t a2)
{
}

void std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>>(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1, uint64_t a2)
{
  int v3 = *((unsigned char *)a1 + 72) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::has_value[abi:sn180100](a2) & 1))
  {
    if (*((unsigned char *)a1 + 72))
    {
      std::__to_address[abi:sn180100]<char const>();
      WebCore::AuthenticationExtensionsClientInputs::PRFInputs::operator=((uint64_t)a1, v4);
    }
  }
  else if (*((unsigned char *)a1 + 72))
  {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>(a1, v5);
  }
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(unsigned char *)(a1 + 72) & 1;
}

void WebCore::AuthenticationExtensionsClientInputs::PRFInputs::operator=(uint64_t a1, uint64_t a2)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::operator=[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)a1, a2);
  std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]((WTF::ASCIILiteral *)(a1 + 48), a2 + 48);
}

void std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::reset[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  if (*((unsigned char *)a1 + 72))
  {
    WebCore::AuthenticationExtensionsClientInputs::PRFInputs::~PRFInputs(a1);
    *((unsigned char *)a1 + 72) = 0;
  }
}

unsigned char *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>(unsigned char *a1, uint64_t a2)
{
  uint64_t result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs*>(a1, a2);
  a1[72] = 1;
  return result;
}

void std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, uint64_t a2)
{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::operator=[abi:sn180100](a1, a2);
}

void std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100](WTF::ASCIILiteral *a1, uint64_t a2)
{
  std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::operator=[abi:sn180100](a1, a2);
}

void std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, uint64_t a2)
{
}

void std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>>(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, uint64_t a2)
{
  int v3 = *((unsigned char *)a1 + 40) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100](a2) & 1))
  {
    if (*((unsigned char *)a1 + 40))
    {
      std::__to_address[abi:sn180100]<char const>();
      WebCore::AuthenticationExtensionsClientInputs::PRFValues::operator=((uint64_t)a1, v4);
    }
  }
  else if (*((unsigned char *)a1 + 40))
  {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues>((uint64_t)a1, v5);
  }
}

void WebCore::AuthenticationExtensionsClientInputs::PRFValues::operator=(uint64_t a1, uint64_t a2)
{
  WebCore::BufferSource::operator=(a1, a2);
  std::optional<WebCore::BufferSource>::operator=[abi:sn180100]((WebCore::BufferSource *)(a1 + 16), a2 + 16);
}

void std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::reset[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  if (*((unsigned char *)a1 + 40))
  {
    WebCore::AuthenticationExtensionsClientInputs::PRFValues::~PRFValues(a1);
    *((unsigned char *)a1 + 40) = 0;
  }
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues>(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues*>(a1, a2);
  *(unsigned char *)(a1 + 40) = 1;
  return result;
}

uint64_t std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues*>(uint64_t a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues*>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    __break(1u);
  }
  WebCore::AuthenticationExtensionsClientInputs::PRFValues::PRFValues(a1, a2);
  return a1;
}

uint64_t WebCore::AuthenticationExtensionsClientInputs::PRFValues::PRFValues(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  WebCore::BufferSource::BufferSource(a1, a2);
  std::optional<WebCore::BufferSource>::optional[abi:sn180100]((unsigned char *)(a1 + 16), a2 + 16);
  return a1;
}

void std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::operator=[abi:sn180100](WTF::ASCIILiteral *a1, uint64_t a2)
{
}

void std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(WTF::ASCIILiteral *a1, uint64_t a2)
{
  int v3 = *((unsigned char *)a1 + 16) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a2) & 1))
  {
    if (*((unsigned char *)a1 + 16))
    {
      std::__to_address[abi:sn180100]<char const>();
      WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1, v4);
    }
  }
  else if (*((unsigned char *)a1 + 16))
  {
    std::__optional_destruct_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__construct[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a1, v5);
  }
}

void WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF::ASCIILiteral *a1, uint64_t *a2)
{
  if (*((_DWORD *)a1 + 3))
  {
    int v3 = (uint64_t *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    uint64_t v4 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::destruct(v3, v4);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a2);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
}

WTF::ASCIILiteral *std::__optional_destruct_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::reset[abi:sn180100](WTF::ASCIILiteral *result)
{
  uint64_t v1 = result;
  if (*((unsigned char *)result + 16))
  {
    uint64_t result = WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result);
    *((unsigned char *)v1 + 16) = 0;
  }
  return result;
}

uint64_t std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__construct[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = std::__construct_at[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(a1, a2);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

uint64_t std::__construct_at[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(uint64_t a1, uint64_t *a2)
{
  return std::construct_at[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(uint64_t a1, uint64_t *a2)
{
  if (!a1) {
    __break(1u);
  }
  return WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2);
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::VectorBuffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  WTF::VectorBufferBase<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,WTF::FastMalloc>::VectorBufferBase(a1);
  uint64_t v6 = 0;
  *(void *)a1 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v7);
  unsigned int v5 = 0;
  *(_DWORD *)(a1 + 8) = std::exchange[abi:sn180100]<unsigned int,int>((unsigned int *)v7 + 2, &v5);
  unsigned int v4 = 0;
  *(_DWORD *)(a1 + 12) = std::exchange[abi:sn180100]<unsigned int,int>((unsigned int *)v7 + 3, &v4);
  return a1;
}

unsigned char *std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs*>(unsigned char *a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs*>(a1, a2);
}

unsigned char *std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs*>(unsigned char *a1, uint64_t a2)
{
  if (!a1) {
    __break(1u);
  }
  WebCore::AuthenticationExtensionsClientInputs::PRFInputs::PRFInputs(a1, a2);
  return a1;
}

unsigned char *WebCore::AuthenticationExtensionsClientInputs::PRFInputs::PRFInputs(unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::optional[abi:sn180100](a1, a2);
  std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100](a1 + 48, a2 + 48);
  return a1;
}

unsigned char *std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::optional[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

unsigned char *std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

unsigned char *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

unsigned char *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_copy_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

unsigned char *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_copy_base[abi:sn180100](a1, a2);
  return a1;
}

unsigned char *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_copy_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100](a2);
  if (result)
  {
    std::__to_address[abi:sn180100]<char const>();
    return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues>(a1, v4);
  }
  return result;
}

unsigned char *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_storage_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_destruct_base[abi:sn180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[40] = 0;
  return result;
}

unsigned char *std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

unsigned char *std::__optional_move_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

uint64_t std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a2);
  if (result)
  {
    std::__to_address[abi:sn180100]<char const>();
    return std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__construct[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v4);
  }
  return result;
}

uint64_t std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs*>(uint64_t a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs*>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    __break(1u);
  }
  WebCore::AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs(a1, a2);
  return a1;
}

uint64_t WebCore::AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((uint64_t *)a1, (uint64_t *)a2);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8) & 1;
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::optional[abi:sn180100]((unsigned char *)(a1 + 16), a2 + 16);
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::optional[abi:sn180100]((unsigned char *)(a1 + 64), a2 + 64);
  return a1;
}

unsigned char *std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::optional[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

unsigned char *std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::optional[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

unsigned char *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

unsigned char *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

unsigned char *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_base[abi:sn180100](a1, a2);
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100](a2);
  if (result)
  {
    std::__to_address[abi:sn180100]<char const>();
    return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>(a1, v4);
  }
  return result;
}

unsigned char *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

unsigned char *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

unsigned char *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_base[abi:sn180100](a1, a2);
  return a1;
}

unsigned char *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>>(unsigned char *a1, uint64_t a2)
{
  uint64_t result = std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::has_value[abi:sn180100](a2);
  if (result)
  {
    std::__to_address[abi:sn180100]<char const>();
    return (uint64_t)std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>(a1, v4);
  }
  return result;
}

unsigned char *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_storage_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_destruct_base[abi:sn180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[72] = 0;
  return result;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__emplace[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__construct_alt[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions>(v3, a2);
  *(_DWORD *)(a1 + 296) = 0;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__construct_alt[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions>(uint64_t a1, uint64_t a2)
{
}

uint64_t std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions>::__alt[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions>(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions(a1, a2);
  return a1;
}

uint64_t WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  WebCore::PublicKeyCredentialCreationOptions::RpEntity::RpEntity(a1, (uint64_t *)a2);
  WebCore::PublicKeyCredentialCreationOptions::UserEntity::UserEntity((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
  WebCore::BufferSource::BufferSource(a1 + 72, a2 + 72);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 88, (uint64_t *)(a2 + 88));
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 112, (uint64_t *)(a2 + 112));
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  std::optional<WebCore::AuthenticationExtensionsClientInputs>::optional[abi:sn180100]((unsigned char *)(a1 + 144), a2 + 144);
  return a1;
}

uint64_t WebCore::PublicKeyCredentialCreationOptions::RpEntity::RpEntity(uint64_t a1, uint64_t *a2)
{
  return a1;
}

{
  WebCore::PublicKeyCredentialCreationOptions::Entity::Entity((uint64_t *)a1, a2);
  std::optional<WTF::String>::optional[abi:sn180100]((unsigned char *)(a1 + 16), (uint64_t)(a2 + 2));
  return a1;
}

uint64_t *WebCore::PublicKeyCredentialCreationOptions::UserEntity::UserEntity(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  WebCore::PublicKeyCredentialCreationOptions::Entity::Entity(a1, a2);
  WebCore::BufferSource::BufferSource((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1 + 4, a2 + 4);
  return a1;
}

unsigned char *std::optional<WebCore::AuthenticationExtensionsClientInputs>::optional[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

uint64_t *WebCore::PublicKeyCredentialCreationOptions::Entity::Entity(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

unsigned char *std::optional<WTF::String>::optional[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_move_assign_base<WTF::String,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

unsigned char *std::__optional_move_assign_base<WTF::String,false>::__optional_move_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<WTF::String,false>::__optional_copy_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

unsigned char *std::__optional_move_base<WTF::String,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

uint64_t std::__optional_storage_base<WTF::String,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WTF::String,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__optional_storage_base<WTF::String,false>::has_value[abi:sn180100](a2);
  if (result)
  {
    std::__to_address[abi:sn180100]<char const>();
    return (uint64_t)std::__optional_storage_base<WTF::String,false>::__construct[abi:sn180100]<WTF::String>(a1, v4);
  }
  return result;
}

unsigned char *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

unsigned char *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::has_value[abi:sn180100](a2);
  if (result)
  {
    std::__to_address[abi:sn180100]<char const>();
    return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs>(a1, v4);
  }
  return result;
}

void _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS4_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentIS7_LNS1_6_TraitE1EEEEEvOT_EUlRSD_OT0_E_JRNS1_5__altILm1ES6_EESK_EEEDTclclsr3stdE7declvalISD_EEspclsr3stdE7declvalIT0_EEEESE_DpOSM_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptionsENS3_33PublicKeyCredentialRequestOptionsEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS6_LNS0_6_TraitE1EEEEEvOT_ENKUlRSC_OT0_E_clINS0_5__altILm1ES5_EESK_EEDaSE_SG_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__assign_alt[abi:sn180100]<1ul,WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  uint64_t v5 = a3;
  if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a1) == 1)
  {
    WebCore::PublicKeyCredentialRequestOptions::operator=(v6, v5);
  }
  else
  {
    v4[0] = a1;
    v4[1] = v5;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__assign_alt[abi:sn180100]<1ul,WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialRequestOptions>(std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> &,WebCore::PublicKeyCredentialRequestOptions &&)::{unnamed type#1}::operator()[abi:sn180100](v4);
  }
}

void WebCore::PublicKeyCredentialRequestOptions::operator=(uint64_t a1, uint64_t a2)
{
  WebCore::BufferSource::operator=(a1, a2);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  WTF::String::operator=((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)(a1 + 32), (uint64_t *)(a2 + 32));
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator=[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)(a1 + 56), a2 + 56);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__assign_alt[abi:sn180100]<1ul,WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialRequestOptions>(std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> &,WebCore::PublicKeyCredentialRequestOptions &&)::{unnamed type#1}::operator()[abi:sn180100](uint64_t *a1)
{
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__emplace[abi:sn180100]<1ul,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__construct_alt[abi:sn180100]<1ul,WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialRequestOptions>(v3, a2);
  *(_DWORD *)(a1 + 296) = 1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::__construct_alt[abi:sn180100]<1ul,WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1, uint64_t a2)
{
}

uint64_t std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions>::__alt[abi:sn180100]<WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  WebCore::PublicKeyCredentialRequestOptions::PublicKeyCredentialRequestOptions(a1, a2);
  return a1;
}

uint64_t WebCore::PublicKeyCredentialRequestOptions::PublicKeyCredentialRequestOptions(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  WebCore::BufferSource::BufferSource(a1, a2);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 32, (uint64_t *)(a2 + 32));
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  std::optional<WebCore::AuthenticationExtensionsClientInputs>::optional[abi:sn180100]((unsigned char *)(a1 + 56), a2 + 56);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  return a1;
}

uint64_t *WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  uint64_t v4[4] = (uint64_t)v4;
  v4[3] = (uint64_t)a2;
  v4[7] = (uint64_t)v4;
  v4[6] = (uint64_t)a2;
  v4[0] = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2);
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v4);
  v4[5] = (uint64_t)v4;
  v5[1] = v4;
  v5[0] = 0;
  void v5[3] = v4;
  void v5[2] = v5;
  uint64_t v6 = (WTF::ThreadSafeRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v4);
  if (v6) {
    WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(v6);
  }
  return a1;
}

uint64_t WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(WTF::ThreadSafeRefCountedBase *a1)
{
  uint64_t result = WTF::ThreadSafeRefCountedBase::derefBase(a1);
  if (result)
  {
    if (a1) {
      return WTF::FastMalloc::free(a1, v3);
    }
  }
  return result;
}

uint64_t WebCore::ResourceRequest::operator=(uint64_t a1, uint64_t a2)
{
  WebCore::ResourceRequestBase::operator=(a1, a2);
  WTF::RetainPtr<NSURLRequest>::operator=((uint64_t *)(a1 + 192), (uint64_t *)(a2 + 192));
  return a1;
}

{
  const void *v4;
  const void *v5;

  WebCore::ResourceRequestBase::operator=(a1, a2);
  uint64_t v4 = *(const void **)(a2 + 192);
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 192);
  *(void *)(a1 + 192) = v4;
  if (v5) {
    CFRelease(v5);
  }
  return a1;
}

uint64_t WebCore::SecurityOriginData::operator=(uint64_t a1, uint64_t a2)
{
  return std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator=[abi:sn180100](a1, a2);
}

WTF::RefCountedBase *WebCore::ResourceRequestBase::operator=(uint64_t a1, uint64_t a2)
{
  WebCore::ResourceRequestBase::RequestData::operator=(a1, a2);
  WTF::String::operator=((uint64_t *)(a1 + 152), (uint64_t *)(a2 + 152));
  WTF::String::operator=((uint64_t *)(a1 + 160), (uint64_t *)(a2 + 160));
  uint64_t result = WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>::operator=((uint64_t *)(a1 + 168), (uint64_t *)(a2 + 168));
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  return result;
}

uint64_t *WTF::RetainPtr<NSURLRequest>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  WTF::RetainPtr<NSURLRequest>::RetainPtr(v4, a2);
  WTF::RetainPtr<NSURLRequest>::swap(a1, v4);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(v4);
}

uint64_t WebCore::ResourceRequestBase::RequestData::operator=(uint64_t a1, uint64_t a2)
{
  WTF::URL::operator=(a1, a2);
  WTF::URL::operator=(a1 + 40, a2 + 40);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  WTF::String::operator=((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
  WebCore::HTTPHeaderMap::operator=(a1 + 96, (uint64_t *)(a2 + 96));
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)(a1 + 128), (_DWORD *)(a2 + 128));
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  return a1;
}

WTF::RefCountedBase *WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  uint64_t v4[4] = (uint64_t)v4;
  uint64_t v4[3] = (uint64_t)a2;
  v4[7] = (uint64_t)v4;
  v4[6] = (uint64_t)a2;
  v4[0] = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2);
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v4);
  v4[5] = (uint64_t)v4;
  v5[1] = v4;
  v5[0] = 0;
  void v5[3] = v4;
  void v5[2] = v5;
  uint64_t result = (WTF::RefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v4);
  uint64_t v6 = result;
  if (result) {
    return (WTF::RefCountedBase *)WTF::RefCounted<WebCore::FormData>::deref(v6);
  }
  return result;
}

uint64_t WebCore::HTTPHeaderMap::operator=(uint64_t a1, uint64_t *a2)
{
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)a1, a2);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)(a1 + 16), a2 + 2);
  return a1;
}

void WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF::ASCIILiteral *a1, _DWORD *a2)
{
  if (*((_DWORD *)a1 + 3))
  {
    uint64_t v3 = (WTF::StringImpl *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    uint64_t v4 = (WTF::StringImpl *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WTF::String>::destruct(v3, v4);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a2);
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
}

void WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=(WTF::ASCIILiteral *a1, uint64_t *a2)
{
  if (*((_DWORD *)a1 + 3))
  {
    uint64_t v3 = (WebCore::ExceptionData *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    uint64_t v4 = (WebCore::ExceptionData *)WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::CommonHeader>::destruct(v3, v4);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a2);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
}

void WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=(WTF::ASCIILiteral *a1, uint64_t *a2)
{
  if (*((_DWORD *)a1 + 3))
  {
    uint64_t v3 = (WebCore::HTTPHeaderMap::UncommonHeader *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    uint64_t v4 = (WebCore::HTTPHeaderMap::UncommonHeader *)WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(v3, v4);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a2);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
}

void WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::CommonHeader>::destruct(WebCore::ExceptionData *a1, WebCore::ExceptionData *a2)
{
}

void WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::CommonHeader>::destruct(WebCore::ExceptionData *a1, WebCore::ExceptionData *a2)
{
  while (a1 != a2)
  {
    WebCore::ExceptionData::~ExceptionData(a1);
    a1 = (WebCore::ExceptionData *)((char *)a1 + 16);
  }
}

void WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(WebCore::HTTPHeaderMap::UncommonHeader *a1, WebCore::HTTPHeaderMap::UncommonHeader *a2)
{
}

void WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::UncommonHeader>::destruct(WebCore::HTTPHeaderMap::UncommonHeader *a1, WebCore::HTTPHeaderMap::UncommonHeader *a2)
{
  while (a1 != a2)
  {
    WebCore::HTTPHeaderMap::UncommonHeader::~UncommonHeader(a1);
    a1 = (WebCore::HTTPHeaderMap::UncommonHeader *)((char *)a1 + 16);
  }
}

void WebCore::HTTPHeaderMap::UncommonHeader::~UncommonHeader(WebCore::HTTPHeaderMap::UncommonHeader *this)
{
}

WTF::StringImpl *WTF::VectorTypeOperations<WTF::String>::destruct(WTF::StringImpl *a1, WTF::StringImpl *a2)
{
  return WTF::VectorDestructor<true,WTF::String>::destruct(a1, a2);
}

uint64_t WTF::RefCounted<WebCore::FormData>::deref(WTF::RefCountedBase *a1)
{
  uint64_t result = WTF::RefCountedBase::derefBase(a1);
  if (result)
  {
    if (a1)
    {
      MEMORY[0x19973B2F0](a1);
      return bmalloc::api::isoDeallocate(a1, v3);
    }
  }
  return result;
}

void *WTF::RetainPtr<NSURLRequest>::RetainPtr(void *a1, uint64_t *a2)
{
  return a1;
}

{
  uint64_t v3;

  WTF::RetainPtr<NSURLRequest>::leakRef<NSURLRequest>(a2);
  std::__to_address[abi:sn180100]<char const>();
  *a1 = v3;
  return a1;
}

uint64_t *WTF::RetainPtr<NSURLRequest>::swap(uint64_t *a1, uint64_t *a2)
{
  return std::swap[abi:sn180100]<JSC::ArrayBufferView *>(a1, a2);
}

uint64_t *WTF::RetainPtr<NSURLRequest>::~RetainPtr(uint64_t *a1)
{
  return a1;
}

{
  CFTypeRef cf;

  CFTypeRef cf = (CFTypeRef)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (cf) {
    CFRelease(cf);
  }
  return a1;
}

void WTF::RetainPtr<NSURLRequest>::leakRef<NSURLRequest>(uint64_t *a1)
{
}

uint64_t std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__impl<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator=[abi:sn180100](a1, a2);
}

uint64_t std::__variant_detail::__impl<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::operator=(a1, a2);
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::operator=(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::operator=(a1, a2);
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::operator=(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  if (!std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::valueless_by_exception[abi:sn180100](a1)
    || (uint64_t result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::valueless_by_exception[abi:sn180100](v6),
        (result & 1) == 0))
  {
    if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::valueless_by_exception[abi:sn180100](v6))
    {
      return std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
    }
    else
    {
      uint64_t v4 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::index[abi:sn180100](v6);
      uint64_t v5 = a1;
      return _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRSJ_SN_EEEDcmSP_DpOT0_(v4, (uint64_t)&v5, a1, v6);
    }
  }
  return result;
}

BOOL std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::valueless_by_exception[abi:sn180100](uint64_t a1)
{
  return std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::index[abi:sn180100](a1) == -1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](uint64_t a1)
{
  uint64_t v4 = a1;
  uint64_t result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::valueless_by_exception[abi:sn180100](a1);
  if ((result & 1) == 0) {
    uint64_t result = _ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0_((uint64_t)&v3, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRSJ_SN_EEEDcmSP_DpOT0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  v10[3] = a3;
  v10[2] = a4;
  v10[0] = off_1EE9B2FA0[0];
  v10[1] = off_1EE9B2FA8[0];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))_ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSF_1EJSC_SD_EEEELm2EEixB8sn180100Em((uint64_t)v10, a1);
  uint64_t v5 = v11;
  std::__to_address[abi:sn180100]<char const>();
  uint64_t v7 = v6;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v7, v8);
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::index[abi:sn180100](uint64_t a1)
{
  if (*(_DWORD *)(a1 + 24) == -1) {
    return -1;
  }
  else {
    return *(unsigned int *)(a1 + 24);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a1;
  v8[2] = a2;
  v8[0] = off_1EE9B2F90[0];
  v8[1] = off_1EE9B2F98[0];
  uint64_t v2 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::index[abi:sn180100](a2);
  _ZNSt3__116__variant_detail12__visitation6__base4__atB8sn180100IPFvOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS0_6__baseILSH_1EJSE_SF_EEEELm2EJEEEODaRKNS_8__farrayISJ_XT0_EEEmDpT1_((uint64_t)v8, v2);
  uint64_t v4 = *v3;
  uint64_t v5 = v9;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v6);
}

WebCore::HTTPHeaderMap::UncommonHeader *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSC_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSA_SJ_EEEEEEDcSN_DpT0_(uint64_t a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm0ES6_EEEEEDTclclsr3stdE7declvalISJ_EEspclsr3stdE7declvalIT0_EEEEOSJ_DpOSP_(a1, v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSC_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSA_SJ_EEEEEEDcSN_DpT0_()
{
}

WebCore::HTTPHeaderMap::UncommonHeader *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm0ES6_EEEEEDTclclsr3stdE7declvalISJ_EEspclsr3stdE7declvalIT0_EEEEOSJ_DpOSP_(uint64_t a1, WebCore::HTTPHeaderMap::UncommonHeader *a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &)#1}::operator()<std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>>(a1, a2);
}

WebCore::HTTPHeaderMap::UncommonHeader *std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &)#1}::operator()<std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>>(uint64_t a1, WebCore::HTTPHeaderMap::UncommonHeader *a2)
{
  return std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>::~__alt(a2);
}

WebCore::HTTPHeaderMap::UncommonHeader *std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>::~__alt(WebCore::HTTPHeaderMap::UncommonHeader *a1)
{
  return a1;
}

{
  WebCore::HTTPHeaderMap::UncommonHeader::~UncommonHeader(a1);
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSC_33SupportsObjectIdentifierNullStateE1EEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJSA_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t *a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  uint64_t v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISG_LNS1_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS1_5__altILm0ES6_EEST_EEEDTclclsr3stdE7declvalISM_EEspclsr3stdE7declvalIT0_EEEESN_DpOSV_(a1, v3, v4);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSC_33SupportsObjectIdentifierNullStateE1EEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJSA_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t *a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  uint64_t v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISG_LNS1_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS1_5__altILm1ESF_EEST_EEEDTclclsr3stdE7declvalISM_EEspclsr3stdE7declvalIT0_EEEESN_DpOSV_(a1, v3, v4);
}

void _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISG_LNS1_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS1_5__altILm0ES6_EEST_EEEDTclclsr3stdE7declvalISM_EEspclsr3stdE7declvalIT0_EEEESN_DpOSV_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_ENKUlRSL_OT0_E_clINS0_5__altILm0ES5_EEST_EEDaSN_SP_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  uint64_t v5 = a3;
  if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::index[abi:sn180100](a1))
  {
    v4[0] = a1;
    v4[1] = v5;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple>(std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple> &,WebCore::SecurityOriginData::Tuple &&)::{unnamed type#1}::operator()[abi:sn180100](v4);
  }
  else
  {
    WebCore::SecurityOriginData::Tuple::operator=(v6, v5);
  }
}

uint64_t WebCore::SecurityOriginData::Tuple::operator=(uint64_t a1, uint64_t a2)
{
  WTF::String::operator=((uint64_t *)a1, (uint64_t *)a2);
  WTF::String::operator=((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  return a1;
}

{
  char v4;

  WTF::String::operator=((uint64_t *)a1, (WTF::StringImpl **)a2);
  WTF::String::operator=((uint64_t *)(a1 + 8), (WTF::StringImpl **)(a2 + 8));
  uint64_t v4 = *(unsigned char *)(a2 + 18);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(unsigned char *)(a1 + 18) = v4;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__assign_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple>(std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple> &,WebCore::SecurityOriginData::Tuple &&)::{unnamed type#1}::operator()[abi:sn180100](uint64_t *a1)
{
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__emplace[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple>(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__construct_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple>(v3, a2);
  *(_DWORD *)(a1 + 24) = 0;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__construct_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple>(uint64_t a1, uint64_t a2)
{
}

uint64_t std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>::__alt[abi:sn180100]<WebCore::SecurityOriginData::Tuple>(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  WebCore::SecurityOriginData::Tuple::Tuple(a1, a2);
  return a1;
}

uint64_t WebCore::SecurityOriginData::Tuple::Tuple(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((uint64_t *)a1, (uint64_t *)a2);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

void _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISG_LNS1_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS1_5__altILm1ESF_EEST_EEEDTclclsr3stdE7declvalISM_EEspclsr3stdE7declvalIT0_EEEESN_DpOSV_(uint64_t *a1, void *a2, void *a3)
{
}

void _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_ENKUlRSL_OT0_E_clINS0_5__altILm1ESE_EEST_EEDaSN_SP_(uint64_t *a1, void *a2, void *a3)
{
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__assign_alt[abi:sn180100]<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t a1, void *a2, void *a3)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  uint64_t v7 = a3;
  if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::index[abi:sn180100](a1) == 1)
  {
    uint64_t v4 = v7;
    uint64_t v5 = v8;
    *uint64_t v8 = *v7;
    v5[1] = v4[1];
  }
  else
  {
    v6[0] = a1;
    v6[1] = v7;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__assign_alt[abi:sn180100]<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(std::__variant_detail::__alt<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> &&)::{unnamed type#1}::operator()[abi:sn180100]((uint64_t)v6);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__assign_alt[abi:sn180100]<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(std::__variant_detail::__alt<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> &,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> &&)::{unnamed type#1}::operator()[abi:sn180100](uint64_t a1)
{
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__emplace[abi:sn180100]<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t a1, void *a2)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__construct_alt[abi:sn180100]<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v3, a2);
  *(_DWORD *)(a1 + 24) = 1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__construct_alt[abi:sn180100]<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(void *a1, void *a2)
{
}

void *std::__variant_detail::__alt<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::__alt[abi:sn180100]<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(void *a1, void *a2)
{
  return a1;
}

void *std::__variant_detail::__alt<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::__alt[abi:sn180100]<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(void *result, void *a2)
{
  *uint64_t result = *a2;
  result[1] = a2[1];
  return result;
}

void std::__optional_move_assign_base<WebCore::SecurityOriginData,false>::operator=[abi:sn180100](WebCore::SecurityOriginData *a1, uint64_t a2)
{
}

void std::__optional_storage_base<WebCore::SecurityOriginData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SecurityOriginData,false>>(WebCore::SecurityOriginData *a1, uint64_t a2)
{
  int v3 = *((unsigned char *)a1 + 32) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::SecurityOriginData,false>::has_value[abi:sn180100](a2) & 1))
  {
    if (*((unsigned char *)a1 + 32))
    {
      std::__to_address[abi:sn180100]<char const>();
      WebCore::SecurityOriginData::operator=((uint64_t)a1, v4);
    }
  }
  else if (*((unsigned char *)a1 + 32))
  {
    std::__optional_destruct_base<WebCore::SecurityOriginData,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WebCore::SecurityOriginData,false>::__construct[abi:sn180100]<WebCore::SecurityOriginData>((uint64_t)a1, v5);
  }
}

uint64_t std::__optional_storage_base<WebCore::SecurityOriginData,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(unsigned char *)(a1 + 32) & 1;
}

void std::__optional_destruct_base<WebCore::SecurityOriginData,false>::reset[abi:sn180100](WebCore::SecurityOriginData *a1)
{
  if (*((unsigned char *)a1 + 32))
  {
    WebCore::SecurityOriginData::~SecurityOriginData(a1);
    *((unsigned char *)a1 + 32) = 0;
  }
}

uint64_t std::__optional_storage_base<WebCore::SecurityOriginData,false>::__construct[abi:sn180100]<WebCore::SecurityOriginData>(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__construct_at[abi:sn180100]<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WebCore::SecurityOriginData*>(a1, a2);
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

void WebCore::SecurityOriginData::~SecurityOriginData(WebCore::SecurityOriginData *this)
{
}

{
  std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::~variant[abi:sn180100]((uint64_t)this);
}

uint64_t std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::~variant[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::__variant_detail::__impl<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::~__impl(a1);
  return a1;
}

uint64_t std::__variant_detail::__impl<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::~__impl(uint64_t a1)
{
  return a1;
}

{
  std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::~__copy_assignment(a1);
  return a1;
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::~__copy_assignment(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::~__move_assignment(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::~__assignment(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::~__copy_constructor(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::~__move_constructor(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::~__ctor(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  return a1;
}

uint64_t std::__construct_at[abi:sn180100]<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WebCore::SecurityOriginData*>(uint64_t a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WebCore::SecurityOriginData*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WebCore::SecurityOriginData*>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    __break(1u);
  }
  return WebCore::SecurityOriginData::SecurityOriginData(a1, a2);
}

uint64_t WebCore::SecurityOriginData::SecurityOriginData(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::variant[abi:sn180100](a1, a2);
  return a1;
}

uint64_t std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::variant[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::__variant_detail::__impl<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::__impl[abi:sn180100](a1, a2);
  return a1;
}

{
  std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::variant[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__variant_detail::__impl<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::__impl[abi:sn180100](a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__impl<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::__impl[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__copy_assignment(a1, a2);
  return a1;
}

{
  std::__variant_detail::__impl<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::__impl[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__copy_assignment(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__copy_assignment(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_assignment(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_assignment(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__assignment(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__assignment(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSG_1EJS5_SE_EEEENS0_13__valueless_tE(a1);
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSG_1EJS5_SE_EEEENS0_13__valueless_tE(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1;
  uint64_t v5 = a2;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  uint64_t result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::valueless_by_exception[abi:sn180100](v5);
  if ((result & 1) == 0)
  {
    uint64_t v4 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::index[abi:sn180100](v5);
    uint64_t result = _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JSO_SN_EEEDcmSQ_DpOT0_(v4, (uint64_t)&v3, v6, v5);
    *(_DWORD *)(v6 + 24) = v4;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS5_SE_EEEENS0_13__valueless_tE(uint64_t a1)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSG_1EJS5_SE_EEEENS0_13__valueless_tE(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::__base[abi:sn180100](uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JSO_SN_EEEDcmSQ_DpOT0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  v10[3] = a3;
  v10[2] = a4;
  v10[0] = off_1EE9B2FB0[0];
  v10[1] = off_1EE9B2FB8[0];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))_ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSF_1EJSC_SD_EEEELm2EEixB8sn180100Em((uint64_t)v10, a1);
  uint64_t v5 = v11;
  std::__to_address[abi:sn180100]<char const>();
  uint64_t v7 = v6;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v7, v8);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSC_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSA_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  uint64_t v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100INS1_18__move_constructorISG_LNS1_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS1_5__altILm0ES6_EESU_EEEDTclclsr3stdE7declvalISN_EEspclsr3stdE7declvalIT0_EEEESO_DpOSW_(a1, v3, v4);
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSC_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSA_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  uint64_t v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100INS1_18__move_constructorISG_LNS1_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS1_5__altILm1ESF_EESU_EEEDTclclsr3stdE7declvalISN_EEspclsr3stdE7declvalIT0_EEEESO_DpOSW_(a1, v3, v4);
}

uint64_t _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100INS1_18__move_constructorISG_LNS1_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS1_5__altILm0ES6_EESU_EEEDTclclsr3stdE7declvalISN_EEspclsr3stdE7declvalIT0_EEEESO_DpOSW_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_ENKUlRSM_OT0_E_clINS0_5__altILm0ES5_EESU_EEDaSO_SQ_(a1, a2, a3);
}

uint64_t _ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_ENKUlRSM_OT0_E_clINS0_5__altILm0ES5_EESU_EEDaSO_SQ_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = a2;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__construct_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple>(a2, a3);
  return result;
}

void *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100INS1_18__move_constructorISG_LNS1_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS1_5__altILm1ESF_EESU_EEEDTclclsr3stdE7declvalISN_EEspclsr3stdE7declvalIT0_EEEESO_DpOSW_(uint64_t a1, void *a2, void *a3)
{
  return _ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_ENKUlRSM_OT0_E_clINS0_5__altILm1ESE_EESU_EEDaSO_SQ_(a1, a2, a3);
}

void *_ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_ENKUlRSM_OT0_E_clINS0_5__altILm1ESE_EESU_EEDaSO_SQ_(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = a2;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__construct_alt[abi:sn180100]<1ul,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a2, a3);
  return result;
}

void WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator=(uint64_t a1)
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::operator=[abi:sn180100](a1);
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::operator=[abi:sn180100](a1);
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::operator=[abi:sn180100](uint64_t a1)
{
  uint64_t v2 = std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::release[abi:sn180100]();
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::reset[abi:sn180100](a1, v2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::get_deleter[abi:sn180100]();
  std::to_address[abi:sn180100]<char const>();
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::reset[abi:sn180100](a1, 0);
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v5 = *v2;
  std::to_address[abi:sn180100]<char const>();
  *uint64_t v3 = a2;
  if (v5)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::operator()[abi:sn180100](v4, v5);
  }
}

uint64_t std::default_delete<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a2);
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::GlobalFrameIdentifier,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(unsigned char *)(a1 + 24) & 1;
}

BOOL WebCore::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v2 = WTF::operator==<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,(WTF::SupportsObjectIdentifierNullState)0>(a1, a2);
  BOOL v3 = 0;
  if (v2) {
    return WTF::operator==<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,(WTF::SupportsObjectIdentifierNullState)0>(a1 + 8, a2 + 8);
  }
  return v3;
}

{
  BOOL v2;

  BOOL v2 = *(_DWORD *)a1 == *(_DWORD *)a2 && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
  return v2
      && *(float *)(a1 + 8) == *(float *)(a2 + 8)
      && *(float *)(a1 + 12) == *(float *)(a2 + 12)
      && *(float *)(a1 + 16) == *(float *)(a2 + 16);
}

{
  WebCore::Node *v2;
  WebCore::Node *v3;
  BOOL v4;
  int v5;
  WebCore::Node *v6;
  WebCore::Node *v8;
  int v9;
  unsigned __int8 v10;
  WebCore::Node *v11;
  int v12;
  unsigned __int8 v13;

  BOOL v2 = *(WebCore::Node **)a1;
  if (*(void *)a1) {
    *((_DWORD *)v2 + 7) += 2;
  }
  uint64_t v11 = v2;
  uint64_t v12 = *(_DWORD *)(a1 + 8);
  uint64_t v13 = *(unsigned char *)(a1 + 12);
  BOOL v3 = *(WebCore::Node **)a2;
  if (*(void *)a2) {
    *((_DWORD *)v3 + 7) += 2;
  }
  uint64_t v8 = v3;
  uint64_t v9 = *(_DWORD *)(a2 + 8);
  char v10 = *(unsigned char *)(a2 + 12);
  if (v2 == v3)
  {
    uint64_t v5 = WebCore::Position::deprecatedEditingOffset((WebCore::Position *)&v11);
    uint64_t v4 = v5 == WebCore::Position::deprecatedEditingOffset((WebCore::Position *)&v8)
      && ((v10 ^ v13) & 7) == 0;
    BOOL v3 = v8;
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v8 = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 7) == 2)
    {
      if ((*((_WORD *)v3 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v3);
      }
    }
    else
    {
      *((_DWORD *)v3 + 7) -= 2;
    }
  }
  uint64_t v6 = v11;
  uint64_t v11 = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 7) == 2)
    {
      if ((*((_WORD *)v6 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v6);
      }
    }
    else
    {
      *((_DWORD *)v6 + 7) -= 2;
    }
  }
  return v4;
}

void std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator*[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a1) & 1) == 0) {
    __break(1u);
  }
  std::__to_address[abi:sn180100]<char const>();
}

uint64_t std::default_delete<WTF::Detail::CallableWrapperBase<void>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a2);
  }
  return result;
}

uint64_t *WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(uint64_t *a1)
{
  v3[1] = a1;
  v3[0] = 0;
  double v3[3] = a1;
  uint64_t v3[2] = v3;
  uint64_t v4 = (WTF::ThreadSafeRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v4) {
    WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(v4);
  }
  return a1;
}

WebCore::SecurityOriginData *std::optional<WebCore::SecurityOriginData>::~optional(WebCore::SecurityOriginData *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::SecurityOriginData,false>::~__optional_move_assign_base(a1);
  return a1;
}

uint64_t std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::~variant[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::~__impl(a1 + 8);
  return a1;
}

WebCore::SecurityOriginData *std::__optional_move_assign_base<WebCore::SecurityOriginData,false>::~__optional_move_assign_base(WebCore::SecurityOriginData *a1)
{
  return a1;
}

WebCore::SecurityOriginData *std::__optional_copy_assign_base<WebCore::SecurityOriginData,false>::~__optional_copy_assign_base(WebCore::SecurityOriginData *a1)
{
  return a1;
}

WebCore::SecurityOriginData *std::__optional_move_base<WebCore::SecurityOriginData,false>::~__optional_move_base(WebCore::SecurityOriginData *a1)
{
  return a1;
}

WebCore::SecurityOriginData *std::__optional_copy_base<WebCore::SecurityOriginData,false>::~__optional_copy_base(WebCore::SecurityOriginData *a1)
{
  return a1;
}

WebCore::SecurityOriginData *std::__optional_storage_base<WebCore::SecurityOriginData,false>::~__optional_storage_base(WebCore::SecurityOriginData *a1)
{
  return a1;
}

WebCore::SecurityOriginData *std::__optional_destruct_base<WebCore::SecurityOriginData,false>::~__optional_destruct_base[abi:sn180100](WebCore::SecurityOriginData *a1)
{
  if (*((unsigned char *)a1 + 32)) {
    WebCore::SecurityOriginData::~SecurityOriginData(a1);
  }
  return a1;
}

uint64_t std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::~__impl(uint64_t a1)
{
  return a1;
}

{
  std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::~__copy_assignment(a1);
  return a1;
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::~__copy_assignment(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::~__move_assignment(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::~__assignment(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::~__copy_constructor(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::~__move_constructor(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>>::~__ctor(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  return a1;
}

void std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v5 = *v2;
  std::to_address[abi:sn180100]<char const>();
  *BOOL v3 = a2;
  if (v5)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WebKit::AuthenticatorPresenterCoordinator>::operator()[abi:sn180100](v4, v5);
  }
}

uint64_t std::default_delete<WebKit::AuthenticatorPresenterCoordinator>::operator()[abi:sn180100](uint64_t a1, WebKit::AuthenticatorPresenterCoordinator *a2)
{
  if (a2)
  {
    WebKit::AuthenticatorPresenterCoordinator::~AuthenticatorPresenterCoordinator(a2);
    return WTF::FastMalloc::free(a2, v3);
  }
  return result;
}

atomic_uint **WTF::WeakPtr<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(atomic_uint **a1, uint64_t a2)
{
  uint64_t v5 = (atomic_uint *)WTF::WeakPtr<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::implForObject<WebKit::AuthenticatorObserver>(a2);
  if (v5) {
    WTF::ThreadSafeRefCountedBase::ref(v5);
  }
  *a1 = v5;
  return a1;
}

uint64_t WTF::WeakPtr<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::implForObject<WebKit::AuthenticatorObserver>(uint64_t a1)
{
  std::__to_address[abi:sn180100]<char const>();
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v1, a1);
  std::__to_address[abi:sn180100]<char const>();
  return WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::impl(v2);
}

uint64_t *WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  uint64_t result = (uint64_t *)WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(a1);
  if ((result & 1) == 0)
  {
    uint64_t v4 = (WTF::RefCountedBase *)WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::operator new((WTF *)0x10);
    WTF::DefaultWeakPtrImpl::DefaultWeakPtrImpl<WebKit::AuthenticatorObserver>((uint64_t)v4, v6);
    WTF::adoptRef<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>(v4, &v5);
    WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=<WTF::DefaultWeakPtrImpl>(a1, &v5);
    return WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::~Ref(&v5);
  }
  return result;
}

uint64_t WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::impl(uint64_t a1)
{
  return WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get(a1);
}

void *WTF::adoptRef<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>@<X0>(WTF::RefCountedBase *a1@<X0>, void *a2@<X8>)
{
  return WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::Ref(a2, (uint64_t)a1);
}

uint64_t WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::operator new(WTF *a1)
{
  return WTF::fastCompactMalloc(a1);
}

uint64_t WTF::DefaultWeakPtrImpl::DefaultWeakPtrImpl<WebKit::AuthenticatorObserver>(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::WeakPtrImplBase<WebKit::AuthenticatorObserver>(a1, a2);
  return a1;
}

uint64_t *WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=<WTF::DefaultWeakPtrImpl>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(v4, a2);
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v4);
  uint64_t v4[3] = (uint64_t)v4;
  v5[1] = v4;
  v5[0] = 0;
  void v5[3] = v4;
  void v5[2] = v5;
  uint64_t v6 = (WTF::ThreadSafeRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v4);
  if (v6) {
    WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(v6);
  }
  return a1;
}

uint64_t *WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::~Ref(uint64_t *a1)
{
  return a1;
}

{
  uint64_t v2;
  WTF::ThreadSafeRefCountedBase *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  WTF::ThreadSafeRefCountedBase *v8;

  uint64_t v4 = a1;
  uint64_t v5 = a1;
  BOOL v3 = 0;
  uint64_t v2 = 0;
  uint64_t v7 = a1;
  uint64_t v6 = &v2;
  BOOL v3 = (WTF::ThreadSafeRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v3)
  {
    uint64_t v8 = v3;
    WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(v3);
  }
  return v5;
}

void *WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::Ref(void *a1, uint64_t a2)
{
  return a1;
}

void *WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::Ref(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::WeakPtrImplBase<WebKit::AuthenticatorObserver>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  return a1;
}

std::__cxx_atomic_base_impl<unsigned int> *WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::ThreadSafeRefCounted(std::__cxx_atomic_base_impl<unsigned int> *a1)
{
  return a1;
}

std::__cxx_atomic_base_impl<unsigned int> *WTF::ThreadSafeRefCountedBase::ThreadSafeRefCountedBase(std::__cxx_atomic_base_impl<unsigned int> *this)
{
  return this;
}

std::__cxx_atomic_base_impl<unsigned int> *std::atomic<unsigned int>::atomic[abi:sn180100](std::__cxx_atomic_base_impl<unsigned int> *a1, unsigned int a2)
{
  return a1;
}

{
  std::__atomic_base<unsigned int,true>::__atomic_base[abi:sn180100](a1, a2);
  return a1;
}

std::__cxx_atomic_base_impl<unsigned int> *std::__atomic_base<unsigned int,true>::__atomic_base[abi:sn180100](std::__cxx_atomic_base_impl<unsigned int> *a1, unsigned int a2)
{
  return a1;
}

std::__cxx_atomic_base_impl<unsigned int> *std::__atomic_base<unsigned int,false>::__atomic_base[abi:sn180100](std::__cxx_atomic_base_impl<unsigned int> *a1, unsigned int a2)
{
  return a1;
}

std::__cxx_atomic_base_impl<unsigned int> *std::__cxx_atomic_impl<unsigned int,std::__cxx_atomic_base_impl<unsigned int>>::__cxx_atomic_impl[abi:sn180100](std::__cxx_atomic_base_impl<unsigned int> *a1, unsigned int a2)
{
  return a1;
}

{
  std::__cxx_atomic_base_impl<unsigned int>::__cxx_atomic_base_impl(a1, a2);
  return a1;
}

std::__cxx_atomic_base_impl<unsigned int> *__cdecl std::__cxx_atomic_base_impl<unsigned int>::__cxx_atomic_base_impl(std::__cxx_atomic_base_impl<unsigned int> *this, unsigned int __value)
{
  this->__a_value = __value;
  return this;
}

uint64_t WTF::ThreadSafeRefCountedBase::ref(atomic_uint *this)
{
  return WTF::ThreadSafeRefCountedBase::refAllowingPartiallyDestroyed(this);
}

uint64_t WTF::ThreadSafeRefCountedBase::refAllowingPartiallyDestroyed(atomic_uint *this)
{
  return std::__atomic_base<unsigned int,true>::operator++[abi:sn180100](this);
}

uint64_t std::__atomic_base<unsigned int,true>::operator++[abi:sn180100](atomic_uint *a1)
{
  return std::__atomic_base<unsigned int,true>::fetch_add[abi:sn180100](a1, 1u, 5) + 1;
}

uint64_t std::__atomic_base<unsigned int,true>::fetch_add[abi:sn180100](atomic_uint *a1, unsigned int a2, int a3)
{
  return std::__cxx_atomic_fetch_add[abi:sn180100]<unsigned int>(a1, a2, a3);
}

uint64_t std::__cxx_atomic_fetch_add[abi:sn180100]<unsigned int>(atomic_uint *a1, unsigned int a2, int a3)
{
  switch(a3)
  {
    case 1:
    case 2:
      unsigned int add_explicit = atomic_fetch_add_explicit(a1, a2, memory_order_acquire);
      break;
    case 3:
      unsigned int add_explicit = atomic_fetch_add_explicit(a1, a2, memory_order_release);
      break;
    case 4:
    case 5:
      unsigned int add_explicit = atomic_fetch_add(a1, a2);
      break;
    default:
      unsigned int add_explicit = atomic_fetch_add_explicit(a1, a2, memory_order_relaxed);
      break;
  }
  return add_explicit;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::reset[abi:sn180100]();
  return a1;
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::reset[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v3 = *v0;
  std::to_address[abi:sn180100]<char const>();
  void *v1 = 0;
  if (v3)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::operator()[abi:sn180100](v2, v3);
  }
}

uint64_t std::default_delete<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a2);
  }
  return result;
}

uint64_t std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WebCore::MediationRequirement,false>::has_value[abi:sn180100](a1) & 1;
}

void std::optional<WebCore::MediationRequirement>::operator*[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WebCore::MediationRequirement,false>::has_value[abi:sn180100](a1) & 1) == 0) {
    __break(1u);
  }
  std::__to_address[abi:sn180100]<char const>();
}

uint64_t std::__optional_storage_base<WebCore::MediationRequirement,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(unsigned char *)(a1 + 1) & 1;
}

BOOL std::__holds_alternative[abi:sn180100]<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>(uint64_t a1)
{
  return std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::index[abi:sn180100](a1) == 0;
}

uint64_t std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::index[abi:sn180100](uint64_t a1)
{
  return std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::index[abi:sn180100](a1);
}

void std::get[abi:sn180100]<1ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>(uint64_t a1)
{
}

void std::__generic_get[abi:sn180100]<1ul,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>(uint64_t a1)
{
  if (!std::__holds_alternative[abi:sn180100]<1ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>(a1)) {
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  std::__variant_detail::__access::__variant::__get_alt[abi:sn180100]<1ul,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
}

BOOL std::__holds_alternative[abi:sn180100]<1ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>(uint64_t a1)
{
  return std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::index[abi:sn180100](a1) == 1;
}

void std::__variant_detail::__access::__variant::__get_alt[abi:sn180100]<1ul,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>()
{
}

BOOL WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(void *a1)
{
  return *a1 == 0;
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse *)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  return a1;
}

{
  char v3;
  WTF::ThreadLikeAssertion *v4;

  uint64_t v4 = a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::operator=();
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(a1);
  WTF::Function<void ()(WebCore::AuthenticatorAssertionResponse *)>::~Function((uint64_t)a1);
  return a1;
}

WTF::ASCIILiteral *WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(WTF::ASCIILiteral *a1)
{
  return a1;
}

{
  uint64_t *v2;
  uint64_t *v3;

  if (*((_DWORD *)a1 + 3))
  {
    uint64_t v2 = (uint64_t *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    uint64_t v3 = (uint64_t *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>::destruct(v2, v3);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1);
  return a1;
}

WTF::ThreadLikeAssertion *WTF::ThreadLikeAssertion::ThreadLikeAssertion(WTF::ThreadLikeAssertion *a1)
{
  return a1;
}

uint64_t WTF::Function<void ()(WebCore::AuthenticatorAssertionResponse *)>::~Function(uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorAssertionResponse *>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

uint64_t WTF::AnyThreadLike::operator unsigned int()
{
  return 0xFFFFFFFFLL;
}

WTF::ThreadLikeAssertion *WTF::ThreadLikeAssertion::ThreadLikeAssertion(WTF::ThreadLikeAssertion *this)
{
  return this;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorAssertionResponse *>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorAssertionResponse *>>::reset[abi:sn180100](a1, 0);
  return a1;
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorAssertionResponse *>>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v5 = *v2;
  std::to_address[abi:sn180100]<char const>();
  *uint64_t v3 = a2;
  if (v5)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorAssertionResponse *>>::operator()[abi:sn180100](v4, v5);
  }
}

uint64_t std::default_delete<WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorAssertionResponse *>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a2);
  }
  return result;
}

uint64_t *WTF::VectorTypeOperations<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>::destruct(uint64_t *a1, uint64_t *a2)
{
  return WTF::VectorDestructor<true,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>::destruct(a1, a2);
}

uint64_t *WTF::VectorDestructor<true,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>::destruct(uint64_t *result, uint64_t *a2)
{
  for (uint64_t i = result; i != a2; ++i)
    uint64_t result = WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(i);
  return result;
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  return a1;
}

{
  char v3;
  WTF::ThreadLikeAssertion *v4;

  uint64_t v4 = a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::operator=();
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(a1);
  WTF::Function<void ()(WebKit::LocalAuthenticatorPolicy)>::~Function((uint64_t)a1);
  return a1;
}

uint64_t WTF::Function<void ()(WebKit::LocalAuthenticatorPolicy)>::~Function(uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebKit::LocalAuthenticatorPolicy>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebKit::LocalAuthenticatorPolicy>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebKit::LocalAuthenticatorPolicy>>::reset[abi:sn180100]();
  return a1;
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebKit::LocalAuthenticatorPolicy>>::reset[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v3 = *v0;
  std::to_address[abi:sn180100]<char const>();
  void *v1 = 0;
  if (v3)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapperBase<void,WebKit::LocalAuthenticatorPolicy>>::operator()[abi:sn180100](v2, v3);
  }
}

uint64_t std::default_delete<WTF::Detail::CallableWrapperBase<void,WebKit::LocalAuthenticatorPolicy>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a2);
  }
  return result;
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(LAContext *)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  return a1;
}

{
  char v3;
  WTF::ThreadLikeAssertion *v4;

  uint64_t v4 = a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::operator=();
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(a1);
  WTF::Function<void ()(LAContext *)>::~Function((uint64_t)a1);
  return a1;
}

uint64_t WTF::Function<void ()(LAContext *)>::~Function(uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,LAContext *>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapperBase<void,LAContext *>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,LAContext *>>::reset[abi:sn180100]();
  return a1;
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,LAContext *>>::reset[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v3 = *v0;
  std::to_address[abi:sn180100]<char const>();
  void *v1 = 0;
  if (v3)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapperBase<void,LAContext *>>::operator()[abi:sn180100](v2, v3);
  }
}

uint64_t std::default_delete<WTF::Detail::CallableWrapperBase<void,LAContext *>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a2);
  }
  return result;
}

_DWORD *std::min[abi:sn180100]<unsigned int,std::__less<void,void>>(_DWORD *a1, _DWORD *a2)
{
  if (std::__less<void,void>::operator()[abi:sn180100]<unsigned int,unsigned int>((uint64_t)&v5, a2, a1)) {
    return a2;
  }
  else {
    return a1;
  }
}

BOOL std::__less<void,void>::operator()[abi:sn180100]<unsigned int,unsigned int>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 < *a3;
}

uint64_t std::__optional_storage_base<unsigned int,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(unsigned char *)(a1 + 4) & 1;
}

double *std::max[abi:sn180100]<WTF::Seconds>(double *a1, double *a2)
{
  return std::max[abi:sn180100]<WTF::Seconds,std::__less<void,void>>(a1, a2);
}

double WTF::seconds_literals::operator"" _s()
{
  WTF::Seconds::Seconds((WTF::Seconds *)&v1, (double)0);
  return v1;
}

double *std::max[abi:sn180100]<WTF::Seconds,std::__less<void,void>>(double *a1, double *a2)
{
  if (std::__less<void,void>::operator()[abi:sn180100]<WTF::Seconds,WTF::Seconds>((uint64_t)&v5, a1, a2)) {
    return a2;
  }
  else {
    return a1;
  }
}

BOOL std::__less<void,void>::operator()[abi:sn180100]<WTF::Seconds,WTF::Seconds>(uint64_t a1, double *a2, double *a3)
{
  return WTF::Seconds::operator<(a2, *a3);
}

BOOL WTF::Seconds::operator<(double *a1, double a2)
{
  return *a1 < a2;
}

WTF::Seconds *WTF::Seconds::Seconds(WTF::Seconds *this, double a2)
{
  return this;
}

double *WTF::Seconds::Seconds(double *this, double a2)
{
  *this = a2;
  return this;
}

BOOL std::holds_alternative[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1)
{
  return std::__holds_alternative[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a1);
}

void std::get[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1)
{
}

void std::optional<WTF::String>::operator*[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WTF::String,false>::has_value[abi:sn180100](a1) & 1) == 0) {
    __break(1u);
  }
  std::__to_address[abi:sn180100]<char const>();
}

void std::get[abi:sn180100]<WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1)
{
}

BOOL std::__holds_alternative[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1)
{
  return std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a1) == 0;
}

uint64_t std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](uint64_t a1)
{
  return std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a1 + 8);
}

void std::get[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1)
{
}

void std::__generic_get[abi:sn180100]<0ul,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(uint64_t a1)
{
  if (!std::__holds_alternative[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a1)) {
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  std::__variant_detail::__access::__variant::__get_alt[abi:sn180100]<0ul,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>();
}

void std::__variant_detail::__access::__variant::__get_alt[abi:sn180100]<0ul,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>()
{
}

void std::get[abi:sn180100]<1ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1)
{
}

void std::__generic_get[abi:sn180100]<1ul,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(uint64_t a1)
{
  if (!std::__holds_alternative[abi:sn180100]<1ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a1)) {
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  std::__variant_detail::__access::__variant::__get_alt[abi:sn180100]<1ul,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>();
}

BOOL std::__holds_alternative[abi:sn180100]<1ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1)
{
  return std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a1) == 1;
}

void std::__variant_detail::__access::__variant::__get_alt[abi:sn180100]<1ul,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>()
{
}

CFTypeRef *WebCore::ResourceRequest::ResourceRequest(CFTypeRef *this, const String *a2)
{
  return this;
}

{
  WebCore::ResourceRequestBase::ResourceRequestBase((WebCore::ResourceRequestBase *)this, a2);
  WTF::RetainPtr<NSURLRequest>::RetainPtr(this + 24);
  return this;
}

WebCore::SecurityOriginData *WebCore::SecurityOriginData::SecurityOriginData(WebCore::SecurityOriginData *this, const WebCore::SecurityOriginData *a2)
{
  return this;
}

{
  std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::variant[abi:sn180100]((uint64_t)this, (uint64_t)a2);
  return this;
}

WebCore::ResourceRequestBase *WebCore::ResourceRequestBase::ResourceRequestBase(WebCore::ResourceRequestBase *this, const String *a2)
{
  WebCore::ResourceRequestBase::RequestData::RequestData(this, a2);
  WTF::String::String((WebCore::ResourceRequestBase *)((char *)this + 152), a2 + 19);
  WTF::String::String((WebCore::ResourceRequestBase *)((char *)this + 160), a2 + 20);
  m_ptr = (WTF::RefCountedBase *)a2[21].m_impl.m_ptr;
  if (m_ptr) {
    WTF::RefCountedBase::ref(m_ptr);
  }
  *((void *)this + 21) = m_ptr;
  *((String *)this + 22) = a2[22];
  *((unsigned char *)this + 184) = a2[23].m_impl.m_ptr;
  return this;
}

CFTypeRef *WTF::RetainPtr<NSURLRequest>::RetainPtr(CFTypeRef *a1)
{
  return a1;
}

{
  WTF::RetainPtr<NSURLRequest>::RetainPtr(a1);
  return a1;
}

{
  const void *v2;

  std::__to_address[abi:sn180100]<char const>();
  *a1 = v2;
  if (*a1) {
    CFRetain(*a1);
  }
  return a1;
}

WebCore::ResourceRequestBase::RequestData *WebCore::ResourceRequestBase::RequestData::RequestData(WebCore::ResourceRequestBase::RequestData *this, const String *a2)
{
  return this;
}

{
  WTF::URL::URL(this, a2);
  WTF::URL::URL((WebCore::ResourceRequestBase::RequestData *)((char *)this + 40), a2 + 5);
  *((String *)this + 10) = a2[10];
  WTF::String::String((WebCore::ResourceRequestBase::RequestData *)((char *)this + 88), a2 + 11);
  WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::ResourceRequestBase::RequestData *)((char *)this + 96), (const WebCore::HTTPHeaderMap *)&a2[12]);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 128, (uint64_t)&a2[16]);
  *((_DWORD *)this + 36) = a2[18].m_impl.m_ptr;
  *((unsigned char *)this + 148) = BYTE4(a2[18].m_impl.m_ptr);
  return this;
}

WebCore::HTTPHeaderMap *WebCore::HTTPHeaderMap::HTTPHeaderMap(WebCore::HTTPHeaderMap *this, const WebCore::HTTPHeaderMap *a2)
{
  return this;
}

{
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector(this, a2);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector((WebCore::HTTPHeaderMap *)((char *)this + 16), (const WebCore::HTTPHeaderMap *)((char *)a2 + 16));
  return this;
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t a2)
{
  return a1;
}

WTF::ASCIILiteral *WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::Vector(WTF::ASCIILiteral *a1, WTF::ASCIILiteral *a2)
{
  return a1;
}

{
  unint64_t v3;
  int v4;
  WebCore::HTTPHeaderMap::CommonHeader *v5;
  const String *v6;
  uint64_t v7;

  uint64_t v3 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  uint64_t v4 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  WTF::VectorBuffer<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::FastMalloc>::VectorBuffer((uint64_t)a1, v3, v4);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  if (WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1))
  {
    char v5 = (WebCore::HTTPHeaderMap::CommonHeader *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a2);
    uint64_t v6 = (const String *)WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a2);
    uint64_t v7 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::CommonHeader>::uninitializedCopy(v5, v6, v7);
  }
  return a1;
}

WTF::ASCIILiteral *WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::Vector(WTF::ASCIILiteral *a1, WTF::ASCIILiteral *a2)
{
  return a1;
}

{
  unint64_t v3;
  int v4;
  WebCore::HTTPHeaderMap::UncommonHeader *v5;
  const String *v6;
  uint64_t v7;

  uint64_t v3 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  uint64_t v4 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  WTF::VectorBuffer<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::FastMalloc>::VectorBuffer((uint64_t)a1, v3, v4);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  if (WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1))
  {
    char v5 = (WebCore::HTTPHeaderMap::UncommonHeader *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a2);
    uint64_t v6 = (const String *)WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a2);
    uint64_t v7 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::uninitializedCopy(v5, v6, v7);
  }
  return a1;
}

uint64_t WTF::VectorBuffer<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::FastMalloc>::VectorBuffer(uint64_t a1, unint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 12) = a3;
  if (a2) {
    WTF::VectorBufferBase<WebCore::HTTPHeaderMap::CommonHeader,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
  }
  return a1;
}

WebCore::HTTPHeaderMap::CommonHeader *WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::CommonHeader>::uninitializedCopy(WebCore::HTTPHeaderMap::CommonHeader *a1, const String *a2, uint64_t a3)
{
  return WTF::VectorCopier<false,WebCore::HTTPHeaderMap::CommonHeader>::uninitializedCopy<WebCore::HTTPHeaderMap::CommonHeader>(a1, a2, a3);
}

uint64_t WTF::VectorBufferBase<WebCore::HTTPHeaderMap::CommonHeader,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (!WTF::isValidCapacityForVector<WebCore::HTTPHeaderMap::CommonHeader>(a2))
  {
    __break(0xC471u);
    JUMPOUT(0x1987C16A8);
  }
  uint64_t result = WTF::FastMalloc::malloc((WTF::FastMalloc *)(16 * a2));
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)a1 = result;
  return result;
}

BOOL WTF::isValidCapacityForVector<WebCore::HTTPHeaderMap::CommonHeader>(unint64_t a1)
{
  return a1 <= (unint64_t)std::numeric_limits<unsigned int>::max[abi:sn180100]() >> 4;
}

WebCore::HTTPHeaderMap::CommonHeader *WTF::VectorCopier<false,WebCore::HTTPHeaderMap::CommonHeader>::uninitializedCopy<WebCore::HTTPHeaderMap::CommonHeader>(WebCore::HTTPHeaderMap::CommonHeader *result, const String *a2, uint64_t a3)
{
  for (uint64_t i = (const String *)result; i != a2; i += 2)
  {
    uint64_t v3 = (WebCore::HTTPHeaderMap::CommonHeader *)operator new(16, 0, a3);
    uint64_t result = WebCore::HTTPHeaderMap::CommonHeader::CommonHeader(v3, i);
    a3 += 16;
  }
  return result;
}

uint64_t operator new(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

WebCore::HTTPHeaderMap::CommonHeader *WebCore::HTTPHeaderMap::CommonHeader::CommonHeader(WebCore::HTTPHeaderMap::CommonHeader *this, const String *a2)
{
  return this;
}

{
  *(_WORD *)this = a2->m_impl.m_ptr;
  WTF::String::String((WebCore::HTTPHeaderMap::CommonHeader *)((char *)this + 8), a2 + 1);
  return this;
}

WebCore::HTTPHeaderMap::UncommonHeader *WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::uninitializedCopy(WebCore::HTTPHeaderMap::UncommonHeader *a1, const String *a2, uint64_t a3)
{
  return WTF::VectorCopier<false,WebCore::HTTPHeaderMap::UncommonHeader>::uninitializedCopy<WebCore::HTTPHeaderMap::UncommonHeader>(a1, a2, a3);
}

WebCore::HTTPHeaderMap::UncommonHeader *WTF::VectorCopier<false,WebCore::HTTPHeaderMap::UncommonHeader>::uninitializedCopy<WebCore::HTTPHeaderMap::UncommonHeader>(WebCore::HTTPHeaderMap::UncommonHeader *result, const String *a2, uint64_t a3)
{
  for (uint64_t i = (const String *)result; i != a2; i += 2)
  {
    uint64_t v3 = (WebCore::HTTPHeaderMap::UncommonHeader *)operator new(16, 0, a3);
    uint64_t result = WebCore::HTTPHeaderMap::UncommonHeader::UncommonHeader(v3, i);
    a3 += 16;
  }
  return result;
}

WebCore::HTTPHeaderMap::UncommonHeader *WebCore::HTTPHeaderMap::UncommonHeader::UncommonHeader(WebCore::HTTPHeaderMap::UncommonHeader *this, const String *a2)
{
  return this;
}

{
  WTF::String::String(this, a2);
  WTF::String::String((WebCore::HTTPHeaderMap::UncommonHeader *)((char *)this + 8), a2 + 1);
  return this;
}

void WTF::RefCountedBase::ref(WTF::RefCountedBase *this)
{
}

void WTF::RefCountedBase::refAllowingPartiallyDestroyed(WTF::RefCountedBase *this)
{
}

void WTF::RetainPtr<NSURLRequest>::get()
{
}

uint64_t _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSG_1EJS5_SE_EEEENS0_13__valueless_tE(uint64_t a1)
{
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1;
  uint64_t v5 = a2;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  uint64_t result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::valueless_by_exception[abi:sn180100](v5);
  if ((result & 1) == 0)
  {
    uint64_t v4 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::index[abi:sn180100](v5);
    uint64_t result = _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JSQ_SP_EEEDcmSS_DpOT0_(v4, (uint64_t)&v3, v6, v5);
    *(_DWORD *)(v6 + 24) = v4;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JSQ_SP_EEEDcmSS_DpOT0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  v10[3] = a3;
  v10[2] = a4;
  v10[0] = off_1EE9B2FC0[0];
  v10[1] = off_1EE9B2FC8;
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))_ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS6_13ExceptionDataEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSF_1EJSC_SD_EEEELm2EEixB8sn180100Em((uint64_t)v10, a1);
  uint64_t v5 = v11;
  std::__to_address[abi:sn180100]<char const>();
  uint64_t v7 = v6;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v7, v8);
}

WebCore::SecurityOriginData::Tuple *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSC_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSA_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  char v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100IRKNS1_18__copy_constructorISG_LNS1_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS1_5__altILm0ES6_EERKSW_EEEDTclclsr3stdE7declvalISP_EEspclsr3stdE7declvalIT0_EEEESQ_DpOS10_(a1, v3, v4);
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS8_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENSC_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSC_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSA_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1)
{
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  char v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100INS1_18__move_constructorISG_LNS1_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS1_5__altILm1ESF_EESU_EEEDTclclsr3stdE7declvalISN_EEspclsr3stdE7declvalIT0_EEEESO_DpOSW_(a1, v3, v4);
}

WebCore::SecurityOriginData::Tuple *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN7WebCore18SecurityOriginData5TupleENS4_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS4_26OpaqueOriginIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100IRKNS1_18__copy_constructorISG_LNS1_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS1_5__altILm0ES6_EERKSW_EEEDTclclsr3stdE7declvalISP_EEspclsr3stdE7declvalIT0_EEEESQ_DpOS10_(uint64_t a1, WebCore::SecurityOriginData::Tuple *a2, const Tuple *a3)
{
  return _ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_ENKUlRSO_OT0_E_clINS0_5__altILm0ES5_EERKSW_EEDaSQ_SS_(a1, a2, a3);
}

WebCore::SecurityOriginData::Tuple *_ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS3_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_26OpaqueOriginIdentifierTypeENS7_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS7_33SupportsObjectIdentifierNullStateE1EEEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_ENKUlRSO_OT0_E_clINS0_5__altILm0ES5_EERKSW_EEDaSQ_SS_(uint64_t a1, WebCore::SecurityOriginData::Tuple *a2, const Tuple *a3)
{
  uint64_t result = a2;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__construct_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple const&>(a2, a3);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__construct_alt[abi:sn180100]<0ul,WebCore::SecurityOriginData::Tuple,WebCore::SecurityOriginData::Tuple const&>(WebCore::SecurityOriginData::Tuple *a1, const Tuple *a2)
{
}

WebCore::SecurityOriginData::Tuple *std::__variant_detail::__alt<0ul,WebCore::SecurityOriginData::Tuple>::__alt[abi:sn180100]<WebCore::SecurityOriginData::Tuple const&>(WebCore::SecurityOriginData::Tuple *a1, const Tuple *a2)
{
  return a1;
}

{
  WebCore::SecurityOriginData::Tuple::Tuple(a1, a2);
  return a1;
}

WebCore::SecurityOriginData::Tuple *WebCore::SecurityOriginData::Tuple::Tuple(WebCore::SecurityOriginData::Tuple *this, const Tuple *a2)
{
  return this;
}

{
  WTF::String::String(this, &a2->protocol);
  WTF::String::String((WebCore::SecurityOriginData::Tuple *)((char *)this + 8), &a2->host);
  *((_DWORD *)this + 4) = a2->port;
  return this;
}

uint64_t *WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTable(uint64_t *a1, WTF::RefCountedBase *a2)
{
  return a1;
}

{
  *a1 = 0;
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a2);
  *a1 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)a2);
  return a1;
}

void WebCore::ResourceRequest::~ResourceRequest(WebCore::ResourceRequest *this)
{
}

{
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)this + 24);
  WebCore::ResourceRequestBase::~ResourceRequestBase(this);
}

void WebCore::ResourceRequestBase::~ResourceRequestBase(WebCore::ResourceRequestBase *this)
{
  v4[1] = (char *)this + 168;
  v4[0] = 0;
  uint64_t v4[3] = (char *)this + 168;
  uint64_t v4[2] = v4;
  uint64_t v5 = (WTF::RefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 21);
  if (v5) {
    WTF::RefCounted<WebCore::FormData>::deref(v5);
  }
  uint64_t v6 = (char *)this + 160;
  uint64_t v7 = (char *)this + 160;
  v8[1] = (char *)this + 160;
  v8[0] = 0;
  void v8[3] = (char *)this + 160;
  v8[2] = v8;
  uint64_t v9 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 20);
  if (v9) {
    WTF::StringImpl::deref(v9, v2);
  }
  char v10 = (char *)this + 152;
  uint64_t v11 = (char *)this + 152;
  v12[1] = (char *)this + 152;
  v12[0] = 0;
  v12[3] = (char *)this + 152;
  v12[2] = v12;
  uint64_t v13 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 19);
  if (v13) {
    WTF::StringImpl::deref(v13, v3);
  }
  WebCore::ResourceRequestBase::RequestData::~RequestData(this, v3);
}

void WebCore::ResourceRequestBase::RequestData::~RequestData(WebCore::ResourceRequestBase::RequestData *this, void *a2)
{
}

{
  WTF::StringImpl *v3;
  void v4[4];
  WTF::StringImpl *v5;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 128, a2);
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::ResourceRequestBase::RequestData *)((char *)this + 96));
  v4[1] = (char *)this + 88;
  v4[0] = 0;
  uint64_t v4[3] = (char *)this + 88;
  uint64_t v4[2] = v4;
  uint64_t v5 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 11);
  if (v5) {
    WTF::StringImpl::deref(v5, v3);
  }
  WTF::URL::~URL((WebCore::ResourceRequestBase::RequestData *)((char *)this + 40));
  WTF::URL::~URL(this);
}

void WebCore::HTTPHeaderMap::~HTTPHeaderMap(WebCore::HTTPHeaderMap *this)
{
}

{
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WebCore::HTTPHeaderMap *)((char *)this + 16));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector(this);
}

WTF::ASCIILiteral *WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector(WTF::ASCIILiteral *a1)
{
  return a1;
}

{
  WebCore::HTTPHeaderMap::UncommonHeader *v2;
  WebCore::HTTPHeaderMap::UncommonHeader *v3;

  if (*((_DWORD *)a1 + 3))
  {
    uint64_t v2 = (WebCore::HTTPHeaderMap::UncommonHeader *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    char v3 = (WebCore::HTTPHeaderMap::UncommonHeader *)WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(v2, v3);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1);
  return a1;
}

WTF::ASCIILiteral *WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector(WTF::ASCIILiteral *a1)
{
  return a1;
}

{
  WebCore::ExceptionData *v2;
  WebCore::ExceptionData *v3;

  if (*((_DWORD *)a1 + 3))
  {
    uint64_t v2 = (WebCore::ExceptionData *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    char v3 = (WebCore::ExceptionData *)WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::CommonHeader>::destruct(v2, v3);
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1);
  return a1;
}

WTF::RefCountedBase *WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::~HashTable(WTF::RefCountedBase *a1)
{
  return a1;
}

{
  void *v2;

  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  if (*(void *)a1) {
    WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deallocateTable(*(void *)a1, v2);
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deallocateTable(uint64_t a1, void *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 - 4);
  for (unsigned int i = 0; i < v4; ++i)
    WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isDeletedBucket();
  return WTF::FastMalloc::free((WTF::FastMalloc *)(a1 - 16), a2);
}

BOOL WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isDeletedBucket()
{
  std::__to_address[abi:sn180100]<char const>();
  return WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>::isDeletedValue((WTF *)*v0);
}

BOOL WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>::isDeletedValue(WTF *a1)
{
  char v1 = (char)a1;
  std::numeric_limits<unsigned char>::max[abi:sn180100](a1);
  return v1 == -2;
}

uint64_t std::numeric_limits<unsigned char>::max[abi:sn180100](WTF *a1)
{
  return WTF::isIntegralOrPointerType(a1);
}

void *std::make_unique[abi:sn180100]<WebKit::AuthenticatorPresenterCoordinator,WebKit::AuthenticatorManager &,WTF::String,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,WebCore::ClientDataType,WTF::String>(WebKit::AuthenticatorPresenterCoordinator *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, uint64_t a6)
{
  uint64_t v7 = WebKit::AuthenticatorPresenterCoordinator::operator new(a1);
  WebKit::AuthenticatorPresenterCoordinator::AuthenticatorPresenterCoordinator(v7, a2, a3, a4, *a5 & 1, a6);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, v7);
}

uint64_t WebKit::AuthenticatorPresenterCoordinator::operator new(WebKit::AuthenticatorPresenterCoordinator *this)
{
  return WTF::fastMalloc((WTF *)0x70);
}

WTF::RefCountedBase *WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::~HashSet(WTF::RefCountedBase *a1)
{
  return a1;
}

{
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::~HashTable(a1);
  return a1;
}

void WTF::RunLoop::Timer::~Timer(WTF::RunLoop::Timer *this)
{
}

{
  *(void ++*(_DWORD *)this = &unk_1EE9B3390;
  WTF::Function<void ()(void)>::~Function((uint64_t)this + 24);
  WTF::RunLoop::TimerBase::~TimerBase(this);
}

{
  void *v2;

  WTF::RunLoop::Timer::~Timer(this);
  WTF::FastMalloc::free(this, v2);
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  return a1;
}

{
  char v3;
  WTF::ThreadLikeAssertion *v4;

  unsigned int v4 = a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::operator=();
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(a1);
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)a1);
  return a1;
}

WTF::RefCountedBase *WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::~HashTable(WTF::RefCountedBase *a1)
{
  return a1;
}

{
  void *v2;

  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  if (*(void *)a1) {
    WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::deallocateTable(*(void *)a1, v2);
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::deallocateTable(uint64_t a1, void *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 - 4);
  for (unsigned int i = 0; i < v4; ++i)
  {
    if (!WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isDeletedBucket()) {
      WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::~Ref((uint64_t *)(a1 + 8 * i));
    }
  }
  return WTF::FastMalloc::free((WTF::FastMalloc *)(a1 - 16), a2);
}

BOOL WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isDeletedBucket()
{
  std::__to_address[abi:sn180100]<char const>();
  return WTF::SimpleClassHashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>::isDeletedValue(v0);
}

uint64_t *WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::~Ref(uint64_t *a1)
{
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  unsigned int v4 = a1;
  uint64_t v5 = a1;
  char v3 = 0;
  uint64_t v2 = 0;
  uint64_t v7 = a1;
  uint64_t v6 = &v2;
  char v3 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v3)
  {
    uint64_t v8 = v3;
    WTF::RefCounted<WebKit::Authenticator>::deref((WTF::RefCountedBase *)(v3 + 8));
  }
  return v5;
}

BOOL WTF::SimpleClassHashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>::isDeletedValue(uint64_t *a1)
{
  return WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::isHashTableDeletedValue(a1);
}

BOOL WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::isHashTableDeletedValue(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return v1 == WTF::RawPtrTraits<WebKit::Authenticator>::hashTableDeletedValue();
}

uint64_t WTF::RawPtrTraits<WebKit::Authenticator>::hashTableDeletedValue()
{
  return WTF::bitwise_cast<WebKit::Authenticator *,unsigned long>();
}

uint64_t WTF::bitwise_cast<WebKit::Authenticator *,unsigned long>()
{
  uint64_t __src = -1;
  memcpy(&v1, &__src, sizeof(v1));
  return v1;
}

uint64_t WTF::RefCounted<WebKit::Authenticator>::deref(WTF::RefCountedBase *a1)
{
  uint64_t result = WTF::RefCountedBase::derefBase(a1);
  if (result)
  {
    uint64_t result = (uint64_t)a1 - 8;
    if (a1 != (WTF::RefCountedBase *)8) {
      return (*(uint64_t (**)(void))(*(void *)result + 8))();
    }
  }
  return result;
}

uint64_t WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function(uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::reset[abi:sn180100](a1, 0);
  return a1;
}

uint64_t *WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(uint64_t *a1)
{
  return a1;
}

uint64_t *WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(uint64_t *a1)
{
  return a1;
}

{
  void v4[4];
  WTF::ThreadSafeRefCountedBase *v5;
  uint64_t *v6;
  uint64_t *v7;

  if (WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(a1))
  {
    uint64_t v6 = a1;
    uint64_t v7 = a1;
    WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::clear(*a1);
  }
  v4[1] = a1;
  v4[0] = 0;
  uint64_t v4[3] = a1;
  uint64_t v4[2] = v4;
  uint64_t v5 = (WTF::ThreadSafeRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v5) {
    WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(v5);
  }
  return a1;
}

uint64_t WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::clear(uint64_t result)
{
  *(void *)(result + 8) = 0;
  return result;
}

void std::exchange[abi:sn180100]<WTF::Function<void ()(WTF::String const&)>,decltype(nullptr)>(void *a1, uint64_t a2)
{
  WTF::Function<void ()(WTF::String const&)>::operator=(a2);
}

uint64_t WTF::Function<void ()(WTF::String const&)>::operator()()
{
  uint64_t v0 = *(void *)std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t WTF::Function<void ()(WTF::String const&)>::~Function(uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

void WTF::Function<void ()(WTF::String const&)>::operator=(uint64_t a1)
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>::operator=[abi:sn180100](a1);
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>::operator=[abi:sn180100](uint64_t a1)
{
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v5 = *v2;
  std::to_address[abi:sn180100]<char const>();
  *char v3 = a2;
  if (v5)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>::operator()[abi:sn180100](v4, v5);
  }
}

uint64_t std::default_delete<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a2);
  }
  return result;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>::reset[abi:sn180100](a1, 0);
  return a1;
}

uint64_t WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF *a2, WTF *a3)
{
  uint64_t v8 = a2;
  uint64_t v9 = a3;
  v7[2] = a1;
  uint64_t v4 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::end(a1);
  v7[1] = v5;
  v7[0] = v4;
  uint64_t result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator==(&v8, (uint64_t)v7);
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    WTF::isIntegralOrPointerType((WTF *)result);
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::removeWithoutEntryConsistencyCheck(a1, v8, v9);
  }
  return result;
}

uint64_t WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::find(uint64_t *a1, unsigned __int8 *a2)
{
  void v5[3] = a1;
  void v5[2] = a2;
  uint64_t v2 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::find(a1, a2);
  v5[1] = v3;
  v5[0] = v2;
  WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::HashTableConstIteratorAdapter(&v6, v5);
  return v6;
}

BOOL WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator==(void *a1, uint64_t a2)
{
  v6[3] = a1;
  void v6[2] = a2;
  uint64_t v3 = WTF::HashTableIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>(a2);
  v6[1] = v4;
  v6[0] = v3;
  return WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator==(a1, v6);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::end(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unsigned int v3 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::makeKnownGoodIterator(a1, v2 + v3);
}

{
  uint64_t v2;
  unsigned int v3;

  uint64_t v2 = *a1;
  unsigned int v3 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::makeKnownGoodConstIterator(a1, v2 + v3);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::removeWithoutEntryConsistencyCheck(uint64_t *a1, WTF *a2, WTF *a3)
{
  v8[0] = a2;
  v8[1] = a3;
  v7[2] = a1;
  uint64_t v4 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::end(a1);
  v7[1] = v5;
  v7[0] = v4;
  uint64_t result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator==(v8, (uint64_t)v7);
  if ((result & 1) == 0) {
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::removeAndInvalidateWithoutEntryConsistencyCheck((WTF::RefCountedBase *)a1, v8[0]);
  }
  return result;
}

BOOL WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator==(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t WTF::HashTableIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::makeKnownGoodIterator(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unsigned int v5 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  WTF::HashTableIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableIterator(&v7, (uint64_t)a1, a2, v4 + v5);
  return v7;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(void *a1)
{
  if (*a1) {
    return *(unsigned int *)(*a1 - 4);
  }
  else {
    return 0;
  }
}

void *WTF::HashTableIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableIterator(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

{
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableConstIterator(a1, a2, a3, a4);
  return a1;
}

void *WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableConstIterator(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

{
  *a1 = a3;
  a1[1] = a4;
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  return a1;
}

{
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableConstIterator(a1, a2, a3, a4);
  return a1;
}

{
  *a1 = a3;
  a1[1] = a4;
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::skipEmptyBuckets(a1);
  return a1;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::removeAndInvalidateWithoutEntryConsistencyCheck(WTF::RefCountedBase *a1, WTF *a2)
{
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::remove(a1, a2);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::remove(WTF *a1, WTF *a2)
{
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deleteBucket(a2);
  int v3 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deletedCount(a1);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setDeletedCount(a1, v3 + 1);
  int v4 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a1);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setKeyCount(a1, v4 - 1);
  uint64_t shouldShrink = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::shouldShrink(a1);
  if (shouldShrink) {
    uint64_t shouldShrink = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::shrink(a1);
  }
  return WTF::isIntegralOrPointerType((WTF *)shouldShrink);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deleteBucket(WTF *a1)
{
  return WTF::hashTraitsDeleteBucket<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WebCore::AuthenticatorTransport>(a1);
}

void *WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setDeletedCount(void *result, int a2)
{
  *(_DWORD *)(*result - 16) = a2;
  return result;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deletedCount(void *a1)
{
  return *(unsigned int *)(*a1 - 16);
}

void *WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setKeyCount(void *result, int a2)
{
  *(_DWORD *)(*result - 12) = a2;
  return result;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(void *a1)
{
  if (*a1) {
    return *(unsigned int *)(*a1 - 12);
  }
  else {
    return 0;
  }
}

BOOL WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::shouldShrink(void *a1)
{
  unsigned int v2 = 6
     * WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a1);
  unsigned int v3 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  BOOL v4 = 0;
  if (v2 < v3) {
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1) > 8;
  }
  return v4;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::shrink(WTF *a1)
{
  unsigned int v2 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::rehash(a1, v2 >> 1, 0);
}

uint64_t WTF::hashTraitsDeleteBucket<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WebCore::AuthenticatorTransport>(WTF *a1)
{
  return WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>::constructDeletedValue(a1);
}

uint64_t WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>::constructDeletedValue(WTF *a1)
{
  uint64_t result = std::numeric_limits<unsigned char>::max[abi:sn180100](a1);
  *(unsigned char *)a1 = -2;
  return result;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::rehash(WTF *a1, unsigned int a2, unsigned char *a3)
{
  WTF::isIntegralOrPointerType(a1);
  int v12 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  uint64_t v11 = *(void *)a1;
  int v10 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a1);
  *(void *)a1 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::allocateTable(a2);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setTableSize(a1, a2);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setTableSizeMask(a1, a2 - 1);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setDeletedCount(a1, 0);
  uint64_t isDeletedBucket = (uint64_t)WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setKeyCount(a1, v10);
  uint64_t v9 = 0;
  for (unsigned int i = 0; i != v12; ++i)
  {
    uint64_t v7 = (unsigned char *)(v11 + i);
    uint64_t isDeletedBucket = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isDeletedBucket();
    if ((isDeletedBucket & 1) == 0)
    {
      uint64_t isDeletedBucket = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmptyBucket();
      if ((isDeletedBucket & 1) == 0)
      {
        WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isReleasedWeakBucket();
        uint64_t isDeletedBucket = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::reinsert((uint64_t *)a1, v7);
        if (v7 == a3) {
          uint64_t v9 = isDeletedBucket;
        }
      }
    }
  }
  if (v11) {
    uint64_t isDeletedBucket = WTF::FastMalloc::free((WTF::FastMalloc *)(v11 - 16), v5);
  }
  WTF::isIntegralOrPointerType((WTF *)isDeletedBucket);
  return v9;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::allocateTable(unsigned int a1)
{
  uint64_t v3 = WTF::FastMalloc::malloc((WTF::FastMalloc *)(a1 + 16)) + 16;
  for (unsigned int i = 0; i < a1; ++i)
    WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::initializeBucket(v3 + i);
  return v3;
}

void *WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setTableSize(void *result, int a2)
{
  *(_DWORD *)(*result - 4) = a2;
  return result;
}

void *WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setTableSizeMask(void *result, int a2)
{
  *(_DWORD *)(*result - 8) = a2;
  return result;
}

BOOL WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmptyBucket()
{
  std::__to_address[abi:sn180100]<char const>();
  return WTF::isHashTraitsEmptyValue<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WebCore::AuthenticatorTransport>(v0);
}

void WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isReleasedWeakBucket()
{
  std::__to_address[abi:sn180100]<char const>();
  WTF::isHashTraitsReleasedWeakValue<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WebCore::AuthenticatorTransport>(v0);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::reinsert(uint64_t *a1, unsigned char *a2)
{
  std::__to_address[abi:sn180100]<char const>();
  uint64_t v5 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::lookupForReinsert(a1, v3);
  *(unsigned char *)operator new(1, 0, v5) = *a2;
  return v5;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::initializeBucket(uint64_t a1)
{
  return WTF::HashTableBucketInitializer<false>::initialize<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WebCore::AuthenticatorTransport>(a1);
}

uint64_t WTF::HashTableBucketInitializer<false>::initialize<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WebCore::AuthenticatorTransport>(uint64_t a1)
{
  return WTF::GenericHashTraits<WebCore::AuthenticatorTransport>::constructEmptyValue<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>(a1);
}

uint64_t WTF::GenericHashTraits<WebCore::AuthenticatorTransport>::constructEmptyValue<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>(uint64_t a1)
{
  uint64_t v1 = (WTF *)operator new(1, 0, a1);
  uint64_t result = WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>::emptyValue(v1);
  *(unsigned char *)uint64_t v1 = -1;
  return result;
}

uint64_t WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>::emptyValue(WTF *a1)
{
  return std::numeric_limits<unsigned char>::max[abi:sn180100](a1);
}

BOOL WTF::isHashTraitsEmptyValue<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WebCore::AuthenticatorTransport>(WTF *a1)
{
  return WTF::HashTraitsEmptyValueChecker<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,false>::isEmptyValue<WebCore::AuthenticatorTransport>(a1);
}

BOOL WTF::HashTraitsEmptyValueChecker<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,false>::isEmptyValue<WebCore::AuthenticatorTransport>(WTF *a1)
{
  char v1 = *(unsigned char *)a1;
  WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>::emptyValue(a1);
  return v1 == -1;
}

void WTF::isHashTraitsReleasedWeakValue<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WebCore::AuthenticatorTransport>(WTF::RefCountedBase *a1)
{
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::lookupForReinsert(uint64_t *a1, unsigned __int8 *a2)
{
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a1, a2);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(uint64_t *a1, unsigned __int8 *a2)
{
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  uint64_t v7 = *a1;
  int v6 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSizeMask(a1);
  unsigned int v5 = WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>::hash<WebCore::AuthenticatorTransport>(a2) & v6;
  int v4 = 0;
  while (!WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmptyBucket())
  {
    ++v4;
    unsigned int v5 = (v5 + v4) & v6;
  }
  return v7 + v5;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSizeMask(void *a1)
{
  if (*a1) {
    return *(unsigned int *)(*a1 - 8);
  }
  else {
    return 0;
  }
}

uint64_t WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>::hash<WebCore::AuthenticatorTransport>(unsigned __int8 *a1)
{
  return WTF::IntHash<WebCore::AuthenticatorTransport>::hash(*a1);
}

uint64_t WTF::IntHash<WebCore::AuthenticatorTransport>::hash(unsigned __int8 a1)
{
  return WTF::intHash((WTF *)a1);
}

uint64_t WTF::intHash(WTF *this)
{
  return (((9
          * ((this + ~(this << 15)) ^ ((this
                                                                                      + ~(this << 15)) >> 10))) ^ ((9 * ((this + ~(this << 15)) ^ ((this + ~(this << 15)) >> 10))) >> 6))
        + ~(((9
            * ((this + ~(this << 15)) ^ ((this
                                                                                        + ~(this << 15)) >> 10))) ^ ((9 * ((this + ~(this << 15)) ^ ((this + ~(this << 15)) >> 10))) >> 6)) << 11)) ^ ((((9 * ((this + ~(this << 15)) ^ ((this + ~(this << 15)) >> 10))) ^ ((9 * ((this + ~(this << 15)) ^ ((this + ~(this << 15)) >> 10))) >> 6)) + ~(((9 * ((this + ~(this << 15)) ^ ((this + ~(this << 15)) >> 10))) ^ ((9 * ((this + ~(this << 15)) ^ ((this + ~(this << 15)) >> 10))) >> 6)) << 11)) >> 16);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::find(uint64_t *a1, unsigned __int8 *a2)
{
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::find<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a1, a2);
}

void *WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::HashTableConstIteratorAdapter(void *a1, void *a2)
{
  return a1;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::find<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(uint64_t *a1, unsigned __int8 *a2)
{
  if (!*a1) {
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::end(a1);
  }
  uint64_t v5 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::lookup<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a1, a2);
  if (v5) {
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::makeKnownGoodConstIterator(a1, v5);
  }
  else {
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::end(a1);
  }
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::lookup<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(uint64_t *a1, unsigned __int8 *a2)
{
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  uint64_t v8 = *a1;
  if (!*a1) {
    return 0;
  }
  int v7 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSizeMask(a1);
  unsigned int v6 = WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>::hash<WebCore::AuthenticatorTransport>(a2) & v7;
  for (i = 0; ; unsigned int v6 = (v6 + i) & v7)
  {
    std::__to_address[abi:sn180100]<char const>();
    if (WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>::equal<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport>(v3, (char *)a2))
    {
      return v8 + v6;
    }
    if (WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmptyBucket()) {
      break;
    }
    ++i;
  }
  return 0;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::makeKnownGoodConstIterator(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unsigned int v5 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableConstIterator(&v7, (uint64_t)a1, a2, v4 + v5);
  return v7;
}

BOOL WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>::equal<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport>(char *a1, char *a2)
{
  return WTF::IntHash<WebCore::AuthenticatorTransport>::equal(*a1, *a2);
}

BOOL WTF::IntHash<WebCore::AuthenticatorTransport>::equal(char a1, char a2)
{
  return a1 == a2;
}

void *WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::HashTableConstIteratorAdapter(void *result, void *a2)
{
  *uint64_t result = *a2;
  result[1] = a2[1];
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>::~CallableWrapper(uint64_t a1)
{
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>::~CallableWrapper((uint64_t)a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>::call(uint64_t a1)
{
  return std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>::operator()[abi:sn180100]<>(a1 + 8);
}

void WTF::Detail::CallableWrapperBase<void>::~CallableWrapperBase()
{
}

{
  __break(1u);
}

uint64_t std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>::operator()[abi:sn180100]<>(uint64_t a1)
{
  return std::__apply_functor[abi:sn180100]<void (WebKit::AuthenticatorManager::*)(void),std::tuple<WebKit::AuthenticatorManager*>,0ul,std::tuple<>>(a1);
}

uint64_t std::__apply_functor[abi:sn180100]<void (WebKit::AuthenticatorManager::*)(void),std::tuple<WebKit::AuthenticatorManager*>,0ul,std::tuple<>>(uint64_t a1)
{
  std::to_address[abi:sn180100]<char const>();
  WTF::ThreadLikeAssertion::operator=();
  return _ZNSt3__18__invokeB8sn180100IRMN6WebKit20AuthenticatorManagerEFvvERPS2_JEvEEDTcldsdeclsr3stdE7declvalIT0_EEclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT1_EEEEOS9_OS8_DpOSA_(a1, v2);
}

uint64_t _ZNSt3__18__invokeB8sn180100IRMN6WebKit20AuthenticatorManagerEFvvERPS2_JEvEEDTcldsdeclsr3stdE7declvalIT0_EEclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT1_EEEEOS9_OS8_DpOSA_(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(void *, void *))a1;
  uint64_t v4 = (void *)(*a2 + (v2 >> 1));
  if (v2) {
    uint64_t v3 = *(uint64_t (**)(void *, void *))(*v4 + v3);
  }
  return v3(v4, a2);
}

uint64_t WTF::VectorTypeOperations<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::destruct(uint64_t a1, uint64_t a2)
{
  return WTF::VectorDestructor<true,WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::destruct(a1, a2);
}

uint64_t WTF::VectorDestructor<true,WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::destruct(uint64_t result, uint64_t a2)
{
  for (uint64_t i = result; i != a2; i += 8)
    uint64_t result = WTF::UniqueRef<WebKit::AuthenticatorTransportService>::~UniqueRef(i);
  return result;
}

uint64_t WTF::UniqueRef<WebKit::AuthenticatorTransportService>::~UniqueRef(uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WebKit::AuthenticatorTransportService>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

uint64_t std::unique_ptr<WebKit::AuthenticatorTransportService>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WebKit::AuthenticatorTransportService>::reset[abi:sn180100]();
  return a1;
}

void std::unique_ptr<WebKit::AuthenticatorTransportService>::reset[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v3 = *v0;
  std::to_address[abi:sn180100]<char const>();
  void *v1 = 0;
  if (v3)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WebKit::AuthenticatorTransportService>::operator()[abi:sn180100](v2, v3);
  }
}

uint64_t std::default_delete<WebKit::AuthenticatorTransportService>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a2);
  }
  return result;
}

BOOL WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL()
{
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator BOOL[abi:sn180100]();
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>,WebKit::AuthenticatorManager::clearStateAsync(void)::$_0>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B3030;
  WebKit::AuthenticatorManager::clearStateAsync(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

uint64_t *WebKit::AuthenticatorManager::clearStateAsync(void)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B3030;
  WebKit::AuthenticatorManager::clearStateAsync(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::clearStateAsync(void)::$_0,void>::call(uint64_t a1)
{
}

void WebKit::AuthenticatorManager::clearStateAsync(void)::$_0::operator()(uint64_t *a1)
{
  if (!WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1))
  {
    uint64_t v2 = (WebKit::AuthenticatorManager *)WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    WebKit::AuthenticatorManager::clearState(v2);
  }
}

uint64_t WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(uint64_t *a1)
{
  return WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get(a1);
}

BOOL WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::operator BOOL(uint64_t a1)
{
  return *(void *)(a1 + 8) != 0;
}

uint64_t WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get(uint64_t *a1)
{
  if (WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(a1)) {
    return std::span<char const,18446744073709551615ul>::size[abi:sn180100](*a1);
  }
  else {
    return 0;
  }
}

void WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::clear(WTF::RefCountedBase *a1)
{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  if (*(void *)a1)
  {
    uint64_t v2 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)a1);
    WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::deallocateTable(v2, v3);
  }
}

void WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF::ASCIILiteral *a1)
{
  if (WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)a1))
  {
    if (WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a1)) {
      WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, 0);
    }
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
    uint64_t v2 = (WTF::FastMalloc *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::deallocateBuffer((uint64_t)a1, v2);
    WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  }
}

void WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(WTF::ASCIILiteral *a1, uint64_t a2)
{
  int v5 = a2;
  uint64_t v3 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1)
     + 8 * a2;
  uint64_t v4 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
  WTF::VectorTypeOperations<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::destruct(v3, v4);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  *((_DWORD *)a1 + 3) = v5;
}

BOOL WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::shouldReallocateBuffer(uint64_t a1, uint64_t a2)
{
  BOOL v2 = 0;
  if (*(_DWORD *)(a1 + 8)) {
    return a2 != 0;
  }
  return v2;
}

uint64_t WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::reallocateBuffer(WTF *a1, unint64_t a2)
{
  std::numeric_limits<unsigned char>::max[abi:sn180100](a1);
  if (a2 > 0x1FFFFFFFFFFFFFFFLL)
  {
    __break(0xC471u);
    JUMPOUT(0x1987C515CLL);
  }
  *((_DWORD *)a1 + 2) = a2;
  uint64_t result = WTF::FastMalloc::realloc(*(WTF::FastMalloc **)a1, (void *)(8 * a2));
  *(void *)a1 = result;
  return result;
}

uint64_t WTF::FastMalloc::realloc(WTF::FastMalloc *this, void *a2)
{
  return WTF::fastRealloc(this, a2);
}

uint64_t WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (!WTF::isValidCapacityForVector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>(a2))
  {
    __break(0xC471u);
    JUMPOUT(0x1987C5204);
  }
  uint64_t result = WTF::FastMalloc::malloc((WTF::FastMalloc *)(8 * a2));
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)a1 = result;
  return result;
}

BOOL WTF::isValidCapacityForVector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>(unint64_t a1)
{
  return a1 <= (unint64_t)std::numeric_limits<unsigned int>::max[abi:sn180100]() >> 3;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::add(uint64_t a1, WTF::RefCountedBase *a2, uint64_t a3)
{
  uint64_t v18 = a2;
  uint64_t v17 = a3;
  std::__to_address[abi:sn180100]<char const>();
  uint64_t v16 = v17;
  CFTypeRef v32 = a2;
  uint64_t v31 = v5;
  uint64_t v30 = (uint64_t **)&v16;
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a2);
  if (!*(void *)a2) {
    unsigned int v6 = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::expand(a2, 0);
  }
  WTF::isIntegralOrPointerType((WTF *)v6);
  uint64_t v29 = 0;
  uint64_t v29 = *(void *)a2;
  int v28 = 0;
  int v28 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSizeMask(a2);
  int v27 = 0;
  int v27 = WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::hash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(v31);
  unsigned int v26 = v27 & v28;
  int v25 = 0;
  long long v24 = 0;
  long long v23 = 0;
  while (1)
  {
    long long v23 = (uint64_t *)(v29 + 8 * v26);
    if (WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isEmptyBucket()) {
      break;
    }
    if (WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isDeletedBucket())
    {
      long long v24 = v23;
    }
    else
    {
      std::__to_address[abi:sn180100]<char const>();
      if (WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::equal<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(v7, v31))
      {
        uint64_t KnownGoodIterator = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::makeKnownGoodIterator((uint64_t *)a2, (uint64_t)v23);
        uint64_t v22 = v9;
        uint64_t v21 = KnownGoodIterator;
        return WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>>::HashTableAddResult(a1, KnownGoodIterator, v9, 0);
      }
    }
    ++v25;
    unsigned int v26 = (v26 + v25) & v28;
  }
  if (v24)
  {
    WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::initializeBucket(v24);
    long long v23 = (uint64_t *)v24;
    int v11 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deletedCount(a2);
    WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setDeletedCount(a2, v11 - 1);
  }
  WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::translate<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::add(WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>&&)::{lambda(void)#1}>(v23, v31, v30);
  int v12 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a2);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setKeyCount(a2, v12 + 1);
  shouldExpand = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::shouldExpand(a2);
  if (shouldExpand)
  {
    shouldExpand = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::expand(a2, v23);
    long long v23 = shouldExpand;
  }
  WTF::isIntegralOrPointerType((WTF *)shouldExpand);
  uint64_t v14 = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::makeKnownGoodIterator((uint64_t *)a2, (uint64_t)v23);
  uint64_t v20 = v15;
  uint64_t v19 = v14;
  return WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>>::HashTableAddResult(a1, v14, v15, 1);
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::expand(WTF *a1, uint64_t *a2)
{
  unsigned int v4 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  if (!v4) {
    return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::rehash(a1, 8u, a2);
  }
  if (WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::mustRehashInPlace(a1)) {
    return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::rehash(a1, v4, a2);
  }
  return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::rehash(a1, 2 * v4, a2);
}

unint64_t WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::hash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(uint64_t a1)
{
  return WTF::PtrHashBase<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,true>::hash(a1);
}

BOOL WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isEmptyBucket()
{
  std::__to_address[abi:sn180100]<char const>();
  return WTF::isHashTraitsEmptyValue<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(v0);
}

BOOL WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::equal<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(uint64_t a1, uint64_t a2)
{
  return WTF::PtrHashBase<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,true>::equal(a1, a2);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::makeKnownGoodIterator(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unsigned int v5 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  WTF::HashTableIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableIterator(&v7, (uint64_t)a1, a2, v4 + 8 * v5);
  return v7;
}

uint64_t WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>>::HashTableAddResult(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>>::HashTableAddResult(a1, a2, a3, a4 & 1);
}

void *WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::initializeBucket(void *a1)
{
  return WTF::HashTableBucketInitializer<true>::initialize<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a1);
}

uint64_t *WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::translate<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::add(WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>&&)::{lambda(void)#1}>(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  void v5[3] = (uint64_t)a1;
  void v5[2] = a2;
  v5[1] = (uint64_t)a3;
  v5[5] = (uint64_t)v5;
  void v5[4] = (uint64_t)a3;
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(v5, *a3);
  WTF::GenericHashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>::assignToEmpty<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a1, v5);
  return WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::~Ref(v5);
}

BOOL WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::shouldExpand(void *a1)
{
  int v2 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a1);
  uint64_t v3 = v2
     + WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deletedCount(a1);
  unsigned int v4 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  return WTF::HashTableCapacityForSize<1u>::shouldExpand(v3, v4);
}

BOOL WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::mustRehashInPlace(void *a1)
{
  unsigned int v2 = 6
     * WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a1);
  return v2 < 2
            * WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::rehash(WTF *a1, unsigned int a2, uint64_t *a3)
{
  WTF::isIntegralOrPointerType(a1);
  int v13 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  uint64_t v12 = *(void *)a1;
  int v11 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a1);
  *(void *)a1 = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::allocateTable(a2);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setTableSize(a1, a2);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setTableSizeMask(a1, a2 - 1);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setDeletedCount(a1, 0);
  uint64_t isDeletedBucket = (WTF *)WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setKeyCount(a1, v11);
  int v10 = 0;
  for (unsigned int i = 0; i != v13; ++i)
  {
    uint64_t v8 = (uint64_t *)(v12 + 8 * i);
    uint64_t isDeletedBucket = (WTF *)WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isDeletedBucket();
    if ((isDeletedBucket & 1) == 0)
    {
      if (WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isEmptyBucket())
      {
        uint64_t isDeletedBucket = (WTF *)WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::~Ref((uint64_t *)(v12 + 8 * i));
      }
      else
      {
        WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isReleasedWeakBucket();
        uint64_t v7 = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::reinsert((uint64_t *)a1, v8);
        uint64_t isDeletedBucket = (WTF *)WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::~Ref(v8);
        if (v8 == a3) {
          int v10 = v7;
        }
      }
    }
  }
  if (v12) {
    uint64_t isDeletedBucket = (WTF *)WTF::FastMalloc::free((WTF::FastMalloc *)(v12 - 16), v5);
  }
  WTF::isIntegralOrPointerType(isDeletedBucket);
  return v10;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::allocateTable(unsigned int a1)
{
  return WTF::FastMalloc::zeroedMalloc((WTF::FastMalloc *)(8 * a1 + 16)) + 16;
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::reinsert(uint64_t *a1, uint64_t *a2)
{
  std::__to_address[abi:sn180100]<char const>();
  unsigned int v6 = (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::lookupForReinsert(a1, v3);
  WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::~Ref(v6);
  unsigned int v4 = (uint64_t *)operator new(8, 0, (uint64_t)v6);
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(v4, a2);
  return v6;
}

uint64_t WTF::FastMalloc::zeroedMalloc(WTF::FastMalloc *this)
{
  return WTF::fastZeroedMalloc(this);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::lookupForReinsert(uint64_t *a1, uint64_t a2)
{
  return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a1, a2);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(uint64_t *a1, uint64_t a2)
{
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  uint64_t v7 = *a1;
  int v6 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSizeMask(a1);
  unsigned int v5 = WTF::IdentityHashTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::hash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a2) & v6;
  int v4 = 0;
  while (!WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isEmptyBucket())
  {
    ++v4;
    unsigned int v5 = (v5 + v4) & v6;
  }
  return v7 + 8 * v5;
}

unint64_t WTF::PtrHashBase<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,true>::hash(uint64_t a1)
{
  char v1 = (WTF *)WTF::getPtr<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a1);
  return WTF::PtrHashBase<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,true>::hash(v1);
}

unint64_t WTF::PtrHashBase<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,true>::hash(WTF *a1)
{
  return WTF::IntHash<unsigned long>::hash(a1);
}

uint64_t WTF::getPtr<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(uint64_t a1)
{
  return WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::impl(a1);
}

BOOL WTF::isHashTraitsEmptyValue<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(WTF *a1)
{
  return WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,true>::isEmptyValue<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a1);
}

BOOL WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,true>::isEmptyValue<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(WTF *a1)
{
  return WTF::RefHashTraits<WebKit::Authenticator>::isEmptyValue(a1);
}

BOOL WTF::RefHashTraits<WebKit::Authenticator>::isEmptyValue(WTF *a1)
{
  return WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::isHashTableEmptyValue(a1);
}

BOOL WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::isHashTableEmptyValue(WTF *a1)
{
  uint64_t v1 = *(void *)a1;
  WTF::isIntegralOrPointerType(a1);
  return v1 == 0;
}

BOOL WTF::PtrHashBase<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,true>::equal(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = WTF::getPtr<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a1);
  return v2 == WTF::getPtr<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a2);
}

{
  return WTF::getPtr<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a1) == a2;
}

uint64_t WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>>::HashTableAddResult(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  *(unsigned char *)(result + 16) = a4 & 1;
  return result;
}

void *WTF::HashTableBucketInitializer<true>::initialize<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(void *a1)
{
  return memset(a1, 0, 8uLL);
}

uint64_t *WTF::GenericHashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>::assignToEmpty<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(uint64_t *a1, uint64_t *a2)
{
  return WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::operator=(a1, a2);
}

uint64_t *WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(v4, a2);
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v4);
  return WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::~Ref(v4);
}

BOOL WTF::HashTableCapacityForSize<1u>::shouldExpand(uint64_t a1, unint64_t a2)
{
  if (a2 > 0x400) {
    return 2 * a1 >= a2;
  }
  else {
    return 4 * a1 >= 3 * a2;
  }
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>,WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0>(void *a1, unsigned char *a2)
{
  uint64_t v3 = WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(uint64_t a1, unsigned char *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>::CallableWrapperBase((void *)a1);
  *(void *)a1 = &unk_1EE9B3058;
  *(unsigned char *)(a1 + 8) = *a2;
  return a1;
}

void *WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>::CallableWrapperBase(void *result)
{
  *uint64_t result = &unk_1EE9B3080;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(uint64_t a1)
{
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper((uint64_t)a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::call(uint64_t a1, API::WebAuthenticationPanel *a2)
{
  return WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0::operator()((unsigned __int8 *)(a1 + 8), a2);
}

void WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>::~CallableWrapperBase()
{
}

{
  __break(1u);
}

uint64_t WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0::operator()(unsigned __int8 *a1, API::WebAuthenticationPanel *a2)
{
  uint64_t v3 = API::WebAuthenticationPanel::client(a2);
  return (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *a1);
}

uint64_t API::WebAuthenticationPanel::client(API::WebAuthenticationPanel *this)
{
  return WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x18);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B30A8;
  WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

uint64_t *WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  a1[1] = a2[1];
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B30A8;
  WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0::operator()(a1 + 8);
}

uint64_t WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0::operator()(uint64_t a1)
{
  uint64_t result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!((void *)a1);
  if ((result & 1) == 0)
  {
    uint64_t v3 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->((uint64_t *)a1);
    return WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>((WTF *)(v3 + 840), *(WTF **)(a1 + 8));
  }
  return result;
}

uint64_t WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(WTF *a1, WTF *a2)
{
  uint64_t v3 = (uint64_t *)WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::find<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a1, a2);
  return WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::remove((uint64_t *)a1, v3, v4) & 1;
}

uint64_t WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::remove(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v9 = a2;
  int v10 = a3;
  v8[2] = a1;
  uint64_t v4 = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::end(a1);
  v8[1] = v5;
  v8[0] = v4;
  BOOL v6 = WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator==(&v9, (uint64_t)v8);
  if (v6)
  {
    char v11 = 0;
  }
  else
  {
    WTF::isIntegralOrPointerType((WTF *)v6);
    WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::removeWithoutEntryConsistencyCheck(a1, v9, v10);
    char v11 = 1;
  }
  return v11 & 1;
}

uint64_t WTF::HashSet<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTableTraits>::find<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(WTF *a1, WTF *a2)
{
  v6[1] = a1;
  v6[0] = a2;
  uint64_t v2 = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WebKit::Authenticator const*>((uint64_t *)a1, v6);
  v5[1] = v3;
  v5[0] = v2;
  WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::HashTableConstIteratorAdapter(&v7, v5);
  return v7;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::end(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unsigned int v3 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::makeKnownGoodIterator(a1, v2 + 8 * v3);
}

{
  uint64_t v2;
  unsigned int v3;

  uint64_t v2 = *a1;
  unsigned int v3 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::makeKnownGoodConstIterator(a1, v2 + 8 * v3);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::removeWithoutEntryConsistencyCheck(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  v8[0] = a2;
  v8[1] = a3;
  v7[2] = a1;
  uint64_t v4 = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::end(a1);
  v7[1] = v5;
  v7[0] = v4;
  uint64_t result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator==(v8, (uint64_t)v7);
  if ((result & 1) == 0) {
    return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::removeAndInvalidateWithoutEntryConsistencyCheck((WTF::RefCountedBase *)a1, v8[0]);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::removeAndInvalidateWithoutEntryConsistencyCheck(WTF::RefCountedBase *a1, uint64_t *a2)
{
  return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::remove(a1, a2);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::remove(WTF *a1, uint64_t *a2)
{
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::deleteBucket(a2);
  int v3 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deletedCount(a1);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setDeletedCount(a1, v3 + 1);
  int v4 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a1);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setKeyCount(a1, v4 - 1);
  uint64_t shouldShrink = (uint64_t *)WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::shouldShrink(a1);
  if (shouldShrink) {
    uint64_t shouldShrink = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::shrink(a1);
  }
  return WTF::isIntegralOrPointerType((WTF *)shouldShrink);
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::deleteBucket(uint64_t *a1)
{
  return WTF::hashTraitsDeleteBucket<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(a1);
}

uint64_t *WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::shrink(WTF *a1)
{
  unsigned int v2 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::rehash(a1, v2 >> 1, 0);
}

uint64_t *WTF::hashTraitsDeleteBucket<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>(uint64_t *a1)
{
  return WTF::SimpleClassHashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>::constructDeletedValue((uint64_t)a1);
}

uint64_t *WTF::SimpleClassHashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>::constructDeletedValue(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)operator new(8, 0, a1);
  return WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::Ref(v1);
}

uint64_t *WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::Ref(uint64_t *a1)
{
  return a1;
}

{
  *a1 = WTF::RawPtrTraits<WebKit::Authenticator>::hashTableDeletedValue();
  return a1;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WebKit::Authenticator const*>(uint64_t *a1, WTF **a2)
{
  if (!*a1) {
    return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::end(a1);
  }
  uint64_t v5 = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::lookup<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WebKit::Authenticator const*>(a1, a2);
  if (v5) {
    return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::makeKnownGoodConstIterator(a1, v5);
  }
  else {
    return WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::end(a1);
  }
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::lookup<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WebKit::Authenticator const*>(uint64_t *a1, WTF **a2)
{
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  uint64_t v8 = *a1;
  if (!*a1) {
    return 0;
  }
  int v7 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSizeMask(a1);
  unsigned int v6 = WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::hash<WebKit::Authenticator const*>(a2) & v7;
  for (i = 0; ; unsigned int v6 = (v6 + i) & v7)
  {
    if (WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isEmptyBucket()) {
      return 0;
    }
    if (!WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::isDeletedBucket())
    {
      std::__to_address[abi:sn180100]<char const>();
      if (WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::equal<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WebKit::Authenticator const*>(v3, (uint64_t *)a2))
      {
        break;
      }
    }
    ++i;
  }
  return v8 + 8 * v6;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::makeKnownGoodConstIterator(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unsigned int v5 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableConstIterator(&v7, (uint64_t)a1, a2, v4 + 8 * v5);
  return v7;
}

unint64_t WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::hash<WebKit::Authenticator const*>(WTF **a1)
{
  return WTF::PtrHashBase<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,true>::hash(*a1);
}

BOOL WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::equal<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WebKit::Authenticator const*>(uint64_t a1, uint64_t *a2)
{
  return WTF::PtrHashBase<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,true>::equal(a1, *a2);
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>,WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0>(void *a1, unsigned char *a2)
{
  uint64_t v3 = WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(uint64_t a1, unsigned char *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>::CallableWrapperBase((void *)a1);
  *(void *)a1 = &unk_1EE9B30D0;
  *(unsigned char *)(a1 + 8) = *a2;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(uint64_t a1)
{
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper((uint64_t)a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::authenticatorStatusUpdated(WebKit::WebAuthenticationStatus)::$_0,void,API::WebAuthenticationPanel const&>::call(uint64_t a1, API::WebAuthenticationPanel *a2)
{
  return WebKit::AuthenticatorManager::serviceStatusUpdated(WebKit::WebAuthenticationStatus)::$_0::operator()((unsigned __int8 *)(a1 + 8), a2);
}

void *WTF::Function<void ()(WTF::String const&)>::Function<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  uint64_t v4[2] = a1;
  v4[1] = a2;
  void v4[4] = v4;
  uint64_t v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>,WTF::CompletionHandler<void ()(WTF::String const&)> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>,std::default_delete<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>,std::default_delete<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>,std::default_delete<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0>>::reset[abi:sn180100]();
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>,WTF::CompletionHandler<void ()(WTF::String const&)> &&>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x20);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::String const&>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B30F8;
  WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void *WTF::Detail::CallableWrapperBase<void,WTF::String const&>::CallableWrapperBase(void *result)
{
  *uint64_t result = &unk_1EE9B3120;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B30F8;
  WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>::call(uint64_t a1, WTF::StringImpl **a2)
{
  return WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()((void *)(a1 + 8), a2);
}

void WTF::Detail::CallableWrapperBase<void,WTF::String const&>::~CallableWrapperBase()
{
}

{
  __break(1u);
}

uint64_t WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::operator()(void *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = a1[1];
  uint64_t result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    WTF::String::operator=((uint64_t *)(v3 + 712), a2);
    return WTF::CompletionHandler<void ()(WTF::String const&)>::operator()((WTF::RefCountedBase *)(a1 + 2), (WTF::RefCountedBase *)a2);
  }
  return result;
}

void std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0,void,WTF::String const&>,std::default_delete<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0>>::reset[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v3 = *v0;
  std::to_address[abi:sn180100]<char const>();
  void *v1 = 0;
  if (v3)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapperBase<void,WTF::String const&>>::operator()[abi:sn180100](v2, v3);
  }
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void,API::WebAuthenticationPanel const&>,WTF::CompletionHandler<void ()(WTF::String const&)> &&>(void *a1, void *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x28);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void,API::WebAuthenticationPanel const&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void,API::WebAuthenticationPanel const&>::CallableWrapper(void *a1, void *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B3148;
  WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1::$_1(a1 + 1, a2);
  return a1;
}

void *WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1::$_1(void *a1, void *a2)
{
  return a1;
}

{
  *a1 = *a2;
  WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_0::$_0(a1 + 1, a2 + 1);
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void,API::WebAuthenticationPanel const&>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B3148;
  WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1::~$_1((uint64_t)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void,API::WebAuthenticationPanel const&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void,API::WebAuthenticationPanel const&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1,void,API::WebAuthenticationPanel const&>::call(uint64_t a1, API::WebAuthenticationPanel *a2)
{
}

void WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)> &&)::$_1::operator()(uint64_t *a1, API::WebAuthenticationPanel *a2)
{
  void v6[2] = (API::WebAuthenticationPanel *)a1;
  v6[1] = a2;
  uint64_t v3 = API::WebAuthenticationPanel::client(a2);
  uint64_t v4 = *a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v5);
  WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler<WebKit::AuthenticatorManager::requestPin(unsigned long long,WTF::CompletionHandler<void ()(WTF::String const&)>&&)::$_0,void>(v6, a1 + 1);
  (*(void (**)(uint64_t, uint64_t, API::WebAuthenticationPanel **))(*(void *)v3 + 32))(v3, v4, v6);
  WTF::CompletionHandler<void ()(WTF::String const&)>::~CompletionHandler((WTF::ThreadLikeAssertion *)v6);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v5);
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void,API::WebAuthenticationPanel const&>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &>(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x28);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B3170;
  WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0::$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, (uint64_t *)a2);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16) & 1;
  WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler((void *)(a1 + 24), a2 + 24);
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B3170;
  WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0::~$_0((uint64_t)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0,void,API::WebAuthenticationPanel const&>::call(uint64_t a1, API::WebAuthenticationPanel *a2)
{
  return WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0::operator()(a1 + 8, a2);
}

uint64_t WebKit::AuthenticatorManager::selectAssertionResponse(WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebKit::WebAuthenticationSource,WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse*)> &&)::$_0::operator()(uint64_t a1, API::WebAuthenticationPanel *a2)
{
  uint64_t v3 = API::WebAuthenticationPanel::client(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40))(v3, a1);
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void,API::WebAuthenticationPanel const&>,WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&>(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B3198;
  WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void *WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0::$_0(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler(a1, a2);
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B3198;
  WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0,void,API::WebAuthenticationPanel const&>::call(uint64_t a1, API::WebAuthenticationPanel *a2)
{
  return WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0::operator()(a1 + 8, a2);
}

uint64_t WebKit::AuthenticatorManager::decidePolicyForLocalAuthenticator(WTF::CompletionHandler<void ()(WebKit::LocalAuthenticatorPolicy)> &&)::$_0::operator()(uint64_t a1, API::WebAuthenticationPanel *a2)
{
  uint64_t v3 = API::WebAuthenticationPanel::client(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 48))(v3, a1);
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void,API::WebAuthenticationPanel const&>,WTF::CompletionHandler<void ()(LAContext *)> &&>(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B31C0;
  WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void *WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0::$_0(void *a1, uint64_t a2)
{
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B31C0;
  WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0,void,API::WebAuthenticationPanel const&>::call(uint64_t a1, API::WebAuthenticationPanel *a2)
{
  return WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0::operator()(a1 + 8, a2);
}

uint64_t WebKit::AuthenticatorManager::requestLAContextForUserVerification(WTF::CompletionHandler<void ()(LAContext *)> &&)::$_0::operator()(uint64_t a1, API::WebAuthenticationPanel *a2)
{
  uint64_t v3 = API::WebAuthenticationPanel::client(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 56))(v3, a1);
}

BOOL WTF::Mapper<WebKit::AuthenticatorManager::startDiscovery(WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&)::$_0,WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&,void>::map(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v15 = (unsigned int *)a1;
  uint64_t v14 = a2;
  int v13 = a3;
  uint64_t v17 = a1;
  unint64_t v16 = WTF::containerSize<WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>>(a2);
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveInitialCapacity<(WTF::FailureAction)0>(v17, v16);
  v12[2] = v14;
  uint64_t v3 = WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::begin(v14);
  v12[1] = v4;
  v12[0] = v3;
  uint64_t v5 = WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::end(v14);
  v11[1] = v6;
  v11[0] = v5;
  while (1)
  {
    BOOL result = WTF::operator==<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(v12, v11);
    if (result) {
      break;
    }
    int v10 = (unsigned __int8 *)WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::operator*((WTF::RefCountedBase *)v12);
    uint64_t v8 = v15;
    WebKit::AuthenticatorManager::startDiscovery(WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&)::$_0::operator()<WebCore::AuthenticatorTransport const>(&v9, v13, v10);
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck(v8, (uint64_t)&v9);
    WTF::UniqueRef<WebKit::AuthenticatorTransportService>::~UniqueRef((uint64_t)&v9);
    WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::operator++((WTF::RefCountedBase *)v12);
  }
  return result;
}

uint64_t WTF::containerSize<WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>>(void *a1)
{
  return std::size[abi:sn180100]<WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>>(a1);
}

uint64_t WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::begin(uint64_t *a1)
{
  uint64_t v4[2] = a1;
  uint64_t v1 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::begin(a1);
  v4[1] = v2;
  v4[0] = v1;
  WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::HashTableConstIteratorAdapter(&v5, v4);
  return v5;
}

uint64_t WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::end(uint64_t *a1)
{
  uint64_t v4[2] = a1;
  uint64_t v1 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::end(a1);
  v4[1] = v2;
  v4[0] = v1;
  WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::HashTableConstIteratorAdapter(&v5, v4);
  return v5;
}

BOOL WTF::operator==<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(void *a1, void *a2)
{
  return WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator==(a1, a2);
}

uint64_t WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::operator*(WTF::RefCountedBase *a1)
{
  return WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::get(a1);
}

void *WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck(unsigned int *a1, uint64_t a2)
{
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  uint64_t v3 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a1);
  uint64_t v4 = (void *)operator new(8, 0, v3);
  BOOL result = WTF::Function<void ()(WTF::String const&)>::Function(v4, a2);
  ++a1[3];
  return result;
}

uint64_t WebKit::AuthenticatorManager::startDiscovery(WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits> const&)::$_0::operator()<WebCore::AuthenticatorTransport const>(void *a1, void *a2, unsigned __int8 *a3)
{
  v6[3] = a1;
  void v6[2] = a2;
  v6[1] = a3;
  (*(void (**)(void *__return_ptr, void, void, void))(*(void *)*a2 + 120))(v6, *a2, *a3, *a2);
  uint64_t v4 = (WebKit::AuthenticatorTransportService *)WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
  WebKit::AuthenticatorTransportService::startDiscovery(v4);
  WTF::Function<void ()(WTF::String const&)>::Function(a1, (uint64_t)v6);
  return WTF::UniqueRef<WebKit::AuthenticatorTransportService>::~UniqueRef((uint64_t)v6);
}

BOOL WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::operator++(WTF::RefCountedBase *a1)
{
  return WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator++(a1);
}

uint64_t WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveInitialCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (a2) {
    return WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(result, a2);
  }
  return result;
}

uint64_t std::size[abi:sn180100]<WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>>(void *a1)
{
  return WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::size(a1);
}

uint64_t WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::size(void *a1)
{
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::size(a1);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::size(void *a1)
{
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a1);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::begin(uint64_t *a1)
{
  if (WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmpty(a1)) {
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::end(a1);
  }
  else {
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::makeConstIterator(a1, *a1);
  }
}

BOOL WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmpty(void *a1)
{
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a1) == 0;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::makeConstIterator(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unsigned int v5 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTableConstIterator(&v7, (uint64_t)a1, a2, v4 + v5);
  return v7;
}

BOOL WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::skipEmptyBuckets(void *a1)
{
  while (1)
  {
    BOOL result = 0;
    if (*a1 != a1[1]) {
      BOOL result = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmptyOrDeletedBucket();
    }
    if (!result) {
      break;
    }
    ++*a1;
  }
  return result;
}

BOOL WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmptyOrDeletedBucket()
{
  BOOL isEmptyBucket = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmptyBucket();
  BOOL v1 = 1;
  if (!isEmptyBucket) {
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isDeletedBucket();
  }
  return v1;
}

uint64_t WTF::HashTableConstIteratorAdapter<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>::get(WTF::RefCountedBase *a1)
{
  return WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::get(a1);
}

uint64_t WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::get(WTF::RefCountedBase *a1)
{
  return *(void *)a1;
}

BOOL WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator++(WTF::RefCountedBase *a1)
{
  return WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::skipEmptyBuckets(a1);
}

uint64_t *std::invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>,WebCore::PublicKeyCredentialCreationOptions &>(uint64_t *a1, uint64_t a2)
{
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>,WebCore::PublicKeyCredentialCreationOptions &>(a1, a2);
}

uint64_t *std::invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>,WebCore::PublicKeyCredentialRequestOptions &>(uint64_t a1, uint64_t a2)
{
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>,WebCore::PublicKeyCredentialRequestOptions &>(a1, a2);
}

uint64_t *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>,WebCore::PublicKeyCredentialCreationOptions &>(uint64_t *a1, uint64_t a2)
{
  return WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0::operator()(a1, a2);
}

uint64_t *WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0::operator()(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(v2 + 4) = *(unsigned char *)(a2 + 108);
  return result;
}

uint64_t *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>,WebCore::PublicKeyCredentialRequestOptions &>(uint64_t a1, uint64_t a2)
{
  return WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1::operator()((uint64_t *)(a1 + 8), a2);
}

uint64_t *WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1::operator()(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(v2 + 4) = *(unsigned char *)(a2 + 20);
  return result;
}

void *WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>::Visitor(void *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

{
  WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0>::Visitor(a1, a2);
  WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0>::Visitor(a1 + 1, a3);
  return a1;
}

void *WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0>::Visitor(void *result, uint64_t a2)
{
  *BOOL result = a2;
  return result;
}

uint64_t WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::implForObject<API::WebAuthenticationPanel>(uint64_t a1)
{
  std::__to_address[abi:sn180100]<char const>();
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v1, a1);
  std::__to_address[abi:sn180100]<char const>();
  return WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::impl(v2);
}

void *WTF::Function<void ()(WebKit::WebAuthenticationPanelResult)>::Function<WebKit::AuthenticatorManager::runPanel(void)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  uint64_t v4[2] = a1;
  v4[1] = a2;
  void v4[4] = v4;
  void v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>,WebKit::AuthenticatorManager::runPanel(void)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>>::reset[abi:sn180100]();
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>,WebKit::AuthenticatorManager::runPanel(void)::$_0>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::Detail::CallableWrapperBase<void,WebKit::WebAuthenticationPanelResult>::operator new();
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

uint64_t WTF::Detail::CallableWrapperBase<void,WebKit::WebAuthenticationPanelResult>::operator new()
{
  return WTF::fastMalloc((WTF *)0x28);
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WebKit::WebAuthenticationPanelResult>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B31E8;
  WebKit::AuthenticatorManager::runPanel(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void *WTF::Detail::CallableWrapperBase<void,WebKit::WebAuthenticationPanelResult>::CallableWrapperBase(void *result)
{
  *BOOL result = &unk_1EE9B3210;
  return result;
}

uint64_t *WebKit::AuthenticatorManager::runPanel(void)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::HashSet(a1, (WTF::RefCountedBase *)a2);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1 + 1, a2 + 1);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1 + 2, a2 + 2);
  a1[3] = a2[3];
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B31E8;
  WebKit::AuthenticatorManager::runPanel(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>::call(uint64_t a1, char a2)
{
  return WebKit::AuthenticatorManager::runPanel(void)::$_0::operator()((uint64_t *)(a1 + 8), a2);
}

void WTF::Detail::CallableWrapperBase<void,WebKit::WebAuthenticationPanelResult>::~CallableWrapperBase()
{
}

{
  __break(1u);
}

uint64_t WebKit::AuthenticatorManager::runPanel(void)::$_0::operator()(uint64_t *a1, char a2)
{
  uint64_t v3 = a1[3];
  uint64_t result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1 + 2);
  if ((result & 1) == 0)
  {
    uint64_t result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1 + 1);
    if ((result & 1) == 0 && a2 != 2)
    {
      uint64_t v5 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get(a1 + 1);
      uint64_t result = WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get(v3 + 376);
      if (v5 == result) {
        return (uint64_t)WebKit::AuthenticatorManager::startDiscovery(v3, a1);
      }
    }
  }
  return result;
}

void std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>>::reset[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v3 = *v0;
  std::to_address[abi:sn180100]<char const>();
  void *v1 = 0;
  if (v3)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>>::operator()[abi:sn180100](v2, v3);
  }
}

uint64_t std::default_delete<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a2);
  }
  return result;
}

uint64_t WTF::Function<void ()(WebKit::WebAuthenticationPanelResult)>::~Function(uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::runPanel(void)::$_0,void,WebKit::WebAuthenticationPanelResult>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void,API::WebAuthenticationPanel const&>,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>(void *a1, unsigned char *a2)
{
  uint64_t v3 = WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void,API::WebAuthenticationPanel const&>::CallableWrapper(uint64_t a1, unsigned char *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>::CallableWrapperBase((void *)a1);
  *(void *)a1 = &unk_1EE9B3238;
  *(unsigned char *)(a1 + 8) = *a2;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(uint64_t a1)
{
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void,API::WebAuthenticationPanel const&>::~CallableWrapper((uint64_t)a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0,void,API::WebAuthenticationPanel const&>::call(uint64_t a1, API::WebAuthenticationPanel *a2)
{
  return WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0::operator()((unsigned char *)(a1 + 8), a2);
}

uint64_t WebKit::AuthenticatorManager::invokePendingCompletionHandler(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)::$_0::operator()(unsigned char *a1, API::WebAuthenticationPanel *a2)
{
  uint64_t v3 = API::WebAuthenticationPanel::client(a2);
  return (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 24))(v3, *a1 & 1);
}

void std::exchange[abi:sn180100]<WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>,decltype(nullptr)>(void *a1, uint64_t a2)
{
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator=(a2);
}

uint64_t WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator()()
{
  uint64_t v0 = *(void *)std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
  return (*(uint64_t (**)(void))(v0 + 16))();
}

WTF::RefCountedBase *std::invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(WTF::RefCountedBase **a1, uint64_t a2)
{
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(a1, a2);
}

WTF::RefCountedBase *std::invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(uint64_t a1, uint64_t a2)
{
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(a1, a2);
}

WTF::RefCountedBase *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(WTF::RefCountedBase **a1, uint64_t a2)
{
  return WebKit::AuthenticatorManager::getTransports(void)const::$_0::operator()(a1, a2);
}

WTF::RefCountedBase *WebKit::AuthenticatorManager::getTransports(void)const::$_0::operator()(WTF::RefCountedBase **a1, uint64_t a2)
{
  uint64_t v6 = a1;
  uint64_t v5 = a2;
  WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::operator=(*a1, (WTF::RefCountedBase *)v4);
  return WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::~HashSet((WTF::RefCountedBase *)v4);
}

uint64_t WebKit::anonymous namespace'::collectTransports(WTF::RefCountedBase *a1, uint64_t a2)
{
  uint64_t v42 = a1;
  uint64_t v41 = a2;
  char v40 = 0;
  WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::HashSet(a1);
  if ((std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator BOOL[abi:sn180100](v41) & 1) != 0
    && (std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v41),
        (std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100](v3) & 1) != 0))
  {
    std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v41);
    char v22 = 0;
    if (std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(v5, &v22))
    {
      char v20 = 3;
      uint64_t result = WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v21, a1, (uint64_t)&v20);
      char v40 = 1;
      int v23 = 1;
    }
    else
    {
      std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v41);
      char v19 = 1;
      uint64_t result = std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(v6, &v19);
      if (result)
      {
        char v15 = 0;
        WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)&v16, a1, (uint64_t)&v15);
        char v12 = 1;
        WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v13, a1, (uint64_t)&v12);
        uint64_t v16 = v13[0];
        uint64_t v17 = v13[1];
        char v18 = v14;
        char v9 = 2;
        WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v10, a1, (uint64_t)&v9);
        uint64_t v16 = v10[0];
        uint64_t v17 = v10[1];
        char v18 = v11;
        char v7 = 6;
        return WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)&v8, a1, (uint64_t)&v7);
      }
    }
  }
  else
  {
    char v36 = 3;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)&v37, a1, (uint64_t)&v36);
    char v33 = 0;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v34, a1, (uint64_t)&v33);
    uint64_t v37 = v34[0];
    uint64_t v38 = v34[1];
    char v39 = v35;
    char v30 = 1;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v31, a1, (uint64_t)&v30);
    uint64_t v37 = v31[0];
    uint64_t v38 = v31[1];
    char v39 = v32;
    char v27 = 2;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v28, a1, (uint64_t)&v27);
    uint64_t v37 = v28[0];
    uint64_t v38 = v28[1];
    char v39 = v29;
    char v24 = 6;
    uint64_t result = WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v25, a1, (uint64_t)&v24);
    uint64_t v37 = v25[0];
    uint64_t v38 = v25[1];
    char v39 = v26;
    char v40 = 1;
    int v23 = 1;
  }
  return result;
}

WTF::RefCountedBase *WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::operator=(WTF::RefCountedBase *a1, WTF::RefCountedBase *a2)
{
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator=(a1, a2);
}

uint64_t std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,false>::has_value[abi:sn180100](a1) & 1;
}

void std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,false>::has_value[abi:sn180100](a1) & 1) == 0) {
    __break(1u);
  }
  std::__to_address[abi:sn180100]<char const>();
}

uint64_t WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add(uint64_t a1, WTF::RefCountedBase *a2, uint64_t a3)
{
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::add(a1, a2, a3);
}

uint64_t std::__optional_storage_base<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(unsigned char *)(a1 + 6) & 1;
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::add(uint64_t a1, WTF::RefCountedBase *a2, uint64_t a3)
{
  char v18 = a2;
  uint64_t v17 = a3;
  std::__to_address[abi:sn180100]<char const>();
  uint64_t v16 = v17;
  char v32 = a2;
  uint64_t v31 = v5;
  char v30 = (char **)&v16;
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a2);
  if (!*(void *)a2) {
    uint64_t v6 = (WTF *)WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::expand(a2, 0);
  }
  WTF::isIntegralOrPointerType(v6);
  uint64_t v29 = 0;
  uint64_t v29 = *(void *)a2;
  int v28 = 0;
  int v28 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSizeMask(a2);
  int v27 = 0;
  int v27 = WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>::hash<WebCore::AuthenticatorTransport>(v31);
  unsigned int v26 = v27 & v28;
  int v25 = 0;
  char v24 = 0;
  int v23 = 0;
  while (1)
  {
    int v23 = (unsigned char *)(v29 + v26);
    if (WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isEmptyBucket()) {
      break;
    }
    std::__to_address[abi:sn180100]<char const>();
    if (WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>::equal<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport>(v7, (char *)v31))
    {
      uint64_t KnownGoodIterator = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::makeKnownGoodIterator((uint64_t *)a2, (uint64_t)v23);
      uint64_t v22 = v9;
      uint64_t v21 = KnownGoodIterator;
      return WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>>::HashTableAddResult(a1, KnownGoodIterator, v9, 0);
    }
    if (WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::isDeletedBucket()) {
      char v24 = v23;
    }
    ++v25;
    unsigned int v26 = (v26 + v25) & v28;
  }
  if (v24)
  {
    WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::initializeBucket((uint64_t)v24);
    int v23 = v24;
    int v11 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::deletedCount(a2);
    WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setDeletedCount(a2, v11 - 1);
  }
  WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>::translate<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::add(WebCore::AuthenticatorTransport&&)::{lambda(void)#1}>(v23, (uint64_t)v31, v30);
  int v12 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::keyCount(a2);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::setKeyCount(a2, v12 + 1);
  uint64_t shouldExpand = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::shouldExpand(a2);
  if (shouldExpand)
  {
    uint64_t shouldExpand = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::expand(a2, v23);
    int v23 = (unsigned char *)shouldExpand;
  }
  WTF::isIntegralOrPointerType((WTF *)shouldExpand);
  uint64_t v14 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::makeKnownGoodIterator((uint64_t *)a2, (uint64_t)v23);
  uint64_t v20 = v15;
  uint64_t v19 = v14;
  return WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>>::HashTableAddResult(a1, v14, v15, 1);
}

uint64_t WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::expand(WTF *a1, unsigned char *a2)
{
  unsigned int v4 = WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::tableSize(a1);
  if (!v4) {
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::rehash(a1, 8u, a2);
  }
  if (WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::mustRehashInPlace(a1)) {
    return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::rehash(a1, v4, a2);
  }
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::rehash(a1, 2 * v4, a2);
}

unsigned char *WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>::translate<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::add(WebCore::AuthenticatorTransport&&)::{lambda(void)#1}>(unsigned char *a1, uint64_t a2, char **a3)
{
  char v7 = a1;
  uint64_t v6 = a2;
  uint64_t v5 = a3;
  uint64_t v8 = a3;
  char v4 = **a3;
  return WTF::GenericHashTraits<WebCore::AuthenticatorTransport>::assignToEmpty<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport>(a1, &v4);
}

unsigned char *WTF::GenericHashTraits<WebCore::AuthenticatorTransport>::assignToEmpty<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport>(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

WTF::RefCountedBase *WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::operator=(WTF::RefCountedBase *a1, WTF::RefCountedBase *a2)
{
  uint64_t v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::HashTable(v4, a2);
  WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::swap(a1, (WTF::RefCountedBase *)v4);
  return WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::~HashTable((WTF::RefCountedBase *)v4);
}

uint64_t *WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::swap(WTF::RefCountedBase *a1, WTF::RefCountedBase *a2)
{
  return std::swap[abi:sn180100]<JSC::ArrayBufferView *>((uint64_t *)a1, (uint64_t *)a2);
}

WTF::RefCountedBase *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::getTransports(void)::$_0,WebKit::AuthenticatorManager::getTransports(void)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(uint64_t a1, uint64_t a2)
{
  return WebKit::AuthenticatorManager::getTransports(void)const::$_1::operator()((WTF::RefCountedBase **)(a1 + 8), a2);
}

WTF::RefCountedBase *WebKit::AuthenticatorManager::getTransports(void)const::$_1::operator()(WTF::RefCountedBase **a1, uint64_t a2)
{
  uint64_t v6 = a1;
  uint64_t v5 = a2;
  WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::operator=(*a1, (WTF::RefCountedBase *)v4);
  return WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::~HashSet((WTF::RefCountedBase *)v4);
}

uint64_t WebKit::anonymous namespace'::collectTransports(WTF::RefCountedBase *a1, WTF::ASCIILiteral *a2, uint64_t a3)
{
  uint64_t v50 = a1;
  int v49 = a2;
  uint64_t v48 = a3;
  char v47 = 0;
  WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::HashSet(a1);
  if (WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty((uint64_t)v49))
  {
    char v43 = 3;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)&v44, a1, (uint64_t)&v43);
    char v40 = 0;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v41, a1, (uint64_t)&v40);
    uint64_t v44 = v41[0];
    uint64_t v45 = v41[1];
    char v46 = v42;
    char v37 = 1;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v38, a1, (uint64_t)&v37);
    uint64_t v44 = v38[0];
    uint64_t v45 = v38[1];
    char v46 = v39;
    char v34 = 2;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v35, a1, (uint64_t)&v34);
    uint64_t v44 = v35[0];
    uint64_t v45 = v35[1];
    char v46 = v36;
    char v31 = 6;
    WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v32, a1, (uint64_t)&v31);
    uint64_t v44 = v32[0];
    uint64_t v45 = v32[1];
    char v46 = v33;
  }
  char v30 = (unsigned int *)v49;
  uint64_t v29 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(v49);
  uint64_t v28 = WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v30);
  while (v29 != v28)
  {
    uint64_t v27 = v29;
    if (WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty(v29 + 24))
    {
      char v26 = 3;
      WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v25, a1, (uint64_t)&v26);
      char v24 = 0;
      WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v23, a1, (uint64_t)&v24);
      char v22 = 1;
      WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v21, a1, (uint64_t)&v22);
      char v20 = 2;
      WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v19, a1, (uint64_t)&v20);
      char v18 = 6;
      WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v17, a1, (uint64_t)&v18);
      break;
    }
    uint64_t v16 = (unsigned int *)(v27 + 24);
    uint64_t v15 = (unsigned char *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)(v27 + 24));
    uint64_t v14 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v16);
    while (v15 != (unsigned char *)v14)
    {
      int v13 = v15;
      if (*v15 != 2)
      {
        WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::add((uint64_t)v12, a1, (uint64_t)v13);
        if (WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::size(a1) >= 5uLL) {
          break;
        }
      }
      ++v15;
    }
    v29 += 40;
  }
  uint64_t result = std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100](v48);
  if (result)
  {
    char v11 = 0;
    if (std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(v48, &v11))
    {
      unsigned __int8 v10 = 0;
      WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove((uint64_t *)a1, &v10);
      unsigned __int8 v9 = 1;
      WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove((uint64_t *)a1, &v9);
      unsigned __int8 v8 = 2;
      WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove((uint64_t *)a1, &v8);
      unsigned __int8 v7 = 6;
      WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove((uint64_t *)a1, &v7);
    }
    char v6 = 1;
    uint64_t result = std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(v48, &v6);
    if (result)
    {
      unsigned __int8 v5 = 3;
      return WTF::HashSet<WebCore::AuthenticatorTransport,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::HashTableTraits>::remove((uint64_t *)a1, &v5);
    }
  }
  return result;
}

BOOL WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty(uint64_t a1)
{
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1) == 0;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>,WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x18);
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B3260;
  WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)const::$_0::$_0(a1 + 1, a2);
  return a1;
}

uint64_t *WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)const::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  WTF::Function<void ()(API::WebAuthenticationPanel const&)>::Function(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B3260;
  WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)const::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)const::$_0::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::AuthenticatorManager::dispatchPanelClientCall(WTF::Function<void ()(API::WebAuthenticationPanel const&)> &&)const::$_0::operator()(uint64_t *a1)
{
  uint64_t result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WTF::Function<void ()(API::WebAuthenticationPanel const&)>::operator()();
  }
  return result;
}

uint64_t WTF::Function<void ()(API::WebAuthenticationPanel const&)>::operator()()
{
  uint64_t v0 = *(void *)std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
  return (*(uint64_t (**)(void))(v0 + 16))();
}

Inspector::SupplementalBackendDispatcher *Inspector::AutomationBackendDispatcher::AutomationBackendDispatcher(Inspector::SupplementalBackendDispatcher *a1, Inspector::BackendDispatcher *a2, uint64_t a3)
{
  unsigned __int8 v5 = (void *)Inspector::SupplementalBackendDispatcher::SupplementalBackendDispatcher(a1, a2);
  *unsigned __int8 v5 = &unk_1EE9B33B8;
  void v5[3] = a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::registerDispatcherForDomain();
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return a1;
}

_DWORD *Inspector::AutomationBackendDispatcher::dispatch(_DWORD *a1, uint64_t a2, const WTF::StringImpl **a3, WTF::JSONImpl::ObjectBase **a4)
{
  v144[3] = *MEMORY[0x1E4F143B8];
  ++a1[2];
  unsigned __int8 v7 = *a4;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getObject((uint64_t *)&v97, v7, (const WTF::String *)v98);
  unsigned __int8 v10 = v98[0];
  v98[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  char v11 = &qword_1EB358000;
  if ((_MergedGlobals_44 & 1) == 0)
  {
    *(void *)&long long v95 = Inspector::AutomationBackendDispatcher::getBrowsingContexts;
    *((void *)&v95 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)v98, (uint64_t)"getBrowsingContexts", 20, &v95);
    *(void *)&long long v94 = Inspector::AutomationBackendDispatcher::getBrowsingContext;
    *((void *)&v94 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v99, (uint64_t)"getBrowsingContext", 19, &v94);
    *(void *)&long long v93 = Inspector::AutomationBackendDispatcher::createBrowsingContext;
    *((void *)&v93 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v100, (uint64_t)"createBrowsingContext", 22, &v93);
    *(void *)&long long v92 = Inspector::AutomationBackendDispatcher::closeBrowsingContext;
    *((void *)&v92 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v101, (uint64_t)"closeBrowsingContext", 21, &v92);
    *(void *)&long long v91 = Inspector::AutomationBackendDispatcher::deleteSession;
    *((void *)&v91 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v102, (uint64_t)"deleteSession", 14, &v91);
    *(void *)&long long v90 = Inspector::AutomationBackendDispatcher::switchToBrowsingContext;
    *((void *)&v90 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v103, (uint64_t)"switchToBrowsingContext", 24, &v90);
    *(void *)&long long v89 = Inspector::AutomationBackendDispatcher::setWindowFrameOfBrowsingContext;
    *((void *)&v89 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v104, (uint64_t)"setWindowFrameOfBrowsingContext", 32, &v89);
    *(void *)&long long v88 = Inspector::AutomationBackendDispatcher::maximizeWindowOfBrowsingContext;
    *((void *)&v88 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v105, (uint64_t)"maximizeWindowOfBrowsingContext", 32, &v88);
    *(void *)&long long v87 = Inspector::AutomationBackendDispatcher::hideWindowOfBrowsingContext;
    *((void *)&v87 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v106, (uint64_t)"hideWindowOfBrowsingContext", 28, &v87);
    *(void *)&long long v86 = Inspector::AutomationBackendDispatcher::navigateBrowsingContext;
    *((void *)&v86 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v107, (uint64_t)"navigateBrowsingContext", 24, &v86);
    *(void *)&long long v85 = Inspector::AutomationBackendDispatcher::goBackInBrowsingContext;
    *((void *)&v85 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v108, (uint64_t)"goBackInBrowsingContext", 24, &v85);
    *(void *)&long long v84 = Inspector::AutomationBackendDispatcher::goForwardInBrowsingContext;
    *((void *)&v84 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v109, (uint64_t)"goForwardInBrowsingContext", 27, &v84);
    *(void *)&long long v83 = Inspector::AutomationBackendDispatcher::reloadBrowsingContext;
    *((void *)&v83 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v110, (uint64_t)"reloadBrowsingContext", 22, &v83);
    *(void *)&long long v82 = Inspector::AutomationBackendDispatcher::waitForNavigationToComplete;
    *((void *)&v82 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v111, (uint64_t)"waitForNavigationToComplete", 28, &v82);
    *(void *)&long long v81 = Inspector::AutomationBackendDispatcher::evaluateJavaScriptFunction;
    *((void *)&v81 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v112, (uint64_t)"evaluateJavaScriptFunction", 27, &v81);
    *(void *)&long long v80 = Inspector::AutomationBackendDispatcher::performMouseInteraction;
    *((void *)&v80 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v113, (uint64_t)"performMouseInteraction", 24, &v80);
    *(void *)&long long v79 = Inspector::AutomationBackendDispatcher::performKeyboardInteractions;
    *((void *)&v79 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v114, (uint64_t)"performKeyboardInteractions", 28, &v79);
    *(void *)&long long v78 = Inspector::AutomationBackendDispatcher::performInteractionSequence;
    *((void *)&v78 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v115, (uint64_t)"performInteractionSequence", 27, &v78);
    *(void *)&long long v77 = Inspector::AutomationBackendDispatcher::cancelInteractionSequence;
    *((void *)&v77 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v116, (uint64_t)"cancelInteractionSequence", 26, &v77);
    *(void *)&long long v76 = Inspector::AutomationBackendDispatcher::takeScreenshot;
    *((void *)&v76 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v117, (uint64_t)"takeScreenshot", 15, &v76);
    *(void *)&long long v75 = Inspector::AutomationBackendDispatcher::resolveChildFrameHandle;
    *((void *)&v75 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v118, (uint64_t)"resolveChildFrameHandle", 24, &v75);
    *(void *)&long long v74 = Inspector::AutomationBackendDispatcher::resolveParentFrameHandle;
    *((void *)&v74 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v119, (uint64_t)"resolveParentFrameHandle", 25, &v74);
    *(void *)&long long v73 = Inspector::AutomationBackendDispatcher::computeElementLayout;
    *((void *)&v73 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v120, (uint64_t)"computeElementLayout", 21, &v73);
    *(void *)&long long v72 = Inspector::AutomationBackendDispatcher::getComputedRole;
    *((void *)&v72 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v121, (uint64_t)"getComputedRole", 16, &v72);
    *(void *)&long long v71 = Inspector::AutomationBackendDispatcher::getComputedLabel;
    *((void *)&v71 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v122, (uint64_t)"getComputedLabel", 17, &v71);
    *(void *)&long long v70 = Inspector::AutomationBackendDispatcher::selectOptionElement;
    *((void *)&v70 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v123, (uint64_t)"selectOptionElement", 20, &v70);
    *(void *)&long long v69 = Inspector::AutomationBackendDispatcher::isShowingJavaScriptDialog;
    *((void *)&v69 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v124, (uint64_t)"isShowingJavaScriptDialog", 26, &v69);
    *(void *)&long long v68 = Inspector::AutomationBackendDispatcher::dismissCurrentJavaScriptDialog;
    *((void *)&v68 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v125, (uint64_t)"dismissCurrentJavaScriptDialog", 31, &v68);
    *(void *)&long long v67 = Inspector::AutomationBackendDispatcher::acceptCurrentJavaScriptDialog;
    *((void *)&v67 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v126, (uint64_t)"acceptCurrentJavaScriptDialog", 30, &v67);
    *(void *)&long long v66 = Inspector::AutomationBackendDispatcher::messageOfCurrentJavaScriptDialog;
    *((void *)&v66 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v127, (uint64_t)"messageOfCurrentJavaScriptDialog", 33, &v66);
    *(void *)&long long v65 = Inspector::AutomationBackendDispatcher::setUserInputForCurrentJavaScriptPrompt;
    *((void *)&v65 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v128, (uint64_t)"setUserInputForCurrentJavaScriptPrompt", 39, &v65);
    *(void *)&long long v64 = Inspector::AutomationBackendDispatcher::setFilesToSelectForFileUpload;
    *((void *)&v64 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v129, (uint64_t)"setFilesToSelectForFileUpload", 30, &v64);
    *(void *)&long long v63 = Inspector::AutomationBackendDispatcher::setFilesForInputFileUpload;
    *((void *)&v63 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v130, (uint64_t)"setFilesForInputFileUpload", 27, &v63);
    *(void *)&long long v62 = Inspector::AutomationBackendDispatcher::getAllCookies;
    *((void *)&v62 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v131, (uint64_t)"getAllCookies", 14, &v62);
    *(void *)&long long v61 = Inspector::AutomationBackendDispatcher::deleteSingleCookie;
    *((void *)&v61 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v132, (uint64_t)"deleteSingleCookie", 19, &v61);
    *(void *)&long long v60 = Inspector::AutomationBackendDispatcher::addSingleCookie;
    *((void *)&v60 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v133, (uint64_t)"addSingleCookie", 16, &v60);
    *(void *)&long long v59 = Inspector::AutomationBackendDispatcher::deleteAllCookies;
    *((void *)&v59 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v134, (uint64_t)"deleteAllCookies", 17, &v59);
    *(void *)&long long v58 = Inspector::AutomationBackendDispatcher::getSessionPermissions;
    *((void *)&v58 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v135, (uint64_t)"getSessionPermissions", 22, &v58);
    *(void *)&long long v57 = Inspector::AutomationBackendDispatcher::setSessionPermissions;
    *((void *)&v57 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v136, (uint64_t)"setSessionPermissions", 22, &v57);
    *(void *)&long long v56 = Inspector::AutomationBackendDispatcher::addVirtualAuthenticator;
    *((void *)&v56 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v137, (uint64_t)"addVirtualAuthenticator", 24, &v56);
    *(void *)&long long v55 = Inspector::AutomationBackendDispatcher::removeVirtualAuthenticator;
    *((void *)&v55 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v138, (uint64_t)"removeVirtualAuthenticator", 27, &v55);
    *(void *)&long long v54 = Inspector::AutomationBackendDispatcher::addVirtualAuthenticatorCredential;
    *((void *)&v54 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v139, (uint64_t)"addVirtualAuthenticatorCredential", 34, &v54);
    *(void *)&long long v53 = Inspector::AutomationBackendDispatcher::getVirtualAuthenticatorCredentials;
    *((void *)&v53 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v140, (uint64_t)"getVirtualAuthenticatorCredentials", 35, &v53);
    *(void *)&long long v52 = Inspector::AutomationBackendDispatcher::removeVirtualAuthenticatorCredential;
    *((void *)&v52 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v141, (uint64_t)"removeVirtualAuthenticatorCredential", 37, &v52);
    *(void *)&long long v51 = Inspector::AutomationBackendDispatcher::removeAllVirtualAuthenticatorCredentials;
    *((void *)&v51 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v142, (uint64_t)"removeAllVirtualAuthenticatorCredentials", 41, &v51);
    *(void *)&long long v50 = Inspector::AutomationBackendDispatcher::setVirtualAuthenticatorUserVerified;
    *((void *)&v50 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)&v143, (uint64_t)"setVirtualAuthenticatorUserVerified", 36, &v50);
    *(void *)&long long v49 = Inspector::AutomationBackendDispatcher::generateTestReport;
    *((void *)&v49 + 1) = 0;
    WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>((uint64_t)v144, (uint64_t)"generateTestReport", 19, &v49);
    uint64_t v29 = (_OWORD *)WTF::fastMalloc((WTF *)0xC10);
    bzero(v29 + 1, 0xC00uLL);
    uint64_t v47 = 0;
    unint64_t v96 = v29 + 1;
    *uint64_t v29 = xmmword_1994F5930;
    while (1)
    {
      uint64_t v30 = (uint64_t)v96;
      if (v96
        || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>,WTF::KeyValuePairKeyExtractor<void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&),WTF::DefaultHash,WTF::HashTraits<WTF::String>,WTF::HashMap<void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand((uint64_t *)&v96),
            (uint64_t v30 = (uint64_t)v96) != 0))
      {
        int v31 = *(_DWORD *)(v30 - 8);
      }
      else
      {
        int v31 = 0;
      }
      char v32 = &v98[3 * v47];
      unsigned int v33 = *((_DWORD *)*v32 + 4);
      if (v33 >= 0x100) {
        unsigned int v34 = v33 >> 8;
      }
      else {
        unsigned int v34 = WTF::StringImpl::hashSlowCase(*v32);
      }
      char v35 = 0;
      for (int i = 1; ; ++i)
      {
        unsigned int v37 = v34 & v31;
        uint64_t v38 = *(WTF **)(v30 + 24 * (v34 & v31));
        if (v38 == (WTF *)-1)
        {
          char v35 = (void *)(v30 + 24 * v37);
          goto LABEL_58;
        }
        if (!v38) {
          break;
        }
        if (WTF::equal(v38, *v32, v9)) {
          goto LABEL_67;
        }
LABEL_58:
        unsigned int v34 = i + v37;
      }
      char v46 = (void *)(v30 + 24 * v37);
      if (v35)
      {
        *char v35 = 0;
        v35[1] = 0;
        void v35[2] = 0;
        --*(_DWORD *)(v30 - 16);
        char v46 = v35;
      }
      WTF::String::operator=(v46, v32);
      *(_OWORD *)(v46 + 1) = *(_OWORD *)(v32 + 1);
      uint64_t v40 = (uint64_t)v96;
      if (v96) {
        int v41 = *((_DWORD *)v96 - 3) + 1;
      }
      else {
        int v41 = 1;
      }
      *((_DWORD *)v96 - 3) = v41;
      uint64_t v42 = (*(_DWORD *)(v40 - 16) + v41);
      unint64_t v43 = *(unsigned int *)(v40 - 4);
      if (v43 > 0x400)
      {
        if (v43 <= 2 * v42) {
LABEL_66:
        }
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>,WTF::KeyValuePairKeyExtractor<void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&),WTF::DefaultHash,WTF::HashTraits<WTF::String>,WTF::HashMap<void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand((uint64_t *)&v96);
      }
      else if (3 * v43 <= 4 * v42)
      {
        goto LABEL_66;
      }
LABEL_67:
      if (++v47 == 47)
      {
        qword_1EB358CF0 = (uint64_t)v96;
        for (uint64_t j = 138; j != -3; j -= 3)
        {
          uint64_t v45 = v98[j];
          v98[j] = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2) {
              WTF::StringImpl::destroy(v45, v39);
            }
            else {
              *(_DWORD *)v45 -= 2;
            }
          }
        }
        _MergedGlobals_44 = 1;
        char v11 = &qword_1EB358000;
        break;
      }
    }
  }
  uint64_t v12 = v11[414];
  int v13 = *a3;
  if (v12)
  {
    int v14 = *(_DWORD *)(v12 - 8);
    unsigned int v15 = *((_DWORD *)v13 + 4);
    if (v15 >= 0x100) {
      unsigned int v16 = v15 >> 8;
    }
    else {
      unsigned int v16 = WTF::StringImpl::hashSlowCase(v13);
    }
    for (k = 0; ; unsigned int v16 = k + v18)
    {
      int v18 = v16 & v14;
      uint64_t v19 = v12 + 24 * (v16 & v14);
      char v20 = *(WTF **)v19;
      if (*(void *)v19 != -1)
      {
        if (!v20)
        {
          uint64_t v21 = v11[414];
          if (v21)
          {
            uint64_t v19 = v21 + 24 * *(unsigned int *)(v21 - 4);
            goto LABEL_18;
          }
          goto LABEL_22;
        }
        if (WTF::equal(v20, *a3, v9))
        {
          uint64_t v21 = v11[414];
          if (v21) {
LABEL_18:
          }
            v21 += 24 * *(unsigned int *)(v21 - 4);
          if (v21 != v19)
          {
            char v22 = *(void (**)(void *, uint64_t, _DWORD **))(v19 + 8);
            uint64_t v23 = *(void *)(v19 + 16);
            char v24 = (void *)((char *)a1 + (v23 >> 1));
            if (v23) {
              char v22 = *(void (**)(void *, uint64_t, _DWORD **))(*v24 + v22);
            }
            v22(v24, a2, &v97);
            goto LABEL_35;
          }
LABEL_22:
          int v13 = *a3;
          break;
        }
      }
      ++k;
    }
  }
  if (v13) {
    *(_DWORD *)v13 += 2;
  }
  uint64_t v48 = v13;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)"'Automation.", 13, (uint64_t *)&v48, (uint64_t)"' was not found", 16, v98);
  Inspector::BackendDispatcher::reportProtocolError();
  char v26 = v98[0];
  v98[0] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v25);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  uint64_t v27 = v48;
  uint64_t v48 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v25);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
LABEL_35:
  uint64_t result = v97;
  uint64_t v97 = 0;
  if (result)
  {
    if (*result == 1)
    {
      uint64_t result = (_DWORD *)WTF::JSONImpl::Value::operator delete();
      if (!a1) {
        return result;
      }
      goto LABEL_41;
    }
    --*result;
  }
  if (!a1) {
    return result;
  }
LABEL_41:
  if (a1[2] == 1) {
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 8))(a1);
  }
  --a1[2];
  return result;
}

WTF *Inspector::AutomationBackendDispatcher::getBrowsingContexts(uint64_t a1)
{
  uint64_t v2 = *(void (****)(void, _DWORD **))(a1 + 24);
  WTF::fastMalloc((WTF *)0x28);
  uint64_t v3 = *(WTF **)(a1 + 16);
  ++*(_DWORD *)v3;
  unsigned __int8 v8 = v3;
  char v4 = (void *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
  *char v4 = &unk_1EE9B33E0;
  unsigned __int8 v9 = v4;
  (**v2)(v2, &v9);
  char v6 = v9;
  unsigned __int8 v9 = 0;
  if (v6)
  {
    if (v6[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
    }
    else {
      --v6[2];
    }
  }
  uint64_t result = v8;
  if (v8) {
    return WTF::RefCounted<Inspector::BackendDispatcher>::deref(v8, v5);
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::getBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  char v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  unsigned __int8 v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)&v16);
  unsigned __int8 v7 = v16;
  unsigned int v16 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    unsigned __int8 v9 = v16;
    unsigned int v16 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    char v11 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v11;
    unsigned int v15 = v11;
    uint64_t v12 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(void *)uint64_t v12 = &unk_1EE9B3400;
    unsigned int v16 = v12;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v10 + 8))(v10, &v17, &v16);
    int v13 = v16;
    unsigned int v16 = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 2) == 1) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v13 + 8))(v13);
      }
      else {
        --*((_DWORD *)v13 + 2);
      }
    }
    if (v15) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v15, v8);
    }
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::createBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  char v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  unsigned __int8 v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)&v17);
  unsigned __int8 v7 = v17;
  uint64_t v17 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    unsigned __int8 v9 = v17;
    uint64_t v17 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  else
  {
    uint64_t v17 = (WTF::StringImpl *)Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::BrowsingContextPresentation>(&v18);
    uint64_t v10 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    char v11 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v11;
    unsigned int v15 = v11;
    uint64_t v12 = (void *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *uint64_t v12 = &unk_1EE9B3420;
    unsigned int v16 = v12;
    (*(void (**)(uint64_t, WTF::StringImpl **, _DWORD **))(*(void *)v10 + 16))(v10, &v17, &v16);
    int v13 = v16;
    unsigned int v16 = 0;
    if (v13)
    {
      if (v13[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
      }
      else {
        --v13[2];
      }
    }
    if (v15) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v15, v8);
    }
  }
  uint64_t result = v18;
  int v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::closeBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  char v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  unsigned __int8 v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)&v14);
  unsigned __int8 v7 = v14;
  int v14 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_10:
    uint64_t v10 = v14;
    int v14 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    goto LABEL_14;
  }
  unsigned __int8 v9 = (WTF::JSONImpl::Object *)(*(void *(**)(WTF::StringImpl **__return_ptr))(**(void **)(a1 + 24) + 24))(&v14);
  if (v15)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create((uint64_t *)&v13, v9);
    Inspector::BackendDispatcher::sendResponse();
    uint64_t v12 = v13;
    int v13 = 0;
    if (v12)
    {
      if (*v12 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v12;
      }
    }
  }
  if (v15) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t result = v16;
  unsigned int v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::deleteSession(uint64_t a1)
{
  BOOL v1 = (WTF::JSONImpl::Object *)(*(void *(**)(WTF::StringImpl **__return_ptr))(**(void **)(a1 + 24) + 32))(&v5);
  if (v6)
  {
    uint64_t result = (WTF::StringImpl *)Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create((uint64_t *)&v4, v1);
    Inspector::BackendDispatcher::sendResponse();
    uint64_t result = v4;
    char v4 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1) {
        uint64_t result = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*(_DWORD *)result;
      }
    }
  }
  if (v6)
  {
    uint64_t result = v5;
    unsigned __int8 v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::switchToBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v23);
  unsigned __int8 v8 = v23;
  uint64_t v23 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v22);
  uint64_t v12 = v22;
  char v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    int v14 = v22;
    char v22 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    unsigned int v16 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v16;
    uint64_t v21 = v16;
    uint64_t v17 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(void *)uint64_t v17 = &unk_1EE9B3440;
    char v22 = v17;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v15 + 40))(v15, &v24, &v23, &v22);
    int v18 = v22;
    char v22 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 2) == 1) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v18 + 8))(v18);
      }
      else {
        --*((_DWORD *)v18 + 2);
      }
    }
    if (v21) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v21, v13);
    }
  }
  uint64_t v19 = v23;
  uint64_t v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v13);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t result = v24;
  char v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::setWindowFrameOfBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v30);
  unsigned __int8 v8 = v30;
  uint64_t v30 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v28 = v30;
  Inspector::BackendDispatcher::getObject(v9, v10, (const WTF::String *)&v28);
  uint64_t v12 = v28;
  uint64_t v28 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getObject(v13, v14, (const WTF::String *)&v27);
  unsigned int v16 = v27;
  uint64_t v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    int v18 = v27;
    uint64_t v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v17);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    char v20 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v20;
    char v26 = v20;
    uint64_t v21 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(void *)uint64_t v21 = &unk_1EE9B3460;
    uint64_t v27 = v21;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v19 + 48))(v19, &v29, &v30, &v28, &v27);
    char v22 = v27;
    uint64_t v27 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 2) == 1) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v22 + 8))(v22);
      }
      else {
        --*((_DWORD *)v22 + 2);
      }
    }
    if (v26) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v26, v17);
    }
  }
  uint64_t v23 = v28;
  uint64_t v28 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v23;
    }
  }
  char v24 = v30;
  uint64_t v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v24;
    }
  }
  uint64_t result = v29;
  uint64_t v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::maximizeWindowOfBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  char v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  unsigned __int8 v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)&v16);
  unsigned __int8 v7 = v16;
  unsigned int v16 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    unsigned __int8 v9 = v16;
    unsigned int v16 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    char v11 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v11;
    uint64_t v15 = v11;
    uint64_t v12 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(void *)uint64_t v12 = &unk_1EE9B3480;
    unsigned int v16 = v12;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v10 + 56))(v10, &v17, &v16);
    int v13 = v16;
    unsigned int v16 = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 2) == 1) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v13 + 8))(v13);
      }
      else {
        --*((_DWORD *)v13 + 2);
      }
    }
    if (v15) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v15, v8);
    }
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::hideWindowOfBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  char v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  unsigned __int8 v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)&v16);
  unsigned __int8 v7 = v16;
  unsigned int v16 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    unsigned __int8 v9 = v16;
    unsigned int v16 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    char v11 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v11;
    uint64_t v15 = v11;
    uint64_t v12 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(void *)uint64_t v12 = &unk_1EE9B34A0;
    unsigned int v16 = v12;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v10 + 64))(v10, &v17, &v16);
    int v13 = v16;
    unsigned int v16 = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 2) == 1) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v13 + 8))(v13);
      }
      else {
        --*((_DWORD *)v13 + 2);
      }
    }
    if (v15) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v15, v8);
    }
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::navigateBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)v32);
  unsigned __int8 v8 = v32[0];
  v32[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unsigned int v34 = v32[0];
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v34);
  uint64_t v12 = v34;
  unsigned int v34 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unsigned int v33 = v32[0];
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v33);
  unsigned int v16 = v33;
  unsigned int v33 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v32[0] = (WTF::StringImpl *)Inspector::BackendDispatcher::getDouble(v17, v18, (const WTF::String *)&v33);
  v32[1] = v19;
  char v20 = v33;
  unsigned int v33 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v19);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    char v22 = v33;
    unsigned int v33 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v21);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  else
  {
    unsigned int v33 = (WTF::StringImpl *)Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::PageLoadStrategy>(&v34);
    uint64_t v23 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    char v24 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v24;
    uint64_t v30 = v24;
    int v25 = (void *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *int v25 = &unk_1EE9B34C0;
    int v31 = v25;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, _DWORD **))(*(void *)v23 + 72))(v23, &v36, &v35, &v33, v32, &v31);
    char v26 = v31;
    int v31 = 0;
    if (v26)
    {
      if (v26[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v26 + 8))(v26);
      }
      else {
        --v26[2];
      }
    }
    if (v30) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v30, v21);
    }
  }
  uint64_t v27 = v34;
  unsigned int v34 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v21);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  uint64_t v28 = v35;
  char v35 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v21);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  uint64_t result = v36;
  char v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::goBackInBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)v28);
  unsigned __int8 v8 = v28[0];
  v28[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)v28);
  uint64_t v12 = v28[0];
  v28[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28[0] = (WTF::StringImpl *)Inspector::BackendDispatcher::getDouble(v13, v14, (const WTF::String *)&v27);
  v28[1] = v15;
  unsigned int v16 = v27;
  uint64_t v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    int v18 = v27;
    uint64_t v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v17);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  else
  {
    uint64_t v27 = (WTF::StringImpl *)Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::PageLoadStrategy>(&v29);
    uint64_t v19 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    char v20 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v20;
    int v25 = v20;
    uint64_t v21 = (void *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *uint64_t v21 = &unk_1EE9B34E0;
    char v26 = v21;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, _DWORD **))(*(void *)v19 + 80))(v19, &v30, &v27, v28, &v26);
    char v22 = v26;
    char v26 = 0;
    if (v22)
    {
      if (v22[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v22 + 8))(v22);
      }
      else {
        --v22[2];
      }
    }
    if (v25) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v25, v17);
    }
  }
  uint64_t v23 = v29;
  uint64_t v29 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v17);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  uint64_t result = v30;
  uint64_t v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::goForwardInBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)v28);
  unsigned __int8 v8 = v28[0];
  v28[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)v28);
  uint64_t v12 = v28[0];
  v28[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28[0] = (WTF::StringImpl *)Inspector::BackendDispatcher::getDouble(v13, v14, (const WTF::String *)&v27);
  v28[1] = v15;
  unsigned int v16 = v27;
  uint64_t v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    int v18 = v27;
    uint64_t v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v17);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  else
  {
    uint64_t v27 = (WTF::StringImpl *)Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::PageLoadStrategy>(&v29);
    uint64_t v19 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    char v20 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v20;
    int v25 = v20;
    uint64_t v21 = (void *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *uint64_t v21 = &unk_1EE9B3500;
    char v26 = v21;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, _DWORD **))(*(void *)v19 + 88))(v19, &v30, &v27, v28, &v26);
    char v22 = v26;
    char v26 = 0;
    if (v22)
    {
      if (v22[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v22 + 8))(v22);
      }
      else {
        --v22[2];
      }
    }
    if (v25) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v25, v17);
    }
  }
  uint64_t v23 = v29;
  uint64_t v29 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v17);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  uint64_t result = v30;
  uint64_t v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::reloadBrowsingContext(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)v28);
  unsigned __int8 v8 = v28[0];
  v28[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)v28);
  uint64_t v12 = v28[0];
  v28[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v28[0] = (WTF::StringImpl *)Inspector::BackendDispatcher::getDouble(v13, v14, (const WTF::String *)&v27);
  v28[1] = v15;
  unsigned int v16 = v27;
  uint64_t v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    int v18 = v27;
    uint64_t v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v17);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  else
  {
    uint64_t v27 = (WTF::StringImpl *)Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::PageLoadStrategy>(&v29);
    uint64_t v19 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    char v20 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v20;
    int v25 = v20;
    uint64_t v21 = (void *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *uint64_t v21 = &unk_1EE9B3520;
    char v26 = v21;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, _DWORD **))(*(void *)v19 + 96))(v19, &v30, &v27, v28, &v26);
    char v22 = v26;
    char v26 = 0;
    if (v22)
    {
      if (v22[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v22 + 8))(v22);
      }
      else {
        --v22[2];
      }
    }
    if (v25) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v25, v17);
    }
  }
  uint64_t v23 = v29;
  uint64_t v29 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v17);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  uint64_t result = v30;
  uint64_t v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::waitForNavigationToComplete(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)v32);
  unsigned __int8 v8 = v32[0];
  v32[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unsigned int v34 = v32[0];
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v34);
  uint64_t v12 = v34;
  unsigned int v34 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unsigned int v33 = v32[0];
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v33);
  unsigned int v16 = v33;
  unsigned int v33 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v32[0] = (WTF::StringImpl *)Inspector::BackendDispatcher::getDouble(v17, v18, (const WTF::String *)&v33);
  v32[1] = v19;
  char v20 = v33;
  unsigned int v33 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v19);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    char v22 = v33;
    unsigned int v33 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v21);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  else
  {
    unsigned int v33 = (WTF::StringImpl *)Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::PageLoadStrategy>(&v34);
    uint64_t v23 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    char v24 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v24;
    uint64_t v30 = v24;
    int v25 = (void *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *int v25 = &unk_1EE9B3540;
    int v31 = v25;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, _DWORD **))(*(void *)v23 + 104))(v23, &v36, &v35, &v33, v32, &v31);
    char v26 = v31;
    int v31 = 0;
    if (v26)
    {
      if (v26[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v26 + 8))(v26);
      }
      else {
        --v26[2];
      }
    }
    if (v30) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v30, v21);
    }
  }
  uint64_t v27 = v34;
  unsigned int v34 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v21);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  uint64_t v28 = v35;
  char v35 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v21);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  uint64_t result = v36;
  char v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::evaluateJavaScriptFunction(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)v46);
  unsigned __int8 v8 = v46[0];
  v46[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v51 = v46[0];
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v51);
  uint64_t v12 = v51;
  long long v51 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v50 = v46[0];
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v50);
  unsigned int v16 = v50;
  long long v50 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v49 = v46[0];
  Inspector::BackendDispatcher::getArray(v17, v18, (const WTF::String *)&v49);
  char v20 = v49;
  long long v49 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v19);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t v21 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v22 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v49 = v46[0];
  __int16 Boolean = Inspector::BackendDispatcher::getBoolean(v21, v22, (const WTF::String *)&v49);
  char v24 = v49;
  long long v49 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v23);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  int v25 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v26 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v49 = v46[0];
  __int16 v47 = Inspector::BackendDispatcher::getBoolean(v25, v26, (const WTF::String *)&v49);
  uint64_t v28 = v49;
  long long v49 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v27);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  uint64_t v29 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v30 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v49 = v46[0];
  v46[0] = (WTF::StringImpl *)Inspector::BackendDispatcher::getDouble(v29, v30, (const WTF::String *)&v49);
  v46[1] = v31;
  char v32 = v49;
  long long v49 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v31);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    unsigned int v34 = v49;
    long long v49 = 0;
    if (!v34) {
      goto LABEL_42;
    }
    int v35 = *(_DWORD *)v34 - 2;
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::destroy(v34, v33);
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  uint64_t v36 = *(void *)(a1 + 24);
  long long v49 = v50;
  long long v50 = 0;
  WTF::fastMalloc((WTF *)0x28);
  unsigned int v37 = *(WTF **)(a1 + 16);
  ++*(_DWORD *)v37;
  uint64_t v44 = v37;
  uint64_t v38 = (void *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
  *uint64_t v38 = &unk_1EE9B3560;
  uint64_t v45 = v38;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, __int16 *, __int16 *, WTF::StringImpl **, _DWORD **))(*(void *)v36 + 112))(v36, &v53, &v52, &v51, &v49, &Boolean, &v47, v46, &v45);
  char v39 = v45;
  uint64_t v45 = 0;
  if (v39)
  {
    if (v39[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v39 + 8))(v39);
    }
    else {
      --v39[2];
    }
  }
  if (v44) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v44, v33);
  }
  unsigned int v34 = v49;
  long long v49 = 0;
  if (v34)
  {
    int v35 = *(_DWORD *)v34 - 1;
    if (*(_DWORD *)v34 != 1)
    {
LABEL_41:
      *(_DWORD *)unsigned int v34 = v35;
      goto LABEL_42;
    }
    WTF::JSONImpl::Value::operator delete();
  }
LABEL_42:
  uint64_t v40 = v50;
  long long v50 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v40;
    }
  }
  int v41 = v51;
  long long v51 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, v33);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  uint64_t v42 = v52;
  long long v52 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, v33);
    }
    else {
      *(_DWORD *)v42 -= 2;
    }
  }
  uint64_t result = v53;
  long long v53 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v33);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::performMouseInteraction(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v56);
  unsigned __int8 v8 = (WTF::StringImpl *)v56;
  long long v56 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v53 = (WTF::StringImpl *)v56;
  Inspector::BackendDispatcher::getObject(v9, v10, (const WTF::String *)&v53);
  uint64_t v12 = v53;
  long long v53 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v52 = (WTF::StringImpl *)v56;
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v52);
  unsigned int v16 = v52;
  long long v52 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v51 = (WTF::StringImpl *)v56;
  Inspector::BackendDispatcher::getString(v17, v18, (const WTF::String *)&v51);
  char v20 = v51;
  long long v51 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v19);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t v21 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v22 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  long long v50 = (WTF::StringImpl *)v56;
  Inspector::BackendDispatcher::getArray(v21, v22, (const WTF::String *)&v50);
  char v24 = v50;
  long long v50 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v23);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    char v26 = (WTF::StringImpl *)v56;
    long long v56 = 0;
    if (!v26) {
      goto LABEL_31;
    }
LABEL_23:
    int v27 = *(_DWORD *)v26 - 2;
    if (*(_DWORD *)v26 != 2)
    {
LABEL_24:
      *(_DWORD *)char v26 = v27;
      goto LABEL_31;
    }
    WTF::StringImpl::destroy(v26, v25);
    goto LABEL_31;
  }
  uint64_t v28 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseButton>(&v53);
  if ((v28 & 0xFF00000000) == 0)
  {
    int v41 = v53;
    if (v53) {
      *(_DWORD *)v53 += 2;
    }
    long long v49 = v41;
    long long v56 = "Unknown button: ";
    uint64_t v57 = 17;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v56, (uint64_t *)&v49, &v50);
    if (v50)
    {
      Inspector::BackendDispatcher::reportProtocolError();
      uint64_t v42 = v50;
      long long v50 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2) {
          WTF::StringImpl::destroy(v42, v25);
        }
        else {
          *(_DWORD *)v42 -= 2;
        }
      }
      char v26 = v49;
      long long v49 = 0;
      if (!v26) {
        goto LABEL_31;
      }
      goto LABEL_23;
    }
    __break(0xC471u);
    goto LABEL_82;
  }
  uint64_t v29 = v28;
  uint64_t v30 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseInteraction>(&v52);
  if ((v30 & 0xFF00000000) == 0)
  {
    unint64_t v43 = v52;
    if (v52) {
      *(_DWORD *)v52 += 2;
    }
    uint64_t v48 = v43;
    long long v56 = "Unknown interaction: ";
    uint64_t v57 = 22;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v56, (uint64_t *)&v48, &v50);
    if (v50)
    {
      Inspector::BackendDispatcher::reportProtocolError();
      uint64_t v44 = v50;
      long long v50 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2) {
          WTF::StringImpl::destroy(v44, v25);
        }
        else {
          *(_DWORD *)v44 -= 2;
        }
      }
      char v26 = v48;
      uint64_t v48 = 0;
      if (!v26) {
        goto LABEL_31;
      }
      goto LABEL_23;
    }
    __break(0xC471u);
LABEL_82:
    JUMPOUT(0x1987CDC58);
  }
  uint64_t v31 = v30;
  uint64_t v32 = *(void *)(a1 + 24);
  long long v56 = v54;
  long long v54 = 0;
  long long v50 = v51;
  long long v51 = 0;
  WTF::fastMalloc((WTF *)0x28);
  unsigned int v33 = *(WTF **)(a1 + 16);
  ++*(_DWORD *)v33;
  char v46 = v33;
  unsigned int v34 = (void *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
  *unsigned int v34 = &unk_1EE9B3580;
  __int16 v47 = v34;
  (*(void (**)(uint64_t, WTF::StringImpl **, char **, uint64_t, uint64_t, WTF::StringImpl **, _DWORD **))(*(void *)v32 + 120))(v32, &v55, &v56, v29, v31, &v50, &v47);
  int v35 = v47;
  __int16 v47 = 0;
  if (v35)
  {
    if (v35[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v35 + 8))(v35);
    }
    else {
      --v35[2];
    }
  }
  if (v46) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v46, v25);
  }
  uint64_t v45 = v50;
  long long v50 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v45;
    }
  }
  char v26 = (WTF::StringImpl *)v56;
  long long v56 = 0;
  if (v26)
  {
    int v27 = *(_DWORD *)v26 - 1;
    if (*(_DWORD *)v26 != 1) {
      goto LABEL_24;
    }
    WTF::JSONImpl::Value::operator delete();
  }
LABEL_31:
  uint64_t v36 = v51;
  long long v51 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v36;
    }
  }
  unsigned int v37 = v52;
  long long v52 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2) {
      WTF::StringImpl::destroy(v37, v25);
    }
    else {
      *(_DWORD *)v37 -= 2;
    }
  }
  uint64_t v38 = v53;
  long long v53 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, v25);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  char v39 = v54;
  long long v54 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v39;
    }
  }
  uint64_t result = v55;
  long long v55 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::performKeyboardInteractions(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v25);
  unsigned __int8 v8 = v25;
  int v25 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getArray(v9, v10, (const WTF::String *)&v24);
  uint64_t v12 = v24;
  char v24 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    int v14 = v24;
    char v24 = 0;
    if (!v14) {
      goto LABEL_22;
    }
    int v15 = *(_DWORD *)v14 - 2;
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v13);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  uint64_t v16 = *(void *)(a1 + 24);
  char v24 = v25;
  int v25 = 0;
  WTF::fastMalloc((WTF *)0x28);
  uint64_t v17 = *(WTF **)(a1 + 16);
  ++*(_DWORD *)v17;
  char v22 = v17;
  int v18 = (void *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
  *int v18 = &unk_1EE9B35A0;
  uint64_t v23 = v18;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, _DWORD **))(*(void *)v16 + 128))(v16, &v26, &v24, &v23);
  uint64_t v19 = v23;
  uint64_t v23 = 0;
  if (v19)
  {
    if (v19[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v19 + 8))(v19);
    }
    else {
      --v19[2];
    }
  }
  if (v22) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v22, v13);
  }
  int v14 = v24;
  char v24 = 0;
  if (v14)
  {
    int v15 = *(_DWORD *)v14 - 1;
    if (*(_DWORD *)v14 != 1)
    {
LABEL_21:
      *(_DWORD *)int v14 = v15;
      goto LABEL_22;
    }
    WTF::JSONImpl::Value::operator delete();
  }
LABEL_22:
  char v20 = v25;
  int v25 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v20;
    }
  }
  uint64_t result = v26;
  char v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::performInteractionSequence(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v40);
  unsigned __int8 v8 = v40;
  uint64_t v40 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unsigned int v37 = v40;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v37);
  uint64_t v12 = v37;
  unsigned int v37 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v36 = v40;
  Inspector::BackendDispatcher::getArray(v13, v14, (const WTF::String *)&v36);
  uint64_t v16 = v36;
  uint64_t v36 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v36 = v40;
  Inspector::BackendDispatcher::getArray(v17, v18, (const WTF::String *)&v36);
  char v20 = v36;
  uint64_t v36 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v19);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    char v22 = v36;
    uint64_t v36 = 0;
    if (!v22) {
      goto LABEL_34;
    }
    int v23 = *(_DWORD *)v22 - 2;
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::destroy(v22, v21);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  uint64_t v24 = *(void *)(a1 + 24);
  uint64_t v36 = v37;
  unsigned int v37 = 0;
  int v35 = v40;
  uint64_t v40 = 0;
  WTF::fastMalloc((WTF *)0x28);
  int v25 = *(WTF **)(a1 + 16);
  ++*(_DWORD *)v25;
  unsigned int v33 = v25;
  char v26 = (void *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
  *char v26 = &unk_1EE9B35C0;
  unsigned int v34 = v26;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, _DWORD **))(*(void *)v24 + 136))(v24, &v39, &v38, &v36, &v35, &v34);
  int v27 = v34;
  unsigned int v34 = 0;
  if (v27)
  {
    if (v27[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v27 + 8))(v27);
    }
    else {
      --v27[2];
    }
  }
  if (v33) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v33, v21);
  }
  uint64_t v28 = v35;
  int v35 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v28;
    }
  }
  char v22 = v36;
  uint64_t v36 = 0;
  if (v22)
  {
    int v23 = *(_DWORD *)v22 - 1;
    if (*(_DWORD *)v22 != 1)
    {
LABEL_33:
      *(_DWORD *)char v22 = v23;
      goto LABEL_34;
    }
    WTF::JSONImpl::Value::operator delete();
  }
LABEL_34:
  uint64_t v29 = v40;
  uint64_t v40 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v29;
    }
  }
  uint64_t v30 = v37;
  unsigned int v37 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v30;
    }
  }
  uint64_t v31 = v38;
  uint64_t v38 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, v21);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  uint64_t result = v39;
  char v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::cancelInteractionSequence(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v23);
  unsigned __int8 v8 = v23;
  int v23 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v22);
  uint64_t v12 = v22;
  char v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    int v14 = v22;
    char v22 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    uint64_t v16 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v16;
    uint64_t v21 = v16;
    uint64_t v17 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(void *)uint64_t v17 = &unk_1EE9B35E0;
    char v22 = v17;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v15 + 144))(v15, &v24, &v23, &v22);
    int v18 = v22;
    char v22 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 2) == 1) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v18 + 8))(v18);
      }
      else {
        --*((_DWORD *)v18 + 2);
      }
    }
    if (v21) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v21, v13);
    }
  }
  uint64_t v19 = v23;
  int v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v13);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t result = v24;
  uint64_t v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::takeScreenshot(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v41);
  unsigned __int8 v8 = v41;
  int v41 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v38 = v41;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v38);
  uint64_t v12 = v38;
  uint64_t v38 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unsigned int v37 = v41;
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v37);
  uint64_t v16 = v37;
  unsigned int v37 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unsigned int v37 = v41;
  __int16 Boolean = Inspector::BackendDispatcher::getBoolean(v17, v18, (const WTF::String *)&v37);
  char v20 = v37;
  unsigned int v37 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v19);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t v21 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v22 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  __int16 v35 = Inspector::BackendDispatcher::getBoolean(v21, v22, (const WTF::String *)&v41);
  uint64_t v24 = v41;
  int v41 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v23);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    char v26 = v41;
    int v41 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v25);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
  else
  {
    uint64_t v27 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    uint64_t v28 = *(WTF::StringImpl **)(a1 + 16);
    ++*(_DWORD *)v28;
    unsigned int v37 = v28;
    uint64_t v29 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(void *)uint64_t v29 = &unk_1EE9B3600;
    int v41 = v29;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, __int16 *, __int16 *, WTF::StringImpl **))(*(void *)v27 + 152))(v27, &v40, &v39, &v38, &Boolean, &v35, &v41);
    uint64_t v30 = v41;
    int v41 = 0;
    if (v30)
    {
      if (*((_DWORD *)v30 + 2) == 1) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v30 + 8))(v30);
      }
      else {
        --*((_DWORD *)v30 + 2);
      }
    }
    uint64_t v31 = v37;
    unsigned int v37 = 0;
    if (v31) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v31, v25);
    }
  }
  uint64_t v32 = v38;
  uint64_t v38 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v25);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  unsigned int v33 = v39;
  char v39 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, v25);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  uint64_t result = v40;
  uint64_t v40 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::resolveChildFrameHandle(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v41);
  unsigned __int8 v8 = v41;
  int v41 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Integer = v41;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&Integer);
  uint64_t v12 = Integer;
  Integer = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unsigned int v37 = v41;
  Integer = (WTF::StringImpl *)Inspector::BackendDispatcher::getInteger(v13, v14, (const WTF::String *)&v37);
  uint64_t v16 = v37;
  unsigned int v37 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v36 = v41;
  Inspector::BackendDispatcher::getString(v17, v18, (const WTF::String *)&v36);
  char v20 = v36;
  uint64_t v36 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v19);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t v21 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v22 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v36 = v41;
  Inspector::BackendDispatcher::getString(v21, v22, (const WTF::String *)&v36);
  uint64_t v24 = v36;
  uint64_t v36 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v23);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    char v26 = v36;
    uint64_t v36 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v25);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
  else
  {
    uint64_t v27 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    uint64_t v28 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v28;
    __int16 v35 = v28;
    uint64_t v29 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(void *)uint64_t v29 = &unk_1EE9B3620;
    uint64_t v36 = v29;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v27 + 160))(v27, &v40, &v39, &Integer, &v37, &v41, &v36);
    uint64_t v30 = v36;
    uint64_t v36 = 0;
    if (v30)
    {
      if (*((_DWORD *)v30 + 2) == 1) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v30 + 8))(v30);
      }
      else {
        --*((_DWORD *)v30 + 2);
      }
    }
    if (v35) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v35, v25);
    }
  }
  uint64_t v31 = v41;
  int v41 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, v25);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  uint64_t v32 = v37;
  unsigned int v37 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v25);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  unsigned int v33 = v39;
  char v39 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, v25);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  uint64_t result = v40;
  uint64_t v40 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::resolveParentFrameHandle(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v23);
  unsigned __int8 v8 = v23;
  int v23 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v22);
  uint64_t v12 = v22;
  char v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    int v14 = v22;
    char v22 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    uint64_t v16 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v16;
    uint64_t v21 = v16;
    uint64_t v17 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(void *)uint64_t v17 = &unk_1EE9B3640;
    char v22 = v17;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v15 + 168))(v15, &v24, &v23, &v22);
    int v18 = v22;
    char v22 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 2) == 1) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v18 + 8))(v18);
      }
      else {
        --*((_DWORD *)v18 + 2);
      }
    }
    if (v21) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v21, v13);
    }
  }
  uint64_t v19 = v23;
  int v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v13);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t result = v24;
  uint64_t v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::computeElementLayout(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)v47);
  unsigned __int8 v8 = v47[0];
  v47[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v44 = v47[0];
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v44);
  uint64_t v12 = v44;
  uint64_t v44 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unint64_t v43 = v47[0];
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v43);
  uint64_t v16 = v43;
  unint64_t v43 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unint64_t v43 = v47[0];
  __int16 Boolean = Inspector::BackendDispatcher::getBoolean(v17, v18, (const WTF::String *)&v43);
  char v20 = v43;
  unint64_t v43 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v19);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t v21 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v22 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  int v41 = v47[0];
  Inspector::BackendDispatcher::getString(v21, v22, (const WTF::String *)&v41);
  uint64_t v24 = v41;
  int v41 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v23);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    char v26 = v47[0];
    v47[0] = 0;
    if (v26)
    {
LABEL_23:
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v25);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
  else
  {
    uint64_t v27 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::CoordinateSystem>(&v43);
    if ((v27 & 0xFF00000000) != 0)
    {
      uint64_t v28 = v27;
      uint64_t v29 = *(void *)(a1 + 24);
      WTF::fastMalloc((WTF *)0x28);
      uint64_t v30 = *(WTF::StringImpl **)(a1 + 16);
      ++*(_DWORD *)v30;
      int v41 = v30;
      uint64_t v31 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
      *(void *)uint64_t v31 = &unk_1EE9B3660;
      v47[0] = v31;
      (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, __int16 *, uint64_t, WTF::StringImpl **))(*(void *)v29 + 176))(v29, &v46, &v45, &v44, &Boolean, v28, v47);
      uint64_t v32 = v47[0];
      v47[0] = 0;
      if (v32)
      {
        if (*((_DWORD *)v32 + 2) == 1) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v32 + 8))(v32);
        }
        else {
          --*((_DWORD *)v32 + 2);
        }
      }
      uint64_t v36 = v41;
      int v41 = 0;
      if (v36) {
        WTF::RefCounted<Inspector::BackendDispatcher>::deref(v36, v25);
      }
      goto LABEL_39;
    }
    unsigned int v33 = v43;
    if (v43) {
      *(_DWORD *)v43 += 2;
    }
    uint64_t v40 = v33;
    v47[0] = (WTF::StringImpl *)"Unknown coordinateSystem: ";
    v47[1] = (WTF::StringImpl *)27;
    uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)v47, (uint64_t *)&v40, &v41);
    if (!v41)
    {
      __break(0xC471u);
      return result;
    }
    Inspector::BackendDispatcher::reportProtocolError();
    __int16 v35 = v41;
    int v41 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2) {
        WTF::StringImpl::destroy(v35, v25);
      }
      else {
        *(_DWORD *)v35 -= 2;
      }
    }
    char v26 = v40;
    uint64_t v40 = 0;
    if (v26) {
      goto LABEL_23;
    }
  }
LABEL_39:
  unsigned int v37 = v43;
  unint64_t v43 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2) {
      WTF::StringImpl::destroy(v37, v25);
    }
    else {
      *(_DWORD *)v37 -= 2;
    }
  }
  uint64_t v38 = v44;
  uint64_t v44 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, v25);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  char v39 = v45;
  uint64_t v45 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2) {
      WTF::StringImpl::destroy(v39, v25);
    }
    else {
      *(_DWORD *)v39 -= 2;
    }
  }
  uint64_t result = v46;
  char v46 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::getComputedRole(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v30);
  unsigned __int8 v8 = v30;
  uint64_t v30 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v28 = v30;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v28);
  uint64_t v12 = v28;
  uint64_t v28 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v27);
  uint64_t v16 = v27;
  uint64_t v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    int v18 = v27;
    uint64_t v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v17);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    char v20 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v20;
    char v26 = v20;
    uint64_t v21 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(void *)uint64_t v21 = &unk_1EE9B3680;
    uint64_t v27 = v21;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v19 + 184))(v19, &v29, &v30, &v28, &v27);
    char v22 = v27;
    uint64_t v27 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 2) == 1) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v22 + 8))(v22);
      }
      else {
        --*((_DWORD *)v22 + 2);
      }
    }
    if (v26) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v26, v17);
    }
  }
  int v23 = v28;
  uint64_t v28 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v17);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  uint64_t v24 = v30;
  uint64_t v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v17);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  uint64_t result = v29;
  uint64_t v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::getComputedLabel(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v30);
  unsigned __int8 v8 = v30;
  uint64_t v30 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v28 = v30;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v28);
  uint64_t v12 = v28;
  uint64_t v28 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v27);
  uint64_t v16 = v27;
  uint64_t v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    int v18 = v27;
    uint64_t v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v17);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    char v20 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v20;
    char v26 = v20;
    uint64_t v21 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(void *)uint64_t v21 = &unk_1EE9B36A0;
    uint64_t v27 = v21;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v19 + 192))(v19, &v29, &v30, &v28, &v27);
    char v22 = v27;
    uint64_t v27 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 2) == 1) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v22 + 8))(v22);
      }
      else {
        --*((_DWORD *)v22 + 2);
      }
    }
    if (v26) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v26, v17);
    }
  }
  int v23 = v28;
  uint64_t v28 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v17);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  uint64_t v24 = v30;
  uint64_t v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v17);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  uint64_t result = v29;
  uint64_t v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::selectOptionElement(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v30);
  unsigned __int8 v8 = v30;
  uint64_t v30 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v28 = v30;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v28);
  uint64_t v12 = v28;
  uint64_t v28 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v27);
  uint64_t v16 = v27;
  uint64_t v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    int v18 = v27;
    uint64_t v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v17);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    char v20 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v20;
    char v26 = v20;
    uint64_t v21 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(void *)uint64_t v21 = &unk_1EE9B36C0;
    uint64_t v27 = v21;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v19 + 200))(v19, &v29, &v30, &v28, &v27);
    char v22 = v27;
    uint64_t v27 = 0;
    if (v22)
    {
      if (*((_DWORD *)v22 + 2) == 1) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v22 + 8))(v22);
      }
      else {
        --*((_DWORD *)v22 + 2);
      }
    }
    if (v26) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v26, v17);
    }
  }
  int v23 = v28;
  uint64_t v28 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v17);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  uint64_t v24 = v30;
  uint64_t v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v17);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  uint64_t result = v29;
  uint64_t v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::isShowingJavaScriptDialog(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  char v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  unsigned __int8 v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)v29);
  unsigned __int8 v7 = v29[0];
  v29[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    unsigned __int8 v9 = v29[0];
    v29[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  else
  {
    uint64_t v10 = (WTF::JSONImpl::Object *)(*(void *(**)(uint64_t *__return_ptr))(**(void **)(a1 + 24) + 208))(&v25);
    if (v26)
    {
      if (v26 != 1)
      {
        uint64_t v22 = std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF::StringImpl *)Inspector::AutomationBackendDispatcher::dismissCurrentJavaScriptDialog(v22);
      }
      Inspector::BackendDispatcher::reportProtocolError();
    }
    else
    {
      char v11 = (WTF::JSONImpl::Value *)v25;
      WTF::JSONImpl::Object::create((uint64_t *)&v24, v10);
      uint64_t v12 = (uint64_t)v24;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v11);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v12 + 16), &v23, (uint64_t *)&v28, (uint64_t)v29);
      if (v30)
      {
        int v14 = (uint64_t *)(v12 + 24);
        uint64_t v15 = *(unsigned int *)(v12 + 36);
        if (v15 == *(_DWORD *)(v12 + 32))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v14, (unint64_t)&v23);
        }
        else
        {
          uint64_t v16 = *v14;
          uint64_t v17 = v23;
          if (v23) {
            *(_DWORD *)v23 += 2;
          }
          *(void *)(v16 + 8 * v15) = v17;
          *(_DWORD *)(v12 + 36) = v15 + 1;
        }
      }
      int v18 = v28;
      uint64_t v28 = 0;
      if (v18)
      {
        if (*v18 == 1) {
          WTF::JSONImpl::Value::operator delete();
        }
        else {
          --*v18;
        }
      }
      uint64_t v19 = v23;
      int v23 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v13);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse();
      char v20 = v24;
      uint64_t v24 = 0;
      if (v20)
      {
        if (*v20 == 1) {
          WTF::JSONImpl::Value::operator delete();
        }
        else {
          --*v20;
        }
      }
    }
    if (v26 != -1) {
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1EE9B3750[v26])(v29, &v25);
    }
  }
  uint64_t result = v27;
  uint64_t v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::dismissCurrentJavaScriptDialog(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  char v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  unsigned __int8 v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)&v14);
  unsigned __int8 v7 = v14;
  int v14 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_10:
    uint64_t v10 = v14;
    int v14 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    goto LABEL_14;
  }
  unsigned __int8 v9 = (WTF::JSONImpl::Object *)(*(void *(**)(WTF::StringImpl **__return_ptr))(**(void **)(a1 + 24)
                                                                                          + 216))(&v14);
  if (v15)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create((uint64_t *)&v13, v9);
    Inspector::BackendDispatcher::sendResponse();
    uint64_t v12 = v13;
    int v13 = 0;
    if (v12)
    {
      if (*v12 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v12;
      }
    }
  }
  if (v15) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::acceptCurrentJavaScriptDialog(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  char v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  unsigned __int8 v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)&v14);
  unsigned __int8 v7 = v14;
  int v14 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_10:
    uint64_t v10 = v14;
    int v14 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    goto LABEL_14;
  }
  unsigned __int8 v9 = (WTF::JSONImpl::Object *)(*(void *(**)(WTF::StringImpl **__return_ptr))(**(void **)(a1 + 24)
                                                                                          + 224))(&v14);
  if (v15)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create((uint64_t *)&v13, v9);
    Inspector::BackendDispatcher::sendResponse();
    uint64_t v12 = v13;
    int v13 = 0;
    if (v12)
    {
      if (*v12 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v12;
      }
    }
  }
  if (v15) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::messageOfCurrentJavaScriptDialog(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  char v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  unsigned __int8 v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)v31);
  unsigned __int8 v7 = v31[0];
  v31[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    unsigned __int8 v9 = v31[0];
    v31[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  else
  {
    uint64_t v10 = (WTF::JSONImpl::Object *)(*(void *(**)(WTF::StringImpl **__return_ptr))(**(void **)(a1 + 24)
                                                                                             + 232))(&v27);
    if (v28)
    {
      if (v28 != 1)
      {
        uint64_t v23 = std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF::StringImpl *)Inspector::AutomationBackendDispatcher::setUserInputForCurrentJavaScriptPrompt(v23);
      }
      Inspector::BackendDispatcher::reportProtocolError();
    }
    else
    {
      int v26 = v27;
      uint64_t v27 = 0;
      WTF::JSONImpl::Object::create((uint64_t *)&v25, v10);
      uint64_t v11 = (uint64_t)v25;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((uint64_t *)&v30, (WTF::JSONImpl::Value *)&v26, v12);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v11 + 16), &v24, (uint64_t *)&v30, (uint64_t)v31);
      if (v32)
      {
        int v14 = (uint64_t *)(v11 + 24);
        uint64_t v15 = *(unsigned int *)(v11 + 36);
        if (v15 == *(_DWORD *)(v11 + 32))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v14, (unint64_t)&v24);
        }
        else
        {
          uint64_t v16 = *v14;
          uint64_t v17 = v24;
          if (v24) {
            *(_DWORD *)v24 += 2;
          }
          *(void *)(v16 + 8 * v15) = v17;
          *(_DWORD *)(v11 + 36) = v15 + 1;
        }
      }
      int v18 = v30;
      char v30 = 0;
      if (v18)
      {
        if (*v18 == 1) {
          WTF::JSONImpl::Value::operator delete();
        }
        else {
          --*v18;
        }
      }
      uint64_t v19 = v24;
      uint64_t v24 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v13);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse();
      char v20 = v25;
      uint64_t v25 = 0;
      if (v20)
      {
        if (*v20 == 1) {
          WTF::JSONImpl::Value::operator delete();
        }
        else {
          --*v20;
        }
      }
      uint64_t v21 = v26;
      int v26 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v8);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
    }
    if (v28 != -1) {
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9B3760[v28])(v31, &v27);
    }
  }
  uint64_t result = v29;
  uint64_t v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::setUserInputForCurrentJavaScriptPrompt(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v20);
  unsigned __int8 v8 = v20;
  char v20 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v20);
  uint64_t v12 = v20;
  char v20 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_14:
    uint64_t v15 = v20;
    char v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v13);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    goto LABEL_18;
  }
  int v14 = (WTF::JSONImpl::Object *)(*(void *(**)(WTF::StringImpl **__return_ptr))(**(void **)(a1 + 24)
                                                                                           + 240))(&v20);
  if (v21)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create((uint64_t *)&v19, v14);
    Inspector::BackendDispatcher::sendResponse();
    int v18 = v19;
    uint64_t v19 = 0;
    if (v18)
    {
      if (*v18 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v18;
      }
    }
  }
  if (v21) {
    goto LABEL_14;
  }
LABEL_18:
  uint64_t v16 = v22;
  uint64_t v22 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v13);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t result = v23;
  uint64_t v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::setFilesToSelectForFileUpload(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v25);
  unsigned __int8 v8 = v25;
  uint64_t v25 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  int v28 = v25;
  Inspector::BackendDispatcher::getArray(v9, v10, (const WTF::String *)&v28);
  uint64_t v12 = v28;
  int v28 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v27 = v25;
  Inspector::BackendDispatcher::getArray(v13, v14, (const WTF::String *)&v27);
  uint64_t v16 = v27;
  uint64_t v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_22:
    char v20 = v25;
    uint64_t v25 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v17);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(a1 + 24);
  uint64_t v27 = v29;
  uint64_t v29 = 0;
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(void *)v18 + 248))(&v25);
  uint64_t v19 = v27;
  uint64_t v27 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1) {
      uint64_t v19 = (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v19;
    }
  }
  if (v26)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create((uint64_t *)&v27, v19);
    Inspector::BackendDispatcher::sendResponse();
    uint64_t v24 = v27;
    uint64_t v27 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*(_DWORD *)v24;
      }
    }
  }
  if (v26) {
    goto LABEL_22;
  }
LABEL_26:
  char v21 = v28;
  int v28 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v21;
    }
  }
  uint64_t v22 = v29;
  uint64_t v29 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v22;
    }
  }
  uint64_t result = v30;
  char v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::setFilesForInputFileUpload(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v38);
  unsigned __int8 v8 = v38;
  uint64_t v38 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  __int16 v35 = v38;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v35);
  uint64_t v12 = v35;
  __int16 v35 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unsigned int v34 = v38;
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v34);
  uint64_t v16 = v34;
  unsigned int v34 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unsigned int v34 = v38;
  Inspector::BackendDispatcher::getArray(v17, v18, (const WTF::String *)&v34);
  char v20 = v34;
  unsigned int v34 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v19);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    uint64_t v22 = v34;
    unsigned int v34 = 0;
    if (!v22) {
      goto LABEL_30;
    }
    int v23 = *(_DWORD *)v22 - 2;
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::destroy(v22, v21);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  uint64_t v24 = *(void *)(a1 + 24);
  unsigned int v34 = v38;
  uint64_t v38 = 0;
  WTF::fastMalloc((WTF *)0x28);
  uint64_t v25 = *(WTF **)(a1 + 16);
  ++*(_DWORD *)v25;
  char v32 = v25;
  char v26 = (void *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
  *char v26 = &unk_1EE9B36E0;
  unsigned int v33 = v26;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, _DWORD **))(*(void *)v24 + 256))(v24, &v37, &v36, &v35, &v34, &v33);
  uint64_t v27 = v33;
  unsigned int v33 = 0;
  if (v27)
  {
    if (v27[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v27 + 8))(v27);
    }
    else {
      --v27[2];
    }
  }
  if (v32) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v32, v21);
  }
  uint64_t v22 = v34;
  unsigned int v34 = 0;
  if (v22)
  {
    int v23 = *(_DWORD *)v22 - 1;
    if (*(_DWORD *)v22 != 1)
    {
LABEL_29:
      *(_DWORD *)uint64_t v22 = v23;
      goto LABEL_30;
    }
    WTF::JSONImpl::Value::operator delete();
  }
LABEL_30:
  int v28 = v38;
  uint64_t v38 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v28;
    }
  }
  uint64_t v29 = v35;
  __int16 v35 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v21);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  char v30 = v36;
  uint64_t v36 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v21);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  uint64_t result = v37;
  unsigned int v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::getAllCookies(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  char v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  unsigned __int8 v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)&v16);
  unsigned __int8 v7 = v16;
  uint64_t v16 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    unsigned __int8 v9 = v16;
    uint64_t v16 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    uint64_t v11 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v11;
    uint64_t v15 = v11;
    uint64_t v12 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(void *)uint64_t v12 = &unk_1EE9B3700;
    uint64_t v16 = v12;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v10 + 264))(v10, &v17, &v16);
    int v13 = v16;
    uint64_t v16 = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 2) == 1) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v13 + 8))(v13);
      }
      else {
        --*((_DWORD *)v13 + 2);
      }
    }
    if (v15) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v15, v8);
    }
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::deleteSingleCookie(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v23);
  unsigned __int8 v8 = v23;
  int v23 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v22);
  uint64_t v12 = v22;
  uint64_t v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    int v14 = v22;
    uint64_t v22 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 24);
    WTF::fastMalloc((WTF *)0x28);
    uint64_t v16 = *(WTF **)(a1 + 16);
    ++*(_DWORD *)v16;
    char v21 = v16;
    uint64_t v17 = (WTF::StringImpl *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
    *(void *)uint64_t v17 = &unk_1EE9B3720;
    uint64_t v22 = v17;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v15 + 272))(v15, &v24, &v23, &v22);
    uint64_t v18 = v22;
    uint64_t v22 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 2) == 1) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v18 + 8))(v18);
      }
      else {
        --*((_DWORD *)v18 + 2);
      }
    }
    if (v21) {
      WTF::RefCounted<Inspector::BackendDispatcher>::deref(v21, v13);
    }
  }
  uint64_t v19 = v23;
  int v23 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v13);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t result = v24;
  uint64_t v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::addSingleCookie(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v25);
  unsigned __int8 v8 = v25;
  uint64_t v25 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  unsigned __int8 v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getObject(v9, v10, (const WTF::String *)&v24);
  uint64_t v12 = v24;
  uint64_t v24 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    int v14 = v24;
    uint64_t v24 = 0;
    if (!v14) {
      goto LABEL_22;
    }
    int v15 = *(_DWORD *)v14 - 2;
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v13);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v24 = v25;
  uint64_t v25 = 0;
  WTF::fastMalloc((WTF *)0x28);
  uint64_t v17 = *(WTF **)(a1 + 16);
  ++*(_DWORD *)v17;
  uint64_t v22 = v17;
  uint64_t v18 = (void *)Inspector::BackendDispatcher::CallbackBase::CallbackBase();
  *uint64_t v18 = &unk_1EE9B3740;
  int v23 = v18;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, _DWORD **))(*(void *)v16 + 280))(v16, &v26, &v24, &v23);
  uint64_t v19 = v23;
  int v23 = 0;
  if (v19)
  {
    if (v19[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v19 + 8))(v19);
    }
    else {
      --v19[2];
    }
  }
  if (v22) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v22, v13);
  }
  int v14 = v24;
  uint64_t v24 = 0;
  if (v14)
  {
    int v15 = *(_DWORD *)v14 - 1;
    if (*(_DWORD *)v14 != 1)
    {
LABEL_21:
      *(_DWORD *)int v14 = v15;
      goto LABEL_22;
    }
    WTF::JSONImpl::Value::operator delete();
  }
LABEL_22:
  char v20 = v25;
  uint64_t v25 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v20;
    }
  }
  uint64_t result = v26;
  char v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::deleteAllCookies(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  char v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  unsigned __int8 v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v4, v5, (const WTF::String *)&v14);
  unsigned __int8 v7 = v14;
  int v14 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_10:
    uint64_t v10 = v14;
    int v14 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    goto LABEL_14;
  }
  unsigned __int8 v9 = (WTF::JSONImpl::Object *)(*(void *(**)(WTF::StringImpl **__return_ptr))(**(void **)(a1 + 24)
                                                                                          + 288))(&v14);
  if (v15)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create((uint64_t *)&v13, v9);
    Inspector::BackendDispatcher::sendResponse();
    uint64_t v12 = v13;
    int v13 = 0;
    if (v12)
    {
      if (*v12 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v12;
      }
    }
  }
  if (v15) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_DWORD *Inspector::AutomationBackendDispatcher::getSessionPermissions(uint64_t a1)
{
  BOOL v1 = (WTF::JSONImpl::Object *)(*(void *(**)(uint64_t *__return_ptr))(**(void **)(a1 + 24) + 296))(&v16);
  if (v17)
  {
    if (v17 != 1)
    {
      uint64_t v12 = std::__throw_bad_variant_access[abi:sn180100]();
      return (_DWORD *)Inspector::AutomationBackendDispatcher::setSessionPermissions(v12);
    }
    uint64_t result = (_DWORD *)Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    uint64_t v3 = v16;
    uint64_t v16 = 0;
    WTF::JSONImpl::Object::create((uint64_t *)&v15, v1);
    uint64_t v4 = (uint64_t)v15;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v13 = (_DWORD *)v3;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v4 + 16), &v14, (uint64_t *)&v13, (uint64_t)v18);
    if (v18[16])
    {
      char v6 = (uint64_t *)(v4 + 24);
      uint64_t v7 = *(unsigned int *)(v4 + 36);
      if (v7 == *(_DWORD *)(v4 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v6, (unint64_t)&v14);
      }
      else
      {
        uint64_t v8 = *v6;
        unsigned __int8 v9 = v14;
        if (v14) {
          *(_DWORD *)v14 += 2;
        }
        *(void *)(v8 + 8 * v7) = v9;
        *(_DWORD *)(v4 + 36) = v7 + 1;
      }
    }
    uint64_t v10 = v13;
    int v13 = 0;
    if (v10)
    {
      if (*v10 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v10;
      }
    }
    uint64_t v11 = v14;
    int v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v5);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    Inspector::BackendDispatcher::sendResponse();
    uint64_t result = v15;
    char v15 = 0;
    if (result)
    {
      if (*result == 1) {
        uint64_t result = (_DWORD *)WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*result;
      }
    }
  }
  if (v17 != -1) {
    return (_DWORD *)((uint64_t (*)(unsigned char *, uint64_t *))off_1EE9B3770[v17])(v18, &v16);
  }
  return result;
}

_DWORD *Inspector::AutomationBackendDispatcher::setSessionPermissions(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  uint64_t v4 = *(Inspector::BackendDispatcher **)(a1 + 16);
  unsigned __int8 v5 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getArray(v4, v5, (const WTF::String *)&v15);
  uint64_t v7 = v15;
  char v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_14:
    uint64_t v11 = v15;
    char v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v8);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    goto LABEL_18;
  }
  uint64_t v9 = *(void *)(a1 + 24);
  int v14 = (WTF::JSONImpl::Object *)v17;
  uint64_t v17 = 0;
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(void *)v9 + 304))(&v15);
  uint64_t v10 = v14;
  int v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1) {
      uint64_t v10 = (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v10;
    }
  }
  if (v16)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create((uint64_t *)&v14, v10);
    Inspector::BackendDispatcher::sendResponse();
    int v13 = v14;
    int v14 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*(_DWORD *)v13;
      }
    }
  }
  if (v16) {
    goto LABEL_14;
  }
LABEL_18:
  uint64_t result = (_DWORD *)v17;
  uint64_t v17 = 0;
  if (result)
  {
    if (*result == 1) {
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*result;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::addVirtualAuthenticator(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)v39);
  uint64_t v8 = v39[0];
  v39[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  unsigned int v34 = v39[0];
  Inspector::BackendDispatcher::getObject(v9, v10, (const WTF::String *)&v34);
  uint64_t v12 = v34;
  unsigned int v34 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    int v14 = v39[0];
    v39[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 24);
    v39[0] = v36;
    uint64_t v36 = 0;
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(void *)v15 + 312))(&v34);
    char v16 = v39[0];
    v39[0] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1) {
        char v16 = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*(_DWORD *)v16;
      }
    }
    if (v35)
    {
      if (v35 != 1)
      {
        uint64_t v30 = std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF::StringImpl *)Inspector::AutomationBackendDispatcher::removeVirtualAuthenticator(v30);
      }
      Inspector::BackendDispatcher::reportProtocolError();
    }
    else
    {
      unsigned int v33 = v34;
      unsigned int v34 = 0;
      WTF::JSONImpl::Object::create((uint64_t *)&v32, v16);
      uint64_t v17 = (uint64_t)v32;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v31 = v39[0];
      WTF::JSONImpl::Value::create((uint64_t *)&v38, (WTF::JSONImpl::Value *)&v33, v18);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v17 + 16), &v31, (uint64_t *)&v38, (uint64_t)v39);
      if (v40)
      {
        char v20 = (uint64_t *)(v17 + 24);
        uint64_t v21 = *(unsigned int *)(v17 + 36);
        if (v21 == *(_DWORD *)(v17 + 32))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v20, (unint64_t)&v31);
        }
        else
        {
          uint64_t v22 = *v20;
          int v23 = v31;
          if (v31) {
            *(_DWORD *)v31 += 2;
          }
          *(void *)(v22 + 8 * v21) = v23;
          *(_DWORD *)(v17 + 36) = v21 + 1;
        }
      }
      uint64_t v24 = v38;
      uint64_t v38 = 0;
      if (v24)
      {
        if (*v24 == 1) {
          WTF::JSONImpl::Value::operator delete();
        }
        else {
          --*v24;
        }
      }
      uint64_t v25 = v31;
      uint64_t v31 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v19);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse();
      char v26 = v32;
      char v32 = 0;
      if (v26)
      {
        if (*v26 == 1) {
          WTF::JSONImpl::Value::operator delete();
        }
        else {
          --*v26;
        }
      }
      uint64_t v27 = v33;
      unsigned int v33 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, v13);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
    }
    if (v35 != -1) {
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9B3760[v35])(v39, &v34);
    }
  }
  int v28 = v36;
  uint64_t v36 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v28;
    }
  }
  uint64_t result = v37;
  unsigned int v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::removeVirtualAuthenticator(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v20);
  uint64_t v8 = v20;
  char v20 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v20);
  uint64_t v12 = v20;
  char v20 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_14:
    uint64_t v15 = v20;
    char v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v13);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    goto LABEL_18;
  }
  int v14 = (WTF::JSONImpl::Object *)(*(void *(**)(WTF::StringImpl **__return_ptr))(**(void **)(a1 + 24)
                                                                                           + 320))(&v20);
  if (v21)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create((uint64_t *)&v19, v14);
    Inspector::BackendDispatcher::sendResponse();
    uint64_t v18 = v19;
    uint64_t v19 = 0;
    if (v18)
    {
      if (*v18 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v18;
      }
    }
  }
  if (v21) {
    goto LABEL_14;
  }
LABEL_18:
  char v16 = v22;
  uint64_t v22 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v13);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t result = v23;
  int v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::addVirtualAuthenticatorCredential(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v25);
  uint64_t v8 = v25;
  uint64_t v25 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  int v28 = v25;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v28);
  uint64_t v12 = v28;
  int v28 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v27 = v25;
  Inspector::BackendDispatcher::getObject(v13, v14, (const WTF::String *)&v27);
  char v16 = v27;
  uint64_t v27 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_22:
    char v20 = v25;
    uint64_t v25 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v17);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(a1 + 24);
  uint64_t v27 = v28;
  int v28 = 0;
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(void *)v18 + 328))(&v25);
  uint64_t v19 = v27;
  uint64_t v27 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1) {
      uint64_t v19 = (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v19;
    }
  }
  if (v26)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create((uint64_t *)&v27, v19);
    Inspector::BackendDispatcher::sendResponse();
    uint64_t v24 = v27;
    uint64_t v27 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*(_DWORD *)v24;
      }
    }
  }
  if (v26) {
    goto LABEL_22;
  }
LABEL_26:
  char v21 = v28;
  int v28 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v21;
    }
  }
  uint64_t v22 = v29;
  uint64_t v29 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v17);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  uint64_t result = v30;
  uint64_t v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::getVirtualAuthenticatorCredentials(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)v36);
  uint64_t v8 = v36[0];
  v36[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  char v32 = v36[0];
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v32);
  uint64_t v12 = v32;
  char v32 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
    int v14 = v36[0];
    v36[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  else
  {
    uint64_t v15 = (WTF::JSONImpl::Object *)(*(void *(**)(WTF::StringImpl **__return_ptr))(**(void **)(a1 + 24)
                                                                                             + 336))(&v32);
    if (v33)
    {
      if (v33 != 1)
      {
        uint64_t v28 = std::__throw_bad_variant_access[abi:sn180100]();
        return (WTF::StringImpl *)Inspector::AutomationBackendDispatcher::removeVirtualAuthenticatorCredential(v28);
      }
      Inspector::BackendDispatcher::reportProtocolError();
    }
    else
    {
      char v16 = v32;
      char v32 = 0;
      WTF::JSONImpl::Object::create((uint64_t *)&v31, v15);
      uint64_t v17 = (uint64_t)v31;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v29 = v16;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v17 + 16), &v30, (uint64_t *)&v29, (uint64_t)v36);
      if (v37)
      {
        uint64_t v19 = (uint64_t *)(v17 + 24);
        uint64_t v20 = *(unsigned int *)(v17 + 36);
        if (v20 == *(_DWORD *)(v17 + 32))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v19, (unint64_t)&v30);
        }
        else
        {
          uint64_t v21 = *v19;
          uint64_t v22 = v30;
          if (v30) {
            *(_DWORD *)v30 += 2;
          }
          *(void *)(v21 + 8 * v20) = v22;
          *(_DWORD *)(v17 + 36) = v20 + 1;
        }
      }
      int v23 = v29;
      uint64_t v29 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1) {
          WTF::JSONImpl::Value::operator delete();
        }
        else {
          --*(_DWORD *)v23;
        }
      }
      uint64_t v24 = v30;
      uint64_t v30 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v18);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      Inspector::BackendDispatcher::sendResponse();
      uint64_t v25 = v31;
      uint64_t v31 = 0;
      if (v25)
      {
        if (*v25 == 1) {
          WTF::JSONImpl::Value::operator delete();
        }
        else {
          --*v25;
        }
      }
    }
    if (v33 != -1) {
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9B3780[v33])(v36, &v32);
    }
  }
  char v26 = v34;
  unsigned int v34 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v13);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  uint64_t result = v35;
  int v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::removeVirtualAuthenticatorCredential(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v24);
  uint64_t v8 = v24;
  uint64_t v24 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v27 = v24;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v27);
  uint64_t v12 = v27;
  uint64_t v27 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  char v26 = v24;
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v26);
  char v16 = v26;
  char v26 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_18:
    uint64_t v19 = v24;
    uint64_t v24 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v17);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    goto LABEL_22;
  }
  uint64_t v18 = (WTF::JSONImpl::Object *)(*(void *(**)(WTF::StringImpl **__return_ptr))(**(void **)(a1 + 24)
                                                                                           + 344))(&v24);
  if (v25)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create((uint64_t *)&v26, v18);
    Inspector::BackendDispatcher::sendResponse();
    int v23 = v26;
    char v26 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*(_DWORD *)v23;
      }
    }
  }
  if (v25) {
    goto LABEL_18;
  }
LABEL_22:
  uint64_t v20 = v27;
  uint64_t v27 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v17);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t v21 = v28;
  uint64_t v28 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v17);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  uint64_t result = v29;
  uint64_t v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::removeAllVirtualAuthenticatorCredentials(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v20);
  uint64_t v8 = v20;
  uint64_t v20 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v20);
  uint64_t v12 = v20;
  uint64_t v20 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_14:
    uint64_t v15 = v20;
    uint64_t v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v13);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    goto LABEL_18;
  }
  int v14 = (WTF::JSONImpl::Object *)(*(void *(**)(WTF::StringImpl **__return_ptr))(**(void **)(a1 + 24)
                                                                                           + 352))(&v20);
  if (v21)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create((uint64_t *)&v19, v14);
    Inspector::BackendDispatcher::sendResponse();
    uint64_t v18 = v19;
    uint64_t v19 = 0;
    if (v18)
    {
      if (*v18 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*v18;
      }
    }
  }
  if (v21) {
    goto LABEL_14;
  }
LABEL_18:
  char v16 = v22;
  uint64_t v22 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v13);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t result = v23;
  int v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::setVirtualAuthenticatorUserVerified(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v23);
  uint64_t v8 = v23;
  int v23 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  char v25 = v23;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v25);
  uint64_t v12 = v25;
  char v25 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  char v25 = v23;
  unsigned __int16 Boolean = Inspector::BackendDispatcher::getBoolean(v13, v14, (const WTF::String *)&v25);
  uint64_t result = v25;
  char v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_19:
    uint64_t v20 = v23;
    int v23 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v18);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    goto LABEL_23;
  }
  if (Boolean <= 0xFFu)
  {
    __break(1u);
    return result;
  }
  uint64_t v19 = (WTF::JSONImpl::Object *)(*(void *(**)(WTF::StringImpl **__return_ptr))(**(void **)(a1 + 24)
                                                                                           + 360))(&v23);
  if (v24)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create((uint64_t *)&v25, v19);
    Inspector::BackendDispatcher::sendResponse();
    uint64_t v22 = v25;
    char v25 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*(_DWORD *)v22;
      }
    }
  }
  if (v24) {
    goto LABEL_19;
  }
LABEL_23:
  char v21 = v26;
  char v26 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v18);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  uint64_t result = v27;
  uint64_t v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *Inspector::AutomationBackendDispatcher::generateTestReport(uint64_t a1, uint64_t a2, WTF::JSONImpl::Object **a3)
{
  unsigned __int8 v5 = *(Inspector::BackendDispatcher **)(a1 + 16);
  char v6 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::BackendDispatcher::getString(v5, v6, (const WTF::String *)&v24);
  uint64_t v8 = v24;
  char v24 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *(Inspector::BackendDispatcher **)(a1 + 16);
  uint64_t v10 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v27 = v24;
  Inspector::BackendDispatcher::getString(v9, v10, (const WTF::String *)&v27);
  uint64_t v12 = v27;
  uint64_t v27 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  int v13 = *(Inspector::BackendDispatcher **)(a1 + 16);
  int v14 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  char v26 = v24;
  Inspector::BackendDispatcher::getString(v13, v14, (const WTF::String *)&v26);
  char v16 = v26;
  char v26 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) + 36))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::BackendDispatcher::reportProtocolError();
LABEL_18:
    uint64_t v19 = v24;
    char v24 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v17);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    goto LABEL_22;
  }
  uint64_t v18 = (WTF::JSONImpl::Object *)(*(void *(**)(WTF::StringImpl **__return_ptr))(**(void **)(a1 + 24)
                                                                                           + 368))(&v24);
  if (v25)
  {
    Inspector::BackendDispatcher::reportProtocolError();
  }
  else
  {
    WTF::JSONImpl::Object::create((uint64_t *)&v26, v18);
    Inspector::BackendDispatcher::sendResponse();
    int v23 = v26;
    char v26 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*(_DWORD *)v23;
      }
    }
  }
  if (v25) {
    goto LABEL_18;
  }
LABEL_22:
  uint64_t v20 = v27;
  uint64_t v27 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v17);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  char v21 = v28;
  uint64_t v28 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v17);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  uint64_t result = v29;
  uint64_t v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  v9[0] = a1;
  v9[1] = a2;
  v8[0] = a4;
  v8[1] = a5;
  uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>(v9, a3, v8, a6);
  if (!*a6) {
    __break(0xC471u);
  }
  return result;
}

_DWORD *Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextsCallback::sendSuccess(WTF::JSONImpl::Object *a1, uint64_t *a2)
{
  WTF::JSONImpl::Object::create((uint64_t *)&v15, a1);
  uint64_t v3 = (uint64_t)v15;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v4 = *a2;
  *a2 = 0;
  int v13 = (_DWORD *)v4;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v3 + 16), &v14, (uint64_t *)&v13, (uint64_t)v16);
  if (v16[16])
  {
    char v6 = (uint64_t *)(v3 + 24);
    uint64_t v7 = *(unsigned int *)(v3 + 36);
    if (v7 == *(_DWORD *)(v3 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v6, (unint64_t)&v14);
    }
    else
    {
      uint64_t v8 = *v6;
      uint64_t v9 = v14;
      if (v14) {
        *(_DWORD *)v14 += 2;
      }
      *(void *)(v8 + 8 * v7) = v9;
      *(_DWORD *)(v3 + 36) = v7 + 1;
    }
  }
  uint64_t v10 = v13;
  int v13 = 0;
  if (v10)
  {
    if (*v10 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v10;
    }
  }
  uint64_t v11 = v14;
  int v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v5);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    if (*result == 1) {
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*result;
    }
  }
  return result;
}

_DWORD *Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback::sendSuccess(WTF::JSONImpl::Object *a1, uint64_t *a2)
{
  WTF::JSONImpl::Object::create((uint64_t *)&v15, a1);
  uint64_t v3 = (uint64_t)v15;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v4 = *a2;
  *a2 = 0;
  int v13 = (_DWORD *)v4;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v3 + 16), &v14, (uint64_t *)&v13, (uint64_t)v16);
  if (v16[16])
  {
    char v6 = (uint64_t *)(v3 + 24);
    uint64_t v7 = *(unsigned int *)(v3 + 36);
    if (v7 == *(_DWORD *)(v3 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v6, (unint64_t)&v14);
    }
    else
    {
      uint64_t v8 = *v6;
      uint64_t v9 = v14;
      if (v14) {
        *(_DWORD *)v14 += 2;
      }
      *(void *)(v8 + 8 * v7) = v9;
      *(_DWORD *)(v3 + 36) = v7 + 1;
    }
  }
  uint64_t v10 = v13;
  int v13 = 0;
  if (v10)
  {
    if (*v10 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v10;
    }
  }
  uint64_t v11 = v14;
  int v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v5);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    if (*result == 1) {
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*result;
    }
  }
  return result;
}

_DWORD *Inspector::AutomationBackendDispatcherHandler::CreateBrowsingContextCallback::sendSuccess(WTF::JSONImpl::Object *a1, WTF::JSONImpl::Value *a2, uint64_t a3)
{
  WTF::JSONImpl::Object::create((uint64_t *)&v27, a1);
  uint64_t v5 = (uint64_t)v27;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((uint64_t *)&v28, a2, v6);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v5 + 16), &v26, (uint64_t *)&v28, (uint64_t)v29);
  if (v30)
  {
    uint64_t v8 = (uint64_t *)(v5 + 24);
    uint64_t v9 = *(unsigned int *)(v5 + 36);
    if (v9 == *(_DWORD *)(v5 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v8, (unint64_t)&v26);
    }
    else
    {
      uint64_t v10 = *v8;
      uint64_t v11 = v26;
      if (v26) {
        *(_DWORD *)v26 += 2;
      }
      *(void *)(v10 + 8 * v9) = v11;
      *(_DWORD *)(v5 + 36) = v9 + 1;
    }
  }
  uint64_t v12 = v28;
  uint64_t v28 = 0;
  if (v12)
  {
    if (*v12 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v12;
    }
  }
  int v13 = v26;
  char v26 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v7);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = (uint64_t)v27;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(a3, &v25);
  WTF::JSONImpl::Value::create((uint64_t *)&v28, (WTF::JSONImpl::Value *)&v25, v15);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v14 + 16), &v26, (uint64_t *)&v28, (uint64_t)v29);
  if (v30)
  {
    uint64_t v17 = (uint64_t *)(v14 + 24);
    uint64_t v18 = *(unsigned int *)(v14 + 36);
    if (v18 == *(_DWORD *)(v14 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v17, (unint64_t)&v26);
    }
    else
    {
      uint64_t v19 = *v17;
      uint64_t v20 = v26;
      if (v26) {
        *(_DWORD *)v26 += 2;
      }
      *(void *)(v19 + 8 * v18) = v20;
      *(_DWORD *)(v14 + 36) = v18 + 1;
    }
  }
  char v21 = v28;
  uint64_t v28 = 0;
  if (v21)
  {
    if (*v21 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v21;
    }
  }
  uint64_t v22 = v25;
  char v25 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v16);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  int v23 = v26;
  char v26 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v16);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  uint64_t result = v27;
  uint64_t v27 = 0;
  if (result)
  {
    if (*result == 1) {
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*result;
    }
  }
  return result;
}

_DWORD *Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback *this)
{
  WTF::JSONImpl::Object::create((uint64_t *)&v2, this);
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  uint64_t result = v2;
  uint64_t v2 = 0;
  if (result)
  {
    if (*result == 1) {
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*result;
    }
  }
  return result;
}

_DWORD *Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback::sendSuccess(Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback *this, const WTF::String *a2)
{
  WTF::JSONImpl::Object::create((uint64_t *)&v14, this);
  uint64_t v3 = (uint64_t)v14;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((uint64_t *)&v15, a2, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v3 + 16), &v13, (uint64_t *)&v15, (uint64_t)v16);
  if (v16[16])
  {
    char v6 = (uint64_t *)(v3 + 24);
    uint64_t v7 = *(unsigned int *)(v3 + 36);
    if (v7 == *(_DWORD *)(v3 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v6, (unint64_t)&v13);
    }
    else
    {
      uint64_t v8 = *v6;
      uint64_t v9 = v13;
      if (v13) {
        *(_DWORD *)v13 += 2;
      }
      *(void *)(v8 + 8 * v7) = v9;
      *(_DWORD *)(v3 + 36) = v7 + 1;
    }
  }
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  if (v10)
  {
    if (*v10 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v10;
    }
  }
  uint64_t v11 = v13;
  int v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v5);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    if (*result == 1) {
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*result;
    }
  }
  return result;
}

_DWORD *Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback::sendSuccess(Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback *this, const WTF::String *a2)
{
  WTF::JSONImpl::Object::create((uint64_t *)&v14, this);
  uint64_t v3 = (uint64_t)v14;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((uint64_t *)&v15, a2, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v3 + 16), &v13, (uint64_t *)&v15, (uint64_t)v16);
  if (v16[16])
  {
    char v6 = (uint64_t *)(v3 + 24);
    uint64_t v7 = *(unsigned int *)(v3 + 36);
    if (v7 == *(_DWORD *)(v3 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v6, (unint64_t)&v13);
    }
    else
    {
      uint64_t v8 = *v6;
      uint64_t v9 = v13;
      if (v13) {
        *(_DWORD *)v13 += 2;
      }
      *(void *)(v8 + 8 * v7) = v9;
      *(_DWORD *)(v3 + 36) = v7 + 1;
    }
  }
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  if (v10)
  {
    if (*v10 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v10;
    }
  }
  uint64_t v11 = v13;
  int v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v5);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    if (*result == 1) {
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*result;
    }
  }
  return result;
}

_DWORD *Inspector::AutomationBackendDispatcherHandler::ComputeElementLayoutCallback::sendSuccess(WTF::JSONImpl::Object *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, WTF::JSONImpl::Value *a4)
{
  WTF::JSONImpl::Object::create((uint64_t *)&v35, a1);
  uint64_t v7 = (uint64_t)v35;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v8 = *a2;
  *a2 = 0;
  unsigned int v34 = v8;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v7 + 16), &v36, (uint64_t *)&v34, (uint64_t)v37);
  if (v38)
  {
    uint64_t v10 = (uint64_t *)(v7 + 24);
    uint64_t v11 = *(unsigned int *)(v7 + 36);
    if (v11 == *(_DWORD *)(v7 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v10, (unint64_t)&v36);
    }
    else
    {
      uint64_t v12 = *v10;
      int v13 = v36;
      if (v36) {
        *(_DWORD *)v36 += 2;
      }
      *(void *)(v12 + 8 * v11) = v13;
      *(_DWORD *)(v7 + 36) = v11 + 1;
    }
  }
  uint64_t v14 = v34;
  unsigned int v34 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v14;
    }
  }
  uint64_t v15 = v36;
  uint64_t v36 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v9);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  if (*a3)
  {
    uint64_t v16 = (uint64_t)v35;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t v36 = (WTF::StringImpl *)v37[0];
    uint64_t v17 = *a3;
    *a3 = 0;
    unsigned int v34 = v17;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v16 + 16), &v36, (uint64_t *)&v34, (uint64_t)v37);
    if (v38)
    {
      uint64_t v19 = (uint64_t *)(v16 + 24);
      uint64_t v20 = *(unsigned int *)(v16 + 36);
      if (v20 == *(_DWORD *)(v16 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v19, (unint64_t)&v36);
      }
      else
      {
        uint64_t v21 = *v19;
        uint64_t v22 = v36;
        if (v36) {
          *(_DWORD *)v36 += 2;
        }
        *(void *)(v21 + 8 * v20) = v22;
        *(_DWORD *)(v16 + 36) = v20 + 1;
      }
    }
    int v23 = v34;
    unsigned int v34 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*(_DWORD *)v23;
      }
    }
    char v24 = v36;
    uint64_t v36 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v18);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
  }
  uint64_t v25 = (uint64_t)v35;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v25 + 16), &v34, (uint64_t *)&v36, (uint64_t)v37);
  if (v38)
  {
    uint64_t v27 = (uint64_t *)(v25 + 24);
    uint64_t v28 = *(unsigned int *)(v25 + 36);
    if (v28 == *(_DWORD *)(v25 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v27, (unint64_t)&v34);
    }
    else
    {
      uint64_t v29 = *v27;
      char v30 = v34;
      if (v34) {
        *(_DWORD *)v34 += 2;
      }
      *(void *)(v29 + 8 * v28) = v30;
      *(_DWORD *)(v25 + 36) = v28 + 1;
    }
  }
  uint64_t v31 = v36;
  uint64_t v36 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v31;
    }
  }
  char v32 = v34;
  unsigned int v34 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v26);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  uint64_t result = v35;
  int v35 = 0;
  if (result)
  {
    if (*result == 1) {
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*result;
    }
  }
  return result;
}

_DWORD *Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback::sendSuccess(Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback *this, const WTF::String *a2)
{
  WTF::JSONImpl::Object::create((uint64_t *)&v14, this);
  uint64_t v3 = (uint64_t)v14;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((uint64_t *)&v15, a2, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v3 + 16), &v13, (uint64_t *)&v15, (uint64_t)v16);
  if (v16[16])
  {
    char v6 = (uint64_t *)(v3 + 24);
    uint64_t v7 = *(unsigned int *)(v3 + 36);
    if (v7 == *(_DWORD *)(v3 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v6, (unint64_t)&v13);
    }
    else
    {
      uint64_t v8 = *v6;
      uint64_t v9 = v13;
      if (v13) {
        *(_DWORD *)v13 += 2;
      }
      *(void *)(v8 + 8 * v7) = v9;
      *(_DWORD *)(v3 + 36) = v7 + 1;
    }
  }
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  if (v10)
  {
    if (*v10 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v10;
    }
  }
  uint64_t v11 = v13;
  int v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v5);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    if (*result == 1) {
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*result;
    }
  }
  return result;
}

_DWORD *Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback::sendSuccess(Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback *this, const WTF::String *a2)
{
  WTF::JSONImpl::Object::create((uint64_t *)&v14, this);
  uint64_t v3 = (uint64_t)v14;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((uint64_t *)&v15, a2, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v3 + 16), &v13, (uint64_t *)&v15, (uint64_t)v16);
  if (v16[16])
  {
    char v6 = (uint64_t *)(v3 + 24);
    uint64_t v7 = *(unsigned int *)(v3 + 36);
    if (v7 == *(_DWORD *)(v3 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v6, (unint64_t)&v13);
    }
    else
    {
      uint64_t v8 = *v6;
      uint64_t v9 = v13;
      if (v13) {
        *(_DWORD *)v13 += 2;
      }
      *(void *)(v8 + 8 * v7) = v9;
      *(_DWORD *)(v3 + 36) = v7 + 1;
    }
  }
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  if (v10)
  {
    if (*v10 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v10;
    }
  }
  uint64_t v11 = v13;
  int v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v5);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    if (*result == 1) {
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*result;
    }
  }
  return result;
}

_DWORD *Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback::sendSuccess(WTF::JSONImpl::Object *a1, uint64_t *a2)
{
  WTF::JSONImpl::Object::create((uint64_t *)&v15, a1);
  uint64_t v3 = (uint64_t)v15;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v4 = *a2;
  *a2 = 0;
  int v13 = (_DWORD *)v4;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v3 + 16), &v14, (uint64_t *)&v13, (uint64_t)v16);
  if (v16[16])
  {
    char v6 = (uint64_t *)(v3 + 24);
    uint64_t v7 = *(unsigned int *)(v3 + 36);
    if (v7 == *(_DWORD *)(v3 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v6, (unint64_t)&v14);
    }
    else
    {
      uint64_t v8 = *v6;
      uint64_t v9 = v14;
      if (v14) {
        *(_DWORD *)v14 += 2;
      }
      *(void *)(v8 + 8 * v7) = v9;
      *(_DWORD *)(v3 + 36) = v7 + 1;
    }
  }
  uint64_t v10 = v13;
  int v13 = 0;
  if (v10)
  {
    if (*v10 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v10;
    }
  }
  uint64_t v11 = v14;
  uint64_t v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v5);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  Inspector::BackendDispatcher::CallbackBase::sendSuccess();
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    if (*result == 1) {
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*result;
    }
  }
  return result;
}

void Inspector::AutomationBackendDispatcher::~AutomationBackendDispatcher(Inspector::AutomationBackendDispatcher *this)
{
  Inspector::SupplementalBackendDispatcher::~SupplementalBackendDispatcher(this);

  WTF::fastFree(v1, v2);
}

void Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextsCallback::~GetBrowsingContextsCallback(Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextsCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback::~GetBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::CreateBrowsingContextCallback::~CreateBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::CreateBrowsingContextCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::~SwitchToBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback::~SetWindowFrameOfBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback::~MaximizeWindowOfBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback::~HideWindowOfBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::NavigateBrowsingContextCallback::~NavigateBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::NavigateBrowsingContextCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::GoBackInBrowsingContextCallback::~GoBackInBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::GoBackInBrowsingContextCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::GoForwardInBrowsingContextCallback::~GoForwardInBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::GoForwardInBrowsingContextCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::ReloadBrowsingContextCallback::~ReloadBrowsingContextCallback(Inspector::AutomationBackendDispatcherHandler::ReloadBrowsingContextCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::WaitForNavigationToCompleteCallback::~WaitForNavigationToCompleteCallback(Inspector::AutomationBackendDispatcherHandler::WaitForNavigationToCompleteCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback::~EvaluateJavaScriptFunctionCallback(Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::PerformMouseInteractionCallback::~PerformMouseInteractionCallback(Inspector::AutomationBackendDispatcherHandler::PerformMouseInteractionCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback::~PerformKeyboardInteractionsCallback(Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::PerformInteractionSequenceCallback::~PerformInteractionSequenceCallback(Inspector::AutomationBackendDispatcherHandler::PerformInteractionSequenceCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback::~CancelInteractionSequenceCallback(Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback::~TakeScreenshotCallback(Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::ResolveChildFrameHandleCallback::~ResolveChildFrameHandleCallback(Inspector::AutomationBackendDispatcherHandler::ResolveChildFrameHandleCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback::~ResolveParentFrameHandleCallback(Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::ComputeElementLayoutCallback::~ComputeElementLayoutCallback(Inspector::AutomationBackendDispatcherHandler::ComputeElementLayoutCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback::~GetComputedRoleCallback(Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback::~GetComputedLabelCallback(Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback::~SelectOptionElementCallback(Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::SetFilesForInputFileUploadCallback::~SetFilesForInputFileUploadCallback(Inspector::AutomationBackendDispatcherHandler::SetFilesForInputFileUploadCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback::~GetAllCookiesCallback(Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback::~DeleteSingleCookieCallback(Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

void Inspector::AutomationBackendDispatcherHandler::AddSingleCookieCallback::~AddSingleCookieCallback(Inspector::AutomationBackendDispatcherHandler::AddSingleCookieCallback *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

uint64_t *WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v12 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v14 = v11 & v9;
    uint64_t v15 = (uint64_t *)(v8 + 16 * v14);
    uint64_t v16 = (WTF *)*v15;
    if (*v15 != -1) {
      break;
    }
    uint64_t v12 = (uint64_t *)(v8 + 16 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *uint64_t v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v15 = v12;
    }
    uint64_t result = (uint64_t *)WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineAdd<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>> &&)::{lambda(void)#1}>(v15, a2, &v28);
    uint64_t v18 = *a1;
    if (*a1) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v18 - 12) = v19;
    uint64_t v22 = *a1;
    if (*a1) {
      int v23 = *(_DWORD *)(v22 - 12);
    }
    else {
      int v23 = 0;
    }
    uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
    unint64_t v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
      {
LABEL_26:
        uint64_t result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (uint64_t)v15);
        uint64_t v15 = result;
        uint64_t v22 = *a1;
        if (*a1) {
          unint64_t v25 = *(unsigned int *)(v22 - 4);
        }
        else {
          unint64_t v25 = 0;
        }
      }
    }
    else if (3 * v25 <= 4 * v24)
    {
      goto LABEL_26;
    }
    *(void *)a4 = v15;
    *(void *)(a4 + 8) = v22 + 16 * v25;
    *(unsigned char *)(a4 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a2, (const WTF::StringImpl *)a3)) {
    goto LABEL_13;
  }
  uint64_t v20 = *a1;
  if (*a1) {
    uint64_t v21 = *(unsigned int *)(v20 - 4);
  }
  else {
    uint64_t v21 = 0;
  }
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v20 + 16 * v21;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v26 = v8 + 16 * v14;
  uint64_t v27 = *a3;
  *a3 = 0;
  uint64_t result = *(uint64_t **)(v26 + 8);
  *(void *)(v26 + 8) = v27;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      return (uint64_t *)WTF::JSONImpl::Value::operator delete();
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

_DWORD *WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::String const&,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>> WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineAdd<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>(WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>> &&)::{lambda(void)#1}>(uint64_t *a1, WTF::StringImpl **a2, uint64_t **a3)
{
  WTF::String::operator=(a1, a2);
  uint64_t v5 = **a3;
  **a3 = 0;
  uint64_t result = (_DWORD *)a1[1];
  a1[1] = v5;
  if (result)
  {
    if (*result == 1)
    {
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    }
    else
    {
      --*result;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    uint64_t v13 = v6;
    do
    {
      uint64_t v14 = *(WTF::StringImpl **)v13;
      if (*(void *)v13 != -1)
      {
        if (v14)
        {
          uint64_t v16 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, (WTF::StringImpl **)v13);
          uint64_t v17 = *(_DWORD **)(v16 + 8);
          *(void *)(v16 + 8) = 0;
          if (v17)
          {
            if (*v17 == 1) {
              WTF::JSONImpl::Value::operator delete();
            }
            else {
              --*v17;
            }
          }
          uint64_t v18 = *(WTF::StringImpl **)v16;
          *(void *)uint64_t v16 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2) {
              WTF::StringImpl::destroy(v18, v10);
            }
            else {
              *(_DWORD *)v18 -= 2;
            }
          }
          int v19 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          *(void *)uint64_t v16 = v19;
          uint64_t v20 = *(void *)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          *(void *)(v16 + 8) = v20;
          uint64_t v21 = *(_DWORD **)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          if (v21)
          {
            if (*v21 == 1) {
              WTF::JSONImpl::Value::operator delete();
            }
            else {
              --*v21;
            }
          }
          uint64_t v22 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v10);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v11 = v16;
          }
        }
        else
        {
          uint64_t v15 = *(_DWORD **)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          if (v15)
          {
            if (*v15 == 1)
            {
              WTF::JSONImpl::Value::operator delete();
              uint64_t v14 = *(WTF::StringImpl **)v13;
            }
            else
            {
              --*v15;
            }
          }
          *(void *)uint64_t v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v10);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
      }
      v13 += 16;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  unsigned int v4 = *((_DWORD *)*a2 + 4);
  if (v4 >= 0x100) {
    unsigned int v5 = v4 >> 8;
  }
  else {
    unsigned int v5 = WTF::StringImpl::hashSlowCase(*a2);
  }
  int v6 = 0;
  do
  {
    uint64_t v7 = v5 & v3;
    unsigned int v5 = ++v6 + v7;
  }
  while (*(void *)(v2 + 16 * v7));
  return v2 + 16 * v7;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJbN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJbS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringES9_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_S9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringES9_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJS9_S9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol10Automation21SessionPermissionDataEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, _DWORD **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1) {
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*result;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol10Automation21SessionPermissionDataEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol10Automation30VirtualAuthenticatorCredentialEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, _DWORD **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1) {
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*result;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefINS8_8JSONImpl7ArrayOfIN9Inspector8Protocol10Automation30VirtualAuthenticatorCredentialEEENS8_12RawPtrTraitsISG_EENS8_21DefaultRefDerefTraitsISG_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF *WTF::RefCounted<Inspector::BackendDispatcher>::deref(WTF *result, void *a2)
{
  uint64_t v2 = result;
  if (*(_DWORD *)result == 1)
  {
    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result + 24, a2);
    unsigned int v4 = (WTF::StringImpl **)*((void *)v2 + 2);
    if (v4) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v3);
    }
    uint64_t v5 = *((void *)v2 + 1);
    *((void *)v2 + 1) = 0;
    if (v5) {
      WTF::RefCounted<Inspector::FrontendRouter>::deref(v5, v3);
    }
    return (WTF *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 16 * v3));
  }
  unsigned int v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (WTF::StringImpl **)result;
    do
    {
      uint64_t result = v3[1];
      v3[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 2;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    unsigned int v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        *unsigned int v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::RefCounted<Inspector::FrontendRouter>::deref(uint64_t this, void *a2)
{
  uint64_t v2 = this;
  if (*(_DWORD *)this == 1)
  {
    uint64_t v3 = *(WTF **)(this + 8);
    if ((WTF *)(v2 + 24) != v3 && v3 != 0)
    {
      *(void *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v3, a2);
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>::KeyValuePair<WTF::ASCIILiteral,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a3)
  {
    if (a3 == 1)
    {
      uint64_t v6 = MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v6 = v8;
    }
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)a1 = 0;
  }
  *(_OWORD *)(a1 + 8) = *a4;
  return a1;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>,WTF::KeyValuePairKeyExtractor<void (Inspector::AutomationBackendDispatcher::*)(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&),WTF::DefaultHash,WTF::HashTraits<WTF::String>,WTF::HashMap<void ()(long,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = WTF::fastMalloc((WTF *)(24 * v5 + 16));
  uint64_t v8 = v6;
  uint64_t v9 = v6 + 16;
  if (v5) {
    bzero((void *)(v6 + 16), 24 * v5);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v11 = (WTF::StringImpl **)(v2 + 24 * i);
      uint64_t v12 = *v11;
      if (*v11 != (WTF::StringImpl *)-1)
      {
        if (v12)
        {
          uint64_t v13 = *a1;
          if (*a1) {
            unsigned int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            unsigned int v14 = 0;
          }
          unsigned int v15 = *((_DWORD *)v12 + 4);
          if (v15 >= 0x100) {
            int v16 = v15 >> 8;
          }
          else {
            int v16 = WTF::StringImpl::hashSlowCase(v12);
          }
          int v17 = 0;
          do
          {
            unsigned int v18 = v16 & v14;
            int v19 = (WTF::StringImpl **)(v13 + 24 * (v16 & v14));
            int v16 = ++v17 + (v16 & v14);
          }
          while (*v19);
          *int v19 = 0;
          uint64_t v20 = *v11;
          *uint64_t v11 = 0;
          *int v19 = v20;
          *(_OWORD *)(v13 + 24 * v18 + 8) = *(_OWORD *)(v2 + 24 * i + 8);
          uint64_t v21 = *v11;
          *uint64_t v11 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2) {
              WTF::StringImpl::destroy(v21, v7);
            }
            else {
              *(_DWORD *)v21 -= 2;
            }
          }
        }
        else
        {
          *uint64_t v11 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return;
  }

  WTF::fastFree((WTF *)(v2 - 16), v7);
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a1[1];
  BOOL v5 = v4 != 0;
  unint64_t v6 = v4 - 1;
  if (!v5) {
    unint64_t v6 = 0;
  }
  uint64_t v13 = *a1;
  if (v6 >> 31) {
    goto LABEL_8;
  }
  int v14 = v6;
  uint64_t v12 = *a2;
  uint64_t v7 = a3[1];
  BOOL v5 = v7 != 0;
  unint64_t v8 = v7 - 1;
  if (!v5) {
    unint64_t v8 = 0;
  }
  uint64_t v10 = *a3;
  if (v8 >> 31)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x1987D5CA8);
  }
  int v11 = v8;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)&v13, &v12, (uint64_t)&v10, a4);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = *a2;
  if (*a2) {
    int v5 = *(_DWORD *)(v4 + 4);
  }
  else {
    int v5 = 0;
  }
  int v6 = *(_DWORD *)(a3 + 8);
  if ((v6 | v5) < 0
    || ((int v7 = *(_DWORD *)(result + 8), v8 = __OFADD__(v5, v6), v9 = v5 + v6, !v8) ? (v10 = 0) : (v10 = 1),
        v7 < 0 || (v10 & 1) != 0 || (BOOL v8 = __OFADD__(v7, v9), v11 = (v7 + v9), v8)))
  {
    *a4 = 0;
  }
  else
  {
    BOOL v12 = !v4 || (*(unsigned char *)(v4 + 16) & 4) != 0;
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v11, v12, *(int8x16_t **)result, *(void *)(result + 8), v4, *(int8x16_t **)a3, *(void *)(a3 + 8), a4);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, void *a8@<X8>)
{
  int v13 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        unsigned int v15 = v20;
        if (v20)
        {
          int v16 = v20 + 5;
          *uint64_t v20 = 2;
          v15[1] = v13;
          *((void *)v15 + 1) = v15 + 5;
          void v15[4] = 4;
          if (a4)
          {
            if (a4 == 1) {
              *int v16 = a3->i8[0];
            }
            else {
              memcpy(v15 + 5, a3, a4);
            }
          }
          int v17 = &v16[a4];
          uint64_t v20 = (_DWORD *)a5;
          uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v20, v17);
          int64_t v18 = (int64_t)v20;
          if (v20) {
            int64_t v18 = v20[1];
          }
          if (a7)
          {
            uint64_t result = (uint64_t)&v17[v18];
            if (a7 == 1) {
              *(unsigned char *)uint64_t result = a6->i8[0];
            }
            else {
              uint64_t result = (uint64_t)memcpy((void *)result, a6, a7);
            }
          }
        }
        goto LABEL_13;
      }
LABEL_16:
      unsigned int v15 = 0;
      goto LABEL_13;
    }
LABEL_17:
    unsigned int v15 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_13;
  }
  if (!result) {
    goto LABEL_17;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_16;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  unsigned int v15 = v20;
  if (v20)
  {
    int v19 = (char *)(v20 + 5);
    *uint64_t v20 = 2;
    v15[1] = v13;
    *((void *)v15 + 1) = v15 + 5;
    void v15[4] = 0;
    uint64_t result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v19, a3, a4, a5, a6, a7);
  }
LABEL_13:
  *a8 = v15;
  return result;
}

uint64_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, int8x16_t *a5, int a6)
{
  BOOL v8 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    int v9 = &a1[2 * (a3 & 0xFFFFFFC0)];
    long long v10 = 0uLL;
    do
    {
      v32.val[0] = *a2;
      int8x16_t v11 = a2[1];
      v34.val[0] = a2[2];
      int8x16_t v12 = a2[3];
      a2 += 4;
      int8x16_t v13 = v12;
      v34.val[1] = 0uLL;
      v36.val[0] = v11;
      v32.val[1] = 0uLL;
      int v14 = a1;
      vst2q_s8(v14, v32);
      v14 += 32;
      v36.val[1] = 0uLL;
      vst2q_s8(v14, v36);
      unsigned int v15 = a1 + 64;
      vst2q_s8(v15, v34);
      int v16 = a1 + 96;
      vst2q_s8(v16, *(int8x16x2_t *)(&v10 - 1));
      a1 += 128;
    }
    while (a1 != v9);
    a1 = v9;
  }
  while (a1 != v8)
  {
    __int16 v17 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v17;
    a1 += 2;
  }
  uint64_t v31 = a4;
  uint64_t result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v31, v8);
  uint64_t v19 = v31;
  if (v31) {
    uint64_t v19 = *(unsigned int *)(v31 + 4);
  }
  uint64_t v20 = &v8[2 * v19];
  uint64_t v21 = &v20[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    uint64_t v22 = &v20[2 * (a6 & 0xFFFFFFC0)];
    long long v23 = 0uLL;
    do
    {
      v33.val[0] = *a5;
      int8x16_t v24 = a5[1];
      v35.val[0] = a5[2];
      int8x16_t v25 = a5[3];
      a5 += 4;
      int8x16_t v26 = v25;
      v35.val[1] = 0uLL;
      v37.val[0] = v24;
      v33.val[1] = 0uLL;
      uint64_t v27 = v20;
      vst2q_s8(v27, v33);
      v27 += 32;
      v37.val[1] = 0uLL;
      vst2q_s8(v27, v37);
      uint64_t v28 = v20 + 64;
      vst2q_s8(v28, v35);
      uint64_t v29 = v20 + 96;
      vst2q_s8(v29, *(int8x16x2_t *)(&v23 - 1));
      v20 += 128;
    }
    while (v20 != v22);
    uint64_t v20 = v22;
  }
  while (v20 != v21)
  {
    __int16 v30 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)uint64_t v20 = v30;
    v20 += 2;
  }
  return result;
}

void Inspector::BackendDispatcher::CallbackBase::~CallbackBase(Inspector::BackendDispatcher::CallbackBase *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  int v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B37A0;
  int v3 = (WTF *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v3, a2);
  }

  WTF::fastFree(this, a2);
}

WTF::JSONImpl::Value *Inspector::AutomationFrontendDispatcher::fileChooserDismissed(WTF::JSONImpl::Object *a1, WTF::JSONImpl::Value *a2, WTF::JSONImpl::Value *a3, WTF::StringImpl **a4)
{
  WTF::JSONImpl::Object::create((uint64_t *)&v59, a1);
  BOOL v8 = v59;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((uint64_t *)&v60, (WTF::JSONImpl::Value *)&v57, v9);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v8 + 2, &v58, (uint64_t *)&v60, (uint64_t)v61);
  if (v62)
  {
    int8x16_t v11 = (uint64_t *)((char *)v8 + 24);
    uint64_t v12 = *((unsigned int *)v8 + 9);
    if (v12 == *((_DWORD *)v8 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v11, (unint64_t)&v58);
    }
    else
    {
      uint64_t v13 = *v11;
      int v14 = v58;
      if (v58) {
        *(_DWORD *)v58 += 2;
      }
      *(void *)(v13 + 8 * v12) = v14;
      *((_DWORD *)v8 + 9) = v12 + 1;
    }
  }
  unsigned int v15 = v60;
  long long v60 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v15;
    }
  }
  int v16 = v57;
  uint64_t v57 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v10);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  __int16 v17 = v58;
  long long v58 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      __int16 v17 = (WTF::StringImpl *)WTF::StringImpl::destroy(v17, v10);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  WTF::JSONImpl::Object::create((uint64_t *)&v58, v17);
  int64_t v18 = v58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v57 = v61[0];
  WTF::JSONImpl::Value::create((uint64_t *)&v60, a2, v19);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v18 + 2, &v57, (uint64_t *)&v60, (uint64_t)v61);
  if (v62)
  {
    uint64_t v21 = (uint64_t *)((char *)v18 + 24);
    uint64_t v22 = *((unsigned int *)v18 + 9);
    if (v22 == *((_DWORD *)v18 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v21, (unint64_t)&v57);
    }
    else
    {
      uint64_t v23 = *v21;
      int8x16_t v24 = v57;
      if (v57) {
        *(_DWORD *)v57 += 2;
      }
      *(void *)(v23 + 8 * v22) = v24;
      *((_DWORD *)v18 + 9) = v22 + 1;
    }
  }
  int8x16_t v25 = v60;
  long long v60 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v25;
    }
  }
  int8x16_t v26 = v57;
  uint64_t v57 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v20);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  uint64_t v27 = v58;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v57 = v61[0];
  WTF::JSONImpl::Value::create(a3);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v27 + 2, &v57, (uint64_t *)&v60, (uint64_t)v61);
  if (v62)
  {
    uint64_t v29 = (uint64_t *)((char *)v27 + 24);
    uint64_t v30 = *((unsigned int *)v27 + 9);
    if (v30 == *((_DWORD *)v27 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v29, (unint64_t)&v57);
    }
    else
    {
      uint64_t v31 = *v29;
      int8x16x2_t v32 = v57;
      if (v57) {
        *(_DWORD *)v57 += 2;
      }
      *(void *)(v31 + 8 * v30) = v32;
      *((_DWORD *)v27 + 9) = v30 + 1;
    }
  }
  int8x16x2_t v33 = v60;
  long long v60 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v33;
    }
  }
  int8x16x2_t v34 = v57;
  uint64_t v57 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, v28);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  if (*a4)
  {
    int8x16x2_t v35 = v58;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    long long v60 = v61[0];
    int8x16x2_t v36 = *a4;
    *a4 = 0;
    uint64_t v57 = v36;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v35 + 2, &v60, (uint64_t *)&v57, (uint64_t)v61);
    if (v62)
    {
      char v38 = (uint64_t *)((char *)v35 + 24);
      uint64_t v39 = *((unsigned int *)v35 + 9);
      if (v39 == *((_DWORD *)v35 + 8))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v38, (unint64_t)&v60);
      }
      else
      {
        uint64_t v40 = *v38;
        int v41 = v60;
        if (v60) {
          *(_DWORD *)v60 += 2;
        }
        *(void *)(v40 + 8 * v39) = v41;
        *((_DWORD *)v35 + 9) = v39 + 1;
      }
    }
    uint64_t v42 = v57;
    uint64_t v57 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 1) {
        WTF::JSONImpl::Value::operator delete();
      }
      else {
        --*(_DWORD *)v42;
      }
    }
    unint64_t v43 = v60;
    long long v60 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2) {
        WTF::StringImpl::destroy(v43, v37);
      }
      else {
        *(_DWORD *)v43 -= 2;
      }
    }
  }
  uint64_t v44 = v59;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  uint64_t v57 = v58;
  long long v58 = 0;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v44 + 2, &v60, (uint64_t *)&v57, (uint64_t)v61);
  if (v62)
  {
    char v46 = (uint64_t *)((char *)v44 + 24);
    uint64_t v47 = *((unsigned int *)v44 + 9);
    if (v47 == *((_DWORD *)v44 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v46, (unint64_t)&v60);
    }
    else
    {
      uint64_t v48 = *v46;
      long long v49 = v60;
      if (v60) {
        *(_DWORD *)v60 += 2;
      }
      *(void *)(v48 + 8 * v47) = v49;
      *((_DWORD *)v44 + 9) = v47 + 1;
    }
  }
  long long v50 = v57;
  uint64_t v57 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v50;
    }
  }
  long long v51 = v60;
  long long v60 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2) {
      WTF::StringImpl::destroy(v51, v45);
    }
    else {
      *(_DWORD *)v51 -= 2;
    }
  }
  long long v52 = *(Inspector::FrontendRouter **)a1;
  WTF::JSONImpl::Value::toJSONString((uint64_t *)v61, v59);
  Inspector::FrontendRouter::sendEvent(v52, (const WTF::String *)v61);
  long long v54 = v61[0];
  v61[0] = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2) {
      WTF::StringImpl::destroy(v54, v53);
    }
    else {
      *(_DWORD *)v54 -= 2;
    }
  }
  long long v55 = v58;
  long long v58 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v55;
    }
  }
  uint64_t result = v59;
  long long v59 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1) {
      return (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::JSONImpl::Value *Inspector::AutomationFrontendDispatcher::browsingContextCleared(Inspector::AutomationFrontendDispatcher *this, const WTF::String *a2)
{
  WTF::JSONImpl::Object::create((uint64_t *)&v38, this);
  uint64_t v4 = v38;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((uint64_t *)&v39, (WTF::JSONImpl::Value *)&v36, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v4 + 2, &v37, (uint64_t *)&v39, (uint64_t)v40);
  if (v41)
  {
    int v7 = (uint64_t *)((char *)v4 + 24);
    uint64_t v8 = *((unsigned int *)v4 + 9);
    if (v8 == *((_DWORD *)v4 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v7, (unint64_t)&v37);
    }
    else
    {
      uint64_t v9 = *v7;
      long long v10 = v37;
      if (v37) {
        *(_DWORD *)v37 += 2;
      }
      *(void *)(v9 + 8 * v8) = v10;
      *((_DWORD *)v4 + 9) = v8 + 1;
    }
  }
  int8x16_t v11 = v39;
  uint64_t v39 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v11;
    }
  }
  uint64_t v12 = v36;
  int8x16x2_t v36 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v6);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = v37;
  int8x16x2_t v37 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      uint64_t v13 = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v6);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  WTF::JSONImpl::Object::create((uint64_t *)&v37, v13);
  int v14 = v37;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  int8x16x2_t v36 = v40[0];
  WTF::JSONImpl::Value::create((uint64_t *)&v39, a2, v15);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v14 + 2, &v36, (uint64_t *)&v39, (uint64_t)v40);
  if (v41)
  {
    __int16 v17 = (uint64_t *)((char *)v14 + 24);
    uint64_t v18 = *((unsigned int *)v14 + 9);
    if (v18 == *((_DWORD *)v14 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v17, (unint64_t)&v36);
    }
    else
    {
      uint64_t v19 = *v17;
      uint64_t v20 = v36;
      if (v36) {
        *(_DWORD *)v36 += 2;
      }
      *(void *)(v19 + 8 * v18) = v20;
      *((_DWORD *)v14 + 9) = v18 + 1;
    }
  }
  uint64_t v21 = v39;
  uint64_t v39 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v21;
    }
  }
  uint64_t v22 = v36;
  int8x16x2_t v36 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v16);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  uint64_t v23 = v38;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  int8x16x2_t v36 = v37;
  int8x16x2_t v37 = 0;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v23 + 2, &v39, (uint64_t *)&v36, (uint64_t)v40);
  if (v41)
  {
    int8x16_t v25 = (uint64_t *)((char *)v23 + 24);
    uint64_t v26 = *((unsigned int *)v23 + 9);
    if (v26 == *((_DWORD *)v23 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v25, (unint64_t)&v39);
    }
    else
    {
      uint64_t v27 = *v25;
      uint64_t v28 = v39;
      if (v39) {
        *(_DWORD *)v39 += 2;
      }
      *(void *)(v27 + 8 * v26) = v28;
      *((_DWORD *)v23 + 9) = v26 + 1;
    }
  }
  uint64_t v29 = v36;
  int8x16x2_t v36 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v29;
    }
  }
  uint64_t v30 = v39;
  uint64_t v39 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v24);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  uint64_t v31 = *(Inspector::FrontendRouter **)this;
  WTF::JSONImpl::Value::toJSONString((uint64_t *)v40, v38);
  Inspector::FrontendRouter::sendEvent(v31, (const WTF::String *)v40);
  int8x16x2_t v33 = v40[0];
  v40[0] = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, v32);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  int8x16x2_t v34 = v37;
  int8x16x2_t v37 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v34;
    }
  }
  uint64_t result = v38;
  char v38 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1) {
      return (WTF::JSONImpl::Value *)WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t Inspector::Protocol::AutomationHelpers::getEnumConstantValue@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  int v3 = (&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * (int)this + 1];
  if (v3)
  {
    if (v3 == (char *)1)
    {
      uint64_t v4 = MEMORY[0x1E4F30960];
      *MEMORY[0x1E4F30960] += 2;
    }
    else
    {
      this = WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v4 = v5;
    }
    *a2 = v4;
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::CoordinateSystem>(void *a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::CoordinateSystem>(WTF::String const&)::constantValues[v2];
    uint64_t v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    uint64_t v5 = *v4;
    int v6 = v4[1];
    BOOL v7 = v6 != 0;
    uint64_t v8 = v6 - 1;
    uint64_t v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19972E990](*a1, v5, v9)) {
      break;
    }
    if (++v2 == 3) {
      return 0;
    }
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::BrowsingContextPresentation>(void *a1)
{
  uint64_t v2 = 0;
  for (char i = 1; ; char i = 0)
  {
    char v4 = i;
    uint64_t v5 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::BrowsingContextPresentation>(WTF::String const&)::constantValues[v2];
    int v6 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v5];
    BOOL v7 = *v6;
    uint64_t v8 = v6[1];
    BOOL v9 = v8 != 0;
    long long v10 = v8 - 1;
    int8x16_t v11 = v9 ? v10 : 0;
    if (MEMORY[0x19972E990](*a1, v7, v11)) {
      break;
    }
    uint64_t v2 = 1;
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  return v5 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>(void *a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>(WTF::String const&)::constantValues[v2];
    char v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    uint64_t v5 = *v4;
    int v6 = v4[1];
    BOOL v7 = v6 != 0;
    uint64_t v8 = v6 - 1;
    uint64_t v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19972E990](*a1, v5, v9)) {
      break;
    }
    if (++v2 == 19) {
      return 0;
    }
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::PageLoadStrategy>(void *a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::PageLoadStrategy>(WTF::String const&)::constantValues[v2];
    char v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    uint64_t v5 = *v4;
    int v6 = v4[1];
    BOOL v7 = v6 != 0;
    uint64_t v8 = v6 - 1;
    uint64_t v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19972E990](*a1, v5, v9)) {
      break;
    }
    if (++v2 == 3) {
      return 0;
    }
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseInteraction>(void *a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseInteraction>(WTF::String const&)::constantValues[v2];
    char v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    uint64_t v5 = *v4;
    int v6 = v4[1];
    BOOL v7 = v6 != 0;
    uint64_t v8 = v6 - 1;
    uint64_t v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19972E990](*a1, v5, v9)) {
      break;
    }
    if (++v2 == 5) {
      return 0;
    }
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseButton>(void *a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseButton>(WTF::String const&)::constantValues[v2];
    char v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    uint64_t v5 = *v4;
    int v6 = v4[1];
    BOOL v7 = v6 != 0;
    uint64_t v8 = v6 - 1;
    uint64_t v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19972E990](*a1, v5, v9)) {
      break;
    }
    if (++v2 == 4) {
      return 0;
    }
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::VirtualKey>(void *a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::VirtualKey>(WTF::String const&)::constantValues[v2];
    char v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    uint64_t v5 = *v4;
    int v6 = v4[1];
    BOOL v7 = v6 != 0;
    uint64_t v8 = v6 - 1;
    uint64_t v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19972E990](*a1, v5, v9)) {
      break;
    }
    if (++v2 == 70) {
      return 0;
    }
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::KeyboardInteractionType>(void *a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::KeyboardInteractionType>(WTF::String const&)::constantValues[v2];
    char v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    uint64_t v5 = *v4;
    int v6 = v4[1];
    BOOL v7 = v6 != 0;
    uint64_t v8 = v6 - 1;
    uint64_t v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19972E990](*a1, v5, v9)) {
      break;
    }
    if (++v2 == 3) {
      return 0;
    }
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::CookieSameSitePolicy>(void *a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::CookieSameSitePolicy>(WTF::String const&)::constantValues[v2];
    char v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    uint64_t v5 = *v4;
    int v6 = v4[1];
    BOOL v7 = v6 != 0;
    uint64_t v8 = v6 - 1;
    uint64_t v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19972E990](*a1, v5, v9)) {
      break;
    }
    if (++v2 == 3) {
      return 0;
    }
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::InputSourceType>(void *a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::InputSourceType>(WTF::String const&)::constantValues[v2];
    char v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    uint64_t v5 = *v4;
    int v6 = v4[1];
    BOOL v7 = v6 != 0;
    uint64_t v8 = v6 - 1;
    uint64_t v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19972E990](*a1, v5, v9)) {
      break;
    }
    if (++v2 == 6) {
      return 0;
    }
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseMoveOrigin>(void *a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseMoveOrigin>(WTF::String const&)::constantValues[v2];
    char v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    uint64_t v5 = *v4;
    int v6 = v4[1];
    BOOL v7 = v6 != 0;
    uint64_t v8 = v6 - 1;
    uint64_t v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19972E990](*a1, v5, v9)) {
      break;
    }
    if (++v2 == 3) {
      return 0;
    }
  }
  return v3 | 0x100000000;
}

uint64_t Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::AuthenticatorTransport>(void *a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::AuthenticatorTransport>(WTF::String const&)::constantValues[v2];
    char v4 = &(&Inspector::Protocol::AutomationHelpers::enum_constant_values)[2 * v3];
    uint64_t v5 = *v4;
    int v6 = v4[1];
    BOOL v7 = v6 != 0;
    uint64_t v8 = v6 - 1;
    uint64_t v9 = v7 ? (uint64_t)v8 : 0;
    if (MEMORY[0x19972E990](*a1, v5, v9)) {
      break;
    }
    if (++v2 == 4) {
      return 0;
    }
  }
  return v3 | 0x100000000;
}

WebKit::AuxiliaryProcess *WebKit::AuxiliaryProcess::didReceiveMessage(WebKit::AuxiliaryProcess *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v3 = this;
  if (*((_WORD *)a3 + 25) == 6)
  {
    this = (WebKit::AuxiliaryProcess *)IPC::Decoder::decode<std::tuple<BOOL>>(a3);
    if ((unsigned __int16)this >= 0x100u)
    {
      return (WebKit::AuxiliaryProcess *)WebKit::AuxiliaryProcess::setProcessSuppressionEnabled(v3, this != 0);
    }
  }
  else
  {
    switch(*((_WORD *)a3 + 25))
    {
      case 3:
        this = (WebKit::AuxiliaryProcess *)IPC::handleMessageAsync<Messages::AuxiliaryProcess::MainThreadPing,WebKit::AuxiliaryProcess,WebKit::AuxiliaryProcess,void ()(WTF::CompletionHandler<void ()(void)> &&)>(a2, a3, (uint64_t)this);
        break;
      case 4:
        this = IPC::handleMessage<Messages::AuxiliaryProcess::PreferenceDidUpdate,WebKit::AuxiliaryProcess,WebKit::AuxiliaryProcess,void ()(WTF::String const&,WTF::String const&,std::optional<WTF::String> const&)>(a3, (uint64_t)this);
        break;
      case 5:
        this = IPC::handleMessage<Messages::AuxiliaryProcess::PreferencesDidUpdate,WebKit::AuxiliaryProcess,WebKit::AuxiliaryProcess,void ()(WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>)>(a3, (uint64_t)this);
        break;
      case 7:
        this = (WebKit::AuxiliaryProcess *)WebKit::AuxiliaryProcess::shutDown(this);
        break;
      default:
        return this;
    }
  }
  return this;
}

uint64_t IPC::handleMessageAsync<Messages::AuxiliaryProcess::MainThreadPing,WebKit::AuxiliaryProcess,WebKit::AuxiliaryProcess,void ()(WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  if (v6)
  {
    uint64_t v9 = result;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v10, a1);
    BOOL v7 = (void *)WTF::fastMalloc((WTF *)0x18);
    *BOOL v7 = &unk_1EE9B37C0;
    v7[1] = v9;
    uint64_t v8 = v10;
    long long v10 = 0;
    int8x16_t v11 = v7;
    v7[2] = v8;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v10);
    WebKit::AuxiliaryProcess::mainThreadPing(a3, (uint64_t *)&v11);
    uint64_t result = (uint64_t)v11;
    int8x16_t v11 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

IPC::Decoder *IPC::handleMessage<Messages::AuxiliaryProcess::PreferenceDidUpdate,WebKit::AuxiliaryProcess,WebKit::AuxiliaryProcess,void ()(WTF::String const&,WTF::String const&,std::optional<WTF::String> const&)>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v20);
  if (!v21)
  {
    int v8 = 0;
    LOBYTE(v15) = 0;
    char v19 = 0;
    goto LABEL_40;
  }
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v22);
  if (!v23)
  {
    int v8 = 0;
    LOBYTE(v15) = 0;
    char v19 = 0;
    goto LABEL_15;
  }
  uint64_t result = IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v24);
  if (!v26)
  {
    LOBYTE(v15) = 0;
    char v19 = 0;
    if (v23)
    {
      uint64_t result = v22;
      uint64_t v22 = 0;
      if (result)
      {
        if (*(_DWORD *)result != 2)
        {
          int v8 = 0;
          *(_DWORD *)result -= 2;
LABEL_15:
          int v7 = 1;
          goto LABEL_16;
        }
        uint64_t result = (IPC::Decoder *)WTF::StringImpl::destroy(result, v5);
      }
    }
    int v8 = 0;
    goto LABEL_15;
  }
  if (!v21 || !v23)
  {
    __break(1u);
    return result;
  }
  char v6 = v20;
  uint64_t v20 = 0;
  unsigned int v15 = v6;
  int v16 = v22;
  LOBYTE(v17) = 0;
  char v18 = 0;
  if (v25)
  {
    __int16 v17 = v24;
    char v18 = 1;
  }
  int v7 = 0;
  int v8 = 1;
  char v19 = 1;
LABEL_16:
  if (v21)
  {
    uint64_t result = v20;
    uint64_t v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (IPC::Decoder *)WTF::StringImpl::destroy(result, v5);
        if (v7) {
          goto LABEL_40;
        }
        goto LABEL_23;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v7)
  {
LABEL_40:
    uint64_t v12 = *(void *)a1;
    uint64_t v13 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
    if (result) {
      BOOL v14 = v13 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14) {
      uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v12);
    }
  }
LABEL_23:
  if (v8)
  {
    uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(void *)a2 + 64))(a2, &v15, &v16, &v17);
    if (v19)
    {
      if (v18)
      {
        long long v10 = v17;
        __int16 v17 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2) {
            WTF::StringImpl::destroy(v10, v9);
          }
          else {
            *(_DWORD *)v10 -= 2;
          }
        }
      }
      int8x16_t v11 = v16;
      int v16 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v9);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      uint64_t result = v15;
      unsigned int v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (IPC::Decoder *)WTF::StringImpl::destroy(result, v9);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::handleMessage<Messages::AuxiliaryProcess::PreferencesDidUpdate,WebKit::AuxiliaryProcess,WebKit::AuxiliaryProcess,void ()(WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>)>(IPC::Decoder *a1, uint64_t a2)
{
  unint64_t v3 = *((void *)a1 + 1);
  char v4 = *(WTF::StringImpl **)a1;
  unint64_t v5 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
  if (v3 < v5 || v3 - v5 <= 3)
  {
    unint64_t v75 = 0;
    long long v76 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v77 = *((void *)a1 + 3);
    if (v77)
    {
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v77 + 16))(v77);
        long long v76 = *(WTF::StringImpl **)a1;
        unint64_t v75 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v75 = 0;
        long long v76 = 0;
      }
    }
LABEL_159:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v78 = *((void *)a1 + 3);
    if (v78 && v75) {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v78 + 16))(v78, v76, v75);
    }
LABEL_71:
    int8x16x2_t v33 = *(WTF::StringImpl **)a1;
    uint64_t v34 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v35 = *((void *)a1 + 3);
    if (v35 && v34) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v35 + 16))(v35, v33);
    }
    goto LABEL_152;
  }
  int v7 = (int *)((char *)v4 + v5);
  uint64_t v8 = (uint64_t)v4 + v5 + 4;
  *((void *)a1 + 2) = v8;
  if (!v4)
  {
    unint64_t v75 = v3;
    long long v76 = 0;
    goto LABEL_159;
  }
  int v9 = *v7;
  long long v89 = 0;
  if (!v9)
  {
    int8x16x2_t v36 = 0;
LABEL_74:
    unint64_t v37 = ((v8 + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v4;
    if (v3 < v37 || v3 - v37 <= 3)
    {
      unint64_t v40 = 0;
      char v41 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v79 = *((void *)a1 + 3);
      if (v79)
      {
        if (v3)
        {
          (*(void (**)(uint64_t))(*(void *)v79 + 16))(v79);
          char v41 = *(WTF::StringImpl **)a1;
          unint64_t v40 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v40 = 0;
          char v41 = 0;
        }
      }
      goto LABEL_163;
    }
    uint64_t v39 = (int *)((char *)v4 + v37);
    *((void *)a1 + 2) = (char *)v4 + v37 + 4;
    unint64_t v40 = v3;
    char v41 = v4;
    if (!v4)
    {
LABEL_163:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v80 = *((void *)a1 + 3);
      if (v80 && v40) {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v80 + 16))(v80, v41, v40);
      }
      goto LABEL_149;
    }
    int v42 = *v39;
    long long v89 = 0;
    if (!v42)
    {
      long long v67 = 0;
LABEL_140:
      long long v86 = v36;
      long long v83 = v67;
      WebKit::AuxiliaryProcess::preferencesDidUpdate(a2, (WTF::StringImpl *)&v86, (const WTF::StringImpl *)&v83);
      if (v83) {
        WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable((uint64_t)v83, v68);
      }
      uint64_t result = v86;
      if (v86) {
        return (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v86, v68);
      }
      return result;
    }
    long long v81 = v36;
    int v43 = 0;
    while (1)
    {
      IPC::Decoder::decode<std::pair<WTF::String,WTF::String>>(a1, (uint64_t)&v86);
      if (!v88) {
        goto LABEL_145;
      }
      IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v83);
      if (v85)
      {
        if (!v88) {
          goto LABEL_144;
        }
        if (v86 != (WTF::StringImpl *)-1
          && (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(&v86, (uint64_t)v11, v44) & 1) == 0)
        {
          break;
        }
      }
LABEL_131:
      char v64 = 0;
LABEL_126:
      if (v85)
      {
        if (v84)
        {
          long long v65 = v83;
          long long v83 = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2) {
              WTF::StringImpl::destroy(v65, v11);
            }
            else {
              *(_DWORD *)v65 -= 2;
            }
          }
        }
      }
      std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v86, v11);
      if ((v64 & 1) == 0) {
        goto LABEL_146;
      }
      if (++v43 == v42)
      {
        long long v67 = v89;
        int8x16x2_t v36 = v81;
        goto LABEL_140;
      }
    }
    if (!v88 || !v85) {
      goto LABEL_144;
    }
    uint64_t v45 = (uint64_t)v89;
    if (v89
      || (WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand((uint64_t *)&v89, 0), (uint64_t v45 = (uint64_t)v89) != 0))
    {
      unsigned int v46 = *(_DWORD *)(v45 - 8);
    }
    else
    {
      unsigned int v46 = 0;
    }
    uint64_t v47 = WTF::PairHash<WTF::String,WTF::String>::hash(&v86) & v46;
    uint64_t v48 = v45 + 32 * v47;
    if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)v48, v49, v50) & 1) == 0)
    {
      uint64_t v52 = 0;
      int v53 = 1;
      do
      {
        if (*(void *)v48 == -1)
        {
          uint64_t v52 = v48;
        }
        else if (WTF::PairHash<WTF::String,WTF::String>::equal((WTF **)v48, &v86, v51))
        {
          goto LABEL_131;
        }
        uint64_t v47 = (v47 + v53) & v46;
        uint64_t v48 = v45 + 32 * v47;
        ++v53;
      }
      while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)v48, (uint64_t)v11, v51));
      if (v52)
      {
        *(unsigned char *)(v52 + 24) = 0;
        *(void *)uint64_t v52 = 0;
        *(void *)(v52 + 8) = 0;
        *(unsigned char *)(v52 + 16) = 0;
        --*((_DWORD *)v89 - 4);
        uint64_t v48 = v52;
      }
    }
    long long v54 = v86;
    long long v86 = 0;
    long long v55 = *(WTF::StringImpl **)v48;
    *(void *)uint64_t v48 = v54;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2) {
        WTF::StringImpl::destroy(v55, v11);
      }
      else {
        *(_DWORD *)v55 -= 2;
      }
    }
    uint64_t v56 = v87;
    uint64_t v87 = 0;
    uint64_t v57 = *(WTF::StringImpl **)(v48 + 8);
    *(void *)(v48 + 8) = v56;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2) {
        WTF::StringImpl::destroy(v57, v11);
      }
      else {
        *(_DWORD *)v57 -= 2;
      }
    }
    LOBYTE(v90) = 0;
    char v91 = 0;
    if (v84)
    {
      long long v58 = v83;
      long long v83 = 0;
      long long v90 = v58;
      char v91 = 1;
    }
    std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>(v48 + 16, (uint64_t)&v90);
    if (v91)
    {
      long long v59 = v90;
      long long v90 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2) {
          WTF::StringImpl::destroy(v59, v11);
        }
        else {
          *(_DWORD *)v59 -= 2;
        }
      }
    }
    if (v89) {
      int v60 = *((_DWORD *)v89 - 3) + 1;
    }
    else {
      int v60 = 1;
    }
    *((_DWORD *)v89 - 3) = v60;
    if (v89) {
      int v61 = *((_DWORD *)v89 - 3);
    }
    else {
      int v61 = 0;
    }
    uint64_t v62 = (*((_DWORD *)v89 - 4) + v61);
    unint64_t v63 = *((unsigned int *)v89 - 1);
    if (v63 > 0x400)
    {
      if (v63 > 2 * v62) {
        goto LABEL_125;
      }
    }
    else if (3 * v63 > 4 * v62)
    {
LABEL_125:
      char v64 = 1;
      goto LABEL_126;
    }
    WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand((uint64_t *)&v89, v48);
    goto LABEL_125;
  }
  int v10 = 0;
  while (1)
  {
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v90);
    if (!v91) {
      goto LABEL_69;
    }
    IPC::Decoder::decode<std::optional<WTF::String>>(a1, (uint64_t)&v86);
    if (!v88) {
      goto LABEL_13;
    }
    if (!v91) {
      break;
    }
    if ((unint64_t)v90 + 1 < 2)
    {
LABEL_13:
      char v13 = 0;
      goto LABEL_14;
    }
    uint64_t v15 = (uint64_t)v89;
    if (v89
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)&v89, 0), (uint64_t v15 = (uint64_t)v89) != 0))
    {
      int v16 = *(_DWORD *)(v15 - 8);
    }
    else
    {
      int v16 = 0;
    }
    unsigned int v17 = *((_DWORD *)v90 + 4);
    if (v17 >= 0x100) {
      unsigned int v18 = v17 >> 8;
    }
    else {
      unsigned int v18 = WTF::StringImpl::hashSlowCase(v90);
    }
    uint64_t v19 = 0;
    for (int i = 1; ; ++i)
    {
      unsigned int v21 = v18 & v16;
      uint64_t v22 = (WTF::StringImpl **)(v15 + 24 * (v18 & v16));
      char v23 = *v22;
      if (*v22 == (WTF::StringImpl *)-1)
      {
        uint64_t v19 = v15 + 24 * v21;
        goto LABEL_31;
      }
      if (!v23) {
        break;
      }
      if (WTF::equal(v23, v90, v12)) {
        goto LABEL_13;
      }
LABEL_31:
      unsigned int v18 = i + v21;
    }
    if (v19)
    {
      *(void *)uint64_t v19 = 0;
      *(unsigned char *)(v19 + 8) = 0;
      *(unsigned char *)(v19 + 16) = 0;
      --*((_DWORD *)v89 - 4);
      uint64_t v22 = (WTF::StringImpl **)v19;
    }
    int8x16_t v24 = v90;
    long long v90 = 0;
    char v25 = *v22;
    *uint64_t v22 = v24;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v11);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    LOBYTE(v83) = 0;
    char v84 = 0;
    if ((_BYTE)v87)
    {
      uint64_t v27 = v86;
      long long v86 = 0;
      long long v83 = v27;
      char v84 = 1;
    }
    std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>((uint64_t)(v22 + 1), (uint64_t)&v83);
    if (v84)
    {
      uint64_t v28 = v83;
      long long v83 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2) {
          WTF::StringImpl::destroy(v28, v11);
        }
        else {
          *(_DWORD *)v28 -= 2;
        }
      }
    }
    if (v89) {
      int v29 = *((_DWORD *)v89 - 3) + 1;
    }
    else {
      int v29 = 1;
    }
    *((_DWORD *)v89 - 3) = v29;
    if (v89) {
      int v30 = *((_DWORD *)v89 - 3);
    }
    else {
      int v30 = 0;
    }
    uint64_t v31 = (*((_DWORD *)v89 - 4) + v30);
    unint64_t v32 = *((unsigned int *)v89 - 1);
    if (v32 > 0x400)
    {
      if (v32 <= 2 * v31) {
LABEL_64:
      }
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)&v89, (uint64_t)v22);
    }
    else if (3 * v32 <= 4 * v31)
    {
      goto LABEL_64;
    }
    char v13 = 1;
LABEL_14:
    if (v88)
    {
      if ((_BYTE)v87)
      {
        BOOL v14 = v86;
        long long v86 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy(v14, v11);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
      }
    }
    if (!v91 || (char v26 = v90, v90 = 0, !v26))
    {
LABEL_42:
      if (v13) {
        goto LABEL_45;
      }
LABEL_69:
      if (v89) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v89, v11);
      }
      goto LABEL_71;
    }
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      goto LABEL_42;
    }
    WTF::StringImpl::destroy(v26, v11);
    if ((v13 & 1) == 0) {
      goto LABEL_69;
    }
LABEL_45:
    if (++v10 == v9)
    {
      int8x16x2_t v36 = v89;
      unint64_t v3 = *((void *)a1 + 1);
      uint64_t v8 = *((void *)a1 + 2);
      char v4 = *(WTF::StringImpl **)a1;
      goto LABEL_74;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v86, v11);
LABEL_146:
  if (v89) {
    WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable((uint64_t)v89, v66);
  }
  int8x16x2_t v36 = v81;
LABEL_149:
  long long v70 = *(WTF::StringImpl **)a1;
  uint64_t v71 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v72 = *((void *)a1 + 3);
  if (v72 && v71) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v72 + 16))(v72, v70);
  }
  if (v36) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v36, v70);
  }
LABEL_152:
  long long v73 = *(WTF::StringImpl **)a1;
  uint64_t v74 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
  if (result)
  {
    if (v74) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
    }
                                                                                                + 16))(result, v73);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16AuxiliaryProcess14MainThreadPingEN6WebKit16AuxiliaryProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B37C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16AuxiliaryProcess14MainThreadPingEN6WebKit16AuxiliaryProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B37C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16AuxiliaryProcess14MainThreadPingEN6WebKit16AuxiliaryProcessES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 2874;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Connection *WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(void)const::{lambda(void)#1}::operator()(a1 + 8, a2);
}

IPC::Connection *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(void)const::{lambda(void)#1}::operator()(uint64_t a1, void *a2)
{
  char v4 = *(WTF **)a1;
  uint64_t result = *(IPC::Connection **)(a1 + 8);
  if (result)
  {
    IPC::Connection::~Connection(result);
    uint64_t result = (IPC::Connection *)WTF::fastFree(v5, v6);
  }
  if (*(unsigned char *)(a1 + 16)) {
    BOOL v7 = v4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    return (IPC::Connection *)WTF::fastFree(v4, a2);
  }
  return result;
}

IPC::Decoder *IPC::Decoder::decode<std::optional<WTF::String>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      BOOL v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (IPC::Decoder *)v7();
    }
  }
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::optional<WTF::String>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *((void *)result + 1);
  uint64_t v4 = *(void *)result;
  unint64_t v5 = *((void *)result + 2) - *(void *)result;
  if (v3 <= v5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v11 = *((void *)result + 3);
    if (v11)
    {
      BOOL v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        uint64_t result = v14;
        uint64_t v10 = *(void *)v14;
        unint64_t v9 = *((void *)v14 + 1);
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_12;
  }
  char v6 = (unsigned __int8 *)(v4 + v5);
  *((void *)result + 2) = v6 + 1;
  if (!v4)
  {
    unint64_t v9 = v3;
    uint64_t v10 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v12 = *((void *)result + 3);
    if (v12)
    {
      char v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        uint64_t result = v13;
        uint64_t v4 = *(void *)v13;
        unint64_t v3 = *((void *)v13 + 1);
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      uint64_t result = IPC::Decoder::decode<WTF::String>(result, (uint64_t)&v15);
      char v8 = v16;
      if (v16)
      {
        *(void *)a2 = v15;
        char v8 = 1;
        *(unsigned char *)(a2 + 8) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 16) = v8;
    return result;
  }
LABEL_13:
  *(void *)uint64_t result = 0;
  *((void *)result + 1) = 0;
  uint64_t result = (IPC::Decoder *)*((void *)result + 3);
  if (result && v3) {
    uint64_t result = (IPC::Decoder *)(*(uint64_t (**)(IPC::Decoder *, uint64_t))(*(void *)result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t Table = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v6;
    uint64_t v13 = v7;
    do
    {
      if (*(void *)v12 != -1)
      {
        if (*(void *)v12)
        {
          uint64_t v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, (WTF::StringImpl **)v12);
          std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v15 + 8);
          unsigned int v17 = *(WTF::StringImpl **)v15;
          *(void *)uint64_t v15 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v16);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
          unsigned int v18 = *(WTF::StringImpl **)v12;
          *(void *)uint64_t v12 = 0;
          *(void *)uint64_t v15 = v18;
          *(unsigned char *)(v15 + 8) = 0;
          *(unsigned char *)(v15 + 16) = 0;
          if (*(unsigned char *)(v12 + 16))
          {
            uint64_t v19 = *(void *)(v12 + 8);
            *(void *)(v12 + 8) = 0;
            *(void *)(v15 + 8) = v19;
            *(unsigned char *)(v15 + 16) = 1;
          }
          std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v12 + 8);
          uint64_t v20 = *(WTF::StringImpl **)v12;
          *(void *)uint64_t v12 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2) {
              WTF::StringImpl::destroy(v20, v10);
            }
            else {
              *(_DWORD *)v20 -= 2;
            }
          }
          if (v12 == a3) {
            uint64_t v11 = v15;
          }
        }
        else
        {
          std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v12 + 8);
          BOOL v14 = *(WTF::StringImpl **)v12;
          *(void *)uint64_t v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v10);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
      }
      v12 += 24;
      --v13;
    }
    while (v13);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(unsigned int a1)
{
  uint64_t v2 = WTF::fastMalloc((WTF *)(24 * a1 + 16));
  uint64_t result = v2 + 16;
  if (a1)
  {
    uint64_t v4 = a1;
    unsigned int v5 = (unsigned char *)(v2 + 32);
    do
    {
      *((void *)v5 - 2) = 0;
      *(v5 - 8) = 0;
      *unsigned int v5 = 0;
      v5 += 24;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  unsigned int v4 = *((_DWORD *)*a2 + 4);
  if (v4 >= 0x100) {
    int v5 = v4 >> 8;
  }
  else {
    int v5 = WTF::StringImpl::hashSlowCase(*a2);
  }
  int v6 = 0;
  do
  {
    unsigned int v7 = v5 & v3;
    int v5 = ++v6 + (v5 & v3);
  }
  while (*(void *)(v2 + 24 * v7));
  return v2 + 24 * v7;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 8;
    do
    {
      if (*(void *)(v4 - 8) != -1)
      {
        std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v4);
        int v5 = *(WTF::StringImpl **)(v4 - 8);
        *(void *)(v4 - 8) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl *IPC::Decoder::decode<std::pair<WTF::String,WTF::String>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::pair<WTF::String,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      unsigned int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::pair<WTF::String,WTF::String>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v9);
  if (v10)
  {
    uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v7);
    if (v8)
    {
      if (v10)
      {
        uint64_t v6 = v7;
        *(void *)a2 = v9;
        *(void *)(a2 + 8) = v6;
        *(unsigned char *)(a2 + 16) = 1;
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 16) = 0;
      if (v10)
      {
        uint64_t result = v9;
        unint64_t v9 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(WTF **a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result = WTF::equal(*a1, 0, a3);
  if (result)
  {
    uint64_t v6 = a1[1];
    return WTF::equal(v6, 0, v5);
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t Table = WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v12 = 0;
  if (v7)
  {
    uint64_t v13 = v6;
    uint64_t v14 = v7;
    do
    {
      if (*(void *)v13 != -1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)v13, (uint64_t)v10, v11))
        {
          std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v13 + 16);
          uint64_t v15 = *(WTF::StringImpl **)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v10);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
          uint64_t v19 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, v10);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
        }
        else
        {
          uint64_t v16 = WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::lookupForReinsert(a1, (WTF::StringImpl **)v13);
          std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v16 + 16);
          unsigned int v18 = *(WTF::StringImpl **)(v16 + 8);
          *(void *)(v16 + 8) = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2) {
              WTF::StringImpl::destroy(v18, v17);
            }
            else {
              *(_DWORD *)v18 -= 2;
            }
          }
          uint64_t v20 = *(WTF::StringImpl **)v16;
          *(void *)uint64_t v16 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2) {
              WTF::StringImpl::destroy(v20, v17);
            }
            else {
              *(_DWORD *)v20 -= 2;
            }
          }
          unsigned int v21 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          *(void *)uint64_t v16 = v21;
          uint64_t v22 = *(void *)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          *(void *)(v16 + 8) = v22;
          *(unsigned char *)(v16 + 16) = 0;
          *(unsigned char *)(v16 + 24) = 0;
          if (*(unsigned char *)(v13 + 24))
          {
            uint64_t v23 = *(void *)(v13 + 16);
            *(void *)(v13 + 16) = 0;
            *(void *)(v16 + 16) = v23;
            *(unsigned char *)(v16 + 24) = 1;
          }
          std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v13 + 16);
          int8x16_t v24 = *(WTF::StringImpl **)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, v10);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
          char v25 = *(WTF::StringImpl **)v13;
          *(void *)uint64_t v13 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2) {
              WTF::StringImpl::destroy(v25, v10);
            }
            else {
              *(_DWORD *)v25 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v12 = v16;
          }
        }
      }
      v13 += 32;
      --v14;
    }
    while (v14);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::allocateTable(unsigned int a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = WTF::fastMalloc((WTF *)((32 * a1) | 0x10));
  uint64_t result = v3 + 16;
  if (a1)
  {
    unsigned int v5 = (unsigned char *)(v3 + 40);
    do
    {
      *unsigned int v5 = 0;
      *((void *)v5 - 3) = 0;
      *((void *)v5 - 2) = 0;
      *(v5 - 8) = 0;
      v5 += 32;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::lookupForReinsert(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    unsigned int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    unsigned int v3 = 0;
  }
  int v4 = WTF::PairHash<WTF::String,WTF::String>::hash(a2);
  int v7 = 0;
  do
  {
    uint64_t v8 = v4 & v3;
    int v9 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)(v2 + 32 * v8), v5, v6);
    int v4 = ++v7 + v8;
  }
  while (!v9);
  return v2 + 32 * v8;
}

unint64_t WTF::PairHash<WTF::String,WTF::String>::hash(WTF::StringImpl **a1)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *((_DWORD *)v2 + 4);
  if (v3 >= 0x100) {
    unsigned int v4 = v3 >> 8;
  }
  else {
    unsigned int v4 = WTF::StringImpl::hashSlowCase(v2);
  }
  uint64_t v5 = a1[1];
  unsigned int v6 = *((_DWORD *)v5 + 4);
  if (v6 >= 0x100) {
    unsigned int v7 = v6 >> 8;
  }
  else {
    unsigned int v7 = WTF::StringImpl::hashSlowCase(v5);
  }
  return (0xD7862706ELL * (unint64_t)(277951225 * v4 + 95187966 * v7)) >> 4;
}

uint64_t WTF::PairHash<WTF::String,WTF::String>::equal(WTF **a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result = WTF::equal(*a1, *a2, a3);
  if (result)
  {
    unsigned int v7 = a1[1];
    uint64_t v8 = a2[1];
    return WTF::equal(v7, v8, v6);
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 16;
    do
    {
      if (*(void *)(v4 - 16) != -1)
      {
        std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v4);
        uint64_t v5 = *(WTF::StringImpl **)(v4 - 8);
        *(void *)(v4 - 8) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
        unsigned int v6 = *(WTF::StringImpl **)(v4 - 16);
        *(void *)(v4 - 16) = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2) {
            WTF::StringImpl::destroy(v6, a2);
          }
          else {
            *(_DWORD *)v6 -= 2;
          }
        }
      }
      v4 += 32;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::taskInfo@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(this + 136);
  if (v3
    && (int v4 = *(_DWORD *)(v3 + 108)) != 0
    && (uint64_t v5 = this,
        mach_port_name_t tn = 0,
        unsigned int v6 = (ipc_space_t *)MEMORY[0x1E4F14960],
        this = task_name_for_pid(*MEMORY[0x1E4F14960], v4, &tn),
        !this))
  {
    mach_port_name_t v7 = tn;
    mach_msg_type_number_t task_info_outCnt = 12;
    if (task_info(tn, 0x14u, task_info_out, &task_info_outCnt) || (mach_msg_type_number_t v17 = 8, task_info(tn, 1u, (task_info_t)v18, &v17)))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 32) = 0;
    }
    else
    {
      mach_msg_type_number_t v14 = 38;
      if (task_info(tn, 0x16u, v15, &v14))
      {
        char v8 = 0;
        *(unsigned char *)a2 = 0;
      }
      else
      {
        if (*(unsigned __int8 *)(v5 + 384) | task_info_out[11]) {
          char v9 = *(unsigned char *)(v5 + 384);
        }
        else {
          char v9 = 1;
        }
        WTF::MonotonicTime::fromMachAbsoluteTime(v18[0]);
        uint64_t v11 = v10;
        WTF::MonotonicTime::fromMachAbsoluteTime(v18[1]);
        uint64_t v12 = v16;
        *(_DWORD *)a2 = v4;
        *(unsigned char *)(a2 + 4) = v9;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = v13;
        *(void *)(a2 + 24) = v12;
        char v8 = 1;
      }
      *(unsigned char *)(a2 + 32) = v8;
    }
    return mach_port_deallocate(*v6, v7);
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 32) = 0;
  }
  return this;
}

void sub_1987D8AA4(_Unwind_Exception *a1)
{
  mach_port_deallocate(*v2, v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::AuxiliaryProcessProxy::notifyPreferencesChanged(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, const WTF::StringImpl *a4)
{
  if (*(unsigned char *)(a1 + 170))
  {
    int v4 = *a2;
    if (*a2)
    {
      uint64_t v5 = (uint64_t *)(a1 + 408);
      *(_DWORD *)v4 += 2;
      uint64_t v10 = v4;
      unsigned int v6 = *a3;
      if (*a3) {
        *(_DWORD *)v6 += 2;
      }
      uint64_t v11 = v6;
      WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::inlineSet<std::pair<WTF::String,WTF::String>,std::optional<WTF::String> const&>(v5, (uint64_t)&v10, (uint64_t)a4, (uint64_t)v12);
      char v8 = v11;
      uint64_t v11 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v7);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      uint64_t result = v10;
      uint64_t v10 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    else
    {
      return (WTF::StringImpl *)WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,std::optional<WTF::String> const&>((uint64_t *)(a1 + 400), a3, a4, (uint64_t)v12);
    }
  }
  else
  {
    v12[0] = a2;
    v12[1] = a3;
    v12[2] = a4;
    return (WTF::StringImpl *)WebKit::AuxiliaryProcessProxy::send<Messages::AuxiliaryProcess::PreferenceDidUpdate>(a1, (uint64_t)v12, 0, 0);
  }
  return result;
}

void sub_1987D8BB8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::AuxiliaryProcess::PreferenceDidUpdate>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 4;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  unsigned int v18 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(v8, *(void *)(a2 + 16));
  LOBYTE(v16) = 0;
  char v17 = 0;
  uint64_t v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = v18;
  unsigned int v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v14, v15);
  }
  return v10;
}

void sub_1987D8D2C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  if (a11 && a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,std::optional<WTF::String> const&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v7 = *a1) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unsigned int v9 = *((_DWORD *)*a2 + 4);
  if (v9 >= 0x100) {
    unsigned int v10 = v9 >> 8;
  }
  else {
    unsigned int v10 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v11 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v13 = v10 & v8;
    mach_msg_type_number_t v14 = (uint64_t *)(v7 + 24 * (v10 & v8));
    uint64_t v15 = (WTF *)*v14;
    if (*v14 != -1) {
      break;
    }
    uint64_t v11 = v7 + 24 * v13;
LABEL_13:
    unsigned int v10 = i + v13;
  }
  if (!v15)
  {
    if (v11)
    {
      *(void *)uint64_t v11 = 0;
      *(unsigned char *)(v11 + 8) = 0;
      *(unsigned char *)(v11 + 16) = 0;
      --*(_DWORD *)(*a1 - 16);
      mach_msg_type_number_t v14 = (uint64_t *)v11;
    }
    WTF::String::operator=(v14, a2);
    LOBYTE(v28) = 0;
    char v29 = 0;
    if (*((unsigned char *)a3 + 8))
    {
      uint64_t v16 = *(WTF::StringImpl **)a3;
      if (*(void *)a3) {
        *(_DWORD *)v16 += 2;
      }
      uint64_t v28 = v16;
      char v29 = 1;
    }
    uint64_t result = (uint64_t *)std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>((uint64_t)(v14 + 1), (uint64_t)&v28);
    if (v29)
    {
      uint64_t result = (uint64_t *)v28;
      uint64_t v28 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
    uint64_t v21 = *a1;
    if (*a1) {
      int v22 = *(_DWORD *)(v21 - 12) + 1;
    }
    else {
      int v22 = 1;
    }
    *(_DWORD *)(v21 - 12) = v22;
    uint64_t v23 = *a1;
    if (*a1) {
      int v24 = *(_DWORD *)(v23 - 12);
    }
    else {
      int v24 = 0;
    }
    uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
    unint64_t v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
      {
LABEL_40:
        uint64_t result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (uint64_t)v14);
        mach_msg_type_number_t v14 = result;
        uint64_t v23 = *a1;
        if (*a1) {
          LODWORD(v26) = *(_DWORD *)(v23 - 4);
        }
        else {
          LODWORD(v26) = 0;
        }
      }
    }
    else if (3 * v26 <= 4 * v25)
    {
      goto LABEL_40;
    }
    *(void *)a4 = v14;
    *(void *)(a4 + 8) = v23 + 24 * v26;
    *(unsigned char *)(a4 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v15, *a2, a3)) {
    goto LABEL_13;
  }
  uint64_t v19 = *a1;
  if (*a1) {
    unsigned int v20 = *(_DWORD *)(v19 - 4);
  }
  else {
    unsigned int v20 = 0;
  }
  *(void *)a4 = v14;
  *(void *)(a4 + 8) = v19 + 24 * v20;
  *(unsigned char *)(a4 + 16) = 0;

  return std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::String,false> const&>((uint64_t *)(v7 + 24 * v13 + 8), (WTF::StringImpl **)a3);
}

void sub_1987D9000(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::inlineSet<std::pair<WTF::String,WTF::String>,std::optional<WTF::String> const&>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    unsigned int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  uint64_t v10 = WTF::PairHash<WTF::String,WTF::String>::hash((WTF::StringImpl **)a2) & v9;
  uint64_t v11 = v8 + 32 * v10;
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)v11, v12, v13) & 1) == 0)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    do
    {
      if (*(void *)v11 == -1)
      {
        uint64_t v16 = v11;
      }
      else if (WTF::PairHash<WTF::String,WTF::String>::equal((WTF **)v11, (const WTF::StringImpl **)a2, v15))
      {
        uint64_t v27 = *a1;
        if (*a1) {
          uint64_t v28 = *(unsigned int *)(v27 - 4);
        }
        else {
          uint64_t v28 = 0;
        }
        *(void *)a4 = v11;
        *(void *)(a4 + 8) = v27 + 32 * v28;
        *(unsigned char *)(a4 + 16) = 0;
        return std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::String,false> const&>((uint64_t *)(v8 + 32 * v10 + 16), (WTF::StringImpl **)a3);
      }
      uint64_t v10 = (v10 + v17) & v9;
      uint64_t v11 = v8 + 32 * v10;
      ++v17;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)v11, v14, v15));
    if (v16)
    {
      *(unsigned char *)(v16 + 24) = 0;
      *(void *)uint64_t v16 = 0;
      *(void *)(v16 + 8) = 0;
      *(unsigned char *)(v16 + 16) = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v11 = v16;
    }
  }
  WTF::String::operator=((uint64_t *)v11, (uint64_t *)a2);
  WTF::String::operator=((uint64_t *)(v11 + 8), (uint64_t *)(a2 + 8));
  LOBYTE(v29) = 0;
  char v30 = 0;
  if (*(unsigned char *)(a3 + 8))
  {
    unsigned int v18 = *(WTF::StringImpl **)a3;
    if (*(void *)a3) {
      *(_DWORD *)v18 += 2;
    }
    char v29 = v18;
    char v30 = 1;
  }
  uint64_t result = (uint64_t *)std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>(v11 + 16, (uint64_t)&v29);
  if (v30)
  {
    uint64_t result = (uint64_t *)v29;
    char v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  uint64_t v21 = *a1;
  if (*a1) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 12) = v22;
  uint64_t v23 = *a1;
  if (*a1) {
    int v24 = *(_DWORD *)(v23 - 12);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
  unint64_t v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_30:
      uint64_t result = (uint64_t *)WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::expand(a1, v11);
      uint64_t v11 = (uint64_t)result;
      uint64_t v23 = *a1;
      if (*a1) {
        unint64_t v26 = *(unsigned int *)(v23 - 4);
      }
      else {
        unint64_t v26 = 0;
      }
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_30;
  }
  *(void *)a4 = v11;
  *(void *)(a4 + 8) = v23 + 32 * v26;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1987D92A8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  uint64_t result = (_DWORD *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1987D9380);
    }
    *(unsigned char *)uint64_t result = 1;
    if (*(unsigned char *)(a2 + 8))
    {
      return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
    }
    else
    {
      uint64_t v7 = (WebKit::BackgroundFetchState *)std::__throw_bad_optional_access[abi:sn180100]();
      return (_DWORD *)WebKit::BackgroundFetchState::toDictionary(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1987D93A0);
    }
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

uint64_t WebKit::BackgroundFetchState::toDictionary(WebKit::BackgroundFetchState *this)
{
  v15[11] = *MEMORY[0x1E4F143B8];
  v14[0] = @"TopOrigin";
  WebCore::SecurityOriginData::toString((uint64_t *)&v13, this);
  if (v13) {
    uint64_t v2 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v2 = &stru_1EEA10550;
  }
  v15[0] = v2;
  v14[1] = @"Scope";
  v15[1] = WTF::URL::operator NSURL *();
  v14[2] = @"WebIdentifier";
  if (*((void *)this + 9)) {
    uint64_t v3 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v3 = &stru_1EEA10550;
  }
  v15[2] = v3;
  v14[3] = @"Title";
  if (*((void *)this + 12)) {
    int v4 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    int v4 = &stru_1EEA10550;
  }
  v15[3] = v4;
  v14[4] = @"DownloadTotal";
  void v15[4] = [NSNumber numberWithUnsignedLongLong:*((void *)this + 14)];
  v14[5] = @"Downloaded";
  v15[5] = [NSNumber numberWithUnsignedLongLong:*((void *)this + 15)];
  v14[6] = @"UploadTotal";
  v15[6] = [NSNumber numberWithUnsignedLongLong:*((void *)this + 16)];
  v14[7] = @"Uploaded";
  v15[7] = [NSNumber numberWithUnsignedLongLong:*((void *)this + 17)];
  v14[8] = @"Result";
  WebCore::convertEnumerationToString();
  if (v12) {
    uint64_t v5 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v5 = &stru_1EEA10550;
  }
  v15[8] = v5;
  v14[9] = @"FailureReason";
  WebCore::convertEnumerationToString();
  if (v11) {
    uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v6 = &stru_1EEA10550;
  }
  v15[9] = v6;
  v14[10] = @"IsPaused";
  v15[10] = [NSNumber numberWithBool:*((unsigned __int8 *)this + 146)];
  uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v15 forKeys:v14 count:11];
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v7);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v7);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  unsigned int v9 = v13;
  unsigned int v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  return v8;
}

void sub_1987D9618(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

id WebKit::filterObjects<NSArray>(void *a1, void *a2)
{
  id v3 = a1;
  int v4 = a2;
  if (v3)
  {
    uint64_t v5 = [v3 count];
    if (v5)
    {
      if (v5 == 1)
      {
        uint64_t v6 = [v3 objectAtIndexedSubscript:0];
        if (v4[2](v4, &unk_1EEA52D50, v6)) {
          uint64_t v7 = (void *)[v3 copy];
        }
        else {
          uint64_t v7 = (void *)MEMORY[0x1E4F1CBF0];
        }
      }
      else
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 3221225472;
        void v10[2] = ___ZN6WebKit13filterObjectsI7NSArrayEEPT_S3_U13block_pointerFbP11objc_objectS5_E_block_invoke;
        v10[3] = &unk_1E5811A20;
        uint64_t v11 = v4;
        uint64_t v8 = [v3 indexesOfObjectsPassingTest:v10];
        uint64_t v7 = [v3 objectsAtIndexes:v8];
      }
    }
    else
    {
      uint64_t v7 = (void *)MEMORY[0x1E4F1CBF0];
    }
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1987D980C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit13filterObjectsI7NSArrayEEPT_S3_U13block_pointerFbP11objc_objectS5_E_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = [NSNumber numberWithUnsignedInteger:a3];
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void *, id))(v6 + 16))(v6, v7, v5);

  return v8;
}

void sub_1987D98C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::filterObjects<NSDictionary>(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    if ([v3 count])
    {
      id v5 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v3, "count"));
      uint64_t v9 = MEMORY[0x1E4F143A8];
      uint64_t v10 = 3221225472;
      uint64_t v11 = ___ZN6WebKit13filterObjectsI12NSDictionaryEEPT_S3_U13block_pointerFbP11objc_objectS5_E_block_invoke;
      uint64_t v12 = &unk_1E5811A48;
      id v14 = v4;
      id v6 = v5;
      id v13 = v6;
      [v3 enumerateKeysAndObjectsUsingBlock:&v9];
      uint64_t v7 = objc_msgSend(v6, "copy", v9, v10, v11, v12);
    }
    else
    {
      uint64_t v7 = (void *)MEMORY[0x1E4F1CC08];
    }
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1987D9A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZN6WebKit13filterObjectsI12NSDictionaryEEPT_S3_U13block_pointerFbP11objc_objectS5_E_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))()) {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v6];
  }
}

void sub_1987D9ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit13filterObjectsI5NSSetEEPT_S3_U13block_pointerFbP11objc_objectS5_E_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id WebKit::mapObjects<NSArray>(void *a1, void *a2)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    uint64_t v5 = [v3 count];
    if (v5)
    {
      if (v5 == 1)
      {
        id v6 = [v3 objectAtIndexedSubscript:0];
        v4[2](v4, &unk_1EEA52D50, v6);
        id v7 = (id)objc_claimAutoreleasedReturnValue();

        if (v7)
        {
          v17[0] = v7;
          uint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v17 count:1];
        }
        else
        {
          uint64_t v8 = (void *)MEMORY[0x1E4F1CBF0];
        }
      }
      else
      {
        uint64_t v9 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v3, "count"));
        uint64_t v11 = MEMORY[0x1E4F143A8];
        uint64_t v12 = 3221225472;
        id v13 = ___ZN6WebKit10mapObjectsI7NSArrayEEPT_S3_U13block_pointerFP11objc_objectS5_S5_E_block_invoke;
        id v14 = &unk_1E5811A98;
        uint64_t v16 = v4;
        id v7 = v9;
        id v15 = v7;
        [v3 enumerateObjectsUsingBlock:&v11];
        uint64_t v8 = objc_msgSend(v7, "copy", v11, v12, v13, v14);
      }
    }
    else
    {
      uint64_t v8 = (void *)MEMORY[0x1E4F1CBF0];
    }
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

void sub_1987D9CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN6WebKit10mapObjectsI7NSArrayEEPT_S3_U13block_pointerFP11objc_objectS5_S5_E_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v8 = a2;
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = [NSNumber numberWithUnsignedInteger:a3];
  id v7 = (*(void (**)(uint64_t, void *, id))(v5 + 16))(v5, v6, v8);

  if (v7) {
    [*(id *)(a1 + 32) addObject:v7];
  }
}

void sub_1987D9DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id WebKit::mapObjects<NSDictionary>(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    if ([v3 count])
    {
      uint64_t v5 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", objc_msgSend(v3, "count"));
      uint64_t v9 = MEMORY[0x1E4F143A8];
      uint64_t v10 = 3221225472;
      uint64_t v11 = ___ZN6WebKit10mapObjectsI12NSDictionaryEEPT_S3_U13block_pointerFP11objc_objectS5_S5_E_block_invoke;
      uint64_t v12 = &unk_1E5811A48;
      id v14 = v4;
      id v6 = v5;
      id v13 = v6;
      [v3 enumerateKeysAndObjectsUsingBlock:&v9];
      id v7 = objc_msgSend(v6, "copy", v9, v10, v11, v12);
    }
    else
    {
      id v7 = (void *)MEMORY[0x1E4F1CC08];
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_1987D9F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZN6WebKit10mapObjectsI12NSDictionaryEEPT_S3_U13block_pointerFP11objc_objectS5_S5_E_block_invoke(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  if (v3) {
    [*(id *)(a1 + 32) setObject:v3 forKeyedSubscript:v4];
  }
}

void sub_1987D9FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id WebKit::objectForKey<NSString>(void *a1, uint64_t a2, int a3)
{
  id v4 = [a1 objectForKeyedSubscript:a2];
  objc_opt_class();
  uint64_t v5 = WTF::dynamic_objc_cast<NSString>(v4);

  if (!a3 || (id v6 = (void *)[v5 length]) != 0) {
    id v6 = v5;
  }
  id v7 = v6;

  return v7;
}

void sub_1987DA068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::objectForKey<NSArray>(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  id v6 = [a1 objectForKeyedSubscript:a2];
  objc_opt_class();
  id v7 = WTF::dynamic_objc_cast<NSArray>(v6);

  if (a3 && ![v7 count]) {
    id v8 = 0;
  }
  else {
    id v8 = v7;
  }
  id v9 = v8;

  if (a4 && v9)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = ___ZN6WebKit12objectForKeyI7NSArrayEEPT_P12NSDictionaryP11objc_objectbP10objc_class_block_invoke;
    void v12[3] = &__block_descriptor_40_e11_B24__0_8_16lu32l8;
    void v12[4] = a4;
    uint64_t v10 = WebKit::filterObjects<NSArray>(v9, v12);

    id v9 = (id)v10;
  }

  return v9;
}

void sub_1987DA198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit12objectForKeyI7NSArrayEEPT_P12NSDictionaryP11objc_objectbP10objc_class_block_invoke()
{
  return objc_opt_isKindOfClass() & 1;
}

id WebKit::objectForKey<NSDictionary>(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  id v6 = [a1 objectForKeyedSubscript:a2];
  objc_opt_class();
  id v7 = WTF::dynamic_objc_cast<NSDictionary>(v6);

  if (a3 && ![v7 count]) {
    id v8 = 0;
  }
  else {
    id v8 = v7;
  }
  id v9 = v8;

  if (a4 && v9)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = ___ZN6WebKit12objectForKeyI12NSDictionaryEEPT_PS1_P11objc_objectbP10objc_class_block_invoke;
    void v12[3] = &__block_descriptor_40_e11_B24__0_8_16lu32l8;
    void v12[4] = a4;
    uint64_t v10 = WebKit::filterObjects<NSDictionary>(v9, v12);

    id v9 = (id)v10;
  }

  return v9;
}

void sub_1987DA2EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit12objectForKeyI12NSDictionaryEEPT_PS1_P11objc_objectbP10objc_class_block_invoke()
{
  return objc_opt_isKindOfClass() & 1;
}

id WebKit::objectForKey<NSSet>(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  id v6 = [a1 objectForKeyedSubscript:a2];
  objc_opt_class();
  id v7 = WTF::dynamic_objc_cast<NSSet>(v6);

  if (a3 && ![v7 count]) {
    id v8 = 0;
  }
  else {
    id v8 = v7;
  }
  id v9 = v8;

  if (a4 && v9)
  {
    uint64_t v13 = MEMORY[0x1E4F143A8];
    uint64_t v14 = 3221225472;
    id v15 = ___ZN6WebKit12objectForKeyI5NSSetEEPT_P12NSDictionaryP11objc_objectbP10objc_class_block_invoke;
    uint64_t v16 = &__block_descriptor_40_e11_B24__0_8_16lu32l8;
    uint64_t v17 = a4;
    id v10 = v9;
    uint64_t v11 = &v13;
    if (objc_msgSend(v10, "count", v13, v14, v15, v16, v17))
    {
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 3221225472;
      v18[2] = ___ZN6WebKit13filterObjectsI5NSSetEEPT_S3_U13block_pointerFbP11objc_objectS5_E_block_invoke;
      void v18[3] = &unk_1E5811A70;
      uint64_t v19 = v11;
      id v9 = [v10 objectsPassingTest:v18];
    }
    else
    {
      id v9 = [MEMORY[0x1E4F1CAD0] set];
    }
  }

  return v9;
}

void sub_1987DA4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<NSSet>(void *a1)
{
  id v1 = a1;
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_1987DA564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit12objectForKeyI5NSSetEEPT_P12NSDictionaryP11objc_objectbP10objc_class_block_invoke()
{
  return objc_opt_isKindOfClass() & 1;
}

uint64_t WebKit::isValidJSONObject(void *a1, char a2)
{
  id v3 = a1;
  if (!v3) {
    goto LABEL_5;
  }
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0
      || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
      || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      uint64_t v4 = 1;
      goto LABEL_10;
    }
    goto LABEL_4;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
LABEL_5:
    uint64_t v4 = 0;
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v4 = [MEMORY[0x1E4F28D90] isValidJSONObject:v3];
LABEL_10:

  return v4;
}

void sub_1987DA664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::parseJSON(void *a1, char a2, uint64_t a3)
{
  id v5 = a1;
  if ([v5 length])
  {
    id v6 = [MEMORY[0x1E4F28D90] JSONObjectWithData:v5 options:4 * (a2 & 1) error:a3];
    if ((a2 & 1) == 0)
    {
      objc_opt_class();
      uint64_t v7 = WTF::dynamic_objc_cast<NSDictionary>(v6);

      id v6 = (void *)v7;
    }
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

{
  id v5;
  void *v6;
  void *v7;
  uint64_t vars8;

  id v5 = a1;
  if ([v5 length])
  {
    id v6 = [v5 dataUsingEncoding:4];
    uint64_t v7 = WebKit::parseJSON(v6, a2, a3);
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1987DA720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1987DA7C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::parseJSON(uint64_t a1, char a2, uint64_t a3)
{
  id v3 = WebKit::parseJSON(*(void **)(a1 + 8), a2, a3);

  return v3;
}

id WebKit::encodeJSONString(void *a1, char a2, void *a3)
{
  id v5 = a1;
  objc_opt_class();
  id v6 = WTF::dynamic_objc_cast<JSValue>(v5);
  uint64_t v7 = v6;
  if (v6)
  {
    if (a2 & 1) != 0 || ([v6 _isDictionary])
    {
      a3 = [v7 _toJSONString];
    }
    else
    {
      a3 = 0;
    }
  }
  else
  {
    id v8 = WebKit::encodeJSONData(v5, a2, (uint64_t)a3);
    if (v8) {
      a3 = (void *)[[NSString alloc] initWithData:v8 encoding:4];
    }

    if (!v8) {
      a3 = 0;
    }
  }

  return a3;
}

void sub_1987DA900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<JSValue>(void *a1)
{
  id v1 = a1;
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_1987DA980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::encodeJSONData(void *a1, char a2, uint64_t a3)
{
  id v5 = a1;
  if (!v5)
  {
LABEL_9:
    id v9 = 0;
    goto LABEL_12;
  }
  objc_opt_class();
  id v6 = WTF::dynamic_objc_cast<JSValue>(v5);
  uint64_t v7 = v6;
  if (!v6)
  {
    if (a2 & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
    {
      id v9 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v5 options:4 * (a2 & 1) error:a3];
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  if (a2 & 1) != 0 || ([v6 _isDictionary])
  {
    id v8 = [v7 _toJSONString];
    id v9 = [v8 dataUsingEncoding:4];
  }
  else
  {
    id v9 = 0;
  }

LABEL_12:

  return v9;
}

void sub_1987DAA90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::dictionaryWithLowercaseKeys(WebKit *this, NSDictionary *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v2 = this;
  if ([(WebKit *)v2 count])
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithCapacity:", -[WebKit count](v2, "count"));
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v4 = [(WebKit *)v2 allKeys];
    uint64_t v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v14;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v4);
          }
          id v8 = *(void **)(*((void *)&v13 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v9 = [(WebKit *)v2 objectForKeyedSubscript:v8];
            id v10 = [v8 lowercaseString];
            [v3 setObject:v9 forKeyedSubscript:v10];
          }
        }
        uint64_t v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v5);
    }

    uint64_t v11 = (void *)[v3 copy];
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x1E4F1CC08];
  }

  return v11;
}

void sub_1987DAC78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::dictionaryWithKeys(WebKit *this, NSDictionary *a2, NSArray *a3)
{
  uint64_t v4 = this;
  uint64_t v5 = a2;
  if ([(WebKit *)v4 count] && [(NSDictionary *)v5 count])
  {
    uint64_t v6 = [MEMORY[0x1E4F1CAD0] setWithArray:v5];
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    void v10[2] = ___ZN6WebKit18dictionaryWithKeysEP12NSDictionaryP7NSArray_block_invoke;
    v10[3] = &unk_1E5811AE0;
    uint64_t v11 = v4;
    id v12 = v6;
    id v7 = v6;
    id v8 = WebKit::filterObjects<NSDictionary>(v11, v10);
  }
  else
  {
    id v8 = (void *)MEMORY[0x1E4F1CC08];
  }

  return v8;
}

void sub_1987DADE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit18dictionaryWithKeysEP12NSDictionaryP7NSArray_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:v3];
  if (v4) {
    uint64_t v5 = [*(id *)(a1 + 40) containsObject:v3];
  }
  else {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_1987DAE88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WebKit *WebKit::mergeDictionaries(WebKit *this, NSDictionary *a2, NSDictionary *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = this;
  uint64_t v5 = a2;
  if ([(NSDictionary *)v5 count])
  {
    if ([(WebKit *)v4 count])
    {
      uint64_t v6 = (void *)[(WebKit *)v4 mutableCopy];
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      id v7 = [(NSDictionary *)v5 allKeys];
      uint64_t v8 = [v7 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v8)
      {
        uint64_t v9 = *(void *)v19;
        do
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            if (*(void *)v19 != v9) {
              objc_enumerationMutation(v7);
            }
            uint64_t v11 = *(void *)(*((void *)&v18 + 1) + 8 * i);
            id v12 = [(WebKit *)v4 objectForKeyedSubscript:v11];
            BOOL v13 = v12 == 0;

            if (v13)
            {
              long long v14 = [(NSDictionary *)v5 objectForKeyedSubscript:v11];
              [v6 setObject:v14 forKeyedSubscript:v11];
            }
          }
          uint64_t v8 = [v7 countByEnumeratingWithState:&v18 objects:v22 count:16];
        }
        while (v8);
      }

      long long v15 = v4;
      long long v16 = v5;
      uint64_t v4 = (WebKit *)v6;
    }
    else
    {
      long long v16 = 0;
      long long v15 = v4;
      uint64_t v4 = (WebKit *)v5;
    }
  }
  else
  {
    long long v15 = 0;
    long long v16 = v5;
  }

  return v4;
}

void sub_1987DB060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WebKit *WebKit::mergeDictionariesAndSetValues(WebKit *this, NSDictionary *a2, NSDictionary *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = this;
  uint64_t v5 = a2;
  if ([(NSDictionary *)v5 count])
  {
    if ([(WebKit *)v4 count])
    {
      uint64_t v6 = (void *)[(WebKit *)v4 mutableCopy];
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      id v7 = [(NSDictionary *)v5 allKeys];
      uint64_t v8 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (v8)
      {
        uint64_t v9 = *(void *)v18;
        do
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            if (*(void *)v18 != v9) {
              objc_enumerationMutation(v7);
            }
            uint64_t v11 = *(void *)(*((void *)&v17 + 1) + 8 * i);
            id v12 = [(NSDictionary *)v5 objectForKeyedSubscript:v11];
            [v6 setObject:v12 forKeyedSubscript:v11];
          }
          uint64_t v8 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
        }
        while (v8);
      }

      uint64_t v13 = [v6 copy];
      long long v14 = v5;
      long long v15 = v4;
      uint64_t v4 = (WebKit *)v13;
    }
    else
    {
      long long v14 = 0;
      long long v15 = v4;
      uint64_t v4 = (WebKit *)v5;
    }
  }
  else
  {
    long long v15 = 0;
    long long v14 = v5;
  }

  return v4;
}

void sub_1987DB258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::privacyPreservingDescription(WebKit *this, NSError *a2)
{
  id v2 = this;
  id v3 = [(WebKit *)v2 userInfo];
  uint64_t v4 = WebKit::objectForKey<NSString>(v3, @"privacyPreservingDescription", 1);

  if (v4) {
    goto LABEL_2;
  }
  uint64_t v8 = [(WebKit *)v2 domain];
  if (![v8 length]
    || ([MEMORY[0x1E4F28C58] userInfoValueProviderForDomain:v8],
        uint64_t v9 = objc_claimAutoreleasedReturnValue(),
        (id v10 = (void *)v9) == 0))
  {

LABEL_8:
    uint64_t v11 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v12 = [(WebKit *)v2 domain];
    uint64_t v13 = [(WebKit *)v2 code];
    if (v12) {
      long long v14 = (__CFString *)v12;
    }
    else {
      long long v14 = &stru_1EEA10550;
    }
    uint64_t v6 = [v11 errorWithDomain:v14 code:v13 userInfo:0];
    id v7 = [v6 description];
    uint64_t v4 = (void *)v12;
    goto LABEL_12;
  }
  uint64_t v4 = (*(void (**)(uint64_t, WebKit *, __CFString *))(v9 + 16))(v9, v2, @"privacyPreservingDescription");

  if (!v4) {
    goto LABEL_8;
  }
LABEL_2:
  uint64_t v5 = NSString;
  uint64_t v6 = [(WebKit *)v2 domain];
  id v7 = [v5 stringWithFormat:@"Error Domain=%@ Code=%ld \"%@\"", v6, -[WebKit code](v2, "code"), v4];
LABEL_12:

  return v7;
}

void sub_1987DB438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

WebKit *WebKit::ensureDirectoryExists(WebKit *this, NSURL *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v2 = this;
  id v3 = [(WebKit *)v2 path];
  MEMORY[0x19972EAD0](v10, v3);
  char AllDirectories = WTF::FileSystemImpl::makeAllDirectories((WTF::FileSystemImpl *)v10, v4);
  id v7 = *(WTF::StringImpl **)v10;
  *(void *)id v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }

  if ((AllDirectories & 1) == 0)
  {
    uint64_t v8 = qword_1EB357DF8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)id v10 = 138477827;
      *(void *)&void v10[4] = v2;
      _os_log_error_impl(&dword_1985F2000, v8, OS_LOG_TYPE_ERROR, "Failed to create directory: %{private}@", v10, 0xCu);
    }

    id v2 = 0;
  }

  return v2;
}

void sub_1987DB5B8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

WebKit *WebKit::escapeCharactersInString(WebKit *this, NSString *a2, NSString *a3)
{
  uint64_t v4 = this;
  uint64_t v5 = a2;
  if ([(WebKit *)v4 length] && [(NSString *)v5 length])
  {
    uint64_t v6 = [MEMORY[0x1E4F28B88] characterSetWithCharactersInString:v5];
    uint64_t v7 = [(WebKit *)v4 rangeOfCharacterFromSet:v6];
    uint64_t v9 = v8;
    if (v8)
    {
      uint64_t v10 = v7;
      uint64_t v11 = (void *)[(WebKit *)v4 mutableCopy];
      do
      {
        [v11 insertString:@"\\"" atIndex:v10];
        uint64_t v12 = v10 + v9;
        if (v12 + 1 >= (unint64_t)[v11 length]) {
          break;
        }
        uint64_t v10 = objc_msgSend(v11, "rangeOfCharacterFromSet:options:range:", v6, 0, v12 + 1, objc_msgSend(v11, "length") + ~v12);
        uint64_t v9 = v13;
      }
      while (v13);

      uint64_t v4 = (WebKit *)v11;
    }
  }

  return v4;
}

void sub_1987DB728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::callAfterRandomDelay(uint64_t *a1)
{
  uint32_t v2 = arc4random();
  double v3 = ((double)v2 / 4294967300.0 * 400.0 / 1000.0 + 0.1) * 1000.0 * 1000.0 * 1000.0;
  double v4 = -9.22337204e18;
  if (v3 > -9.22337204e18) {
    double v4 = ((double)v2 / 4294967300.0 * 400.0 / 1000.0 + 0.1) * 1000.0 * 1000.0 * 1000.0;
  }
  if (v3 >= 9.22337204e18) {
    int64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    int64_t v5 = (uint64_t)v4;
  }
  dispatch_time_t v6 = dispatch_time(0, v5);
  id v7 = MEMORY[0x1E4F14428];
  uint64_t v8 = *a1;
  *a1 = 0;
  uint64_t v13 = v8;
  WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(&v13, &aBlock);
  uint64_t v9 = v13;
  uint64_t v13 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = (void *)MEMORY[0x1E4F14428];
  dispatch_after(v6, MEMORY[0x1E4F14428], v10);
}

void sub_1987DB894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }

  _Unwind_Resume(a1);
}

id WebKit::availableScreenScales(WebKit *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = [MEMORY[0x1E4F1CA80] set];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint32_t v2 = objc_msgSend(MEMORY[0x1E4F42D90], "screens", 0);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v12 != v4) {
          objc_enumerationMutation(v2);
        }
        dispatch_time_t v6 = NSNumber;
        [*(id *)(*((void *)&v11 + 1) + 8 * i) scale];
        id v7 = objc_msgSend(v6, "numberWithDouble:");
        [v1 addObject:v7];
      }
      uint64_t v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v3);
  }

  if ([v1 count])
  {
    uint64_t v8 = [v1 copy];
  }
  else
  {
    uint64_t v8 = [MEMORY[0x1E4F1CAD0] setWithObject:&unk_1EEA52D68];
  }
  uint64_t v9 = (void *)v8;

  return v9;
}

void sub_1987DBA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double WebKit::largestDisplayScale(WebKit *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v1 = WebKit::availableScreenScales(this);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v9;
    double v4 = 1.0;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v1);
        }
        objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * i), "doubleValue", (void)v8);
        if (v6 > v4) {
          double v4 = v6;
        }
      }
      uint64_t v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v2);
  }
  else
  {
    double v4 = 1.0;
  }

  return v4;
}

void sub_1987DBBAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::toAPI(WebKit *this, const WTF::WallTime *a2)
{
  if (fabs(*(double *)this) == INFINITY) {
    [MEMORY[0x1E4F1C9C8] distantFuture];
  }
  else {
  uint64_t v2 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSince1970:");
  }

  return v2;
}

double WebKit::toImpl(WebKit *this, NSDate *a2)
{
  uint64_t v2 = this;
  if (v2)
  {
    uint64_t v3 = [MEMORY[0x1E4F1C9C8] distantFuture];
    char v4 = [(WebKit *)v2 isEqualToDate:v3];

    if ((v4 & 1) == 0)
    {
      [(WebKit *)v2 timeIntervalSince1970];
      double v6 = v7;
      goto LABEL_7;
    }
    *(double *)&uint64_t v5 = INFINITY;
  }
  else
  {
    *(double *)&uint64_t v5 = NAN;
  }
  double v6 = *(double *)&v5;
LABEL_7:

  return v6;
}

void sub_1987DBCC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::toAPI(uint64_t *a1)
{
  id v2 = objc_alloc(MEMORY[0x1E4F1CA80]);
  if (*a1) {
    uint64_t v3 = *(unsigned int *)(*a1 - 12);
  }
  else {
    uint64_t v3 = 0;
  }
  char v4 = (void *)[v2 initWithCapacity:v3];
  uint64_t v5 = WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::begin(a1);
  double v6 = v5;
  long long v8 = v7;
  if (*a1) {
    uint64_t v9 = *a1 + 40 * *(unsigned int *)(*a1 - 4);
  }
  else {
    uint64_t v9 = 0;
  }
  if ((WTF **)v9 != v5)
  {
    do
    {
      long long v10 = WTF::URL::operator NSURL *();
      [v4 addObject:v10];

      while (1)
      {
        v6 += 5;
        if (v6 == v8) {
          break;
        }
        int v11 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v6);
        if (*v6 == (WTF *)-1) {
          int v12 = 1;
        }
        else {
          int v12 = v11;
        }
        if (v12 != 1) {
          goto LABEL_16;
        }
      }
      double v6 = v8;
LABEL_16:
      ;
    }
    while (v6 != (WTF **)v9);
  }
  uint64_t v13 = (void *)[v4 copy];

  return v13;
}

void sub_1987DBDE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::toAPI(void **a1)
{
  id v2 = objc_alloc(MEMORY[0x1E4F1CA80]);
  if (*a1) {
    uint64_t v3 = *((unsigned int *)*a1 - 3);
  }
  else {
    uint64_t v3 = 0;
  }
  char v4 = (void *)[v2 initWithCapacity:v3];
  uint64_t v5 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a1);
  double v6 = v5;
  long long v8 = v7;
  if (*a1) {
    uint64_t v9 = (uint64_t)&(*a1)[*((unsigned int *)*a1 - 1)];
  }
  else {
    uint64_t v9 = 0;
  }
  if ((void *)v9 != v5)
  {
    do
    {
      if (*v6) {
        long long v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        long long v10 = &stru_1EEA10550;
      }
      [v4 addObject:v10];

      while (++v6 != v8)
      {
        if ((unint64_t)(*v6 + 1) > 1) {
          goto LABEL_14;
        }
      }
      double v6 = v8;
LABEL_14:
      ;
    }
    while (v6 != (void *)v9);
  }
  int v11 = (void *)[v4 copy];

  return v11;
}

{
  id v2;
  uint64_t v3;
  void *v4;
  id **v5;
  id **v6;
  id **v7;
  id **v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t vars8;

  id v2 = objc_alloc(MEMORY[0x1E4F1CA80]);
  if (*a1) {
    uint64_t v3 = *((unsigned int *)*a1 - 3);
  }
  else {
    uint64_t v3 = 0;
  }
  char v4 = (void *)[v2 initWithCapacity:v3];
  uint64_t v5 = (id **)WTF::HashTable<void const*,void const*,WTF::IdentityExtractor,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<void const*>>::begin(a1);
  double v6 = v5;
  long long v8 = v7;
  if (*a1) {
    uint64_t v9 = (uint64_t)&(*a1)[*((unsigned int *)*a1 - 1)];
  }
  else {
    uint64_t v9 = 0;
  }
  if ((id **)v9 != v5)
  {
    do
    {
      long long v10 = WebKit::WebExtensionAction::wrapper(*v6);
      [v4 addObject:v10];

      while (++v6 != v8)
      {
        if ((unint64_t)*v6 + 1 > 1) {
          goto LABEL_13;
        }
      }
      double v6 = v8;
LABEL_13:
      ;
    }
    while (v6 != (id **)v9);
  }
  int v11 = (void *)[v4 copy];

  return v11;
}

void sub_1987DBF20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::toAPIArray(void **a1)
{
  id v2 = objc_alloc(MEMORY[0x1E4F1CA48]);
  if (*a1) {
    uint64_t v3 = *((unsigned int *)*a1 - 3);
  }
  else {
    uint64_t v3 = 0;
  }
  char v4 = (void *)[v2 initWithCapacity:v3];
  uint64_t v5 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a1);
  double v6 = v5;
  long long v8 = v7;
  if (*a1) {
    uint64_t v9 = (uint64_t)&(*a1)[*((unsigned int *)*a1 - 1)];
  }
  else {
    uint64_t v9 = 0;
  }
  if ((void *)v9 != v5)
  {
    do
    {
      if (*v6) {
        long long v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        long long v10 = &stru_1EEA10550;
      }
      [v4 addObject:v10];

      while (++v6 != v8)
      {
        if ((unint64_t)(*v6 + 1) > 1) {
          goto LABEL_14;
        }
      }
      double v6 = v8;
LABEL_14:
      ;
    }
    while (v6 != (void *)v9);
  }
  int v11 = (void *)[v4 copy];

  return v11;
}

void sub_1987DC054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WebKit::toImpl(WebKit *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  char v4 = this;
  *a2 = 0;
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::reserveInitialCapacity(a2, [(WebKit *)v4 count]);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v5 = v4;
  uint64_t v6 = [(WebKit *)v5 countByEnumeratingWithState:&v15 objects:v20 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        objc_opt_class();
        long long v10 = WTF::dynamic_objc_cast<NSString>(v9);
        if (v10)
        {
          MEMORY[0x19972EAD0](&v14, v10);
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a2, &v14, v11, (uint64_t)v19);
          uint64_t v13 = v14;
          long long v14 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, v12);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
        }
      }
      uint64_t v6 = [(WebKit *)v5 countByEnumeratingWithState:&v15 objects:v20 count:16];
    }
    while (v6);
  }
}

void sub_1987DC1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (*v11) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v11, v14);
  }

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(uint64_t *a1@<X0>, void **a2@<X8>)
{
  uint64_t v5 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  *uint64_t v5 = MEMORY[0x1E4F14398];
  v5[1] = 50331650;
  void v5[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void *)#1}::__invoke;
  void v5[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::descriptor;
  uint64_t v4 = *a1;
  *a1 = 0;
  void v5[4] = v4;
  *a2 = _Block_copy(v5);
}

uint64_t WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtrArc<void ()(void)>::fromCallable<WTF::Function<void ()(void)>>(WTF::Function<void ()(void)>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))();
}

WTF **WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::makeConstIterator(uint64_t *a1, WTF **a2)
{
  id v2 = a2;
  uint64_t v3 = *a1;
  if (*a1) {
    unsigned int v4 = *(_DWORD *)(v3 - 4);
  }
  else {
    unsigned int v4 = 0;
  }
  uint64_t v5 = (WTF **)(v3 + 40 * v4);
  if (v5 != a2)
  {
    while ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(v2) & 1) != 0
         || *v2 == (WTF *)-1)
    {
      v2 += 5;
      if (v2 == v5) {
        return v5;
      }
    }
  }
  return v2;
}

uint64_t WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WTF::URL>,false>::isEmptyValue<WTF::URL>(WTF **a1)
{
  WTF::URL::URL((WTF::URL *)&v7);
  uint64_t v4 = WTF::equal(*a1, v7, v2);
  uint64_t v5 = v7;
  uint64_t v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v4;
}

void sub_1987DC45C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::reserveInitialCapacity(void *a1, unsigned int a2)
{
  unsigned int v3 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::computeBestTableSize(a2);
  if (v3 <= 8) {
    unsigned int v4 = 8;
  }
  else {
    unsigned int v4 = v3;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * v4 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = 0;
  return result;
}

uint64_t WebKit::CtapAuthenticator::CtapAuthenticator(uint64_t a1, uint64_t *a2, void *a3)
{
  *(void *)a1 = &unk_1EE9B3860;
  fido::AuthenticatorGetInfoResponse::AuthenticatorGetInfoResponse(a1 + 784, a3);
  *(unsigned char *)(a1 + 928) = 0;
  *(unsigned char *)(a1 + 929) = 0;
  *(void *)(a1 + 936) = 0;
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 944);
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 960);
  return a1;
}

{
  WebKit::CtapAuthenticator::CtapAuthenticator(a1, a2, a3);
  return a1;
}

uint64_t fido::AuthenticatorGetInfoResponse::AuthenticatorGetInfoResponse(uint64_t a1, void *a2)
{
  return a1;
}

{
  std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::set[abi:sn180100]((void *)a1, a2);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 24, a2 + 3);
  *(void *)(a1 + 40) = a2[5];
  std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100]((unsigned char *)(a1 + 48), (uint64_t)(a2 + 6));
  std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100]((unsigned char *)(a1 + 72), (uint64_t)(a2 + 9));
  *(void *)(a1 + 96) = a2[12];
  *(void *)(a1 + 104) = a2[13];
  std::optional<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100]((unsigned char *)(a1 + 112), (uint64_t)(a2 + 14));
  *(void *)(a1 + 136) = a2[17];
  return a1;
}

WTF::ASCIILiteral *WebKit::CtapAuthenticator::makeCredential(WebKit::CtapAuthenticator *this)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  long long v66 = this;
  os_log_t oslog = (os_log_t)qword_1EB3587D0;
  os_log_type_t v64 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
  {
    id v2 = oslog;
    os_log_type_t v3 = v64;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v62, (uint64_t)this);
    WTF::String::utf8();
    uint64_t v4 = WTF::CString::data(&v63);
    WebKit::FidoAuthenticator::transportForDebugging(&v60, this);
    WTF::String::utf8();
    uint64_t v5 = WTF::CString::data(&v61);
    __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)buf, (uint64_t)this, v4, v5);
    _os_log_impl(&dword_1985F2000, v2, v3, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::makeCredential", buf, 0x20u);
    WTF::CString::~CString((WTF::CString *)&v61);
    uint64_t v71 = &v60;
    uint64_t v72 = &v60;
    long long v81 = &v60;
    v82[1] = &v60;
    v82[0] = 0;
    uint64_t v101 = &v60;
    uint64_t v100 = v82;
    char v91 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v60);
    if (v91) {
      WTF::StringImpl::deref(v91, v6);
    }
    WTF::CString::~CString((WTF::CString *)&v63);
    long long v70 = &v62;
    long long v73 = &v62;
    uint64_t v80 = &v62;
    v83[1] = &v62;
    v83[0] = 0;
    uint64_t v99 = &v62;
    uint64_t v98 = v83;
    long long v90 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v62);
    if (v90) {
      WTF::StringImpl::deref(v90, v7);
    }
  }
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v59);
  uint64_t v8 = WebKit::Authenticator::requestData(this);
  std::get[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v8 + 16);
  uint64_t v58 = v9;
  long long v10 = (fido::AuthenticatorSupportedOptions *)fido::AuthenticatorGetInfoResponse::options((WebKit::CtapAuthenticator *)((char *)this + 784));
  int v57 = fido::AuthenticatorSupportedOptions::userVerificationAvailability(v10);
  uint64_t v11 = fido::AuthenticatorGetInfoResponse::options((WebKit::CtapAuthenticator *)((char *)this + 784));
  char v56 = std::__optional_storage_base<WebCore::MediationRequirement,false>::has_value[abi:sn180100](v11) & 1;
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v55);
  if ((*((unsigned char *)this + 929) & 1) != 0
    || (uint64_t v12 = fido::AuthenticatorGetInfoResponse::remainingDiscoverableCredentials((WebKit::CtapAuthenticator *)((char *)this + 784)),
        (std::optional<unsigned int>::operator BOOL[abi:sn180100](v12) & 1) != 0)
    && (uint64_t v13 = fido::AuthenticatorGetInfoResponse::remainingDiscoverableCredentials((WebKit::CtapAuthenticator *)((char *)this + 784)),
        (std::optional<unsigned int>::operator BOOL[abi:sn180100](v13) & 1) == 0))
  {
    char v14 = std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator BOOL[abi:sn180100](v58 + 128);
    BOOL v15 = 0;
    if (v14)
    {
      std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v58 + 128);
      char v17 = *(unsigned char *)(v16 + 4);
      BOOL v15 = 1;
      if ((v17 & 1) == 0)
      {
        std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v58 + 128);
        char v54 = 0;
        BOOL v15 = std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(v18 + 2, &v54);
      }
    }
    if (v15)
    {
      uint64_t v19 = *(void *)WebKit::Authenticator::observer(this);
      (*(void (**)(void))(v19 + 32))();
      int v53 = 1;
      goto LABEL_31;
    }
    char v56 = 1;
  }
  if (v57
    || (std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator BOOL[abi:sn180100](v58 + 128) & 1) != 0
    && (std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v58 + 128),
        *(unsigned char *)(v21 + 5) == 2)
    || !WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty((uint64_t)this + 960))
  {
    uint64_t v22 = fido::AuthenticatorGetInfoResponse::options((WebKit::CtapAuthenticator *)((char *)this + 784));
    if (WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(v22))
    {
      WebKit::Authenticator::requestData(this);
      std::optional<fido::PinParameters>::optional[abi:sn180100](v45);
      fido::encodeMakeCredentialRequestAsCBOR();
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)v59, v46);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v46);
      std::optional<fido::PinParameters>::~optional((fido::PinParameters *)v45);
    }
    else
    {
      WebKit::Authenticator::requestData(this);
      int v47 = 1;
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)&v48, (WebKit::CtapAuthenticator *)((char *)this + 960));
      std::optional<fido::PinParameters>::optional[abi:sn180100]<fido::PinParameters,0>((uint64_t)v49, (uint64_t)&v47);
      fido::encodeMakeCredentialRequestAsCBOR();
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)v59, v50);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v50);
      std::optional<fido::PinParameters>::~optional((fido::PinParameters *)v49);
      fido::PinParameters::~PinParameters((fido::PinParameters *)&v47);
    }
  }
  else
  {
    WebKit::Authenticator::requestData(this);
    std::optional<fido::PinParameters>::optional[abi:sn180100](v51);
    fido::encodeMakeCredentialRequestAsCBOR();
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)v59, v52);
    WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v52);
    std::optional<fido::PinParameters>::~optional((fido::PinParameters *)v51);
  }
  os_log_t v44 = (os_log_t)qword_1EB3587D0;
  os_log_type_t v43 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v23 = v44;
    os_log_type_t v24 = v43;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v41, (uint64_t)this);
    WTF::String::utf8();
    uint64_t v25 = WTF::CString::data(&v42);
    WebKit::FidoAuthenticator::transportForDebugging(&v39, this);
    WTF::String::utf8();
    uint64_t v26 = WTF::CString::data(&v40);
    std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v36, (WTF::ASCIILiteral *)v59);
    int v35 = 0;
    WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v35);
    WTF::base64EncodeToString((uint64_t)&v37, v36[0], v36[1]);
    WTF::String::utf8();
    uint64_t v27 = WTF::CString::data(&v38);
    __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)v102, (uint64_t)this, v25, v26, v27);
    _os_log_impl(&dword_1985F2000, v23, v24, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::makeCredential: Sending %s", v102, 0x2Au);
    WTF::CString::~CString((WTF::CString *)&v38);
    long long v69 = &v37;
    uint64_t v74 = &v37;
    uint64_t v79 = &v37;
    v84[1] = &v37;
    v84[0] = 0;
    uint64_t v97 = &v37;
    unint64_t v96 = v84;
    long long v89 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v37);
    if (v89) {
      WTF::StringImpl::deref(v89, v28);
    }
    WTF::CString::~CString((WTF::CString *)&v40);
    long long v68 = &v39;
    unint64_t v75 = &v39;
    uint64_t v78 = &v39;
    v85[1] = &v39;
    v85[0] = 0;
    long long v95 = &v39;
    long long v94 = v85;
    char v88 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v39);
    if (v88) {
      WTF::StringImpl::deref(v88, v29);
    }
    WTF::CString::~CString((WTF::CString *)&v42);
    long long v67 = &v41;
    long long v76 = &v41;
    uint64_t v77 = &v41;
    v86[1] = &v41;
    v86[0] = 0;
    long long v93 = &v41;
    long long v92 = v86;
    uint64_t v87 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v41);
    if (v87) {
      WTF::StringImpl::deref(v87, v30);
    }
  }
  uint64_t v31 = WebKit::FidoAuthenticator::driver(this);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v33, (uint64_t)this);
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void>(&v34, (uint64_t *)&v33);
  (*(void (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v31 + 16))(v31, v59, &v34);
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~Function((uint64_t)&v34);
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0((uint64_t *)&v33);
  int v53 = 0;
LABEL_31:
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v55, v20);
  return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v59);
}

uint64_t *WebKit::CtapAuthenticator::aaguidForDebugging(WebKit::CtapAuthenticator *this, uint64_t a2)
{
  uint64_t v8 = this;
  uint64_t v7 = a2;
  os_log_type_t v3 = (WTF::ASCIILiteral *)fido::AuthenticatorGetInfoResponse::aaguid((fido::AuthenticatorGetInfoResponse *)(a2 + 784));
  std::span<unsigned char const,16ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v5, v3);
  WTF::UUID::UUID(v6, v5);
  return WTF::UUID::toString((uint64_t *)this, (WTF::UUID *)v6);
}

uint64_t WTF::CString::data(WTF::CStringBuffer **this)
{
  if (WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(this)) {
    return WTF::CStringBuffer::data(*this);
  }
  else {
    return 0;
  }
}

double __os_log_helper_16_2_3_8_0_8_32_8_32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&double result = 134218498;
  *(_DWORD *)a1 = 134218498;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2080;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2080;
  *(void *)(a1 + 24) = a4;
  return result;
}

void WTF::CString::~CString(WTF::CString *this)
{
}

{
  void v1[2];
  WTF::RefCountedBase *v2;
  void *v3;
  WTF::CString *v4;

  v1[1] = this;
  v1[0] = 0;
  uint64_t v4 = this;
  os_log_type_t v3 = v1;
  id v2 = (WTF::RefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this);
  if (v2) {
    WTF::RefCounted<WTF::CStringBuffer>::deref(v2);
  }
}

uint64_t WebKit::Authenticator::requestData(WebKit::Authenticator *this)
{
  return (uint64_t)this + 32;
}

uint64_t fido::AuthenticatorGetInfoResponse::options(fido::AuthenticatorGetInfoResponse *this)
{
  return (uint64_t)this + 96;
}

uint64_t fido::AuthenticatorSupportedOptions::userVerificationAvailability(fido::AuthenticatorSupportedOptions *this)
{
  return *((unsigned int *)this + 1);
}

uint64_t fido::AuthenticatorGetInfoResponse::remainingDiscoverableCredentials(fido::AuthenticatorGetInfoResponse *this)
{
  return (uint64_t)this + 136;
}

uint64_t std::optional<unsigned int>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<unsigned int,false>::has_value[abi:sn180100](a1) & 1;
}

uint64_t WebKit::Authenticator::observer(WebKit::Authenticator *this)
{
  return WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get((uint64_t *)this + 3);
}

unsigned char *std::optional<fido::PinParameters>::optional[abi:sn180100](unsigned char *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<fido::PinParameters,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

fido::PinParameters *std::optional<fido::PinParameters>::~optional(fido::PinParameters *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<fido::PinParameters,false>::~__optional_move_assign_base(a1);
  return a1;
}

WTF::ASCIILiteral *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(WTF::ASCIILiteral *a1, WTF::ASCIILiteral *a2)
{
  return a1;
}

{
  WTF::FastMalloc *v3;
  int v4;
  const void *v5;
  uint64_t v6;
  void *v7;

  os_log_type_t v3 = (WTF::FastMalloc *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  uint64_t v4 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::VectorBuffer((uint64_t)a1, v3, v4);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  if (WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1))
  {
    uint64_t v5 = (const void *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a2);
    uint64_t v6 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a2);
    uint64_t v7 = (void *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::VectorTypeOperations<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::move(v5, v6, v7);
  }
  return a1;
}

uint64_t std::optional<fido::PinParameters>::optional[abi:sn180100]<fido::PinParameters,0>(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  _ZNSt3__127__optional_move_assign_baseIN4fido13PinParametersELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

void fido::PinParameters::~PinParameters(fido::PinParameters *this)
{
}

{
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((fido::PinParameters *)((char *)this + 8));
}

uint64_t WTF::base64EncodeToString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WTF::base64EncodeToString();
}

uint64_t *std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(uint64_t *a1, WTF::ASCIILiteral *a2)
{
  return a1;
}

{
  *a1 = std::ranges::__data::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>((uint64_t)&std::ranges::__cpo::data, a2);
  a1[1] = std::ranges::__size::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>((uint64_t)&std::ranges::__cpo::size, (uint64_t)a2);
  return a1;
}

_DWORD *WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(_DWORD *a1)
{
  return a1;
}

double __os_log_helper_16_2_4_8_0_8_32_8_32_8_32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&double result = 134218754;
  *(_DWORD *)a1 = 134218754;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2080;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2080;
  *(void *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 2080;
  *(void *)(a1 + 34) = a5;
  return result;
}

void *WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  uint64_t v4[2] = a1;
  v4[1] = a2;
  void v4[4] = v4;
  uint64_t v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapAuthenticator::makeCredential(void)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~Function(uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

uint64_t *WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0(uint64_t *a1)
{
  return a1;
}

{
  WTF::WeakPtr<WebKit::CtapAuthenticator,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

uint64_t WebKit::CtapAuthenticator::continueMakeCredentialAfterResponseReceived(unsigned char *a1, WTF::ASCIILiteral *a2)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  char v85 = a1;
  char v84 = a2;
  unsigned __int8 ResponseCode = fido::getResponseCode();
  os_log_t oslog = (os_log_t)qword_1EB3587D0;
  os_log_type_t v81 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v3 = oslog;
    os_log_type_t v4 = v81;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v79, (uint64_t)a1);
    WTF::String::utf8();
    uint64_t v5 = WTF::CString::data(&v80);
    WebKit::FidoAuthenticator::transportForDebugging(&v77, (WebKit::FidoAuthenticator *)a1);
    WTF::String::utf8();
    uint64_t v6 = WTF::CString::data(&v78);
    unsigned __int8 v7 = WTF::enumToUnderlyingType<fido::CtapDeviceResponseCode>(ResponseCode);
    __os_log_helper_16_2_4_8_0_8_32_8_32_4_0((uint64_t)buf, (uint64_t)a1, v5, v6, v7);
    _os_log_impl(&dword_1985F2000, v3, v4, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueMakeCredentialAfterResponseReceived: Got error code: %hhu from authenticator.", buf, 0x26u);
    WTF::CString::~CString((WTF::CString *)&v78);
    long long v90 = &v77;
    long long v94 = &v77;
    uint64_t v103 = &v77;
    v104[1] = &v77;
    v104[0] = 0;
    uint64_t v123 = &v77;
    uint64_t v122 = v104;
    uint64_t v113 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v77);
    if (v113) {
      WTF::StringImpl::deref(v113, v8);
    }
    WTF::CString::~CString((WTF::CString *)&v80);
    long long v89 = &v79;
    long long v95 = &v79;
    uint64_t v102 = &v79;
    v105[1] = &v79;
    v105[0] = 0;
    uint64_t v121 = &v79;
    uint64_t v120 = v105;
    uint64_t v112 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v79);
    if (v112) {
      WTF::StringImpl::deref(v112, v9);
    }
  }
  WebKit::CtapAuthenticator::transports((WebKit::CtapAuthenticator *)v75, (uint64_t)a1);
  uint64_t v10 = WebKit::Authenticator::requestData((WebKit::Authenticator *)a1);
  std::get[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v10 + 16);
  fido::readCTAPMakeCredentialResponse();
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v75);
  if (WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(&v76))
  {
    os_log_t v74 = (os_log_t)qword_1EB3587D0;
    os_log_type_t v73 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = v74;
      os_log_type_t v12 = v73;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v71, (uint64_t)a1);
      WTF::String::utf8();
      uint64_t v13 = WTF::CString::data(&v72);
      WebKit::FidoAuthenticator::transportForDebugging(&v69, (WebKit::FidoAuthenticator *)a1);
      WTF::String::utf8();
      uint64_t v14 = WTF::CString::data(&v70);
      std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v66, v84);
      int v65 = 0;
      WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v65);
      WTF::base64EncodeToString((uint64_t)&v67, v66[0], v66[1]);
      WTF::String::utf8();
      uint64_t v15 = WTF::CString::data(&v68);
      __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)v128, (uint64_t)a1, v13, v14, v15);
      _os_log_impl(&dword_1985F2000, v11, v12, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::makeCredential: Failed to parse response %s", v128, 0x2Au);
      WTF::CString::~CString((WTF::CString *)&v68);
      char v88 = &v67;
      unint64_t v96 = &v67;
      uint64_t v101 = &v67;
      v106[1] = &v67;
      v106[0] = 0;
      uint64_t v119 = &v67;
      uint64_t v118 = v106;
      uint64_t v111 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v67);
      if (v111) {
        WTF::StringImpl::deref(v111, v16);
      }
      WTF::CString::~CString((WTF::CString *)&v70);
      uint64_t v87 = &v69;
      uint64_t v97 = &v69;
      uint64_t v100 = &v69;
      v107[1] = &v69;
      v107[0] = 0;
      uint64_t v117 = &v69;
      uint64_t v116 = v107;
      uint64_t v110 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v69);
      if (v110) {
        WTF::StringImpl::deref(v110, v17);
      }
      WTF::CString::~CString((WTF::CString *)&v72);
      long long v86 = &v71;
      uint64_t v98 = &v71;
      uint64_t v99 = &v71;
      v108[1] = &v71;
      v108[0] = 0;
      uint64_t v115 = &v71;
      uint64_t v114 = v108;
      uint64_t v109 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v71);
      if (v109) {
        WTF::StringImpl::deref(v109, v18);
      }
    }
    switch(ResponseCode)
    {
      case 0x3Au:
        WebKit::CtapAuthenticator::makeCredential((WebKit::CtapAuthenticator *)a1);
        int v64 = 1;
        break;
      case 0x19u:
        v61[0] = 8;
        uint64_t v19 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"At least one credential matches an entry of the excludeCredentials list in the authenticator.", (const char *)0x5D);
        uint64_t v60 = v20;
        uint64_t v59 = v19;
        WTF::String::String(&v62, v19, v20);
        std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v63, (uint64_t)v61);
        WebKit::Authenticator::receiveRespond(a1);
        std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v63);
        WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v61);
        int v64 = 1;
        break;
      case 0x28u:
        uint64_t v21 = WebKit::Authenticator::requestData((WebKit::Authenticator *)a1);
        std::get[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v21 + 16);
        uint64_t v58 = v22;
        std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v22 + 128);
        char v24 = *(unsigned char *)(v23 + 4);
        BOOL v25 = 1;
        if ((v24 & 1) == 0)
        {
          std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v58 + 128);
          char v57 = 0;
          BOOL v25 = std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(v26 + 2, &v57);
        }
        if (v25)
        {
          uint64_t v27 = *(void *)WebKit::Authenticator::observer((WebKit::Authenticator *)a1);
          (*(void (**)(void))(v27 + 32))();
        }
        else if ((a1[929] & 1) == 0)
        {
          a1[929] = 1;
          WebKit::CtapAuthenticator::makeCredential((WebKit::CtapAuthenticator *)a1);
        }
        int v64 = 1;
        break;
      default:
          goto LABEL_32;
        if (!WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty((uint64_t)(a1 + 960))
          && WebKit::Authenticator::observer((WebKit::Authenticator *)a1))
        {
          uint64_t v28 = WebKit::Authenticator::observer((WebKit::Authenticator *)a1);
          (*(void (**)(uint64_t, void))(*(void *)v28 + 32))(v28, v29);
        }
        if (WebKit::CtapAuthenticator::tryRestartPin((WebKit::FidoAuthenticator *)a1, &ResponseCode))
        {
          int v64 = 1;
        }
        else
        {
LABEL_32:
          v54[0] = 24;
          uint64_t v30 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Unknown internal error. Error code: ", (const char *)0x24);
          uint64_t v53 = v31;
          uint64_t v52 = v30;
          WTF::makeString<WTF::ASCIILiteral,unsigned char>((WTF::String *)&v55, v30, v31, ResponseCode);
          std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v56, (uint64_t)v54);
          WebKit::Authenticator::receiveRespond(a1);
          std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v56);
          WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v54);
          int v64 = 1;
        }
        break;
    }
  }
  else
  {
    uint64_t v32 = WebKit::Authenticator::requestData((WebKit::Authenticator *)a1);
    std::get[abi:sn180100]<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v32 + 16);
    uint64_t v51 = v33;
    if (std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator BOOL[abi:sn180100](v33 + 144))
    {
      std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100](v51 + 144);
      if (*(unsigned char *)(v34 + 8))
      {
        long long v92 = &v76;
        uint64_t v126 = &v76;
        WebCore::AuthenticatorResponse::extensions(v50, v76);
        uint64_t v35 = fido::AuthenticatorGetInfoResponse::options((fido::AuthenticatorGetInfoResponse *)(a1 + 784));
        BOOL v49 = (std::__optional_storage_base<WebCore::MediationRequirement,false>::has_value[abi:sn180100](v35) & 1) == 0;
        char v48 = 0;
        char v36 = std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator BOOL[abi:sn180100](v51 + 128);
        char v37 = 0;
        if (v36)
        {
          std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v51 + 128);
          if ((std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100](v38 + 2) & 1) == 0
            || (std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v51 + 128),
                char v47 = 2,
                v40 = std::operator!=[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(v39 + 2, &v47), char v37 = 1, !v40))
          {
            std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100](v51 + 128);
            char v37 = *(unsigned char *)(v41 + 4);
          }
        }
        char v48 = v37 & 1;
        char v42 = 0;
        if (v49)
        {
          char v42 = 0;
          if (v48) {
            char v42 = a1[929] ^ 1;
          }
        }
        char v46 = v42 & 1;
        std::optional<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,void>((unsigned char *)v50 + 2, &v46);
        char v91 = &v76;
        uint64_t v127 = &v76;
        WebCore::AuthenticatorResponse::setExtensions();
        WebCore::AuthenticationExtensionsClientOutputs::~AuthenticationExtensionsClientOutputs((WebCore::AuthenticationExtensionsClientOutputs *)v50);
      }
    }
    WTF::RefPtr<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>::releaseNonNull(&v44, &v76);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>,0,0,0,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,0ul,0>((uint64_t)v45, &v44);
    WebKit::Authenticator::receiveRespond(a1);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v45);
    WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(&v44);
    int v64 = 0;
  }
  long long v93 = &v76;
  v124[1] = &v76;
  v124[0] = 0;
  v124[3] = &v76;
  v124[2] = v124;
  uint64_t result = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v76);
  uint64_t v125 = result;
  if (result) {
    return WTF::RefCounted<WebCore::AuthenticatorResponse>::deref((WTF::RefCountedBase *)(v125 + 8));
  }
  return result;
}

uint64_t WTF::enumToUnderlyingType<fido::CtapDeviceResponseCode>(uint64_t result)
{
  return result;
}

double __os_log_helper_16_2_4_8_0_8_32_8_32_4_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(void *)&double result = 134218754;
  *(_DWORD *)a1 = 134218754;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2080;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2080;
  *(void *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 1024;
  *(_DWORD *)(a1 + 34) = a5;
  return result;
}

unsigned int *WebKit::CtapAuthenticator::transports(WebKit::CtapAuthenticator *this, uint64_t a2)
{
  os_log_type_t v12 = this;
  uint64_t v11 = a2;
  uint64_t v10 = fido::AuthenticatorGetInfoResponse::transports((fido::AuthenticatorGetInfoResponse *)(a2 + 784));
  if (std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator BOOL[abi:sn180100](v10))
  {
    std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::operator*[abi:sn180100](v10);
    return (unsigned int *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(this, v4);
  }
  else
  {
    uint64_t v6 = (WebKit::CtapDriver *)WebKit::FidoAuthenticator::driver((WebKit::FidoAuthenticator *)a2);
    char v7 = WebKit::CtapDriver::transport(v6);
    uint64_t v8 = &v7;
    uint64_t v9 = 1;
    return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((unsigned int *)this, (uint64_t)&v7, 1);
  }
}

BOOL WebKit::anonymous namespace'::isPinError(unsigned char *a1)
{
  return (*a1 - 49) < 4u || *a1 == 54;
}

uint64_t WebKit::anonymous namespace'::toStatus(unsigned char *a1)
{
  switch(*a1)
  {
    case '1':
    case '3':
      unsigned __int8 v2 = 4;
      break;
    case '2':
      unsigned __int8 v2 = 2;
      break;
    case '4':
      unsigned __int8 v2 = 3;
      break;
    default:
      unsigned __int8 v2 = 4;
      break;
  }
  return v2;
}

uint64_t WebKit::CtapAuthenticator::tryRestartPin(WebKit::FidoAuthenticator *a1, unsigned char *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a1;
  char v17 = a2;
  os_log_t oslog = (os_log_t)qword_1EB3587D0;
  os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v3 = oslog;
    os_log_type_t v4 = v15;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v13, (uint64_t)a1);
    WTF::String::utf8();
    uint64_t v5 = WTF::CString::data(&v14);
    WebKit::FidoAuthenticator::transportForDebugging(&v11, a1);
    WTF::String::utf8();
    uint64_t v6 = WTF::CString::data(&v12);
    unsigned __int8 v7 = WTF::enumToUnderlyingType<fido::CtapDeviceResponseCode>(*v17);
    __os_log_helper_16_2_4_8_0_8_32_8_32_4_0((uint64_t)buf, (uint64_t)a1, v5, v6, v7);
    _os_log_impl(&dword_1985F2000, v3, v4, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::tryRestartPin: Error code: %hhu", buf, 0x26u);
    WTF::CString::~CString((WTF::CString *)&v12);
    uint64_t v21 = &v11;
    uint64_t v22 = &v11;
    BOOL v25 = &v11;
    v26[1] = &v11;
    v26[0] = 0;
    uint64_t v33 = &v11;
    uint64_t v32 = v26;
    unsigned __int8 v29 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v11);
    if (v29) {
      WTF::StringImpl::deref(v29, v8);
    }
    WTF::CString::~CString((WTF::CString *)&v14);
    uint64_t v20 = &v13;
    uint64_t v23 = &v13;
    char v24 = &v13;
    v27[1] = &v13;
    v27[0] = 0;
    uint64_t v31 = &v13;
    uint64_t v30 = v27;
    uint64_t v28 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v13);
    if (v28) {
      WTF::StringImpl::deref(v28, v9);
    }
  }
  if (*v17 == 49 || *v17 == 51 || *v17 == 54)
  {
    WebKit::CtapAuthenticator::getRetries(a1);
    char v19 = 1;
  }
  else
  {
    char v19 = 0;
  }
  return v19 & 1;
}

BOOL WTF::makeString<WTF::ASCIILiteral,unsigned char>(WTF::String *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = a1;
  *((void *)&v7 + 1) = a3;
  *(void *)&long long v7 = a2;
  char v6 = a4;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned char>(a1, &v7, &v6);
  BOOL result = WTF::operator!(a1);
  if (result)
  {
    __break(0xC471u);
    JUMPOUT(0x1987DDFA0);
  }
  return result;
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::has_value[abi:sn180100](a1) & 1;
}

void std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::has_value[abi:sn180100](a1) & 1) == 0) {
    __break(1u);
  }
  std::__to_address[abi:sn180100]<char const>();
}

void std::optional<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,void>(unsigned char *a1, unsigned char *a2)
{
  if (std::__optional_storage_base<WebCore::MediationRequirement,false>::has_value[abi:sn180100]((uint64_t)a1))
  {
    std::__to_address[abi:sn180100]<char const>();
    *os_log_type_t v3 = *a2;
  }
  else
  {
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput>(a1, a2);
  }
}

void WebCore::AuthenticationExtensionsClientOutputs::~AuthenticationExtensionsClientOutputs(WebCore::AuthenticationExtensionsClientOutputs *this)
{
}

{
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::~optional((WebCore::AuthenticationExtensionsClientOutputs *)((char *)this + 40));
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::~optional((WebCore::AuthenticationExtensionsClientOutputs *)((char *)this + 8));
}

void *WTF::RefPtr<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>::releaseNonNull(void *a1, WTF::RefCountedBase **a2)
{
  BOOL result = WTF::adoptRef<WebKit::U2fAuthenticator,WTF::RawPtrTraits<WebKit::U2fAuthenticator>,WTF::DefaultRefDerefTraits<WebKit::U2fAuthenticator>>(a1, *a2);
  *a2 = 0;
  return result;
}

uint64_t std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>,0,0,0,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,0ul,0>(uint64_t a1, uint64_t *a2)
{
  return a1;
}

{
  _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI1NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm0EJNS3_INS4_32AuthenticatorAttestationResponseENS6_ISF_EENS8_ISF_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

WTF::ASCIILiteral *WebKit::CtapAuthenticator::getAssertion(WebKit::CtapAuthenticator *this)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v41 = this;
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v40);
  uint64_t v2 = WebKit::Authenticator::requestData(this);
  std::get[abi:sn180100]<WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v2 + 16);
  uint64_t v39 = v3;
  os_log_type_t v4 = (fido::AuthenticatorSupportedOptions *)fido::AuthenticatorGetInfoResponse::options((WebKit::CtapAuthenticator *)((char *)this + 784));
  int v38 = fido::AuthenticatorSupportedOptions::userVerificationAvailability(v4);
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v37);
  if (v38
    || *(unsigned char *)(v39 + 48) == 2
    || !WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty((uint64_t)this + 960))
  {
    uint64_t v5 = fido::AuthenticatorGetInfoResponse::options((WebKit::CtapAuthenticator *)((char *)this + 784));
    if (WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(v5)
      || *(unsigned char *)(v39 + 48) == 2)
    {
      WebKit::Authenticator::requestData(this);
      std::optional<fido::PinParameters>::optional[abi:sn180100](v29);
      fido::encodeGetAssertionRequestAsCBOR();
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)v40, v30);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v30);
      std::optional<fido::PinParameters>::~optional((fido::PinParameters *)v29);
    }
    else
    {
      WebKit::Authenticator::requestData(this);
      int v31 = 1;
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)&v32, (WebKit::CtapAuthenticator *)((char *)this + 960));
      std::optional<fido::PinParameters>::optional[abi:sn180100]<fido::PinParameters,0>((uint64_t)v33, (uint64_t)&v31);
      fido::encodeGetAssertionRequestAsCBOR();
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)v40, v34);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v34);
      std::optional<fido::PinParameters>::~optional((fido::PinParameters *)v33);
      fido::PinParameters::~PinParameters((fido::PinParameters *)&v31);
    }
  }
  else
  {
    WebKit::Authenticator::requestData(this);
    std::optional<fido::PinParameters>::optional[abi:sn180100](v35);
    fido::encodeGetAssertionRequestAsCBOR();
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)v40, v36);
    WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v36);
    std::optional<fido::PinParameters>::~optional((fido::PinParameters *)v35);
  }
  os_log_t oslog = (os_log_t)qword_1EB3587D0;
  os_log_type_t v27 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
  {
    char v6 = oslog;
    os_log_type_t v7 = v27;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v25, (uint64_t)this);
    WTF::String::utf8();
    uint64_t v8 = WTF::CString::data(&v26);
    WebKit::FidoAuthenticator::transportForDebugging(&v23, this);
    WTF::String::utf8();
    uint64_t v9 = WTF::CString::data(&v24);
    std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v20, (WTF::ASCIILiteral *)v40);
    int v19 = 0;
    WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v19);
    WTF::base64EncodeToString((uint64_t)&v21, v20[0], v20[1]);
    WTF::String::utf8();
    uint64_t v10 = WTF::CString::data(&v22);
    __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)buf, (uint64_t)this, v8, v9, v10);
    _os_log_impl(&dword_1985F2000, v6, v7, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::getAssertion: Sending %s", buf, 0x2Au);
    WTF::CString::~CString((WTF::CString *)&v22);
    uint64_t v44 = &v21;
    uint64_t v45 = &v21;
    long long v50 = &v21;
    v51[1] = &v21;
    v51[0] = 0;
    uint64_t v62 = &v21;
    int v61 = v51;
    char v56 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v21);
    if (v56) {
      WTF::StringImpl::deref(v56, v11);
    }
    WTF::CString::~CString((WTF::CString *)&v24);
    os_log_type_t v43 = &v23;
    char v46 = &v23;
    BOOL v49 = &v23;
    v52[1] = &v23;
    v52[0] = 0;
    uint64_t v60 = &v23;
    uint64_t v59 = v52;
    uint64_t v55 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v23);
    if (v55) {
      WTF::StringImpl::deref(v55, v12);
    }
    WTF::CString::~CString((WTF::CString *)&v26);
    char v42 = &v25;
    char v47 = &v25;
    char v48 = &v25;
    v53[1] = &v25;
    v53[0] = 0;
    uint64_t v58 = &v25;
    char v57 = v53;
    char v54 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v25);
    if (v54) {
      WTF::StringImpl::deref(v54, v13);
    }
  }
  uint64_t v14 = WebKit::FidoAuthenticator::driver(this);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v17, (uint64_t)this);
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void>(&v18, (uint64_t *)&v17);
  (*(void (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v14 + 16))(v14, v40, &v18);
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~Function((uint64_t)&v18);
  WebKit::CtapAuthenticator::getAssertion(void)::$_0::~$_0((uint64_t *)&v17);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v15);
  return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v40);
}

void *WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  uint64_t v4[2] = a1;
  v4[1] = a2;
  void v4[4] = v4;
  uint64_t v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapAuthenticator::getAssertion(void)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t *WebKit::CtapAuthenticator::getAssertion(void)::$_0::~$_0(uint64_t *a1)
{
  return a1;
}

{
  WTF::WeakPtr<WebKit::CtapAuthenticator,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

uint64_t WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(uint64_t a1, WTF::ASCIILiteral *a2)
{
  uint64_t v213 = *MEMORY[0x1E4F143B8];
  uint64_t v103 = a1;
  uint64_t v102 = a2;
  fido::readCTAPGetAssertionResponse();
  unsigned __int8 ResponseCode = fido::getResponseCode();
  os_log_t oslog = (os_log_t)qword_1EB3587D0;
  os_log_type_t v98 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = oslog;
    os_log_type_t v4 = v98;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v96, a1);
    WTF::String::utf8();
    uint64_t v5 = WTF::CString::data(&v97);
    WebKit::FidoAuthenticator::transportForDebugging(&v94, (WebKit::FidoAuthenticator *)a1);
    WTF::String::utf8();
    uint64_t v6 = WTF::CString::data(&v95);
    unsigned __int8 v7 = WTF::enumToUnderlyingType<fido::CtapDeviceResponseCode>(ResponseCode);
    __os_log_helper_16_2_4_8_0_8_32_8_32_4_0((uint64_t)buf, a1, v5, v6, v7);
    _os_log_impl(&dword_1985F2000, v3, v4, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetAssertionAfterResponseReceived: errorcode: %hhu", buf, 0x26u);
    WTF::CString::~CString((WTF::CString *)&v95);
    uint64_t v115 = &v94;
    uint64_t v125 = &v94;
    v148 = &v94;
    v149[1] = &v94;
    v149[0] = 0;
    v196 = &v94;
    v195 = v149;
    v172 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v94);
    if (v172) {
      WTF::StringImpl::deref(v172, v8);
    }
    WTF::CString::~CString((WTF::CString *)&v97);
    uint64_t v114 = &v96;
    uint64_t v126 = &v96;
    v147 = &v96;
    v150[1] = &v96;
    v150[0] = 0;
    v194 = &v96;
    v193 = v150;
    v171 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v96);
    if (v171) {
      WTF::StringImpl::deref(v171, v9);
    }
  }
  if (WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(&v101))
  {
    os_log_t v93 = (os_log_t)qword_1EB3587D0;
    os_log_type_t v92 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = v93;
      os_log_type_t v11 = v92;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v90, a1);
      WTF::String::utf8();
      uint64_t v12 = WTF::CString::data(&v91);
      WebKit::FidoAuthenticator::transportForDebugging(&v88, (WebKit::FidoAuthenticator *)a1);
      WTF::String::utf8();
      uint64_t v13 = WTF::CString::data(&v89);
      std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v85, v102);
      int v84 = 0;
      WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v84);
      WTF::base64EncodeToString((uint64_t)&v86, v85[0], v85[1]);
      WTF::String::utf8();
      uint64_t v14 = WTF::CString::data(&v87);
      __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)v211, a1, v12, v13, v14);
      _os_log_impl(&dword_1985F2000, v10, v11, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetAssertionAfterResponseReceived: Failed to parse response %s", v211, 0x2Au);
      WTF::CString::~CString((WTF::CString *)&v87);
      uint64_t v113 = &v86;
      uint64_t v127 = &v86;
      v146 = &v86;
      v151[1] = &v86;
      v151[0] = 0;
      v192 = &v86;
      v191 = v151;
      v170 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v86);
      if (v170) {
        WTF::StringImpl::deref(v170, v15);
      }
      WTF::CString::~CString((WTF::CString *)&v89);
      uint64_t v112 = &v88;
      uint64_t v128 = &v88;
      v145 = &v88;
      v152[1] = &v88;
      v152[0] = 0;
      v190 = &v88;
      v189 = v152;
      v169 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v88);
      if (v169) {
        WTF::StringImpl::deref(v169, v16);
      }
      WTF::CString::~CString((WTF::CString *)&v91);
      uint64_t v111 = &v90;
      uint64_t v129 = &v90;
      v144 = &v90;
      v153[1] = &v90;
      v153[0] = 0;
      v188 = &v90;
      v187 = v153;
      v168 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v90);
      if (v168) {
        WTF::StringImpl::deref(v168, v17);
      }
    }
    if (ResponseCode == 58)
    {
      WebKit::CtapAuthenticator::getAssertion((WebKit::CtapAuthenticator *)a1);
      int v83 = 1;
    }
           || (WebKit::CtapAuthenticator::tryDowngrade((WebKit::CtapAuthenticator *)a1) & 1) == 0)
    {
        goto LABEL_56;
      if (!WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty(a1 + 960)
        && WebKit::Authenticator::observer((WebKit::Authenticator *)a1))
      {
        uint64_t v18 = WebKit::Authenticator::observer((WebKit::Authenticator *)a1);
        (*(void (**)(uint64_t, void))(*(void *)v18 + 32))(v18, v19);
      }
      if (WebKit::CtapAuthenticator::tryRestartPin((WebKit::FidoAuthenticator *)a1, &ResponseCode))
      {
        int v83 = 1;
      }
      else
      {
LABEL_56:
        if (ResponseCode == 46 && WebKit::Authenticator::observer((WebKit::Authenticator *)a1))
        {
          uint64_t v20 = *(void *)WebKit::Authenticator::observer((WebKit::Authenticator *)a1);
          (*(void (**)(void))(v20 + 32))();
        }
        os_log_t v82 = (os_log_t)qword_1EB3587D0;
        os_log_type_t v81 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = v82;
          os_log_type_t v22 = v81;
          WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v79, a1);
          WTF::String::utf8();
          uint64_t v23 = WTF::CString::data(&v80);
          WebKit::FidoAuthenticator::transportForDebugging(&v77, (WebKit::FidoAuthenticator *)a1);
          WTF::String::utf8();
          uint64_t v24 = WTF::CString::data(&v78);
          __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)v210, a1, v23, v24);
          _os_log_impl(&dword_1985F2000, v21, v22, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetAssertionAfterResponseReceived: No credentials found.", v210, 0x20u);
          WTF::CString::~CString((WTF::CString *)&v78);
          uint64_t v110 = &v77;
          uint64_t v130 = &v77;
          uint64_t v143 = &v77;
          v154[1] = &v77;
          v154[0] = 0;
          v186 = &v77;
          v185 = v154;
          v167 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v77);
          if (v167) {
            WTF::StringImpl::deref(v167, v25);
          }
          WTF::CString::~CString((WTF::CString *)&v80);
          uint64_t v109 = &v79;
          uint64_t v131 = &v79;
          uint64_t v142 = &v79;
          v155[1] = &v79;
          v155[0] = 0;
          v184 = &v79;
          v183 = v155;
          v166 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v79);
          if (v166) {
            WTF::StringImpl::deref(v166, v26);
          }
        }
        v74[0] = 24;
        uint64_t v27 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Unknown internal error. Error code: ", (const char *)0x24);
        uint64_t v73 = v28;
        uint64_t v72 = v27;
        WTF::makeString<WTF::ASCIILiteral,unsigned char>((WTF::String *)&v75, v27, v28, ResponseCode);
        std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v76, (uint64_t)v74);
        WebKit::Authenticator::receiveRespond((void *)a1);
        std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v76);
        WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v74);
        int v83 = 1;
      }
    }
    else
    {
      int v83 = 1;
    }
  }
  else
  {
    os_log_t v71 = (os_log_t)qword_1EB3587D0;
    os_log_type_t v70 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v29 = v71;
      os_log_type_t v30 = v70;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v68, a1);
      WTF::String::utf8();
      uint64_t v31 = WTF::CString::data(&v69);
      WebKit::FidoAuthenticator::transportForDebugging(&v66, (WebKit::FidoAuthenticator *)a1);
      WTF::String::utf8();
      uint64_t v32 = WTF::CString::data(&v67);
      uint64_t v119 = &v101;
      v199 = &v101;
      uint64_t v33 = WebCore::AuthenticatorAssertionResponse::numberOfCredentials(v101);
      __os_log_helper_16_2_4_8_0_8_32_8_32_8_0((uint64_t)v209, a1, v31, v32, v33);
      _os_log_impl(&dword_1985F2000, v29, v30, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetAssertionAfterResponseReceived: Get %lu credentials back.", v209, 0x2Au);
      WTF::CString::~CString((WTF::CString *)&v67);
      uint64_t v108 = &v66;
      uint64_t v132 = &v66;
      uint64_t v141 = &v66;
      v156[1] = &v66;
      v156[0] = 0;
      v182 = &v66;
      v181 = v156;
      v165 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v66);
      if (v165) {
        WTF::StringImpl::deref(v165, v34);
      }
      WTF::CString::~CString((WTF::CString *)&v69);
      uint64_t v107 = &v68;
      uint64_t v133 = &v68;
      uint64_t v140 = &v68;
      v157[1] = &v68;
      v157[0] = 0;
      v180 = &v68;
      v179 = v157;
      v164 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v68);
      if (v164) {
        WTF::StringImpl::deref(v164, v35);
      }
    }
    uint64_t v118 = &v101;
    v200 = &v101;
    if ((unint64_t)WebCore::AuthenticatorAssertionResponse::numberOfCredentials(v101) > 1)
    {
      uint64_t v117 = &v101;
      v201 = &v101;
      *(void *)(a1 + 936) = WebCore::AuthenticatorAssertionResponse::numberOfCredentials(v101) - 1;
      uint64_t v116 = &v101;
      v202 = &v101;
      unint64_t v36 = WebCore::AuthenticatorAssertionResponse::numberOfCredentials(v101);
      uint64_t v121 = a1 + 944;
      unint64_t v120 = v36;
      WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveInitialCapacity<(WTF::FailureAction)0>(a1 + 944, v36);
      WTF::RefPtr<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>::releaseNonNull(&v63, &v101);
      uint64_t v123 = a1 + 944;
      uint64_t v122 = &v63;
      uint64_t v204 = a1 + 944;
      v203 = &v63;
      uint64_t v206 = a1 + 944;
      v205 = &v63;
      uint64_t v37 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1 + 944);
      if (v37 == WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity(a1 + 944))
      {
        WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>((WTF::ASCIILiteral *)(a1 + 944), (unint64_t)v205);
      }
      else
      {
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
        uint64_t v38 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)(a1 + 944));
        uint64_t v39 = (uint64_t *)operator new(8, 0, v38);
        WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(v39, v205);
        ++*(_DWORD *)(a1 + 956);
      }
      char v207 = 1;
      WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(&v63);
      fido::encodeEmptyAuthenticatorRequest();
      os_log_t v61 = (os_log_t)qword_1EB3587D0;
      os_log_type_t v60 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v40 = v61;
        os_log_type_t v41 = v60;
        WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v58, a1);
        WTF::String::utf8();
        uint64_t v42 = WTF::CString::data(&v59);
        WebKit::FidoAuthenticator::transportForDebugging(&v56, (WebKit::FidoAuthenticator *)a1);
        WTF::String::utf8();
        uint64_t v43 = WTF::CString::data(&v57);
        std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v53, (WTF::ASCIILiteral *)v62);
        int v52 = 0;
        WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v52);
        WTF::base64EncodeToString((uint64_t)&v54, v53[0], v53[1]);
        WTF::String::utf8();
        uint64_t v44 = WTF::CString::data(&v55);
        __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)v208, a1, v42, v43, v44);
        _os_log_impl(&dword_1985F2000, v40, v41, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetAssertionAfterResponseReceived: Sending %s", v208, 0x2Au);
        WTF::CString::~CString((WTF::CString *)&v55);
        uint64_t v106 = &v54;
        uint64_t v134 = &v54;
        uint64_t v139 = &v54;
        v158[1] = &v54;
        v158[0] = 0;
        v178 = &v54;
        v177 = v158;
        v163 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v54);
        if (v163) {
          WTF::StringImpl::deref(v163, v45);
        }
        WTF::CString::~CString((WTF::CString *)&v57);
        uint64_t v105 = &v56;
        uint64_t v135 = &v56;
        uint64_t v138 = &v56;
        v159[1] = &v56;
        v159[0] = 0;
        v176 = &v56;
        v175 = v159;
        v162 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v56);
        if (v162) {
          WTF::StringImpl::deref(v162, v46);
        }
        WTF::CString::~CString((WTF::CString *)&v59);
        uint64_t v104 = &v58;
        uint64_t v136 = &v58;
        uint64_t v137 = &v58;
        v160[1] = &v58;
        v160[0] = 0;
        v174 = &v58;
        v173 = v160;
        v161 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v58);
        if (v161) {
          WTF::StringImpl::deref(v161, v47);
        }
      }
      uint64_t v48 = WebKit::FidoAuthenticator::driver((WebKit::FidoAuthenticator *)a1);
      WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v50, a1);
      WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>(&v51, (uint64_t *)&v50);
      (*(void (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v48 + 16))(v48, v62, &v51);
      WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~Function((uint64_t)&v51);
      WebKit::CtapAuthenticator::getAssertion(void)::$_0::~$_0((uint64_t *)&v50);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v62);
      int v83 = 0;
    }
    else
    {
      WTF::RefPtr<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>::releaseNonNull(&v64, &v101);
      std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0,0,0,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,0ul,0>((uint64_t)v65, &v64);
      WebKit::Authenticator::receiveRespond((void *)a1);
      std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v65);
      WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(&v64);
      int v83 = 1;
    }
  }
  uint64_t v124 = &v101;
  v197[1] = &v101;
  v197[0] = 0;
  v197[3] = &v101;
  v197[2] = v197;
  uint64_t result = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v101);
  uint64_t v198 = result;
  if (result) {
    return WTF::RefCounted<WebCore::AuthenticatorResponse>::deref((WTF::RefCountedBase *)(v198 + 8));
  }
  return result;
}

uint64_t WebKit::CtapAuthenticator::tryDowngrade(WebKit::CtapAuthenticator *this)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v43 = this;
  os_log_t oslog = (os_log_t)qword_1EB3587D0;
  os_log_type_t v41 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v2 = oslog;
    os_log_type_t v3 = v41;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v39, (uint64_t)this);
    WTF::String::utf8();
    uint64_t v4 = WTF::CString::data(&v40);
    WebKit::FidoAuthenticator::transportForDebugging(&v37, this);
    WTF::String::utf8();
    uint64_t v5 = WTF::CString::data(&v38);
    __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)buf, (uint64_t)this, v4, v5);
    _os_log_impl(&dword_1985F2000, v2, v3, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::tryDowngrade", buf, 0x20u);
    WTF::CString::~CString((WTF::CString *)&v38);
    uint64_t v48 = &v37;
    uint64_t v53 = &v37;
    os_log_type_t v60 = &v37;
    v61[1] = &v37;
    v61[0] = 0;
    long long v76 = &v37;
    uint64_t v75 = v61;
    uint64_t v68 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v37);
    if (v68) {
      WTF::StringImpl::deref(v68, v6);
    }
    WTF::CString::~CString((WTF::CString *)&v40);
    char v47 = &v39;
    uint64_t v54 = &v39;
    uint64_t v59 = &v39;
    v62[1] = &v39;
    v62[0] = 0;
    os_log_t v74 = &v39;
    uint64_t v73 = v62;
    uint64_t v67 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v39);
    if (v67) {
      WTF::StringImpl::deref(v67, v7);
    }
  }
  std::__to_address[abi:sn180100]<char const>();
  int v35 = 1;
  uint64_t v36 = std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::find[abi:sn180100](v8, &v35);
  std::__to_address[abi:sn180100]<char const>();
  uint64_t v34 = std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::end[abi:sn180100]();
  if (std::operator==[abi:sn180100](&v36, &v34))
  {
    char v44 = 0;
  }
  else if (WebKit::Authenticator::observer(this))
  {
    char v33 = 0;
    uint64_t v32 = &v33;
    uint64_t v31 = &v33;
    uint64_t v52 = WebKit::Authenticator::requestData(this) + 16;
    v51[3] = &v32;
    void v51[2] = &v31;
    long long v50 = &v33;
    BOOL v49 = &v33;
    char v85 = &v33;
    int v84 = &v33;
    int v83 = &v33;
    os_log_t v82 = &v33;
    WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>::Visitor(v86, (uint64_t)&v33, (uint64_t)&v33);
    v51[1] = v86[1];
    v51[0] = v86[0];
    uint64_t v77 = v52;
    os_log_type_t v81 = v51;
    uint64_t v80 = v52;
    uint64_t v79 = 2;
    switch(std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](v52))
    {
      case 0:
        uint64_t v9 = (unsigned char **)v81;
        std::get[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v80);
        std::invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(v9, v10);
        goto LABEL_44;
      case 1:
        uint64_t v11 = (uint64_t)v81;
        std::get[abi:sn180100]<1ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v80);
        std::invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(v11, v12);
        goto LABEL_44;
      case 2:
        __break(1u);
        goto LABEL_14;
      case 3:
LABEL_14:
        __break(1u);
        goto LABEL_15;
      case 4:
LABEL_15:
        __break(1u);
        goto LABEL_16;
      case 5:
LABEL_16:
        __break(1u);
        goto LABEL_17;
      case 6:
LABEL_17:
        __break(1u);
        goto LABEL_18;
      case 7:
LABEL_18:
        __break(1u);
        goto LABEL_19;
      case 8:
LABEL_19:
        __break(1u);
        goto LABEL_20;
      case 9:
LABEL_20:
        __break(1u);
        goto LABEL_21;
      case 10:
LABEL_21:
        __break(1u);
        goto LABEL_22;
      case 11:
LABEL_22:
        __break(1u);
        goto LABEL_23;
      case 12:
LABEL_23:
        __break(1u);
        goto LABEL_24;
      case 13:
LABEL_24:
        __break(1u);
        goto LABEL_25;
      case 14:
LABEL_25:
        __break(1u);
        goto LABEL_26;
      case 15:
LABEL_26:
        __break(1u);
        goto LABEL_27;
      case 16:
LABEL_27:
        __break(1u);
        goto LABEL_28;
      case 17:
LABEL_28:
        __break(1u);
        goto LABEL_29;
      case 18:
LABEL_29:
        __break(1u);
        goto LABEL_30;
      case 19:
LABEL_30:
        __break(1u);
        goto LABEL_31;
      case 20:
LABEL_31:
        __break(1u);
        goto LABEL_32;
      case 21:
LABEL_32:
        __break(1u);
        goto LABEL_33;
      case 22:
LABEL_33:
        __break(1u);
        goto LABEL_34;
      case 23:
LABEL_34:
        __break(1u);
        goto LABEL_35;
      case 24:
LABEL_35:
        __break(1u);
        goto LABEL_36;
      case 25:
LABEL_36:
        __break(1u);
        goto LABEL_37;
      case 26:
LABEL_37:
        __break(1u);
        goto LABEL_38;
      case 27:
LABEL_38:
        __break(1u);
        goto LABEL_39;
      case 28:
LABEL_39:
        __break(1u);
        goto LABEL_40;
      case 29:
LABEL_40:
        __break(1u);
        goto LABEL_41;
      case 30:
LABEL_41:
        __break(1u);
        goto LABEL_42;
      case 31:
LABEL_42:
        __break(1u);
        break;
      default:
        break;
    }
    uint64_t v78 = 2;
    __break(1u);
LABEL_44:
    if (v33)
    {
      os_log_t v30 = (os_log_t)qword_1EB3587D0;
      os_log_type_t v29 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = v30;
        os_log_type_t v14 = v29;
        WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v27, (uint64_t)this);
        WTF::String::utf8();
        uint64_t v15 = WTF::CString::data(&v28);
        WebKit::FidoAuthenticator::transportForDebugging(&v25, this);
        WTF::String::utf8();
        uint64_t v16 = WTF::CString::data(&v26);
        __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)v87, (uint64_t)this, v15, v16);
        _os_log_impl(&dword_1985F2000, v13, v14, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::tryDowngrade: Downgrading to U2F.", v87, 0x20u);
        WTF::CString::~CString((WTF::CString *)&v26);
        char v46 = &v25;
        uint64_t v55 = &v25;
        uint64_t v58 = &v25;
        v63[1] = &v25;
        v63[0] = 0;
        uint64_t v72 = &v25;
        os_log_t v71 = v63;
        uint64_t v66 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v25);
        if (v66) {
          WTF::StringImpl::deref(v66, v17);
        }
        WTF::CString::~CString((WTF::CString *)&v28);
        uint64_t v45 = &v27;
        uint64_t v56 = &v27;
        char v57 = &v27;
        v64[1] = &v27;
        v64[0] = 0;
        os_log_type_t v70 = &v27;
        uint64_t v69 = v64;
        int v65 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v27);
        if (v65) {
          WTF::StringImpl::deref(v65, v18);
        }
      }
      *((unsigned char *)this + 928) = 1;
      uint64_t v19 = WebKit::FidoAuthenticator::driver(this);
      WebKit::CtapDriver::setProtocol(v19);
      uint64_t v20 = WebKit::Authenticator::observer(this);
      WebKit::FidoAuthenticator::releaseDriver((uint64_t)this, &v22);
      WebKit::U2fAuthenticator::create(&v23, (uint64_t)&v22);
      WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(&v24, &v23);
      (*(void (**)(uint64_t, WebKit::CtapAuthenticator *, uint64_t *))(*(void *)v20 + 24))(v20, this, &v24);
      WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::~Ref(&v24);
      WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>::~Ref(&v23);
      std::unique_ptr<WebKit::CtapDriver>::~unique_ptr[abi:sn180100]((uint64_t)&v22);
      char v44 = 1;
    }
    else
    {
      char v44 = 0;
    }
  }
  else
  {
    char v44 = 0;
  }
  return v44 & 1;
}

uint64_t WebCore::AuthenticatorAssertionResponse::numberOfCredentials(WebCore::AuthenticatorAssertionResponse *this)
{
  return *((void *)this + 22);
}

double __os_log_helper_16_2_4_8_0_8_32_8_32_8_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&double result = 134218754;
  *(_DWORD *)a1 = 134218754;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2080;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2080;
  *(void *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 2048;
  *(void *)(a1 + 34) = a5;
  return result;
}

uint64_t std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0,0,0,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,0ul,0>(uint64_t a1, uint64_t *a2)
{
  return a1;
}

{
  _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI1NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm0EJNS3_INS4_30AuthenticatorAssertionResponseENS6_ISF_EENS8_ISF_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

void *WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  uint64_t v4[2] = a1;
  v4[1] = a2;
  void v4[4] = v4;
  uint64_t v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(uint64_t a1, WTF::ASCIILiteral *a2)
{
  uint64_t v177 = *MEMORY[0x1E4F143B8];
  uint64_t v92 = a1;
  char v91 = a2;
  unsigned __int8 ResponseCode = fido::getResponseCode();
  os_log_t oslog = (os_log_t)qword_1EB3587D0;
  os_log_type_t v88 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v3 = oslog;
    os_log_type_t v4 = v88;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v86, a1);
    WTF::String::utf8();
    uint64_t v5 = WTF::CString::data(&v87);
    WebKit::FidoAuthenticator::transportForDebugging(&v84, (WebKit::FidoAuthenticator *)a1);
    WTF::String::utf8();
    uint64_t v6 = WTF::CString::data(&v85);
    unsigned __int8 v7 = WTF::enumToUnderlyingType<fido::CtapDeviceResponseCode>(ResponseCode);
    __os_log_helper_16_2_4_8_0_8_32_8_32_4_0((uint64_t)buf, a1, v5, v6, v7);
    _os_log_impl(&dword_1985F2000, v3, v4, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetNextAssertionAfterResponseReceived: errorcode: %hhu", buf, 0x26u);
    WTF::CString::~CString((WTF::CString *)&v85);
    uint64_t v102 = &v84;
    uint64_t v106 = &v84;
    uint64_t v125 = &v84;
    v126[1] = &v84;
    v126[0] = 0;
    v165 = &v84;
    v164 = v126;
    v145 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v84);
    if (v145) {
      WTF::StringImpl::deref(v145, v8);
    }
    WTF::CString::~CString((WTF::CString *)&v87);
    uint64_t v101 = &v86;
    uint64_t v107 = &v86;
    uint64_t v124 = &v86;
    v127[1] = &v86;
    v127[0] = 0;
    v163 = &v86;
    v162 = v127;
    v144 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v86);
    if (v144) {
      WTF::StringImpl::deref(v144, v9);
    }
  }
  fido::readCTAPGetAssertionResponse();
  if (WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(&v83))
  {
    os_log_t v82 = (os_log_t)qword_1EB3587D0;
    os_log_type_t v81 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = v82;
      os_log_type_t v11 = v81;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v79, a1);
      WTF::String::utf8();
      uint64_t v12 = WTF::CString::data(&v80);
      WebKit::FidoAuthenticator::transportForDebugging(&v77, (WebKit::FidoAuthenticator *)a1);
      WTF::String::utf8();
      uint64_t v13 = WTF::CString::data(&v78);
      std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v74, v91);
      int v73 = 0;
      WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v73);
      WTF::base64EncodeToString((uint64_t)&v75, v74[0], v74[1]);
      WTF::String::utf8();
      uint64_t v14 = WTF::CString::data(&v76);
      __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)v175, a1, v12, v13, v14);
      _os_log_impl(&dword_1985F2000, v10, v11, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetNextAssertionAfterResponseReceived: Unable to parse response: %s", v175, 0x2Au);
      WTF::CString::~CString((WTF::CString *)&v76);
      uint64_t v100 = &v75;
      uint64_t v108 = &v75;
      uint64_t v123 = &v75;
      v128[1] = &v75;
      v128[0] = 0;
      v161 = &v75;
      v160 = v128;
      uint64_t v143 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v75);
      if (v143) {
        WTF::StringImpl::deref(v143, v15);
      }
      WTF::CString::~CString((WTF::CString *)&v78);
      uint64_t v99 = &v77;
      uint64_t v109 = &v77;
      uint64_t v122 = &v77;
      v129[1] = &v77;
      v129[0] = 0;
      v159 = &v77;
      v158 = v129;
      uint64_t v142 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v77);
      if (v142) {
        WTF::StringImpl::deref(v142, v16);
      }
      WTF::CString::~CString((WTF::CString *)&v80);
      os_log_type_t v98 = &v79;
      uint64_t v110 = &v79;
      uint64_t v121 = &v79;
      v130[1] = &v79;
      v130[0] = 0;
      v157 = &v79;
      v156 = v130;
      uint64_t v141 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v79);
      if (v141) {
        WTF::StringImpl::deref(v141, v17);
      }
    }
    v70[0] = 24;
    uint64_t v18 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Unknown internal error. Error code: ", (const char *)0x24);
    uint64_t v69 = v19;
    uint64_t v68 = v18;
    WTF::makeString<WTF::ASCIILiteral,unsigned char>((WTF::String *)&v71, v18, v19, ResponseCode);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v72, (uint64_t)v70);
    WebKit::Authenticator::receiveRespond((void *)a1);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v72);
    WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v70);
    int v67 = 1;
  }
  else
  {
    --*(void *)(a1 + 936);
    WTF::RefPtr<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>::releaseNonNull(&v66, &v83);
    uint64_t v104 = a1 + 944;
    uint64_t v103 = &v66;
    uint64_t v169 = a1 + 944;
    v168 = &v66;
    uint64_t v171 = a1 + 944;
    v170 = &v66;
    uint64_t v20 = (WTF::ASCIILiteral *)(a1 + 944);
    uint64_t v21 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1 + 944);
    if (v21 == WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity(a1 + 944))
    {
      WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(v20, (unint64_t)v170);
    }
    else
    {
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
      uint64_t v22 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)v20);
      uint64_t v23 = (uint64_t *)operator new(8, 0, v22);
      WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(v23, v170);
      ++*(_DWORD *)(a1 + 956);
    }
    char v172 = 1;
    WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(&v66);
    os_log_t v65 = (os_log_t)qword_1EB3587D0;
    os_log_type_t v64 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = v65;
      os_log_type_t v25 = v64;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v62, a1);
      WTF::String::utf8();
      uint64_t v26 = WTF::CString::data(&v63);
      WebKit::FidoAuthenticator::transportForDebugging(&v60, (WebKit::FidoAuthenticator *)a1);
      WTF::String::utf8();
      uint64_t v27 = WTF::CString::data(&v61);
      __os_log_helper_16_2_4_8_0_8_32_8_32_8_0((uint64_t)v174, a1, v26, v27, *(void *)(a1 + 936));
      _os_log_impl(&dword_1985F2000, v24, v25, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetNextAssertionAfterResponseReceived: Remaining responses: %lu", v174, 0x2Au);
      WTF::CString::~CString((WTF::CString *)&v61);
      uint64_t v97 = &v60;
      uint64_t v111 = &v60;
      unint64_t v120 = &v60;
      v131[1] = &v60;
      v131[0] = 0;
      v155 = &v60;
      v154 = v131;
      uint64_t v140 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v60);
      if (v140) {
        WTF::StringImpl::deref(v140, v28);
      }
      WTF::CString::~CString((WTF::CString *)&v63);
      uint64_t v96 = &v62;
      uint64_t v112 = &v62;
      uint64_t v119 = &v62;
      v132[1] = &v62;
      v132[0] = 0;
      v153 = &v62;
      v152 = v132;
      uint64_t v139 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v62);
      if (v139) {
        WTF::StringImpl::deref(v139, v29);
      }
    }
    if (*(void *)(a1 + 936))
    {
      fido::encodeEmptyAuthenticatorRequest();
      os_log_t v52 = (os_log_t)qword_1EB3587D0;
      os_log_type_t v51 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v31 = v52;
        os_log_type_t v32 = v51;
        WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v49, a1);
        WTF::String::utf8();
        uint64_t v33 = WTF::CString::data(&v50);
        WebKit::FidoAuthenticator::transportForDebugging(&v47, (WebKit::FidoAuthenticator *)a1);
        WTF::String::utf8();
        uint64_t v34 = WTF::CString::data(&v48);
        std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v44, (WTF::ASCIILiteral *)v53);
        int v43 = 0;
        WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v43);
        WTF::base64EncodeToString((uint64_t)&v45, v44[0], v44[1]);
        WTF::String::utf8();
        uint64_t v35 = WTF::CString::data(&v46);
        __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)v173, a1, v33, v34, v35);
        _os_log_impl(&dword_1985F2000, v31, v32, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetNextAssertionAfterResponseReceived: Sending %s", v173, 0x2Au);
        WTF::CString::~CString((WTF::CString *)&v46);
        long long v95 = &v45;
        uint64_t v113 = &v45;
        uint64_t v118 = &v45;
        v133[1] = &v45;
        v133[0] = 0;
        v151 = &v45;
        v150 = v133;
        uint64_t v138 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v45);
        if (v138) {
          WTF::StringImpl::deref(v138, v36);
        }
        WTF::CString::~CString((WTF::CString *)&v48);
        uint64_t v94 = &v47;
        uint64_t v114 = &v47;
        uint64_t v117 = &v47;
        v134[1] = &v47;
        v134[0] = 0;
        v149 = &v47;
        v148 = v134;
        uint64_t v137 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v47);
        if (v137) {
          WTF::StringImpl::deref(v137, v37);
        }
        WTF::CString::~CString((WTF::CString *)&v50);
        os_log_t v93 = &v49;
        uint64_t v115 = &v49;
        uint64_t v116 = &v49;
        v135[1] = &v49;
        v135[0] = 0;
        v147 = &v49;
        v146 = v135;
        uint64_t v136 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v49);
        if (v136) {
          WTF::StringImpl::deref(v136, v38);
        }
      }
      uint64_t v39 = WebKit::FidoAuthenticator::driver((WebKit::FidoAuthenticator *)a1);
      WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v41, a1);
      WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_1,void>(&v42, (uint64_t *)&v41);
      (*(void (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v39 + 16))(v39, v53, &v42);
      WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~Function((uint64_t)&v42);
      WebKit::CtapAuthenticator::getAssertion(void)::$_0::~$_0((uint64_t *)&v41);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v53);
      int v67 = 0;
    }
    else
    {
      uint64_t v59 = WebKit::Authenticator::observer((WebKit::Authenticator *)a1);
      if (v59)
      {
        uint64_t v30 = v59;
        WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)v58, (WTF::ASCIILiteral *)(a1 + 944));
        uint64_t v55 = a1;
        WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v56, a1);
        WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v54);
        WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse *)>::CompletionHandler<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>(&v57, &v55);
        (*(void (**)(uint64_t, unsigned char *, uint64_t, uint64_t *))(*(void *)v30 + 48))(v30, v58, 1, &v57);
        WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse *)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v57);
        WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v54);
        WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::~$_0((uint64_t)&v55);
        WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v58);
      }
      int v67 = 1;
    }
  }
  uint64_t v105 = &v83;
  v166[1] = &v83;
  v166[0] = 0;
  v166[3] = &v83;
  v166[2] = v166;
  uint64_t result = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v83);
  uint64_t v167 = result;
  if (result) {
    return WTF::RefCounted<WebCore::AuthenticatorResponse>::deref((WTF::RefCountedBase *)(v167 + 8));
  }
  return result;
}

WTF::ASCIILiteral *WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(WTF::ASCIILiteral *a1, WTF::ASCIILiteral *a2)
{
  return a1;
}

{
  unint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  os_log_type_t v3 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  os_log_type_t v4 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  WTF::VectorBuffer<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::FastMalloc>::VectorBuffer((uint64_t)a1, v3, v4);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  if (WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1))
  {
    uint64_t v5 = (uint64_t *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a2);
    uint64_t v6 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a2);
    unsigned __int8 v7 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::VectorTypeOperations<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>::uninitializedCopy(v5, v6, v7);
  }
  return a1;
}

void *WTF::CompletionHandler<void ()(WebCore::AuthenticatorAssertionResponse *)>::CompletionHandler<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>(void *a1, void *a2)
{
  return a1;
}

{
  WTF::Function<void ()(WebCore::AuthenticatorAssertionResponse *)>::Function<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

uint64_t WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::~$_0(uint64_t a1)
{
  return a1;
}

{
  WTF::WeakPtr<WebKit::CtapAuthenticator,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr((uint64_t *)(a1 + 8));
  return a1;
}

void *WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_1,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  uint64_t v4[2] = a1;
  v4[1] = a2;
  void v4[4] = v4;
  uint64_t v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

WTF::ASCIILiteral *WebKit::CtapAuthenticator::getRetries(WebKit::CtapAuthenticator *this)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  os_log_type_t v25 = this;
  fido::pin::encodeAsCBOR();
  os_log_t oslog = (os_log_t)qword_1EB3587D0;
  os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v2 = oslog;
    os_log_type_t v3 = v22;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v20, (uint64_t)this);
    WTF::String::utf8();
    uint64_t v4 = WTF::CString::data(&v21);
    WebKit::FidoAuthenticator::transportForDebugging(&v18, this);
    WTF::String::utf8();
    uint64_t v5 = WTF::CString::data(&v19);
    std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v15, (WTF::ASCIILiteral *)v24);
    int v14 = 0;
    WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v14);
    WTF::base64EncodeToString((uint64_t)&v16, v15[0], v15[1]);
    WTF::String::utf8();
    uint64_t v6 = WTF::CString::data(&v17);
    __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)buf, (uint64_t)this, v4, v5, v6);
    _os_log_impl(&dword_1985F2000, v2, v3, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::getRetries: Sending %s", buf, 0x2Au);
    WTF::CString::~CString((WTF::CString *)&v17);
    uint64_t v28 = &v16;
    os_log_type_t v29 = &v16;
    uint64_t v34 = &v16;
    v35[1] = &v16;
    v35[0] = 0;
    char v46 = &v16;
    uint64_t v45 = v35;
    BOOL v40 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v16);
    if (v40) {
      WTF::StringImpl::deref(v40, v7);
    }
    WTF::CString::~CString((WTF::CString *)&v19);
    uint64_t v27 = &v18;
    uint64_t v30 = &v18;
    uint64_t v33 = &v18;
    v36[1] = &v18;
    v36[0] = 0;
    char v44 = &v18;
    int v43 = v36;
    uint64_t v39 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v18);
    if (v39) {
      WTF::StringImpl::deref(v39, v8);
    }
    WTF::CString::~CString((WTF::CString *)&v21);
    uint64_t v26 = &v20;
    uint64_t v31 = &v20;
    os_log_type_t v32 = &v20;
    v37[1] = &v20;
    v37[0] = 0;
    uint64_t v42 = &v20;
    os_log_type_t v41 = v37;
    uint64_t v38 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v20);
    if (v38) {
      WTF::StringImpl::deref(v38, v9);
    }
  }
  uint64_t v10 = WebKit::FidoAuthenticator::driver(this);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(v12, (uint64_t)this);
  v12[1] = (atomic_uint *)this;
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::getRetries(void)::$_0,void>(&v13, (uint64_t *)v12);
  (*(void (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v10 + 16))(v10, v24, &v13);
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~Function((uint64_t)&v13);
  WebKit::CtapAuthenticator::getAssertion(void)::$_0::~$_0((uint64_t *)v12);
  return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v24);
}

void *WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::getRetries(void)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  uint64_t v4[2] = a1;
  v4[1] = a2;
  void v4[4] = v4;
  uint64_t v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getRetries(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapAuthenticator::getRetries(void)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

void WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WebKit::FidoAuthenticator *a1, uint64_t a2)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  long long v50 = a1;
  uint64_t v49 = a2;
  os_log_t oslog = (os_log_t)qword_1EB3587D0;
  os_log_type_t v47 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v3 = oslog;
    os_log_type_t v4 = v47;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v45, (uint64_t)a1);
    WTF::String::utf8();
    uint64_t v5 = WTF::CString::data(&v46);
    WebKit::FidoAuthenticator::transportForDebugging(&v43, a1);
    WTF::String::utf8();
    uint64_t v6 = WTF::CString::data(&v44);
    __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)buf, (uint64_t)a1, v5, v6);
    _os_log_impl(&dword_1985F2000, v3, v4, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetKeyAgreementAfterGetRetries", buf, 0x20u);
    WTF::CString::~CString((WTF::CString *)&v44);
    uint64_t v55 = &v43;
    uint64_t v56 = &v43;
    os_log_t v65 = &v43;
    v66[1] = &v43;
    v66[0] = 0;
    char v85 = &v43;
    uint64_t v84 = v66;
    uint64_t v75 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v43);
    if (v75) {
      WTF::StringImpl::deref(v75, v7);
    }
    WTF::CString::~CString((WTF::CString *)&v46);
    char v54 = &v45;
    uint64_t v57 = &v45;
    os_log_type_t v64 = &v45;
    v67[1] = &v45;
    v67[0] = 0;
    int v83 = &v45;
    os_log_t v82 = v67;
    os_log_t v74 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v45);
    if (v74) {
      WTF::StringImpl::deref(v74, v8);
    }
  }
  uint64_t v9 = fido::pin::RetriesResponse::parse();
  v42[1] = v10;
  v42[0] = v9;
  if (std::optional<fido::pin::RetriesResponse>::operator BOOL[abi:sn180100]((uint64_t)v42))
  {
    fido::pin::encodeAsCBOR();
    os_log_t v34 = (os_log_t)qword_1EB3587D0;
    os_log_type_t v33 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = v34;
      os_log_type_t v14 = v33;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v31, (uint64_t)a1);
      WTF::String::utf8();
      uint64_t v15 = WTF::CString::data(&v32);
      WebKit::FidoAuthenticator::transportForDebugging(&v29, a1);
      WTF::String::utf8();
      uint64_t v16 = WTF::CString::data(&v30);
      std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v26, (WTF::ASCIILiteral *)v35);
      int v25 = 0;
      WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v25);
      WTF::base64EncodeToString((uint64_t)&v27, v26[0], v26[1]);
      WTF::String::utf8();
      uint64_t v17 = WTF::CString::data(&v28);
      __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)v86, (uint64_t)a1, v15, v16, v17);
      _os_log_impl(&dword_1985F2000, v13, v14, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetKeyAgreementAfterGetRetries: Sending %s", v86, 0x2Au);
      WTF::CString::~CString((WTF::CString *)&v28);
      uint64_t v53 = &v27;
      uint64_t v58 = &v27;
      uint64_t v63 = &v27;
      v68[1] = &v27;
      v68[0] = 0;
      os_log_type_t v81 = &v27;
      uint64_t v80 = v68;
      int v73 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v27);
      if (v73) {
        WTF::StringImpl::deref(v73, v18);
      }
      WTF::CString::~CString((WTF::CString *)&v30);
      os_log_t v52 = &v29;
      uint64_t v59 = &v29;
      uint64_t v62 = &v29;
      v69[1] = &v29;
      v69[0] = 0;
      uint64_t v79 = &v29;
      uint64_t v78 = v69;
      uint64_t v72 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v29);
      if (v72) {
        WTF::StringImpl::deref(v72, v19);
      }
      WTF::CString::~CString((WTF::CString *)&v32);
      os_log_type_t v51 = &v31;
      uint64_t v60 = &v31;
      os_log_t v61 = &v31;
      v70[1] = &v31;
      v70[0] = 0;
      uint64_t v77 = &v31;
      long long v76 = v70;
      uint64_t v71 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v31);
      if (v71) {
        WTF::StringImpl::deref(v71, v20);
      }
    }
    uint64_t v21 = WebKit::FidoAuthenticator::driver(a1);
    WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(v23, (uint64_t)a1);
    v23[1] = (atomic_uint *)a1;
    std::optional<WTF::String>::operator*[abi:sn180100]((uint64_t)v42);
    v23[2] = *v22;
    WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>(&v24, (uint64_t *)v23);
    (*(void (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v21 + 16))(v21, v35, &v24);
    WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~Function((uint64_t)&v24);
    WebKit::CtapAuthenticator::getAssertion(void)::$_0::~$_0((uint64_t *)v23);
    WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v35);
  }
  else
  {
    char ResponseCode = fido::getResponseCode();
    v38[0] = 24;
    uint64_t v11 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Unknown internal error. Error code: ", (const char *)0x24);
    uint64_t v37 = v12;
    uint64_t v36 = v11;
    WTF::makeString<WTF::ASCIILiteral,unsigned char>((WTF::String *)&v39, v11, v12, ResponseCode);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v40, (uint64_t)v38);
    WebKit::Authenticator::receiveRespond(a1);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v40);
    WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v38);
  }
}

uint64_t std::optional<fido::pin::RetriesResponse>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WTF::String,false>::has_value[abi:sn180100](a1) & 1;
}

void *WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  uint64_t v4[2] = a1;
  v4[1] = a2;
  void v4[4] = v4;
  uint64_t v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

fido::pin::KeyAgreementResponse *WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WebKit::FidoAuthenticator *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  os_log_type_t v47 = a1;
  uint64_t v46 = a2;
  uint64_t v45 = a3;
  uint64_t v44 = qword_1EB3587D0;
  os_log_type_t v43 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v4 = v44;
    os_log_type_t v5 = v43;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v41, (uint64_t)a1);
    WTF::String::utf8();
    uint64_t v6 = WTF::CString::data(&v42);
    WebKit::FidoAuthenticator::transportForDebugging(&v39, a1);
    WTF::String::utf8();
    uint64_t v7 = WTF::CString::data(&v40);
    __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)buf, (uint64_t)a1, v6, v7);
    _os_log_impl(&dword_1985F2000, v4, v5, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueRequestPinAfterGetKeyAgreement", buf, 0x20u);
    WTF::CString::~CString((WTF::CString *)&v40);
    os_log_type_t v51 = &v39;
    os_log_t v52 = &v39;
    uint64_t v59 = &v39;
    v60[1] = &v39;
    v60[0] = 0;
    uint64_t v75 = &v39;
    os_log_t v74 = v60;
    int v67 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v39);
    if (v67) {
      WTF::StringImpl::deref(v67, v8);
    }
    WTF::CString::~CString((WTF::CString *)&v42);
    long long v50 = &v41;
    uint64_t v53 = &v41;
    uint64_t v58 = &v41;
    v61[1] = &v41;
    v61[0] = 0;
    int v73 = &v41;
    uint64_t v72 = v61;
    uint64_t v66 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v41);
    if (v66) {
      WTF::StringImpl::deref(v66, v9);
    }
  }
  fido::pin::KeyAgreementResponse::parse();
  if (std::optional<fido::pin::RetriesResponse>::operator BOOL[abi:sn180100]((uint64_t)v38))
  {
    uint64_t v30 = WebKit::Authenticator::observer(a1);
    if (v30)
    {
      os_log_t oslog = (os_log_t)qword_1EB3587D0;
      os_log_type_t v28 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = oslog;
        os_log_type_t v13 = v28;
        WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v26, (uint64_t)a1);
        WTF::String::utf8();
        uint64_t v14 = WTF::CString::data(&v27);
        WebKit::FidoAuthenticator::transportForDebugging(&v24, a1);
        WTF::String::utf8();
        uint64_t v15 = WTF::CString::data(&v25);
        __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)v76, (uint64_t)a1, v14, v15);
        _os_log_impl(&dword_1985F2000, v12, v13, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueRequestPinAfterGetKeyAgreement: Requesting pin from observer.", v76, 0x20u);
        WTF::CString::~CString((WTF::CString *)&v25);
        uint64_t v49 = &v24;
        char v54 = &v24;
        uint64_t v57 = &v24;
        v62[1] = &v24;
        v62[0] = 0;
        uint64_t v71 = &v24;
        os_log_type_t v70 = v62;
        os_log_t v65 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v24);
        if (v65) {
          WTF::StringImpl::deref(v65, v16);
        }
        WTF::CString::~CString((WTF::CString *)&v27);
        uint64_t v48 = &v26;
        uint64_t v55 = &v26;
        uint64_t v56 = &v26;
        v63[1] = &v26;
        v63[0] = 0;
        uint64_t v69 = &v26;
        uint64_t v68 = v63;
        os_log_type_t v64 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v26);
        if (v64) {
          WTF::StringImpl::deref(v64, v17);
        }
      }
      uint64_t v18 = v30;
      uint64_t v19 = v45;
      WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(v22, (uint64_t)a1);
      v22[1] = (atomic_uint *)a1;
      std::optional<WTF::String>::operator*[abi:sn180100]((uint64_t)v38);
      fido::pin::KeyAgreementResponse::KeyAgreementResponse();
      WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v21);
      WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void>(&v23, (uint64_t *)v22);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v18 + 40))(v18, v19, &v23);
      WTF::CompletionHandler<void ()(WTF::String const&)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v23);
      WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v21);
      WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0::~$_0((uint64_t *)v22);
    }
    int v31 = 0;
  }
  else
  {
    char ResponseCode = fido::getResponseCode();
    v34[0] = 24;
    uint64_t v10 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Unknown internal error. Error code: ", (const char *)0x24);
    uint64_t v33 = v11;
    uint64_t v32 = v10;
    WTF::makeString<WTF::ASCIILiteral,unsigned char>((WTF::String *)&v35, v10, v11, ResponseCode);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v36, (uint64_t)v34);
    WebKit::Authenticator::receiveRespond(a1);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v36);
    WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v34);
    int v31 = 1;
  }
  return std::optional<fido::pin::KeyAgreementResponse>::~optional((fido::pin::KeyAgreementResponse *)v38);
}

void *WTF::CompletionHandler<void ()(WTF::String const&)>::CompletionHandler<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Function<void ()(WTF::String const&)>::Function<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

uint64_t *WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0::~$_0(uint64_t *a1)
{
  return a1;
}

{
  fido::pin::KeyAgreementResponse::~KeyAgreementResponse((fido::pin::KeyAgreementResponse *)(a1 + 2));
  WTF::WeakPtr<WebKit::CtapAuthenticator,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

fido::pin::KeyAgreementResponse *std::optional<fido::pin::KeyAgreementResponse>::~optional(fido::pin::KeyAgreementResponse *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<fido::pin::KeyAgreementResponse,false>::~__optional_move_assign_base(a1);
  return a1;
}

void WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WebKit::FidoAuthenticator *a1, fido::pin *a2, uint64_t a3)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  uint64_t v60 = a1;
  uint64_t v59 = a2;
  uint64_t v58 = a3;
  os_log_t oslog = (os_log_t)qword_1EB3587D0;
  os_log_type_t v56 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v4 = oslog;
    os_log_type_t v5 = v56;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v54, (uint64_t)a1);
    WTF::String::utf8();
    uint64_t v6 = WTF::CString::data(&v55);
    WebKit::FidoAuthenticator::transportForDebugging(&v52, a1);
    WTF::String::utf8();
    uint64_t v7 = WTF::CString::data(&v53);
    __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)buf, (uint64_t)a1, v6, v7);
    _os_log_impl(&dword_1985F2000, v4, v5, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetNextAssertionAfterResponseReceived", buf, 0x20u);
    WTF::CString::~CString((WTF::CString *)&v53);
    os_log_t v65 = &v52;
    uint64_t v66 = &v52;
    uint64_t v75 = &v52;
    v76[1] = &v52;
    v76[0] = 0;
    long long v95 = &v52;
    uint64_t v94 = v76;
    char v85 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v52);
    if (v85) {
      WTF::StringImpl::deref(v85, v8);
    }
    WTF::CString::~CString((WTF::CString *)&v55);
    os_log_type_t v64 = &v54;
    int v67 = &v54;
    os_log_t v74 = &v54;
    v77[1] = &v54;
    v77[0] = 0;
    os_log_t v93 = &v54;
    uint64_t v92 = v77;
    uint64_t v84 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v54);
    if (v84) {
      WTF::StringImpl::deref(v84, v9);
    }
  }
  if (WTF::String::isNull(v59))
  {
    v49[0] = 24;
    uint64_t v11 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Pin is null.", (const char *)0xC);
    v48[3] = v12;
    v48[2] = v11;
    WTF::String::String(&v50, v11, v12);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v51, (uint64_t)v49);
    WebKit::Authenticator::receiveRespond(a1);
    std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v51);
    WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v49);
  }
  else
  {
    fido::pin::validateAndConvertToUTF8(v48, v59, v10);
    if (std::optional<fido::pin::RetriesResponse>::operator BOOL[abi:sn180100]((uint64_t)v48))
    {
      std::optional<WTF::String>::operator*[abi:sn180100]((uint64_t)v48);
      fido::pin::TokenRequest::tryCreate();
      if (std::optional<fido::pin::TokenRequest>::operator BOOL[abi:sn180100]((uint64_t)v44))
      {
        std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)v44);
        fido::pin::encodeAsCBOR();
        os_log_t v37 = (os_log_t)qword_1EB3587D0;
        os_log_type_t v36 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = v37;
          os_log_type_t v16 = v36;
          WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v34, (uint64_t)a1);
          WTF::String::utf8();
          uint64_t v17 = WTF::CString::data(&v35);
          WebKit::FidoAuthenticator::transportForDebugging(&v32, a1);
          WTF::String::utf8();
          uint64_t v18 = WTF::CString::data(&v33);
          std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v29, (WTF::ASCIILiteral *)v38);
          int v28 = 0;
          WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v28);
          WTF::base64EncodeToString((uint64_t)&v30, v29[0], v29[1]);
          WTF::String::utf8();
          uint64_t v19 = WTF::CString::data(&v31);
          __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)v96, (uint64_t)a1, v17, v18, v19);
          _os_log_impl(&dword_1985F2000, v15, v16, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetPinTokenAfterRequestPin: Sending %s", v96, 0x2Au);
          WTF::CString::~CString((WTF::CString *)&v31);
          uint64_t v63 = &v30;
          uint64_t v68 = &v30;
          int v73 = &v30;
          v78[1] = &v30;
          v78[0] = 0;
          char v91 = &v30;
          uint64_t v90 = v78;
          int v83 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v30);
          if (v83) {
            WTF::StringImpl::deref(v83, v20);
          }
          WTF::CString::~CString((WTF::CString *)&v33);
          uint64_t v62 = &v32;
          uint64_t v69 = &v32;
          uint64_t v72 = &v32;
          v79[1] = &v32;
          v79[0] = 0;
          uint64_t v89 = &v32;
          uint64_t v88 = v79;
          os_log_t v82 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v32);
          if (v82) {
            WTF::StringImpl::deref(v82, v21);
          }
          WTF::CString::~CString((WTF::CString *)&v35);
          os_log_t v61 = &v34;
          os_log_type_t v70 = &v34;
          uint64_t v71 = &v34;
          v80[1] = &v34;
          v80[0] = 0;
          uint64_t v87 = &v34;
          uint64_t v86 = v80;
          os_log_type_t v81 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v34);
          if (v81) {
            WTF::StringImpl::deref(v81, v22);
          }
        }
        uint64_t v23 = WebKit::FidoAuthenticator::driver(a1);
        WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(v25, (uint64_t)a1);
        v25[1] = (atomic_uint *)a1;
        std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)v44);
        fido::pin::TokenRequest::TokenRequest(v26, v24);
        WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void>(&v27, (uint64_t *)v25);
        (*(void (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v23 + 16))(v23, v38, &v27);
        WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~Function((uint64_t)&v27);
        WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0::~$_0((uint64_t *)v25);
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v38);
        int v45 = 0;
      }
      else
      {
        v41[0] = 24;
        uint64_t v13 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Cannot create a TokenRequest.", (const char *)0x1D);
        uint64_t v40 = v14;
        uint64_t v39 = v13;
        WTF::String::String(&v42, v13, v14);
        std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v43, (uint64_t)v41);
        WebKit::Authenticator::receiveRespond(a1);
        std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v43);
        WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v41);
        int v45 = 1;
      }
      std::optional<fido::pin::TokenRequest>::~optional((fido::pin::TokenRequest *)v44);
    }
    else
    {
      uint64_t v47 = WebKit::Authenticator::observer(a1);
      if (v47) {
        (*(void (**)(void))(*(void *)v47 + 32))();
      }
      char v46 = 49;
      WebKit::CtapAuthenticator::tryRestartPin(a1, &v46);
      int v45 = 1;
    }
    std::optional<WTF::CString>::~optional((WTF::CString *)v48);
  }
}

uint64_t std::optional<fido::pin::TokenRequest>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<fido::pin::TokenRequest,false>::has_value[abi:sn180100](a1) & 1;
}

void std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<fido::pin::TokenRequest,false>::has_value[abi:sn180100](a1) & 1) == 0) {
    __break(1u);
  }
  std::__to_address[abi:sn180100]<char const>();
}

uint64_t *fido::pin::TokenRequest::TokenRequest(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(a1, a2);
  std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::set[abi:sn180100](a1 + 1, a2 + 1);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 4), a2 + 4);
  return a1;
}

void *WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  uint64_t v4[2] = a1;
  v4[1] = a2;
  void v4[4] = v4;
  uint64_t v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t *WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0::~$_0(uint64_t *a1)
{
  return a1;
}

{
  fido::pin::TokenRequest::~TokenRequest((fido::pin::TokenRequest *)(a1 + 2));
  WTF::WeakPtr<WebKit::CtapAuthenticator,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

fido::pin::TokenRequest *std::optional<fido::pin::TokenRequest>::~optional(fido::pin::TokenRequest *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<fido::pin::TokenRequest,false>::~__optional_move_assign_base(a1);
  return a1;
}

WTF::CString *std::optional<WTF::CString>::~optional(WTF::CString *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WTF::CString,false>::~__optional_move_assign_base(a1);
  return a1;
}

fido::pin::TokenResponse *WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(uint64_t a1, uint64_t a2, fido::pin::TokenRequest *a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v34 = a1;
  uint64_t v33 = a2;
  uint64_t v32 = a3;
  os_log_t oslog = (os_log_t)qword_1EB3587D0;
  os_log_type_t v30 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v4 = oslog;
    os_log_type_t v5 = v30;
    WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v28, a1);
    WTF::String::utf8();
    uint64_t v6 = WTF::CString::data(&v29);
    WebKit::FidoAuthenticator::transportForDebugging(&v26, (WebKit::FidoAuthenticator *)a1);
    WTF::String::utf8();
    uint64_t v7 = WTF::CString::data(&v27);
    __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)buf, a1, v6, v7);
    _os_log_impl(&dword_1985F2000, v4, v5, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetNextAssertionAfterResponseReceived", buf, 0x20u);
    WTF::CString::~CString((WTF::CString *)&v27);
    os_log_type_t v36 = &v26;
    uint64_t v41 = &v26;
    uint64_t v44 = &v26;
    v45[1] = &v26;
    v45[0] = 0;
    uint64_t v52 = &v26;
    os_log_type_t v51 = v45;
    uint64_t v48 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v26);
    if (v48) {
      WTF::StringImpl::deref(v48, v8);
    }
    WTF::CString::~CString((WTF::CString *)&v29);
    uint64_t v35 = &v28;
    uint64_t v42 = &v28;
    os_log_type_t v43 = &v28;
    v46[1] = &v28;
    v46[0] = 0;
    uint64_t v50 = &v28;
    uint64_t v49 = v46;
    uint64_t v47 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v28);
    if (v47) {
      WTF::StringImpl::deref(v47, v9);
    }
  }
  fido::pin::TokenRequest::sharedKey(v32);
  fido::pin::TokenResponse::parse();
  if (std::optional<fido::pin::RetriesResponse>::operator BOOL[abi:sn180100]((uint64_t)v25))
  {
    std::optional<WTF::String>::operator*[abi:sn180100]((uint64_t)v25);
    WebKit::Authenticator::requestData((WebKit::Authenticator *)a1);
    fido::pin::TokenResponse::pinAuth();
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)(a1 + 960), v18);
    WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v18);
    uint64_t v17 = a1;
    uint64_t v16 = a1;
    uint64_t v40 = WebKit::Authenticator::requestData((WebKit::Authenticator *)a1) + 16;
    v39[3] = &v17;
    v39[2] = &v16;
    uint64_t v38 = a1;
    uint64_t v37 = a1;
    uint64_t v60 = a1;
    uint64_t v59 = a1;
    uint64_t v58 = a1;
    uint64_t v57 = a1;
    WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>::Visitor(v61, a1, a1);
    v39[1] = v61[1];
    v39[0] = v61[0];
    void v61[2] = v40;
    os_log_type_t v56 = (WebKit::CtapAuthenticator **)v39;
    uint64_t v55 = v40;
    uint64_t v54 = 2;
    switch(std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](v40))
    {
      case 0:
        uint64_t v13 = v56;
        std::get[abi:sn180100]<0ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v55);
        std::invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(v13);
        goto LABEL_47;
      case 1:
        uint64_t v14 = (uint64_t)v56;
        std::get[abi:sn180100]<1ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v55);
        std::invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(v14);
        goto LABEL_47;
      case 2:
        __break(1u);
        goto LABEL_17;
      case 3:
LABEL_17:
        __break(1u);
        goto LABEL_18;
      case 4:
LABEL_18:
        __break(1u);
        goto LABEL_19;
      case 5:
LABEL_19:
        __break(1u);
        goto LABEL_20;
      case 6:
LABEL_20:
        __break(1u);
        goto LABEL_21;
      case 7:
LABEL_21:
        __break(1u);
        goto LABEL_22;
      case 8:
LABEL_22:
        __break(1u);
        goto LABEL_23;
      case 9:
LABEL_23:
        __break(1u);
        goto LABEL_24;
      case 10:
LABEL_24:
        __break(1u);
        goto LABEL_25;
      case 11:
LABEL_25:
        __break(1u);
        goto LABEL_26;
      case 12:
LABEL_26:
        __break(1u);
        goto LABEL_27;
      case 13:
LABEL_27:
        __break(1u);
        goto LABEL_28;
      case 14:
LABEL_28:
        __break(1u);
        goto LABEL_29;
      case 15:
LABEL_29:
        __break(1u);
        goto LABEL_30;
      case 16:
LABEL_30:
        __break(1u);
        goto LABEL_31;
      case 17:
LABEL_31:
        __break(1u);
        goto LABEL_32;
      case 18:
LABEL_32:
        __break(1u);
        goto LABEL_33;
      case 19:
LABEL_33:
        __break(1u);
        goto LABEL_34;
      case 20:
LABEL_34:
        __break(1u);
        goto LABEL_35;
      case 21:
LABEL_35:
        __break(1u);
        goto LABEL_36;
      case 22:
LABEL_36:
        __break(1u);
        goto LABEL_37;
      case 23:
LABEL_37:
        __break(1u);
        goto LABEL_38;
      case 24:
LABEL_38:
        __break(1u);
        goto LABEL_39;
      case 25:
LABEL_39:
        __break(1u);
        goto LABEL_40;
      case 26:
LABEL_40:
        __break(1u);
        goto LABEL_41;
      case 27:
LABEL_41:
        __break(1u);
        goto LABEL_42;
      case 28:
LABEL_42:
        __break(1u);
        goto LABEL_43;
      case 29:
LABEL_43:
        __break(1u);
        goto LABEL_44;
      case 30:
LABEL_44:
        __break(1u);
        goto LABEL_45;
      case 31:
LABEL_45:
        __break(1u);
        break;
      default:
        break;
    }
    uint64_t v53 = 2;
    __break(1u);
LABEL_47:
    int v22 = 0;
  }
  else
  {
    char ResponseCode = fido::getResponseCode();
      goto LABEL_12;
    uint64_t v23 = WebKit::Authenticator::observer((WebKit::Authenticator *)a1);
    if (v23)
    {
      (*(void (**)(uint64_t, void))(*(void *)v23 + 32))(v23, v10);
    }
    if (WebKit::CtapAuthenticator::tryRestartPin((WebKit::FidoAuthenticator *)a1, &ResponseCode))
    {
      int v22 = 1;
    }
    else
    {
LABEL_12:
      v19[0] = 24;
      uint64_t v11 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Unknown internal error. Error code: ", (const char *)0x24);
      void v18[3] = v12;
      v18[2] = v11;
      WTF::makeString<WTF::ASCIILiteral,unsigned char>((WTF::String *)&v20, v11, v12, ResponseCode);
      std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WebCore::ExceptionData,0,0,0,WebCore::ExceptionData,1ul,0>((uint64_t)v21, (uint64_t)v19);
      WebKit::Authenticator::receiveRespond((void *)a1);
      std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v21);
      WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v19);
      int v22 = 1;
    }
  }
  return std::optional<fido::pin::TokenResponse>::~optional((fido::pin::TokenResponse *)v25);
}

fido::pin::TokenResponse *std::optional<fido::pin::TokenResponse>::~optional(fido::pin::TokenResponse *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<fido::pin::TokenResponse,false>::~__optional_move_assign_base(a1);
  return a1;
}

BOOL std::operator==[abi:sn180100](void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::find[abi:sn180100](uint64_t a1, _DWORD *a2)
{
  return std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::find<fido::ProtocolVersion>(a1, a2);
}

uint64_t std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::end[abi:sn180100]()
{
  return std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::end[abi:sn180100]();
}

uint64_t WebKit::CtapDriver::setProtocol(uint64_t result)
{
  *(_DWORD *)(result + 16) = 1;
  return result;
}

void *WebKit::U2fAuthenticator::create(void *a1, uint64_t a2)
{
  os_log_type_t v3 = (WTF::RefCountedBase *)WTF::RefCounted<WebKit::Authenticator>::operator new();
  WebKit::U2fAuthenticator::U2fAuthenticator(v3, a2);
  return WTF::adoptRef<WebKit::U2fAuthenticator,WTF::RawPtrTraits<WebKit::U2fAuthenticator>,WTF::DefaultRefDerefTraits<WebKit::U2fAuthenticator>>(a1, v3);
}

uint64_t std::unique_ptr<WebKit::CtapDriver>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WebKit::CtapDriver>::reset[abi:sn180100](a1, 0);
  return a1;
}

uint64_t fido::AuthenticatorGetInfoResponse::transports(fido::AuthenticatorGetInfoResponse *this)
{
  return (uint64_t)this + 112;
}

uint64_t WebKit::CtapDriver::transport(WebKit::CtapDriver *this)
{
  return *((unsigned __int8 *)this + 20);
}

unsigned int *WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2, a3);
}

{
  WTF::FastMalloc *v4;
  uint64_t v5;
  unsigned char *v6;
  uint64_t v8;
  uint64_t v9;
  void v10[2];
  unsigned int *v11;
  WTF::FastMalloc *v12;
  unsigned int *v13;
  unsigned char *v14;
  unsigned int *v15;

  v10[0] = a2;
  v10[1] = a3;
  uint64_t v11 = a1;
  WTF::VectorBuffer<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::FastMalloc>::VectorBuffer((uint64_t)a1);
  os_log_type_t v4 = (WTF::FastMalloc *)std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v10);
  uint64_t v13 = a1;
  uint64_t v12 = v4;
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveInitialCapacity<(WTF::FailureAction)0>((uint64_t)a1, v4);
  std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v10);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  uint64_t v9 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v10);
  uint64_t v8 = std::initializer_list<WebCore::AuthenticatorTransport>::end[abi:sn180100](v10);
  while (v9 != v8)
  {
    uint64_t v15 = a1;
    uint64_t v14 = (unsigned char *)v9;
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
    os_log_type_t v5 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a1);
    uint64_t v6 = (unsigned char *)operator new(1, 0, v5);
    *uint64_t v6 = *v14;
    ++a1[3];
    ++v9;
  }
  return v11;
}

uint64_t fido::AuthenticatorGetInfoResponse::aaguid(fido::AuthenticatorGetInfoResponse *this)
{
  return (uint64_t)this + 24;
}

uint64_t *std::span<unsigned char const,16ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t *a1, WTF::ASCIILiteral *a2)
{
  return a1;
}

{
  *a1 = std::ranges::__data::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a2);
  if (std::ranges::__size::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)a2) != 16) {
    __break(1u);
  }
  return a1;
}

void *WTF::UUID::UUID(void *a1, uint64_t a2)
{
  return a1;
}

{
  const void *v3;
  uint64_t v5;

  os_log_type_t v5 = a2;
  os_log_type_t v3 = (const void *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)&v5);
  memcpy(a1, v3, 0x10uLL);
  return a1;
}

void WebKit::CtapAuthenticator::~CtapAuthenticator(WebKit::CtapAuthenticator *this)
{
}

{
  void *v2;

  WebKit::CtapAuthenticator::~CtapAuthenticator(this);
  WTF::FastMalloc::free(this, v2);
}

{
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebKit::CtapAuthenticator *)((char *)this + 960));
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WebKit::CtapAuthenticator *)((char *)this + 944));
  fido::AuthenticatorGetInfoResponse::~AuthenticatorGetInfoResponse((WebKit::CtapAuthenticator *)((char *)this + 784));
  WebKit::FidoAuthenticator::~FidoAuthenticator(this);
}

void *std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::set[abi:sn180100](void *a1, void *a2)
{
  return a1;
}

{
  std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__tree(a1, a2);
  return a1;
}

unsigned char *std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

unsigned char *std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

unsigned char *std::optional<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

void *std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__tree(void *a1, void *a2)
{
  return a1;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::size[abi:sn180100]();
  if (*v2)
  {
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__end_node[abi:sn180100]();
    uint64_t v7 = v6;
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__end_node[abi:sn180100]();
    *(void *)(*(void *)v8 + 16) = v7;
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__end_node[abi:sn180100]();
    unsigned __int8 v10 = v9;
    std::__to_address[abi:sn180100]<char const>();
    *uint64_t v11 = v10;
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__end_node[abi:sn180100]();
    *uint64_t v12 = 0;
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::size[abi:sn180100]();
    *uint64_t v13 = 0;
  }
  else
  {
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__end_node[abi:sn180100]();
    os_log_type_t v4 = v3;
    std::__to_address[abi:sn180100]<char const>();
    *os_log_type_t v5 = v4;
  }
  return a1;
}

void std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::size[abi:sn180100]()
{
}

void std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__end_node[abi:sn180100]()
{
}

unsigned char *std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

uint64_t WTF::CStringBuffer::data(WTF::CStringBuffer *this)
{
  return WTF::CStringBuffer::mutableData(this);
}

uint64_t WTF::CStringBuffer::mutableData(WTF::CStringBuffer *this)
{
  return (uint64_t)this + 16;
}

uint64_t WTF::RefCounted<WTF::CStringBuffer>::deref(WTF::RefCountedBase *a1)
{
  uint64_t result = WTF::RefCountedBase::derefBase(a1);
  if (result)
  {
    if (a1)
    {
      WTF::CStringBuffer::~CStringBuffer(a1);
      return WTF::FastMalloc::free(a1, v3);
    }
  }
  return result;
}

void WTF::CStringBuffer::~CStringBuffer(WTF::CStringBuffer *this)
{
}

unsigned char *std::__optional_move_assign_base<fido::PinParameters,false>::__optional_move_assign_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<fido::PinParameters,false>::__optional_copy_assign_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_base<fido::PinParameters,false>::__optional_move_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_base<fido::PinParameters,false>::__optional_copy_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

fido::PinParameters *std::__optional_move_assign_base<fido::PinParameters,false>::~__optional_move_assign_base(fido::PinParameters *a1)
{
  return a1;
}

fido::PinParameters *std::__optional_copy_assign_base<fido::PinParameters,false>::~__optional_copy_assign_base(fido::PinParameters *a1)
{
  return a1;
}

fido::PinParameters *std::__optional_move_base<fido::PinParameters,false>::~__optional_move_base(fido::PinParameters *a1)
{
  return a1;
}

fido::PinParameters *std::__optional_copy_base<fido::PinParameters,false>::~__optional_copy_base(fido::PinParameters *a1)
{
  return a1;
}

fido::PinParameters *std::__optional_storage_base<fido::PinParameters,false>::~__optional_storage_base(fido::PinParameters *a1)
{
  return a1;
}

fido::PinParameters *std::__optional_destruct_base<fido::PinParameters,false>::~__optional_destruct_base[abi:sn180100](fido::PinParameters *a1)
{
  if (*((unsigned char *)a1 + 24)) {
    fido::PinParameters::~PinParameters(a1);
  }
  return a1;
}

uint64_t _ZNSt3__127__optional_move_assign_baseIN4fido13PinParametersELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t _ZNSt3__127__optional_copy_assign_baseIN4fido13PinParametersELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t _ZNSt3__120__optional_move_baseIN4fido13PinParametersELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t _ZNSt3__120__optional_copy_baseIN4fido13PinParametersELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t _ZNSt3__123__optional_storage_baseIN4fido13PinParametersELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t std::__optional_destruct_base<fido::PinParameters,false>::__optional_destruct_base[abi:sn180100]<fido::PinParameters>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 24) = 1;
  return a1;
}

_DWORD *fido::PinParameters::PinParameters(_DWORD *a1, uint64_t a2)
{
  return a1;
}

{
  *a1 = *(_DWORD *)a2;
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 2), (uint64_t *)(a2 + 8));
  return a1;
}

uint64_t std::as_bytes[abi:sn180100]<unsigned char const,18446744073709551615ul>(uint64_t a1, uint64_t a2)
{
  v3[0] = a1;
  v3[1] = a2;
  return std::span<unsigned char const,18446744073709551615ul>::__as_bytes[abi:sn180100]((uint64_t)v3);
}

uint64_t std::span<unsigned char const,18446744073709551615ul>::__as_bytes[abi:sn180100](uint64_t a1)
{
  uint64_t v2 = std::span<char const,18446744073709551615ul>::data[abi:sn180100](a1);
  uint64_t v3 = std::span<char const,18446744073709551615ul>::size[abi:sn180100](a1);
  std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(&v5, v2, v3);
  return v5;
}

uint64_t std::ranges::__data::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(uint64_t a1, WTF::ASCIILiteral *a2)
{
  return WTF::ASCIILiteral::characters(a2);
}

uint64_t std::ranges::__size::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(uint64_t a1, uint64_t a2)
{
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a2);
}

_DWORD *WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::reset[abi:sn180100](a1, 0);
  return a1;
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v5 = *v2;
  std::to_address[abi:sn180100]<char const>();
  *uint64_t v3 = a2;
  if (v5)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::operator()[abi:sn180100](v4, v5);
  }
}

uint64_t std::default_delete<WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a2);
  }
  return result;
}

uint64_t *WTF::WeakPtr<WebKit::CtapAuthenticator,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(uint64_t *a1)
{
  return a1;
}

{
  void v3[2];
  WTF::ThreadSafeRefCountedBase *v4;
  void *v5;
  uint64_t *v6;

  v3[1] = a1;
  v3[0] = 0;
  uint64_t v6 = a1;
  uint64_t v5 = v3;
  uint64_t v4 = (WTF::ThreadSafeRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v4) {
    WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(v4);
  }
  return a1;
}

unsigned char *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput>(unsigned char *a1, unsigned char *a2)
{
  uint64_t result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput*>(a1, a2);
  a1[1] = 1;
  return result;
}

unsigned char *std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput*>(unsigned char *a1, unsigned char *a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput*>(a1, a2);
}

unsigned char *std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput,WebCore::AuthenticationExtensionsClientOutputs::CredentialPropertiesOutput*>(unsigned char *result, unsigned char *a2)
{
  if (!result) {
    __break(1u);
  }
  *uint64_t result = *a2;
  return result;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::~optional(WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::~__optional_move_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::~optional(WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_move_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::~__optional_move_assign_base(WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::~__optional_copy_assign_base(WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::~__optional_move_base(WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::~__optional_copy_base(WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::~__optional_storage_base(WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *a1)
{
  if (*((unsigned char *)a1 + 32)) {
    WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs::~PRFOutputs(a1);
  }
  return a1;
}

void WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs::~PRFOutputs(WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *this)
{
}

{
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::~optional((WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *)((char *)this + 8));
}

WebCore::AuthenticationExtensionsClientOutputs::PRFValues *std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::~optional(WebCore::AuthenticationExtensionsClientOutputs::PRFValues *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_move_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFValues *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_move_assign_base(WebCore::AuthenticationExtensionsClientOutputs::PRFValues *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFValues *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_copy_assign_base(WebCore::AuthenticationExtensionsClientOutputs::PRFValues *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFValues *std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_move_base(WebCore::AuthenticationExtensionsClientOutputs::PRFValues *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFValues *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_copy_base(WebCore::AuthenticationExtensionsClientOutputs::PRFValues *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFValues *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_storage_base(WebCore::AuthenticationExtensionsClientOutputs::PRFValues *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::PRFValues *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticationExtensionsClientOutputs::PRFValues *a1)
{
  if (*((unsigned char *)a1 + 16)) {
    WebCore::AuthenticationExtensionsClientOutputs::PRFValues::~PRFValues(a1);
  }
  return a1;
}

void WebCore::AuthenticationExtensionsClientOutputs::PRFValues::~PRFValues(WebCore::AuthenticationExtensionsClientOutputs::PRFValues *this)
{
}

{
  void v2[2];
  void v3[2];
  WTF::DeferrableRefCountedBase *v4;
  WTF::DeferrableRefCountedBase *v5;
  void *v6;
  WebCore::AuthenticationExtensionsClientOutputs::PRFValues *v7;
  void *v8;
  char *v9;

  v2[1] = (char *)this + 8;
  v2[0] = 0;
  uint64_t v9 = (char *)this + 8;
  uint64_t v8 = v2;
  uint64_t v5 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 1);
  if (v5) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v5);
  }
  v3[1] = this;
  v3[0] = 0;
  uint64_t v7 = this;
  uint64_t v6 = v3;
  uint64_t v4 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this);
  if (v4) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v4);
  }
}

WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_move_assign_base(WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_copy_assign_base(WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_move_base(WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_copy_base(WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_storage_base(WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1)
{
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1)
{
  if (*((unsigned char *)a1 + 24)) {
    WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::~LargeBlobOutputs(a1);
  }
  return a1;
}

void WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::~LargeBlobOutputs(WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *this)
{
}

{
  void v1[2];
  WTF::DeferrableRefCountedBase *v2;
  void *v3;
  char *v4;

  v1[1] = (char *)this + 8;
  v1[0] = 0;
  uint64_t v4 = (char *)this + 8;
  uint64_t v3 = v1;
  uint64_t v2 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 1);
  if (v2) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v2);
  }
}

uint64_t _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI1NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm0EJNS3_INS4_32AuthenticatorAttestationResponseENS6_ISF_EENS8_ISF_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI2NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm0EJNS3_INS4_32AuthenticatorAttestationResponseENS6_ISF_EENS8_ISF_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_32AuthenticatorAttestationResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__base[abi:sn180100]<0ul,WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>>(uint64_t a1, uint64_t *a2)
{
  *(_DWORD *)(a1 + 16) = 0;
  return a1;
}

uint64_t *std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__union[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>>(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  std::__variant_detail::__alt<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>>::__alt[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>>(a1, a2);
  return a1;
}

uint64_t *std::__variant_detail::__alt<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>>::__alt[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAttestationResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAttestationResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAttestationResponse>>>(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI1NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm0EJNS3_INS4_30AuthenticatorAssertionResponseENS6_ISF_EENS8_ISF_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__implIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS4_13ExceptionDataEEECI2NS0_6__baseILNS0_6_TraitE1EJSA_SB_EEEILm0EJNS3_INS4_30AuthenticatorAssertionResponseENS6_ISF_EENS8_ISF_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS5_13ExceptionDataEEEELNS0_6_TraitE1EECI2NS0_6__baseILSE_1EJSB_SC_EEEILm0EJNS4_INS5_30AuthenticatorAssertionResponseENS7_ISH_EENS9_ISH_EEEEEEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, uint64_t *a2)
{
  return a1;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__base[abi:sn180100]<0ul,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(uint64_t a1, uint64_t *a2)
{
  *(_DWORD *)(a1 + 16) = 0;
  return a1;
}

uint64_t *std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::__union[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  std::__variant_detail::__alt<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>>::__alt[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(a1, a2);
  return a1;
}

uint64_t *std::__variant_detail::__alt<0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>>::__alt[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

fido::pin::KeyAgreementResponse *std::__optional_move_assign_base<fido::pin::KeyAgreementResponse,false>::~__optional_move_assign_base(fido::pin::KeyAgreementResponse *a1)
{
  return a1;
}

fido::pin::KeyAgreementResponse *std::__optional_copy_assign_base<fido::pin::KeyAgreementResponse,false>::~__optional_copy_assign_base(fido::pin::KeyAgreementResponse *a1)
{
  return a1;
}

fido::pin::KeyAgreementResponse *std::__optional_move_base<fido::pin::KeyAgreementResponse,false>::~__optional_move_base(fido::pin::KeyAgreementResponse *a1)
{
  return a1;
}

fido::pin::KeyAgreementResponse *std::__optional_copy_base<fido::pin::KeyAgreementResponse,false>::~__optional_copy_base(fido::pin::KeyAgreementResponse *a1)
{
  return a1;
}

fido::pin::KeyAgreementResponse *std::__optional_storage_base<fido::pin::KeyAgreementResponse,false>::~__optional_storage_base(fido::pin::KeyAgreementResponse *a1)
{
  return a1;
}

fido::pin::KeyAgreementResponse *std::__optional_destruct_base<fido::pin::KeyAgreementResponse,false>::~__optional_destruct_base[abi:sn180100](fido::pin::KeyAgreementResponse *a1)
{
  if (*((unsigned char *)a1 + 8)) {
    fido::pin::KeyAgreementResponse::~KeyAgreementResponse(a1);
  }
  return a1;
}

uint64_t std::__optional_storage_base<fido::pin::TokenRequest,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(unsigned char *)(a1 + 48) & 1;
}

void fido::pin::TokenRequest::~TokenRequest(fido::pin::TokenRequest *this)
{
}

{
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((fido::pin::TokenRequest *)((char *)this + 32));
  std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::~map[abi:sn180100]((uint64_t)this + 8);
  WTF::Ref<WebCore::CryptoKeyAES,WTF::RawPtrTraits<WebCore::CryptoKeyAES>,WTF::DefaultRefDerefTraits<WebCore::CryptoKeyAES>>::~Ref((uint64_t *)this);
}

uint64_t std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::~map[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::~__tree(a1);
  return a1;
}

uint64_t *WTF::Ref<WebCore::CryptoKeyAES,WTF::RawPtrTraits<WebCore::CryptoKeyAES>,WTF::DefaultRefDerefTraits<WebCore::CryptoKeyAES>>::~Ref(uint64_t *a1)
{
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  uint64_t v4 = a1;
  uint64_t v5 = a1;
  uint64_t v3 = 0;
  uint64_t v2 = 0;
  uint64_t v7 = a1;
  uint64_t v6 = &v2;
  uint64_t v3 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v3)
  {
    uint64_t v8 = v3;
    WTF::ThreadSafeRefCounted<WebCore::CryptoKey,(WTF::DestructionThread)0>::deref((WTF::ThreadSafeRefCountedBase *)(v3 + 8));
  }
  return v5;
}

uint64_t std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::~__tree(uint64_t a1)
{
  return a1;
}

{
  WTF *v2;

  uint64_t v2 = (WTF *)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__root[abi:sn180100]();
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(a1, v2);
  return a1;
}

uint64_t std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(uint64_t result, WTF *a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(result, *(void *)a2);
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(v2, *((void *)a2 + 1));
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__node_alloc[abi:sn180100]();
    uint64_t v6 = v3;
    uint64_t v4 = v3;
    std::__tree_key_value_types<std::__value_type<cbor::CBORValue,cbor::CBORValue>>::__get_ptr[abi:sn180100]();
    std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::destroy[abi:sn180100]<std::pair<cbor::CBORValue const,cbor::CBORValue>,void,void>(v4, v5);
    return std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::deallocate[abi:sn180100](v6, a2);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__root[abi:sn180100]()
{
  std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__end_node[abi:sn180100]();
  return *(void *)v0;
}

void std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__node_alloc[abi:sn180100]()
{
}

uint64_t std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::destroy[abi:sn180100]<std::pair<cbor::CBORValue const,cbor::CBORValue>,void,void>(uint64_t a1, uint64_t a2)
{
  return std::__destroy_at[abi:sn180100]<std::pair<cbor::CBORValue const,cbor::CBORValue>,0>(a2);
}

void std::__tree_key_value_types<std::__value_type<cbor::CBORValue,cbor::CBORValue>>::__get_ptr[abi:sn180100]()
{
}

uint64_t std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::deallocate[abi:sn180100](uint64_t a1, WTF *a2)
{
  return WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>::deallocate(a1, a2);
}

uint64_t std::__destroy_at[abi:sn180100]<std::pair<cbor::CBORValue const,cbor::CBORValue>,0>(uint64_t a1)
{
  if (!a1) {
    __break(1u);
  }
  return std::pair<cbor::CBORValue const,cbor::CBORValue>::~pair(a1);
}

uint64_t std::pair<cbor::CBORValue const,cbor::CBORValue>::~pair(uint64_t a1)
{
  return a1;
}

{
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)(a1 + 32));
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)a1);
  return a1;
}

uint64_t WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>::deallocate(uint64_t a1, WTF *a2)
{
  return WTF::fastFree(a2, a2);
}

uint64_t WTF::ThreadSafeRefCounted<WebCore::CryptoKey,(WTF::DestructionThread)0>::deref(WTF::ThreadSafeRefCountedBase *a1)
{
  uint64_t result = WTF::ThreadSafeRefCountedBase::derefBase(a1);
  if (result)
  {
    uint64_t result = (uint64_t)a1 - 8;
    if (a1 != (WTF::ThreadSafeRefCountedBase *)8) {
      return (*(uint64_t (**)(void))(*(void *)result + 8))();
    }
  }
  return result;
}

fido::pin::TokenRequest *std::__optional_move_assign_base<fido::pin::TokenRequest,false>::~__optional_move_assign_base(fido::pin::TokenRequest *a1)
{
  return a1;
}

fido::pin::TokenRequest *std::__optional_copy_assign_base<fido::pin::TokenRequest,false>::~__optional_copy_assign_base(fido::pin::TokenRequest *a1)
{
  return a1;
}

fido::pin::TokenRequest *std::__optional_move_base<fido::pin::TokenRequest,false>::~__optional_move_base(fido::pin::TokenRequest *a1)
{
  return a1;
}

fido::pin::TokenRequest *std::__optional_copy_base<fido::pin::TokenRequest,false>::~__optional_copy_base(fido::pin::TokenRequest *a1)
{
  return a1;
}

fido::pin::TokenRequest *std::__optional_storage_base<fido::pin::TokenRequest,false>::~__optional_storage_base(fido::pin::TokenRequest *a1)
{
  return a1;
}

fido::pin::TokenRequest *std::__optional_destruct_base<fido::pin::TokenRequest,false>::~__optional_destruct_base[abi:sn180100](fido::pin::TokenRequest *a1)
{
  if (*((unsigned char *)a1 + 48)) {
    fido::pin::TokenRequest::~TokenRequest(a1);
  }
  return a1;
}

WTF::CString *std::__optional_move_assign_base<WTF::CString,false>::~__optional_move_assign_base(WTF::CString *a1)
{
  return a1;
}

WTF::CString *std::__optional_copy_assign_base<WTF::CString,false>::~__optional_copy_assign_base(WTF::CString *a1)
{
  return a1;
}

WTF::CString *std::__optional_move_base<WTF::CString,false>::~__optional_move_base(WTF::CString *a1)
{
  return a1;
}

WTF::CString *std::__optional_copy_base<WTF::CString,false>::~__optional_copy_base(WTF::CString *a1)
{
  return a1;
}

WTF::CString *std::__optional_storage_base<WTF::CString,false>::~__optional_storage_base(WTF::CString *a1)
{
  return a1;
}

WTF::CString *std::__optional_destruct_base<WTF::CString,false>::~__optional_destruct_base[abi:sn180100](WTF::CString *a1)
{
  if (*((unsigned char *)a1 + 8)) {
    WTF::CString::~CString(a1);
  }
  return a1;
}

fido::pin::TokenResponse *std::__optional_move_assign_base<fido::pin::TokenResponse,false>::~__optional_move_assign_base(fido::pin::TokenResponse *a1)
{
  return a1;
}

fido::pin::TokenResponse *std::__optional_copy_assign_base<fido::pin::TokenResponse,false>::~__optional_copy_assign_base(fido::pin::TokenResponse *a1)
{
  return a1;
}

fido::pin::TokenResponse *std::__optional_move_base<fido::pin::TokenResponse,false>::~__optional_move_base(fido::pin::TokenResponse *a1)
{
  return a1;
}

fido::pin::TokenResponse *std::__optional_copy_base<fido::pin::TokenResponse,false>::~__optional_copy_base(fido::pin::TokenResponse *a1)
{
  return a1;
}

fido::pin::TokenResponse *std::__optional_storage_base<fido::pin::TokenResponse,false>::~__optional_storage_base(fido::pin::TokenResponse *a1)
{
  return a1;
}

fido::pin::TokenResponse *std::__optional_destruct_base<fido::pin::TokenResponse,false>::~__optional_destruct_base[abi:sn180100](fido::pin::TokenResponse *a1)
{
  if (*((unsigned char *)a1 + 8)) {
    fido::pin::TokenResponse::~TokenResponse(a1);
  }
  return a1;
}

void fido::pin::TokenResponse::~TokenResponse(fido::pin::TokenResponse *this)
{
}

{
  WTF::Ref<WebCore::CryptoKeyAES,WTF::RawPtrTraits<WebCore::CryptoKeyAES>,WTF::DefaultRefDerefTraits<WebCore::CryptoKeyAES>>::~Ref((uint64_t *)this);
}

void *WTF::adoptRef<WebKit::U2fAuthenticator,WTF::RawPtrTraits<WebKit::U2fAuthenticator>,WTF::DefaultRefDerefTraits<WebKit::U2fAuthenticator>>(void *a1, WTF::RefCountedBase *a2)
{
  return WTF::Ref<WebKit::U2fAuthenticator,WTF::RawPtrTraits<WebKit::U2fAuthenticator>,WTF::DefaultRefDerefTraits<WebKit::U2fAuthenticator>>::Ref(a1, (uint64_t)a2);
}

uint64_t WTF::RefCounted<WebKit::Authenticator>::operator new()
{
  return WTF::fastMalloc((WTF *)0x358);
}

void *WTF::Ref<WebKit::U2fAuthenticator,WTF::RawPtrTraits<WebKit::U2fAuthenticator>,WTF::DefaultRefDerefTraits<WebKit::U2fAuthenticator>>::Ref(void *a1, uint64_t a2)
{
  return a1;
}

void std::unique_ptr<WebKit::CtapDriver>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v5 = *v2;
  std::to_address[abi:sn180100]<char const>();
  *uint64_t v3 = a2;
  if (v5)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WebKit::CtapDriver>::operator()[abi:sn180100](v4, v5);
  }
}

uint64_t std::default_delete<WebKit::CtapDriver>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a2);
  }
  return result;
}

uint64_t std::ranges::__data::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(WTF::ASCIILiteral *a1)
{
  return WTF::ASCIILiteral::characters(a1);
}

uint64_t std::ranges::__size::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t a1)
{
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1);
}

void fido::AuthenticatorGetInfoResponse::~AuthenticatorGetInfoResponse(fido::AuthenticatorGetInfoResponse *this)
{
}

{
  void *v2;

  std::optional<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional((fido::AuthenticatorGetInfoResponse *)((char *)this + 112));
  std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional((uint64_t)this + 72, v2);
  std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional((fido::AuthenticatorGetInfoResponse *)((char *)this + 48));
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((fido::AuthenticatorGetInfoResponse *)((char *)this + 24));
  std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::~set[abi:sn180100]((uint64_t)this);
}

WTF::ASCIILiteral *std::optional<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(WTF::ASCIILiteral *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(a1);
  return a1;
}

uint64_t std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(uint64_t a1, void *a2)
{
  return a1;
}

{
  std::__optional_move_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(a1, a2);
  return a1;
}

WTF::ASCIILiteral *std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(WTF::ASCIILiteral *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(a1);
  return a1;
}

uint64_t std::set<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::~set[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::~__tree(a1);
  return a1;
}

WTF::ASCIILiteral *std::__optional_move_assign_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(WTF::ASCIILiteral *a1)
{
  return a1;
}

WTF::ASCIILiteral *std::__optional_copy_assign_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_assign_base(WTF::ASCIILiteral *a1)
{
  return a1;
}

WTF::ASCIILiteral *std::__optional_move_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_base(WTF::ASCIILiteral *a1)
{
  return a1;
}

WTF::ASCIILiteral *std::__optional_copy_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_base(WTF::ASCIILiteral *a1)
{
  return a1;
}

WTF::ASCIILiteral *std::__optional_storage_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_storage_base(WTF::ASCIILiteral *a1)
{
  return a1;
}

WTF::ASCIILiteral *std::__optional_destruct_base<WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_destruct_base[abi:sn180100](WTF::ASCIILiteral *a1)
{
  if (*((unsigned char *)a1 + 16)) {
    WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1);
  }
  return a1;
}

uint64_t std::__optional_move_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_assign_base(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t std::__optional_move_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_base(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t std::__optional_copy_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_base(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_storage_base(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t std::__optional_destruct_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 16)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, a2);
  }
  return a1;
}

WTF::ASCIILiteral *std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(WTF::ASCIILiteral *a1)
{
  return a1;
}

uint64_t std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::~__tree(uint64_t a1)
{
  return a1;
}

{
  WTF *v2;

  uint64_t v2 = (WTF *)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__root[abi:sn180100]();
  std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy(a1, v2);
  return a1;
}

uint64_t std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy(uint64_t result, WTF *a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy(result, *(void *)a2);
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy(v2, *((void *)a2 + 1));
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__node_alloc[abi:sn180100]();
    uint64_t v6 = v3;
    uint64_t v4 = v3;
    std::__to_address[abi:sn180100]<char const>();
    std::allocator_traits<WTF::FastAllocator<std::__tree_node<fido::ProtocolVersion,void *>>>::destroy[abi:sn180100]<fido::ProtocolVersion,void,void>(v4, v5);
    return std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::deallocate[abi:sn180100](v6, a2);
  }
  return result;
}

uint64_t std::allocator_traits<WTF::FastAllocator<std::__tree_node<fido::ProtocolVersion,void *>>>::destroy[abi:sn180100]<fido::ProtocolVersion,void,void>(uint64_t a1, uint64_t a2)
{
  return std::__destroy_at[abi:sn180100]<fido::ProtocolVersion,0>(a2);
}

uint64_t std::__destroy_at[abi:sn180100]<fido::ProtocolVersion,0>(uint64_t result)
{
  if (!result) {
    __break(1u);
  }
  return result;
}

uint64_t WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::VectorBuffer(uint64_t a1, WTF::FastMalloc *a2, int a3)
{
  *(_DWORD *)(a1 + 12) = a3;
  if (a2) {
    WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
  }
  return a1;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::reset[abi:sn180100]();
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapAuthenticator::makeCredential(void)::$_0>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B3890;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void *WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapperBase(void *result)
{
  *uint64_t result = &unk_1EE9B38B8;
  return result;
}

uint64_t *WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B3890;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, WTF::ASCIILiteral *a2)
{
  return WebKit::CtapAuthenticator::makeCredential(void)::$_0::operator()((uint64_t *)(a1 + 8), a2);
}

void WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapperBase()
{
}

{
  __break(1u);
}

uint64_t WebKit::CtapAuthenticator::makeCredential(void)::$_0::operator()(uint64_t *a1, WTF::ASCIILiteral *a2)
{
  uint64_t result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    uint64_t v4 = (unsigned char *)WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::CtapAuthenticator::continueMakeCredentialAfterResponseReceived(v4, a2);
  }
  return result;
}

void std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::reset[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v3 = *v0;
  std::to_address[abi:sn180100]<char const>();
  void *v1 = 0;
  if (v3)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::operator()[abi:sn180100](v2, v3);
  }
}

WTF::StringImpl *WTF::tryMakeString<WTF::ASCIILiteral,unsigned char>(void *a1, _OWORD *a2, char *a3)
{
  unsigned __int8 v10 = a1;
  uint64_t v9 = a2;
  uint64_t v8 = a3;
  long long v6 = *a2;
  WTF::StringTypeAdapter<WTF::ASCIILiteral,void>::StringTypeAdapter((uint64_t)v7, v6, *((uint64_t *)&v6 + 1));
  WTF::StringTypeAdapter<unsigned char,void>::StringTypeAdapter(&v5, *v8);
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>>(a1, (WTF *)v7, &v5);
}

BOOL WTF::operator!(WTF::String *a1)
{
  return WTF::String::isNull(a1);
}

WTF::StringImpl *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>>(void *a1, WTF *a2, unsigned __int8 *a3)
{
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  uint64_t v12 = a3;
  unsigned int v4 = WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)a2);
  unsigned int v5 = WTF::StringTypeAdapter<unsigned char,void>::length(v12);
  WTF::checkedSum<int,unsigned int,unsigned int>((uint64_t)&v11, v4, v5);
  if (WTF::RecordOverflow::hasOverflowed((WTF::RecordOverflow *)&v11))
  {
    memset(a1, 0, sizeof(void));
    return (WTF::StringImpl *)WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1);
  }
  else
  {
    WTF::are8Bit<WTF::StringTypeAdapter<WTF::ASCIILiteral,void> &,WTF::StringTypeAdapter<unsigned char,void> &>(v13, (WTF::RefCountedBase *)v12);
    char v10 = 1;
    unsigned int v7 = WTF::Checked<int,WTF::RecordOverflow>::operator int(&v11);
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>>(&v9, v7, 1, *(void *)v13, *((void *)v13 + 1), *v12);
    WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, &v9);
    uint64_t v15 = &v9;
    v16[1] = &v9;
    v16[0] = 0;
    uint64_t v19 = &v9;
    uint64_t v18 = v16;
    uint64_t result = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v9);
    uint64_t v17 = result;
    if (result) {
      return WTF::StringImpl::deref(v17, v8);
    }
  }
  return result;
}

uint64_t WTF::StringTypeAdapter<WTF::ASCIILiteral,void>::StringTypeAdapter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WTF::StringTypeAdapter<WTF::ASCIILiteral,void>::StringTypeAdapter(a1, a2, a3);
}

{
  uint64_t v4;
  uint64_t v5;
  void v7[2];

  v7[0] = a2;
  v7[1] = a3;
  unsigned int v4 = WTF::ASCIILiteral::span8((WTF::ASCIILiteral *)v7);
  WTF::StringTypeAdapter<std::span<unsigned char const,18446744073709551615ul>,void>::StringTypeAdapter(a1, v4, v5);
  return a1;
}

unsigned char *WTF::StringTypeAdapter<unsigned char,void>::StringTypeAdapter(unsigned char *a1, char a2)
{
  return a1;
}

uint64_t WTF::checkedSum<int,unsigned int,unsigned int>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v9 = a1;
  unsigned int v8 = a2;
  unsigned int v7 = a3;
  WTF::Checked<int,WTF::RecordOverflow>::Checked<unsigned int>((uint64_t)v6, a2);
  WTF::checkedSum<int,unsigned int>((uint64_t)&v5, v7);
  return WTF::operator+<int,int,WTF::RecordOverflow>(a1, (WTF::RecordOverflow *)v6, (WTF::RecordOverflow *)&v5);
}

uint64_t WTF::StringTypeAdapter<unsigned char,void>::length(unsigned __int8 *a1)
{
  return WTF::lengthOfIntegerAsString<unsigned char>(*a1);
}

BOOL WTF::RecordOverflow::hasOverflowed(WTF::RecordOverflow *this)
{
  return *(unsigned char *)this != 0;
}

void WTF::are8Bit<WTF::StringTypeAdapter<WTF::ASCIILiteral,void> &,WTF::StringTypeAdapter<unsigned char,void> &>(WTF *a1, WTF::RefCountedBase *a2)
{
}

WTF::StringImpl *WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>>(uint64_t *a1, unsigned int a2, char a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  int v31 = a1;
  *((void *)&v30 + 1) = a5;
  *(void *)&long long v30 = a4;
  unsigned __int8 v29 = a6;
  unsigned int v28 = a2;
  char v27 = a3;
  if (a3)
  {
    uint64_t v26 = 0;
    uint64_t v63 = &v25;
    uint64_t v62 = (WTF::RefCountedBase *)v28;
    os_log_t v61 = (uint64_t *)&v26;
    if (v28)
    {
      unsigned int v7 = v62;
      if ((unint64_t)v7 <= WTF::StringImpl::maxInternalLength<unsigned char>())
      {
        uint64_t v60 = 0;
        WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked<unsigned long>(&v59, v62);
        unsigned int v8 = (WTF::FastCompactMalloc *)WTF::StringImpl::allocationSize<unsigned char>((WTF::RefCountedBase *)&v59);
        uint64_t v60 = WTF::FastCompactMalloc::tryMalloc(v8);
        if (v60)
        {
          uint64_t v9 = WTF::StringImpl::tailPointer<unsigned char>(v60);
          *os_log_t v61 = v9;
          uint64_t v92 = &v58;
          uint64_t v91 = v60;
          unsigned int v90 = v62;
          WTF::StringImpl::operator new();
          unsigned int v11 = (WTF::RefCountedBase *)v10;
          WTF::StringImpl::StringImpl(v10, v90);
          WTF::adoptRef<WebKit::U2fAuthenticator,WTF::RawPtrTraits<WebKit::U2fAuthenticator>,WTF::DefaultRefDerefTraits<WebKit::U2fAuthenticator>>(&v58, v11);
          WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>((uint64_t *)&v25, &v58);
          WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::~Ref(&v58);
        }
        else
        {
          *os_log_t v61 = 0;
          os_log_t v65 = &v25;
          uint64_t v64 = 0;
          uint64_t v71 = &v25;
          uint64_t v70 = 0;
          int v25 = 0;
        }
      }
      else
      {
        *os_log_t v61 = 0;
        int v67 = &v25;
        uint64_t v66 = 0;
        uint64_t v69 = &v25;
        uint64_t v68 = 0;
        int v25 = 0;
      }
    }
    else
    {
      *os_log_t v61 = 0;
      uint64_t v89 = &v25;
      uint64_t v88 = MEMORY[0x1E4F30960];
      uint64_t v94 = &v25;
      uint64_t v93 = MEMORY[0x1E4F30960];
      uint64_t v98 = (_DWORD *)MEMORY[0x1E4F30960];
      if (MEMORY[0x1E4F30960]) {
        WTF::StringImpl::ref(v98);
      }
      int v25 = v98;
    }
    if (WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(&v25))
    {
      int v45 = a1;
      uint64_t v44 = 0;
      uint64_t v47 = a1;
      uint64_t v46 = 0;
      *a1 = 0;
      int v24 = 1;
    }
    else
    {
      if (v26)
      {
        long long v23 = v30;
        unsigned __int8 v22 = v29;
        WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>>(v26, v30, *((uint64_t *)&v30 + 1), v29);
      }
      uint64_t v53 = a1;
      uint64_t v52 = &v25;
      uint64_t v55 = a1;
      uint64_t v54 = &v25;
      *a1 = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef((uint64_t *)&v25);
      int v24 = 1;
    }
    uint64_t v33 = &v25;
    v34[1] = &v25;
    v34[0] = 0;
    uint64_t v41 = &v25;
    uint64_t v40 = v34;
    uint64_t result = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v25);
    uint64_t v37 = result;
    if (result) {
      return WTF::StringImpl::deref(v37, v13);
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v77 = &v20;
    long long v76 = (WTF::RefCountedBase *)v28;
    uint64_t v75 = &v21;
    if (v28)
    {
      uint64_t v14 = v76;
      if ((unint64_t)v14 <= WTF::StringImpl::maxInternalLength<char16_t>())
      {
        uint64_t v74 = 0;
        WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked<unsigned long>(&v73, v76);
        uint64_t v15 = (WTF::FastCompactMalloc *)WTF::StringImpl::allocationSize<char16_t>((WTF::RefCountedBase *)&v73);
        uint64_t v74 = WTF::FastCompactMalloc::tryMalloc(v15);
        if (v74)
        {
          uint64_t v16 = WTF::StringImpl::tailPointer<char16_t>(v74);
          *uint64_t v75 = v16;
          uint64_t v101 = &v72;
          uint64_t v100 = v74;
          unsigned int v99 = v76;
          WTF::StringImpl::operator new();
          uint64_t v18 = v17;
          WTF::StringImpl::StringImpl(v17, v99);
          WTF::adoptRef<WebKit::U2fAuthenticator,WTF::RawPtrTraits<WebKit::U2fAuthenticator>,WTF::DefaultRefDerefTraits<WebKit::U2fAuthenticator>>(&v72, v18);
          WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>((uint64_t *)&v20, &v72);
          WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::~Ref(&v72);
        }
        else
        {
          *uint64_t v75 = 0;
          uint64_t v79 = &v20;
          uint64_t v78 = 0;
          char v85 = &v20;
          uint64_t v84 = 0;
          uint64_t v20 = 0;
        }
      }
      else
      {
        *uint64_t v75 = 0;
        os_log_type_t v81 = &v20;
        uint64_t v80 = 0;
        int v83 = &v20;
        uint64_t v82 = 0;
        uint64_t v20 = 0;
      }
    }
    else
    {
      *uint64_t v75 = 0;
      uint64_t v87 = &v20;
      uint64_t v86 = MEMORY[0x1E4F30960];
      uint64_t v96 = &v20;
      uint64_t v95 = MEMORY[0x1E4F30960];
      uint64_t v97 = (_DWORD *)MEMORY[0x1E4F30960];
      if (MEMORY[0x1E4F30960]) {
        WTF::StringImpl::ref(v97);
      }
      uint64_t v20 = v97;
    }
    if (WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(&v20))
    {
      os_log_type_t v43 = a1;
      uint64_t v42 = 0;
      uint64_t v49 = a1;
      uint64_t v48 = 0;
      *a1 = 0;
      int v24 = 1;
    }
    else
    {
      if (v21) {
        WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>>(v21, v30, *((uint64_t *)&v30 + 1), v29);
      }
      os_log_type_t v51 = a1;
      uint64_t v50 = &v20;
      uint64_t v57 = a1;
      os_log_type_t v56 = &v20;
      *a1 = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef((uint64_t *)&v20);
      int v24 = 1;
    }
    uint64_t v32 = &v20;
    v35[1] = &v20;
    v35[0] = 0;
    uint64_t v39 = &v20;
    uint64_t v38 = v35;
    uint64_t result = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v20);
    os_log_type_t v36 = result;
    if (result) {
      return WTF::StringImpl::deref(v36, v19);
    }
  }
  return result;
}

uint64_t WTF::Checked<int,WTF::RecordOverflow>::operator int(unsigned int *a1)
{
  BOOL hasOverflowed = WTF::RecordOverflow::hasOverflowed((WTF::RecordOverflow *)a1);
  if (hasOverflowed) {
    WTF::RecordOverflow::crash((WTF::RecordOverflow *)hasOverflowed);
  }
  return a1[1];
}

uint64_t WTF::operator+<int,int,WTF::RecordOverflow>(uint64_t a1, WTF::RecordOverflow *this, WTF::RecordOverflow *a3)
{
  uint64_t v14 = a1;
  uint64_t v13 = this;
  uint64_t v12 = a3;
  BOOL hasOverflowed = WTF::RecordOverflow::hasOverflowed(this);
  BOOL v7 = 1;
  if (!hasOverflowed) {
    BOOL v7 = WTF::RecordOverflow::hasOverflowed(a3);
  }
  if (v7) {
    return WTF::Checked<int,WTF::RecordOverflow>::Checked(a1);
  }
  int v11 = 0;
  int v9 = WTF::Checked<int,WTF::RecordOverflow>::operator int((unsigned int *)this);
  int v10 = WTF::Checked<int,WTF::RecordOverflow>::operator int((unsigned int *)a3);
  if ((WTF::safeAdd<WTF::RecordOverflow,int,int,int,void>(v9, v10, &v11) ^ 1)) {
    return WTF::Checked<int,WTF::RecordOverflow>::Checked(a1);
  }
  else {
    return WTF::Checked<int,WTF::RecordOverflow>::Checked<int>(a1, v11);
  }
}

uint64_t WTF::Checked<int,WTF::RecordOverflow>::Checked<unsigned int>(uint64_t a1, unsigned int a2)
{
  return a1;
}

{
  WTF::RecordOverflow::RecordOverflow((unsigned char *)a1);
  if (!WTF::isInBounds<int,unsigned int>(a2)) {
    WTF::RecordOverflow::overflowed((unsigned char *)a1);
  }
  *(_DWORD *)(a1 + 4) = a2;
  return a1;
}

uint64_t WTF::checkedSum<int,unsigned int>(uint64_t a1, unsigned int a2)
{
  return WTF::Checked<int,WTF::RecordOverflow>::Checked<unsigned int>(a1, a2);
}

uint64_t WTF::Checked<int,WTF::RecordOverflow>::Checked(uint64_t a1)
{
  return a1;
}

{
  WTF::RecordOverflow::RecordOverflow((unsigned char *)a1);
  *(_DWORD *)(a1 + 4) = 0;
  WTF::RecordOverflow::overflowed((unsigned char *)a1);
  return a1;
}

uint64_t WTF::safeAdd<WTF::RecordOverflow,int,int,int,void>(int a1, int a2, _DWORD *a3)
{
  return WTF::safeAdd<int,int,int>(a1, a2, a3) & 1;
}

uint64_t WTF::Checked<int,WTF::RecordOverflow>::Checked<int>(uint64_t a1, int a2)
{
  return a1;
}

{
  WTF::RecordOverflow::RecordOverflow((unsigned char *)a1);
  WTF::isInBounds<int,int>();
  *(_DWORD *)(a1 + 4) = a2;
  return a1;
}

unsigned char *WTF::RecordOverflow::RecordOverflow(unsigned char *this)
{
  *this = 0;
  return this;
}

unsigned char *WTF::RecordOverflow::overflowed(unsigned char *this)
{
  *this = 1;
  return this;
}

uint64_t WTF::safeAdd<int,int,int>(int a1, int a2, _DWORD *a3)
{
  return WTF::ArithmeticOperations<int,int,int,true,true>::add(a1, a2, a3) & 1;
}

uint64_t WTF::ArithmeticOperations<int,int,int,true,true>::add(int a1, int a2, _DWORD *a3)
{
  if (__OFADD__(a1, a2))
  {
    char v5 = 0;
  }
  else
  {
    *a3 = a1 + a2;
    char v5 = 1;
  }
  return v5 & 1;
}

void WTF::RecordOverflow::crash(WTF::RecordOverflow *this)
{
}

void WTF::isInBounds<int,int>()
{
}

BOOL WTF::isInBounds<int,unsigned int>(unsigned int a1)
{
  return WTF::BoundsChecker<int,unsigned int,true,true,false>::inBounds((WTF *)a1);
}

BOOL WTF::BoundsChecker<int,unsigned int,true,true,false>::inBounds(WTF *a1)
{
  unsigned int v1 = a1;
  std::numeric_limits<unsigned char>::max[abi:sn180100](a1);
  return v1 <= 0x7FFFFFFF;
}

uint64_t WTF::lengthOfIntegerAsString<unsigned char>(unsigned __int8 a1)
{
  return WTF::lengthOfIntegerAsStringImpl<unsigned char,(WTF::PositiveOrNegativeNumber)0>(a1);
}

uint64_t WTF::lengthOfIntegerAsStringImpl<unsigned char,(WTF::PositiveOrNegativeNumber)0>(unsigned __int8 a1)
{
  unsigned int v2 = 0;
  do
  {
    ++v2;
    a1 /= 0xAu;
  }
  while (a1);
  return v2;
}

unint64_t WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>>(unsigned char *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  v8[0] = a2;
  v8[1] = a3;
  WTF::StringTypeAdapter<std::span<unsigned char const,18446744073709551615ul>,void>::writeTo<unsigned char>((uint64_t)v8, a1);
  int v4 = WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)v8);
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<unsigned char,void>>(&a1[v4], a4);
}

unint64_t WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned char,void>>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  v8[0] = a2;
  v8[1] = a3;
  WTF::StringTypeAdapter<std::span<unsigned char const,18446744073709551615ul>,void>::writeTo<char16_t>((uint64_t)v8, a1);
  unsigned int v4 = WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)v8);
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<unsigned char,void>>((_WORD *)(a1 + 2 * v4), a4);
}

uint64_t WTF::StringImpl::maxInternalLength<unsigned char>()
{
  uint64_t v2 = 0x7FFFFFFFLL;
  uint64_t v1 = std::numeric_limits<unsigned int>::max[abi:sn180100]() - 32;
  return *std::min[abi:sn180100]<unsigned long>(&v2, &v1);
}

uint64_t WTF::FastCompactMalloc::tryMalloc(WTF::FastCompactMalloc *this)
{
  v3[1] = this;
  WTF::tryFastCompactMalloc(this);
  uint64_t v2 = 0;
  if (WTF::TryMallocReturnValue::getValue<void>(v3, &v2)) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = 0;
  }
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~__union((uint64_t)v3);
  return v4;
}

uint64_t WTF::StringImpl::allocationSize<unsigned char>(WTF::RefCountedBase *a1)
{
  BOOL v7 = a1;
  uint64_t v2 = (WTF::RefCountedBase *)WTF::StringImpl::tailOffset<unsigned char>();
  WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked(&v4, a1);
  WTF::operator*<unsigned long,unsigned long,WTF::CrashOnOverflow>((WTF::RefCountedBase *)v5, (WTF::RefCountedBase *)&v4, (WTF::RefCountedBase *)1);
  WTF::operator+<unsigned long,unsigned long,WTF::CrashOnOverflow>((WTF::RefCountedBase *)v6, v2, (WTF::RefCountedBase *)v5);
  return WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::get((WTF::RefCountedBase *)v6);
}

WTF::RefCountedBase **WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked<unsigned long>(WTF::RefCountedBase **a1, WTF::RefCountedBase *a2)
{
  return a1;
}

{
  WTF::isHashTraitsReleasedWeakValue<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WebCore::AuthenticatorTransport>(a2);
  *a1 = a2;
  return a1;
}

uint64_t WTF::StringImpl::tailPointer<unsigned char>(uint64_t a1)
{
  return a1 + WTF::StringImpl::tailOffset<unsigned char>();
}

void *std::min[abi:sn180100]<unsigned long>(void *a1, void *a2)
{
  return std::min[abi:sn180100]<unsigned long,std::__less<void,void>>(a1, a2);
}

void *std::min[abi:sn180100]<unsigned long,std::__less<void,void>>(void *a1, void *a2)
{
  if (std::__less<void,void>::operator()[abi:sn180100]<unsigned long,unsigned long>((uint64_t)&v5, a2, a1)) {
    return a2;
  }
  else {
    return a1;
  }
}

BOOL std::__less<void,void>::operator()[abi:sn180100]<unsigned long,unsigned long>(uint64_t a1, void *a2, void *a3)
{
  return *a2 < *a3;
}

BOOL WTF::TryMallocReturnValue::getValue<void>(void *a1, void *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return *a2 != 0;
}

WTF::RefCountedBase **WTF::operator+<unsigned long,unsigned long,WTF::CrashOnOverflow>(WTF::RefCountedBase *a1, WTF::RefCountedBase *a2, WTF::RefCountedBase *a3)
{
  void v7[3] = a1;
  v7[2] = a2;
  v7[1] = a3;
  WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked<unsigned long>(v7, a2);
  WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked(&v6, a3);
  return WTF::operator+<unsigned long,unsigned long,WTF::CrashOnOverflow>(a1, (WTF::RefCountedBase *)v7, (WTF::RefCountedBase *)&v6);
}

uint64_t WTF::StringImpl::tailOffset<unsigned char>()
{
  return WTF::roundUpToMultipleOf<1ul>();
}

WTF::RefCountedBase **WTF::operator*<unsigned long,unsigned long,WTF::CrashOnOverflow>(WTF::RefCountedBase *a1, WTF::RefCountedBase *a2, WTF::RefCountedBase *a3)
{
  int v9 = a1;
  unsigned int v8 = a2;
  BOOL v7 = a3;
  WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked(&v6, a2);
  WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked<unsigned long>(&v5, v7);
  return WTF::operator*<unsigned long,unsigned long,WTF::CrashOnOverflow>(a1, (WTF::RefCountedBase *)&v6, (WTF::RefCountedBase *)&v5);
}

void *WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked(void *a1, WTF::RefCountedBase *a2)
{
  return a1;
}

{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a2);
  *a1 = *(void *)a2;
  return a1;
}

WTF::RefCountedBase **WTF::operator+<unsigned long,unsigned long,WTF::CrashOnOverflow>(WTF::RefCountedBase *a1, WTF::RefCountedBase *this, WTF::RefCountedBase *a3)
{
  uint64_t v9[3] = a1;
  uint64_t v9[2] = this;
  v9[1] = a3;
  WTF::RefCountedBase::applyRefDerefThreadingCheck(this);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a3);
  v9[0] = 0;
  uint64_t v6 = WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::get(this);
  uint64_t v7 = WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::get(a3);
  if ((WTF::safeAdd<WTF::CrashOnOverflow,unsigned long,unsigned long,unsigned long,void>(v6, v7, v9) ^ 1)) {
    WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked(a1);
  }
  return WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked<unsigned long>((WTF::RefCountedBase **)a1, v9[0]);
}

void WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked(WTF::CrashOnOverflow *a1)
{
}

{
  *(void *)a1 = 0;
  WTF::CrashOnOverflow::overflowed(a1);
}

uint64_t sub_1987E7424()
{
  return v0;
}

uint64_t WTF::safeAdd<WTF::CrashOnOverflow,unsigned long,unsigned long,unsigned long,void>(uint64_t a1, uint64_t a2, void *a3)
{
  return WTF::safeAdd<unsigned long,unsigned long,unsigned long>(a1, a2, a3) & 1;
}

void WTF::CrashOnOverflow::overflowed(WTF::CrashOnOverflow *this)
{
}

uint64_t WTF::safeAdd<unsigned long,unsigned long,unsigned long>(uint64_t a1, uint64_t a2, void *a3)
{
  return WTF::ArithmeticOperations<unsigned long,unsigned long,unsigned long,false,false>::add(a1, a2, a3) & 1;
}

uint64_t WTF::ArithmeticOperations<unsigned long,unsigned long,unsigned long,false,false>::add(uint64_t a1, uint64_t a2, void *a3)
{
  if (__CFADD__(a1, a2))
  {
    char v5 = 0;
  }
  else
  {
    *a3 = a1 + a2;
    char v5 = 1;
  }
  return v5 & 1;
}

uint64_t WTF::roundUpToMultipleOf<1ul>()
{
  return 20;
}

WTF::RefCountedBase **WTF::operator*<unsigned long,unsigned long,WTF::CrashOnOverflow>(WTF::RefCountedBase *a1, WTF::RefCountedBase *this, WTF::RefCountedBase *a3)
{
  uint64_t v9[3] = a1;
  uint64_t v9[2] = this;
  v9[1] = a3;
  WTF::RefCountedBase::applyRefDerefThreadingCheck(this);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a3);
  v9[0] = 0;
  unint64_t v6 = WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::get(this);
  unint64_t v7 = WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::get(a3);
  if ((WTF::safeMultiply<WTF::CrashOnOverflow,unsigned long,unsigned long,unsigned long,void>(v6, v7, v9) ^ 1))WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked(a1); {
  return WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked<unsigned long>((WTF::RefCountedBase **)a1, v9[0]);
  }
}

uint64_t WTF::safeMultiply<WTF::CrashOnOverflow,unsigned long,unsigned long,unsigned long,void>(unint64_t a1, unint64_t a2, void *a3)
{
  return WTF::safeMultiply<unsigned long,unsigned long,unsigned long>(a1, a2, a3) & 1;
}

uint64_t WTF::safeMultiply<unsigned long,unsigned long,unsigned long>(unint64_t a1, unint64_t a2, void *a3)
{
  return WTF::ArithmeticOperations<unsigned long,unsigned long,unsigned long,false,false>::multiply(a1, a2, a3) & 1;
}

uint64_t WTF::ArithmeticOperations<unsigned long,unsigned long,unsigned long,false,false>::multiply(unint64_t a1, unint64_t a2, void *a3)
{
  if (is_mul_ok(a1, a2))
  {
    *a3 = a1 * a2;
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t WTF::StringImpl::StringImpl(uint64_t a1, unsigned int a2)
{
  return a1;
}

uint64_t WTF::StringImpl::StringImpl(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v9 = a1;
  unsigned int v8 = a2;
  int v7 = a3;
  uint64_t v4 = WTF::StringImpl::tailPointer<unsigned char>(a1);
  std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(v6, v4, v8);
  WTF::StringImplShape::StringImplShape(a1, v6[0], v6[1]);
  return a1;
}

uint64_t WTF::StringImplShape::StringImplShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v8 = a1;
  *(_DWORD *)a1 = 2;
  *(_DWORD *)(a1 + 4) = std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v7);
  *(void *)(a1 + 8) = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v7);
  *(_DWORD *)(a1 + 16) = 4;
  uint64_t v4 = (WTF *)std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v7);
  if ((unint64_t)v4 > 0x7FFFFFFF)
  {
    isIntegralOrPointerType = (WTF *)WTF::isIntegralOrPointerType(v4);
    WTF::isIntegralOrPointerType(isIntegralOrPointerType);
    int v20 = 833;
    uint64_t v19 = "/AppleInternal/Library/BuildRoots/7a5643da-a7fb-11ef-987a-36218cb420d5/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/wtf/text/StringImpl.h";
    uint64_t v18 = "WTF::StringImplShape::StringImplShape(unsigned int, std::span<const LChar>, unsigned int)";
    int v17 = 15;
    uint64_t v16 = 833;
    uint64_t v15 = "/AppleInternal/Library/BuildRoots/7a5643da-a7fb-11ef-987a-36218cb420d5/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/wtf/text/StringImpl.h";
    uint64_t v14 = "WTF::StringImplShape::StringImplShape(unsigned int, std::span<const LChar>, unsigned int)";
    uint64_t v13 = 15;
    uint64_t v12 = 833;
    int v11 = "/AppleInternal/Library/BuildRoots/7a5643da-a7fb-11ef-987a-36218cb420d5/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/wtf/text/StringImpl.h";
    int v10 = "WTF::StringImplShape::StringImplShape(unsigned int, std::span<const LChar>, unsigned int)";
    uint64_t v9 = 15;
    __break(0xC471u);
    JUMPOUT(0x1987E79A4);
  }
  return v8;
}

{
  WTF *v4;
  WTF *isIntegralOrPointerType;
  void v7[2];
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  const char *v19;
  int v20;

  v7[0] = a2;
  v7[1] = a3;
  uint64_t v8 = a1;
  *(_DWORD *)a1 = 2;
  *(_DWORD *)(a1 + 4) = std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v7);
  *(void *)(a1 + 8) = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v7);
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v4 = (WTF *)std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v7);
  if ((unint64_t)v4 > 0x7FFFFFFF)
  {
    isIntegralOrPointerType = (WTF *)WTF::isIntegralOrPointerType(v4);
    WTF::isIntegralOrPointerType(isIntegralOrPointerType);
    int v20 = 842;
    uint64_t v19 = "/AppleInternal/Library/BuildRoots/7a5643da-a7fb-11ef-987a-36218cb420d5/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/wtf/text/StringImpl.h";
    uint64_t v18 = "WTF::StringImplShape::StringImplShape(unsigned int, std::span<const UChar>, unsigned int)";
    int v17 = 16;
    uint64_t v16 = 842;
    uint64_t v15 = "/AppleInternal/Library/BuildRoots/7a5643da-a7fb-11ef-987a-36218cb420d5/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/wtf/text/StringImpl.h";
    uint64_t v14 = "WTF::StringImplShape::StringImplShape(unsigned int, std::span<const UChar>, unsigned int)";
    uint64_t v13 = 16;
    uint64_t v12 = 842;
    int v11 = "/AppleInternal/Library/BuildRoots/7a5643da-a7fb-11ef-987a-36218cb420d5/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/wtf/text/StringImpl.h";
    int v10 = "WTF::StringImplShape::StringImplShape(unsigned int, std::span<const UChar>, unsigned int)";
    uint64_t v9 = 16;
    __break(0xC471u);
    JUMPOUT(0x1987E7F2CLL);
  }
  return v8;
}

unsigned char *WTF::StringTypeAdapter<std::span<unsigned char const,18446744073709551615ul>,void>::writeTo<unsigned char>(uint64_t a1, unsigned char *a2)
{
  v6[3] = a1;
  uint64_t v6[2] = a2;
  std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(v6, *(void *)a1, *(unsigned int *)(a1 + 8));
  v7[1] = v6[1];
  v7[0] = v6[0];
  void v6[4] = a2;
  uint64_t v3 = (unsigned char *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v7);
  size_t v4 = std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v7);
  return WTF::copyElements<unsigned char>(a2, v3, v4);
}

unint64_t WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<unsigned char,void>>(unsigned char *a1, unsigned __int8 a2)
{
  unsigned __int8 v3 = a2;
  return WTF::StringTypeAdapter<unsigned char,void>::writeTo<unsigned char>(&v3, a1);
}

unsigned char *WTF::copyElements<unsigned char>(unsigned char *result, unsigned char *a2, size_t a3)
{
  if (a3 == 1)
  {
    *uint64_t result = *a2;
  }
  else if (a3)
  {
    return memcpy(result, a2, a3);
  }
  return result;
}

unint64_t WTF::StringTypeAdapter<unsigned char,void>::writeTo<unsigned char>(unsigned __int8 *a1, unsigned char *a2)
{
  return WTF::writeIntegerToBuffer<unsigned char,unsigned char>(*a1, a2);
}

unint64_t WTF::writeIntegerToBuffer<unsigned char,unsigned char>(unsigned __int8 a1, unsigned char *a2)
{
  return WTF::writeIntegerToBufferImpl<unsigned char,unsigned char,(WTF::PositiveOrNegativeNumber)0>(a1, a2);
}

unint64_t WTF::writeIntegerToBufferImpl<unsigned char,unsigned char,(WTF::PositiveOrNegativeNumber)0>(unsigned __int8 a1, unsigned char *a2)
{
  unsigned __int8 v8 = a1;
  int v7 = a2;
  unint64_t result = std::end[abi:sn180100]<unsigned char,4ul>((uint64_t)v6);
  char v5 = (unsigned char *)result;
  do
  {
    *--char v5 = v8 % 0xAu + 48;
    v8 /= 0xAu;
  }
  while (v8);
  while ((unint64_t)v5 < result)
  {
    unsigned __int8 v3 = v5++;
    LOBYTE(v3) = *v3;
    size_t v4 = v7++;
    *size_t v4 = (_BYTE)v3;
  }
  return result;
}

uint64_t std::end[abi:sn180100]<unsigned char,4ul>(uint64_t a1)
{
  return a1 + 4;
}

uint64_t WTF::StringImpl::maxInternalLength<char16_t>()
{
  uint64_t v2 = 0x7FFFFFFFLL;
  unint64_t v1 = ((unint64_t)std::numeric_limits<unsigned int>::max[abi:sn180100]() - 32) >> 1;
  return *std::min[abi:sn180100]<unsigned long>(&v2, &v1);
}

uint64_t WTF::StringImpl::allocationSize<char16_t>(WTF::RefCountedBase *a1)
{
  int v7 = a1;
  uint64_t v2 = (WTF::RefCountedBase *)WTF::StringImpl::tailOffset<char16_t>();
  WTF::Checked<unsigned long,WTF::CrashOnOverflow>::Checked(&v4, a1);
  WTF::operator*<unsigned long,unsigned long,WTF::CrashOnOverflow>((WTF::RefCountedBase *)v5, (WTF::RefCountedBase *)&v4, (WTF::RefCountedBase *)2);
  WTF::operator+<unsigned long,unsigned long,WTF::CrashOnOverflow>((WTF::RefCountedBase *)v6, v2, (WTF::RefCountedBase *)v5);
  return WTF::HashTableConstIterator<WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::get((WTF::RefCountedBase *)v6);
}

uint64_t WTF::StringImpl::tailPointer<char16_t>(uint64_t a1)
{
  return a1 + WTF::StringImpl::tailOffset<char16_t>();
}

uint64_t WTF::StringImpl::tailOffset<char16_t>()
{
  return WTF::roundUpToMultipleOf<2ul>();
}

uint64_t WTF::roundUpToMultipleOf<2ul>()
{
  return 20;
}

WTF::StringImpl *WTF::StringImpl::StringImpl(WTF::StringImpl *this, unsigned int a2)
{
  return this;
}

{
  uint64_t v3;
  uint64_t v5[2];
  unsigned int v6;
  WTF::StringImpl *v7;

  int v7 = this;
  unint64_t v6 = a2;
  unsigned __int8 v3 = WTF::StringImpl::tailPointer<char16_t>((uint64_t)this);
  std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(v5, v3, v6);
  WTF::StringImplShape::StringImplShape((uint64_t)this, v5[0], v5[1]);
  return this;
}

char *WTF::StringTypeAdapter<std::span<unsigned char const,18446744073709551615ul>,void>::writeTo<char16_t>(uint64_t a1, uint64_t a2)
{
  void v7[3] = a1;
  void v7[2] = a2;
  std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(v7, *(void *)a1, *(unsigned int *)(a1 + 8));
  v8[1] = v7[1];
  v8[0] = v7[0];
  v7[4] = a2;
  unsigned __int8 v3 = (char *)WTF::bitwise_cast<unsigned char const*,char const*>(a2);
  uint64_t v4 = (unsigned __int16 *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v8);
  unint64_t v5 = std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v8);
  return WTF::copyElements(v3, v4, v5);
}

unint64_t WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<unsigned char,void>>(_WORD *a1, unsigned __int8 a2)
{
  unsigned __int8 v3 = a2;
  return WTF::StringTypeAdapter<unsigned char,void>::writeTo<char16_t>(&v3, a1);
}

char *WTF::copyElements(char *this, unsigned __int16 *a2, unint64_t a3)
{
  uint64_t v17 = (uint64_t)this;
  uint64_t v15 = &this[2 * a3];
  if (a3 >= 0x40)
  {
    uint64_t v14 = &this[2 * (a3 & 0x7FFFFFFFFFFFFFC0)];
    char v22 = 0;
    unsigned __int8 v3 = &v22;
    int8x16_t v4 = vld1q_dup_s8(v3);
    v13.val[1] = v4;
    do
    {
      uint64_t v19 = (int8x16_t *)WTF::bitwise_cast<unsigned char const*,char const*>((uint64_t)a2);
      v13.val[0] = v19[3];
      int8x16_t v12 = v19[2];
      int8x16_t v11 = v19[1];
      a2 += 32;
      int8x16_t v21 = *v19;
      unint64_t v5 = (char *)WTF::bitwise_cast<unsigned char const*,char const*>(v17);
      v23.val[0] = v21;
      v23.val[1] = v13.val[1];
      vst2q_s8(v5, v23);
      uint64_t v18 = v17 + 32;
      unint64_t v6 = (char *)WTF::bitwise_cast<unsigned char const*,char const*>(v18);
      v24.val[0] = v11;
      v24.val[1] = v13.val[1];
      vst2q_s8(v6, v24);
      v18 += 32;
      uint64_t v20 = WTF::bitwise_cast<unsigned char const*,char const*>(v18);
      v25.val[0] = v12;
      int v7 = (char *)v20;
      v25.val[1] = v13.val[1];
      vst2q_s8(v7, v25);
      v18 += 32;
      this = (char *)WTF::bitwise_cast<unsigned char const*,char const*>(v18);
      unsigned __int8 v8 = this;
      int8x16x2_t v26 = v13;
      vst2q_s8(v8, v26);
      uint64_t v17 = v18 + 32;
    }
    while ((char *)v17 != v14);
  }
  while ((char *)v17 != v15)
  {
    uint64_t v9 = a2;
    a2 = (unsigned __int16 *)((char *)a2 + 1);
    int v10 = (_WORD *)v17;
    v17 += 2;
    *int v10 = *(unsigned __int8 *)v9;
  }
  return this;
}

unint64_t WTF::StringTypeAdapter<unsigned char,void>::writeTo<char16_t>(unsigned __int8 *a1, _WORD *a2)
{
  return WTF::writeIntegerToBuffer<char16_t,unsigned char>(*a1, a2);
}

unint64_t WTF::writeIntegerToBuffer<char16_t,unsigned char>(unsigned __int8 a1, _WORD *a2)
{
  return WTF::writeIntegerToBufferImpl<char16_t,unsigned char,(WTF::PositiveOrNegativeNumber)0>(a1, a2);
}

unint64_t WTF::writeIntegerToBufferImpl<char16_t,unsigned char,(WTF::PositiveOrNegativeNumber)0>(unsigned __int8 a1, _WORD *a2)
{
  unsigned __int8 v8 = a1;
  int v7 = a2;
  unint64_t result = std::end[abi:sn180100]<unsigned char,4ul>((uint64_t)v6);
  unint64_t v5 = (unsigned __int8 *)result;
  do
  {
    *--unint64_t v5 = v8 % 0xAu + 48;
    v8 /= 0xAu;
  }
  while (v8);
  while ((unint64_t)v5 < result)
  {
    unsigned __int8 v3 = v5++;
    LOWORD(v3) = *v3;
    int8x16_t v4 = v7++;
    *int8x16_t v4 = (_WORD)v3;
  }
  return result;
}

uint64_t WTF::StringTypeAdapter<std::span<unsigned char const,18446744073709551615ul>,void>::StringTypeAdapter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a2;
  v6[1] = a3;
  *(void *)a1 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v6);
  int8x16_t v4 = (WTF *)std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v6);
  WTF::stringLength(v4);
  *(_DWORD *)(a1 + 8) = v4;
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> WTF::stringLength(WTF *this)
{
  if ((unint64_t)this > 0x7FFFFFFF)
  {
    isIntegralOrPointerType = (WTF *)WTF::isIntegralOrPointerType(this);
    WTF::isIntegralOrPointerType(isIntegralOrPointerType);
    __break(0xC471u);
    JUMPOUT(0x1987E8594);
  }
}

unsigned char *WTF::StringTypeAdapter<unsigned char,void>::StringTypeAdapter(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapAuthenticator::getAssertion(void)::$_0>(void *a1, uint64_t *a2)
{
  unsigned __int8 v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B38E0;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B38E0;
  WebKit::CtapAuthenticator::getAssertion(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getAssertion(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, WTF::ASCIILiteral *a2)
{
  return WebKit::CtapAuthenticator::getAssertion(void)::$_0::operator()((uint64_t *)(a1 + 8), a2);
}

uint64_t WebKit::CtapAuthenticator::getAssertion(void)::$_0::operator()(uint64_t *a1, WTF::ASCIILiteral *a2)
{
  uint64_t result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    uint64_t v4 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(v4, a2);
  }
  return result;
}

uint64_t *WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(WTF::ASCIILiteral *a1, unint64_t a2)
{
  uint64_t v3 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a1);
  unsigned __int8 v8 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v3 + 1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  uint64_t v4 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
  unint64_t v5 = (uint64_t *)operator new(8, 0, v4);
  uint64_t result = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(v5, v8);
  ++*((_DWORD *)a1 + 3);
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(WTF::ASCIILiteral *a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1)
    && a3 < WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1))
  {
    uint64_t v5 = (uint64_t)(a3
                 - WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1)) >> 3;
    WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1)
         + 8 * v5;
  }
  else
  {
    WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return a3;
  }
}

uint64_t WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(WTF::ASCIILiteral *a1, uint64_t a2)
{
  v8[1] = a1;
  v8[0] = a2;
  uint64_t v7 = 16;
  unint64_t v9 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)a1);
  uint64_t v6 = v9 + (v9 >> 2) + 1;
  uint64_t v3 = std::max[abi:sn180100]<unsigned long>(&v7, &v6);
  uint64_t v4 = std::max[abi:sn180100]<unsigned long>(v8, v3);
  return WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *v4) & 1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::ASCIILiteral *a1, unint64_t a2)
{
  if (a2 > WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)a1))
  {
    uint64_t v6 = (void *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    uint64_t v5 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
    WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)a1, a2);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
    uint64_t v3 = (void *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::VectorTypeOperations<WTF::UniqueRef<WebKit::AuthenticatorTransportService>>::move(v6, v5, v3);
    WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::deallocateBuffer((uint64_t)a1, (WTF::FastMalloc *)v6);
  }
  return 1;
}

void *std::max[abi:sn180100]<unsigned long>(void *a1, void *a2)
{
  return std::max[abi:sn180100]<unsigned long,std::__less<void,void>>(a1, a2);
}

void *std::max[abi:sn180100]<unsigned long,std::__less<void,void>>(void *a1, void *a2)
{
  if (std::__less<void,void>::operator()[abi:sn180100]<unsigned long,unsigned long>((uint64_t)&v5, a1, a2)) {
    return a2;
  }
  else {
    return a1;
  }
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B3908;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B3908;
  WebKit::CtapAuthenticator::getAssertion(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(uint64_t a1, WTF::ASCIILiteral *a2)
{
  return WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()((uint64_t *)(a1 + 8), a2);
}

uint64_t WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()(uint64_t *a1, WTF::ASCIILiteral *a2)
{
  uint64_t result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    uint64_t v4 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(v4, a2);
  }
  return result;
}

uint64_t WTF::VectorBuffer<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::FastMalloc>::VectorBuffer(uint64_t a1, unint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 12) = a3;
  if (a2) {
    WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
  }
  return a1;
}

uint64_t *WTF::VectorTypeOperations<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>::uninitializedCopy(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return WTF::VectorCopier<false,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>::uninitializedCopy<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(a1, a2, a3);
}

uint64_t *WTF::VectorCopier<false,WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>::uninitializedCopy<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = (uint64_t)result; i != a2; i += 8)
  {
    uint64_t v3 = (uint64_t *)operator new(8, 0, a3);
    uint64_t result = WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>::Ref(v3, i);
    a3 += 8;
  }
  return result;
}

uint64_t *WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>::Ref(uint64_t *a1, uint64_t a2)
{
  return a1;
}

{
  uint64_t v4;

  uint64_t v4 = WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get(a2);
  WTF::RefCountedBase::ref((WTF::RefCountedBase *)(v4 + 8));
  *a1 = v4;
  return a1;
}

void *WTF::Function<void ()(WebCore::AuthenticatorAssertionResponse *)>::Function<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>(void *a1, void *a2)
{
  return a1;
}

{
  void v4[5];

  uint64_t v4[2] = a1;
  v4[1] = a2;
  void v4[4] = v4;
  uint64_t v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>>::reset[abi:sn180100]();
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(void *a1, void *a2)
{
  uint64_t v3 = (void *)WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorAssertionResponse *>::operator new();
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

uint64_t WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorAssertionResponse *>::operator new()
{
  return WTF::fastMalloc((WTF *)0x18);
}

void *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>::CallableWrapper(void *a1, void *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorAssertionResponse *>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B3930;
  WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void *WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorAssertionResponse *>::CallableWrapperBase(void *result)
{
  *uint64_t result = &unk_1EE9B3958;
  return result;
}

void *WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::$_0(void *a1, void *a2)
{
  return a1;
}

{
  *a1 = *a2;
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1 + 1, a2 + 1);
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B3930;
  WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::~$_0((uint64_t)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

unint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>::call(uint64_t a1, uint64_t a2)
{
  return WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()((WTF::RunLoop *)(a1 + 8), a2);
}

void WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorAssertionResponse *>::~CallableWrapperBase()
{
}

{
  __break(1u);
}

unint64_t WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()(WTF::RunLoop *a1, uint64_t a2)
{
  int8x16x2_t v13 = a1;
  uint64_t v12 = a2;
  uint64_t v3 = *(void **)a1;
  isMain = (WTF *)WTF::RunLoop::isMain(a1);
  if ((isMain ^ 1))
  {
    isIntegralOrPointerType = (WTF *)WTF::isIntegralOrPointerType(isMain);
    WTF::isIntegralOrPointerType(isIntegralOrPointerType);
    __break(0xC471u);
    JUMPOUT(0x1987E95F0);
  }
  unint64_t result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!((void *)a1 + 1);
  if ((result & 1) == 0)
  {
    unint64_t v11 = 0;
    uint64_t v10 = v12;
    unint64_t result = _ZNK3WTF6VectorINS_3RefIN7WebCore30AuthenticatorAssertionResponseENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE6findIfIZZN6WebKit17CtapAuthenticator45continueGetNextAssertionAfterResponseReceivedEONS0_IhLm0ES9_Lm16ESA_EEENK3__0clEPS3_EUlRT_E_EEmRKSJ_((uint64_t)(v3 + 118), &v10);
    unint64_t v11 = result;
    if (result != -1)
    {
      uint64_t v7 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator[]((uint64_t)(v3 + 118), v11);
      WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>::copyRef(&v8, v7);
      std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::variant[abi:sn180100]<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0,0,0,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,0ul,0>((uint64_t)v9, &v8);
      WebKit::Authenticator::receiveRespond(v3);
      std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData>::~variant[abi:sn180100]((uint64_t)v9);
      return (unint64_t)WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>::~Ref(&v8);
    }
  }
  return result;
}

uint64_t _ZNK3WTF6VectorINS_3RefIN7WebCore30AuthenticatorAssertionResponseENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE6findIfIZZN6WebKit17CtapAuthenticator45continueGetNextAssertionAfterResponseReceivedEONS0_IhLm0ES9_Lm16ESA_EEENK3__0clEPS3_EUlRT_E_EEmRKSJ_(uint64_t a1, void *a2)
{
  for (unint64_t i = 0; i < WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1); ++i)
  {
    uint64_t v3 = WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::at(a1, i);
    if (_ZZZN6WebKit17CtapAuthenticator45continueGetNextAssertionAfterResponseReceivedEON3WTF6VectorIhLm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEENK3__0clEPN7WebCore30AuthenticatorAssertionResponseEENKUlRT_E_clIKNS1_3RefIS9_NS1_12RawPtrTraitsIS9_EENS1_21DefaultRefDerefTraitsIS9_EEEEEEDaSC_(a2, v3))
    {
      return i;
    }
  }
  return -1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator[](uint64_t a1, unint64_t a2)
{
  return WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::at(a1, a2);
}

void *WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>::copyRef(void *a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>::Ref(a1, *a2);
}

BOOL _ZZZN6WebKit17CtapAuthenticator45continueGetNextAssertionAfterResponseReceivedEON3WTF6VectorIhLm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEENK3__0clEPN7WebCore30AuthenticatorAssertionResponseEENKUlRT_E_clIKNS1_3RefIS9_NS1_12RawPtrTraitsIS9_EENS1_21DefaultRefDerefTraitsIS9_EEEEEEDaSC_(void *a1, uint64_t a2)
{
  return WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get(a2) == *a1;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::at(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = (WTF::CrashOnOverflow *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1);
  if (a2 >= (unint64_t)v4) {
    WTF::CrashOnOverflow::overflowed(v4);
  }
  return std::span<char const,18446744073709551615ul>::data[abi:sn180100](a1) + 8 * a2;
}

void *WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>::Ref(void *a1, uint64_t a2)
{
  return a1;
}

{
  WTF::RefCountedBase::ref((WTF::RefCountedBase *)(a2 + 8));
  *a1 = a2;
  return a1;
}

void std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WebCore::AuthenticatorAssertionResponse *>>::reset[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v3 = *v0;
  std::to_address[abi:sn180100]<char const>();
  void *v1 = 0;
  if (v3)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapperBase<void,WebCore::AuthenticatorAssertionResponse *>>::operator()[abi:sn180100](v2, v3);
  }
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B3980;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B3980;
  WebKit::CtapAuthenticator::getAssertion(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetNextAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(uint64_t a1, WTF::ASCIILiteral *a2)
{
  return WebKit::CtapAuthenticator::continueGetAssertionAfterResponseReceived(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()((uint64_t *)(a1 + 8), a2);
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getRetries(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapAuthenticator::getRetries(void)::$_0>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x18);
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getRetries(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getRetries(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B39A8;
  WebKit::AuthenticatorManager::downgrade(WebKit::Authenticator *,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getRetries(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B39A8;
  WebKit::CtapAuthenticator::getAssertion(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getRetries(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getRetries(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::getRetries(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, WTF::ASCIILiteral *a2)
{
}

void WebKit::CtapAuthenticator::getRetries(void)::$_0::operator()(uint64_t *a1, WTF::ASCIILiteral *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  int8x16x2_t v24 = a1;
  int8x16x2_t v23 = a2;
  uint64_t v3 = (WebKit::FidoAuthenticator *)a1[1];
  if (!WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1))
  {
    os_log_t oslog = (os_log_t)qword_1EB3587D0;
    os_log_type_t v21 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = oslog;
      os_log_type_t v5 = v21;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v19, (uint64_t)v3);
      WTF::String::utf8();
      uint64_t v6 = WTF::CString::data(&v20);
      WebKit::FidoAuthenticator::transportForDebugging(&v17, v3);
      WTF::String::utf8();
      uint64_t v7 = WTF::CString::data(&v18);
      std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v14, v23);
      int v13 = 0;
      WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v13);
      WTF::base64EncodeToString((uint64_t)&v15, v14[0], v14[1]);
      WTF::String::utf8();
      uint64_t v8 = WTF::CString::data(&v16);
      __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)buf, (uint64_t)v3, v6, v7, v8);
      _os_log_impl(&dword_1985F2000, v4, v5, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::getRetries: Response %s", buf, 0x2Au);
      WTF::CString::~CString((WTF::CString *)&v16);
      char v27 = &v15;
      unsigned int v28 = &v15;
      uint64_t v33 = &v15;
      v34[1] = &v15;
      v34[0] = 0;
      int v45 = &v15;
      uint64_t v44 = v34;
      uint64_t v39 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v15);
      if (v39) {
        WTF::StringImpl::deref(v39, v9);
      }
      WTF::CString::~CString((WTF::CString *)&v18);
      int8x16x2_t v26 = &v17;
      unsigned __int8 v29 = &v17;
      uint64_t v32 = &v17;
      v35[1] = &v17;
      v35[0] = 0;
      os_log_type_t v43 = &v17;
      uint64_t v42 = v35;
      uint64_t v38 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v17);
      if (v38) {
        WTF::StringImpl::deref(v38, v10);
      }
      WTF::CString::~CString((WTF::CString *)&v20);
      int8x16x2_t v25 = &v19;
      long long v30 = &v19;
      int v31 = &v19;
      v36[1] = &v19;
      v36[0] = 0;
      uint64_t v41 = &v19;
      uint64_t v40 = v36;
      uint64_t v37 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v19);
      if (v37) {
        WTF::StringImpl::deref(v37, v11);
      }
    }
    uint64_t v12 = (WebKit::FidoAuthenticator *)WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(v12, (uint64_t)v23);
  }
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x20);
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B39D0;
  WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

uint64_t *WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B39D0;
  WebKit::CtapAuthenticator::getAssertion(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

fido::pin::KeyAgreementResponse *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(uint64_t a1, WTF::ASCIILiteral *a2)
{
  return WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()((uint64_t *)(a1 + 8), a2);
}

fido::pin::KeyAgreementResponse *WebKit::CtapAuthenticator::continueGetKeyAgreementAfterGetRetries(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()(uint64_t *a1, WTF::ASCIILiteral *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  int8x16x2_t v25 = a1;
  int8x16x2_t v24 = a2;
  uint64_t v3 = (WebKit::FidoAuthenticator *)a1[1];
  unint64_t result = (fido::pin::KeyAgreementResponse *)WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    os_log_t oslog = (os_log_t)qword_1EB3587D0;
    os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v5 = oslog;
      os_log_type_t v6 = v22;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v20, (uint64_t)v3);
      WTF::String::utf8();
      uint64_t v7 = WTF::CString::data(&v21);
      WebKit::FidoAuthenticator::transportForDebugging(&v18, v3);
      WTF::String::utf8();
      uint64_t v8 = WTF::CString::data(&v19);
      std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v15, v24);
      int v14 = 0;
      WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v14);
      WTF::base64EncodeToString((uint64_t)&v16, v15[0], v15[1]);
      WTF::String::utf8();
      uint64_t v9 = WTF::CString::data(&v17);
      __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)buf, (uint64_t)v3, v7, v8, v9);
      _os_log_impl(&dword_1985F2000, v5, v6, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetKeyAgreementAfterGetRetries: Response %s", buf, 0x2Au);
      WTF::CString::~CString((WTF::CString *)&v17);
      unsigned int v28 = &v16;
      unsigned __int8 v29 = &v16;
      uint64_t v34 = &v16;
      v35[1] = &v16;
      v35[0] = 0;
      uint64_t v46 = &v16;
      int v45 = v35;
      uint64_t v40 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v16);
      if (v40) {
        WTF::StringImpl::deref(v40, v10);
      }
      WTF::CString::~CString((WTF::CString *)&v19);
      char v27 = &v18;
      long long v30 = &v18;
      uint64_t v33 = &v18;
      v36[1] = &v18;
      v36[0] = 0;
      uint64_t v44 = &v18;
      os_log_type_t v43 = v36;
      uint64_t v39 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v18);
      if (v39) {
        WTF::StringImpl::deref(v39, v11);
      }
      WTF::CString::~CString((WTF::CString *)&v21);
      int8x16x2_t v26 = &v20;
      int v31 = &v20;
      uint64_t v32 = &v20;
      v37[1] = &v20;
      v37[0] = 0;
      uint64_t v42 = &v20;
      uint64_t v41 = v37;
      uint64_t v38 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v20);
      if (v38) {
        WTF::StringImpl::deref(v38, v12);
      }
    }
    int v13 = (WebKit::FidoAuthenticator *)WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(v13, (uint64_t)v24, a1[2]);
  }
  return result;
}

void *WTF::Function<void ()(WTF::String const&)>::Function<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  uint64_t v4[2] = a1;
  v4[1] = a2;
  void v4[4] = v4;
  uint64_t v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x20);
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::String const&>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B39F8;
  WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0::$_0(a1 + 1, a2);
  return a1;
}

uint64_t *WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  a1[1] = a2[1];
  fido::pin::KeyAgreementResponse::KeyAgreementResponse();
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B39F8;
  WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0,void,WTF::String const&>::call(uint64_t a1, fido::pin *a2)
{
}

void WebKit::CtapAuthenticator::continueRequestPinAfterGetKeyAgreement(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,unsigned long long)::$_0::operator()(WTF::RunLoop *a1, fido::pin *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  os_log_type_t v22 = a1;
  os_log_type_t v21 = a2;
  uint64_t v3 = (WebKit::FidoAuthenticator *)*((void *)a1 + 1);
  isMain = (WTF *)WTF::RunLoop::isMain(a1);
  if ((isMain ^ 1))
  {
    isIntegralOrPointerType = (WTF *)WTF::isIntegralOrPointerType(isMain);
    WTF::isIntegralOrPointerType(isIntegralOrPointerType);
    __break(0xC471u);
    JUMPOUT(0x1987EAB84);
  }
  if (!WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1))
  {
    os_log_t oslog = (os_log_t)qword_1EB3587D0;
    os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v6 = oslog;
      os_log_type_t v7 = v19;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v17, (uint64_t)v3);
      WTF::String::utf8();
      uint64_t v8 = WTF::CString::data(&v18);
      WebKit::FidoAuthenticator::transportForDebugging(&v15, v3);
      WTF::String::utf8();
      uint64_t v9 = WTF::CString::data(&v16);
      __os_log_helper_16_2_3_8_0_8_32_8_32((uint64_t)buf, (uint64_t)v3, v8, v9);
      _os_log_impl(&dword_1985F2000, v6, v7, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueRequestPinAfterGetKeyAgreement: Got pin from observer.", buf, 0x20u);
      WTF::CString::~CString((WTF::CString *)&v16);
      int8x16x2_t v24 = &v15;
      int8x16x2_t v25 = &v15;
      unsigned int v28 = &v15;
      v29[1] = &v15;
      v29[0] = 0;
      os_log_type_t v36 = &v15;
      uint64_t v35 = v29;
      uint64_t v32 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v15);
      if (v32) {
        WTF::StringImpl::deref(v32, v10);
      }
      WTF::CString::~CString((WTF::CString *)&v18);
      int8x16x2_t v23 = &v17;
      int8x16x2_t v26 = &v17;
      char v27 = &v17;
      v30[1] = &v17;
      v30[0] = 0;
      uint64_t v34 = &v17;
      uint64_t v33 = v30;
      int v31 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v17);
      if (v31) {
        WTF::StringImpl::deref(v31, v11);
      }
    }
    uint64_t v12 = (WebKit::FidoAuthenticator *)WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->((uint64_t *)a1);
    int v13 = v21;
    uint64_t v14 = WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)a1 + 16);
    WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(v12, v13, v14);
  }
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x48);
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B3A20;
  WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

uint64_t *WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  a1[1] = a2[1];
  fido::pin::TokenRequest::TokenRequest(a1 + 2, a2 + 2);
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B3A20;
  WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

fido::pin::TokenResponse *WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, WTF::ASCIILiteral *a2)
{
  return WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0::operator()((uint64_t *)(a1 + 8), a2);
}

fido::pin::TokenResponse *WebKit::CtapAuthenticator::continueGetPinTokenAfterRequestPin(WTF::String const&,WebCore::CryptoKeyEC const&)::$_0::operator()(uint64_t *a1, WTF::ASCIILiteral *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  int8x16x2_t v25 = a1;
  int8x16x2_t v24 = a2;
  uint64_t v3 = (WebKit::FidoAuthenticator *)a1[1];
  unint64_t result = (fido::pin::TokenResponse *)WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    os_log_t oslog = (os_log_t)qword_1EB3587D0;
    os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)qword_1EB3587D0, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v5 = oslog;
      os_log_type_t v6 = v22;
      WebKit::CtapAuthenticator::aaguidForDebugging((WebKit::CtapAuthenticator *)&v20, (uint64_t)v3);
      WTF::String::utf8();
      uint64_t v7 = WTF::CString::data(&v21);
      WebKit::FidoAuthenticator::transportForDebugging(&v18, v3);
      WTF::String::utf8();
      uint64_t v8 = WTF::CString::data(&v19);
      std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v15, v24);
      int v14 = 0;
      WTF::OptionSet<WTF::Base64EncodeOption>::OptionSet(&v14);
      WTF::base64EncodeToString((uint64_t)&v16, v15[0], v15[1]);
      WTF::String::utf8();
      uint64_t v9 = WTF::CString::data(&v17);
      __os_log_helper_16_2_4_8_0_8_32_8_32_8_32((uint64_t)buf, (uint64_t)v3, v7, v8, v9);
      _os_log_impl(&dword_1985F2000, v5, v6, "%p [aaguid=%s, transport=%s] - CtapAuthenticator::continueGetPinTokenAfterRequestPin: Response %s", buf, 0x2Au);
      WTF::CString::~CString((WTF::CString *)&v17);
      unsigned int v28 = &v16;
      unsigned __int8 v29 = &v16;
      uint64_t v34 = &v16;
      v35[1] = &v16;
      v35[0] = 0;
      uint64_t v46 = &v16;
      int v45 = v35;
      uint64_t v40 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v16);
      if (v40) {
        WTF::StringImpl::deref(v40, v10);
      }
      WTF::CString::~CString((WTF::CString *)&v19);
      char v27 = &v18;
      long long v30 = &v18;
      uint64_t v33 = &v18;
      v36[1] = &v18;
      v36[0] = 0;
      uint64_t v44 = &v18;
      os_log_type_t v43 = v36;
      uint64_t v39 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v18);
      if (v39) {
        WTF::StringImpl::deref(v39, v11);
      }
      WTF::CString::~CString((WTF::CString *)&v21);
      int8x16x2_t v26 = &v20;
      int v31 = &v20;
      uint64_t v32 = &v20;
      v37[1] = &v20;
      v37[0] = 0;
      uint64_t v42 = &v20;
      uint64_t v41 = v37;
      uint64_t v38 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v20);
      if (v38) {
        WTF::StringImpl::deref(v38, v12);
      }
    }
    uint64_t v13 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(v13, (uint64_t)v24, (fido::pin::TokenRequest *)(a1 + 2));
  }
  return result;
}

WTF::ASCIILiteral *std::invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(WebKit::CtapAuthenticator **a1)
{
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(a1);
}

WTF::ASCIILiteral *std::invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(uint64_t a1)
{
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(a1);
}

WTF::ASCIILiteral *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(WebKit::CtapAuthenticator **a1)
{
  return WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0::operator()(a1);
}

WTF::ASCIILiteral *WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0::operator()(WebKit::CtapAuthenticator **a1)
{
  return WebKit::CtapAuthenticator::makeCredential(*a1);
}

WTF::ASCIILiteral *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_0,WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,fido::pin::TokenRequest const)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(uint64_t a1)
{
  return WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_1::operator()((WebKit::CtapAuthenticator **)(a1 + 8));
}

WTF::ASCIILiteral *WebKit::CtapAuthenticator::continueRequestAfterGetPinToken(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,fido::pin::TokenRequest const&)::$_1::operator()(WebKit::CtapAuthenticator **a1)
{
  return WebKit::CtapAuthenticator::getAssertion(*a1);
}

uint64_t std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::find<fido::ProtocolVersion>(uint64_t a1, _DWORD *a2)
{
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  uint64_t v4 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__root[abi:sn180100]();
  std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__end_node[abi:sn180100]();
  uint64_t v14 = std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__lower_bound<fido::ProtocolVersion>(a1, a2, v4, v5);
  uint64_t v13 = std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::end[abi:sn180100]();
  BOOL v6 = std::operator!=[abi:sn180100](&v14, &v13);
  BOOL v7 = 0;
  if (v6)
  {
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::size[abi:sn180100]();
    uint64_t v9 = v8;
    uint64_t v10 = v15;
    unint64_t v11 = (_DWORD *)std::__tree_const_iterator<fido::ProtocolVersion,std::__tree_node<fido::ProtocolVersion,void *> *,long>::operator*[abi:sn180100]((uint64_t)&v14);
    BOOL v7 = !std::less<fido::ProtocolVersion>::operator()[abi:sn180100](v9, v10, v11);
  }
  if (v7) {
    return v14;
  }
  else {
    return std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::end[abi:sn180100]();
  }
}

uint64_t std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__lower_bound<fido::ProtocolVersion>(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  while (a3)
  {
    std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::size[abi:sn180100]();
    if (std::less<fido::ProtocolVersion>::operator()[abi:sn180100](v4, (_DWORD *)(a3 + 28), a2))
    {
      a3 = *(void *)(a3 + 8);
    }
    else
    {
      a4 = a3;
      a3 = *(void *)a3;
    }
  }
  std::__tree_const_iterator<fido::ProtocolVersion,std::__tree_node<fido::ProtocolVersion,void *> *,long>::__tree_const_iterator[abi:sn180100](&v9, a4);
  return v9;
}

BOOL std::operator!=[abi:sn180100](void *a1, void *a2)
{
  return !std::operator==[abi:sn180100](a1, a2);
}

uint64_t std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::end[abi:sn180100]()
{
  std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__end_node[abi:sn180100]();
  std::__tree_const_iterator<fido::ProtocolVersion,std::__tree_node<fido::ProtocolVersion,void *> *,long>::__tree_const_iterator[abi:sn180100](&v2, v0);
  return v2;
}

BOOL std::less<fido::ProtocolVersion>::operator()[abi:sn180100](uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 < *a3;
}

uint64_t std::__tree_const_iterator<fido::ProtocolVersion,std::__tree_node<fido::ProtocolVersion,void *> *,long>::operator*[abi:sn180100](uint64_t a1)
{
  return std::span<char const,18446744073709551615ul>::data[abi:sn180100](a1) + 28;
}

void *std::__tree_const_iterator<fido::ProtocolVersion,std::__tree_node<fido::ProtocolVersion,void *> *,long>::__tree_const_iterator[abi:sn180100](void *a1, uint64_t a2)
{
  return a1;
}

void *std::__tree_const_iterator<fido::ProtocolVersion,std::__tree_node<fido::ProtocolVersion,void *> *,long>::__tree_const_iterator[abi:sn180100](void *result, uint64_t a2)
{
  *unint64_t result = a2;
  return result;
}

uint64_t std::invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(unsigned char **a1, fido *a2)
{
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(a1, a2);
}

uint64_t std::invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(uint64_t a1, fido *a2)
{
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(a1, a2);
}

uint64_t std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(unsigned char **a1, fido *a2)
{
  return WebKit::CtapAuthenticator::tryDowngrade(void)::$_0::operator()(a1, a2);
}

uint64_t WebKit::CtapAuthenticator::tryDowngrade(void)::$_0::operator()(unsigned char **a1, fido *a2)
{
  uint64_t result = fido::isConvertibleToU2fRegisterCommand(a2, (const PublicKeyCredentialCreationOptions *)a2);
  **a1 = result & 1;
  return result;
}

uint64_t std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::CtapAuthenticator::tryDowngrade(void)::$_0,WebKit::CtapAuthenticator::tryDowngrade(void)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(uint64_t a1, fido *a2)
{
  return WebKit::CtapAuthenticator::tryDowngrade(void)::$_1::operator()((unsigned char **)(a1 + 8), a2);
}

uint64_t WebKit::CtapAuthenticator::tryDowngrade(void)::$_1::operator()(unsigned char **a1, fido *a2)
{
  uint64_t result = fido::isConvertibleToU2fSignCommand(a2, (const PublicKeyCredentialRequestOptions *)a2);
  **a1 = result & 1;
  return result;
}

uint64_t std::initializer_list<WebCore::AuthenticatorTransport>::end[abi:sn180100](void *a1)
{
  return *a1 + a1[1];
}

uint64_t WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveInitialCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF::FastMalloc *a2)
{
  if (a2) {
    char v3 = WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2) & 1;
  }
  else {
    char v3 = 1;
  }
  return v3 & 1;
}

void WebKit::CtapCcidDriver::transact(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 24);
    WebKit::CcidConnection::transact(v4, a2, a3);
  }
  else
  {
    int v16 = 4224;
    uint64_t v5 = (WTF *)*a2;
    uint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v19 = v6;
    uint64_t v17 = 0x10000;
    uint64_t v18 = v5;
    uint64_t v7 = *a3;
    *a3 = 0;
    uint64_t v8 = *(void *)(a1 + 24);
    apdu::ApduCommand::getEncodedCommand((uint64_t *)&v14, (apdu::ApduCommand *)&v16);
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v9 = &unk_1EE9B3A78;
    v9[1] = v7;
    uint64_t v9[2] = a1;
    uint64_t v13 = v9;
    WebKit::CcidConnection::transact(v8, (uint64_t *)&v14, (uint64_t *)&v13);
    if (v13) {
      (*(void (**)(void *))(*v13 + 8))(v13);
    }
    unint64_t v11 = v14;
    if (v14)
    {
      uint64_t v14 = 0;
      int v15 = 0;
      WTF::fastFree(v11, v10);
    }
    uint64_t v12 = v18;
    if (v18)
    {
      uint64_t v18 = 0;
      LODWORD(v19) = 0;
      WTF::fastFree(v12, v10);
    }
  }
}

uint64_t WebKit::CtapCcidDriver::respondAsync(WTF::RunLoop *a1, uint64_t *a2)
{
  WTF::RunLoop::main(a1);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v7 = &unk_1EE9B3AA0;
  v7[1] = v4;
  void v7[2] = v5;
  void v7[3] = v6;
  uint64_t v9 = v7;
  WTF::RunLoop::dispatch();
  uint64_t result = (uint64_t)v9;
  if (v9) {
    return (*(uint64_t (**)(void *))(*v9 + 8))(v9);
  }
  return result;
}

void WebKit::CtapCcidDriver::~CtapCcidDriver(WebKit::CtapCcidDriver *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B3A48;
  char v3 = (WebKit::CcidConnection *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::CcidConnection>::deref(v3);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WebKit::CcidConnection *v3;
  void *v4;
  uint64_t vars8;

  *(void ++*(_DWORD *)this = &unk_1EE9B3A48;
  char v3 = (WebKit::CcidConnection *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::CcidConnection>::deref(v3);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);

  WTF::fastFree(this, v4);
}

WebKit::CcidConnection *WTF::RefCounted<WebKit::CcidConnection>::deref(WebKit::CcidConnection *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::CcidConnection::~CcidConnection(result);
    return (WebKit::CcidConnection *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::CtapCcidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9B3A78;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapCcidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void ++*(_DWORD *)this = &unk_1EE9B3A78;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::CtapCcidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(uint64_t a1)
{
  unint64_t v1 = (WTF::RunLoop *)(a1 + 8);
  apdu::ApduResponse::createFromMessage();
  if (!v10) {
    goto LABEL_6;
  }
  if (v9 != 36864)
  {
    if (v9 == 27904)
    {
      char v4 = 1;
      WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v5, &v4, (WTF *)1);
      WebKit::CtapCcidDriver::respondAsync(v1, (uint64_t *)&v5);
      uint64_t result = v5;
      if (!v5) {
        goto LABEL_9;
      }
      uint64_t v5 = 0;
      LODWORD(v6) = 0;
LABEL_7:
      uint64_t result = (WTF *)WTF::fastFree(result, v2);
      goto LABEL_9;
    }
LABEL_6:
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    WebKit::CtapCcidDriver::respondAsync(v1, (uint64_t *)&v5);
    uint64_t result = v5;
    if (!v5) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  uint64_t result = (WTF *)WebKit::CtapCcidDriver::respondAsync(v1, (uint64_t *)&v7);
LABEL_9:
  if (v10)
  {
    uint64_t result = v7;
    if (v7)
    {
      uint64_t v7 = 0;
      int v8 = 0;
      return (WTF *)WTF::fastFree(result, v2);
    }
  }
  return result;
}

uint64_t *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, char *a2, WTF *this)
{
  uint64_t v3 = result;
  *uint64_t result = 0;
  result[1] = 0;
  if (!this) {
    return v3;
  }
  char v4 = this;
  if (!((unint64_t)this >> 32))
  {
    uint64_t v6 = WTF::fastMalloc(this);
    *((_DWORD *)v3 + 2) = v4;
    *uint64_t v3 = v6;
    unsigned int v7 = *((_DWORD *)v3 + 3);
    do
    {
      char v8 = *a2++;
      *(unsigned char *)(*v3 + v7) = v8;
      unsigned int v7 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v7;
      char v4 = (WTF *)((char *)v4 - 1);
    }
    while (v4);
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapCcidDriver::respondAsync(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9B3AA0;
  uint64_t v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapCcidDriver::respondAsync(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void ++*(_DWORD *)this = &unk_1EE9B3AA0;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapCcidDriver::respondAsync(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), a1 + 16);
}

uint64_t WebKit::CtapHidDriverWorker::CtapHidDriverWorker(uint64_t a1, uint64_t a2)
{
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::AuthenticatorTransportServiceObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::CanMakeWeakPtrBase((void *)a1);
  WTF::Function<void ()(WTF::String const&)>::Function((void *)(a1 + 8), a2);
  *(unsigned char *)(a1 + 16) = 0;
  std::optional<fido::FidoHidMessage>::optional[abi:sn180100]((unsigned char *)(a1 + 24));
  std::optional<fido::FidoHidMessage>::optional[abi:sn180100]((unsigned char *)(a1 + 80));
  WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::Function((void *)(a1 + 136));
  uint64_t v3 = *(void *)WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
  (*(void (**)(void))(v3 + 16))();
  return a1;
}

{
  WebKit::CtapHidDriverWorker::CtapHidDriverWorker(a1, a2);
  return a1;
}

unsigned char *std::optional<fido::FidoHidMessage>::optional[abi:sn180100](unsigned char *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<fido::FidoHidMessage,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

void *WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::Function(void *a1)
{
  return a1;
}

{
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1);
  return a1;
}

void WebKit::CtapHidDriverWorker::~CtapHidDriverWorker(WebKit::CtapHidDriverWorker *this)
{
  uint64_t v2 = *(void *)WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
  (*(void (**)(void))(v2 + 24))();
  WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::~Function((uint64_t)this + 136);
  std::optional<fido::FidoHidMessage>::~optional((WebKit::CtapHidDriverWorker *)((char *)this + 80));
  std::optional<fido::FidoHidMessage>::~optional((WebKit::CtapHidDriverWorker *)((char *)this + 24));
  WTF::UniqueRef<WebKit::HidConnection>::~UniqueRef((uint64_t)this + 8);
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase((uint64_t *)this);
}

{
  WebKit::CtapHidDriverWorker::~CtapHidDriverWorker(this);
}

uint64_t WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::~Function(uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>,std::default_delete<std::optional<fido::FidoHidMessage> &&>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

fido::FidoHidMessage *std::optional<fido::FidoHidMessage>::~optional(fido::FidoHidMessage *a1)
{
  return a1;
}

{
  std::__optional_move_assign_base<fido::FidoHidMessage,false>::~__optional_move_assign_base(a1);
  return a1;
}

uint64_t WTF::UniqueRef<WebKit::HidConnection>::~UniqueRef(uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WebKit::HidConnection>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

uint64_t *WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(uint64_t *a1)
{
  return a1;
}

WTF::ASCIILiteral *WebKit::CtapHidDriverWorker::transact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v12 = a2;
  void v11[2] = a3;
  *(unsigned char *)(a1 + 16) = 1;
  std::optional<fido::FidoHidMessage>::operator=[abi:sn180100]<fido::FidoHidMessage,void>(a1 + 24, v12);
  std::__optional_destruct_base<fido::FidoHidMessage,false>::reset[abi:sn180100]((fido::FidoHidMessage *)(a1 + 80));
  WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::operator=(a1 + 136);
  uint64_t v4 = (WebKit::HidConnection *)WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
  WebKit::HidConnection::invalidateCache(v4);
  uint64_t v5 = WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
  std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100](a1 + 24);
  fido::FidoHidMessage::popNextPacket(v11, v6);
  WTF::WeakPtr<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v9, a1);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v8);
  WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void>(&v10, (uint64_t *)&v9);
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v5 + 40))(v5, v11, &v10);
  WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v10);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v8);
  WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0::~$_0((uint64_t *)&v9);
  return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v11);
}

void std::optional<fido::FidoHidMessage>::operator=[abi:sn180100]<fido::FidoHidMessage,void>(uint64_t a1, uint64_t a2)
{
  if (std::__optional_storage_base<fido::pin::TokenRequest,false>::has_value[abi:sn180100](a1))
  {
    std::__to_address[abi:sn180100]<char const>();
    fido::FidoHidMessage::operator=(v3, a2);
  }
  else
  {
    std::__optional_storage_base<fido::FidoHidMessage,false>::__construct[abi:sn180100]<fido::FidoHidMessage>(a1, a2);
  }
}

void std::__optional_destruct_base<fido::FidoHidMessage,false>::reset[abi:sn180100](fido::FidoHidMessage *a1)
{
  if (*((unsigned char *)a1 + 48))
  {
    fido::FidoHidMessage::~FidoHidMessage(a1);
    *((unsigned char *)a1 + 48) = 0;
  }
}

void WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::operator=(uint64_t a1)
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>,std::default_delete<std::optional<fido::FidoHidMessage> &&>>::operator=[abi:sn180100](a1);
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>,std::default_delete<std::optional<fido::FidoHidMessage> &&>>::operator=[abi:sn180100](a1);
}

void WebKit::HidConnection::invalidateCache(WebKit::HidConnection *this)
{
}

atomic_uint **WTF::WeakPtr<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(atomic_uint **a1, uint64_t a2)
{
  return a1;
}

{
  atomic_uint *v5;

  uint64_t v5 = (atomic_uint *)WTF::WeakPtr<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::implForObject<WebKit::CtapHidDriverWorker>(a2);
  if (v5) {
    WTF::ThreadSafeRefCountedBase::ref(v5);
  }
  *a1 = v5;
  return a1;
}

void *WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Function<void ()(WebKit::HidConnection::DataSent)>::Function<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  return a1;
}

{
  char v3;
  WTF::ThreadLikeAssertion *v4;

  uint64_t v4 = a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::operator=();
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(a1);
  WTF::Function<void ()(WebKit::HidConnection::DataSent)>::~Function((uint64_t)a1);
  return a1;
}

uint64_t *WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0::~$_0(uint64_t *a1)
{
  return a1;
}

{
  WTF::WeakPtr<WebKit::CtapAuthenticator,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

uint64_t *WebKit::CtapHidDriverWorker::write(uint64_t *result, unsigned __int8 a2)
{
  uint64_t v14 = result;
  unsigned __int8 v13 = a2;
  uint64_t v2 = result;
  if (*((unsigned char *)result + 16) == 1)
  {
    if (v13 << 31 >> 31 == -1)
    {
      std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)(result + 3));
      if (fido::FidoHidMessage::numPackets(v3))
      {
        uint64_t v5 = WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
        std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)(v2 + 3));
        fido::FidoHidMessage::popNextPacket(v10, v6);
        WTF::WeakPtr<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v8, (uint64_t)v2);
        WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v7);
        WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void>(&v9, (uint64_t *)&v8);
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v5 + 40))(v5, v10, &v9);
        WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v9);
        WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v7);
        WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0::~$_0((uint64_t *)&v8);
        return (uint64_t *)WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v10);
      }
      else
      {
        *((unsigned char *)v2 + 16) = 2;
        uint64_t v4 = (WebKit::HidConnection *)WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
        WTF::WeakPtr<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v11, (uint64_t)v2);
        WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapHidDriverWorker::write(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function::HidConnection::DataSent)::$_0,void>(&v12, (uint64_t *)&v11);
        WebKit::HidConnection::registerDataReceivedCallback(v4);
        WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~Function((uint64_t)&v12);
        return WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0::~$_0((uint64_t *)&v11);
      }
    }
    else
    {
      std::optional<fido::FidoHidMessage>::operator=[abi:sn180100]((fido::FidoHidMessage *)(result + 10));
      return (uint64_t *)WebKit::CtapHidDriverWorker::returnMessage((WebKit::CtapHidDriverWorker *)v2);
    }
  }
  return result;
}

void std::optional<fido::FidoHidMessage>::operator=[abi:sn180100](fido::FidoHidMessage *a1)
{
}

uint64_t WebKit::CtapHidDriverWorker::returnMessage(WebKit::CtapHidDriverWorker *this)
{
  v4[1] = this;
  WTF::Function<void ()(WTF::String const&)>::Function(v4, (uint64_t)this + 136);
  std::optional<fido::FidoHidMessage>::optional[abi:sn180100](v3, (uint64_t)this + 80);
  WebKit::CtapHidDriverWorker::reset(this);
  WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::operator()();
  std::optional<fido::FidoHidMessage>::~optional((fido::FidoHidMessage *)v3);
  return WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::~Function((uint64_t)v4);
}

void *WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function<WebKit::CtapHidDriverWorker::write(WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::Function::HidConnection::DataSent)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  void v4[2] = a1;
  v4[1] = a2;
  void v4[4] = v4;
  uint64_t v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapAuthenticator::makeCredential(void)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

void *WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)>::CompletionHandler<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Function<void ()(WebKit::HidConnection::DataSent)>::Function<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

void WebKit::CtapHidDriverWorker::read(unsigned char *a1, uint64_t a2)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  if (a1[16] == 2)
  {
    if (std::optional<fido::pin::TokenRequest>::operator BOOL[abi:sn180100]((uint64_t)(a1 + 80)))
    {
      std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)(a1 + 80));
      if ((fido::FidoHidMessage::addContinuationPacket() & 1) == 0)
      {
        std::optional<fido::FidoHidMessage>::operator=[abi:sn180100]((fido::FidoHidMessage *)(a1 + 80));
        WebKit::CtapHidDriverWorker::returnMessage((WebKit::CtapHidDriverWorker *)a1);
        return;
      }
    }
    else
    {
      fido::FidoHidMessage::createFromSerializedData();
      std::optional<fido::FidoHidMessage>::operator=[abi:sn180100]((fido::FidoHidMessage *)(a1 + 80), (uint64_t)v8);
      std::optional<fido::FidoHidMessage>::~optional((fido::FidoHidMessage *)v8);
      if ((std::optional<fido::pin::TokenRequest>::operator BOOL[abi:sn180100]((uint64_t)(a1 + 80)) & 1) == 0
        || (std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)(a1 + 80)),
            int v4 = fido::FidoHidMessage::channelId(v3),
            std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)(a1 + 24)),
            v4 != fido::FidoHidMessage::channelId(v5)))
      {
LABEL_11:
        std::__optional_destruct_base<fido::FidoHidMessage,false>::reset[abi:sn180100]((fido::FidoHidMessage *)(a1 + 80));
        return;
      }
    }
    std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)(a1 + 80));
    if ((fido::FidoHidMessage::messageComplete(v6) & 1) == 0) {
      return;
    }
    std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)(a1 + 80));
    if ((char)fido::FidoHidMessage::cmd(v7) == 59) {
      goto LABEL_11;
    }
    WebKit::CtapHidDriverWorker::returnMessage((WebKit::CtapHidDriverWorker *)a1);
  }
}

void std::optional<fido::FidoHidMessage>::operator=[abi:sn180100](fido::FidoHidMessage *a1, uint64_t a2)
{
  std::__optional_move_assign_base<fido::FidoHidMessage,false>::operator=[abi:sn180100](a1, a2);
}

uint64_t fido::FidoHidMessage::channelId(fido::FidoHidMessage *this)
{
  return *(unsigned int *)this;
}

uint64_t fido::FidoHidMessage::cmd(fido::FidoHidMessage *this)
{
  return *((unsigned __int8 *)this + 4);
}

unsigned char *std::optional<fido::FidoHidMessage>::optional[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

{
  std::__optional_move_assign_base<fido::FidoHidMessage,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

void WebKit::CtapHidDriverWorker::reset(WebKit::CtapHidDriverWorker *this)
{
  uint64_t v2 = (WebKit::HidConnection *)WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
  WebKit::HidConnection::unregisterDataReceivedCallback(v2);
  WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::operator=((uint64_t)this + 136);
  std::optional<fido::FidoHidMessage>::operator=[abi:sn180100]((WebKit::CtapHidDriverWorker *)((char *)this + 80));
  std::optional<fido::FidoHidMessage>::operator=[abi:sn180100]((WebKit::CtapHidDriverWorker *)((char *)this + 24));
  *((unsigned char *)this + 16) = 0;
}

uint64_t WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::operator()()
{
  uint64_t v0 = *(void *)std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
  return (*(uint64_t (**)(void))(v0 + 16))();
}

WTF::ASCIILiteral *WebKit::CtapHidDriverWorker::cancel(WebKit::CtapHidDriverWorker *a1, fido::FidoHidMessage *a2)
{
  char v7 = a1;
  uint64_t v6 = a2;
  WebKit::CtapHidDriverWorker::reset(a1);
  uint64_t v2 = (WebKit::HidConnection *)WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
  WebKit::HidConnection::invalidateCache(v2);
  uint64_t v3 = WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
  fido::FidoHidMessage::popNextPacket(v5, v6);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 32))(v3, v5);
  return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v5);
}

uint64_t WebKit::CtapHidDriver::CtapHidDriver(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EE9B3AC8;
  WTF::makeUniqueRef<WebKit::CtapHidDriverWorker,WTF::UniqueRef<WebKit::HidConnection>>((WebKit::CtapHidDriverWorker *)(a1 + 24), a2);
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = -1;
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 40);
  WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::Function((void *)(a1 + 56));
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((WTF::ASCIILiteral *)(a1 + 64));
  return a1;
}

{
  WebKit::CtapHidDriver::CtapHidDriver(a1, a2);
  return a1;
}

uint64_t WebKit::CtapDriver::CtapDriver(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B3AF8;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 0;
  return a1;
}

void *WTF::makeUniqueRef<WebKit::CtapHidDriverWorker,WTF::UniqueRef<WebKit::HidConnection>>(WebKit::CtapHidDriverWorker *a1, uint64_t a2)
{
  return WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::CtapHidDriverWorker,WTF::UniqueRef<WebKit::HidConnection>>(a1, a2);
}

WTF::ASCIILiteral *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(WTF::ASCIILiteral *a1)
{
  return a1;
}

fido::FidoHidMessage *WebKit::CtapHidDriver::transact(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v16 = a1;
  int v15 = a2;
  uint64_t v14 = a3;
  *(unsigned char *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = -1;
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)(a1 + 40), v15);
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator=(a1 + 56);
  unint64_t v13 = 2;
  for (unint64_t i = 0; i < v13; ++i)
  {
    int v11 = WTF::weakRandomNumber<unsigned int>();
    *(_DWORD *)(WTF::ASCIILiteral::characters((WTF::ASCIILiteral *)(a1 + 64)) + 4 * i) = v11;
  }
  fido::FidoHidMessage::create();
  uint64_t v4 = WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
  std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)v10);
  uint64_t v6 = v5;
  WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v8, a1);
  WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::Function<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0,void>(&v9, (uint64_t *)&v8);
  WebKit::CtapHidDriverWorker::transact(v4, v6, (uint64_t)&v9);
  WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::~Function((uint64_t)&v9);
  WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0::~$_0((uint64_t *)&v8);
  return std::optional<fido::FidoHidMessage>::~optional((fido::FidoHidMessage *)v10);
}

uint64_t WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator=(uint64_t a1)
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::operator=[abi:sn180100](a1);
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::operator=[abi:sn180100](a1);
  return a1;
}

void *WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::Function<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  void v4[2] = a1;
  v4[1] = a2;
  void v4[4] = v4;
  uint64_t v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

WTF::ASCIILiteral *WebKit::CtapHidDriver::continueAfterChannelAllocated(WTF::ASCIILiteral *result, uint64_t a2)
{
  int8x16x2_t v25 = result;
  uint64_t v24 = a2;
  uint64_t v2 = (uint64_t)result;
  if (*((unsigned char *)result + 32) == 1)
  {
    if (std::optional<fido::pin::TokenRequest>::operator BOOL[abi:sn180100](v24))
    {
      std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100](v24);
      fido::FidoHidMessage::getMessagePayload(v22, v3);
      uint64_t v4 = (const void *)WTF::ASCIILiteral::characters((WTF::ASCIILiteral *)v22);
      uint64_t v5 = (const void *)WTF::ASCIILiteral::characters((WTF::ASCIILiteral *)(v2 + 64));
      size_t v6 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(v2 + 64);
      char v7 = (WTF::RunLoop *)memcmp(v4, v5, v6);
      if (v7)
      {
        *(unsigned char *)(v2 + 32) = 0;
        WTF::RunLoop::main(v7);
        WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v18, v2);
        WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v19, (uint64_t *)(v2 + 40));
        WTF::Function<void ()(WTF::String const&)>::Function(&v20, v2 + 56);
        WTF::Function<void ()(void)>::Function<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>(&v21, (uint64_t *)&v18);
        WTF::RunLoop::dispatch();
        WTF::Function<void ()(void)>::~Function((uint64_t)&v21);
        WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0::~$_0((uint64_t *)&v18);
        int v17 = 1;
      }
      else
      {
        *(unsigned char *)(v2 + 32) = 2;
        unint64_t v16 = 9;
        *(_DWORD *)(v2 + 36) = *(unsigned __int8 *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator[]((uint64_t)v22, 8uLL) << 24;
        unint64_t v8 = v16++;
        *(_DWORD *)(v2 + 36) |= *(unsigned __int8 *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator[]((uint64_t)v22, v8) << 16;
        unint64_t v9 = v16++;
        *(_DWORD *)(v2 + 36) |= *(unsigned __int8 *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator[]((uint64_t)v22, v9) << 8;
        *(_DWORD *)(v2 + 36) |= *(unsigned __int8 *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator[]((uint64_t)v22, v16);
        WebKit::CtapDriver::protocol((WebKit::CtapDriver *)v2);
        fido::FidoHidMessage::create();
        uint64_t v10 = WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
        std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)v15);
        uint64_t v12 = v11;
        WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v13, v2);
        WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::Function<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &)::$_1,void>(&v14, (uint64_t *)&v13);
        WebKit::CtapHidDriverWorker::transact(v10, v12, (uint64_t)&v14);
        WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::~Function((uint64_t)&v14);
        WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0::~$_0((uint64_t *)&v13);
        std::optional<fido::FidoHidMessage>::~optional((fido::FidoHidMessage *)v15);
        int v17 = 0;
      }
      return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v22);
    }
    else
    {
      WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v23);
      WebKit::CtapHidDriver::returnResponse((WebKit::CtapHidDriver *)v2, (uint64_t)v23);
      return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v23);
    }
  }
  return result;
}

uint64_t WebKit::CtapHidDriver::returnResponse(WebKit::CtapHidDriver *a1, uint64_t a2)
{
  void v4[2] = a1;
  v4[1] = a2;
  WTF::Function<void ()(WTF::String const&)>::Function(v4, (uint64_t)a1 + 56);
  WebKit::CtapHidDriver::reset(a1);
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()();
  return WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~Function((uint64_t)v4);
}

void *WTF::Function<void ()(void)>::Function<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  void v4[2] = a1;
  v4[1] = a2;
  void v4[4] = v4;
  void v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>,std::optional<fido::FidoHidMessage> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t *WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0::~$_0(uint64_t *a1)
{
  return a1;
}

{
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~Function((uint64_t)(a1 + 3));
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(a1 + 1));
  WTF::WeakPtr<WebKit::CtapAuthenticator,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

unint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator[](uint64_t a1, unint64_t a2)
{
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::at(a1, a2);
}

uint64_t WebKit::CtapDriver::protocol(WebKit::CtapDriver *this)
{
  return *((unsigned int *)this + 4);
}

void *WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>::Function<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &)::$_1,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  void v4[2] = a1;
  v4[1] = a2;
  void v4[4] = v4;
  void v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1,void,std::optional<fido::FidoHidMessage> &>,std::optional<fido::FidoHidMessage> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

WTF::ASCIILiteral *WebKit::CtapHidDriver::continueAfterResponseReceived(WTF::ASCIILiteral *result, uint64_t a2)
{
  size_t v6 = result;
  uint64_t v5 = a2;
  uint64_t v2 = result;
  if (*((unsigned char *)result + 32) == 2)
  {
    if (std::optional<fido::pin::TokenRequest>::operator BOOL[abi:sn180100](v5))
    {
      std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100](v5);
      fido::FidoHidMessage::getMessagePayload(v4, v3);
    }
    else
    {
      WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v4);
    }
    WebKit::CtapHidDriver::returnResponse(v2, (uint64_t)v4);
    return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v4);
  }
  return result;
}

uint64_t WebKit::CtapHidDriver::reset(WebKit::CtapHidDriver *this)
{
  uint64_t result = WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator=((uint64_t)this + 56);
  *((_DWORD *)this + 9) = -1;
  *((unsigned char *)this + 32) = 0;
  return result;
}

uint64_t WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()()
{
  uint64_t v0 = *(void *)std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unsigned char *WebKit::CtapHidDriver::cancel(unsigned char *this)
{
  size_t v6 = this;
  unint64_t v1 = (WebKit::CtapHidDriver *)this;
  if (this[32])
  {
    this = (unsigned char *)WebKit::CtapDriver::protocol((WebKit::CtapDriver *)this);
    if (!this)
    {
      if (*((unsigned char *)v1 + 32) == 2)
      {
        WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v4);
        fido::FidoHidMessage::create();
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v4);
        uint64_t v2 = (WebKit::CtapHidDriverWorker *)WTF::UniqueRef<WebKit::AuthenticatorTransportService>::operator->();
        std::optional<fido::pin::TokenRequest>::operator*[abi:sn180100]((uint64_t)v5);
        WebKit::CtapHidDriverWorker::cancel(v2, v3);
        std::optional<fido::FidoHidMessage>::~optional((fido::FidoHidMessage *)v5);
      }
      return (unsigned char *)WebKit::CtapHidDriver::reset(v1);
    }
  }
  return this;
}

void WebKit::CtapHidDriver::~CtapHidDriver(unsigned int **this)
{
}

{
  void *v2;

  WebKit::CtapHidDriver::~CtapHidDriver(this);
  WTF::FastMalloc::free((WTF::FastMalloc *)this, v2);
}

{
  void *v2;

  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(this + 8));
  WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~Function((uint64_t)(this + 7));
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(this + 5));
  WTF::UniqueRef<WebKit::CtapHidDriverWorker>::~UniqueRef((uint64_t)(this + 3));
  WebKit::CtapDriver::~CtapDriver(this, v2);
}

unsigned char *std::__optional_move_assign_base<fido::FidoHidMessage,false>::__optional_move_assign_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<fido::FidoHidMessage,false>::__optional_copy_assign_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_move_base<fido::FidoHidMessage,false>::__optional_move_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_copy_base<fido::FidoHidMessage,false>::__optional_copy_base[abi:sn180100](unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_storage_base<fido::FidoHidMessage,false>::__optional_storage_base(unsigned char *a1)
{
  return a1;
}

unsigned char *std::__optional_destruct_base<fido::FidoHidMessage,false>::__optional_destruct_base[abi:sn180100](unsigned char *result)
{
  *uint64_t result = 0;
  result[48] = 0;
  return result;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>,std::default_delete<std::optional<fido::FidoHidMessage> &&>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>,std::default_delete<std::optional<fido::FidoHidMessage> &&>>::reset[abi:sn180100](a1, 0);
  return a1;
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>,std::default_delete<std::optional<fido::FidoHidMessage> &&>>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v5 = *v2;
  std::to_address[abi:sn180100]<char const>();
  *uint64_t v3 = a2;
  if (v5)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>>::operator()[abi:sn180100](v4, v5);
  }
}

uint64_t std::default_delete<WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a2);
  }
  return result;
}

fido::FidoHidMessage *std::__optional_move_assign_base<fido::FidoHidMessage,false>::~__optional_move_assign_base(fido::FidoHidMessage *a1)
{
  return a1;
}

fido::FidoHidMessage *std::__optional_copy_assign_base<fido::FidoHidMessage,false>::~__optional_copy_assign_base(fido::FidoHidMessage *a1)
{
  return a1;
}

fido::FidoHidMessage *std::__optional_move_base<fido::FidoHidMessage,false>::~__optional_move_base(fido::FidoHidMessage *a1)
{
  return a1;
}

fido::FidoHidMessage *std::__optional_copy_base<fido::FidoHidMessage,false>::~__optional_copy_base(fido::FidoHidMessage *a1)
{
  return a1;
}

fido::FidoHidMessage *std::__optional_storage_base<fido::FidoHidMessage,false>::~__optional_storage_base(fido::FidoHidMessage *a1)
{
  return a1;
}

fido::FidoHidMessage *std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100](fido::FidoHidMessage *a1)
{
  if (*((unsigned char *)a1 + 48)) {
    fido::FidoHidMessage::~FidoHidMessage(a1);
  }
  return a1;
}

void fido::FidoHidMessage::~FidoHidMessage(fido::FidoHidMessage *this)
{
}

{
  WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::~Deque((fido::FidoHidMessage *)((char *)this + 8));
}

WTF::RefCountedBase *WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::~Deque(WTF::RefCountedBase *a1)
{
  return a1;
}

{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::destroyAll(a1);
  WTF::VectorBuffer<std::unique_ptr<fido::FidoHidPacket>,0ul,WTF::FastMalloc>::~VectorBuffer((uint64_t)a1 + 16);
  return a1;
}

uint64_t WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::destroyAll(void *a1)
{
  if (*a1 > a1[1])
  {
    uint64_t v5 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2));
    uint64_t v6 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2));
    WTF::VectorTypeOperations<std::unique_ptr<fido::FidoHidPacket>>::destruct(v5, v6 + 8 * a1[1]);
    uint64_t v7 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2)) + 8 * *a1;
    uint64_t v8 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2));
    uint64_t v9 = WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)(a1 + 2));
    return WTF::VectorTypeOperations<std::unique_ptr<fido::FidoHidPacket>>::destruct(v7, v8 + 8 * v9);
  }
  else
  {
    uint64_t v2 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2)) + 8 * *a1;
    uint64_t v3 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2));
    return WTF::VectorTypeOperations<std::unique_ptr<fido::FidoHidPacket>>::destruct(v2, v3 + 8 * a1[1]);
  }
}

uint64_t WTF::VectorBuffer<std::unique_ptr<fido::FidoHidPacket>,0ul,WTF::FastMalloc>::~VectorBuffer(uint64_t a1)
{
  return a1;
}

uint64_t WTF::VectorTypeOperations<std::unique_ptr<fido::FidoHidPacket>>::destruct(uint64_t a1, uint64_t a2)
{
  return WTF::VectorDestructor<true,std::unique_ptr<fido::FidoHidPacket>>::destruct(a1, a2);
}

uint64_t WTF::VectorDestructor<true,std::unique_ptr<fido::FidoHidPacket>>::destruct(uint64_t result, uint64_t a2)
{
  for (uint64_t i = result; i != a2; i += 8)
    uint64_t result = std::unique_ptr<fido::FidoHidPacket>::~unique_ptr[abi:sn180100](i);
  return result;
}

uint64_t std::unique_ptr<fido::FidoHidPacket>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<fido::FidoHidPacket>::reset[abi:sn180100]();
  return a1;
}

void std::unique_ptr<fido::FidoHidPacket>::reset[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v3 = *v0;
  std::to_address[abi:sn180100]<char const>();
  void *v1 = 0;
  if (v3)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<fido::FidoHidPacket>::operator()[abi:sn180100](v2, v3);
  }
}

uint64_t std::default_delete<fido::FidoHidPacket>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a2);
  }
  return result;
}

uint64_t std::unique_ptr<WebKit::HidConnection>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WebKit::HidConnection>::reset[abi:sn180100](a1, 0);
  return a1;
}

void std::unique_ptr<WebKit::HidConnection>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v5 = *v2;
  std::to_address[abi:sn180100]<char const>();
  *uint64_t v3 = a2;
  if (v5)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WebKit::HidConnection>::operator()[abi:sn180100](v4, v5);
  }
}

uint64_t std::default_delete<WebKit::HidConnection>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a2);
  }
  return result;
}

uint64_t *WTF::WeakPtrFactory<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(uint64_t *a1)
{
  return a1;
}

{
  void v4[2];
  WTF::ThreadSafeRefCountedBase *v5;
  void *v6;
  uint64_t *v7;

  if (WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(a1)) {
    WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::clear(*a1);
  }
  v4[1] = a1;
  v4[0] = 0;
  uint64_t v7 = a1;
  uint64_t v6 = v4;
  uint64_t v5 = (WTF::ThreadSafeRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v5) {
    WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(v5);
  }
  return a1;
}

void fido::FidoHidMessage::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::operator=((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
}

uint64_t std::__optional_storage_base<fido::FidoHidMessage,false>::__construct[abi:sn180100]<fido::FidoHidMessage>(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__construct_at[abi:sn180100]<fido::FidoHidMessage,fido::FidoHidMessage,fido::FidoHidMessage*>(a1, a2);
  *(unsigned char *)(a1 + 48) = 1;
  return result;
}

void WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::operator=(uint64_t *a1, uint64_t *a2)
{
}

void WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::swap(uint64_t *a1, uint64_t *a2)
{
}

int *WTF::VectorBuffer<std::unique_ptr<fido::FidoHidPacket>,0ul,WTF::FastMalloc>::swap(uint64_t a1, uint64_t a2)
{
  return std::swap[abi:sn180100]<unsigned int>((int *)(a1 + 8), (int *)(a2 + 8));
}

int *std::swap[abi:sn180100]<unsigned int>(int *result, int *a2)
{
  int v2 = *result;
  *uint64_t result = *a2;
  *a2 = v2;
  return result;
}

uint64_t std::__construct_at[abi:sn180100]<fido::FidoHidMessage,fido::FidoHidMessage,fido::FidoHidMessage*>(uint64_t a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<fido::FidoHidMessage,fido::FidoHidMessage,fido::FidoHidMessage*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<fido::FidoHidMessage,fido::FidoHidMessage,fido::FidoHidMessage*>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    __break(1u);
  }
  fido::FidoHidMessage::FidoHidMessage(a1, a2);
  return a1;
}

uint64_t fido::FidoHidMessage::FidoHidMessage(uint64_t a1, uint64_t a2)
{
  return a1;
}

{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::Deque((WTF::RefCountedBase *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

WTF::RefCountedBase *WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::Deque(WTF::RefCountedBase *a1, uint64_t *a2)
{
  return a1;
}

WTF::RefCountedBase *WTF::Deque<std::unique_ptr<fido::FidoHidPacket>,0ul>::Deque(WTF::RefCountedBase *a1)
{
  return a1;
}

{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a1 + 16);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  return a1;
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>,std::default_delete<std::optional<fido::FidoHidMessage> &&>>::operator=[abi:sn180100](uint64_t a1)
{
  uint64_t v2 = std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::release[abi:sn180100]();
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>,std::default_delete<std::optional<fido::FidoHidMessage> &&>>::reset[abi:sn180100](a1, v2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::get_deleter[abi:sn180100]();
  std::to_address[abi:sn180100]<char const>();
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>,std::default_delete<std::optional<fido::FidoHidMessage> &&>>::reset[abi:sn180100](a1, 0);
}

void WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::clear(WTF::RefCountedBase *a1)
{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::destroyAll(a1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v2 = (WTF::FastMalloc *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)a1 + 16);
  WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::deallocateBuffer((uint64_t)a1 + 16, v2);
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
}

WTF::ASCIILiteral *WTF::Deque<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>::destroyAll(void *a1)
{
  if (*a1 > a1[1])
  {
    uint64_t v5 = (WTF::ASCIILiteral *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2));
    uint64_t v6 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2));
    WTF::VectorTypeOperations<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(v5, (WTF::ASCIILiteral *)(v6 + 16 * a1[1]));
    uint64_t v7 = (WTF::ASCIILiteral *)(std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2))
                             + 16 * *a1);
    uint64_t v8 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2));
    uint64_t v9 = WTF::VectorBufferBase<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,WTF::FastMalloc>::capacity((uint64_t)(a1 + 2));
    return WTF::VectorTypeOperations<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(v7, (WTF::ASCIILiteral *)(v8 + 16 * v9));
  }
  else
  {
    uint64_t v2 = (WTF::ASCIILiteral *)(std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2))
                             + 16 * *a1);
    uint64_t v3 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)(a1 + 2));
    return WTF::VectorTypeOperations<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(v2, (WTF::ASCIILiteral *)(v3 + 16 * a1[1]));
  }
}

WTF::ASCIILiteral *WTF::VectorTypeOperations<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(WTF::ASCIILiteral *a1, WTF::ASCIILiteral *a2)
{
  return WTF::VectorDestructor<true,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(a1, a2);
}

WTF::ASCIILiteral *WTF::VectorDestructor<true,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(WTF::ASCIILiteral *result, WTF::ASCIILiteral *a2)
{
  for (uint64_t i = result; i != a2; uint64_t i = (WTF::ASCIILiteral *)((char *)i + 16))
    uint64_t result = WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(i);
  return result;
}

void std::__optional_move_assign_base<fido::FidoHidMessage,false>::operator=[abi:sn180100](fido::FidoHidMessage *a1, uint64_t a2)
{
}

void std::__optional_storage_base<fido::FidoHidMessage,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<fido::FidoHidMessage,false>>(fido::FidoHidMessage *a1, uint64_t a2)
{
  int v3 = *((unsigned char *)a1 + 48) & 1;
  if (v3 == (std::__optional_storage_base<fido::pin::TokenRequest,false>::has_value[abi:sn180100](a2) & 1))
  {
    if (*((unsigned char *)a1 + 48))
    {
      std::__to_address[abi:sn180100]<char const>();
      fido::FidoHidMessage::operator=((uint64_t)a1, v4);
    }
  }
  else if (*((unsigned char *)a1 + 48))
  {
    std::__optional_destruct_base<fido::FidoHidMessage,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<fido::FidoHidMessage,false>::__construct[abi:sn180100]<fido::FidoHidMessage>((uint64_t)a1, v5);
  }
}

unsigned char *std::__optional_move_assign_base<fido::FidoHidMessage,false>::__optional_move_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

unsigned char *std::__optional_copy_assign_base<fido::FidoHidMessage,false>::__optional_copy_assign_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

unsigned char *std::__optional_move_base<fido::FidoHidMessage,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  return a1;
}

uint64_t std::__optional_storage_base<fido::FidoHidMessage,false>::__construct_from[abi:sn180100]<std::__optional_move_base<fido::FidoHidMessage,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__optional_storage_base<fido::pin::TokenRequest,false>::has_value[abi:sn180100](a2);
  if (result)
  {
    std::__to_address[abi:sn180100]<char const>();
    return std::__optional_storage_base<fido::FidoHidMessage,false>::__construct[abi:sn180100]<fido::FidoHidMessage>(a1, v4);
  }
  return result;
}

void WebKit::CtapDriver::~CtapDriver(WebKit::CtapDriver *this)
{
}

{
  __break(1u);
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::operator=[abi:sn180100](uint64_t a1)
{
  uint64_t v2 = std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::release[abi:sn180100]();
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::reset[abi:sn180100](a1, v2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>,std::default_delete<std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&>>::get_deleter[abi:sn180100]();
  std::to_address[abi:sn180100]<char const>();
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::reset[abi:sn180100](a1, 0);
  return a1;
}

uint64_t WTF::UniqueRef<WebKit::CtapHidDriverWorker>::~UniqueRef(uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WebKit::CtapHidDriverWorker>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

void WebKit::CtapDriver::~CtapDriver(unsigned int **this, void *a2)
{
}

uint64_t std::unique_ptr<WebKit::CtapHidDriverWorker>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WebKit::CtapHidDriverWorker>::reset[abi:sn180100](a1, 0);
  return a1;
}

void std::unique_ptr<WebKit::CtapHidDriverWorker>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v5 = *v2;
  std::to_address[abi:sn180100]<char const>();
  *int v3 = a2;
  if (v5)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WebKit::CtapHidDriverWorker>::operator()[abi:sn180100](v4, v5);
  }
}

uint64_t std::default_delete<WebKit::CtapHidDriverWorker>::operator()[abi:sn180100](uint64_t a1, WebKit::CtapHidDriverWorker *a2)
{
  if (a2)
  {
    WebKit::CtapHidDriverWorker::~CtapHidDriverWorker(a2);
    return WTF::FastMalloc::free(a2, v3);
  }
  return result;
}

unsigned int **WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebKit::CtapDriver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)0>::~CanMakeWeakPtrBase(unsigned int **a1, void *a2)
{
  return a1;
}

unsigned int **WTF::WeakPtrFactory<WebKit::CtapDriver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(unsigned int **a1, void *a2)
{
  return a1;
}

uint64_t WTF::WeakPtr<WebKit::CtapHidDriverWorker,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::implForObject<WebKit::CtapHidDriverWorker>(uint64_t a1)
{
  std::__to_address[abi:sn180100]<char const>();
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v1, a1);
  std::__to_address[abi:sn180100]<char const>();
  return WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::impl(v2);
}

void *WTF::Function<void ()(WebKit::HidConnection::DataSent)>::Function<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  uint64_t v4[2] = a1;
  v4[1] = a2;
  void v4[4] = v4;
  void v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>,std::default_delete<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>,std::default_delete<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>,std::default_delete<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0>>::reset[abi:sn180100]();
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)>>(void *a1, uint64_t *a2)
{
  int v3 = (void *)WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>::operator new();
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

uint64_t WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>::operator new()
{
  return WTF::fastMalloc((WTF *)0x10);
}

void *WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B3B28;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void *WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>::CallableWrapperBase(void *result)
{
  *uint64_t result = &unk_1EE9B3B50;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B3B28;
  WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>::call(uint64_t a1, char a2)
{
  return WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0::operator()((uint64_t *)(a1 + 8), a2 & 1);
}

void WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>::~CallableWrapperBase()
{
}

{
  __break(1u);
}

uint64_t *WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0::operator()(uint64_t *a1, char a2)
{
  uint64_t result = (uint64_t *)WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    uint64_t v4 = (uint64_t *)WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::CtapHidDriverWorker::write(v4, a2 & 1);
  }
  return result;
}

void std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>,std::default_delete<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0>>::reset[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v3 = *v0;
  std::to_address[abi:sn180100]<char const>();
  void *v1 = 0;
  if (v3)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>>::operator()[abi:sn180100](v2, v3);
  }
}

uint64_t std::default_delete<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a2);
  }
  return result;
}

uint64_t WTF::Function<void ()(WebKit::HidConnection::DataSent)>::~Function(uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>>::reset[abi:sn180100](a1, 0);
  return a1;
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>>::reset[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v5 = *v2;
  std::to_address[abi:sn180100]<char const>();
  *uint64_t v3 = a2;
  if (v5)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>>::operator()[abi:sn180100](v4, v5);
  }
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B3B78;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B3B78;
  WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0,void,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t a2)
{
}

void WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  if (!WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1))
  {
    uint64_t v3 = (unsigned char *)WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    WebKit::CtapHidDriverWorker::read(v3, a2);
  }
}

void *WTF::Function<void ()(WebKit::HidConnection::DataSent)>::Function<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void>(void *a1, uint64_t *a2)
{
  return a1;
}

{
  void v4[5];

  uint64_t v4[2] = a1;
  v4[1] = a2;
  void v4[4] = v4;
  void v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void,WebKit::HidConnection::DataSent>,WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0,void,WebKit::HidConnection::DataSent>,std::default_delete<WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void,WebKit::HidConnection::DataSent>,WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>::operator new();
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void,WebKit::HidConnection::DataSent>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void,WebKit::HidConnection::DataSent>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B3BA0;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void,WebKit::HidConnection::DataSent>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B3BA0;
  WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void,WebKit::HidConnection::DataSent>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void,WebKit::HidConnection::DataSent>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::CtapHidDriverWorker::write(WebKit::HidConnection::DataSent)::$_1,void,WebKit::HidConnection::DataSent>::call(uint64_t a1, char a2)
{
  return WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0::operator()((uint64_t *)(a1 + 8), a2 & 1);
}

void *WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::CtapHidDriverWorker,WTF::UniqueRef<WebKit::HidConnection>>(WebKit::CtapHidDriverWorker *a1, uint64_t a2)
{
  uint64_t v3 = WebKit::CtapHidDriverWorker::operator new(a1);
  WebKit::CtapHidDriverWorker::CtapHidDriverWorker(v3, a2);
  return WTF::UniqueRef<WebKit::CtapHidDriverWorker>::UniqueRef(a1, v3);
}

uint64_t WebKit::CtapHidDriverWorker::operator new(WebKit::CtapHidDriverWorker *this)
{
  return WTF::fastMalloc((WTF *)0x90);
}

void *WTF::UniqueRef<WebKit::CtapHidDriverWorker>::UniqueRef(void *a1, uint64_t a2)
{
  return a1;
}

{
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, a2);
  return a1;
}

WTF::ASCIILiteral *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(WTF::ASCIILiteral *a1, WTF::FastMalloc *a2)
{
  if (WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1))
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<unsigned char>::destruct();
  }
  return a1;
}

uint64_t std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  return a1;
}

{
  std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>>::reset[abi:sn180100]();
  return a1;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>::operator new();
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B3BC8;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void *WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>::CallableWrapperBase(void *result)
{
  *uint64_t result = &unk_1EE9B3BF0;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B3BC8;
  WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

WTF::ASCIILiteral *WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>::call(uint64_t a1, uint64_t a2)
{
  return WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()((uint64_t *)(a1 + 8), a2);
}

void WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>::~CallableWrapperBase()
{
}

{
  __break(1u);
}

WTF::ASCIILiteral *WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t result = (WTF::ASCIILiteral *)WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    uint64_t v4 = (WTF::ASCIILiteral *)WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::CtapHidDriver::continueAfterChannelAllocated(v4, a2);
  }
  return result;
}

void std::unique_ptr<WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::transact(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Function<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,std::optional<fido::FidoHidMessage> &&>>::reset[abi:sn180100]()
{
  std::to_address[abi:sn180100]<char const>();
  uint64_t v3 = *v0;
  std::to_address[abi:sn180100]<char const>();
  void *v1 = 0;
  if (v3)
  {
    std::to_address[abi:sn180100]<char const>();
    std::default_delete<WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>>::operator()[abi:sn180100](v2, v3);
  }
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>,std::optional<fido::FidoHidMessage> &&>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x28);
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B3C18;
  WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

uint64_t *WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 1), a2 + 1);
  WTF::Function<void ()(WTF::String const&)>::Function(a1 + 3, (uint64_t)(a2 + 3));
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B3C18;
  WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

fido::FidoHidMessage *WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0::operator()((uint64_t *)(a1 + 8));
}

fido::FidoHidMessage *WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_0::operator()(uint64_t *a1)
{
  uint64_t result = (fido::FidoHidMessage *)WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    uint64_t v3 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::CtapHidDriver::transact(v3, a1 + 1, (uint64_t)(a1 + 3));
  }
  return result;
}

unint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::at(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = (WTF::CrashOnOverflow *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1);
  if (a2 >= (unint64_t)v4) {
    WTF::CrashOnOverflow::overflowed(v4);
  }
  return std::span<char const,18446744073709551615ul>::data[abi:sn180100](a1) + a2;
}

void *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1,void,std::optional<fido::FidoHidMessage> &>,std::optional<fido::FidoHidMessage> &&>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)WTF::Detail::CallableWrapperBase<void,WebKit::HidConnection::DataSent>::operator new();
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1,void,std::optional<fido::FidoHidMessage> &>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void *WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1,void,std::optional<fido::FidoHidMessage> &>::CallableWrapper(void *a1, uint64_t *a2)
{
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,std::optional<fido::FidoHidMessage> &&>::CallableWrapperBase(a1);
  *a1 = &unk_1EE9B3C40;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1,void,std::optional<fido::FidoHidMessage> &>::~CallableWrapper(void *a1)
{
  return a1;
}

{
  *a1 = &unk_1EE9B3C40;
  WebKit::CtapHidDriverWorker::transact(fido::FidoHidMessage &&,WTF::Function<void ()(std::optional<fido::FidoHidMessage> &&)> &&)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1,void,std::optional<fido::FidoHidMessage> &>::~CallableWrapper(WTF::FastMalloc *a1)
{
  WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1,void,std::optional<fido::FidoHidMessage> &>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

WTF::ASCIILiteral *WTF::Detail::CallableWrapper<WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1,void,std::optional<fido::FidoHidMessage> &>::call(uint64_t a1, uint64_t a2)
{
  return WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1::operator()((uint64_t *)(a1 + 8), a2);
}

WTF::ASCIILiteral *WebKit::CtapHidDriver::continueAfterChannelAllocated(std::optional<fido::FidoHidMessage> &&)::$_1::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t result = (WTF::ASCIILiteral *)WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    uint64_t v4 = (WTF::ASCIILiteral *)WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::CtapHidDriver::continueAfterResponseReceived(v4, a2);
  }
  return result;
}

uint64_t ___ZN6WebKit23DeviceManagementLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/DeviceManagement.framework/DeviceManagement", 2);
  WebKit::DeviceManagementLibrary(BOOL)::frameworkLibrary = result;
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = result == 0;
  }
  if (v3)
  {
    uint64_t result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initDMFWebsitePolicyMonitor(WebKit *this)
{
  if (qword_1EB358D18 != -1) {
    dispatch_once(&qword_1EB358D18, &__block_literal_global_5);
  }
  return qword_1EB358D20;
}

uint64_t ___ZN6WebKitL27initDMFWebsitePolicyMonitorEv_block_invoke()
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN6WebKit23DeviceManagementLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  char v2 = 0;
  if (_MergedGlobals_46 != -1) {
    dispatch_once(&_MergedGlobals_46, block);
  }
  uint64_t result = (uint64_t)objc_getClass("DMFWebsitePolicyMonitor");
  qword_1EB358D20 = result;
  if (result)
  {
    WebKit::getDMFWebsitePolicyMonitorClass[0] = WebKit::DMFWebsitePolicyMonitorFunction;
  }
  else
  {
    uint64_t result = 34;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::DMFWebsitePolicyMonitorFunction(WebKit *this)
{
  return qword_1EB358D20;
}

void WebKit::DownloadProxy::publishProgress(WebKit::DownloadProxy *this, const WTF::URL *a2)
{
  if (*((void *)this + 5))
  {
    id v4 = objc_alloc(MEMORY[0x1E4F1CB10]);
    WTF::URL::fileSystemPath((uint64_t *)v27, a2);
    if (v27[0]) {
      uint64_t v5 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v5 = &stru_1EEA10550;
    }
    uint64_t v7 = (void *)[v4 initFileURLWithPath:v5 relativeToURL:0];
    uint64_t v8 = v27[0];
    v27[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t v26 = 0;
    uint64_t v9 = (void *)[v7 bookmarkDataWithOptions:512 includingResourceValuesForKeys:0 relativeToURL:0 error:&v26];
    uint64_t v10 = v9;
    if (v9)
    {
      CFRetain(v9);
      uint64_t v11 = WebKit::WebsiteDataStore::networkProcess(*((WebKit::WebsiteDataStore **)this + 5));
      uint64_t v12 = (const void *)[v10 bytes];
      size_t v13 = [v10 length];
    }
    else
    {
      uint64_t v11 = WebKit::WebsiteDataStore::networkProcess(*((WebKit::WebsiteDataStore **)this + 5));
      uint64_t v12 = 0;
      size_t v13 = 0;
    }
    activityAccessToken(&v23);
    uint64_t v14 = v23;
    size_t v15 = v25;
    unint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v16 = 437;
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 66) = (char *)v16 + 16;
    *((void *)v16 + 67) = 512;
    *((void *)v16 + 68) = 0;
    *((void *)v16 + 70) = 0;
    *((void *)v16 + 69) = 0;
    IPC::Encoder::encodeHeader(v16);
    unsigned __int8 v29 = v16;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v16, (uint64_t *)this + 7);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, (uint64_t *)a2);
    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v16, v12, v13);
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v16, 0);
    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v16, v14, v15);
    LOBYTE(v27[0]) = 0;
    char v28 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v11, &v29, 0, (uint64_t)v27, 1);
    if (v28)
    {
      uint64_t v18 = v27[0];
      v27[0] = 0;
      if (v18) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v18 + 8))(v18);
      }
    }
    uint64_t v19 = v29;
    unsigned __int8 v29 = 0;
    if (v19)
    {
      IPC::Encoder::~Encoder(v19, v17);
      WTF::fastFree(v21, v22);
    }
    uint64_t v20 = v23;
    if (v23)
    {
      int8x16x2_t v23 = 0;
      int v24 = 0;
      WTF::fastFree(v20, v17);
    }
    if (v10) {
      CFRelease(v10);
    }
    if (v7) {
      CFRelease(v7);
    }
  }
}

void sub_1987F091C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, char a15, IPC::Encoder *a16)
{
  if (a15 && a13) {
    (*(void (**)(WTF::StringImpl *))(*(void *)a13 + 8))(a13);
  }
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v19, v20);
  }
  if (a10) {
    WTF::fastFree(a10, a2);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v16) {
    CFRelease(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::DownloadProxy::didReceivePlaceholderURL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WebKit::SandboxExtensionImpl **a5)
{
  if (*a5)
  {
    uint64_t v7 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t v7 = 1;
    uint64_t v8 = *a5;
    *a5 = 0;
    *(void *)(v7 + 8) = v8;
    *(void *)(v7 + 16) = 1;
    WebKit::SandboxExtensionImpl::consume(v8);
    WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v7);
  }
  uint64_t v9 = *(uint64_t (**)(void))(**(void **)(a1 + 48) + 80);

  return v9();
}

void sub_1987F0AC0(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebKit::SandboxExtension>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::DownloadProxy::didReceiveFinalURL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WebKit::SandboxExtensionImpl **a5)
{
  if (*a5)
  {
    uint64_t v7 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t v7 = 1;
    uint64_t v8 = *a5;
    *a5 = 0;
    *(void *)(v7 + 8) = v8;
    *(void *)(v7 + 16) = 1;
    WebKit::SandboxExtensionImpl::consume(v8);
    WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v7);
  }
  uint64_t v9 = *(uint64_t (**)(void))(**(void **)(a1 + 48) + 88);

  return v9();
}

void sub_1987F0B8C(_Unwind_Exception *a1)
{
  WTF::RefCounted<WebKit::SandboxExtension>::deref(v1);
  _Unwind_Resume(a1);
}

void WebKit::DownloadProxy::bookmarkDataForURL(WebKit::DownloadProxy *this@<X0>, uint64_t a2@<X8>)
{
  id v5 = objc_alloc(MEMORY[0x1E4F1CB10]);
  WTF::URL::fileSystemPath((uint64_t *)&v14, this);
  if (v14) {
    uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v6 = &stru_1EEA10550;
  }
  uint64_t v8 = (void *)[v5 initFileURLWithPath:v6 relativeToURL:0];
  uint64_t v9 = v14;
  uint64_t v14 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v14 = 0;
  uint64_t v10 = (void *)[v8 bookmarkDataWithOptions:512 includingResourceValuesForKeys:0 relativeToURL:0 error:&v14];
  uint64_t v11 = v10;
  if (v10)
  {
    CFRetain(v10);
    uint64_t v12 = (char *)[v11 bytes];
    size_t v13 = (WTF *)[v11 length];
  }
  else
  {
    uint64_t v12 = 0;
    size_t v13 = 0;
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(a2, v12, v13);
  if (v11) {
    CFRelease(v11);
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1987F0CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void WebKit::DownloadProxy::didReceiveMessage(CFTypeRef *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  CFRetain(this[1]);
  switch(*((_WORD *)a3 + 25))
  {
    case 0xA:
      IPC::Decoder::decode<WebCore::ResourceResponse>(a3, v93);
      if (v111)
      {
        IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v146);
        char v8 = BYTE8(v146);
        if (BYTE8(v146))
        {
          if (!v111) {
            goto LABEL_120;
          }
          std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v114, (uint64_t)v93);
          v129[0] = (WTF::StringImpl *)v146;
          char v8 = 1;
        }
        else
        {
          LOBYTE(v114[0]) = 0;
        }
        LOBYTE(v129[1]) = v8;
      }
      else
      {
        LOBYTE(v114[0]) = 0;
        LOBYTE(v129[1]) = 0;
      }
      std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v93, v6);
      if (LOBYTE(v129[1])
        || (uint64_t v87 = *(void *)a3,
            uint64_t v88 = *((void *)a3 + 1),
            *(void *)a3 = 0,
            *((void *)a3 + 1) = 0,
            (uint64_t v89 = *((void *)a3 + 3)) != 0)
        && v88
        && ((*(void (**)(uint64_t, uint64_t))(*(void *)v89 + 16))(v89, v87), LOBYTE(v129[1])))
      {
        uint64_t v51 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if ((_BYTE)v52)
        {
          *(void *)uint64_t v93 = v51;
          a3 = (IPC::Decoder *)&v93[8];
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v93[8], a2);
          uint64_t v53 = (void *)WTF::fastMalloc((WTF *)0x18);
          *uint64_t v53 = &unk_1EE9B3CB0;
          v53[1] = *(void *)v93;
          uint64_t v54 = *(void *)&v93[8];
          *(void *)&v93[8] = 0;
          uint64_t v53[2] = v54;
          *(void *)&long long v146 = v53;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v93[8]);
          if (!LOBYTE(v129[1])) {
            goto LABEL_120;
          }
          WebKit::DownloadProxy::decideDestinationWithSuggestedFilename((uint64_t)this, (WebCore::ResourceResponseBase *)v114, (uint64_t *)v129, (uint64_t *)&v146);
          uint64_t v55 = v146;
          *(void *)&long long v146 = 0;
          if (v55) {
            (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
          }
        }
        if (LOBYTE(v129[1]))
        {
          os_log_type_t v56 = v129[0];
          v129[0] = 0;
          if (v56)
          {
            if (*(_DWORD *)v56 == 2) {
              WTF::StringImpl::destroy(v56, v52);
            }
            else {
              *(_DWORD *)v56 -= 2;
            }
          }
          CFTypeRef v69 = v127;
          CFTypeRef v127 = 0;
          if (v69) {
            CFRelease(v69);
          }
          WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v114, v52);
        }
      }
      goto LABEL_112;
    case 0xB:
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)v114);
      if (LOBYTE(v114[1]))
      {
        WebKit::DownloadProxy::didCreateDestination((WebKit::DownloadProxy *)this, (const WTF::String *)v114);
        if (LOBYTE(v114[1])) {
          goto LABEL_34;
        }
      }
      goto LABEL_112;
    case 0xC:
      IPC::Decoder::decode<WebCore::ResourceError>(a3, (uint64_t)v93);
      if (!BYTE8(v96)
        || (IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a3, (uint64_t)&v146), !v147))
      {
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v93, v23);
        goto LABEL_63;
      }
      if (!BYTE8(v96)) {
        goto LABEL_120;
      }
      long long v24 = *(_OWORD *)v93;
      *(_OWORD *)uint64_t v93 = 0uLL;
      *(_OWORD *)uint64_t v114 = v24;
      long long v115 = *(_OWORD *)&v93[16];
      long long v116 = *(_OWORD *)&v93[32];
      *(_DWORD *)&v93[16] &= ~1u;
      uint64_t v117 = v94;
      LODWORD(v118) = v95;
      WORD2(v118) = WORD2(v95);
      unsigned int v25 = (const void *)*((void *)&v95 + 1);
      uint64_t v94 = 0;
      *((void *)&v95 + 1) = 0;
      CFTypeRef v119 = v25;
      char v120 = v96;
      *(_OWORD *)uint64_t v121 = v146;
      char v122 = 1;
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v93, v23);
      WebKit::DownloadProxy::didFail((uint64_t)this, (uint64_t)v114, v121[0], v121[1]);
      if (v122)
      {
        CFTypeRef v27 = v119;
        CFTypeRef v119 = 0;
        if (v27) {
          CFRelease(v27);
        }
        char v28 = v117;
        uint64_t v117 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2) {
            WTF::StringImpl::destroy(v28, v26);
          }
          else {
            *(_DWORD *)v28 -= 2;
          }
        }
        uint64_t v71 = v114[1];
        v114[1] = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2) {
            WTF::StringImpl::destroy(v71, v26);
          }
          else {
            *(_DWORD *)v71 -= 2;
          }
        }
LABEL_34:
        uint64_t v34 = v114[0];
        v114[0] = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2) {
            WTF::StringImpl::destroy(v34, v26);
          }
          else {
            *(_DWORD *)v34 -= 2;
          }
        }
      }
      goto LABEL_112;
    case 0xD:
      WebKit::DownloadProxy::didFinish((WebKit::DownloadProxy *)this);
      goto LABEL_112;
    case 0xE:
      IPC::Decoder::decode<WebCore::AuthenticationChallenge>((uint64_t)a3, (uint64_t)v93);
      char v10 = v113;
      if (!v113) {
        goto LABEL_85;
      }
      uint64_t v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if ((_BYTE)v9)
      {
        if (!v113) {
          goto LABEL_120;
        }
        uint64_t v12 = v11;
        WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((uint64_t)v114, (uint64_t)v93);
        long long v13 = v112;
        long long v112 = 0uLL;
        *(_OWORD *)CFTypeRef cf = v13;
        *(void *)&cf[16] = v12;
        char v10 = 1;
      }
      else
      {
        char v10 = 0;
LABEL_85:
        LOBYTE(v114[0]) = 0;
      }
      LOBYTE(v143) = v10;
      std::__optional_destruct_base<WebCore::AuthenticationChallenge,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationChallengeBase *)v93, v9);
      if ((_BYTE)v143
        || (uint64_t v81 = *(void *)a3,
            uint64_t v82 = *((void *)a3 + 1),
            *(void *)a3 = 0,
            *((void *)a3 + 1) = 0,
            (uint64_t v83 = *((void *)a3 + 3)) != 0)
        && v82
        && ((*(void (**)(uint64_t, uint64_t))(*(void *)v83 + 16))(v83, v81), (_BYTE)v143))
      {
        WebKit::DownloadProxy::didReceiveAuthenticationChallenge((uint64_t)this, (uint64_t)v114, *(uint64_t *)&cf[16]);
        if ((_BYTE)v143)
        {
          uint64_t v60 = *(const void **)&cf[8];
          *(void *)&cf[8] = 0;
          if (v60) {
            CFRelease(v60);
          }
          os_log_t v61 = *(const void **)cf;
          *(void *)CFTypeRef cf = 0;
          if (v61) {
            CFRelease(v61);
          }
          WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)v114, v59);
        }
      }
      goto LABEL_112;
    case 0xF:
      unint64_t v7 = *((void *)a3 + 1);
      uint64_t v35 = *(void *)a3;
      unint64_t v36 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v7 < v36 || v7 - v36 <= 7)
      {
        unint64_t v77 = 0;
        uint64_t v78 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v79 = *((void *)a3 + 3);
        if (v79)
        {
          if (v7)
          {
            (*(void (**)(uint64_t))(*(void *)v79 + 16))(v79);
            uint64_t v78 = *(void *)a3;
            unint64_t v77 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v77 = 0;
            uint64_t v78 = 0;
          }
        }
        goto LABEL_129;
      }
      uint64_t v38 = (uint64_t *)(v35 + v36);
      *((void *)a3 + 2) = v38 + 1;
      if (!v35)
      {
        unint64_t v77 = v7;
        uint64_t v78 = 0;
LABEL_129:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v80 = *((void *)a3 + 3);
        if (v80 && v77) {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v80 + 16))(v80, v78, v77);
        }
        goto LABEL_63;
      }
      unint64_t v39 = (((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8) - v35;
      if (v7 < v39 || v7 - v39 <= 7) {
        goto LABEL_121;
      }
      uint64_t v41 = *v38;
      uint64_t v42 = (uint64_t *)(v35 + v39);
      *((void *)a3 + 2) = v42 + 1;
      unint64_t v43 = (((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8) - v35;
      if (v7 < v43 || v7 - v43 <= 7) {
        goto LABEL_121;
      }
      uint64_t v45 = *v42;
      uint64_t v46 = *(void *)(((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8);
      *((void *)a3 + 2) = (((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
      WebKit::DownloadProxy::didReceiveData((WebKit::DownloadProxy *)this, v41, v45, v46);
      goto LABEL_112;
    case 0x10:
      IPC::Decoder::decode<std::tuple<WTF::URL,std::span<unsigned char const,18446744073709551615ul>,WebKit::SandboxExtensionHandle>>((uint64_t)v114, a3);
      if ((_BYTE)v119) {
        WebKit::DownloadProxy::didReceiveFinalURL((uint64_t)this, (uint64_t)v114, *((uint64_t *)&v116 + 1), (uint64_t)v117, &v118);
      }
      goto LABEL_56;
    case 0x11:
      IPC::Decoder::decode<std::tuple<WTF::URL,std::span<unsigned char const,18446744073709551615ul>,WebKit::SandboxExtensionHandle>>((uint64_t)v114, a3);
      if (!(_BYTE)v119) {
        goto LABEL_56;
      }
      uint64_t v29 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!v30) {
        goto LABEL_56;
      }
      *(void *)uint64_t v93 = v29;
      a3 = (IPC::Decoder *)&v93[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v93[8], a2);
      int v31 = (void *)WTF::fastMalloc((WTF *)0x18);
      *int v31 = &unk_1EE9B3CD8;
      v31[1] = *(void *)v93;
      uint64_t v32 = *(void *)&v93[8];
      *(void *)&v93[8] = 0;
      void v31[2] = v32;
      *(void *)&long long v146 = v31;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v93[8]);
      if (!(_BYTE)v119) {
        goto LABEL_120;
      }
      WebKit::DownloadProxy::didReceivePlaceholderURL((uint64_t)this, (uint64_t)v114, *((uint64_t *)&v116 + 1), (uint64_t)v117, &v118);
      uint64_t v33 = v146;
      *(void *)&long long v146 = 0;
      if (v33) {
        (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
      }
LABEL_56:
      std::__optional_destruct_base<std::tuple<WTF::URL,std::span<unsigned char const,18446744073709551615ul>,WebKit::SandboxExtensionHandle>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v114);
      goto LABEL_112;
    case 0x12:
      IPC::Decoder::decode<WebCore::ResourceRequest>(a3, (uint64_t)v93);
      if ((_BYTE)v107)
      {
        IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v146);
        char v47 = BYTE8(v146);
        if (BYTE8(v146))
        {
          if (!(_BYTE)v107) {
            goto LABEL_120;
          }
          std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v114, (uint64_t)v93);
          uint64_t v124 = (WTF::StringImpl *)v146;
          char v47 = 1;
        }
        else
        {
          LOBYTE(v114[0]) = 0;
        }
        LOBYTE(v125) = v47;
      }
      else
      {
        LOBYTE(v114[0]) = 0;
        LOBYTE(v125) = 0;
      }
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v93);
      if (!(_BYTE)v125)
      {
        uint64_t v90 = *(void *)a3;
        uint64_t v91 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v92 = *((void *)a3 + 3);
        if (!v92) {
          goto LABEL_112;
        }
        if (!v91) {
          goto LABEL_112;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v92 + 16))(v92, v90);
        if (!(_BYTE)v125) {
          goto LABEL_112;
        }
      }
      WebKit::DownloadProxy::didStart((WebKit::DownloadProxy *)this, (const WebCore::ResourceRequest *)v114, &v124);
      if (!(_BYTE)v125) {
        goto LABEL_112;
      }
      uint64_t v58 = v124;
      uint64_t v124 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2) {
          WTF::StringImpl::destroy(v58, v57);
        }
        else {
          *(_DWORD *)v58 -= 2;
        }
      }
      goto LABEL_105;
    case 0x13:
      IPC::Decoder::decode<WebCore::ResourceRequest>(a3, (uint64_t)&v146);
      if (v148)
      {
        IPC::Decoder::decode<WebCore::ResourceResponse>(a3, v93);
        char v15 = v111;
        if (v111)
        {
          if (!v148) {
            goto LABEL_120;
          }
          std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v114, (uint64_t)&v146);
          long long v125 = *(_OWORD *)&v93[8];
          long long v126 = *(_OWORD *)&v93[24];
          long long v16 = v95;
          long long v95 = 0u;
          long long v17 = v96;
          long long v96 = 0u;
          uint64_t v18 = *(WTF::StringImpl **)v93;
          *(void *)uint64_t v93 = 0;
          uint64_t v124 = v18;
          *(_DWORD *)&v93[8] &= ~1u;
          uint64_t v19 = *(const void **)&v93[40];
          *(void *)&v93[40] = 0;
          CFTypeRef v127 = v19;
          uint64_t v128 = v94;
          *(_OWORD *)uint64_t v129 = v16;
          long long v130 = v17;
          *(void *)&long long v16 = v97;
          uint64_t v97 = 0;
          uint64_t v131 = v16;
          uint64_t v20 = v98;
          uint64_t v98 = 0;
          uint64_t v132 = v20;
          *(void *)&long long v16 = v99;
          uint64_t v99 = 0;
          uint64_t v133 = v16;
          uint64_t v21 = v100;
          uint64_t v100 = 0;
          uint64_t v134 = v21;
          LOBYTE(v135) = 0;
          char v136 = 0;
          if (v102)
          {
            uint64_t v72 = v101;
            uint64_t v101 = 0;
            uint64_t v135 = v72;
            char v136 = 1;
          }
          *(_DWORD *)&cf[15] = *(_DWORD *)&v108[15];
          long long v141 = v107;
          *(_OWORD *)CFTypeRef cf = *(_OWORD *)v108;
          long long v137 = v103;
          long long v138 = v104;
          long long v139 = v105;
          long long v140 = v106;
          os_log_type_t v22 = v109;
          uint64_t v109 = 0;
          CFTypeRef v143 = v22;
          char v15 = 1;
          char v144 = v110;
        }
        else
        {
          LOBYTE(v114[0]) = 0;
        }
        char v145 = v15;
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v93, v14);
      }
      else
      {
        LOBYTE(v114[0]) = 0;
        char v145 = 0;
      }
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)&v146);
      if (!v145)
      {
        uint64_t v84 = *(void *)a3;
        uint64_t v85 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v86 = *((void *)a3 + 3);
        if (!v86) {
          goto LABEL_112;
        }
        if (!v85) {
          goto LABEL_112;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v86 + 16))(v86, v84);
        if (!v145) {
          goto LABEL_112;
        }
      }
      uint64_t v62 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (!(_BYTE)v63) {
        goto LABEL_100;
      }
      *(void *)uint64_t v93 = v62;
      a3 = (IPC::Decoder *)&v93[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v93[8], a2);
      uint64_t v64 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v64 = &unk_1EE9B3C88;
      v64[1] = *(void *)v93;
      uint64_t v65 = *(void *)&v93[8];
      *(void *)&v93[8] = 0;
      void v64[2] = v65;
      *(void *)&long long v146 = v64;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v93[8]);
      if (!v145)
      {
LABEL_120:
        __break(1u);
LABEL_121:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v73 = *((void *)a3 + 3);
        if (v73)
        {
          if (v7)
          {
            (*(void (**)(uint64_t))(*(void *)v73 + 16))(v73);
            uint64_t v74 = *(void *)a3;
            uint64_t v75 = *((void *)a3 + 1);
            uint64_t v76 = *((void *)a3 + 3);
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            if (v76)
            {
              if (v75) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v76 + 16))(v76, v74);
              }
            }
          }
        }
LABEL_63:
        uint64_t v48 = *(void *)a3;
        uint64_t v49 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v50 = *((void *)a3 + 3);
        if (v50 && v49) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v50 + 16))(v50, v48);
        }
        goto LABEL_112;
      }
      WebKit::DownloadProxy::willSendRequest((uint64_t)this, (uint64_t)v114, (uint64_t)&v124, (uint64_t *)&v146);
      uint64_t v66 = v146;
      *(void *)&long long v146 = 0;
      if (v66) {
        (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
      }
LABEL_100:
      if (v145)
      {
        CFTypeRef v67 = v143;
        CFTypeRef v143 = 0;
        if (v67) {
          CFRelease(v67);
        }
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v124, v63);
LABEL_105:
        CFTypeRef v68 = v123;
        CFTypeRef v123 = 0;
        if (v68) {
          CFRelease(v68);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v114);
      }
LABEL_112:
      CFTypeRef v70 = this[1];
      CFRelease(v70);
      return;
    default:
      goto LABEL_112;
  }
}

void non-virtual thunk to'WebKit::DownloadProxy::didReceiveMessage(CFTypeRef *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
}

void IPC::Decoder::decode<WebCore::ResourceRequest>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 200))
  {
    IPC::Decoder::markInvalid(a1);
  }
}

uint64_t std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>(uint64_t a1, uint64_t a2)
{
  WTF::URL::URL(a1, (uint64_t *)a2);
  WTF::URL::URL(v4 + 40, (uint64_t *)(a2 + 40));
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = v5;
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 96) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 104) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(a1 + 108) = v6;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  *(void *)(a1 + 112) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 120) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_DWORD *)(a1 + 124) = v7;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t v8 = *(void *)(a2 + 128);
  *(void *)(a2 + 128) = 0;
  *(void *)(a1 + 128) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(_DWORD *)(a1 + 136) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 140) = 0;
  *(_DWORD *)(a1 + 140) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v8;
  uint64_t v9 = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  *(void *)(a1 + 152) = v9;
  uint64_t v10 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(void *)(a1 + 160) = v10;
  uint64_t v11 = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  *(void *)(a1 + 168) = v11;
  uint64_t v12 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v12;
  uint64_t v13 = *(void *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  *(void *)(a1 + 192) = v13;
  return a1;
}

double WTF::URL::URL(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)a1 = v2;
  unsigned int v3 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(a1 + 8) = v3;
  unsigned int v4 = v3 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v4;
  unsigned int v5 = v4 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v5;
  unsigned int v6 = v5 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v6 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  double result = *(double *)((char *)a2 + 28);
  *(double *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  return result;
}

WebCore::ResourceRequestBase *std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100](WebCore::ResourceRequestBase *this)
{
  if (*((unsigned char *)this + 200))
  {
    unsigned int v3 = (const void *)*((void *)this + 24);
    *((void *)this + 24) = 0;
    if (v3) {
      CFRelease(v3);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase(this);
  }
  return this;
}

uint64_t IPC::Decoder::decode<WebCore::AuthenticationChallenge>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::AuthenticationChallenge,void>::decode((const void ***)a1, a2);
  if (!*(unsigned char *)(a2 + 432))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t result = *(void *)(a1 + 24);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 16) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 27) = *(_DWORD *)(a2 + 27);
  *(_DWORD *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 64) = v9;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  uint64_t v10 = a2 + 80;
  WTF::URL::URL(a1 + 80, (uint64_t *)(a2 + 80));
  uint64_t v12 = *(void *)(a2 + 120);
  uint64_t v13 = *(void *)(a2 + 128);
  *(void *)(a2 + 120) = 0;
  *(void *)(a1 + 120) = v12;
  *(void *)(a1 + 128) = v13;
  uint64_t v14 = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  *(void *)(a1 + 136) = v14;
  uint64_t v15 = *(void *)(a2 + 144);
  *(void *)(a2 + 144) = 0;
  *(void *)(a1 + 144) = v15;
  uint64_t v16 = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 152) = v16;
  uint64_t v17 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(void *)(a1 + 160) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a2 + 168) = 0;
  *(_DWORD *)(a1 + 168) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a2 + 172) = 0;
  *(_DWORD *)(a1 + 172) = v17;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  uint64_t v18 = *(void *)(a2 + 176);
  *(void *)(a2 + 176) = 0;
  *(void *)(a1 + 176) = v18;
  LODWORD(v18) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a2 + 184) = 0;
  *(_DWORD *)(a1 + 184) = v18;
  LODWORD(v18) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a2 + 188) = 0;
  *(_DWORD *)(a1 + 188) = v18;
  uint64_t v19 = *(void *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  *(void *)(a1 + 192) = v19;
  *(unsigned char *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  if (*(unsigned char *)(a2 + 208))
  {
    uint64_t v30 = *(void *)(a2 + 200);
    *(void *)(a2 + 200) = 0;
    *(void *)(a1 + 200) = v30;
    *(unsigned char *)(a1 + 208) = 1;
  }
  long long v20 = *(_OWORD *)(a2 + 216);
  long long v21 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v21;
  *(_OWORD *)(a1 + 216) = v20;
  long long v22 = *(_OWORD *)(v10 + 184);
  long long v23 = *(_OWORD *)(v10 + 200);
  long long v24 = *(_OWORD *)(v10 + 216);
  *(_DWORD *)(v11 + 231) = *(_DWORD *)(v10 + 231);
  *(_OWORD *)(v11 + 216) = v24;
  *(_OWORD *)(v11 + 200) = v23;
  *(_OWORD *)(v11 + 184) = v22;
  uint64_t v25 = *(void *)(a2 + 320);
  *(void *)(a2 + 320) = 0;
  *(void *)(a1 + 320) = v25;
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  uint64_t v26 = *(void *)(a2 + 336);
  *(void *)(a2 + 336) = 0;
  *(void *)(a1 + 336) = v26;
  WTF::URL::URL(a1 + 344, (uint64_t *)(a2 + 344));
  uint64_t v27 = *(void *)(a2 + 384);
  *(void *)(a2 + 384) = 0;
  *(void *)(a1 + 384) = v27;
  LODWORD(v27) = *(_DWORD *)(a2 + 392);
  *(_WORD *)(a1 + 396) = *(_WORD *)(a2 + 396);
  *(_DWORD *)(a1 + 392) = v27;
  uint64_t v28 = *(void *)(a2 + 400);
  *(void *)(a2 + 400) = 0;
  *(void *)(a1 + 400) = v28;
  *(unsigned char *)(a1 + 408) = *(unsigned char *)(a2 + 408);
  return a1;
}

WebCore::AuthenticationChallengeBase *std::__optional_destruct_base<WebCore::AuthenticationChallenge,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticationChallengeBase *this, WTF::StringImpl *a2)
{
  if (*((unsigned char *)this + 432))
  {
    unsigned int v3 = (const void *)*((void *)this + 53);
    *((void *)this + 53) = 0;
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = (const void *)*((void *)this + 52);
    *((void *)this + 52) = 0;
    if (v4) {
      CFRelease(v4);
    }
    WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase(this, a2);
  }
  return this;
}

void WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase(WebCore::AuthenticationChallengeBase *this, WTF::StringImpl *a2)
{
  unsigned int v3 = (const void *)*((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (const void *)*((void *)this + 40);
  *((void *)this + 40) = 0;
  if (v7) {
    CFRelease(v7);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::AuthenticationChallengeBase *)((char *)this + 80), a2);
  uint64_t v9 = (const void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v8);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v8);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v8);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
}

void WebCore::ResourceResponseBase::~ResourceResponseBase(WebCore::ResourceResponseBase *this, WTF::StringImpl *a2)
{
  if (*((unsigned char *)this + 128))
  {
    uint64_t v10 = (const void *)*((void *)this + 15);
    *((void *)this + 15) = 0;
    if (v10) {
      CFRelease(v10);
    }
  }
  unsigned int v3 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::Box<WebCore::NetworkLoadMetrics>::Data,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WebCore::ResourceResponseBase *)((char *)this + 96));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WebCore::ResourceResponseBase *)((char *)this + 80));
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v4);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v4);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *(WTF::StringImpl **)this;
  *(void ++*(_DWORD *)this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v4);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
}

WebCore::AdditionalNetworkLoadMetricsForWebInspector **WTF::ThreadSafeRefCounted<WTF::Box<WebCore::NetworkLoadMetrics>::Data,(WTF::DestructionThread)0>::deref(WebCore::AdditionalNetworkLoadMetricsForWebInspector **this, WTF::StringImpl *a2)
{
  if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
  {
    uint64_t v2 = (WTF *)this;
    atomic_store(1u, (unsigned int *)this);
    unsigned int v3 = this[16];
    *((void *)v2 + 16) = 0;
    if (v3) {
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3);
    }
    uint64_t v4 = (WTF::StringImpl *)*((void *)v2 + 12);
    *((void *)v2 + 12) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    return (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)WTF::fastFree(v2, a2);
  }
  return this;
}

WebCore::AdditionalNetworkLoadMetricsForWebInspector *WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(WebCore::AdditionalNetworkLoadMetricsForWebInspector *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebCore::AdditionalNetworkLoadMetricsForWebInspector::~AdditionalNetworkLoadMetricsForWebInspector(result);
    return (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebCore::AdditionalNetworkLoadMetricsForWebInspector::~AdditionalNetworkLoadMetricsForWebInspector(WebCore::AdditionalNetworkLoadMetricsForWebInspector *this)
{
  uint64_t v2 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)((char *)this + 40);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WebCore::AdditionalNetworkLoadMetricsForWebInspector *)((char *)this + 56));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector(v2);
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v3);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
}

void IPC::Decoder::decode<WebCore::ResourceResponse>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::decode(a1, a2);
  if (!a2[256])
  {
    IPC::Decoder::markInvalid(a1);
  }
}

WebCore::ResourceResponseBase *std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100](WebCore::ResourceResponseBase *this, WTF::StringImpl *a2)
{
  if (*((unsigned char *)this + 256))
  {
    unsigned int v3 = (const void *)*((void *)this + 30);
    *((void *)this + 30) = 0;
    if (v3) {
      CFRelease(v3);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase(this, a2);
  }
  return this;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages13DownloadProxy15WillSendRequestEN6WebKit13DownloadProxyES8_FvON7WebCore15ResourceRequestERKNS9_16ResourceResponseEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B3C88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages13DownloadProxy15WillSendRequestEN6WebKit13DownloadProxyES8_FvON7WebCore15ResourceRequestERKNS9_16ResourceResponseEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B3C88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages13DownloadProxy15WillSendRequestEN6WebKit13DownloadProxyES8_FvON7WebCore15ResourceRequestERKNS9_16ResourceResponseEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, WebCore::ResourceRequest *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2879;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

__n128 std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>(uint64_t a1, uint64_t a2)
{
  WTF::URL::URL(a1, (uint64_t *)a2);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(v3 + 40) = v4;
  *(void *)(v3 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(v3 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(v3 + 64) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(void *)(v3 + 80) = 0;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  *(void *)(v3 + 80) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_DWORD *)(v3 + 88) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_DWORD *)(v3 + 92) = v9;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 104) = 0;
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  *(void *)(v3 + 96) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(v3 + 104) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(v3 + 108) = v10;
  uint64_t v11 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  *(void *)(v3 + 112) = v11;
  *(unsigned char *)(v3 + 120) = 0;
  *(unsigned char *)(v3 + 128) = 0;
  if (*(unsigned char *)(a2 + 128))
  {
    uint64_t v18 = *(void *)(a2 + 120);
    *(void *)(a2 + 120) = 0;
    *(void *)(v3 + 120) = v18;
    *(unsigned char *)(v3 + 128) = 1;
  }
  long long v12 = *(_OWORD *)(a2 + 136);
  long long v13 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v3 + 152) = v13;
  *(_OWORD *)(v3 + 136) = v12;
  __n128 result = *(__n128 *)(a2 + 184);
  long long v15 = *(_OWORD *)(a2 + 200);
  long long v16 = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(v3 + 231) = *(_DWORD *)(a2 + 231);
  *(_OWORD *)(v3 + 216) = v16;
  *(_OWORD *)(v3 + 200) = v15;
  *(__n128 *)(v3 + 184) = result;
  uint64_t v17 = *(void *)(a2 + 240);
  *(void *)(a2 + 240) = 0;
  *(void *)(v3 + 240) = v17;
  *(unsigned char *)(v3 + 248) = *(unsigned char *)(a2 + 248);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages13DownloadProxy38DecideDestinationWithSuggestedFilenameEN6WebKit13DownloadProxyES8_FvRKN7WebCore16ResourceResponseEONS_6StringEONS_17CompletionHandlerIFvSD_NS7_22SandboxExtensionHandleENS7_14AllowOverwriteENS7_22UseDownloadPlaceholderERKNS_3URLESG_NSt3__14spanIKhLm18446744073709551615EEESP_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_SG_SH_SI_SL_SG_SP_SP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B3CB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages13DownloadProxy38DecideDestinationWithSuggestedFilenameEN6WebKit13DownloadProxyES8_FvRKN7WebCore16ResourceResponseEONS_6StringEONS_17CompletionHandlerIFvSD_NS7_22SandboxExtensionHandleENS7_14AllowOverwriteENS7_22UseDownloadPlaceholderERKNS_3URLESG_NSt3__14spanIKhLm18446744073709551615EEESP_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_SG_SH_SI_SL_SG_SP_SP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B3CB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages13DownloadProxy38DecideDestinationWithSuggestedFilenameEN6WebKit13DownloadProxyES8_FvRKN7WebCore16ResourceResponseEONS_6StringEONS_17CompletionHandlerIFvSD_NS7_22SandboxExtensionHandleENS7_14AllowOverwriteENS7_22UseDownloadPlaceholderERKNS_3URLESG_NSt3__14spanIKhLm18446744073709551615EEESP_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_SG_SH_SI_SL_SG_SP_SP_EE4callESD_SG_SH_SI_SL_SG_SP_SP_(uint64_t a1, uint64_t *a2, const char ***a3, char a4, char a5, uint64_t *a6, const char ***a7, uint64_t a8, const void *a9, size_t a10, const void *a11, size_t a12)
{
  uint64_t v19 = *(void *)(a1 + 8);
  long long v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v20 = 2877;
  *((void *)v20 + 1) = v19;
  *((void *)v20 + 66) = (char *)v20 + 16;
  *((void *)v20 + 67) = 512;
  *((void *)v20 + 68) = 0;
  *((void *)v20 + 70) = 0;
  *((void *)v20 + 69) = 0;
  IPC::Encoder::encodeHeader(v20);
  uint64_t v27 = v20;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v20, a2);
  IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(v20, a3);
  long long v21 = (unsigned char *)IPC::Encoder::grow(v20, 1uLL, 1);
  if (v22)
  {
    *long long v21 = a4;
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v20, a5);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v20, a6);
    IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(v20, a7);
    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v20, a9, a10);
    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v20, a11, a12);
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v27, 0, 0);
    uint64_t result = (uint64_t)v27;
    uint64_t v27 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v23);
      return WTF::fastFree(v25, v26);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void IPC::Decoder::decode<WebCore::ResourceError>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::ResourceError,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 80))
  {
    IPC::Decoder::markInvalid(a1);
  }
}

uint64_t std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v4 = *(const void **)(a1 + 64);
    *(void *)(a1 + 64) = 0;
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, a2);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t v7 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, a2);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return a1;
}

void IPC::Decoder::decode<std::tuple<WTF::URL,std::span<unsigned char const,18446744073709551615ul>,WebKit::SandboxExtensionHandle>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::URL>(a2, v10);
  if (!v11) {
    goto LABEL_22;
  }
  IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)&v12);
  if (v13)
  {
    IPC::Decoder::decode<WebKit::SandboxExtensionHandle>(a2, (uint64_t)&v14);
    if (v15)
    {
      if (v11 && v13)
      {
        WTF::URL::URL(a1, (uint64_t *)v10);
        *(_OWORD *)(a1 + 40) = v12;
        uint64_t v5 = v14;
        uint64_t v14 = 0;
        *(void *)(a1 + 56) = v5;
        *(unsigned char *)(a1 + 64) = 1;
        if (v15) {
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v14);
        }
        goto LABEL_9;
      }
      __break(1u);
LABEL_22:
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 64) = 0;
      goto LABEL_14;
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 64) = 0;
LABEL_9:
  if (v11)
  {
    uint64_t v6 = v10[0];
    v10[0] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v4);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
LABEL_14:
  if (!*(unsigned char *)(a1 + 64))
  {
    uint64_t v7 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v8 = *((void *)a2 + 3);
    if (v8)
    {
      if (v7)
      {
        uint64_t v9 = *(void (**)(void))(*(void *)v8 + 16);
        v9();
      }
    }
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages13DownloadProxy24DidReceivePlaceholderURLEN6WebKit13DownloadProxyES8_FvRKNS_3URLENSt3__14spanIKhLm18446744073709551615EEEONS7_22SandboxExtensionHandleEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B3CD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages13DownloadProxy24DidReceivePlaceholderURLEN6WebKit13DownloadProxyES8_FvRKNS_3URLENSt3__14spanIKhLm18446744073709551615EEEONS7_22SandboxExtensionHandleEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B3CD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages13DownloadProxy24DidReceivePlaceholderURLEN6WebKit13DownloadProxyES8_FvRKNS_3URLENSt3__14spanIKhLm18446744073709551615EEEONS7_22SandboxExtensionHandleEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2878;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::URL,std::span<unsigned char const,18446744073709551615ul>,WebKit::SandboxExtensionHandle>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 56));
    uint64_t v3 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, v2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  return a1;
}

void IPC::handleMessageAsync<Messages::DrawingArea::UpdateGeometry,WebKit::DrawingArea,WebKit::DrawingArea,void ()(WebCore::IntSize const&,BOOL,WTF::MachSendRight const&,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (atomic_uchar *volatile **)a2;
  uint64_t v6 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a2);
  if (!v7)
  {
    uint64_t v9 = *v4;
    long long v20 = v4[1];
    *uint64_t v4 = 0;
    v4[1] = 0;
    uint64_t v18 = (atomic_uchar *volatile **)v4[3];
    if (v18) {
      BOOL v21 = v20 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_23;
    }
    goto LABEL_30;
  }
  uint64_t v8 = v4[1];
  uint64_t v9 = *v4;
  unint64_t v10 = (char *)v4[2] - (char *)*v4;
  if ((unint64_t)v8 <= v10)
  {
    uint64_t v22 = 0;
    long long v23 = 0;
    *uint64_t v4 = 0;
    v4[1] = 0;
    long long v24 = v4[3];
    if (v24)
    {
      if (v8)
      {
        (*((void (**)(atomic_uchar *volatile *))*v24 + 2))(v24);
        long long v23 = *v4;
        uint64_t v22 = v4[1];
      }
      else
      {
        uint64_t v22 = 0;
        long long v23 = 0;
      }
    }
    goto LABEL_21;
  }
  char v11 = (unsigned __int8 *)v9 + v10;
  uint64_t v4[2] = (atomic_uchar *volatile *)(v11 + 1);
  if (!v9)
  {
    uint64_t v22 = v8;
    long long v23 = 0;
LABEL_21:
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    *uint64_t v4 = 0;
    v4[1] = 0;
    uint64_t v25 = v4[3];
    if (v25)
    {
      if (v22)
      {
        (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *, atomic_uchar *volatile *))*v25 + 2))(v25, v23, v22);
        uint64_t v9 = *v4;
        uint64_t v8 = v4[1];
      }
      else
      {
        uint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
LABEL_22:
    *uint64_t v4 = 0;
    v4[1] = 0;
    uint64_t v18 = (atomic_uchar *volatile **)v4[3];
    if (!v18) {
      goto LABEL_23;
    }
    goto LABEL_29;
  }
  unsigned int v12 = *v11;
  if (v12 >= 2) {
    goto LABEL_22;
  }
  char v13 = v6;
  IPC::Decoder::takeLastAttachment((IPC::Decoder *)v4, &v29);
  if (!BYTE4(v29)) {
    goto LABEL_23;
  }
  uint64_t v32 = v13;
  BOOL v33 = v12 != 0;
  WTF::MachSendRight::MachSendRight();
  char v35 = 1;
  if (BYTE4(v29))
  {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v29);
    if (!v35) {
      goto LABEL_24;
    }
  }
  while (1)
  {
    uint64_t v14 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
    if (!v15) {
      break;
    }
    uint64_t v29 = v14;
    uint64_t v4 = &v30;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v30, a1);
    long long v16 = (void *)WTF::fastMalloc((WTF *)0x18);
    *long long v16 = &unk_1EE9B3D00;
    v16[1] = v29;
    uint64_t v17 = v30;
    uint64_t v30 = 0;
    int v31 = v16;
    void v16[2] = v17;
    uint64_t v18 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v30);
    if (v35)
    {
      (*(void (**)(uint64_t, unint64_t **, BOOL, unsigned char *, void **))(*(void *)a3 + 368))(a3, &v32, v33, v34, &v31);
      uint64_t v19 = v31;
      int v31 = 0;
      if (v19) {
        (*(void (**)(void *))(*v19 + 8))(v19);
      }
      break;
    }
    __break(1u);
LABEL_29:
    if (v8) {
LABEL_30:
    }
      (*((void (**)(atomic_uchar *volatile **, atomic_uchar *volatile *))*v18 + 2))(v18, v9);
LABEL_23:
    LOBYTE(v32) = 0;
    char v35 = 0;
LABEL_24:
    uint64_t v26 = *v4;
    uint64_t v27 = v4[1];
    *uint64_t v4 = 0;
    v4[1] = 0;
    uint64_t v28 = v4[3];
    if (v28)
    {
      if (v27)
      {
        (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v28 + 2))(v28, v26);
        if (v35) {
          continue;
        }
      }
    }
    return;
  }
  if (v35) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v34);
  }
}

void IPC::handleMessage<Messages::DrawingArea::SetColorSpace,WebKit::DrawingArea,WebKit::DrawingArea,void ()(std::optional<WebCore::DestinationColorSpace>)>(uint64_t *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::optional<WebCore::DestinationColorSpace>>(a1, (uint64_t)&cf);
  if (v12)
  {
    char v4 = v11;
    if (v11) {
      char v4 = 1;
    }
    else {
      LOBYTE(cf) = 0;
    }
    char v11 = v4;
    (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a2 + 424))(a2, &cf);
    if (v11)
    {
      CFTypeRef v5 = cf;
      CFTypeRef cf = 0;
      if (v5) {
        CFRelease(v5);
      }
    }
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v8 = a1[3];
    if (v8) {
      BOOL v9 = v7 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
}

uint64_t IPC::handleMessage<Messages::DrawingArea::AcceleratedAnimationDidStart,WebKit::DrawingArea,WebKit::DrawingArea,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String const&,WTF::MonotonicTime)>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WTF::MonotonicTime>>(v5, a1);
  if (v7) {
    (*(void (**)(uint64_t, void, void, double *, double))(*(void *)a2 + 136))(a2, v5[0], v5[1], v6, v6[1]);
  }
  return std::optional<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WTF::MonotonicTime>>::~optional((uint64_t)v5, v3);
}

uint64_t IPC::handleMessage<Messages::DrawingArea::AcceleratedAnimationDidEnd,WebKit::DrawingArea,WebKit::DrawingArea,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String const&)>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String>>(v5, a1);
  if (v6[8]) {
    (*(void (**)(uint64_t, void, void, unsigned char *))(*(void *)a2 + 144))(a2, v5[0], v5[1], v6);
  }
  return std::optional<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String>>::~optional((uint64_t)v5, v3);
}

unint64_t *IPC::handleMessage<Messages::DrawingArea::AdjustTransientZoom,WebKit::DrawingArea,WebKit::DrawingArea,void ()(double,WebCore::FloatPoint)>(unint64_t *a1, uint64_t a2)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<double,WebCore::FloatPoint>>((uint64_t)&v8, a1);
  if (v11)
  {
    v4.n128_u64[0] = v8;
    v5.n128_u32[0] = v9;
    v6.n128_u32[0] = v10;
    char v7 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128))(*(void *)a2 + 440);
    return (unint64_t *)v7(a2, v4, v5, v6);
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::DrawingArea::CommitTransientZoom,WebKit::DrawingArea,WebKit::DrawingArea,void ()(double,WebCore::FloatPoint,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::tuple<double,WebCore::FloatPoint>>((uint64_t)&v16, a2);
  if (v19)
  {
    uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a2);
    if (v7)
    {
      uint64_t v13 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v14, a1);
      unint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
      *unint64_t v8 = &unk_1EE9B3D28;
      v8[1] = v13;
      unsigned __int32 v9 = v14;
      uint64_t v14 = 0;
      char v15 = v8;
      void v8[2] = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v14);
      v10.n128_u64[0] = v16;
      v11.n128_u32[0] = v17;
      v12.n128_u32[0] = v18;
      (*(void (**)(uint64_t, void **, __n128, __n128, __n128))(*(void *)a3 + 448))(a3, &v15, v10, v11, v12);
      uint64_t result = (uint64_t)v15;
      char v15 = 0;
      if (result) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11DrawingArea14UpdateGeometryEN6WebKit11DrawingAreaES8_FvRKN7WebCore7IntSizeEbRKNS_13MachSendRightEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B3D00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11DrawingArea14UpdateGeometryEN6WebKit11DrawingAreaES8_FvRKN7WebCore7IntSizeEbRKNS_13MachSendRightEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B3D00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11DrawingArea14UpdateGeometryEN6WebKit11DrawingAreaES8_FvRKN7WebCore7IntSizeEbRKNS_13MachSendRightEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2882;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void IPC::Decoder::decode<std::optional<WebCore::DestinationColorSpace>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<std::optional<WebCore::DestinationColorSpace>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
}

void IPC::ArgumentCoder<std::optional<WebCore::DestinationColorSpace>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  __n128 v4 = (char *)*a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      char v15 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        a1 = v15;
        uint64_t v10 = *v15;
        unint64_t v9 = v15[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_12;
  }
  __n128 v6 = &v4[v5];
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v9 = v3;
    uint64_t v10 = 0;
LABEL_12:
    unint64_t v3 = 0;
    __n128 v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v14 = a1;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        a1 = v14;
        __n128 v4 = (char *)*v14;
        unint64_t v3 = v14[1];
      }
      else
      {
        unint64_t v3 = 0;
        __n128 v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebCore::DestinationColorSpace>(a1, v4, (uint64_t)&v16);
      char v8 = v17;
      if (v17)
      {
        *(void *)a2 = v16;
        char v8 = 1;
        *(unsigned char *)(a2 + 8) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 16) = v8;
    return;
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v13 = a1[3];
  if (v13 && v3) {
    (*(void (**)(uint64_t, char *))(*(void *)v13 + 16))(v13, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<WebCore::FloatRect>>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WebCore::FloatRect>>(a1, &v8);
  if (v10)
  {
    *(_OWORD *)a2 = v8;
    *(_DWORD *)(a2 + 16) = v9;
    *(unsigned char *)(a2 + 20) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 20) = 0;
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WTF::MonotonicTime>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WTF::MonotonicTime>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[32])
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

uint64_t std::optional<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WTF::MonotonicTime>>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    unint64_t v3 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WTF::MonotonicTime>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)v5);
  if (v5[16]) {
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WTF::MonotonicTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, a2, (uint64_t)v5);
  }
  *a1 = 0;
  a1[32] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WTF::MonotonicTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(unsigned char *a1, IPC::Decoder *a2, uint64_t a3)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v7);
  if (v8)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WTF::MonotonicTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String>((uint64_t)a1, (uint64_t *)a2, a3, &v7);
  }
  else
  {
    *a1 = 0;
    a1[32] = 0;
  }
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v7);
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String,WTF::MonotonicTime>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = IPC::Decoder::decode<WTF::MonotonicTime>(a2);
  if (!v8)
  {
    char v10 = 0;
    *(unsigned char *)a1 = 0;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a3 + 16) && *((unsigned char *)a4 + 8))
  {
    *(_OWORD *)a1 = *(_OWORD *)a3;
    uint64_t v9 = *a4;
    *a4 = 0;
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = result;
    char v10 = 1;
LABEL_5:
    *(unsigned char *)(a1 + 32) = v10;
    return result;
  }
  __break(1u);
  return result;
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[24])
  {
    return (IPC::Decoder *)IPC::Decoder::markInvalid(a2);
  }
  return result;
}

uint64_t std::optional<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String>>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v3 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  return a1;
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = (IPC::Decoder *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)v5);
  if (v5[16]) {
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t)a1, a2, (uint64_t)v5);
  }
  *a1 = 0;
  a1[24] = 0;
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::String>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(uint64_t a1, IPC::Decoder *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v8);
  char v6 = v9;
  if (!v9)
  {
    *(unsigned char *)a1 = 0;
    goto LABEL_4;
  }
  if (*(unsigned char *)(a3 + 16))
  {
    *(_OWORD *)a1 = *(_OWORD *)a3;
    uint64_t v7 = v8;
    uint64_t v8 = 0;
    *(void *)(a1 + 16) = v7;
    char v6 = 1;
LABEL_4:
    *(unsigned char *)(a1 + 24) = v6;
    return (IPC::Decoder *)std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v8);
  }
  __break(1u);
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<double,WebCore::FloatPoint>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = a2[1];
  unint64_t v5 = *a2;
  unint64_t v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    uint64_t v8 = (uint64_t *)(v5 + v6);
    a2[2] = (unint64_t)(v8 + 1);
    if (v5)
    {
      uint64_t v9 = *v8;
      uint64_t result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
      if (v11)
      {
        *(void *)a1 = v9;
        *(void *)(a1 + 8) = result;
        *(unsigned char *)(a1 + 16) = 1;
        return result;
      }
      goto LABEL_13;
    }
    unint64_t v12 = v4;
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v14 = a2[3];
    if (!v14) {
      goto LABEL_14;
    }
    if (v4)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v14 + 16))(v14, v5, v4);
LABEL_13:
      unint64_t v13 = *a2;
      unint64_t v12 = a2[1];
      goto LABEL_14;
    }
    unint64_t v12 = 0;
    unint64_t v13 = 0;
  }
LABEL_14:
  *a2 = 0;
  a2[1] = 0;
  unint64_t v15 = a2[3];
  if (v15 && v12) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v15 + 16))(v15, v13);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  unint64_t v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (unint64_t *)a2[3];
  if (result && v16)
  {
    char v17 = *(uint64_t (**)(void))(*result + 16);
    return (unint64_t *)v17();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11DrawingArea19CommitTransientZoomEN6WebKit11DrawingAreaES8_FvdN7WebCore10FloatPointEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B3D28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11DrawingArea19CommitTransientZoomEN6WebKit11DrawingAreaES8_FvdN7WebCore10FloatPointEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B3D28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11DrawingArea19CommitTransientZoomEN6WebKit11DrawingAreaES8_FvdN7WebCore10FloatPointEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 2880;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WTF *WebKit::DrawingAreaProxy::didReceiveMessage(WTF *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unint64_t v4 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x14:
      this = (WTF *)IPC::Decoder::decode<std::tuple<unsigned long long,WebKit::LayerTreeContext>>((uint64_t)&v13, (uint64_t *)a3);
      if (v15) {
        this = (WTF *)(*(uint64_t (**)(WTF *, WTF *, uint64_t *))(*(void *)v4 + 328))(v4, v13, &v14);
      }
      break;
    case 0x15:
      IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a3, a2, (uint64_t)&v13);
      if (v15)
      {
        char v10 = v13;
        uint64_t v11 = v14;
        char v12 = 1;
        this = (WTF *)(*(uint64_t (**)(WTF *, IPC::Connection *, WTF **))(*(void *)v4 + 208))(v4, a2, &v10);
        if (v12)
        {
          this = v10;
          if (v10)
          {
            char v10 = 0;
            LODWORD(v11) = 0;
            this = (WTF *)WTF::fastFree(this, v6);
          }
        }
      }
      else
      {
        uint64_t v7 = *(void *)a3;
        uint64_t v8 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        this = (WTF *)*((void *)a3 + 3);
        if (this) {
          BOOL v9 = v8 == 0;
        }
        else {
          BOOL v9 = 1;
        }
        if (!v9) {
          this = (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(void *)this + 16))(this, v7);
        }
      }
      break;
    case 0x16:
      this = (WTF *)IPC::Decoder::decode<std::tuple<unsigned long long,WebKit::LayerTreeContext>>((uint64_t)&v13, (uint64_t *)a3);
      if (v15) {
        this = (WTF *)(*(uint64_t (**)(WTF *, WTF *, uint64_t *))(*(void *)v4 + 312))(v4, v13, &v14);
      }
      break;
    case 0x17:
      this = (WTF *)IPC::Decoder::decode<std::tuple<unsigned long long,WebKit::LayerTreeContext>>((uint64_t)&v13, (uint64_t *)a3);
      if (v15) {
        this = (WTF *)(*(uint64_t (**)(WTF *, WTF *, uint64_t *))(*(void *)v4 + 320))(v4, v13, &v14);
      }
      break;
    default:
      return this;
  }
  return this;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned long long,WebKit::LayerTreeContext>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    uint64_t v8 = (uint64_t *)(v5 + v6);
    a2[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      uint64_t v9 = *v8;
      uint64_t result = IPC::ArgumentCoder<WebKit::LayerTreeContext,void>::decode(a2);
      if (v11)
      {
        *(void *)a1 = v9;
        *(void *)(a1 + 8) = result;
        *(unsigned char *)(a1 + 16) = 1;
        return result;
      }
      goto LABEL_13;
    }
    uint64_t v12 = v4;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (!v14) {
      goto LABEL_14;
    }
    if (v4)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v5, v4);
LABEL_13:
      uint64_t v13 = *a2;
      uint64_t v12 = a2[1];
      goto LABEL_14;
    }
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
LABEL_14:
  *a2 = 0;
  a2[1] = 0;
  uint64_t v15 = a2[3];
  if (v15 && v12) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result && v16)
  {
    char v17 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v17();
  }
  return result;
}

unint64_t WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 29))
  {
    uint64_t v3 = result;
    unint64_t v4 = *(WTF **)result;
    uint64_t v5 = *(unsigned int *)(result + 12);
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    if (v5)
    {
      uint64_t v8 = 8 * v5;
      unint64_t v9 = v4;
      do
      {
        uint64_t v10 = *(void *)v9;
        unint64_t v9 = (WTF *)((char *)v9 + 8);
        *v6++ = v10;
        v8 -= 8;
      }
      while (v8);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    int v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      *(_DWORD *)(result + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF **)result;
    if (a2)
    {
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v4 && (WTF *)result != v5)
      {
        uint64_t v6 = 8 * v4;
        unint64_t v7 = v5;
        do
        {
          uint64_t v8 = *(void *)v7;
          unint64_t v7 = (WTF *)((char *)v7 + 8);
          *(void *)uint64_t result = v8;
          result += 8;
          v6 -= 8;
        }
        while (v6);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t WebKit::EndowmentStateTracker::isApplicationForeground(WebKit::EndowmentStateTracker *this)
{
  int v1 = (int)this;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [MEMORY[0x1E4F963F8] identifierWithPid:this];
  if (v2)
  {
    uint64_t v7 = 0;
    uint64_t v3 = (void *)[MEMORY[0x1E4F963E8] handleForIdentifier:v2 error:&v7];
    if (!v3)
    {
      unint64_t v4 = qword_1EB358348;
      if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109378;
        int v9 = v1;
        __int16 v10 = 2114;
        uint64_t v11 = v7;
        _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "endowmentsForPid: Failed to get RBSProcessHandle for process with PID %d, error: %{public}@", buf, 0x12u);
      }
    }
  }
  else
  {
    uint64_t v5 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v9 = v1;
      _os_log_error_impl(&dword_1985F2000, v5, OS_LOG_TYPE_ERROR, "handleForPID: Failed to construct RBSProcessIdentifier from PID %d", buf, 8u);
    }
    uint64_t v3 = 0;
  }
  return [(id)WebKit::endowmentsForHandle(v3) containsObject:@"com.apple.frontboard.visibility"];
}

uint64_t WebKit::endowmentsForHandle(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", @"com.apple.frontboard.visibility", @"com.apple.launchservices.userfacing", 0);
  }
  uint64_t v2 = (void *)[a1 currentState];
  if ([v2 taskState] == 4)
  {
    return [v2 endowmentNamespaces];
  }
  else
  {
    unint64_t v4 = qword_1EB358348;
    if (os_log_type_enabled((os_log_t)qword_1EB358348, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v6 = [a1 pid];
      _os_log_error_impl(&dword_1985F2000, v4, OS_LOG_TYPE_ERROR, "endowmentsForHandle: Process with PID %d is not running", buf, 8u);
    }
    return 0;
  }
}

_WORD *WebKit::EndowmentStateTracker::ensureState(WebKit::EndowmentStateTracker *this)
{
  int v1 = (_WORD *)((char *)this + 24);
  if (!*((unsigned char *)this + 26))
  {
    uint64_t v3 = (void *)WebKit::endowmentsForHandle((void *)[MEMORY[0x1E4F963E8] currentProcess]);
    __int16 v4 = [v3 containsObject:@"com.apple.launchservices.userfacing"];
    if ([v3 containsObject:@"com.apple.frontboard.visibility"]) {
      __int16 v5 = 256;
    }
    else {
      __int16 v5 = 0;
    }
    __int16 v6 = v5 | v4;
    if (!*((unsigned char *)this + 26)) {
      *((unsigned char *)this + 26) = 1;
    }
    _WORD *v1 = v6;
  }
  return v1;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(uint64_t *a1)
{
  if (*a1) {
    unsigned int v2 = *(_DWORD *)(*a1 - 12);
  }
  else {
    unsigned int v2 = 0;
  }
  unsigned int v3 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::computeBestTableSize(v2);
  if (v3 <= 8) {
    unsigned int v4 = 8;
  }
  else {
    unsigned int v4 = v3;
  }

  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v4, 0);
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::computeBestTableSize(unsigned int a1)
{
  unsigned int v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  unsigned int v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  unint64_t v3 = (v2 | HIWORD(v2)) + 1;
  if (v3 > 0x400)
  {
    if (v3 > 2 * (unint64_t)a1) {
      goto LABEL_11;
    }
  }
  else if (3 * v3 > 4 * (unint64_t)a1)
  {
LABEL_4:
    double v4 = (double)a1;
    double v5 = (double)v3;
    double v6 = 0.604166667;
    goto LABEL_5;
  }
  LODWORD(v3) = 2 * v3;
  if (v3 <= 0x400) {
    goto LABEL_4;
  }
LABEL_11:
  double v4 = (double)a1;
  double v5 = (double)v3;
  double v6 = 0.416666667;
LABEL_5:
  if (v5 * v6 <= v4) {
    LODWORD(v3) = 2 * v3;
  }
  if (v3 <= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

void *IPC::Decoder::decode<WebKit::WebWheelEvent>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebWheelEvent,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 112))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<WebCore::RectEdges<BOOL>>(uint64_t *a1)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::RectEdges<BOOL>,void>::decode(a1);
  if (!BYTE4(result))
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      unint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

WTF *IPC::Decoder::decode<WebKit::WebTouchEvent>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebKit::WebTouchEvent,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 112))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (WTF *)a1[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebTouchEvent,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 112))
  {
    WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 64, a2);
    WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 48, v3);
    uint64_t v5 = *(WTF **)(a1 + 32);
    if (v5)
    {
      *(void *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v5, v4);
    }
  }
  return a1;
}

uint64_t WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::WebTouchEvent>::destruct(*(WTF **)a1, (WTF *)(*(void *)a1 + 112 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WTF::VectorDestructor<true,WebKit::WebTouchEvent>::destruct(WTF *result, WTF *a2)
{
  if (result != a2)
  {
    unsigned int v3 = (char *)result + 64;
    do
    {
      WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3);
      WTF::Vector<WebKit::WebTouchEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 - 16);
      unint64_t result = (WTF *)*((void *)v3 - 4);
      if (result)
      {
        *((void *)v3 - 4) = 0;
        *((_DWORD *)v3 - 6) = 0;
        unint64_t result = (WTF *)WTF::fastFree(result, v4);
      }
      uint64_t v5 = (WTF *)(v3 + 48);
      v3 += 112;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages15EventDispatcher10TouchEventEN6WebKit15EventDispatcherES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEERKNS7_13WebTouchEventEONS_17CompletionHandlerIFvbNSt3__18optionalINSA_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSR_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9B3D50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages15EventDispatcher10TouchEventEN6WebKit15EventDispatcherES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEERKNS7_13WebTouchEventEONS_17CompletionHandlerIFvbNSt3__18optionalINSA_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSR_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9B3D50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages15EventDispatcher10TouchEventEN6WebKit15EventDispatcherES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE0EEENSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yLSE_1EEEEERKNS7_13WebTouchEventEONS_17CompletionHandlerIFvbNSt3__18optionalINSA_24RemoteUserInputEventDataEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSR_EE4callEbSR_(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v7 = 2883;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v14 = v7;
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (v9)
  {
    *uint64_t v8 = a2;
    IPC::ArgumentCoder<std::optional<WebCore::RemoteUserInputEventData>,void>::encode<IPC::Encoder,std::optional<WebCore::RemoteUserInputEventData>>(v7, a3);
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
    uint64_t result = (uint64_t)v14;
    uint64_t v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
      return WTF::fastFree(v12, v13);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

double IPC::ArgumentCoder<std::optional<WebCore::RemoteUserInputEventData>,void>::encode<IPC::Encoder,std::optional<WebCore::RemoteUserInputEventData>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 24);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1987F4A20);
    }
    *uint64_t v5 = 1;
    if (*(unsigned char *)(a2 + 24))
    {
      IPC::ArgumentCoder<WebCore::RemoteUserInputEventData,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v8 = (WebKit::ExtensionProcess *)std::__throw_bad_optional_access[abi:sn180100]();
      return WebKit::ExtensionProcess::invalidate(v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1987F4A40);
    }
    *uint64_t v5 = 0;
  }
  return result;
}

double WebKit::ExtensionProcess::invalidate(WebKit::ExtensionProcess *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (v1 == -1) {
    uint64_t v2 = -1;
  }
  else {
    uint64_t v2 = *((unsigned int *)this + 2);
  }
  if (v2 == 2)
  {
    if (v1 == 2) {
      goto LABEL_9;
    }
LABEL_13:
    std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::FullscreenTouchSecheuristicParameters::iosParameters(v5);
  }
  if (v2 != 1)
  {
    if (!v1) {
      goto LABEL_9;
    }
    goto LABEL_13;
  }
  if (v1 != 1) {
    goto LABEL_13;
  }
LABEL_9:
  unsigned int v3 = *(void **)this;

  [v3 invalidate];
  return result;
}

double WebKit::FullscreenTouchSecheuristicParameters::iosParameters@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1994F5D80;
  *(_OWORD *)(a1 + 16) = xmmword_1994F5D90;
  double result = 0.1;
  *(_OWORD *)(a1 + 32) = xmmword_1994F5DA0;
  *(void *)(a1 + 48) = 0x3FB999999999999ALL;
  return result;
}

uint64_t IPC::Encoder::operator<<<int>(IPC::Encoder *a1, int *a2)
{
  int v3 = *a2;
  int v4 = (_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4);
  if (v5 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *int v4 = v3;
    return (uint64_t)a1;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::encode(IPC::Encoder *a1, float *a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[1]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[2]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[3]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[4]);
  float v4 = a2[5];

  return IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t *IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::encode(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  unint64_t v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    unint64_t v13 = v11 - v2;
    unint64_t v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      uint64_t v2 = *result;
      unint64_t v3 = v14;
    }
  }
  unint64_t v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    unint64_t v18 = v16 - v2;
    unint64_t v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = a2[2];
      result[2] = v19;
      uint64_t v2 = *result;
      unint64_t v3 = v19;
    }
  }
  unint64_t v21 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = v21 - (v2 + v3);
  if (v21 >= v2 + v3)
  {
    unint64_t v23 = v21 - v2;
    unint64_t v24 = v22 + v3 + 4;
    if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v23) = a2[3];
      result[2] = v24;
      uint64_t v2 = *result;
      unint64_t v3 = v24;
    }
  }
  unint64_t v26 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v27 = v26 - (v2 + v3);
  if (v26 >= v2 + v3)
  {
    unint64_t v28 = v26 - v2;
    unint64_t v29 = v27 + v3 + 4;
    if (v28 > 0xFFFFFFFFFFFFFFFBLL || v29 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v28) = a2[4];
      result[2] = v29;
      uint64_t v2 = *result;
      unint64_t v3 = v29;
    }
  }
  int v31 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v31 >= v2 + v3)
  {
    uint64_t v32 = (char *)v31 - v2;
    if ((unint64_t)v31 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v32 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *int v31 = a2[5];
      result[2] = (uint64_t)(v32 + 4);
    }
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  uint64_t v6 = v5;
  if (!v5) {
    goto LABEL_11;
  }
  while (1)
  {
    unint64_t v7 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    uint64_t v9 = v8;
    if (!v8)
    {
      unint64_t v18 = *a1;
      unint64_t v19 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v20 = a1[3];
      if (v20)
      {
        if (v19) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v20 + 16))(v20, v18);
        }
      }
    }
    uint64_t result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    uint64_t v12 = v11;
    if (!v11)
    {
      unint64_t v21 = *a1;
      unint64_t v22 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v23 = a1[3];
      if (v23)
      {
        if (v22)
        {
          unint64_t v24 = result;
          (*(void (**)(unint64_t, unint64_t))(*(void *)v23 + 16))(v23, v21);
          uint64_t v12 = 0;
          uint64_t result = v24;
        }
      }
    }
    unint64_t v13 = *a1;
    if (!*a1) {
      break;
    }
    if (v6 && v9 && v12)
    {
      *(void *)a2 = v4;
      *(void *)(a2 + 8) = v7;
      LOBYTE(v13) = 1;
      *(void *)(a2 + 16) = result;
      goto LABEL_9;
    }
    __break(1u);
LABEL_11:
    unint64_t v14 = *a1;
    unint64_t v15 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v16 = a1[3];
    if (v16) {
      BOOL v17 = v15 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (!v17) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14);
    }
  }
  *(unsigned char *)a2 = 0;
LABEL_9:
  *(unsigned char *)(a2 + 24) = v13;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::PathArcTo,void>::encode(IPC::Encoder *a1, float *a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[1]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[2]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[3]);
  float v4 = a2[4];

  return IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t *IPC::ArgumentCoder<WebCore::PathArcTo,void>::encode(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  unint64_t v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    unint64_t v13 = v11 - v2;
    unint64_t v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      uint64_t v2 = *result;
      unint64_t v3 = v14;
    }
  }
  unint64_t v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    unint64_t v18 = v16 - v2;
    unint64_t v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = a2[2];
      result[2] = v19;
      uint64_t v2 = *result;
      unint64_t v3 = v19;
    }
  }
  unint64_t v21 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = v21 - (v2 + v3);
  if (v21 >= v2 + v3)
  {
    unint64_t v23 = v21 - v2;
    unint64_t v24 = v22 + v3 + 4;
    if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v23) = a2[3];
      result[2] = v24;
      uint64_t v2 = *result;
      unint64_t v3 = v24;
    }
  }
  unint64_t v26 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v26 >= v2 + v3)
  {
    unint64_t v27 = (unint64_t)v26 - v2 + 4;
    if ((unint64_t)v26 - v2 > 0xFFFFFFFFFFFFFFFBLL || v27 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *unint64_t v26 = a2[4];
      result[2] = v27;
    }
  }
  return result;
}

void *IPC::StreamConnectionEncoder::operator<<<float const&>(void *result, _DWORD *a2)
{
  uint64_t v2 = result[2];
  unint64_t v3 = *result + v2;
  unint64_t v4 = (v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (v5)
  {
    unint64_t v7 = v6 + v2;
    unint64_t v8 = v7 + 4;
    if (v7 > 0xFFFFFFFFFFFFFFFBLL || v8 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(*result + v7) = *a2;
      result[2] = v8;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::PathArc,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 4));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 8));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 12));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 16));
  char v4 = *(unsigned char *)(a2 + 20);

  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t *IPC::ArgumentCoder<WebCore::PathArc,void>::encode(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *(_DWORD *)a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  unint64_t v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    unint64_t v13 = v11 - v2;
    unint64_t v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = *(_DWORD *)(a2 + 4);
      result[2] = v14;
      uint64_t v2 = *result;
      unint64_t v3 = v14;
    }
  }
  unint64_t v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    unint64_t v18 = v16 - v2;
    unint64_t v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = *(_DWORD *)(a2 + 8);
      result[2] = v19;
      uint64_t v2 = *result;
      unint64_t v3 = v19;
    }
  }
  unint64_t v21 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = v21 - (v2 + v3);
  if (v21 >= v2 + v3)
  {
    unint64_t v23 = v21 - v2;
    unint64_t v24 = v22 + v3 + 4;
    if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v23) = *(_DWORD *)(a2 + 12);
      result[2] = v24;
      uint64_t v2 = *result;
      unint64_t v3 = v24;
    }
  }
  unint64_t v26 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v27 = v26 - (v2 + v3);
  if (v26 >= v2 + v3)
  {
    unint64_t v28 = v26 - v2;
    unint64_t v29 = v27 + v3 + 4;
    if (v28 > 0xFFFFFFFFFFFFFFFBLL || v29 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v28) = *(_DWORD *)(a2 + 16);
      result[2] = v29;
      unint64_t v3 = v29;
    }
  }
  if (v3 >= result[1])
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v3) = *(unsigned char *)(a2 + 20);
    result[2] = v3 + 1;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::PathArc,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  uint64_t v6 = v5;
  if (!v5) {
    goto LABEL_29;
  }
  while (1)
  {
    unint64_t v7 = a1[1];
    unint64_t v8 = *a1;
    unint64_t v9 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v7 >= v9 && v7 - v9 > 3)
    {
      unint64_t v11 = (int *)(v8 + v9);
      a1[2] = (unint64_t)(v11 + 1);
      if (v8)
      {
        int v12 = 0;
        int v13 = *v11;
        unint64_t v14 = v8;
        goto LABEL_9;
      }
      unint64_t v31 = v7;
      unint64_t v32 = 0;
    }
    else
    {
      unint64_t v31 = 0;
      unint64_t v32 = 0;
      *a1 = 0;
      a1[1] = 0;
      unint64_t v33 = a1[3];
      if (v33)
      {
        if (v7)
        {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v33 + 16))(v33, v8);
          unint64_t v32 = *a1;
          unint64_t v31 = a1[1];
        }
        else
        {
          unint64_t v31 = 0;
          unint64_t v32 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    unint64_t v34 = a1[3];
    if (v34 && v31)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v34 + 16))(v34, v32, v31);
      int v13 = 0;
      unint64_t v14 = *a1;
      unint64_t v7 = a1[1];
      int v12 = 1;
      unint64_t v8 = *a1;
    }
    else
    {
      unint64_t v14 = 0;
      unint64_t v7 = 0;
      unint64_t v8 = 0;
      int v13 = 0;
      int v12 = 1;
    }
LABEL_9:
    unint64_t v15 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v8;
    if (v7 >= v15 && v7 - v15 > 3)
    {
      unint64_t v17 = (int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = (unint64_t)(v17 + 1);
      if (v8)
      {
        int v18 = 0;
        int v19 = *v17;
        goto LABEL_16;
      }
      unint64_t v35 = v7;
    }
    else
    {
      unint64_t v35 = 0;
      unint64_t v14 = 0;
      *a1 = 0;
      a1[1] = 0;
      unint64_t v36 = a1[3];
      if (v36)
      {
        if (v7)
        {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v36 + 16))(v36, v8);
          unint64_t v14 = *a1;
          unint64_t v35 = a1[1];
        }
        else
        {
          unint64_t v35 = 0;
          unint64_t v14 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    int v19 = 0;
    unint64_t v37 = a1[3];
    if (v37 && v35)
    {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v37 + 16))(v37, v14, v35);
      unint64_t v14 = *a1;
      unint64_t v7 = a1[1];
      int v18 = 1;
      unint64_t v8 = *a1;
    }
    else
    {
      unint64_t v14 = 0;
      unint64_t v7 = 0;
      unint64_t v8 = 0;
      int v18 = 1;
    }
LABEL_16:
    unint64_t v20 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v8;
    if (v7 < v20 || v7 - v20 <= 3)
    {
      unint64_t v22 = 0;
      unint64_t v14 = 0;
      *a1 = 0;
      a1[1] = 0;
      unint64_t v38 = a1[3];
      if (v38)
      {
        if (v7)
        {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v38 + 16))(v38, v8);
          unint64_t v14 = *a1;
          unint64_t v22 = a1[1];
        }
        else
        {
          unint64_t v22 = 0;
          unint64_t v14 = 0;
        }
      }
    }
    else
    {
      unint64_t v21 = (int *)((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = (unint64_t)(v21 + 1);
      unint64_t v22 = v7;
      if (v8)
      {
        int v23 = 0;
        int v24 = *v21;
        goto LABEL_20;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    int v24 = 0;
    unint64_t v39 = a1[3];
    if (v39 && v22) {
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v39 + 16))(v39, v14, v22);
    }
    int v23 = 1;
LABEL_20:
    uint64_t result = IPC::Decoder::decode<WebCore::RotationDirection>(a1);
    unint64_t v26 = *a1;
    if (!*a1) {
      break;
    }
    if (v6 && !v12 && !v18 && !v23 && (unsigned __int16)result > 0xFFu)
    {
      *(void *)a2 = v4;
      *(_DWORD *)(a2 + 8) = v13;
      *(_DWORD *)(a2 + 12) = v19;
      *(_DWORD *)(a2 + 16) = v24;
      LOBYTE(v26) = 1;
      *(unsigned char *)(a2 + 20) = result;
      goto LABEL_27;
    }
    __break(1u);
LABEL_29:
    unint64_t v27 = *a1;
    unint64_t v28 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v29 = a1[3];
    if (v29) {
      BOOL v30 = v28 == 0;
    }
    else {
      BOOL v30 = 1;
    }
    if (!v30) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v29 + 16))(v29, v27);
    }
  }
  *(unsigned char *)a2 = 0;
LABEL_27:
  *(unsigned char *)(a2 + 24) = v26;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::PathClosedArc,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PathArc,void>::decode(a1, (uint64_t)v9);
  if (v10)
  {
    if (*a1)
    {
      *(_OWORD *)a2 = *(_OWORD *)v9;
      *(void *)(a2 + 13) = *(void *)&v9[13];
      char v5 = 1;
LABEL_4:
      *(unsigned char *)(a2 + 24) = v5;
      return result;
    }
LABEL_10:
    char v5 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_4;
  }
  unint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    goto LABEL_10;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v6);
  if (!*a1) {
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::PathEllipse,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 4));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 8));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 12));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 16));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 20));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 24));
  char v4 = *(unsigned char *)(a2 + 28);

  return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t *IPC::ArgumentCoder<WebCore::PathEllipse,void>::encode(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *(_DWORD *)a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  unint64_t v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    unint64_t v13 = v11 - v2;
    unint64_t v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = *(_DWORD *)(a2 + 4);
      result[2] = v14;
      uint64_t v2 = *result;
      unint64_t v3 = v14;
    }
  }
  unint64_t v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    unint64_t v18 = v16 - v2;
    unint64_t v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = *(_DWORD *)(a2 + 8);
      result[2] = v19;
      uint64_t v2 = *result;
      unint64_t v3 = v19;
    }
  }
  unint64_t v21 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = v21 - (v2 + v3);
  if (v21 >= v2 + v3)
  {
    unint64_t v23 = v21 - v2;
    unint64_t v24 = v22 + v3 + 4;
    if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v23) = *(_DWORD *)(a2 + 12);
      result[2] = v24;
      uint64_t v2 = *result;
      unint64_t v3 = v24;
    }
  }
  unint64_t v26 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v27 = v26 - (v2 + v3);
  if (v26 >= v2 + v3)
  {
    unint64_t v28 = v26 - v2;
    unint64_t v29 = v27 + v3 + 4;
    if (v28 > 0xFFFFFFFFFFFFFFFBLL || v29 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v28) = *(_DWORD *)(a2 + 16);
      result[2] = v29;
      uint64_t v2 = *result;
      unint64_t v3 = v29;
    }
  }
  unint64_t v31 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v31 >= v2 + v3)
  {
    unint64_t v32 = (char *)v31 - v2;
    if ((unint64_t)v31 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v32 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *unint64_t v31 = *(_DWORD *)(a2 + 20);
      result[2] = (uint64_t)(v32 + 4);
      uint64_t v2 = *result;
      unint64_t v3 = (unint64_t)(v32 + 4);
    }
  }
  unint64_t v33 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v33 >= v2 + v3)
  {
    unint64_t v34 = (char *)v33 - v2;
    if ((unint64_t)v33 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v34 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *unint64_t v33 = *(_DWORD *)(a2 + 24);
      result[2] = (uint64_t)(v34 + 4);
      unint64_t v3 = (unint64_t)(v34 + 4);
    }
  }
  if (v3 >= result[1])
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v3) = *(unsigned char *)(a2 + 28);
    result[2] = v3 + 1;
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<WebCore::PathRect,void>::decode@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v6);
  unint64_t v5 = *a1;
  if (!*a1)
  {
    *a2 = 0;
    goto LABEL_4;
  }
  if (v7)
  {
    *(_OWORD *)a2 = v6;
    LOBYTE(v5) = 1;
LABEL_4:
    a2[16] = v5;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::PathRoundedRect,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode(a1, (_DWORD *)a2);
  unint64_t v5 = a1[2];
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v5) = *(unsigned char *)(a2 + 48);
    a1[2] = v5 + 1;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::PathRoundedRect,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode(a1, (uint64_t)v13);
  int v4 = v14;
  if (!v14) {
    goto LABEL_10;
  }
  while (1)
  {
    uint64_t result = IPC::ArgumentCoder<WebCore::PathRoundedRect::Strategy,void>::decode<IPC::Decoder>(a1);
    unsigned __int16 v6 = result;
    if ((unsigned __int16)result <= 0xFFu) {
      uint64_t result = IPC::Decoder::markInvalid((IPC::Decoder *)a1);
    }
    unint64_t v7 = *a1;
    if (!*a1) {
      break;
    }
    if (v4 && v6 > 0xFFu)
    {
      long long v8 = v13[1];
      *(_OWORD *)a2 = v13[0];
      *(_OWORD *)(a2 + 16) = v8;
      *(_OWORD *)(a2 + 32) = v13[2];
      *(unsigned char *)(a2 + 48) = v6;
      LOBYTE(v7) = 1;
      goto LABEL_8;
    }
    __break(1u);
LABEL_10:
    unint64_t v9 = *a1;
    unint64_t v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v11 = a1[3];
    if (v11) {
      BOOL v12 = v10 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v11 + 16))(v11, v9);
    }
  }
  *(unsigned char *)a2 = 0;
LABEL_8:
  *(unsigned char *)(a2 + 52) = v7;
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::PathDataLine,void>::encode(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  unint64_t v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    unint64_t v13 = v11 - v2;
    unint64_t v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      uint64_t v2 = *result;
      unint64_t v3 = v14;
    }
  }
  unint64_t v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    unint64_t v18 = v16 - v2;
    unint64_t v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = a2[2];
      result[2] = v19;
      uint64_t v2 = *result;
      unint64_t v3 = v19;
    }
  }
  unint64_t v21 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v21 >= v2 + v3)
  {
    unint64_t v22 = (unint64_t)v21 - v2 + 4;
    if ((unint64_t)v21 - v2 > 0xFFFFFFFFFFFFFFFBLL || v22 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *unint64_t v21 = a2[3];
      result[2] = v22;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode(IPC::Encoder *a1, float *a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[1]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[2]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[3]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[4]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[5]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[6]);
  float v4 = a2[7];

  return IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t *IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  unint64_t v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    unint64_t v13 = v11 - v2;
    unint64_t v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      uint64_t v2 = *result;
      unint64_t v3 = v14;
    }
  }
  unint64_t v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    unint64_t v18 = v16 - v2;
    unint64_t v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = a2[2];
      result[2] = v19;
      uint64_t v2 = *result;
      unint64_t v3 = v19;
    }
  }
  unint64_t v21 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = v21 - (v2 + v3);
  if (v21 >= v2 + v3)
  {
    unint64_t v23 = v21 - v2;
    unint64_t v24 = v22 + v3 + 4;
    if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v23) = a2[3];
      result[2] = v24;
      uint64_t v2 = *result;
      unint64_t v3 = v24;
    }
  }
  unint64_t v26 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v27 = v26 - (v2 + v3);
  if (v26 >= v2 + v3)
  {
    unint64_t v28 = v26 - v2;
    unint64_t v29 = v27 + v3 + 4;
    if (v28 > 0xFFFFFFFFFFFFFFFBLL || v29 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v28) = a2[4];
      result[2] = v29;
      uint64_t v2 = *result;
      unint64_t v3 = v29;
    }
  }
  unint64_t v31 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v31 >= v2 + v3)
  {
    unint64_t v32 = (char *)v31 - v2;
    if ((unint64_t)v31 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v32 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *unint64_t v31 = a2[5];
      result[2] = (uint64_t)(v32 + 4);
      uint64_t v2 = *result;
      unint64_t v3 = (unint64_t)(v32 + 4);
    }
  }
  unint64_t v33 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v33 >= v2 + v3)
  {
    unint64_t v34 = (char *)v33 - v2;
    if ((unint64_t)v33 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v34 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *unint64_t v33 = a2[6];
      result[2] = (uint64_t)(v34 + 4);
      uint64_t v2 = *result;
      unint64_t v3 = (unint64_t)(v34 + 4);
    }
  }
  unint64_t v35 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v35 >= v2 + v3)
  {
    unint64_t v36 = (char *)v35 - v2;
    if ((unint64_t)v35 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v36 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *unint64_t v35 = a2[7];
      result[2] = (uint64_t)(v36 + 4);
    }
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  uint64_t v6 = v5;
  if (!v5) {
    goto LABEL_13;
  }
  while (1)
  {
    unint64_t v7 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    uint64_t v9 = v8;
    if (!v8)
    {
      unint64_t v21 = *a1;
      unint64_t v22 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v23 = a1[3];
      if (v23)
      {
        if (v22) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v23 + 16))(v23, v21);
        }
      }
    }
    unint64_t v10 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    uint64_t v12 = v11;
    if (!v11)
    {
      unint64_t v24 = *a1;
      unint64_t v25 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v26 = a1[3];
      if (v26)
      {
        if (v25) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v26 + 16))(v26, v24);
        }
      }
    }
    uint64_t result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    uint64_t v15 = v14;
    if (!v14)
    {
      unint64_t v27 = *a1;
      unint64_t v28 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v29 = a1[3];
      if (v29)
      {
        if (v28)
        {
          BOOL v30 = result;
          (*(void (**)(unint64_t, unint64_t))(*(void *)v29 + 16))(v29, v27);
          uint64_t v15 = 0;
          uint64_t result = v30;
        }
      }
    }
    unint64_t v16 = *a1;
    if (!*a1) {
      break;
    }
    if (v6 && v9 && v12 && v15)
    {
      *(void *)a2 = v4;
      *(void *)(a2 + 8) = v7;
      LOBYTE(v16) = 1;
      *(void *)(a2 + 16) = v10;
      *(void *)(a2 + 24) = result;
      goto LABEL_11;
    }
    __break(1u);
LABEL_13:
    unint64_t v17 = *a1;
    unint64_t v18 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v19 = a1[3];
    if (v19) {
      BOOL v20 = v18 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    if (!v20) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v19 + 16))(v19, v17);
    }
  }
  *(unsigned char *)a2 = 0;
LABEL_11:
  *(unsigned char *)(a2 + 32) = v16;
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::PathDataArc,void>::encode(IPC::Encoder *a1, float *a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[1]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[2]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[3]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[4]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, a2[5]);
  float v4 = a2[6];

  return IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t *IPC::ArgumentCoder<WebCore::PathDataArc,void>::encode(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  unint64_t v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    unint64_t v13 = v11 - v2;
    unint64_t v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      uint64_t v2 = *result;
      unint64_t v3 = v14;
    }
  }
  unint64_t v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    unint64_t v18 = v16 - v2;
    unint64_t v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = a2[2];
      result[2] = v19;
      uint64_t v2 = *result;
      unint64_t v3 = v19;
    }
  }
  unint64_t v21 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = v21 - (v2 + v3);
  if (v21 >= v2 + v3)
  {
    unint64_t v23 = v21 - v2;
    unint64_t v24 = v22 + v3 + 4;
    if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v23) = a2[3];
      result[2] = v24;
      uint64_t v2 = *result;
      unint64_t v3 = v24;
    }
  }
  unint64_t v26 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v27 = v26 - (v2 + v3);
  if (v26 >= v2 + v3)
  {
    unint64_t v28 = v26 - v2;
    unint64_t v29 = v27 + v3 + 4;
    if (v28 > 0xFFFFFFFFFFFFFFFBLL || v29 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v28) = a2[4];
      result[2] = v29;
      uint64_t v2 = *result;
      unint64_t v3 = v29;
    }
  }
  unint64_t v31 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v31 >= v2 + v3)
  {
    unint64_t v32 = (char *)v31 - v2;
    if ((unint64_t)v31 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v32 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *unint64_t v31 = a2[5];
      result[2] = (uint64_t)(v32 + 4);
      uint64_t v2 = *result;
      unint64_t v3 = (unint64_t)(v32 + 4);
    }
  }
  unint64_t v33 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v33 >= v2 + v3)
  {
    unint64_t v34 = (char *)v33 - v2;
    if ((unint64_t)v33 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v34 + 4) > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *unint64_t v33 = a2[6];
      result[2] = (uint64_t)(v34 + 4);
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::PathSegment,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  unsigned __int8 v5 = *(_DWORD *)(a2 + 52);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  return IPC::ArgumentCoder<std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath>,void>::encode<IPC::Encoder,std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(a1, a2, v5);
}

uint64_t *IPC::ArgumentCoder<WebCore::PathSegment,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 52);
  unint64_t v3 = a1[2];
  if (v3 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v3) = v2;
    a1[2] = v3 + 1;
  }
  return IPC::ArgumentCoder<std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath> const&>(a1, (_DWORD *)a2, v2);
}

uint64_t IPC::ArgumentCoder<WebCore::PathSegment,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)IPC::ArgumentCoder<std::variant<WebCore::PathMoveTo,WebCore::PathLineTo,WebCore::PathQuadCurveTo,WebCore::PathBezierCurveTo,WebCore::PathArcTo,WebCore::PathArc,WebCore::PathClosedArc,WebCore::PathEllipse,WebCore::PathEllipseInRect,WebCore::PathRect,WebCore::PathRoundedRect,WebCore::PathDataLine,WebCore::PathDataQuadCurve,WebCore::PathDataBezierCurve,WebCore::PathDataArc,WebCore::PathCloseSubpath>,void>::decode<IPC::Decoder>(a1, (uint64_t)v12);
  if (!v13)
  {
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v6 != 0) {
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  if (*a1)
  {
    if (!v13) {
      __break(1u);
    }
    uint64_t result = WebCore::PathSegment::PathSegment();
    *(_OWORD *)a2 = v8;
    *(_OWORD *)(a2 + 16) = v9;
    *(_OWORD *)(a2 + 32) = v10;
    *(void *)(a2 + 48) = v11;
    *(unsigned char *)(a2 + 56) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 56) = 0;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::RemoteGraphicsContextGLInitializationState,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 16));
  int v4 = *(_DWORD *)(a2 + 20);

  return IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, v4);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::RemoteGraphicsContextGLInitializationState,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v34);
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v32);
  unint64_t v5 = *((void *)a1 + 1);
  unint64_t v6 = *(WTF::StringImpl **)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
  if (v5 >= v7 && v5 - v7 > 3)
  {
    long long v9 = (int *)((char *)v6 + v7);
    *((void *)a1 + 2) = v9 + 1;
    if (v6)
    {
      int v10 = 0;
      int v11 = *v9;
      unsigned int v12 = v11 & 0xFFFFFF00;
      int v13 = v11;
      uint64_t v14 = v6;
      goto LABEL_8;
    }
    uint64_t v14 = (WTF::StringImpl *)v5;
    unint64_t v23 = 0;
    goto LABEL_28;
  }
  while (1)
  {
    uint64_t v14 = 0;
    unint64_t v23 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v24 = *((void *)a1 + 3);
    if (v24)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
        unint64_t v23 = *(WTF::StringImpl **)a1;
        uint64_t v14 = (WTF::StringImpl *)*((void *)a1 + 1);
      }
      else
      {
        uint64_t v14 = 0;
        unint64_t v23 = 0;
      }
    }
LABEL_28:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (!result)
    {
      uint64_t v14 = 0;
LABEL_30:
      unint64_t v5 = 0;
      unint64_t v6 = 0;
      unsigned int v12 = 0;
      int v13 = 0;
      int v10 = 1;
      goto LABEL_8;
    }
    if (!v14) {
      goto LABEL_30;
    }
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v23, v14);
    unsigned int v12 = 0;
    int v13 = 0;
    uint64_t v14 = *(WTF::StringImpl **)a1;
    unint64_t v5 = *((void *)a1 + 1);
    int v10 = 1;
    unint64_t v6 = *(WTF::StringImpl **)a1;
LABEL_8:
    unint64_t v15 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v6;
    if (v5 < v15 || v5 - v15 <= 3) {
      break;
    }
    unint64_t v17 = (unsigned int *)((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
    *((void *)a1 + 2) = v17 + 1;
    unint64_t v18 = v5;
    if (!v6) {
      goto LABEL_32;
    }
    int v19 = 0;
    unint64_t v20 = (unint64_t)*v17 << 32;
LABEL_15:
    if (v35)
    {
      unint64_t v21 = v34;
      unint64_t v34 = 0;
      if (v33)
      {
        unint64_t v22 = v32;
        unint64_t v32 = 0;
        if (!v10 && !v19)
        {
          *(void *)a2 = v21;
          *(void *)(a2 + 8) = v22;
          *(void *)(a2 + 16) = v20 | v13 | v12;
          *(unsigned char *)(a2 + 24) = 1;
          goto LABEL_20;
        }
      }
    }
    __break(1u);
  }
  unint64_t v18 = 0;
  uint64_t v14 = 0;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v25 = *((void *)a1 + 3);
  if (v25)
  {
    int v29 = v13;
    int v31 = v10;
    unsigned int v27 = v12;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
      uint64_t v14 = *(WTF::StringImpl **)a1;
      unint64_t v18 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v18 = 0;
      uint64_t v14 = 0;
    }
    unsigned int v12 = v27;
    int v13 = v29;
    int v10 = v31;
  }
LABEL_32:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
  if (result)
  {
    if (v18)
    {
      int v28 = v13;
      int v30 = v10;
      unsigned int v26 = v12;
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)result + 16))(result, v14, v18);
      unsigned int v12 = v26;
      int v13 = v28;
      int v10 = v30;
      if (*(void *)a1)
      {
        unint64_t v20 = 0;
        int v19 = 1;
        goto LABEL_15;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (v33)
  {
    uint64_t result = v32;
    unint64_t v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_20:
  if (v35)
  {
    uint64_t result = v34;
    unint64_t v34 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1987F68AC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebKit::RemoteGPURequestAdapterResponse,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 8);
  IPC::ArgumentCoder<WebKit::WebGPU::SupportedLimits,void>::encode(a1, a2 + 24);
  char v4 = *(unsigned char *)(a2 + 168);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *IPC::ArgumentCoder<WebKit::RemoteGPURequestAdapterResponse,void>::encode(uint64_t *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, (uint64_t *)a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 8);
  unint64_t result = IPC::ArgumentCoder<WebKit::WebGPU::SupportedLimits,void>::encode(a1, a2 + 24);
  unint64_t v5 = a1[2];
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v5) = *(unsigned char *)(a2 + 168);
    a1[2] = v5 + 1;
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::RemoteGPURequestAdapterResponse,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v40);
  IPC::Decoder::decode<WebKit::WebGPU::SupportedFeatures>(a1, v4, (uint64_t)&v37);
  IPC::Decoder::decode<WebKit::WebGPU::SupportedLimits>(a1, (uint64_t)v35);
  unint64_t v6 = *((void *)a1 + 1);
  unint64_t v7 = *(char **)a1;
  unint64_t v8 = *((void *)a1 + 2) - *(void *)a1;
  if (v6 <= v8) {
    goto LABEL_19;
  }
  long long v9 = &v7[v8];
  *((void *)a1 + 2) = v9 + 1;
  if (!v7)
  {
    unint64_t v20 = v6;
    unint64_t v21 = 0;
    goto LABEL_20;
  }
  unsigned int v10 = *v9;
  if (v10 > 1) {
    goto LABEL_21;
  }
  int v11 = 0;
  for (BOOL i = v10 != 0; ; BOOL i = 0)
  {
    if (v41)
    {
      int v13 = v40;
      uint64_t v40 = 0;
      if (v39)
      {
        uint64_t v14 = v37;
        v5.n128_u64[0] = v38;
        uint64_t v37 = 0;
        unint64_t v38 = 0;
        if (v36)
        {
          long long v31 = v35[6];
          long long v32 = v35[7];
          long long v33 = v35[8];
          long long v27 = v35[2];
          long long v28 = v35[3];
          long long v29 = v35[4];
          long long v30 = v35[5];
          long long v25 = v35[0];
          long long v26 = v35[1];
          if (!v11)
          {
            *(void *)(a2 + 16) = v5.n128_u64[0];
            long long v15 = v32;
            *(_OWORD *)(a2 + 120) = v31;
            *(_OWORD *)(a2 + 136) = v15;
            *(_OWORD *)(a2 + 152) = v33;
            long long v16 = v28;
            *(_OWORD *)(a2 + 56) = v27;
            *(_OWORD *)(a2 + 72) = v16;
            long long v17 = v30;
            *(_OWORD *)(a2 + 88) = v29;
            *(_OWORD *)(a2 + 104) = v17;
            long long v18 = v26;
            *(_OWORD *)(a2 + 24) = v25;
            BOOL v34 = i;
            v24[0] = 0;
            *(void *)a2 = v13;
            *(void *)(a2 + 8) = v14;
            v24[1] = 0;
            *(_OWORD *)(a2 + 40) = v18;
            *(unsigned char *)(a2 + 168) = v34;
            *(unsigned char *)(a2 + 176) = 1;
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v7);
            unint64_t result = 0;
            goto LABEL_10;
          }
        }
      }
    }
    __break(1u);
LABEL_19:
    unint64_t v20 = 0;
    unint64_t v21 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v22 = *((void *)a1 + 3);
    if (v22)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, __n128))(*(void *)v22 + 16))(v22, v5);
        unint64_t v21 = *(char **)a1;
        unint64_t v20 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v20 = 0;
        unint64_t v21 = 0;
      }
    }
LABEL_20:
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v23 = *((void *)a1 + 3);
    if (v23)
    {
      if (v20)
      {
        (*(void (**)(uint64_t, char *, unint64_t, __n128))(*(void *)v23 + 16))(v23, v21, v20, v5);
        unint64_t v7 = *(char **)a1;
        unint64_t v6 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        unint64_t v7 = 0;
      }
    }
LABEL_21:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (!result) {
      break;
    }
    if (!v6) {
      break;
    }
    unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, char *, __n128))(*(void *)result + 16))(result, v7, v5);
    if (!*(void *)a1) {
      break;
    }
    int v11 = 1;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 176) = 0;
LABEL_10:
  if (v39) {
    unint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v7);
  }
  if (v41)
  {
    unint64_t result = v40;
    uint64_t v40 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1987F6CC0(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 - 56)) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 72, a2);
  }
  if (*(unsigned char *)(v2 - 40))
  {
    char v4 = *(WTF::StringImpl **)(v2 - 48);
    *(void *)(v2 - 48) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebKit::WebGPU::SupportedFeatures>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebGPU::SupportedFeatures,void>::decode(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v6 != 0)
    {
      unint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::WebGPU::SupportedLimits>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebGPU::SupportedLimits,void>::decode((uint64_t)a1, a2);
  if (!*(unsigned char *)(a2 + 144))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::AudioTrackPrivateRemoteConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2 + 24);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 40));
  char v4 = *(unsigned char *)(a2 + 44);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6 || (*uint64_t v5 = v4, v7 = *(unsigned char *)(a2 + 45), v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1), !v9))
  {
    __break(0xC471u);
    JUMPOUT(0x1987F6F0CLL);
  }
  *unint64_t v8 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 56));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 60));

  return IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 64));
}

uint64_t IPC::Encoder::operator<<<unsigned long long const&>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v5 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *char v4 = v3;
    return (uint64_t)a1;
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::AudioTrackPrivateRemoteConfiguration,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((void *)a1 + 1);
  unint64_t v5 = *(WTF::StringImpl **)a1;
  unint64_t v6 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    unint64_t v8 = (uint64_t *)((char *)v5 + v6);
    *((void *)a1 + 2) = v8 + 1;
    if (v5)
    {
      int v9 = 0;
      uint64_t v10 = *v8;
      goto LABEL_8;
    }
    unint64_t v50 = v4;
    uint64_t v51 = 0;
  }
  else
  {
    unint64_t v50 = 0;
    uint64_t v51 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v52 = *((void *)a1 + 3);
    if (v52)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v52 + 16))(v52, v5, v4);
        uint64_t v51 = *(WTF::StringImpl **)a1;
        unint64_t v50 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v50 = 0;
        uint64_t v51 = 0;
      }
    }
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v53 = *((void *)a1 + 3);
  if (v53 && v50) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v53 + 16))(v53, v51);
  }
  uint64_t v10 = 0;
  int v9 = 1;
LABEL_8:
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v105);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v103);
  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)v101);
  unint64_t v11 = *((void *)a1 + 1);
  unsigned int v12 = *(WTF::StringImpl **)a1;
  unint64_t v13 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
  if (v11 < v13 || v11 - v13 <= 3)
  {
    unint64_t v54 = 0;
    uint64_t v55 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v56 = *((void *)a1 + 3);
    if (v56)
    {
      if (v11)
      {
        (*(void (**)(uint64_t))(*(void *)v56 + 16))(v56);
        uint64_t v55 = *(WTF::StringImpl **)a1;
        unint64_t v54 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v54 = 0;
        uint64_t v55 = 0;
      }
    }
    goto LABEL_66;
  }
  long long v15 = (int *)((char *)v12 + v13);
  uint64_t v16 = (uint64_t)v12 + v13 + 4;
  *((void *)a1 + 2) = v16;
  if (!v12)
  {
    unint64_t v54 = v11;
    uint64_t v55 = 0;
LABEL_66:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v57 = *((void *)a1 + 3);
    if (!v57)
    {
      int v18 = 0;
      unint64_t v54 = 0;
LABEL_68:
      unsigned int v12 = 0;
      int v17 = 1;
      goto LABEL_69;
    }
    if (!v54)
    {
      int v18 = 0;
      goto LABEL_68;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v57 + 16))(v57, v55, v54);
    int v18 = 0;
    unsigned int v12 = *(WTF::StringImpl **)a1;
    unint64_t v11 = *((void *)a1 + 1);
    int v17 = 1;
    uint64_t v16 = *((void *)a1 + 2);
    goto LABEL_15;
  }
  int v17 = 0;
  int v18 = *v15;
LABEL_15:
  unint64_t v19 = v16 - (void)v12;
  if (v11 <= v19) {
    goto LABEL_130;
  }
  unint64_t v20 = (unsigned __int8 *)v12 + v19;
  *((void *)a1 + 2) = v20 + 1;
  if (v12)
  {
    unsigned int v21 = *v20;
    if (v21 < 2)
    {
      int v22 = 0;
      __int16 v23 = 1;
      goto LABEL_19;
    }
    goto LABEL_71;
  }
  unint64_t v54 = v11;
  while (1)
  {
LABEL_69:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v58 = *((void *)a1 + 3);
    if (v58 && v54)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v58 + 16))(v58, v12, v54);
      unsigned int v21 = 0;
      unsigned int v12 = *(WTF::StringImpl **)a1;
      unint64_t v11 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v11 = 0;
      unsigned int v12 = 0;
      unsigned int v21 = 0;
    }
LABEL_71:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v59 = *((void *)a1 + 3);
    if (!v59)
    {
      unsigned int v12 = 0;
      __int16 v24 = 0;
      unint64_t v11 = 0;
      goto LABEL_73;
    }
    if (!v11)
    {
      unsigned int v12 = 0;
      __int16 v24 = 0;
LABEL_73:
      int v22 = 1;
LABEL_74:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v60 = *((void *)a1 + 3);
      if (v60)
      {
        if (v11)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v60 + 16))(v60, v12);
          os_log_t v61 = *(WTF::StringImpl **)a1;
          unint64_t v11 = *((void *)a1 + 1);
        }
        else
        {
          os_log_t v61 = 0;
        }
      }
      else
      {
        os_log_t v61 = 0;
        unint64_t v11 = 0;
      }
LABEL_76:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v62 = *((void *)a1 + 3);
      if (v62)
      {
        if (v11)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v62 + 16))(v62, v61);
          unsigned int v12 = *(WTF::StringImpl **)a1;
          unint64_t v11 = *((void *)a1 + 1);
        }
        else
        {
          unsigned int v12 = 0;
        }
      }
      else
      {
        unsigned int v12 = 0;
        unint64_t v11 = 0;
      }
      goto LABEL_78;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v59 + 16))(v59, v12);
    __int16 v23 = 0;
    unsigned int v12 = *(WTF::StringImpl **)a1;
    unint64_t v11 = *((void *)a1 + 1);
    int v22 = 1;
LABEL_19:
    if (v21) {
      __int16 v24 = v23;
    }
    else {
      __int16 v24 = 0;
    }
    if (v11 <= *((void *)a1 + 2) - (void)v12) {
      goto LABEL_74;
    }
    long long v25 = (unsigned __int8 *)*((void *)a1 + 2);
    *((void *)a1 + 2) = v25 + 1;
    if (!v12)
    {
      os_log_t v61 = 0;
      goto LABEL_76;
    }
    unsigned int v26 = *v25;
    if (v26 < 7)
    {
      unsigned int v27 = v26 | 0x100;
      goto LABEL_26;
    }
LABEL_78:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v63 = *((void *)a1 + 3);
    if (v63 && v11) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v63 + 16))(v63, v12);
    }
    unsigned int v27 = 0;
LABEL_26:
    uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)v107);
    unint64_t v11 = *((void *)a1 + 1);
    long long v29 = *(WTF::StringImpl **)a1;
    unint64_t v30 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a1;
    if (v11 < v30 || v11 - v30 <= 3)
    {
      char v36 = 0;
      uint64_t v64 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v65 = *((void *)a1 + 3);
      if (v65)
      {
        if (v11)
        {
          (*(void (**)(uint64_t))(*(void *)v65 + 16))(v65);
          uint64_t v64 = *(WTF::StringImpl **)a1;
          char v36 = (WTF::StringImpl *)*((void *)a1 + 1);
        }
        else
        {
          char v36 = 0;
          uint64_t v64 = 0;
        }
      }
    }
    else
    {
      long long v31 = (int *)((char *)v29 + v30);
      *((void *)a1 + 2) = v31 + 1;
      if (v29)
      {
        int v32 = 0;
        int v33 = *v31;
        unsigned int v34 = v33 & 0xFFFFFF00;
        int v35 = v33;
        char v36 = v29;
        goto LABEL_30;
      }
      char v36 = (WTF::StringImpl *)v11;
      uint64_t v64 = 0;
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result)
    {
      if (v36)
      {
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v64, v36);
        unsigned int v34 = 0;
        int v35 = 0;
        char v36 = *(WTF::StringImpl **)a1;
        unint64_t v11 = *((void *)a1 + 1);
        int v32 = 1;
        long long v29 = *(WTF::StringImpl **)a1;
        goto LABEL_30;
      }
    }
    else
    {
      char v36 = 0;
    }
    unint64_t v11 = 0;
    long long v29 = 0;
    unsigned int v34 = 0;
    int v35 = 0;
    int v32 = 1;
LABEL_30:
    unint64_t v37 = ((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v29;
    if (v11 < v37 || v11 - v37 <= 3)
    {
      unint64_t v66 = 0;
      char v36 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v67 = *((void *)a1 + 3);
      if (v67)
      {
        int v87 = v32;
        unsigned int v91 = v34;
        int v97 = v35;
        if (v11)
        {
          (*(void (**)(uint64_t))(*(void *)v67 + 16))(v67);
          char v36 = *(WTF::StringImpl **)a1;
          unint64_t v66 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v66 = 0;
          char v36 = 0;
        }
        unsigned int v34 = v91;
        int v35 = v97;
        int v32 = v87;
      }
    }
    else
    {
      unint64_t v38 = (_DWORD *)((*((void *)a1 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *((void *)a1 + 2) = v38 + 1;
      if (v29)
      {
        int v39 = 0;
        unsigned int v40 = *v38 & 0xFFFFFF00;
        int v41 = *v38;
        goto LABEL_34;
      }
      unint64_t v66 = v11;
    }
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result)
    {
      int v85 = v32;
      unsigned int v89 = v34;
      int v95 = v35;
      if (v66)
      {
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)result + 16))(result, v36, v66);
        unsigned int v40 = 0;
        int v41 = 0;
        long long v29 = *(WTF::StringImpl **)a1;
        unint64_t v11 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        long long v29 = 0;
        unsigned int v40 = 0;
        int v41 = 0;
      }
      int v39 = 1;
      unsigned int v34 = v89;
      int v35 = v95;
      int v32 = v85;
    }
    else
    {
      unint64_t v11 = 0;
      long long v29 = 0;
      unsigned int v40 = 0;
      int v41 = 0;
      int v39 = 1;
    }
LABEL_34:
    unint64_t v42 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v29;
    if (v11 < v42 || v11 - v42 <= 7) {
      break;
    }
    unint64_t v43 = (WTF::StringImpl **)((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    *((void *)a1 + 2) = v43 + 1;
    if (!v29)
    {
      unint64_t v68 = v11;
      CFTypeRef v69 = 0;
      goto LABEL_88;
    }
    int v44 = 0;
    uint64_t v45 = *v43;
LABEL_38:
    if (!LOBYTE(v107[1])) {
      goto LABEL_129;
    }
    uint64_t v46 = v107[0];
    v107[0] = 0;
    if (v32) {
      goto LABEL_129;
    }
    if (v39) {
      goto LABEL_129;
    }
    if (v44) {
      goto LABEL_129;
    }
    int v47 = 0;
    if (v9) {
      goto LABEL_129;
    }
LABEL_43:
    if (v106)
    {
      uint64_t v48 = v105;
      long long v105 = 0;
      if (v104)
      {
        uint64_t v49 = v103;
        long long v103 = 0;
        if (v102)
        {
          v107[0] = (WTF::StringImpl *)v101[0];
          *(WTF::StringImpl **)((char *)v107 + 5) = *(WTF::StringImpl **)((char *)v101 + 5);
          if (!v17 && !v22 && v27 > 0xFF && !v47)
          {
            *(_DWORD *)(a2 + 56) = v35 | v34;
            *(_DWORD *)(a2 + 60) = v41 | v40;
            *(void *)(a2 + 64) = v45;
            *(void *)a2 = v10;
            *(void *)(a2 + 8) = v48;
            *(void *)(a2 + 16) = v49;
            *(_OWORD *)(a2 + 24) = *(_OWORD *)v107;
            *(_DWORD *)(a2 + 40) = v18;
            *(_WORD *)(a2 + 44) = v24 | ((_WORD)v27 << 8);
            *(void *)(a2 + 48) = v46;
            *(unsigned char *)(a2 + 72) = 1;
            goto LABEL_51;
          }
        }
      }
    }
LABEL_129:
    __break(1u);
LABEL_130:
    unint64_t v54 = 0;
    uint64_t v73 = *((void *)a1 + 3);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    if (v73 && v11)
    {
      (*(void (**)(uint64_t))(*(void *)v73 + 16))(v73);
      unsigned int v12 = *(WTF::StringImpl **)a1;
      unint64_t v54 = *((void *)a1 + 1);
    }
    else
    {
      unsigned int v12 = 0;
    }
  }
  unint64_t v68 = 0;
  CFTypeRef v69 = 0;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v70 = *((void *)a1 + 3);
  if (v70)
  {
    int v76 = v39;
    unsigned int v78 = v40;
    int v82 = v41;
    int v88 = v32;
    unsigned int v92 = v34;
    int v98 = v35;
    if (v11)
    {
      (*(void (**)(uint64_t))(*(void *)v70 + 16))(v70);
      CFTypeRef v69 = *(WTF::StringImpl **)a1;
      unint64_t v68 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v68 = 0;
      CFTypeRef v69 = 0;
    }
    unsigned int v34 = v92;
    int v35 = v98;
    int v41 = v82;
    int v32 = v88;
    int v39 = v76;
    unsigned int v40 = v78;
  }
LABEL_88:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v71 = *((void *)a1 + 3);
  if (v71)
  {
    if (v68)
    {
      int v75 = v39;
      unsigned int v77 = v40;
      int v81 = v41;
      int v86 = v32;
      unsigned int v90 = v34;
      int v96 = v35;
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v71 + 16))(v71, v69, v68);
      unsigned int v34 = v90;
      int v35 = v96;
      int v41 = v81;
      int v32 = v86;
      int v39 = v75;
      unsigned int v40 = v77;
      if (*(void *)a1)
      {
        uint64_t v45 = 0;
        int v44 = 1;
        goto LABEL_38;
      }
    }
  }
  if (LOBYTE(v107[1]))
  {
    uint64_t v74 = v107[0];
    v107[0] = 0;
    if (v74)
    {
      unsigned int v80 = v40;
      int v84 = v41;
      unsigned int v94 = v34;
      int v100 = v35;
      if (*(_DWORD *)v74 == 2) {
        WTF::StringImpl::destroy(v74, v29);
      }
      else {
        *(_DWORD *)v74 -= 2;
      }
      unsigned int v34 = v94;
      int v35 = v100;
      unsigned int v40 = v80;
      int v41 = v84;
    }
  }
  long long v29 = *(WTF::StringImpl **)a1;
  uint64_t v72 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
  if (result)
  {
    unsigned int v79 = v40;
    int v83 = v41;
    unsigned int v93 = v34;
    int v99 = v35;
    if (v72)
    {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
                                                                                                  + 16))(result, v29);
      uint64_t v45 = *(WTF::StringImpl **)a1;
      if (*(void *)a1)
      {
        uint64_t v46 = 0;
        int v47 = 1;
        unsigned int v34 = v93;
        int v35 = v99;
        unsigned int v40 = v79;
        int v41 = v83;
        if (v9) {
          goto LABEL_129;
        }
        goto LABEL_43;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 72) = 0;
LABEL_51:
  if (v104)
  {
    uint64_t result = v103;
    long long v103 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v106)
  {
    uint64_t result = v105;
    long long v105 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1987F793C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16, WTF::StringImpl *a17, char a18, WTF::StringImpl *a19, char a20)
{
  if (a20 && a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

int64_t IPC::Decoder::decode<WTF::MediaTime>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  int64_t result = IPC::ArgumentCoder<WTF::MediaTime,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    int64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::InitializationSegmentInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2);
  IPC::VectorArgumentCoder<false,WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 16);
  IPC::VectorArgumentCoder<false,WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 32);

  return IPC::VectorArgumentCoder<false,WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 48);
}

uint64_t IPC::ArgumentCoder<WebKit::InitializationSegmentInfo,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::MediaTime>(a1, (uint64_t)v27);
  IPC::Decoder::decode<WTF::Vector<WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v24, a1);
  IPC::Decoder::decode<WTF::Vector<WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v21, a1);
  uint64_t result = (uint64_t)IPC::Decoder::decode<WTF::Vector<WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v18, a1);
  if (*(void *)a1)
  {
    if (v28)
    {
      *(void *)&long long v14 = v27[0];
      *(void *)((char *)&v14 + 5) = *(void *)((char *)v27 + 5);
      if (v26)
      {
        uint64_t v6 = v24;
        uint64_t v7 = v25;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        if (v23)
        {
          uint64_t v8 = v21;
          uint64_t v9 = v22;
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          if (v20)
          {
            uint64_t v10 = v18;
            uint64_t v18 = 0;
            *(_OWORD *)a2 = v14;
            v15[0] = 0;
            *(void *)(a2 + 16) = v6;
            v15[1] = 0;
            *(void *)(a2 + 24) = v7;
            v16[0] = 0;
            *(void *)(a2 + 32) = v8;
            v16[1] = 0;
            *(void *)(a2 + 40) = v9;
            v17[0] = 0;
            *(void *)(a2 + 48) = v10;
            v17[1] = 0;
            uint64_t v11 = v19;
            uint64_t v19 = 0;
            *(void *)(a2 + 56) = v11;
            *(unsigned char *)(a2 + 64) = 1;
            WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v5);
            WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v12);
            WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v13);
LABEL_7:
            uint64_t result = WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v5);
            goto LABEL_8;
          }
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 64) = 0;
  if (v20) {
    goto LABEL_7;
  }
LABEL_8:
  if (v23) {
    uint64_t result = WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v5);
  }
  if (v26) {
    return WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v5);
  }
  return result;
}

void sub_1987F7C3C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  if (a22) {
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a20, a2);
  }
  if (*(unsigned char *)(v22 - 64)) {
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22 - 80, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WTF::Vector<WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v18 = *((void *)a2 + 3);
    if (v18)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v18 + 16))(v18, v5, v4);
        uint64_t v17 = *(void *)a2;
        unint64_t v16 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
      }
    }
    goto LABEL_25;
  }
  uint64_t v8 = (unint64_t *)(v5 + v6);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v16 = v4;
    uint64_t v17 = 0;
LABEL_25:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v19 = *((void *)a2 + 3);
    if (v19 && v16) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
LABEL_47:
    uint64_t v27 = *(void *)a2;
    uint64_t v28 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result)
    {
      if (v28) {
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v27);
      }
    }
    return result;
  }
  unint64_t v9 = *v8;
  int v35 = 0;
  uint64_t v36 = 0;
  if (v9 >= 0xAAAA)
  {
    do
    {
      uint64_t result = IPC::Decoder::decode<WebKit::InitializationSegmentInfo::TrackInformation>((uint64_t)&v30, a2);
      if (!v34) {
        goto LABEL_46;
      }
      if (HIDWORD(v36) == v36)
      {
        uint64_t result = (WTF::StringImpl *)WTF::Vector<WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::InitializationSegmentInfo::TrackInformation>((unsigned int *)&v35, (unint64_t)&v30);
      }
      else
      {
        char v20 = (char *)v35 + 24 * HIDWORD(v36);
        uint64_t v21 = v30;
        unint64_t v30 = 0;
        *(void *)char v20 = v21;
        LOWORD(v21) = v31;
        v20[10] = v32;
        *((_WORD *)v20 + 4) = (_WORD)v21;
        *((void *)v20 + 2) = v33;
        ++HIDWORD(v36);
      }
      if (v34)
      {
        uint64_t result = v30;
        unint64_t v30 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
      --v9;
    }
    while (v9);
    unsigned int v22 = HIDWORD(v36);
    char v23 = v35;
    if (v36 > HIDWORD(v36))
    {
      uint64_t v24 = v35;
      if (HIDWORD(v36))
      {
        if (HIDWORD(v36) >= 0xAAAAAAB)
        {
          __break(0xC471u);
          return result;
        }
        unsigned int v25 = 24 * HIDWORD(v36);
        char v26 = (WTF *)WTF::fastMalloc((WTF *)(24 * HIDWORD(v36)));
        LODWORD(v36) = v25 / 0x18;
        int v35 = v26;
        uint64_t v24 = v23;
        if (v26 != v23)
        {
          WTF::VectorMover<false,WebKit::InitializationSegmentInfo::TrackInformation>::move(v23, (WTF::StringImpl *)((char *)v23 + 24 * v22), (uint64_t)v26);
          uint64_t v24 = v35;
        }
      }
      if (v23)
      {
        if (v24 == v23)
        {
          int v35 = 0;
          LODWORD(v36) = 0;
        }
        WTF::fastFree(v23, a2);
        char v23 = v35;
      }
      else
      {
        char v23 = v24;
      }
    }
    *(void *)a1 = v23;
    uint64_t v29 = v36;
    int v35 = 0;
    uint64_t v36 = 0;
    *(void *)(a1 + 8) = v29;
    goto LABEL_23;
  }
  if (v9)
  {
    LODWORD(v36) = 24 * (int)v9 / 0x18u;
    int v35 = (WTF *)WTF::fastMalloc((WTF *)(24 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebKit::InitializationSegmentInfo::TrackInformation>((uint64_t)&v30, a2);
      if (!v34) {
        break;
      }
      if (HIDWORD(v36) == v36)
      {
        WTF::Vector<WebKit::InitializationSegmentInfo::TrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::InitializationSegmentInfo::TrackInformation>((unsigned int *)&v35, (unint64_t)&v30);
      }
      else
      {
        uint64_t v10 = (char *)v35 + 24 * HIDWORD(v36);
        uint64_t v11 = v30;
        unint64_t v30 = 0;
        *(void *)uint64_t v10 = v11;
        LOWORD(v11) = v31;
        v10[10] = v32;
        *((_WORD *)v10 + 4) = (_WORD)v11;
        *((void *)v10 + 2) = v33;
        ++HIDWORD(v36);
      }
      if (v34)
      {
        unsigned int v12 = v30;
        unint64_t v30 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, a2);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
      }
      if (!--v9)
      {
        unint64_t v13 = v35;
        uint64_t v14 = v36;
        goto LABEL_22;
      }
    }
LABEL_46:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, a2);
    goto LABEL_47;
  }
  unint64_t v13 = 0;
  uint64_t v14 = 0;
LABEL_22:
  int v35 = 0;
  uint64_t v36 = 0;
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v14;
LABEL_23:
  *(unsigned char *)(a1 + 16) = 1;
  return (WTF::StringImpl *)WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, a2);
}

void sub_1987F8054(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  if (a12 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, a2);
  _Unwind_Resume(a1);
}

unsigned char *IPC::ArgumentCoder<WebKit::MediaDescriptionInfo,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  char v4 = *(unsigned char *)(a2 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6) {
    goto LABEL_7;
  }
  *uint64_t v5 = v4;
  char v7 = *(unsigned char *)(a2 + 9);
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1987F8168);
  }
  *uint64_t v8 = v7;
  char v10 = *(unsigned char *)(a2 + 10);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x1987F8148);
  }
  *uint64_t result = v10;
  return result;
}

unsigned char *IPC::ArgumentCoder<WebKit::RemoteMediaPlayerProxyConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
  IPC::VectorArgumentCoder<false,WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 32);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 48);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 72);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 96);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 120);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 144);
  IPC::ArgumentCoder<WebCore::LayoutRect,void>::encode(a1, (int *)(a2 + 168));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 184);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 212));
  unsigned int v4 = *(_DWORD *)(a2 + 212);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 200);
    uint64_t v6 = v5 + 40 * v4;
    while (1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v5);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(v5 + 8));
      uint64_t v7 = v5 + 16;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(v5 + 16));
      char v8 = *(unsigned char *)(v5 + 24);
      uint64_t v9 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v10) {
        break;
      }
      unsigned char *v9 = v8;
      char v11 = *(unsigned char *)(v7 + 9);
      uint64_t v12 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1987F8478);
      }
      *uint64_t v12 = v11;
      char v14 = *(unsigned char *)(v7 + 10);
      long long v15 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v16)
      {
        __break(0xC471u);
        JUMPOUT(0x1987F8498);
      }
      *long long v15 = v14;
      IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(v7 + 12));
      char v17 = *(unsigned char *)(v7 + 16);
      uint64_t v18 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v19)
      {
        __break(0xC471u);
        JUMPOUT(0x1987F84B8);
      }
      *uint64_t v18 = v17;
      uint64_t v5 = v7 + 24;
      if (v7 + 24 == v6) {
        goto LABEL_8;
      }
    }
    __break(0xC471u);
LABEL_25:
    JUMPOUT(0x1987F8458);
  }
LABEL_8:
  unsigned __int8 v38 = *(_DWORD *)(a2 + 240);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v38);
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, a2 + 216, v38);
  int v40 = *(_DWORD *)(a2 + 248);
  IPC::Encoder::operator<<<int>(a1, &v40);
  int v39 = *(_DWORD *)(a2 + 252);
  IPC::Encoder::operator<<<int>(a1, &v39);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 256));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 260));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 264));
  char v20 = *(unsigned char *)(a2 + 272);
  uint64_t v21 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x1987F84D8);
  }
  *uint64_t v21 = v20;
  char v23 = *(unsigned char *)(a2 + 273);
  uint64_t v24 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v25)
  {
    __break(0xC471u);
    JUMPOUT(0x1987F84F8);
  }
  *uint64_t v24 = v23;
  char v26 = *(unsigned char *)(a2 + 274);
  uint64_t v27 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v28)
  {
    __break(0xC471u);
    JUMPOUT(0x1987F8518);
  }
  *uint64_t v27 = v26;
  char v29 = *(unsigned char *)(a2 + 275);
  unint64_t v30 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v31)
  {
    __break(0xC471u);
    JUMPOUT(0x1987F8538);
  }
  *unint64_t v30 = v29;
  char v32 = *(unsigned char *)(a2 + 276);
  uint64_t v33 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v34)
  {
    __break(0xC471u);
    JUMPOUT(0x1987F8558);
  }
  *uint64_t v33 = v32;
  char v35 = *(unsigned char *)(a2 + 277);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v37)
  {
    __break(0xC471u);
    goto LABEL_25;
  }
  *uint64_t result = v35;
  return result;
}

void IPC::ArgumentCoder<WebKit::RemoteMediaPlayerProxyConfiguration,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v391 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v352);
  IPC::Decoder::decode<WTF::String>(v2, (uint64_t)&v350);
  IPC::Decoder::decode<WTF::String>(v2, (uint64_t)&v348);
  IPC::Decoder::decode<WTF::String>(v2, (uint64_t)&v346);
  IPC::Decoder::decode<WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v343, v2);
  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v339, v2);
  IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(&v335, v2);
  IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((unint64_t)&v331, (uint64_t *)v2);
  IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((unint64_t)&v327, (uint64_t *)v2);
  IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((unint64_t)&v323, (uint64_t *)v2);
  IPC::Decoder::decode<WebCore::LayoutRect>((uint64_t *)v2, (uint64_t)&v321);
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v2, v3, (uint64_t)&v318);
  unint64_t v4 = *((void *)v2 + 1);
  uint64_t v5 = *(char **)v2;
  unint64_t v6 = ((*((void *)v2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    unint64_t v19 = 0;
    char v20 = 0;
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v21 = *((void *)v2 + 3);
    if (v21)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
        char v20 = *(char **)v2;
        unint64_t v19 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v19 = 0;
        char v20 = 0;
      }
    }
  }
  else
  {
    uint64_t v7 = (unint64_t *)&v5[v6];
    *((void *)v2 + 2) = v7 + 1;
    if (v5)
    {
      unint64_t v8 = *v7;
      v387 = 0;
      uint64_t v388 = 0;
      if (v8 < 0x6666)
      {
        if (v8)
        {
          uint64_t v9 = WTF::fastMalloc((WTF *)(40 * v8));
          LODWORD(v388) = 40 * (int)v8 / 0x28u;
          v387 = (WTF::StringImpl *)v9;
          do
          {
            IPC::Decoder::decode<WebCore::PlatformTextTrackData>((uint64_t)&v354, v2);
            if (!(_BYTE)v359) {
              goto LABEL_33;
            }
            if (HIDWORD(v388) == v388)
            {
              WTF::Vector<WebCore::PlatformTextTrackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PlatformTextTrackData>((unsigned int *)&v387, (unint64_t)&v354);
            }
            else
            {
              char v11 = (char *)v387 + 40 * HIDWORD(v388);
              uint64_t v12 = (uint64_t)v354;
              v354 = 0;
              *(void *)char v11 = v12;
              uint64_t v13 = v355;
              v355 = 0;
              *((void *)v11 + 1) = v13;
              char v14 = v356;
              v356 = 0;
              *((void *)v11 + 2) = v14;
              long long v15 = v357;
              v11[32] = v358;
              *((void *)v11 + 3) = v15;
              ++HIDWORD(v388);
            }
            std::__optional_destruct_base<WebCore::PlatformTextTrackData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v354, v10);
            --v8;
          }
          while (v8);
          uint64_t v16 = v387;
          unsigned int v18 = v388;
          unsigned int v17 = HIDWORD(v388);
        }
        else
        {
          unsigned int v17 = 0;
          unsigned int v18 = 0;
          uint64_t v16 = 0;
        }
        v387 = 0;
        v315 = v16;
LABEL_15:
        uint64_t v388 = 0;
        unint64_t v316 = __PAIR64__(v17, v18);
        char v317 = 1;
        WTF::Vector<WebCore::PlatformTextTrackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v387, v5);
        goto LABEL_35;
      }
      while (1)
      {
        IPC::Decoder::decode<WebCore::PlatformTextTrackData>((uint64_t)&v354, v2);
        if (!(_BYTE)v359) {
          break;
        }
        if (HIDWORD(v388) == v388)
        {
          WTF::Vector<WebCore::PlatformTextTrackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PlatformTextTrackData>((unsigned int *)&v387, (unint64_t)&v354);
        }
        else
        {
          char v23 = (char *)v387 + 40 * HIDWORD(v388);
          uint64_t v24 = (uint64_t)v354;
          v354 = 0;
          *(void *)char v23 = v24;
          uint64_t v25 = v355;
          v355 = 0;
          *((void *)v23 + 1) = v25;
          char v26 = v356;
          v356 = 0;
          *((void *)v23 + 2) = v26;
          uint64_t v27 = v357;
          v23[32] = v358;
          *((void *)v23 + 3) = v27;
          ++HIDWORD(v388);
        }
        std::__optional_destruct_base<WebCore::PlatformTextTrackData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v354, v10);
        if (!--v8)
        {
          unsigned int v28 = HIDWORD(v388);
          char v29 = v387;
          if (v388 > HIDWORD(v388))
          {
            unint64_t v30 = v387;
            if (HIDWORD(v388))
            {
              if (HIDWORD(v388) >= 0x6666667)
              {
                __break(0xC471u);
                JUMPOUT(0x1987F9CACLL);
              }
              uint64_t v31 = WTF::fastMalloc((WTF *)(40 * HIDWORD(v388)));
              LODWORD(v388) = 40 * v28 / 0x28;
              v387 = (WTF::StringImpl *)v31;
              unint64_t v30 = v29;
              if ((WTF::StringImpl *)v31 != v29)
              {
                WTF::VectorMover<false,WebCore::PlatformTextTrackData>::move(v29, (WTF::StringImpl *)((char *)v29 + 40 * v28), v31);
                unint64_t v30 = v387;
              }
            }
            if (v29)
            {
              if (v30 == v29)
              {
                v387 = 0;
                LODWORD(v388) = 0;
              }
              WTF::fastFree(v29, v5);
              char v29 = v387;
            }
            else
            {
              char v29 = v30;
            }
          }
          v387 = 0;
          v315 = v29;
          unsigned int v18 = v388;
          unsigned int v17 = HIDWORD(v388);
          goto LABEL_15;
        }
      }
LABEL_33:
      LOBYTE(v315) = 0;
      char v317 = 0;
      std::__optional_destruct_base<WebCore::PlatformTextTrackData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v354, v10);
      WTF::Vector<WebCore::PlatformTextTrackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v387, v32);
      goto LABEL_34;
    }
    unint64_t v19 = v4;
    char v20 = 0;
  }
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v22 = *((void *)v2 + 3);
  if (v22 && v19) {
    (*(void (**)(uint64_t, char *))(*(void *)v22 + 16))(v22, v20);
  }
  LOBYTE(v315) = 0;
  char v317 = 0;
LABEL_34:
  uint64_t v33 = *(char **)v2;
  unint64_t v34 = *((void *)v2 + 1);
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v35 = *((void *)v2 + 3);
  if (v35) {
    goto LABEL_162;
  }
  while (1)
  {
LABEL_35:
    IPC::Decoder::decode<WebCore::SecurityOriginData>((uint64_t *)v2, &v387);
    uint64_t v36 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)v2);
    uint64_t v38 = v37;
    if (!v37)
    {
      char v110 = *(char **)v2;
      uint64_t v111 = *((void *)v2 + 1);
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v112 = *((void *)v2 + 3);
      if (v112)
      {
        if (v111) {
          (*(void (**)(uint64_t, char *))(*(void *)v112 + 16))(v112, v110);
        }
      }
    }
    int v39 = IPC::Decoder::decode<WebCore::FloatPoint>((unint64_t *)v2);
    char v41 = v40;
    unint64_t v34 = *((void *)v2 + 1);
    uint64_t v33 = *(char **)v2;
    unint64_t v42 = ((*((void *)v2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v2;
    if (v34 < v42 || v34 - v42 <= 7)
    {
      unint64_t v113 = 0;
      uint64_t v114 = 0;
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v115 = *((void *)v2 + 3);
      if (v115)
      {
        char v202 = v41;
        v203 = v39;
        if (v34)
        {
          (*(void (**)(uint64_t))(*(void *)v115 + 16))(v115);
          uint64_t v114 = *(char **)v2;
          unint64_t v113 = *((void *)v2 + 1);
        }
        else
        {
          unint64_t v113 = 0;
          uint64_t v114 = 0;
        }
        int v39 = v203;
        char v41 = v202;
      }
    }
    else
    {
      unint64_t v43 = (IPC::Decoder **)&v33[v42];
      uint64_t v44 = (uint64_t)&v33[v42 + 8];
      *((void *)v2 + 2) = v44;
      if (v33)
      {
        int v45 = 0;
        uint64_t v46 = *v43;
        goto LABEL_40;
      }
      unint64_t v113 = v34;
      uint64_t v114 = 0;
    }
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v116 = *((void *)v2 + 3);
    if (!v116)
    {
      uint64_t v46 = 0;
      unint64_t v113 = 0;
      uint64_t v33 = 0;
      int v45 = 1;
      goto LABEL_170;
    }
    char v186 = v41;
    v187 = v39;
    if (!v113)
    {
      uint64_t v46 = 0;
      uint64_t v33 = 0;
      int v45 = 1;
LABEL_170:
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v117 = *((void *)v2 + 3);
      if (v117)
      {
        int v198 = v45;
        v199 = v46;
        char v200 = v41;
        v201 = v39;
        if (v113)
        {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v117 + 16))(v117, v33, v113);
          unsigned int v50 = 0;
          uint64_t v33 = *(char **)v2;
          unint64_t v34 = *((void *)v2 + 1);
        }
        else
        {
          unint64_t v34 = 0;
          uint64_t v33 = 0;
          unsigned int v50 = 0;
        }
        int v39 = v201;
        char v41 = v200;
        uint64_t v46 = v199;
        int v45 = v198;
      }
      else
      {
        unint64_t v34 = 0;
        uint64_t v33 = 0;
        unsigned int v50 = 0;
      }
      goto LABEL_172;
    }
    (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v116 + 16))(v116, v114, v113);
    uint64_t v46 = 0;
    uint64_t v33 = *(char **)v2;
    unint64_t v34 = *((void *)v2 + 1);
    int v45 = 1;
    uint64_t v44 = *((void *)v2 + 2);
    int v39 = v187;
    char v41 = v186;
LABEL_40:
    unint64_t v47 = v44 - (void)v33;
    if (v34 <= v47)
    {
      int v204 = v45;
      v205 = v46;
      char v206 = v41;
      char v207 = v39;
      unint64_t v113 = 0;
      uint64_t v208 = *((void *)v2 + 3);
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      if (v208 && v34)
      {
        (*(void (**)(uint64_t))(*(void *)v208 + 16))(v208);
        uint64_t v33 = *(char **)v2;
        unint64_t v113 = *((void *)v2 + 1);
      }
      else
      {
        uint64_t v33 = 0;
      }
      int v39 = v207;
      char v41 = v206;
      uint64_t v46 = v205;
      int v45 = v204;
      goto LABEL_170;
    }
    uint64_t v48 = &v33[v47];
    uint64_t v49 = (uint64_t)&v33[v47 + 1];
    *((void *)v2 + 2) = v49;
    if (!v33)
    {
      unint64_t v113 = v34;
      goto LABEL_170;
    }
    unsigned int v50 = *v48;
    if (v50 < 2)
    {
      int v51 = 0;
      char v52 = 1;
      goto LABEL_44;
    }
LABEL_172:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v118 = *((void *)v2 + 3);
    if (!v118)
    {
      char v53 = 0;
      unint64_t v119 = 0;
      uint64_t v33 = 0;
      int v51 = 1;
      goto LABEL_174;
    }
    int v176 = v45;
    uint64_t v177 = v46;
    char v178 = v41;
    v179 = v39;
    if (!v34)
    {
      char v53 = 0;
      unint64_t v119 = 0;
      uint64_t v33 = 0;
      int v51 = 1;
LABEL_174:
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v120 = *((void *)v2 + 3);
      if (v120)
      {
        char v275 = v53;
        int v193 = v51;
        int v194 = v45;
        v195 = v46;
        char v196 = v41;
        v197 = v39;
        if (v119)
        {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v120 + 16))(v120, v33, v119);
          unsigned int v57 = 0;
          uint64_t v33 = *(char **)v2;
          unint64_t v34 = *((void *)v2 + 1);
        }
        else
        {
          unint64_t v34 = 0;
          uint64_t v33 = 0;
          unsigned int v57 = 0;
        }
        int v39 = v197;
        char v41 = v196;
        uint64_t v46 = v195;
        int v45 = v194;
        int v51 = v193;
        char v53 = v275;
      }
      else
      {
        unint64_t v34 = 0;
        uint64_t v33 = 0;
        unsigned int v57 = 0;
      }
      goto LABEL_176;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v118 + 16))(v118, v33);
    char v52 = 0;
    uint64_t v33 = *(char **)v2;
    unint64_t v34 = *((void *)v2 + 1);
    int v51 = 1;
    uint64_t v49 = *((void *)v2 + 2);
    int v39 = v179;
    char v41 = v178;
    uint64_t v46 = v177;
    int v45 = v176;
LABEL_44:
    if (v50) {
      char v53 = v52;
    }
    else {
      char v53 = 0;
    }
    unint64_t v54 = v49 - (void)v33;
    if (v34 <= v54)
    {
      char v209 = v53;
      int v210 = v51;
      int v211 = v45;
      v212 = v46;
      char v213 = v41;
      v214 = v39;
      unint64_t v119 = 0;
      uint64_t v215 = *((void *)v2 + 3);
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      if (v215 && v34)
      {
        (*(void (**)(uint64_t))(*(void *)v215 + 16))(v215);
        uint64_t v33 = *(char **)v2;
        unint64_t v119 = *((void *)v2 + 1);
      }
      else
      {
        uint64_t v33 = 0;
      }
      int v39 = v214;
      char v41 = v213;
      uint64_t v46 = v212;
      int v45 = v211;
      int v51 = v210;
      char v53 = v209;
      goto LABEL_174;
    }
    uint64_t v55 = &v33[v54];
    uint64_t v56 = (uint64_t)&v33[v54 + 1];
    *((void *)v2 + 2) = v56;
    if (!v33)
    {
      unint64_t v119 = v34;
      goto LABEL_174;
    }
    unsigned int v57 = *v55;
    if (v57 < 2)
    {
      int v58 = 0;
      char v59 = 1;
      goto LABEL_51;
    }
LABEL_176:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v121 = *((void *)v2 + 3);
    if (!v121)
    {
      char v60 = 0;
      unint64_t v122 = 0;
      uint64_t v33 = 0;
      int v58 = 1;
      goto LABEL_178;
    }
    char v271 = v53;
    int v165 = v51;
    int v166 = v45;
    uint64_t v167 = v46;
    char v168 = v41;
    uint64_t v169 = v39;
    if (!v34)
    {
      char v60 = 0;
      unint64_t v122 = 0;
      uint64_t v33 = 0;
      int v58 = 1;
LABEL_178:
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v123 = *((void *)v2 + 3);
      if (v123)
      {
        char v309 = v60;
        int v256 = v58;
        char v274 = v53;
        int v188 = v51;
        int v189 = v45;
        v190 = v46;
        char v191 = v41;
        v192 = v39;
        if (v122)
        {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v123 + 16))(v123, v33, v122);
          unsigned int v64 = 0;
          uint64_t v33 = *(char **)v2;
          unint64_t v34 = *((void *)v2 + 1);
        }
        else
        {
          unint64_t v34 = 0;
          uint64_t v33 = 0;
          unsigned int v64 = 0;
        }
        int v39 = v192;
        char v41 = v191;
        uint64_t v46 = v190;
        int v45 = v189;
        int v51 = v188;
        char v53 = v274;
        int v58 = v256;
        char v60 = v309;
      }
      else
      {
        unint64_t v34 = 0;
        uint64_t v33 = 0;
        unsigned int v64 = 0;
      }
      goto LABEL_180;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v121 + 16))(v121, v33);
    char v59 = 0;
    uint64_t v33 = *(char **)v2;
    unint64_t v34 = *((void *)v2 + 1);
    uint64_t v56 = *((void *)v2 + 2);
    int v39 = v169;
    int v58 = 1;
    char v41 = v168;
    uint64_t v46 = v167;
    int v45 = v166;
    int v51 = v165;
    char v53 = v271;
LABEL_51:
    if (v57) {
      char v60 = v59;
    }
    else {
      char v60 = 0;
    }
    unint64_t v61 = v56 - (void)v33;
    if (v34 <= v61)
    {
      char v310 = v60;
      int v257 = v58;
      char v216 = v53;
      int v217 = v51;
      int v218 = v45;
      v219 = v46;
      char v220 = v41;
      v221 = v39;
      unint64_t v122 = 0;
      uint64_t v222 = *((void *)v2 + 3);
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      if (v222 && v34)
      {
        (*(void (**)(uint64_t))(*(void *)v222 + 16))(v222);
        uint64_t v33 = *(char **)v2;
        unint64_t v122 = *((void *)v2 + 1);
      }
      else
      {
        uint64_t v33 = 0;
      }
      int v39 = v221;
      char v41 = v220;
      uint64_t v46 = v219;
      int v45 = v218;
      int v51 = v217;
      char v53 = v216;
      int v58 = v257;
      char v60 = v310;
      goto LABEL_178;
    }
    uint64_t v62 = &v33[v61];
    uint64_t v63 = (uint64_t)&v33[v61 + 1];
    *((void *)v2 + 2) = v63;
    if (!v33)
    {
      unint64_t v122 = v34;
      goto LABEL_178;
    }
    unsigned int v64 = *v62;
    if (v64 < 2)
    {
      int v65 = 0;
      char v66 = 1;
      goto LABEL_58;
    }
LABEL_180:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v124 = *((void *)v2 + 3);
    if (!v124)
    {
      char v67 = 0;
      unint64_t v125 = 0;
      uint64_t v33 = 0;
      int v65 = 1;
      goto LABEL_182;
    }
    char v305 = v60;
    int v252 = v58;
    char v269 = v53;
    int v153 = v51;
    int v154 = v45;
    v155 = v46;
    char v156 = v41;
    v157 = v39;
    if (!v34)
    {
      char v67 = 0;
      unint64_t v125 = 0;
      uint64_t v33 = 0;
      int v65 = 1;
LABEL_182:
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v126 = *((void *)v2 + 3);
      if (v126)
      {
        char v297 = v67;
        char v308 = v60;
        int v180 = v65;
        int v255 = v58;
        char v273 = v53;
        int v181 = v51;
        int v182 = v45;
        v183 = v46;
        char v184 = v41;
        v185 = v39;
        if (v125)
        {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v126 + 16))(v126, v33, v125);
          unsigned int v71 = 0;
          uint64_t v33 = *(char **)v2;
          unint64_t v34 = *((void *)v2 + 1);
        }
        else
        {
          unint64_t v34 = 0;
          uint64_t v33 = 0;
          unsigned int v71 = 0;
        }
        int v39 = v185;
        char v41 = v184;
        uint64_t v46 = v183;
        int v45 = v182;
        int v51 = v181;
        char v53 = v273;
        int v58 = v255;
        char v67 = v297;
        char v60 = v308;
        int v65 = v180;
      }
      else
      {
        unint64_t v34 = 0;
        uint64_t v33 = 0;
        unsigned int v71 = 0;
      }
      goto LABEL_184;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v124 + 16))(v124, v33);
    char v66 = 0;
    uint64_t v33 = *(char **)v2;
    unint64_t v34 = *((void *)v2 + 1);
    int v65 = 1;
    uint64_t v63 = *((void *)v2 + 2);
    int v39 = v157;
    char v41 = v156;
    uint64_t v46 = v155;
    int v45 = v154;
    int v51 = v153;
    char v53 = v269;
    int v58 = v252;
    char v60 = v305;
LABEL_58:
    if (v64) {
      char v67 = v66;
    }
    else {
      char v67 = 0;
    }
    unint64_t v68 = v63 - (void)v33;
    if (v34 <= v68)
    {
      char v298 = v67;
      char v311 = v60;
      int v223 = v65;
      int v258 = v58;
      char v224 = v53;
      int v225 = v51;
      int v226 = v45;
      v227 = v46;
      char v228 = v41;
      v229 = v39;
      unint64_t v125 = 0;
      uint64_t v230 = *((void *)v2 + 3);
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      if (v230 && v34)
      {
        (*(void (**)(uint64_t))(*(void *)v230 + 16))(v230);
        uint64_t v33 = *(char **)v2;
        unint64_t v125 = *((void *)v2 + 1);
      }
      else
      {
        uint64_t v33 = 0;
      }
      int v39 = v229;
      char v41 = v228;
      uint64_t v46 = v227;
      int v45 = v226;
      int v51 = v225;
      char v53 = v224;
      int v58 = v258;
      char v67 = v298;
      char v60 = v311;
      int v65 = v223;
      goto LABEL_182;
    }
    CFTypeRef v69 = &v33[v68];
    uint64_t v70 = (uint64_t)&v33[v68 + 1];
    *((void *)v2 + 2) = v70;
    if (!v33)
    {
      unint64_t v125 = v34;
      goto LABEL_182;
    }
    unsigned int v71 = *v69;
    if (v71 < 2)
    {
      int v72 = 0;
      char v73 = 1;
      goto LABEL_65;
    }
LABEL_184:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v127 = *((void *)v2 + 3);
    if (!v127)
    {
      char v74 = 0;
      unint64_t v128 = 0;
      uint64_t v33 = 0;
      int v72 = 1;
      goto LABEL_186;
    }
    char v294 = v67;
    char v304 = v60;
    int v147 = v65;
    int v251 = v58;
    char v268 = v53;
    int v148 = v51;
    int v149 = v45;
    v150 = v46;
    char v151 = v41;
    v152 = v39;
    if (!v34)
    {
      char v74 = 0;
      unint64_t v128 = 0;
      uint64_t v33 = 0;
      int v72 = 1;
LABEL_186:
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v129 = *((void *)v2 + 3);
      if (v129)
      {
        char v281 = v74;
        int v288 = v72;
        char v296 = v67;
        char v307 = v60;
        int v170 = v65;
        int v254 = v58;
        char v272 = v53;
        int v171 = v51;
        int v172 = v45;
        v173 = v46;
        char v174 = v41;
        v175 = v39;
        if (v128)
        {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v129 + 16))(v129, v33, v128);
          unsigned int v78 = 0;
          uint64_t v33 = *(char **)v2;
          unint64_t v34 = *((void *)v2 + 1);
        }
        else
        {
          unint64_t v34 = 0;
          uint64_t v33 = 0;
          unsigned int v78 = 0;
        }
        int v39 = v175;
        char v41 = v174;
        uint64_t v46 = v173;
        int v45 = v172;
        int v51 = v171;
        char v53 = v272;
        char v74 = v281;
        int v58 = v254;
        char v67 = v296;
        char v60 = v307;
        int v65 = v170;
        int v72 = v288;
      }
      else
      {
        unint64_t v34 = 0;
        uint64_t v33 = 0;
        unsigned int v78 = 0;
      }
      goto LABEL_188;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v127 + 16))(v127, v33);
    char v73 = 0;
    uint64_t v33 = *(char **)v2;
    unint64_t v34 = *((void *)v2 + 1);
    uint64_t v70 = *((void *)v2 + 2);
    int v39 = v152;
    int v72 = 1;
    char v41 = v151;
    uint64_t v46 = v150;
    int v45 = v149;
    int v51 = v148;
    char v53 = v268;
    int v58 = v251;
    char v67 = v294;
    char v60 = v304;
    int v65 = v147;
LABEL_65:
    if (v71) {
      char v74 = v73;
    }
    else {
      char v74 = 0;
    }
    unint64_t v75 = v70 - (void)v33;
    if (v34 <= v75)
    {
      char v282 = v74;
      int v289 = v72;
      char v299 = v67;
      char v312 = v60;
      int v231 = v65;
      int v259 = v58;
      char v232 = v53;
      int v233 = v51;
      int v234 = v45;
      v235 = v46;
      char v236 = v41;
      v237 = v39;
      unint64_t v128 = 0;
      uint64_t v238 = *((void *)v2 + 3);
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      if (v238 && v34)
      {
        (*(void (**)(uint64_t))(*(void *)v238 + 16))(v238);
        uint64_t v33 = *(char **)v2;
        unint64_t v128 = *((void *)v2 + 1);
      }
      else
      {
        uint64_t v33 = 0;
      }
      int v39 = v237;
      char v41 = v236;
      uint64_t v46 = v235;
      int v45 = v234;
      int v51 = v233;
      char v53 = v232;
      int v58 = v259;
      char v67 = v299;
      char v60 = v312;
      int v65 = v231;
      char v74 = v282;
      int v72 = v289;
      goto LABEL_186;
    }
    int v76 = &v33[v75];
    uint64_t v77 = (uint64_t)&v33[v75 + 1];
    *((void *)v2 + 2) = v77;
    if (!v33)
    {
      unint64_t v128 = v34;
      goto LABEL_186;
    }
    unsigned int v78 = *v76;
    if (v78 < 2)
    {
      int v79 = 0;
      char v80 = 1;
      goto LABEL_72;
    }
LABEL_188:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v130 = *((void *)v2 + 3);
    if (!v130)
    {
      char v81 = 0;
      unint64_t v131 = 0;
      uint64_t v33 = 0;
      int v79 = 1;
      goto LABEL_190;
    }
    char v279 = v74;
    int v286 = v72;
    char v293 = v67;
    char v303 = v60;
    int v141 = v65;
    int v250 = v58;
    char v267 = v53;
    int v142 = v51;
    int v143 = v45;
    char v144 = v46;
    char v145 = v41;
    long long v146 = v39;
    if (!v34)
    {
      char v81 = 0;
      unint64_t v131 = 0;
      uint64_t v33 = 0;
      int v79 = 1;
LABEL_190:
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v132 = *((void *)v2 + 3);
      if (v132)
      {
        char v263 = v81;
        int v270 = v79;
        char v280 = v74;
        int v287 = v72;
        char v295 = v67;
        char v306 = v60;
        int v158 = v65;
        int v253 = v58;
        char v159 = v53;
        int v160 = v51;
        int v161 = v45;
        v162 = v46;
        char v163 = v41;
        v164 = v39;
        if (v131)
        {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v132 + 16))(v132, v33, v131);
          uint64_t v33 = *(char **)v2;
          unint64_t v34 = *((void *)v2 + 1);
        }
        else
        {
          unint64_t v34 = 0;
          uint64_t v33 = 0;
        }
        int v39 = v164;
        char v41 = v163;
        uint64_t v46 = v162;
        int v45 = v161;
        int v51 = v160;
        char v53 = v159;
        int v58 = v253;
        char v81 = v263;
        char v67 = v295;
        char v60 = v306;
        int v65 = v158;
        char v74 = v280;
        int v72 = v287;
        int v79 = v270;
      }
      else
      {
        unint64_t v34 = 0;
        uint64_t v33 = 0;
      }
      goto LABEL_192;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v130 + 16))(v130, v33);
    char v80 = 0;
    uint64_t v33 = *(char **)v2;
    unint64_t v34 = *((void *)v2 + 1);
    uint64_t v77 = *((void *)v2 + 2);
    int v39 = v146;
    int v79 = 1;
    char v41 = v145;
    uint64_t v46 = v144;
    int v45 = v143;
    int v51 = v142;
    char v53 = v267;
    char v74 = v279;
    int v58 = v250;
    char v67 = v293;
    char v60 = v303;
    int v65 = v141;
    int v72 = v286;
LABEL_72:
    if (v78) {
      char v81 = v80;
    }
    else {
      char v81 = 0;
    }
    unint64_t v82 = v77 - (void)v33;
    if (v34 <= v82)
    {
      char v264 = v81;
      int v276 = v79;
      char v283 = v74;
      int v290 = v72;
      char v300 = v67;
      char v313 = v60;
      int v239 = v65;
      int v260 = v58;
      char v240 = v53;
      int v241 = v51;
      int v242 = v45;
      v243 = v46;
      char v244 = v41;
      v245 = v39;
      unint64_t v131 = 0;
      uint64_t v246 = *((void *)v2 + 3);
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      if (v246 && v34)
      {
        (*(void (**)(uint64_t))(*(void *)v246 + 16))(v246);
        uint64_t v33 = *(char **)v2;
        unint64_t v131 = *((void *)v2 + 1);
      }
      else
      {
        uint64_t v33 = 0;
      }
      int v39 = v245;
      char v41 = v244;
      uint64_t v46 = v243;
      int v45 = v242;
      int v51 = v241;
      char v53 = v240;
      int v58 = v260;
      char v81 = v264;
      char v67 = v300;
      char v60 = v313;
      int v65 = v239;
      char v74 = v283;
      int v72 = v290;
      int v79 = v276;
      goto LABEL_190;
    }
    int v83 = &v33[v82];
    *((void *)v2 + 2) = v83 + 1;
    if (!v33)
    {
      unint64_t v131 = v34;
      goto LABEL_190;
    }
    unsigned int v84 = *v83;
    if (v84 <= 1)
    {
      uint64_t v35 = 0;
      BOOL v85 = v84 != 0;
      goto LABEL_79;
    }
LABEL_192:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v133 = *((void *)v2 + 3);
    if (!v133) {
      break;
    }
    if (!v34) {
      break;
    }
    char v262 = v81;
    int v266 = v79;
    char v278 = v74;
    int v285 = v72;
    char v292 = v67;
    int v302 = v65;
    char v134 = v60;
    int v249 = v58;
    char v135 = v53;
    int v136 = v51;
    int v137 = v45;
    long long v138 = v46;
    char v139 = v41;
    long long v140 = v39;
    (*(void (**)(uint64_t, char *))(*(void *)v133 + 16))(v133, v33);
    int v39 = v140;
    int v58 = v249;
    char v81 = v262;
    char v67 = v292;
    int v65 = v302;
    char v74 = v278;
    int v72 = v285;
    int v79 = v266;
    if (!*(void *)v2) {
      break;
    }
    char v41 = v139;
    uint64_t v46 = v138;
    int v45 = v137;
    int v51 = v136;
    char v53 = v135;
    char v60 = v134;
    BOOL v85 = 0;
    uint64_t v35 = 1;
LABEL_79:
    if (v353)
    {
      int v86 = v352;
      v352 = 0;
      v354 = v86;
      if (v351)
      {
        int v87 = v350;
        v350 = 0;
        v355 = v87;
        if (v349)
        {
          int v88 = v348;
          v348 = 0;
          v356 = v88;
          if (v347)
          {
            unsigned int v89 = v346;
            v346 = 0;
            v357 = v89;
            if (v345)
            {
              uint64_t v358 = v343;
              uint64_t v90 = v344;
              uint64_t v343 = 0;
              uint64_t v344 = 0;
              uint64_t v359 = v90;
              if (v342)
              {
                LOBYTE(v360) = 0;
                char v362 = 0;
                if (v341)
                {
                  uint64_t v360 = v339;
                  uint64_t v91 = v340;
                  uint64_t v339 = 0;
                  uint64_t v340 = 0;
                  uint64_t v361 = v91;
                  char v362 = 1;
                }
                if (v338)
                {
                  LOBYTE(v363) = 0;
                  char v365 = 0;
                  if (v337)
                  {
                    uint64_t v363 = v335;
                    uint64_t v92 = v336;
                    uint64_t v335 = 0;
                    uint64_t v336 = 0;
                    uint64_t v364 = v92;
                    char v365 = 1;
                  }
                  if (v334)
                  {
                    LOBYTE(v366) = 0;
                    char v368 = 0;
                    if (v333)
                    {
                      v366 = v331;
                      uint64_t v93 = v332;
                      v331 = 0;
                      uint64_t v332 = 0;
                      uint64_t v367 = v93;
                      char v368 = 1;
                    }
                    if (v330)
                    {
                      LOBYTE(v369) = 0;
                      char v371 = 0;
                      if (v329)
                      {
                        v369 = v327;
                        uint64_t v94 = v328;
                        v327 = 0;
                        uint64_t v328 = 0;
                        uint64_t v370 = v94;
                        char v371 = 1;
                      }
                      if (v326)
                      {
                        LOBYTE(v372) = 0;
                        char v374 = 0;
                        if (v325)
                        {
                          v372 = v323;
                          uint64_t v95 = v324;
                          v323 = 0;
                          uint64_t v324 = 0;
                          uint64_t v373 = v95;
                          char v374 = 1;
                        }
                        if (v322)
                        {
                          long long v375 = v321;
                          if (v320)
                          {
                            uint64_t v376 = v318;
                            uint64_t v96 = v319;
                            uint64_t v318 = 0;
                            uint64_t v319 = 0;
                            uint64_t v377 = v96;
                            if (v317)
                            {
                              v378 = v315;
                              unint64_t v97 = v316;
                              v315 = 0;
                              unint64_t v316 = 0;
                              unint64_t v379 = v97;
                              if (v390)
                              {
                                BOOL v247 = v85;
                                int v248 = v35;
                                char v261 = v81;
                                int v265 = v79;
                                char v277 = v74;
                                int v284 = v72;
                                char v291 = v67;
                                int v301 = v65;
                                char v98 = v60;
                                int v99 = v58;
                                char v100 = v53;
                                int v101 = v51;
                                int v102 = v45;
                                uint64_t v2 = v46;
                                char v103 = v41;
                                char v104 = v39;
                                uint64_t v35 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v380, (uint64_t)&v387);
                                if (v38)
                                {
                                  v380[4] = v36;
                                  if (v103)
                                  {
                                    v380[5] = v104;
                                    if (!v102)
                                    {
                                      v380[6] = v2;
                                      if (!v101)
                                      {
                                        char v381 = v100;
                                        if (!v99)
                                        {
                                          char v382 = v98;
                                          if (!v301)
                                          {
                                            char v383 = v291;
                                            if (!v284)
                                            {
                                              char v384 = v277;
                                              if (!v265)
                                              {
                                                char v385 = v261;
                                                if (!v248)
                                                {
                                                  BOOL v386 = v247;
                                                  *(unsigned char *)(WebKit::RemoteMediaPlayerProxyConfiguration::RemoteMediaPlayerProxyConfiguration((uint64_t)a2, (uint64_t *)&v354)+ 280) = 1;
                                                  WebKit::RemoteMediaPlayerProxyConfiguration::~RemoteMediaPlayerProxyConfiguration((WebKit::RemoteMediaPlayerProxyConfiguration *)&v354, v105);
                                                  goto LABEL_113;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_162:
    if (v34) {
      (*(void (**)(uint64_t, char *))(*(void *)v35 + 16))(v35, v33);
    }
  }
  *a2 = 0;
  a2[280] = 0;
LABEL_113:
  if (v390 && v389 != -1) {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v389])(&v354, &v387);
  }
  if (v317) {
    WTF::Vector<WebCore::PlatformTextTrackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v315, v33);
  }
  if (v320) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v318, v33);
  }
  if (v326 && v325 && v323) {
    WTF::fastFree(v323, v33);
  }
  if (v330 && v329 && v327) {
    WTF::fastFree(v327, v33);
  }
  if (v334 && v333 && v331) {
    WTF::fastFree(v331, v33);
  }
  if (v338 && v337) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v335, v33);
  }
  if (v342 && v341) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v339, v33);
  }
  if (v345) {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v343, v33);
  }
  if (v347)
  {
    char v106 = v346;
    v346 = 0;
    if (v106)
    {
      if (*(_DWORD *)v106 == 2) {
        WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v33);
      }
      else {
        *(_DWORD *)v106 -= 2;
      }
    }
  }
  if (v349)
  {
    long long v107 = v348;
    v348 = 0;
    if (v107)
    {
      if (*(_DWORD *)v107 == 2) {
        WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v33);
      }
      else {
        *(_DWORD *)v107 -= 2;
      }
    }
  }
  if (v351)
  {
    uint64_t v108 = v350;
    v350 = 0;
    if (v108)
    {
      if (*(_DWORD *)v108 == 2) {
        WTF::StringImpl::destroy(v108, (WTF::StringImpl *)v33);
      }
      else {
        *(_DWORD *)v108 -= 2;
      }
    }
  }
  if (v353)
  {
    uint64_t v109 = v352;
    v352 = 0;
    if (v109)
    {
      if (*(_DWORD *)v109 == 2) {
        WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v33);
      }
      else {
        *(_DWORD *)v109 -= 2;
      }
    }
  }
}

void sub_1987F9CE0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,int a22,__int16 a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF *a29,uint64_t a30,char a31,int a32,__int16 a33,WTF *a34,uint64_t a35,char a36,int a37,__int16 a38,WTF *a39,uint64_t a40,char a41,int a42,__int16 a43,int a44,__int16 a45,uint64_t a46,char a47,int a48,__int16 a49,int a50,__int16 a51,uint64_t a52,char a53,int a54,__int16 a55,int a56,__int16 a57,uint64_t a58,char a59,WTF::StringImpl *a60,char a61,WTF::StringImpl *a62,char a63)
{
  if (*(unsigned char *)(v68 - 104))
  {
    uint64_t v70 = *(unsigned int *)(v68 - 112);
    if (v70 != -1) {
      ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v70])(&a68, v68 - 136);
    }
  }
  if (a21) {
    WTF::Vector<WebCore::PlatformTextTrackData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, a2);
  }
  if (a25) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a23, a2);
  }
  if ((_BYTE)a33 && a31 && a29) {
    WTF::fastFree(a29, a2);
  }
  if ((_BYTE)a38 && a36 && a34) {
    WTF::fastFree(a34, a2);
  }
  if ((_BYTE)a43 && a41 && a39) {
    WTF::fastFree(a39, a2);
  }
  if ((_BYTE)a49 && a47) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a45, a2);
  }
  if ((_BYTE)a55 && a53) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a51, a2);
  }
  if (a59) {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a57, a2);
  }
  if (a61)
  {
    unsigned int v71 = a60;
    a60 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2) {
        WTF::StringImpl::destroy(v71, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v71 -= 2;
      }
    }
  }
  if (a63)
  {
    int v72 = a62;
    a62 = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2) {
        WTF::StringImpl::destroy(v72, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v72 -= 2;
      }
    }
  }
  if (a65)
  {
    char v73 = a64;
    a64 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2) {
        WTF::StringImpl::destroy(v73, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v73 -= 2;
      }
    }
  }
  if (a67)
  {
    char v74 = a66;
    a66 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2) {
        WTF::StringImpl::destroy(v74, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v74 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    unint64_t v31 = 0;
    uint64_t v32 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v33 = *((void *)a2 + 3);
    if (v33)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v33 + 16))(v33, v5, v4);
        uint64_t v32 = *(void *)a2;
        unint64_t v31 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v31 = 0;
        uint64_t v32 = 0;
      }
    }
LABEL_40:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v34 = *((void *)a2 + 3);
    if (v34 && v31) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32);
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
LABEL_35:
    uint64_t v29 = *(void *)a2;
    uint64_t v30 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result)
    {
      if (v30) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v29);
      }
    }
    return result;
  }
  unint64_t v8 = (unint64_t *)(v5 + v6);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v31 = v4;
    uint64_t v32 = 0;
    goto LABEL_40;
  }
  unint64_t v9 = *v8;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (v9 >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::ContentType>(a2, (uint64_t)&v36);
      if (!v38)
      {
LABEL_34:
        *(unsigned char *)a1 = 0;
        *(unsigned char *)(a1 + 16) = 0;
        WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, a2);
        goto LABEL_35;
      }
      if (HIDWORD(v40) != v40) {
        break;
      }
      unint64_t v21 = WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, HIDWORD(v40) + 1, (unint64_t)&v36);
      int v22 = HIDWORD(v40) + 1;
      uint64_t v23 = v39 + 16 * HIDWORD(v40);
      uint64_t v24 = *(void *)v21;
      *(void *)unint64_t v21 = 0;
      *(void *)uint64_t v23 = v24;
      *(unsigned char *)(v23 + 8) = *(unsigned char *)(v21 + 8);
      HIDWORD(v40) = v22;
      if (v38) {
        goto LABEL_28;
      }
LABEL_32:
      if (!--v9)
      {
        WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v39, HIDWORD(v40));
        *(void *)a1 = v39;
        uint64_t v35 = v40;
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        *(void *)(a1 + 8) = v35;
        goto LABEL_23;
      }
    }
    int v25 = HIDWORD(v40) + 1;
    uint64_t v26 = v39 + 16 * HIDWORD(v40);
    uint64_t v27 = v36;
    uint64_t v36 = 0;
    *(void *)uint64_t v26 = v27;
    *(unsigned char *)(v26 + 8) = v37;
    HIDWORD(v40) = v25;
LABEL_28:
    unsigned int v28 = v36;
    uint64_t v36 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, a2);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
    goto LABEL_32;
  }
  if (v9)
  {
    LODWORD(v40) = v9;
    uint64_t v39 = WTF::fastMalloc((WTF *)(16 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebCore::ContentType>(a2, (uint64_t)&v36);
      if (!v38) {
        goto LABEL_34;
      }
      if (HIDWORD(v40) != v40) {
        break;
      }
      unint64_t v10 = WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, HIDWORD(v40) + 1, (unint64_t)&v36);
      int v11 = HIDWORD(v40) + 1;
      uint64_t v12 = v39 + 16 * HIDWORD(v40);
      uint64_t v13 = *(void *)v10;
      *(void *)unint64_t v10 = 0;
      *(void *)uint64_t v12 = v13;
      *(unsigned char *)(v12 + 8) = *(unsigned char *)(v10 + 8);
      HIDWORD(v40) = v11;
      if (v38) {
        goto LABEL_15;
      }
LABEL_19:
      if (!--v9)
      {
        uint64_t v18 = v39;
        uint64_t v19 = v40;
        goto LABEL_22;
      }
    }
    int v14 = HIDWORD(v40) + 1;
    uint64_t v15 = v39 + 16 * HIDWORD(v40);
    uint64_t v16 = v36;
    uint64_t v36 = 0;
    *(void *)uint64_t v15 = v16;
    *(unsigned char *)(v15 + 8) = v37;
    HIDWORD(v40) = v14;
LABEL_15:
    unsigned int v17 = v36;
    uint64_t v36 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, a2);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    goto LABEL_19;
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
LABEL_22:
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v19;
LABEL_23:
  *(unsigned char *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, a2);
}

void sub_1987FA3A4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  if (a12 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, a2);
  _Unwind_Resume(a1);
}

unsigned char *IPC::Decoder::decode<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(unsigned char *result, IPC::Decoder *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(char **)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - (void)v5;
  if (v6 <= v7)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        uint64_t v13 = *(char **)a2;
        unint64_t v12 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_9;
  }
  unint64_t v8 = &v5[v7];
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v12 = v6;
    uint64_t v13 = 0;
LABEL_9:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        uint64_t v5 = *(char **)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_10;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_10:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v16 = *((void *)a2 + 3);
    if (v16 && v6) {
      (*(void (**)(uint64_t, char *))(*(void *)v16 + 16))(v16, v5);
    }
    goto LABEL_11;
  }
  if (!v9)
  {
    *uint64_t result = 0;
    result[16] = 0;
    result[24] = 1;
    return result;
  }
  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v5, (uint64_t)&v19);
  if (v21)
  {
    *(void *)uint64_t v3 = v19;
    uint64_t v11 = v20;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    *((void *)v3 + 1) = v11;
    v3[16] = 1;
    uint64_t result = (unsigned char *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v10);
    v3[24] = 1;
    return result;
  }
LABEL_11:
  *uint64_t v3 = 0;
  v3[24] = 0;
  unsigned int v17 = *(char **)a2;
  uint64_t v18 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (unsigned char *)*((void *)a2 + 3);
  if (result)
  {
    if (v18) {
      return (unsigned char *)(*(uint64_t (**)(unsigned char *, char *))(*(void *)result + 16))(result, v17);
    }
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(unint64_t result, uint64_t *a2)
{
  unint64_t v3 = result;
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v29 = a2[3];
    if (v29)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
        uint64_t v28 = *a2;
        unint64_t v27 = a2[1];
      }
      else
      {
        unint64_t v27 = 0;
        uint64_t v28 = 0;
      }
    }
  }
  else
  {
    unint64_t v8 = (unsigned __int8 *)(v5 + v7);
    uint64_t v9 = v5 + v7 + 1;
    a2[2] = v9;
    if (v5)
    {
      unsigned int v10 = *v8;
      if (v10 >= 2) {
        goto LABEL_32;
      }
      if (v10)
      {
        unint64_t v11 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
        if (v6 < v11 || v6 - v11 <= 7)
        {
          *a2 = 0;
          a2[1] = 0;
          uint64_t v31 = a2[3];
          if (v31)
          {
            (*(void (**)(uint64_t))(*(void *)v31 + 16))(v31);
            uint64_t v32 = *a2;
            uint64_t v33 = a2[1];
            uint64_t v34 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            if (v34)
            {
              if (v33) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32);
              }
            }
          }
          goto LABEL_31;
        }
        uint64_t v13 = (unint64_t *)(v5 + v11);
        unint64_t v14 = *v13;
        a2[2] = (uint64_t)(v13 + 1);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        if (v14 >= 0x40000)
        {
          while (1)
          {
            unint64_t v22 = IPC::Decoder::decode<WebCore::FourCC>(a2);
            unint64_t v35 = v22;
            if (!HIDWORD(v22)) {
              goto LABEL_29;
            }
            if (HIDWORD(v37) == v37)
            {
              uint64_t v20 = (_DWORD *)WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, HIDWORD(v37) + 1, (unint64_t)&v35);
              *((_DWORD *)v36 + HIDWORD(v37)) = *v20;
            }
            else
            {
              *((_DWORD *)v36 + HIDWORD(v37)) = v22;
            }
            unint64_t v21 = ++HIDWORD(v37);
            if (!--v14)
            {
              uint64_t result = WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v36, v21);
              unsigned int v17 = v36;
              int v18 = v37;
              int v16 = HIDWORD(v37);
              goto LABEL_21;
            }
          }
        }
        if (v14)
        {
          LODWORD(v37) = v14;
          uint64_t v36 = (WTF *)WTF::fastMalloc((WTF *)(4 * v14));
          while (1)
          {
            uint64_t result = IPC::Decoder::decode<WebCore::FourCC>(a2);
            unint64_t v35 = result;
            if (!HIDWORD(result)) {
              break;
            }
            if (HIDWORD(v37) == v37)
            {
              uint64_t result = WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, HIDWORD(v37) + 1, (unint64_t)&v35);
              *((_DWORD *)v36 + HIDWORD(v37)) = *(_DWORD *)result;
            }
            else
            {
              *((_DWORD *)v36 + HIDWORD(v37)) = result;
            }
            int v16 = ++HIDWORD(v37);
            if (!--v14)
            {
              unsigned int v17 = v36;
              int v18 = v37;
              goto LABEL_21;
            }
          }
LABEL_29:
          uint64_t v23 = v36;
          if (v36)
          {
            uint64_t v36 = 0;
            LODWORD(v37) = 0;
            WTF::fastFree(v23, v15);
          }
          goto LABEL_31;
        }
        int v16 = 0;
        int v18 = 0;
        unsigned int v17 = 0;
LABEL_21:
        *(void *)unint64_t v3 = v17;
        char v19 = 1;
        *(_DWORD *)(v3 + 8) = v18;
        *(_DWORD *)(v3 + 12) = v16;
      }
      else
      {
        char v19 = 0;
        *(unsigned char *)uint64_t result = 0;
      }
      *(unsigned char *)(v3 + 16) = v19;
      *(unsigned char *)(v3 + 24) = 1;
      return result;
    }
    unint64_t v27 = v6;
    uint64_t v28 = 0;
  }
  unint64_t v6 = 0;
  uint64_t v5 = 0;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v30 = a2[3];
  if (v30)
  {
    if (v27)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v30 + 16))(v30, v28, v27);
LABEL_31:
      uint64_t v5 = *a2;
      unint64_t v6 = a2[1];
      goto LABEL_32;
    }
    unint64_t v6 = 0;
    uint64_t v5 = 0;
  }
LABEL_32:
  *a2 = 0;
  a2[1] = 0;
  uint64_t v24 = a2[3];
  if (v24 && v6) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v5);
  }
  *(unsigned char *)unint64_t v3 = 0;
  *(unsigned char *)(v3 + 24) = 0;
  uint64_t v25 = *a2;
  uint64_t v26 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result)
  {
    if (v26) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v25);
    }
  }
  return result;
}

void sub_1987FA950(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WebCore::LayoutRect>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::LayoutRect,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::SecurityOriginData>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::decode(a1, a2);
  if (!a2[32])
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1987FAA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 32))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 24);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 24) = -1;
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebKit::TextTrackPrivateRemoteConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2 + 32);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 48));
  char v4 = *(unsigned char *)(a2 + 52);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6) {
    goto LABEL_17;
  }
  *uint64_t v5 = v4;
  char v7 = *(unsigned char *)(a2 + 53);
  unint64_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1987FAC3CLL);
  }
  *unint64_t v8 = v7;
  char v10 = *(unsigned char *)(a2 + 54);
  unint64_t v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x1987FAC5CLL);
  }
  *unint64_t v11 = v10;
  char v13 = *(unsigned char *)(a2 + 55);
  unint64_t v14 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1987FAC7CLL);
  }
  *unint64_t v14 = v13;
  char v16 = *(unsigned char *)(a2 + 56);
  unsigned int v17 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x1987FAC9CLL);
  }
  *unsigned int v17 = v16;
  char v19 = *(unsigned char *)(a2 + 57);
  uint64_t v20 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x1987FACBCLL);
  }
  *uint64_t v20 = v19;
  char v22 = *(unsigned char *)(a2 + 58);
  uint64_t v23 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x1987FACDCLL);
  }
  *uint64_t v23 = v22;
  char v25 = *(unsigned char *)(a2 + 59);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v27)
  {
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x1987FAC1CLL);
  }
  *uint64_t result = v25;
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::TextTrackPrivateRemoteConfiguration,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (unint64_t)a1;
  unint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    unint64_t v8 = (uint64_t *)(v5 + v6);
    *((void *)a1 + 2) = v8 + 1;
    if (v5)
    {
      int v9 = 0;
      uint64_t v10 = *v8;
      goto LABEL_8;
    }
    unint64_t v47 = v4;
    uint64_t v48 = 0;
  }
  else
  {
    unint64_t v47 = 0;
    uint64_t v48 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v49 = *((void *)a1 + 3);
    if (v49)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v49 + 16))(v49, v5, v4);
        uint64_t v48 = *(WTF::StringImpl **)v2;
        unint64_t v47 = *(void *)(v2 + 8);
      }
      else
      {
        unint64_t v47 = 0;
        uint64_t v48 = 0;
      }
    }
  }
  *(void *)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  uint64_t v50 = *(void *)(v2 + 24);
  if (v50 && v47) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v50 + 16))(v50, v48);
  }
  uint64_t v10 = 0;
  int v9 = 1;
LABEL_8:
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v270);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v268);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v266);
  IPC::Decoder::decode<WTF::MediaTime>((IPC::Decoder *)v2, (uint64_t)v264);
  unint64_t v11 = *(void *)(v2 + 8);
  uint64_t v12 = *(WTF::StringImpl **)v2;
  unint64_t v13 = ((*(void *)(v2 + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v2;
  if (v11 >= v13 && v11 - v13 > 3)
  {
    uint64_t v15 = (int *)((char *)v12 + v13);
    *(void *)(v2 + 16) = v15 + 1;
    if (v12)
    {
      int v16 = 0;
      int v17 = *v15;
      goto LABEL_15;
    }
    unint64_t v51 = v11;
    char v52 = 0;
  }
  else
  {
    unint64_t v51 = 0;
    char v52 = 0;
    *(void *)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v53 = *(void *)(v2 + 24);
    if (v53)
    {
      if (v11)
      {
        (*(void (**)(uint64_t))(*(void *)v53 + 16))(v53);
        char v52 = *(WTF::StringImpl **)v2;
        unint64_t v51 = *(void *)(v2 + 8);
      }
      else
      {
        unint64_t v51 = 0;
        char v52 = 0;
      }
    }
  }
  *(void *)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  uint64_t v54 = *(void *)(v2 + 24);
  if (!v54 || !v51)
  {
    uint64_t v12 = 0;
    int v17 = 0;
    unint64_t v11 = 0;
    int v16 = 1;
LABEL_88:
    *(void *)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v55 = *(void *)(v2 + 24);
    if (v55)
    {
      int v233 = v17;
      int v257 = v16;
      if (v11)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v55 + 16))(v55, v12);
        uint64_t v56 = *(WTF::StringImpl **)v2;
        unint64_t v11 = *(void *)(v2 + 8);
      }
      else
      {
        uint64_t v56 = 0;
      }
      int v17 = v233;
      int v16 = v257;
    }
    else
    {
      uint64_t v56 = 0;
      unint64_t v11 = 0;
    }
    goto LABEL_90;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v54 + 16))(v54, v52, v51);
  int v17 = 0;
  uint64_t v12 = *(WTF::StringImpl **)v2;
  unint64_t v11 = *(void *)(v2 + 8);
  int v16 = 1;
LABEL_15:
  if (v11 <= *(void *)(v2 + 16) - (void)v12) {
    goto LABEL_88;
  }
  uint64_t v18 = *(unsigned __int8 **)(v2 + 16);
  *(void *)(v2 + 16) = v18 + 1;
  if (!v12)
  {
    uint64_t v56 = 0;
LABEL_90:
    *(void *)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v57 = *(void *)(v2 + 24);
    if (v57)
    {
      int v230 = v17;
      int v254 = v16;
      if (v11)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v57 + 16))(v57, v56);
        uint64_t v12 = *(WTF::StringImpl **)v2;
        unint64_t v11 = *(void *)(v2 + 8);
      }
      else
      {
        uint64_t v12 = 0;
      }
      int v17 = v230;
      int v16 = v254;
    }
    else
    {
      uint64_t v12 = 0;
      unint64_t v11 = 0;
    }
    goto LABEL_92;
  }
  unsigned int v19 = *v18;
  if (v19 < 3)
  {
    unsigned int v20 = v19 | 0x100;
    goto LABEL_19;
  }
LABEL_92:
  *(void *)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  uint64_t v58 = *(void *)(v2 + 24);
  if (!v58)
  {
    uint64_t v12 = 0;
    unsigned int v20 = 0;
    unint64_t v11 = 0;
    goto LABEL_94;
  }
  int v226 = v17;
  int v250 = v16;
  if (!v11)
  {
    uint64_t v12 = 0;
    unsigned int v20 = 0;
LABEL_94:
    *(void *)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v59 = *(void *)(v2 + 24);
    if (v59)
    {
      unsigned int v209 = v20;
      int v232 = v17;
      int v256 = v16;
      if (v11)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v59 + 16))(v59, v12);
        char v60 = *(WTF::StringImpl **)v2;
        unint64_t v11 = *(void *)(v2 + 8);
      }
      else
      {
        char v60 = 0;
      }
      int v17 = v232;
      int v16 = v256;
      unsigned int v20 = v209;
    }
    else
    {
      char v60 = 0;
      unint64_t v11 = 0;
    }
    goto LABEL_96;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v58 + 16))(v58, v12);
  unsigned int v20 = 0;
  uint64_t v12 = *(WTF::StringImpl **)v2;
  unint64_t v11 = *(void *)(v2 + 8);
  int v17 = v226;
  int v16 = v250;
LABEL_19:
  if (v11 <= *(void *)(v2 + 16) - (void)v12) {
    goto LABEL_94;
  }
  uint64_t v21 = *(unsigned __int8 **)(v2 + 16);
  *(void *)(v2 + 16) = v21 + 1;
  if (!v12)
  {
    char v60 = 0;
LABEL_96:
    *(void *)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v61 = *(void *)(v2 + 24);
    if (v61)
    {
      unsigned int v207 = v20;
      int v229 = v17;
      int v253 = v16;
      if (v11)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v61 + 16))(v61, v60);
        uint64_t v12 = *(WTF::StringImpl **)v2;
        unint64_t v11 = *(void *)(v2 + 8);
      }
      else
      {
        uint64_t v12 = 0;
      }
      int v17 = v229;
      int v16 = v253;
      unsigned int v20 = v207;
    }
    else
    {
      uint64_t v12 = 0;
      unint64_t v11 = 0;
    }
    goto LABEL_98;
  }
  unsigned int v22 = *v21;
  if (v22 < 7)
  {
    unsigned int v23 = v22 | 0x100;
    goto LABEL_23;
  }
LABEL_98:
  *(void *)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  uint64_t v62 = *(void *)(v2 + 24);
  if (!v62)
  {
    uint64_t v12 = 0;
    unsigned int v23 = 0;
    unint64_t v11 = 0;
    goto LABEL_100;
  }
  unsigned int v203 = v20;
  int v224 = v17;
  int v248 = v16;
  if (!v11)
  {
    uint64_t v12 = 0;
    unsigned int v23 = 0;
LABEL_100:
    *(void *)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v63 = *(void *)(v2 + 24);
    if (v63)
    {
      unsigned int v188 = v23;
      unsigned int v208 = v20;
      int v231 = v17;
      int v255 = v16;
      if (v11)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v63 + 16))(v63, v12);
        unsigned int v64 = *(WTF::StringImpl **)v2;
        unint64_t v11 = *(void *)(v2 + 8);
      }
      else
      {
        unsigned int v64 = 0;
      }
      int v17 = v231;
      int v16 = v255;
      unsigned int v23 = v188;
      unsigned int v20 = v208;
    }
    else
    {
      unsigned int v64 = 0;
      unint64_t v11 = 0;
    }
    goto LABEL_102;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v62 + 16))(v62, v12);
  unsigned int v23 = 0;
  uint64_t v12 = *(WTF::StringImpl **)v2;
  unint64_t v11 = *(void *)(v2 + 8);
  int v17 = v224;
  int v16 = v248;
  unsigned int v20 = v203;
LABEL_23:
  if (v11 <= *(void *)(v2 + 16) - (void)v12) {
    goto LABEL_100;
  }
  uint64_t v24 = *(unsigned __int8 **)(v2 + 16);
  char v25 = v24 + 1;
  *(void *)(v2 + 16) = v24 + 1;
  if (!v12)
  {
    unsigned int v64 = 0;
LABEL_102:
    *(void *)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v65 = *(void *)(v2 + 24);
    if (v65)
    {
      unsigned int v187 = v23;
      unsigned int v206 = v20;
      int v228 = v17;
      int v252 = v16;
      if (v11)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v65 + 16))(v65, v64);
        unsigned int v26 = 0;
        uint64_t v12 = *(WTF::StringImpl **)v2;
        unint64_t v11 = *(void *)(v2 + 8);
      }
      else
      {
        uint64_t v12 = 0;
        unsigned int v26 = 0;
      }
      int v17 = v228;
      int v16 = v252;
      unsigned int v23 = v187;
      unsigned int v20 = v206;
    }
    else
    {
      unint64_t v11 = 0;
      uint64_t v12 = 0;
      unsigned int v26 = 0;
    }
    goto LABEL_104;
  }
  unsigned int v26 = *v24;
  if (v26 < 2)
  {
    int v27 = 0;
    int v28 = 1;
    goto LABEL_27;
  }
LABEL_104:
  *(void *)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  uint64_t v66 = *(void *)(v2 + 24);
  if (!v66)
  {
    int v28 = 0;
    unint64_t v30 = 0;
    uint64_t v12 = 0;
    int v27 = 1;
    goto LABEL_106;
  }
  unsigned int v167 = v26;
  unsigned int v183 = v23;
  unsigned int v201 = v20;
  int v222 = v17;
  int v246 = v16;
  if (!v11)
  {
    int v28 = 0;
    unint64_t v30 = 0;
    uint64_t v12 = 0;
    int v27 = 1;
LABEL_106:
    *(void *)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v67 = *(void *)(v2 + 24);
    if (v67)
    {
      int v154 = v27;
      int v170 = v28;
      unsigned int v186 = v23;
      unsigned int v205 = v20;
      int v227 = v17;
      int v251 = v16;
      if (v30)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v67 + 16))(v67, v12, v30);
        LODWORD(v30) = 0;
        uint64_t v12 = *(WTF::StringImpl **)v2;
        unint64_t v11 = *(void *)(v2 + 8);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
      int v17 = v227;
      int v16 = v251;
      unsigned int v23 = v186;
      unsigned int v20 = v205;
      int v27 = v154;
      int v28 = v170;
    }
    else
    {
      unint64_t v11 = 0;
      uint64_t v12 = 0;
      LODWORD(v30) = 0;
    }
    goto LABEL_108;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v66 + 16))(v66, v12);
  int v28 = 0;
  uint64_t v12 = *(WTF::StringImpl **)v2;
  unint64_t v11 = *(void *)(v2 + 8);
  int v27 = 1;
  char v25 = *(unsigned __int8 **)(v2 + 16);
  int v17 = v222;
  int v16 = v246;
  unsigned int v23 = v183;
  unsigned int v20 = v201;
  unsigned int v26 = v167;
LABEL_27:
  if (!v26) {
    int v28 = 0;
  }
  if (v11 <= v25 - (unsigned __int8 *)v12)
  {
    int v155 = v27;
    int v171 = v28;
    unsigned int v189 = v23;
    unsigned int v210 = v20;
    int v234 = v17;
    int v258 = v16;
    unint64_t v30 = 0;
    uint64_t v76 = *(void *)(v2 + 24);
    *(void *)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    if (v76 && v11)
    {
      (*(void (**)(uint64_t))(*(void *)v76 + 16))(v76);
      uint64_t v12 = *(WTF::StringImpl **)v2;
      unint64_t v30 = *(void *)(v2 + 8);
    }
    else
    {
      uint64_t v12 = 0;
    }
    int v17 = v234;
    int v16 = v258;
    unsigned int v23 = v189;
    unsigned int v20 = v210;
    int v27 = v155;
    int v28 = v171;
    goto LABEL_106;
  }
  uint64_t v29 = v25 + 1;
  *(void *)(v2 + 16) = v25 + 1;
  if (!v12)
  {
    unint64_t v30 = v11;
    goto LABEL_106;
  }
  LODWORD(v30) = *v25;
  if (v30 < 2)
  {
    int v31 = 0;
    int v32 = 1;
    goto LABEL_33;
  }
LABEL_108:
  *(void *)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  uint64_t v68 = *(void *)(v2 + 24);
  if (!v68)
  {
    int v32 = 0;
    unint64_t v34 = 0;
    uint64_t v12 = 0;
    int v31 = 1;
    goto LABEL_110;
  }
  int v137 = v30;
  int v150 = v27;
  int v165 = v28;
  unsigned int v181 = v23;
  unsigned int v199 = v20;
  int v220 = v17;
  int v244 = v16;
  if (!v11)
  {
    int v32 = 0;
    unint64_t v34 = 0;
    uint64_t v12 = 0;
    int v31 = 1;
LABEL_110:
    *(void *)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v69 = *(void *)(v2 + 24);
    if (v69)
    {
      int v127 = v31;
      int v140 = v32;
      int v153 = v27;
      int v169 = v28;
      unsigned int v185 = v23;
      unsigned int v204 = v20;
      int v225 = v17;
      int v249 = v16;
      if (v34)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v69 + 16))(v69, v12, v34);
        LODWORD(v34) = 0;
        uint64_t v12 = *(WTF::StringImpl **)v2;
        unint64_t v11 = *(void *)(v2 + 8);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
      int v17 = v225;
      int v16 = v249;
      unsigned int v23 = v185;
      unsigned int v20 = v204;
      int v27 = v153;
      int v28 = v169;
      int v31 = v127;
      int v32 = v140;
    }
    else
    {
      unint64_t v11 = 0;
      uint64_t v12 = 0;
      LODWORD(v34) = 0;
    }
    goto LABEL_112;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v68 + 16))(v68, v12);
  int v32 = 0;
  uint64_t v12 = *(WTF::StringImpl **)v2;
  unint64_t v11 = *(void *)(v2 + 8);
  int v31 = 1;
  uint64_t v29 = *(unsigned __int8 **)(v2 + 16);
  int v17 = v220;
  int v16 = v244;
  unsigned int v23 = v181;
  unsigned int v20 = v199;
  int v27 = v150;
  int v28 = v165;
  LODWORD(v30) = v137;
LABEL_33:
  if (!v30) {
    int v32 = 0;
  }
  if (v11 <= v29 - (unsigned __int8 *)v12)
  {
    int v128 = v31;
    int v141 = v32;
    int v156 = v27;
    int v172 = v28;
    unsigned int v190 = v23;
    unsigned int v211 = v20;
    int v235 = v17;
    int v259 = v16;
    unint64_t v34 = 0;
    uint64_t v77 = *(void *)(v2 + 24);
    *(void *)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    if (v77 && v11)
    {
      (*(void (**)(uint64_t))(*(void *)v77 + 16))(v77);
      uint64_t v12 = *(WTF::StringImpl **)v2;
      unint64_t v34 = *(void *)(v2 + 8);
    }
    else
    {
      uint64_t v12 = 0;
    }
    int v17 = v235;
    int v16 = v259;
    unsigned int v23 = v190;
    unsigned int v20 = v211;
    int v27 = v156;
    int v28 = v172;
    int v31 = v128;
    int v32 = v141;
    goto LABEL_110;
  }
  uint64_t v33 = v29 + 1;
  *(void *)(v2 + 16) = v29 + 1;
  if (!v12)
  {
    unint64_t v34 = v11;
    goto LABEL_110;
  }
  LODWORD(v34) = *v29;
  if (v34 < 2)
  {
    int v35 = 0;
    int v36 = 1;
    goto LABEL_39;
  }
LABEL_112:
  *(void *)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  uint64_t v70 = *(void *)(v2 + 24);
  if (!v70)
  {
    int v36 = 0;
    uint64_t v37 = 0;
    uint64_t v12 = 0;
    int v35 = 1;
    goto LABEL_114;
  }
  int v113 = v34;
  int v123 = v31;
  int v135 = v32;
  int v148 = v27;
  int v163 = v28;
  unsigned int v179 = v23;
  unsigned int v197 = v20;
  int v218 = v17;
  int v242 = v16;
  if (!v11)
  {
    int v36 = 0;
    uint64_t v37 = 0;
    uint64_t v12 = 0;
    int v35 = 1;
LABEL_114:
    *(void *)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v71 = *(void *)(v2 + 24);
    if (v71)
    {
      int v106 = v35;
      int v116 = v36;
      int v126 = v31;
      int v139 = v32;
      int v152 = v27;
      int v168 = v28;
      unsigned int v184 = v23;
      unsigned int v202 = v20;
      int v223 = v17;
      int v247 = v16;
      if (v37)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unsigned __int8 *))(*(void *)v71 + 16))(v71, v12, v37);
        LODWORD(v37) = 0;
        uint64_t v12 = *(WTF::StringImpl **)v2;
        unint64_t v11 = *(void *)(v2 + 8);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
      int v17 = v223;
      int v16 = v247;
      unsigned int v23 = v184;
      unsigned int v20 = v202;
      int v27 = v152;
      int v28 = v168;
      int v31 = v126;
      int v32 = v139;
      int v35 = v106;
      int v36 = v116;
    }
    else
    {
      unint64_t v11 = 0;
      uint64_t v12 = 0;
      LODWORD(v37) = 0;
    }
    goto LABEL_116;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v70 + 16))(v70, v12);
  int v36 = 0;
  uint64_t v12 = *(WTF::StringImpl **)v2;
  unint64_t v11 = *(void *)(v2 + 8);
  int v35 = 1;
  uint64_t v33 = *(unsigned __int8 **)(v2 + 16);
  int v17 = v218;
  int v16 = v242;
  unsigned int v23 = v179;
  unsigned int v20 = v197;
  int v27 = v148;
  int v28 = v163;
  int v31 = v123;
  int v32 = v135;
  LODWORD(v34) = v113;
LABEL_39:
  if (!v34) {
    int v36 = 0;
  }
  if (v11 <= v33 - (unsigned __int8 *)v12)
  {
    int v107 = v35;
    int v117 = v36;
    int v129 = v31;
    int v142 = v32;
    int v157 = v27;
    int v173 = v28;
    unsigned int v191 = v23;
    unsigned int v212 = v20;
    int v236 = v17;
    int v260 = v16;
    uint64_t v37 = 0;
    uint64_t v78 = *(void *)(v2 + 24);
    *(void *)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    if (v78 && v11)
    {
      (*(void (**)(uint64_t))(*(void *)v78 + 16))(v78);
      uint64_t v12 = *(WTF::StringImpl **)v2;
      uint64_t v37 = *(unsigned __int8 **)(v2 + 8);
    }
    else
    {
      uint64_t v12 = 0;
    }
    int v17 = v236;
    int v16 = v260;
    unsigned int v23 = v191;
    unsigned int v20 = v212;
    int v27 = v157;
    int v28 = v173;
    int v31 = v129;
    int v32 = v142;
    int v35 = v107;
    int v36 = v117;
    goto LABEL_114;
  }
  uint64_t v37 = v33;
  char v38 = v33 + 1;
  *(void *)(v2 + 16) = v38;
  if (!v12)
  {
    uint64_t v37 = (unsigned __int8 *)v11;
    goto LABEL_114;
  }
  LODWORD(v37) = *v37;
  if (v37 < 2)
  {
    int v39 = 0;
    int v40 = 1;
    goto LABEL_45;
  }
LABEL_116:
  *(void *)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  uint64_t v72 = *(void *)(v2 + 24);
  if (!v72)
  {
    int v40 = 0;
    char v41 = 0;
    uint64_t v12 = 0;
    int v39 = 1;
    goto LABEL_118;
  }
  int v96 = (int)v37;
  int v103 = v35;
  int v112 = v36;
  int v122 = v31;
  int v134 = v32;
  int v147 = v27;
  int v162 = v28;
  unsigned int v178 = v23;
  unsigned int v196 = v20;
  int v217 = v17;
  int v241 = v16;
  if (!v11)
  {
    int v40 = 0;
    char v41 = 0;
    uint64_t v12 = 0;
    int v39 = 1;
LABEL_118:
    *(void *)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v73 = *(void *)(v2 + 24);
    if (v73)
    {
      int v91 = v39;
      int v98 = v40;
      int v105 = v35;
      int v115 = v36;
      int v125 = v31;
      int v138 = v32;
      int v151 = v27;
      int v166 = v28;
      unsigned int v182 = v23;
      unsigned int v200 = v20;
      int v221 = v17;
      int v245 = v16;
      if (v41)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unsigned __int8 *))(*(void *)v73 + 16))(v73, v12, v41);
        LODWORD(v41) = 0;
        uint64_t v12 = *(WTF::StringImpl **)v2;
        unint64_t v11 = *(void *)(v2 + 8);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
      int v17 = v221;
      int v16 = v245;
      unsigned int v23 = v182;
      unsigned int v20 = v200;
      int v27 = v151;
      int v28 = v166;
      int v31 = v125;
      int v32 = v138;
      int v35 = v105;
      int v36 = v115;
      int v39 = v91;
      int v40 = v98;
    }
    else
    {
      unint64_t v11 = 0;
      uint64_t v12 = 0;
      LODWORD(v41) = 0;
    }
    goto LABEL_120;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v72 + 16))(v72, v12);
  int v40 = 0;
  uint64_t v12 = *(WTF::StringImpl **)v2;
  unint64_t v11 = *(void *)(v2 + 8);
  int v39 = 1;
  char v38 = *(unsigned __int8 **)(v2 + 16);
  int v17 = v217;
  int v16 = v241;
  unsigned int v23 = v178;
  unsigned int v20 = v196;
  int v27 = v147;
  int v28 = v162;
  int v31 = v122;
  int v32 = v134;
  int v35 = v103;
  int v36 = v112;
  LODWORD(v37) = v96;
LABEL_45:
  if (!v37) {
    int v40 = 0;
  }
  if (v11 <= v38 - (unsigned __int8 *)v12)
  {
    int v92 = v39;
    int v99 = v40;
    int v108 = v35;
    int v118 = v36;
    int v130 = v31;
    int v143 = v32;
    int v158 = v27;
    int v174 = v28;
    unsigned int v192 = v23;
    unsigned int v213 = v20;
    int v237 = v17;
    int v261 = v16;
    char v41 = 0;
    uint64_t v79 = *(void *)(v2 + 24);
    *(void *)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    if (v79 && v11)
    {
      (*(void (**)(uint64_t))(*(void *)v79 + 16))(v79);
      uint64_t v12 = *(WTF::StringImpl **)v2;
      char v41 = *(unsigned __int8 **)(v2 + 8);
    }
    else
    {
      uint64_t v12 = 0;
    }
    int v17 = v237;
    int v16 = v261;
    unsigned int v23 = v192;
    unsigned int v20 = v213;
    int v27 = v158;
    int v28 = v174;
    int v31 = v130;
    int v32 = v143;
    int v35 = v108;
    int v36 = v118;
    int v39 = v92;
    int v40 = v99;
    goto LABEL_118;
  }
  char v41 = v38;
  unint64_t v42 = v38 + 1;
  *(void *)(v2 + 16) = v42;
  if (!v12)
  {
    char v41 = (unsigned __int8 *)v11;
    goto LABEL_118;
  }
  LODWORD(v41) = *v41;
  if (v41 < 2)
  {
    int v43 = 0;
    char v44 = 1;
    goto LABEL_51;
  }
LABEL_120:
  *(void *)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  uint64_t result = *(void *)(v2 + 24);
  if (!result)
  {
    char v44 = 0;
    unint64_t v74 = 0;
    uint64_t v12 = 0;
    int v43 = 1;
    goto LABEL_122;
  }
  while (1)
  {
    int v85 = (int)v41;
    int v89 = v39;
    int v95 = v40;
    int v102 = v35;
    int v111 = v36;
    int v121 = v31;
    int v133 = v32;
    int v146 = v27;
    int v161 = v28;
    unsigned int v177 = v23;
    unsigned int v195 = v20;
    int v216 = v17;
    int v240 = v16;
    if (!v11)
    {
      char v44 = 0;
      unint64_t v74 = 0;
      uint64_t v12 = 0;
      int v43 = 1;
      goto LABEL_122;
    }
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v12);
    char v44 = 0;
    uint64_t v12 = *(WTF::StringImpl **)v2;
    unint64_t v11 = *(void *)(v2 + 8);
    int v43 = 1;
    unint64_t v42 = *(unsigned __int8 **)(v2 + 16);
    int v17 = v216;
    int v16 = v240;
    unsigned int v23 = v177;
    unsigned int v20 = v195;
    int v27 = v146;
    int v28 = v161;
    int v31 = v121;
    int v32 = v133;
    int v35 = v102;
    int v36 = v111;
    int v39 = v89;
    int v40 = v95;
    LODWORD(v41) = v85;
LABEL_51:
    if (!v41) {
      char v44 = 0;
    }
    if (v11 <= v42 - (unsigned __int8 *)v12) {
      break;
    }
    *(void *)(v2 + 16) = v42 + 1;
    if (!v12)
    {
      unint64_t v74 = v11;
      goto LABEL_122;
    }
    unsigned int v45 = *v42;
    if (v45 > 1) {
      goto LABEL_124;
    }
    uint64_t result = 0;
    LODWORD(v41) = v45 != 0;
    if (v9) {
      goto LABEL_132;
    }
LABEL_57:
    uint64_t v12 = (WTF::StringImpl *)v271;
    if (v271)
    {
      uint64_t v12 = v270;
      int v270 = 0;
      unint64_t v11 = v269;
      if (v269)
      {
        unint64_t v11 = v268;
        uint64_t v268 = 0;
        unint64_t v2 = v267;
        if (v267)
        {
          unint64_t v2 = (unint64_t)v266;
          int v266 = 0;
          int v9 = v265;
          if (v265)
          {
            *(void *)&long long v263 = v264[0];
            int v9 = *(_DWORD *)((char *)v264 + 5);
            *(void *)((char *)&v263 + 5) = *(void *)((char *)v264 + 5);
            if (!v16 && v20 > 0xFF && v23 > 0xFF && !v27 && !v31 && !v35 && !v39 && !v43 && !result)
            {
              *(void *)a2 = v10;
              *(void *)(a2 + 8) = v12;
              *(void *)(a2 + 16) = v11;
              *(void *)(a2 + 24) = v2;
              *(_OWORD *)(a2 + 32) = v263;
              *(_DWORD *)(a2 + 48) = v17;
              *(unsigned char *)(a2 + 52) = v20;
              *(unsigned char *)(a2 + 53) = v23;
              *(unsigned char *)(a2 + 54) = v28;
              *(unsigned char *)(a2 + 55) = v32;
              *(unsigned char *)(a2 + 56) = v36;
              *(unsigned char *)(a2 + 57) = v40;
              *(unsigned char *)(a2 + 58) = v44;
              *(unsigned char *)(a2 + 59) = (_BYTE)v41;
              *(unsigned char *)(a2 + 64) = 1;
              goto LABEL_71;
            }
          }
        }
      }
    }
LABEL_132:
    __break(1u);
  }
  int v83 = v43;
  char v87 = v44;
  int v93 = v39;
  int v100 = v40;
  int v109 = v35;
  int v119 = v36;
  int v131 = v31;
  int v144 = v32;
  int v159 = v27;
  int v175 = v28;
  unsigned int v193 = v23;
  unsigned int v214 = v20;
  int v238 = v17;
  int v262 = v16;
  unint64_t v74 = 0;
  uint64_t v80 = *(void *)(v2 + 24);
  *(void *)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  if (v80 && v11)
  {
    (*(void (**)(uint64_t))(*(void *)v80 + 16))(v80);
    uint64_t v12 = *(WTF::StringImpl **)v2;
    unint64_t v74 = *(void *)(v2 + 8);
  }
  else
  {
    uint64_t v12 = 0;
  }
  int v17 = v238;
  int v16 = v262;
  unsigned int v23 = v193;
  unsigned int v20 = v214;
  int v27 = v159;
  int v28 = v175;
  int v31 = v131;
  int v32 = v144;
  int v35 = v109;
  int v36 = v119;
  int v39 = v93;
  int v40 = v100;
  int v43 = v83;
  char v44 = v87;
LABEL_122:
  *(void *)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  uint64_t v75 = *(void *)(v2 + 24);
  if (v75)
  {
    int v82 = v43;
    char v86 = v44;
    int v90 = v39;
    int v97 = v40;
    int v104 = v35;
    int v114 = v36;
    int v124 = v31;
    int v136 = v32;
    int v149 = v27;
    int v164 = v28;
    unsigned int v180 = v23;
    unsigned int v198 = v20;
    int v219 = v17;
    int v243 = v16;
    if (v74)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v75 + 16))(v75, v12, v74);
      uint64_t v12 = *(WTF::StringImpl **)v2;
      unint64_t v11 = *(void *)(v2 + 8);
    }
    else
    {
      unint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    int v17 = v219;
    int v16 = v243;
    unsigned int v23 = v180;
    unsigned int v20 = v198;
    int v27 = v149;
    int v28 = v164;
    int v31 = v124;
    int v32 = v136;
    int v35 = v104;
    int v36 = v114;
    int v39 = v90;
    int v40 = v97;
    int v43 = v82;
    char v44 = v86;
  }
  else
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
  }
LABEL_124:
  *(void *)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  uint64_t result = *(void *)(v2 + 24);
  if (result)
  {
    if (v11)
    {
      int v81 = v43;
      char v84 = v44;
      int v88 = v39;
      int v94 = v40;
      int v101 = v35;
      int v110 = v36;
      int v120 = v31;
      int v132 = v32;
      int v145 = v27;
      int v160 = v28;
      unsigned int v176 = v23;
      unsigned int v194 = v20;
      int v215 = v17;
      int v239 = v16;
      uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v12);
      int v17 = v215;
      int v16 = v239;
      unsigned int v23 = v176;
      unsigned int v20 = v194;
      int v27 = v145;
      int v28 = v160;
      int v31 = v120;
      int v32 = v132;
      int v35 = v101;
      int v36 = v110;
      int v39 = v88;
      int v40 = v94;
      int v43 = v81;
      char v44 = v84;
      if (*(void *)v2)
      {
        LODWORD(v41) = 0;
        uint64_t result = 1;
        if (v9) {
          goto LABEL_132;
        }
        goto LABEL_57;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 64) = 0;
  if (v267)
  {
    uint64_t result = (uint64_t)v266;
    int v266 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_71:
  if (v269)
  {
    uint64_t result = v268;
    uint64_t v268 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v271)
  {
    uint64_t result = (uint64_t)v270;
    int v270 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1987FBDE0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 - 72))
  {
    unint64_t v4 = *(WTF::StringImpl **)(v2 - 80);
    *(void *)(v2 - 80) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v2 - 56))
  {
    uint64_t v5 = *(WTF::StringImpl **)(v2 - 64);
    *(void *)(v2 - 64) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v2 - 40))
  {
    unint64_t v6 = *(WTF::StringImpl **)(v2 - 48);
    *(void *)(v2 - 48) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, a2);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::ArgumentCoder<WebKit::VideoTrackPrivateRemoteConfiguration,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, a2 + 24);
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 40));
  char v4 = *(unsigned char *)(a2 + 44);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1987FC02CLL);
  }
  *uint64_t v5 = v4;
  char v7 = *(unsigned char *)(a2 + 45);
  unint64_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1987FC04CLL);
  }
  *unint64_t v8 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 48));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 56));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 60));
  IPC::ArgumentCoder<WebCore::PlatformVideoColorSpace,void>::encode(a1, (char *)(a2 + 64));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 72));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 80));
  int v10 = *(unsigned __int8 *)(a2 + 108);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v10)
  {
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x1987FC06CLL);
    }
    *uint64_t result = 1;
    if (*(unsigned char *)(a2 + 108))
    {
      int v16 = *(_DWORD *)(a2 + 88);
      IPC::Encoder::operator<<<int>(a1, &v16);
      int v15 = *(_DWORD *)(a2 + 92);
      IPC::Encoder::operator<<<int>(a1, &v15);
      IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 96));
      IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 100));
      return (unsigned char *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 104));
    }
    else
    {
      unint64_t v13 = (WTF::StringImpl **)std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::ArgumentCoder<WebKit::VideoTrackPrivateRemoteConfiguration,void>::decode(v13, v14);
    }
  }
  else
  {
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x1987FC08CLL);
    }
    *uint64_t result = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::VideoTrackPrivateRemoteConfiguration,void>::decode@<X0>(WTF::StringImpl **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v6 = (unint64_t)a1[1];
  char v7 = *a1;
  unint64_t v8 = (((unint64_t)a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*a1;
  if (v6 >= v8 && v6 - v8 > 7)
  {
    int v10 = (uint64_t *)((char *)v7 + v8);
    a1[2] = (WTF::StringImpl *)(v10 + 1);
    if (v7)
    {
      int v11 = 0;
      uint64_t v12 = *v10;
      goto LABEL_8;
    }
    unint64_t v40 = v6;
    char v41 = 0;
  }
  else
  {
    unint64_t v40 = 0;
    char v41 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v73 = a1[3];
    if (v73)
    {
      if (v6)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)v73 + 16))(v73, v7, v6);
        char v41 = *a1;
        unint64_t v40 = (unint64_t)a1[1];
      }
      else
      {
        unint64_t v40 = 0;
        char v41 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (uint64_t)a1[3];
  if (result) {
    goto LABEL_153;
  }
  while (1)
  {
    uint64_t v12 = 0;
    int v11 = 1;
LABEL_8:
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v138);
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v136);
    IPC::Decoder::decode<WTF::MediaTime>((IPC::Decoder *)a1, (uint64_t)v134);
    unint64_t v13 = (unint64_t)a1[1];
    uint64_t v14 = *a1;
    unint64_t v15 = (((unint64_t)a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*a1;
    if (v13 >= v15 && v13 - v15 > 3)
    {
      int v17 = (int *)((char *)v14 + v15);
      uint64_t v18 = (uint64_t)v14 + v15 + 4;
      a1[2] = (WTF::StringImpl *)v18;
      if (v14)
      {
        int v131 = 0;
        int v129 = *v17;
        goto LABEL_15;
      }
      unint64_t v74 = (WTF::StringImpl *)v13;
      uint64_t v75 = 0;
    }
    else
    {
      unint64_t v74 = 0;
      uint64_t v75 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v76 = a1[3];
      if (v76)
      {
        if (v13)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v76 + 16))(v76);
          uint64_t v75 = *a1;
          unint64_t v74 = a1[1];
        }
        else
        {
          unint64_t v74 = 0;
          uint64_t v75 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v77 = a1[3];
    if (!v77)
    {
      int v129 = 0;
      unint64_t v74 = 0;
LABEL_99:
      uint64_t v14 = 0;
      int v131 = 1;
LABEL_100:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v78 = a1[3];
      if (v78 && v74)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v78 + 16))(v78, v14, v74);
        unsigned int v21 = 0;
        uint64_t v14 = *a1;
        unint64_t v13 = (unint64_t)a1[1];
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
        unsigned int v21 = 0;
      }
      goto LABEL_102;
    }
    if (!v74)
    {
      int v129 = 0;
      goto LABEL_99;
    }
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v77 + 16))(v77, v75, v74);
    int v129 = 0;
    uint64_t v14 = *a1;
    unint64_t v13 = (unint64_t)a1[1];
    int v131 = 1;
    uint64_t v18 = (uint64_t)a1[2];
LABEL_15:
    unint64_t v19 = v18 - (void)v14;
    if (v13 <= v19)
    {
      unint64_t v74 = 0;
      int v112 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v112 && v13)
      {
        (*(void (**)(WTF::StringImpl *))(*(void *)v112 + 16))(v112);
        uint64_t v14 = *a1;
        unint64_t v74 = a1[1];
      }
      else
      {
        uint64_t v14 = 0;
      }
      goto LABEL_100;
    }
    unsigned int v20 = (unsigned __int8 *)v14 + v19;
    a1[2] = (WTF::StringImpl *)(v20 + 1);
    if (!v14)
    {
      unint64_t v74 = (WTF::StringImpl *)v13;
      goto LABEL_100;
    }
    unsigned int v21 = *v20;
    if (v21 < 2)
    {
      int v130 = 0;
      __int16 v22 = 1;
      goto LABEL_19;
    }
LABEL_102:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v79 = a1[3];
    if (!v79)
    {
      uint64_t v14 = 0;
      __int16 v23 = 0;
      unint64_t v13 = 0;
      goto LABEL_104;
    }
    if (!v13)
    {
      uint64_t v14 = 0;
      __int16 v23 = 0;
LABEL_104:
      int v130 = 1;
LABEL_105:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v80 = a1[3];
      if (v80)
      {
        if (v13)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v80 + 16))(v80, v14);
          int v81 = *a1;
          unint64_t v13 = (unint64_t)a1[1];
        }
        else
        {
          int v81 = 0;
        }
      }
      else
      {
        int v81 = 0;
        unint64_t v13 = 0;
      }
LABEL_107:
      *a1 = 0;
      a1[1] = 0;
      int v82 = a1[3];
      if (v82)
      {
        if (v13)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v82 + 16))(v82, v81);
          uint64_t v14 = *a1;
          unint64_t v13 = (unint64_t)a1[1];
        }
        else
        {
          uint64_t v14 = 0;
        }
      }
      else
      {
        uint64_t v14 = 0;
        unint64_t v13 = 0;
      }
      goto LABEL_109;
    }
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v79 + 16))(v79, v14);
    __int16 v22 = 0;
    uint64_t v14 = *a1;
    unint64_t v13 = (unint64_t)a1[1];
    int v130 = 1;
LABEL_19:
    if (v21) {
      __int16 v23 = v22;
    }
    else {
      __int16 v23 = 0;
    }
    if (v13 <= a1[2] - v14) {
      goto LABEL_105;
    }
    uint64_t v24 = a1[2];
    a1[2] = (WTF::StringImpl *)((char *)v24 + 1);
    if (!v14)
    {
      int v81 = 0;
      goto LABEL_107;
    }
    unsigned int v25 = *(unsigned __int8 *)v24;
    if (v25 < 7)
    {
      unsigned int v26 = v25 | 0x100;
      goto LABEL_26;
    }
LABEL_109:
    *a1 = 0;
    a1[1] = 0;
    int v83 = a1[3];
    if (v83 && v13) {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v83 + 16))(v83, v14);
    }
    unsigned int v26 = 0;
LABEL_26:
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v140);
    unint64_t v27 = (unint64_t)a1[1];
    int v28 = *a1;
    unint64_t v29 = (((unint64_t)a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*a1;
    if (v27 < v29 || v27 - v29 <= 3)
    {
      int v32 = 0;
      char v84 = 0;
      *a1 = 0;
      a1[1] = 0;
      int v85 = a1[3];
      if (v85)
      {
        if (v27)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v85 + 16))(v85);
          char v84 = *a1;
          int v32 = a1[1];
        }
        else
        {
          int v32 = 0;
          char v84 = 0;
        }
      }
    }
    else
    {
      unint64_t v30 = (int *)((char *)v28 + v29);
      a1[2] = (WTF::StringImpl *)(v30 + 1);
      if (v28)
      {
        int v133 = 0;
        int v31 = *v30;
        LODWORD(v127) = v31;
        HIDWORD(v127) = v31 & 0xFFFFFF00;
        int v32 = v28;
        goto LABEL_30;
      }
      int v32 = (WTF::StringImpl *)v27;
      char v84 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    char v86 = a1[3];
    if (v86)
    {
      if (v32)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v86 + 16))(v86, v84, v32);
        uint64_t v127 = 0;
        int v32 = *a1;
        unint64_t v27 = (unint64_t)a1[1];
        int v133 = 1;
        int v28 = *a1;
        goto LABEL_30;
      }
    }
    else
    {
      int v32 = 0;
    }
    unint64_t v27 = 0;
    int v28 = 0;
    uint64_t v127 = 0;
    int v133 = 1;
LABEL_30:
    unint64_t v33 = (((unint64_t)a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v28;
    if (v27 < v33 || v27 - v33 <= 3)
    {
      int v35 = 0;
      int v32 = 0;
      *a1 = 0;
      a1[1] = 0;
      char v87 = a1[3];
      if (v87)
      {
        if (v27)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v87 + 16))(v87);
          int v32 = *a1;
          int v35 = a1[1];
        }
        else
        {
          int v35 = 0;
          int v32 = 0;
        }
      }
    }
    else
    {
      unint64_t v34 = (_DWORD *)(((unint64_t)a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = (WTF::StringImpl *)(v34 + 1);
      int v35 = (WTF::StringImpl *)v27;
      if (v28)
      {
        int v132 = 0;
        LODWORD(v126) = *v34;
        HIDWORD(v126) = *v34 & 0xFFFFFF00;
        goto LABEL_34;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    int v88 = a1[3];
    if (v88 && v35) {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v88 + 16))(v88, v32, v35);
    }
    uint64_t v126 = 0;
    int v132 = 1;
LABEL_34:
    uint64_t result = IPC::Decoder::decode<WebCore::PlatformVideoColorSpace>((uint64_t *)a1);
    uint64_t v128 = result;
    char v39 = v38;
    unint64_t v40 = (unint64_t)a1[1];
    char v41 = *a1;
    unint64_t v42 = (((unint64_t)a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*a1;
    if (v40 < v42 || v40 - v42 <= 7)
    {
      int v89 = 0;
      int v90 = 0;
      *a1 = 0;
      a1[1] = 0;
      int v91 = a1[3];
      if (v91)
      {
        if (v40)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v91 + 16))(v91);
          int v90 = *a1;
          int v89 = a1[1];
        }
        else
        {
          int v89 = 0;
          int v90 = 0;
        }
      }
    }
    else
    {
      int v43 = (uint64_t *)((char *)v41 + v42);
      a1[2] = (WTF::StringImpl *)(v43 + 1);
      if (v41)
      {
        int v44 = 0;
        uint64_t v125 = *v43;
        goto LABEL_38;
      }
      int v89 = (WTF::StringImpl *)v40;
      int v90 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t)a1[3];
    if (result && v89)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v90, v89);
      uint64_t v125 = 0;
      char v41 = *a1;
      unint64_t v40 = (unint64_t)a1[1];
    }
    else
    {
      unint64_t v40 = 0;
      char v41 = 0;
      uint64_t v125 = 0;
    }
    int v44 = 1;
LABEL_38:
    unint64_t v45 = (((unint64_t)a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v41;
    if (v40 < v45 || v40 - v45 <= 7)
    {
      int v92 = 0;
      int v93 = 0;
      *a1 = 0;
      a1[1] = 0;
      int v94 = a1[3];
      if (v94)
      {
        if (v40)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v94 + 16))(v94);
          int v93 = *a1;
          int v92 = a1[1];
        }
        else
        {
          int v92 = 0;
          int v93 = 0;
        }
      }
    }
    else
    {
      uint64_t v46 = (void *)(((unint64_t)a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v47 = (char *)(v46 + 1);
      a1[2] = (WTF::StringImpl *)(v46 + 1);
      if (v41)
      {
        int v48 = 0;
        uint64_t v49 = *v46;
        goto LABEL_42;
      }
      int v92 = (WTF::StringImpl *)v40;
      int v93 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    int v95 = a1[3];
    if (!v95)
    {
      uint64_t v49 = 0;
      int v92 = 0;
LABEL_125:
      char v41 = 0;
      int v48 = 1;
LABEL_126:
      *a1 = 0;
      a1[1] = 0;
      int v96 = a1[3];
      uint64_t v124 = v12;
      __int16 v122 = v23;
      int v123 = v11;
      if (v96 && v92)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v96 + 16))(v96, v41, v92);
        char v41 = *a1;
        unint64_t v40 = (unint64_t)a1[1];
      }
      else
      {
        unint64_t v40 = 0;
        char v41 = 0;
      }
LABEL_128:
      *a1 = 0;
      a1[1] = 0;
      int v97 = a1[3];
      if (v97 && v40) {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v97 + 16))(v97, v41);
      }
      goto LABEL_142;
    }
    if (!v92)
    {
      uint64_t v49 = 0;
      goto LABEL_125;
    }
    uint64_t result = (*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v95 + 16))(v95, v93, v92);
    uint64_t v49 = 0;
    char v41 = *a1;
    unint64_t v40 = (unint64_t)a1[1];
    int v48 = 1;
    unint64_t v47 = (char *)a1[2];
LABEL_42:
    unint64_t v50 = v47 - (char *)v41;
    if (v40 <= v50)
    {
      int v92 = 0;
      int v111 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v40 && v111)
      {
        (*(void (**)(WTF::StringImpl *))(*(void *)v111 + 16))(v111);
        char v41 = *a1;
        int v92 = a1[1];
      }
      else
      {
        char v41 = 0;
      }
      goto LABEL_126;
    }
    unint64_t v51 = (WTF::StringImpl *)((char *)v41 + v50);
    a1[2] = (WTF::StringImpl *)((char *)v51 + 1);
    if (!v41)
    {
      int v92 = (WTF::StringImpl *)v40;
      goto LABEL_126;
    }
    LODWORD(v51) = *(unsigned __int8 *)v51;
    if (v51 >= 2)
    {
      __int16 v122 = v23;
      int v123 = v11;
      uint64_t v124 = v12;
      goto LABEL_128;
    }
    if (!v51)
    {
      unint64_t v67 = 0;
      int v66 = 0;
      uint64_t v68 = 0;
      goto LABEL_66;
    }
    __int16 v122 = v23;
    int v123 = v11;
    uint64_t v124 = v12;
    uint64_t result = (uint64_t)IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)a1);
    char v52 = a1[1];
    uint64_t v54 = v53;
    if (v53)
    {
      unint64_t v40 = (unint64_t)a1[1];
    }
    else
    {
      unint64_t v40 = 0;
      int v98 = *a1;
      *a1 = 0;
      a1[1] = 0;
      int v99 = a1[3];
      if (v99)
      {
        uint64_t v100 = result;
        if (v52)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v99 + 16))(a1[3], v98, v52);
          uint64_t result = v100;
          unint64_t v40 = (unint64_t)a1[1];
        }
        else
        {
          unint64_t v40 = 0;
        }
      }
    }
    uint64_t v55 = *a1;
    unint64_t v56 = (((unint64_t)a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*a1;
    if (v40 < v56 || v40 - v56 <= 3)
    {
      int v101 = 0;
      int v102 = 0;
      *a1 = 0;
      a1[1] = 0;
      int v103 = a1[3];
      if (v103)
      {
        uint64_t v116 = result;
        if (v40)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v103 + 16))(a1[3], v55);
          uint64_t result = v116;
          int v102 = *a1;
          int v101 = a1[1];
        }
        else
        {
          int v101 = 0;
          int v102 = 0;
        }
      }
    }
    else
    {
      uint64_t v57 = (int *)((char *)v55 + v56);
      a1[2] = (WTF::StringImpl *)(v57 + 1);
      if (v55)
      {
        int v58 = 0;
        int v2 = *v57;
        char v41 = v55;
        goto LABEL_52;
      }
      int v101 = (WTF::StringImpl *)v40;
      int v102 = 0;
    }
    *a1 = 0;
    a1[1] = 0;
    int v2 = 0;
    uint64_t v55 = a1[3];
    if (v55)
    {
      uint64_t v113 = result;
      if (v101)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v55 + 16))(a1[3], v102, v101);
        uint64_t result = v113;
        char v41 = *a1;
        unint64_t v40 = (unint64_t)a1[1];
        int v58 = 1;
        uint64_t v55 = *a1;
      }
      else
      {
        char v41 = 0;
        unint64_t v40 = 0;
        uint64_t v55 = 0;
        int v58 = 1;
      }
    }
    else
    {
      char v41 = 0;
      unint64_t v40 = 0;
      int v58 = 1;
    }
LABEL_52:
    unint64_t v59 = (((unint64_t)a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v55;
    if (v40 < v59 || v40 - v59 <= 3)
    {
      int v104 = 0;
      char v41 = 0;
      *a1 = 0;
      a1[1] = 0;
      int v105 = a1[3];
      if (v105)
      {
        uint64_t v117 = result;
        if (v40)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v105 + 16))(a1[3], v55);
          uint64_t result = v117;
          char v41 = *a1;
          int v104 = a1[1];
        }
        else
        {
          int v104 = 0;
          char v41 = 0;
        }
      }
      goto LABEL_138;
    }
    char v60 = (int *)(((unint64_t)a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    a1[2] = (WTF::StringImpl *)(v60 + 1);
    if (!v55)
    {
      int v104 = (WTF::StringImpl *)v40;
LABEL_138:
      *a1 = 0;
      a1[1] = 0;
      int v3 = 0;
      uint64_t v55 = a1[3];
      if (v55)
      {
        uint64_t v119 = result;
        if (v104)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v55 + 16))(v55, v41, v104);
          uint64_t result = v119;
          char v41 = *a1;
          unint64_t v40 = (unint64_t)a1[1];
          int v61 = 1;
          uint64_t v55 = *a1;
        }
        else
        {
          char v41 = 0;
          unint64_t v40 = 0;
          uint64_t v55 = 0;
          int v61 = 1;
        }
      }
      else
      {
        char v41 = 0;
        unint64_t v40 = 0;
        int v61 = 1;
      }
      goto LABEL_56;
    }
    int v61 = 0;
    int v3 = *v60;
LABEL_56:
    unint64_t v62 = (((unint64_t)a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v55;
    if (v40 < v62 || v40 - v62 <= 3)
    {
      unsigned int v64 = 0;
      char v41 = 0;
      *a1 = 0;
      a1[1] = 0;
      int v106 = a1[3];
      if (v106)
      {
        uint64_t v121 = result;
        if (v40)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v106 + 16))(v106, v55);
          uint64_t result = v121;
          char v41 = *a1;
          unsigned int v64 = a1[1];
        }
        else
        {
          unsigned int v64 = 0;
          char v41 = 0;
        }
      }
    }
    else
    {
      uint64_t v63 = (int *)(((unint64_t)a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a1[2] = (WTF::StringImpl *)(v63 + 1);
      unsigned int v64 = (WTF::StringImpl *)v40;
      if (v55)
      {
        int v65 = 0;
        int v37 = *v63;
        if (!v54) {
          goto LABEL_152;
        }
        goto LABEL_60;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    int v107 = a1[3];
    if (v107)
    {
      uint64_t v120 = result;
      if (v64)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v107 + 16))(v107, v41, v64);
        if (*a1)
        {
          int v37 = 0;
          int v65 = 1;
          uint64_t result = v120;
          if (!v54) {
            goto LABEL_152;
          }
LABEL_60:
          if (v58 || v61 || v65) {
            goto LABEL_152;
          }
          int v66 = 0;
          unint64_t v67 = result & 0xFFFFFFFFFFFFFF00;
          uint64_t v68 = result;
          LOBYTE(v51) = 1;
          goto LABEL_64;
        }
        int v114 = a1[1];
        int v115 = a1[3];
        *a1 = 0;
        a1[1] = 0;
        if (v115 && v114) {
          (*(void (**)(WTF::StringImpl *, void))(*(void *)v115 + 16))(v115, 0);
        }
      }
    }
LABEL_142:
    char v41 = *a1;
    int v108 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    int v109 = a1[3];
    if (!v109) {
      break;
    }
    if (!v108) {
      break;
    }
    uint64_t result = (*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v109 + 16))(v109, v41);
    unint64_t v51 = *a1;
    if (!*a1) {
      break;
    }
    unint64_t v67 = 0;
    uint64_t v68 = 0;
    int v66 = 1;
LABEL_64:
    uint64_t v12 = v124;
    __int16 v23 = v122;
    int v11 = v123;
LABEL_66:
    if (!BYTE8(v140)) {
      goto LABEL_152;
    }
    uint64_t v69 = v140;
    *(void *)&long long v140 = 0;
    if (v133) {
      goto LABEL_152;
    }
    if (v132) {
      goto LABEL_152;
    }
    if (!v39) {
      goto LABEL_152;
    }
    if (v44) {
      goto LABEL_152;
    }
    if (v48) {
      goto LABEL_152;
    }
    if (v66) {
      goto LABEL_152;
    }
    unint64_t v70 = v68 | v67;
    if (v11) {
      goto LABEL_152;
    }
LABEL_74:
    if (v139)
    {
      uint64_t v71 = v138;
      int v138 = 0;
      if (v137)
      {
        uint64_t v72 = v136;
        int v136 = 0;
        if (v135)
        {
          *(void *)&long long v140 = v134[0];
          *(void *)((char *)&v140 + 5) = *(void *)((char *)v134 + 5);
          if (!v131 && !v130 && v26 > 0xFF && !v66)
          {
            *(_DWORD *)(a2 + 56) = v127 | HIDWORD(v127);
            *(_DWORD *)(a2 + 60) = v126 | HIDWORD(v126);
            *(void *)(a2 + 64) = v128;
            *(void *)(a2 + 72) = v125;
            *(void *)(a2 + 80) = v49;
            *(void *)(a2 + 88) = v70;
            *(_DWORD *)(a2 + 96) = v2;
            *(_DWORD *)(a2 + 100) = v3;
            *(_DWORD *)(a2 + 104) = v37;
            *(unsigned char *)(a2 + 108) = (_BYTE)v51;
            *(void *)a2 = v12;
            *(void *)(a2 + 8) = v71;
            *(void *)(a2 + 16) = v72;
            *(_OWORD *)(a2 + 24) = v140;
            *(_DWORD *)(a2 + 40) = v129;
            *(_WORD *)(a2 + 44) = v23 | ((_WORD)v26 << 8);
            *(void *)(a2 + 48) = v69;
            *(unsigned char *)(a2 + 112) = 1;
            goto LABEL_82;
          }
        }
      }
    }
LABEL_152:
    __break(1u);
LABEL_153:
    if (v40) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v41);
    }
  }
  if (BYTE8(v140))
  {
    int v118 = (WTF::StringImpl *)v140;
    *(void *)&long long v140 = 0;
    if (v118)
    {
      if (*(_DWORD *)v118 == 2) {
        WTF::StringImpl::destroy(v118, v41);
      }
      else {
        *(_DWORD *)v118 -= 2;
      }
    }
  }
  char v41 = *a1;
  int v110 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (uint64_t)a1[3];
  if (result)
  {
    if (v110)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v41);
      uint64_t v12 = v124;
      __int16 v23 = v122;
      unint64_t v51 = *a1;
      if (*a1)
      {
        uint64_t v69 = 0;
        int v66 = 1;
        if (v123) {
          goto LABEL_152;
        }
        goto LABEL_74;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 112) = 0;
LABEL_82:
  if (v137)
  {
    uint64_t result = (uint64_t)v136;
    int v136 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v41);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v139)
  {
    uint64_t result = (uint64_t)v138;
    int v138 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v41);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1987FD0D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,char a23,WTF::StringImpl *a24,char a25)
{
  if (*(unsigned char *)(v25 - 112))
  {
    unint64_t v27 = *(WTF::StringImpl **)(v25 - 120);
    *(void *)(v25 - 120) = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, a2);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }
  if (a23 && a22)
  {
    if (*(_DWORD *)a22 == 2) {
      WTF::StringImpl::destroy(a22, a2);
    }
    else {
      *(_DWORD *)a22 -= 2;
    }
  }
  if (a25 && a24)
  {
    if (*(_DWORD *)a24 == 2) {
      WTF::StringImpl::destroy(a24, a2);
    }
    else {
      *(_DWORD *)a24 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits>>(IPC::Decoder *a1)
{
  unint64_t v2 = IPC::ArgumentCoder<WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits>,void>::decode<IPC::Decoder>(a1);
  if (!v3) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

void *IPC::Decoder::decode<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(void *result, uint64_t *a2)
{
  char v3 = result;
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v12 = a2[3];
    if (v12)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t v11 = *a2;
        uint64_t v10 = a2[1];
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_9;
  }
  unint64_t v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v10 = v6;
    uint64_t v11 = 0;
LABEL_9:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v13 = a2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_10;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v5);
    }
    *char v3 = 0;
    uint64_t v3[8] = 0;
    goto LABEL_12;
  }
  if (!v9)
  {
    *uint64_t result = 0;
    goto LABEL_7;
  }
  uint64_t result = (void *)IPC::ArgumentCoder<WebCore::SecurityOrigin,void>::decode(&v15, a2);
  *char v3 = 0;
  uint64_t v3[8] = 0;
  if (v16)
  {
    *(void *)char v3 = v15;
LABEL_7:
    uint64_t v3[8] = 1;
    return result;
  }
LABEL_12:

  return (void *)IPC::Decoder::markInvalid((IPC::Decoder *)a2);
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::NavigatingToAppBoundDomain>>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<std::optional<WebKit::NavigatingToAppBoundDomain>,void>::decode<IPC::Decoder>(a1);
  if ((v2 & 0xFF0000) == 0) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::Decoder::decode<unsigned short>(a1);
  unsigned __int16 v3 = v2;
  BOOL v4 = (v2 & 0xFE00) != 0 || (v2 & 0xFF0000) == 0;
  if (v4) {
    IPC::Decoder::markInvalid(a1);
  }
  if (v4) {
    return 0;
  }
  else {
    return v3 | 0x10000u;
  }
}

void WebKit::NetworkLoadParameters::~NetworkLoadParameters(WebKit::NetworkLoadParameters *this, void *a2)
{
  if (*((unsigned char *)this + 2952))
  {
    unint64_t v7 = (const void *)*((void *)this + 368);
    *((void *)this + 368) = 0;
    if (v7) {
      CFRelease(v7);
    }
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 2904, a2);
  if (*((unsigned char *)this + 2880)) {
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NetworkLoadParameters *)((char *)this + 304));
  }
  unsigned __int16 v3 = (const void *)*((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::NetworkLoadParameters *)((char *)this + 88));
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, v4);
  }
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v6, v4);
  }
}

uint64_t IPC::ArgumentCoder<WebKit::NetworkResourceLoadParameters,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits>,void>::encode<IPC::Encoder,WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits> const&>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 16));
  int v36 = *(const char ***)(a2 + 24);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)&v36);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,void>::encode<IPC::Encoder,WebCore::SecurityOrigin>(a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,void>::encode<IPC::Encoder,WebCore::SecurityOrigin>(a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(a1, *(_DWORD *)(a2 + 48));
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)(a2 + 88));
  char v4 = *(unsigned char *)(a2 + 288);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6) {
    goto LABEL_56;
  }
  *uint64_t v5 = v4;
  char v7 = *(unsigned char *)(a2 + 289);
  unint64_t v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1987FDA7CLL);
  }
  *unint64_t v8 = v7;
  LOBYTE(v36) = *(unsigned char *)(a2 + 290);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v36);
  char v10 = *(unsigned char *)(a2 + 291);
  uint64_t v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x1987FDA9CLL);
  }
  *uint64_t v11 = v10;
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 292));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 293));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 294));
  int v13 = *(unsigned __int8 *)(a2 + 2880);
  uint64_t v14 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v13)
  {
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x1987FDBCCLL);
    }
    *uint64_t v14 = 1;
    if (!*(unsigned char *)(a2 + 2880)) {
      goto LABEL_53;
    }
    IPC::ArgumentCoder<WebKit::NavigationActionData,void>::encode(a1, a2 + 304);
  }
  else
  {
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x1987FDB1CLL);
    }
    *uint64_t v14 = 0;
  }
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 2896));
  char v16 = *(unsigned char *)(a2 + 2920);
  int v17 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x1987FDABCLL);
  }
  *int v17 = v16;
  IPC::ArgumentCoder<std::optional<WebKit::NavigatingToAppBoundDomain>,void>::encode<IPC::Encoder,std::optional<WebKit::NavigatingToAppBoundDomain> const&>(a1, (char *)(a2 + 2960));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 2962));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 2963));
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 2964));
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)(a2 + 2968));
  WebCore::ResourceRequestBase::httpBody((uint64_t *)&v36, (WebCore::ResourceRequestBase *)(a2 + 88));
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,void>::encode<IPC::Encoder,WebCore::FormData>(a1, (uint64_t *)&v36);
  unint64_t v19 = (WTF::RefCountedBase *)v36;
  int v36 = 0;
  if (v19) {
    WTF::RefCounted<WebCore::FormData>::deref(v19);
  }
  WebKit::NetworkResourceLoadParameters::sandboxExtensionsIfHttpBody((WebKit::NetworkResourceLoadParameters *)a2, (uint64_t)&v36);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, (uint64_t)&v36);
  if (v38) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v20);
  }
  WebKit::NetworkResourceLoadParameters::sandboxExtensionIflocalFile((WebKit::NetworkResourceLoadParameters *)a2, &v36);
  IPC::ArgumentCoder<std::optional<WebKit::SandboxExtensionHandle>,void>::encode<IPC::Encoder,std::optional<WebKit::SandboxExtensionHandle>>(a1, (uint64_t)&v36);
  if (v37) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v36);
  }
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 3000));
  IPC::ArgumentCoder<WebCore::FetchOptions,void>::encode(a1, a2 + 3008);
  int v21 = *(unsigned __int8 *)(a2 + 3080);
  __int16 v22 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v21)
  {
    if (!v23)
    {
LABEL_54:
      __break(0xC471u);
      JUMPOUT(0x1987FDBACLL);
    }
    *__int16 v22 = 1;
    if (!*(unsigned char *)(a2 + 3080)) {
      goto LABEL_53;
    }
    IPC::VectorArgumentCoder<false,std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 3056);
    LODWORD(v36) = *(_DWORD *)(a2 + 3072);
    IPC::Encoder::operator<<<int>(a1, (int *)&v36);
  }
  else
  {
    if (!v23)
    {
      __break(0xC471u);
      JUMPOUT(0x1987FDB5CLL);
    }
    *__int16 v22 = 0;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 3088));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 3128));
  IPC::ArgumentCoder<WebCore::CrossOriginEmbedderPolicy,void>::encode(a1, a2 + 3168);
  IPC::ArgumentCoder<WebCore::CrossOriginEmbedderPolicy,void>::encode(a1, a2 + 3192);
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc> const&>(a1, a2 + 3216);
  IPC::VectorArgumentCoder<false,WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul>::encode<IPC::Encoder,WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc> const&>(a1, a2 + 3232);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 3248));
  LOBYTE(v36) = *(unsigned char *)(a2 + 3249);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v36);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 3250));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 3268));
  uint64_t v24 = *(unsigned int *)(a2 + 3268);
  if (v24)
  {
    unint64_t v33 = *(uint64_t **)(a2 + 3256);
    uint64_t v34 = 8 * v24;
    do
    {
      uint64_t v35 = *v33++;
      IPC::ArgumentCoder<WebCore::SecurityOrigin,void>::encode(a1, v35);
      v34 -= 8;
    }
    while (v34);
  }
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 3272));
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, a2 + 3280);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 3304));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 3312));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 3352));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 3353));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 3354));
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 3356));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 3360));
  IPC::ArgumentCoder<WebCore::CrossOriginOpenerPolicy,void>::encode(a1, a2 + 3400);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(a1, a2 + 3424);
  int v25 = *(unsigned __int8 *)(a2 + 3664);
  unsigned int v26 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v25)
  {
    if (!v27)
    {
      __break(0xC471u);
      JUMPOUT(0x1987FDB3CLL);
    }
    *unsigned int v26 = 0;
    goto LABEL_21;
  }
  if (!v27)
  {
LABEL_56:
    __break(0xC471u);
    JUMPOUT(0x1987FDA5CLL);
  }
  *unsigned int v26 = 1;
  if (!*(unsigned char *)(a2 + 3664)) {
    goto LABEL_53;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 3440));
  IPC::ArgumentCoder<WebCore::SecurityOrigin,void>::encode(a1, *(void *)(a2 + 3480));
  IPC::ArgumentCoder<WebCore::SecurityOrigin,void>::encode(a1, *(void *)(a2 + 3488));
  IPC::ArgumentCoder<WebCore::PolicyContainer,void>::encode(a1, a2 + 3496);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, a2 + 3576);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(a1, a2 + 3600);
  IPC::ArgumentCoder<WTF::UUID,void>::encode(a1, (uint64_t *)(a2 + 3616));
  int v36 = *(const char ***)(a2 + 3632);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)&v36);
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 3648));
LABEL_21:
  LOBYTE(v36) = *(unsigned char *)(a2 + 3680);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v36);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(a1, a2 + 3688);
  LOBYTE(v36) = *(unsigned char *)(a2 + 3704);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v36);
  if (*(unsigned char *)(a2 + 3720))
  {
    LOBYTE(v36) = 1;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)&v36);
    if (*(unsigned char *)(a2 + 3720))
    {
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, (uint64_t *)(a2 + 3712));
      goto LABEL_24;
    }
LABEL_53:
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_54;
  }
  int v28 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v29)
  {
    __break(0xC471u);
    JUMPOUT(0x1987FDADCLL);
  }
  *int v28 = 0;
LABEL_24:
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 3728));
  if (!*(unsigned char *)(a2 + 3776))
  {
    LOBYTE(v36) = 0;
    IPC::Encoder::operator<<<BOOL>(a1, (char *)&v36);
    goto LABEL_28;
  }
  unint64_t v30 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v31)
  {
    __break(0xC471u);
    JUMPOUT(0x1987FDAFCLL);
  }
  *unint64_t v30 = 1;
  if (!*(unsigned char *)(a2 + 3776)) {
    goto LABEL_53;
  }
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)(a2 + 3768));
LABEL_28:
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 3784));
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 3785));
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 3786));
}

void sub_1987FDBF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if (a11) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::NetworkResourceLoadParameters,void>::decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 v3 = (IPC::Decoder *)MEMORY[0x1F4188790](a1, a2, a3);
  uint64_t v5 = v4;
  uint64_t v577 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
  LOBYTE(v8) = v7;
  unint64_t v9 = IPC::Decoder::decode<WTF::Markable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>::MarkableTraits>>(v3);
  uint64_t v11 = v10;
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v3, (uint64_t)&v493);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(&v491, (uint64_t *)v3);
  IPC::Decoder::decode<WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(&v489, (uint64_t *)v3);
  uint64_t v437 = IPC::Decoder::decode<unsigned int>(v3);
  IPC::Decoder::decode<WebCore::ResourceRequest>(v3, (uint64_t)v486);
  unint64_t v12 = *((void *)v3 + 1);
  int v13 = *(WTF::StringImpl **)v3;
  unint64_t v14 = *((void *)v3 + 2) - *(void *)v3;
  if (v12 <= v14)
  {
    unint64_t v211 = 0;
    unsigned int v212 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v213 = *((void *)v3 + 3);
    if (v213)
    {
      if (v12)
      {
        (*(void (**)(uint64_t))(*(void *)v213 + 16))(v213);
        unsigned int v212 = *(WTF::StringImpl **)v3;
        unint64_t v211 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v211 = 0;
        unsigned int v212 = 0;
      }
    }
    goto LABEL_344;
  }
  uint64_t v15 = (unsigned __int8 *)v13 + v14;
  *((void *)v3 + 2) = v15 + 1;
  if (!v13)
  {
    unint64_t v211 = v12;
    unsigned int v212 = 0;
LABEL_344:
    unint64_t v12 = 0;
    int v13 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v214 = *((void *)v3 + 3);
    if (v214)
    {
      if (v211)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v214 + 16))(v214, v212, v211);
        int v13 = *(WTF::StringImpl **)v3;
        unint64_t v12 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v12 = 0;
        int v13 = 0;
      }
    }
    goto LABEL_345;
  }
  unsigned int v16 = *v15;
  if (v16 < 2)
  {
    LODWORD(v436) = 0;
    LOBYTE(v17) = v16 != 0;
    goto LABEL_5;
  }
LABEL_345:
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v215 = *((void *)v3 + 3);
  if (v215 && v12) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v215 + 16))(v215, v13);
  }
  IPC::Decoder::markInvalid(v3);
  LOBYTE(v17) = 0;
  LODWORD(v436) = 1;
LABEL_5:
  unint64_t v18 = *((void *)v3 + 1);
  unint64_t v19 = *(WTF::StringImpl **)v3;
  unint64_t v20 = *((void *)v3 + 2) - *(void *)v3;
  if (v18 <= v20)
  {
    unint64_t v216 = 0;
    int v217 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v218 = *((void *)v3 + 3);
    if (v218)
    {
      if (v18)
      {
        (*(void (**)(uint64_t))(*(void *)v218 + 16))(v218);
        int v217 = *(WTF::StringImpl **)v3;
        unint64_t v216 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v216 = 0;
        int v217 = 0;
      }
    }
    goto LABEL_348;
  }
  int v21 = (unsigned __int8 *)v19 + v20;
  *((void *)v3 + 2) = v21 + 1;
  if (!v19)
  {
    unint64_t v216 = v18;
    int v217 = 0;
LABEL_348:
    unint64_t v18 = 0;
    unint64_t v19 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v219 = *((void *)v3 + 3);
    if (v219)
    {
      if (v216)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v219 + 16))(v219, v217, v216);
        unint64_t v19 = *(WTF::StringImpl **)v3;
        unint64_t v18 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
      }
    }
    goto LABEL_349;
  }
  unsigned int v22 = *v21;
  if (v22 < 2)
  {
    LODWORD(v435) = 0;
    BOOL v427 = v22 != 0;
    goto LABEL_9;
  }
LABEL_349:
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v220 = *((void *)v3 + 3);
  if (v220 && v18) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v220 + 16))(v220, v19);
  }
  IPC::Decoder::markInvalid(v3);
  BOOL v427 = 0;
  LODWORD(v435) = 1;
LABEL_9:
  unsigned __int16 v23 = IPC::ArgumentCoder<WebCore::StoredCredentialsPolicy,void>::decode<IPC::Decoder>(v3);
  if (v23 <= 0xFFu) {
    IPC::Decoder::markInvalid(v3);
  }
  unint64_t v24 = *((void *)v3 + 1);
  int v25 = *(WTF::StringImpl **)v3;
  unint64_t v26 = *((void *)v3 + 2) - *(void *)v3;
  unsigned __int16 v442 = v23;
  if (v24 <= v26)
  {
    unint64_t v221 = 0;
    int v222 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v223 = *((void *)v3 + 3);
    if (v223)
    {
      if (v24)
      {
        (*(void (**)(uint64_t))(*(void *)v223 + 16))(v223);
        int v222 = *(WTF::StringImpl **)v3;
        unint64_t v221 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v221 = 0;
        int v222 = 0;
      }
    }
    goto LABEL_352;
  }
  uint64_t v27 = (unsigned __int8 *)v25 + v26;
  *((void *)v3 + 2) = v27 + 1;
  if (!v25)
  {
    unint64_t v221 = v24;
    int v222 = 0;
LABEL_352:
    unint64_t v24 = 0;
    int v25 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v224 = *((void *)v3 + 3);
    if (v224)
    {
      if (v221)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v224 + 16))(v224, v222, v221);
        int v25 = *(WTF::StringImpl **)v3;
        unint64_t v24 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v24 = 0;
        int v25 = 0;
      }
    }
    goto LABEL_353;
  }
  unsigned int v28 = *v27;
  if (v28 < 2)
  {
    int v434 = 0;
    BOOL v426 = v28 != 0;
    goto LABEL_15;
  }
LABEL_353:
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v225 = *((void *)v3 + 3);
  if (v225 && v24) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v225 + 16))(v225, v25);
  }
  IPC::Decoder::markInvalid(v3);
  BOOL v426 = 0;
  int v434 = 1;
LABEL_15:
  uint64_t v29 = &v569;
  unint64_t v30 = &v560;
  unint64_t v31 = *((void *)v3 + 1);
  int v32 = *(WTF::StringImpl **)v3;
  unint64_t v33 = *((void *)v3 + 2) - *(void *)v3;
  if (v31 <= v33)
  {
    unint64_t v226 = 0;
    int v227 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v228 = *((void *)v3 + 3);
    if (v228)
    {
      if (v31)
      {
        (*(void (**)(uint64_t))(*(void *)v228 + 16))(v228);
        int v227 = *(WTF::StringImpl **)v3;
        unint64_t v226 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v226 = 0;
        int v227 = 0;
      }
      uint64_t v29 = &v569;
      unint64_t v30 = &v560;
    }
    goto LABEL_356;
  }
  uint64_t v34 = (unsigned __int8 *)v32 + v33;
  uint64_t v35 = (uint64_t)v32 + v33 + 1;
  *((void *)v3 + 2) = v35;
  if (!v32)
  {
    unint64_t v226 = v31;
    int v227 = 0;
LABEL_356:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v229 = *((void *)v3 + 3);
    if (v229)
    {
      if (v226)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v229 + 16))(v229, v227, v226);
        unsigned int v36 = 0;
        int v32 = *(WTF::StringImpl **)v3;
        unint64_t v31 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v31 = 0;
        int v32 = 0;
        unsigned int v36 = 0;
      }
      uint64_t v29 = &v569;
      unint64_t v30 = &v560;
    }
    else
    {
      unint64_t v31 = 0;
      int v32 = 0;
      unsigned int v36 = 0;
    }
    goto LABEL_358;
  }
  unsigned int v36 = *v34;
  if (v36 < 2)
  {
    int v433 = 0;
    char v37 = 1;
    goto LABEL_19;
  }
LABEL_358:
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v230 = *((void *)v3 + 3);
  if (!v230)
  {
    char v425 = 0;
    unint64_t v231 = 0;
    int v32 = 0;
    int v433 = 1;
    goto LABEL_360;
  }
  if (!v31)
  {
    char v425 = 0;
    unint64_t v231 = 0;
    int v32 = 0;
    int v433 = 1;
LABEL_655:
    uint64_t v29 = &v569;
    unint64_t v30 = &v560;
    goto LABEL_360;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v230 + 16))(v230, v32);
  char v37 = 0;
  int v32 = *(WTF::StringImpl **)v3;
  unint64_t v31 = *((void *)v3 + 1);
  int v433 = 1;
  uint64_t v35 = *((void *)v3 + 2);
  uint64_t v29 = &v569;
  unint64_t v30 = &v560;
LABEL_19:
  if (!v36) {
    char v37 = 0;
  }
  char v425 = v37;
  unint64_t v38 = v35 - (void)v32;
  if (v31 <= v38)
  {
    unint64_t v231 = 0;
    uint64_t v359 = *((void *)v3 + 3);
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    if (v359 && v31)
    {
      (*(void (**)(uint64_t))(*(void *)v359 + 16))(v359);
      int v32 = *(WTF::StringImpl **)v3;
      unint64_t v231 = *((void *)v3 + 1);
    }
    else
    {
      int v32 = 0;
    }
    goto LABEL_655;
  }
  char v39 = (unsigned __int8 *)v32 + v38;
  uint64_t v40 = (uint64_t)v32 + v38 + 1;
  *((void *)v3 + 2) = v40;
  if (!v32)
  {
    unint64_t v231 = v31;
LABEL_360:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v232 = *((void *)v3 + 3);
    if (v232)
    {
      if (v231)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v232 + 16))(v232, v32, v231);
        unsigned int v41 = 0;
        int v32 = *(WTF::StringImpl **)v3;
        unint64_t v31 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v31 = 0;
        int v32 = 0;
        unsigned int v41 = 0;
      }
      uint64_t v29 = &v569;
      unint64_t v30 = &v560;
    }
    else
    {
      unint64_t v31 = 0;
      int v32 = 0;
      unsigned int v41 = 0;
    }
    goto LABEL_362;
  }
  unsigned int v41 = *v39;
  if (v41 < 2)
  {
    int v432 = 0;
    char v42 = 1;
    goto LABEL_25;
  }
LABEL_362:
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v233 = *((void *)v3 + 3);
  if (!v233)
  {
    char v424 = 0;
    unint64_t v234 = 0;
    int v32 = 0;
    int v432 = 1;
    goto LABEL_364;
  }
  if (!v31)
  {
    char v424 = 0;
    unint64_t v234 = 0;
    int v32 = 0;
    int v432 = 1;
LABEL_651:
    uint64_t v29 = &v569;
    unint64_t v30 = &v560;
    goto LABEL_364;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v233 + 16))(v233, v32);
  char v42 = 0;
  int v32 = *(WTF::StringImpl **)v3;
  unint64_t v31 = *((void *)v3 + 1);
  int v432 = 1;
  uint64_t v40 = *((void *)v3 + 2);
  uint64_t v29 = &v569;
  unint64_t v30 = &v560;
LABEL_25:
  if (!v41) {
    char v42 = 0;
  }
  char v424 = v42;
  unint64_t v43 = v40 - (void)v32;
  if (v31 <= v43)
  {
    unint64_t v234 = 0;
    uint64_t v358 = *((void *)v3 + 3);
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    if (v358 && v31)
    {
      (*(void (**)(uint64_t))(*(void *)v358 + 16))(v358);
      int v32 = *(WTF::StringImpl **)v3;
      unint64_t v234 = *((void *)v3 + 1);
    }
    else
    {
      int v32 = 0;
    }
    goto LABEL_651;
  }
  int v44 = (unsigned __int8 *)v32 + v43;
  *((void *)v3 + 2) = v44 + 1;
  if (!v32)
  {
    unint64_t v234 = v31;
LABEL_364:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v235 = *((void *)v3 + 3);
    if (v235)
    {
      if (v234)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v235 + 16))(v235, v32, v234);
        unsigned int v45 = 0;
        int v32 = *(WTF::StringImpl **)v3;
        unint64_t v31 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v31 = 0;
        int v32 = 0;
        unsigned int v45 = 0;
      }
      uint64_t v29 = &v569;
      unint64_t v30 = &v560;
    }
    else
    {
      unint64_t v31 = 0;
      int v32 = 0;
      unsigned int v45 = 0;
    }
    goto LABEL_366;
  }
  unsigned int v45 = *v44;
  if (v45 < 2)
  {
    int v431 = 0;
    char v46 = 1;
    goto LABEL_31;
  }
LABEL_366:
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v236 = *((void *)v3 + 3);
  if (!v236 || !v31)
  {
    int v32 = 0;
    char v423 = 0;
    unint64_t v31 = 0;
    int v431 = 1;
LABEL_368:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v237 = *((void *)v3 + 3);
    if (v237)
    {
      if (v31)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v237 + 16))(v237, v32);
        uint64_t v29 = &v569;
        unint64_t v30 = &v560;
        int v238 = *(WTF::StringImpl **)v3;
        unint64_t v31 = *((void *)v3 + 1);
      }
      else
      {
        int v238 = 0;
        uint64_t v29 = &v569;
        unint64_t v30 = &v560;
      }
    }
    else
    {
      int v238 = 0;
      unint64_t v31 = 0;
    }
    goto LABEL_370;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v236 + 16))(v236, v32);
  char v46 = 0;
  int v32 = *(WTF::StringImpl **)v3;
  unint64_t v31 = *((void *)v3 + 1);
  int v431 = 1;
  uint64_t v29 = &v569;
  unint64_t v30 = &v560;
LABEL_31:
  if (!v45) {
    char v46 = 0;
  }
  char v423 = v46;
  if (v31 <= *((void *)v3 + 2) - (void)v32) {
    goto LABEL_368;
  }
  unint64_t v47 = (unsigned __int8 *)*((void *)v3 + 2);
  *((void *)v3 + 2) = v47 + 1;
  if (!v32)
  {
    int v238 = 0;
LABEL_370:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v239 = *((void *)v3 + 3);
    if (v239)
    {
      if (v31)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v239 + 16))(v239, v238);
        uint64_t v29 = &v569;
        unint64_t v30 = &v560;
        int v32 = *(WTF::StringImpl **)v3;
        unint64_t v31 = *((void *)v3 + 1);
      }
      else
      {
        int v32 = 0;
        uint64_t v29 = &v569;
        unint64_t v30 = &v560;
      }
    }
    else
    {
      int v32 = 0;
      unint64_t v31 = 0;
    }
LABEL_372:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v240 = *((void *)v3 + 3);
    if (v240 && v31) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v240 + 16))(v240, v32);
    }
    goto LABEL_373;
  }
  unsigned int v48 = *v47;
  if (v48 >= 2) {
    goto LABEL_372;
  }
  if (!v48)
  {
    LOBYTE(v560) = 0;
    char v566 = 0;
    std::__optional_move_base<WebKit::NavigationActionData,false>::__optional_move_base[abi:sn180100](v572, (uint64_t)&v560);
    goto LABEL_38;
  }
  IPC::Decoder::decode<WebKit::NavigationActionData>(v3, (uint64_t)&v560);
  if (!v566)
  {
LABEL_373:
    v572[0] = 0;
    char v574 = 0;
    goto LABEL_40;
  }
  WebKit::NavigationActionData::NavigationActionData((uint64_t)v572, (uint64_t)&v560);
  char v573 = 1;
LABEL_38:
  char v574 = 1;
  if (v566) {
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)&v560);
  }
LABEL_40:
  if (!v574) {
    IPC::Decoder::markInvalid(v3);
  }
  unsigned __int16 v49 = IPC::ArgumentCoder<WebCore::ShouldRelaxThirdPartyCookieBlocking,void>::decode<IPC::Decoder>(v3);
  if (v49 <= 0xFFu) {
    IPC::Decoder::markInvalid(v3);
  }
  unint64_t v50 = *((void *)v3 + 1);
  unint64_t v51 = *(WTF::StringImpl **)v3;
  unint64_t v52 = *((void *)v3 + 2) - *(void *)v3;
  unsigned __int16 v441 = v49;
  if (v50 <= v52)
  {
    unint64_t v241 = 0;
    int v242 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v243 = *((void *)v3 + 3);
    if (v243)
    {
      if (v50)
      {
        uint64_t v29 = &v569;
        (*(void (**)(uint64_t))(*(void *)v243 + 16))(v243);
        unint64_t v30 = &v560;
        int v242 = *(WTF::StringImpl **)v3;
        unint64_t v241 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v241 = 0;
        int v242 = 0;
        uint64_t v29 = &v569;
        unint64_t v30 = &v560;
      }
    }
    goto LABEL_375;
  }
  unsigned __int8 v53 = (unsigned __int8 *)v51 + v52;
  *((void *)v3 + 2) = v53 + 1;
  if (!v51)
  {
    unint64_t v241 = v50;
    int v242 = 0;
LABEL_375:
    unint64_t v50 = 0;
    unint64_t v51 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v244 = *((void *)v3 + 3);
    if (v244)
    {
      if (v241)
      {
        uint64_t v29 = &v569;
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v244 + 16))(v244, v242, v241);
        unint64_t v30 = &v560;
        unint64_t v51 = *(WTF::StringImpl **)v3;
        unint64_t v50 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v50 = 0;
        unint64_t v51 = 0;
        uint64_t v29 = &v569;
        unint64_t v30 = &v560;
      }
    }
    goto LABEL_376;
  }
  unsigned int v54 = *v53;
  if (v54 < 2)
  {
    int v430 = 0;
    BOOL v422 = v54 != 0;
    goto LABEL_48;
  }
LABEL_376:
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v245 = *((void *)v3 + 3);
  if (v245 && v50) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v245 + 16))(v245, v51);
  }
  IPC::Decoder::markInvalid(v3);
  BOOL v422 = 0;
  int v430 = 1;
LABEL_48:
  int v440 = IPC::Decoder::decode<std::optional<WebKit::NavigatingToAppBoundDomain>>(v3);
  unint64_t v55 = *((void *)v3 + 1);
  unint64_t v56 = *(WTF::StringImpl **)v3;
  unint64_t v57 = *((void *)v3 + 2) - *(void *)v3;
  if (v55 <= v57)
  {
    unint64_t v246 = 0;
    int v247 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v248 = *((void *)v3 + 3);
    if (v248)
    {
      if (v55)
      {
        (*(void (**)(uint64_t))(*(void *)v248 + 16))(v248);
        int v247 = *(WTF::StringImpl **)v3;
        unint64_t v246 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v246 = 0;
        int v247 = 0;
      }
      uint64_t v29 = &v569;
      unint64_t v30 = &v560;
    }
    goto LABEL_379;
  }
  int v58 = (unsigned __int8 *)v56 + v57;
  uint64_t v59 = (uint64_t)v56 + v57 + 1;
  *((void *)v3 + 2) = v59;
  if (!v56)
  {
    unint64_t v246 = v55;
    int v247 = 0;
LABEL_379:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v249 = *((void *)v3 + 3);
    if (v249)
    {
      if (v246)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v249 + 16))(v249, v247, v246);
        unsigned int v60 = 0;
        unint64_t v56 = *(WTF::StringImpl **)v3;
        unint64_t v55 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v55 = 0;
        unint64_t v56 = 0;
        unsigned int v60 = 0;
      }
      uint64_t v29 = &v569;
      unint64_t v30 = &v560;
    }
    else
    {
      unint64_t v55 = 0;
      unint64_t v56 = 0;
      unsigned int v60 = 0;
    }
    goto LABEL_381;
  }
  unsigned int v60 = *v58;
  if (v60 < 2)
  {
    int v429 = 0;
    char v61 = 1;
    goto LABEL_52;
  }
LABEL_381:
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v250 = *((void *)v3 + 3);
  if (!v250)
  {
    char v421 = 0;
    unint64_t v251 = 0;
    unint64_t v56 = 0;
    int v429 = 1;
    goto LABEL_383;
  }
  if (!v55)
  {
    char v421 = 0;
    unint64_t v251 = 0;
    unint64_t v56 = 0;
    int v429 = 1;
LABEL_659:
    uint64_t v29 = &v569;
    unint64_t v30 = &v560;
    goto LABEL_383;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v250 + 16))(v250, v56);
  char v61 = 0;
  unint64_t v56 = *(WTF::StringImpl **)v3;
  unint64_t v55 = *((void *)v3 + 1);
  int v429 = 1;
  uint64_t v59 = *((void *)v3 + 2);
  uint64_t v29 = &v569;
  unint64_t v30 = &v560;
LABEL_52:
  if (!v60) {
    char v61 = 0;
  }
  char v421 = v61;
  unint64_t v62 = v59 - (void)v56;
  if (v55 <= v62)
  {
    unint64_t v251 = 0;
    uint64_t v360 = *((void *)v3 + 3);
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    if (v360 && v55)
    {
      (*(void (**)(uint64_t))(*(void *)v360 + 16))(v360);
      unint64_t v56 = *(WTF::StringImpl **)v3;
      unint64_t v251 = *((void *)v3 + 1);
    }
    else
    {
      unint64_t v56 = 0;
    }
    goto LABEL_659;
  }
  uint64_t v63 = (unsigned __int8 *)v56 + v62;
  *((void *)v3 + 2) = v63 + 1;
  if (!v56)
  {
    unint64_t v251 = v55;
LABEL_383:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v252 = *((void *)v3 + 3);
    if (v252)
    {
      if (v251)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v252 + 16))(v252, v56, v251);
        unsigned int v64 = 0;
        unint64_t v56 = *(WTF::StringImpl **)v3;
        unint64_t v55 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v55 = 0;
        unint64_t v56 = 0;
        unsigned int v64 = 0;
      }
      uint64_t v29 = &v569;
      unint64_t v30 = &v560;
    }
    else
    {
      unint64_t v55 = 0;
      unint64_t v56 = 0;
      unsigned int v64 = 0;
    }
    goto LABEL_385;
  }
  unsigned int v64 = *v63;
  if (v64 < 2)
  {
    int v428 = 0;
    char v65 = 1;
    goto LABEL_58;
  }
LABEL_385:
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v253 = *((void *)v3 + 3);
  if (v253)
  {
    if (v55) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v253 + 16))(v253, v56);
    }
    char v65 = 0;
    int v428 = 1;
    uint64_t v29 = &v569;
    unint64_t v30 = &v560;
  }
  else
  {
    char v65 = 0;
    int v428 = 1;
  }
LABEL_58:
  if (!v64) {
    char v65 = 0;
  }
  char v420 = v65;
  int v439 = IPC::Decoder::decode<WTF::OptionSet<WebCore::AdvancedPrivacyProtections>>(v3);
  uint64_t v402 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
  char v419 = v66;
  IPC::Decoder::decode<WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>>(v3, &v484);
  IPC::Decoder::decode<std::optional<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((char **)v3, (uint64_t)v482);
  IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(v3, (uint64_t)&v479);
  uint64_t v401 = IPC::Decoder::decode<WTF::Seconds>((uint64_t *)v3);
  char v415 = v67;
  IPC::Decoder::decode<WebCore::FetchOptions>(v3, (uint64_t)&v569);
  unint64_t v68 = *((void *)v3 + 1);
  uint64_t v69 = *(WTF::StringImpl **)v3;
  unint64_t v70 = *((void *)v3 + 2) - *(void *)v3;
  if (v68 <= v70)
  {
    unint64_t v254 = 0;
    int v255 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v256 = *((void *)v3 + 3);
    if (v256)
    {
      if (v68)
      {
        uint64_t v29 = &v569;
        (*(void (**)(uint64_t))(*(void *)v256 + 16))(v256);
        unint64_t v30 = &v560;
        int v255 = *(WTF::StringImpl **)v3;
        unint64_t v254 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v254 = 0;
        int v255 = 0;
        uint64_t v29 = &v569;
        unint64_t v30 = &v560;
      }
    }
    goto LABEL_388;
  }
  uint64_t v71 = (unsigned __int8 *)v69 + v70;
  *((void *)v3 + 2) = v71 + 1;
  if (!v69)
  {
    unint64_t v254 = v68;
    int v255 = 0;
LABEL_388:
    unint64_t v68 = 0;
    uint64_t v69 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v257 = *((void *)v3 + 3);
    if (v257)
    {
      if (v254)
      {
        uint64_t v29 = &v569;
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v257 + 16))(v257, v255, v254);
        unint64_t v30 = &v560;
        uint64_t v69 = *(WTF::StringImpl **)v3;
        unint64_t v68 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v68 = 0;
        uint64_t v69 = 0;
        uint64_t v29 = &v569;
        unint64_t v30 = &v560;
      }
    }
    goto LABEL_389;
  }
  unsigned int v72 = *v71;
  if (v72 >= 2)
  {
LABEL_389:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v258 = *((void *)v3 + 3);
    if (v258 && v68) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v258 + 16))(v258, v69);
    }
    goto LABEL_390;
  }
  if (!v72)
  {
    LOBYTE(v474[0]) = 0;
    char v477 = 0;
    char v478 = 1;
    goto LABEL_65;
  }
  IPC::Decoder::decode<WebCore::ContentSecurityPolicyResponseHeaders>((uint64_t)&v560, v3);
  if (v564)
  {
    uint64_t v194 = v560;
    uint64_t v560 = 0;
    v474[0] = v194;
    uint64_t v195 = v561;
    uint64_t v561 = 0;
    v474[1] = v195;
    int v475 = v562;
    char v476 = v563;
    char v477 = 1;
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v560, v193);
    char v478 = 1;
    goto LABEL_65;
  }
LABEL_390:
  LOBYTE(v474[0]) = 0;
  char v478 = 0;
  IPC::Decoder::markInvalid(v3);
LABEL_65:
  IPC::Decoder::decode<WTF::URL>(v3, v472);
  IPC::Decoder::decode<WTF::URL>(v3, v470);
  IPC::Decoder::decode<WebCore::CrossOriginEmbedderPolicy>((uint64_t)&v467, v3);
  IPC::Decoder::decode<WebCore::CrossOriginEmbedderPolicy>((uint64_t)&v464, v3);
  IPC::Decoder::decode<WebCore::HTTPHeaderMap>((uint64_t)v462, (uint64_t *)v3);
  unint64_t v73 = *((void *)v3 + 1);
  unint64_t v74 = *(WTF::StringImpl **)v3;
  unint64_t v75 = *((void *)v3 + 2) - *(void *)v3;
  if (v73 <= v75)
  {
    unint64_t v259 = 0;
    int v260 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v261 = *((void *)v3 + 3);
    if (v261)
    {
      if (v73)
      {
        (*(void (**)(uint64_t))(*(void *)v261 + 16))(v261);
        int v260 = *(WTF::StringImpl **)v3;
        unint64_t v259 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v259 = 0;
        int v260 = 0;
      }
      uint64_t v29 = &v569;
      unint64_t v30 = &v560;
    }
    goto LABEL_392;
  }
  uint64_t v76 = (unsigned __int8 *)v74 + v75;
  *((void *)v3 + 2) = v76 + 1;
  if (!v74)
  {
    unint64_t v259 = v73;
    int v260 = 0;
LABEL_392:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v262 = *((void *)v3 + 3);
    if (v262)
    {
      if (v259)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v262 + 16))(v262, v260, v259);
        unsigned int v77 = 0;
        unint64_t v74 = *(WTF::StringImpl **)v3;
        unint64_t v73 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v73 = 0;
        unint64_t v74 = 0;
        unsigned int v77 = 0;
      }
      uint64_t v29 = &v569;
      unint64_t v30 = &v560;
    }
    else
    {
      unint64_t v73 = 0;
      unint64_t v74 = 0;
      unsigned int v77 = 0;
    }
    goto LABEL_394;
  }
  unsigned int v77 = *v76;
  if (v77 < 2)
  {
    int v414 = 0;
    char v78 = 1;
    goto LABEL_69;
  }
LABEL_394:
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v263 = *((void *)v3 + 3);
  if (!v263)
  {
    unint64_t v74 = 0;
    char v400 = 0;
    unint64_t v73 = 0;
    int v414 = 1;
    goto LABEL_396;
  }
  if (!v73)
  {
    unint64_t v74 = 0;
    char v400 = 0;
    int v414 = 1;
    uint64_t v29 = &v569;
    unint64_t v30 = &v560;
LABEL_396:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v264 = *((void *)v3 + 3);
    if (v264)
    {
      if (v73)
      {
        uint64_t v29 = &v569;
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v264 + 16))(v264, v74);
        unint64_t v30 = &v560;
        unsigned __int8 v265 = *(WTF::StringImpl **)v3;
        unint64_t v73 = *((void *)v3 + 1);
      }
      else
      {
        unsigned __int8 v265 = 0;
        uint64_t v29 = &v569;
        unint64_t v30 = &v560;
      }
    }
    else
    {
      unsigned __int8 v265 = 0;
      unint64_t v73 = 0;
    }
LABEL_398:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v266 = *((void *)v3 + 3);
    if (v266)
    {
      uint64_t v29 = &v569;
      if (v73) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v266 + 16))(v266, v265);
      }
      unint64_t v30 = &v560;
    }
    goto LABEL_399;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v263 + 16))(v263, v74);
  char v78 = 0;
  unint64_t v74 = *(WTF::StringImpl **)v3;
  unint64_t v73 = *((void *)v3 + 1);
  int v414 = 1;
  uint64_t v29 = &v569;
  unint64_t v30 = &v560;
LABEL_69:
  if (!v77) {
    char v78 = 0;
  }
  char v400 = v78;
  if (v73 <= *((void *)v3 + 2) - (void)v74) {
    goto LABEL_396;
  }
  uint64_t v79 = (unsigned __int8 *)*((void *)v3 + 2);
  *((void *)v3 + 2) = v79 + 1;
  if (!v74)
  {
    unsigned __int8 v265 = 0;
    goto LABEL_398;
  }
  unsigned int v80 = *v79;
  if (v80 < 3)
  {
    char v399 = v80;
    int v413 = 0;
    goto LABEL_75;
  }
LABEL_399:
  IPC::Decoder::markInvalid(v3);
  char v399 = 0;
  int v413 = 1;
LABEL_75:
  unint64_t v81 = *((void *)v3 + 1);
  int v82 = *(WTF::StringImpl **)v3;
  unint64_t v83 = *((void *)v3 + 2) - *(void *)v3;
  if (v81 <= v83)
  {
    unint64_t v267 = 0;
    uint64_t v268 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v269 = *((void *)v3 + 3);
    if (v269)
    {
      if (v81)
      {
        (*(void (**)(uint64_t))(*(void *)v269 + 16))(v269);
        uint64_t v268 = *(WTF::StringImpl **)v3;
        unint64_t v267 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v267 = 0;
        uint64_t v268 = 0;
      }
      uint64_t v29 = &v569;
      unint64_t v30 = &v560;
    }
    goto LABEL_401;
  }
  char v84 = (unsigned __int8 *)v82 + v83;
  *((void *)v3 + 2) = v84 + 1;
  if (!v82)
  {
    unint64_t v267 = v81;
    uint64_t v268 = 0;
LABEL_401:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v270 = *((void *)v3 + 3);
    if (v270)
    {
      if (v267)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v270 + 16))(v270, v268, v267);
        unsigned int v85 = 0;
        int v82 = *(WTF::StringImpl **)v3;
        unint64_t v81 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v81 = 0;
        int v82 = 0;
        unsigned int v85 = 0;
      }
      uint64_t v29 = &v569;
      unint64_t v30 = &v560;
    }
    else
    {
      unint64_t v81 = 0;
      int v82 = 0;
      unsigned int v85 = 0;
    }
    goto LABEL_403;
  }
  unsigned int v85 = *v84;
  if (v85 < 2)
  {
    int v412 = 0;
    char v86 = 1;
    goto LABEL_79;
  }
LABEL_403:
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v271 = *((void *)v3 + 3);
  if (v271)
  {
    if (v81)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v271 + 16))(v271, v82);
      char v86 = 0;
      int v82 = *(WTF::StringImpl **)v3;
      unint64_t v81 = *((void *)v3 + 1);
    }
    else
    {
      int v82 = 0;
      char v86 = 0;
    }
    int v412 = 1;
    uint64_t v29 = &v569;
    unint64_t v30 = &v560;
  }
  else
  {
    unint64_t v81 = 0;
    int v82 = 0;
    char v86 = 0;
    int v412 = 1;
  }
LABEL_79:
  if (!v85) {
    char v86 = 0;
  }
  char v398 = v86;
  unint64_t v87 = ((*((void *)v3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v82;
  if (v81 < v87 || v81 - v87 <= 7)
  {
    unint64_t v277 = 0;
    char v278 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v279 = *((void *)v3 + 3);
    if (v279)
    {
      if (v81)
      {
        uint64_t v29 = &v569;
        (*(void (**)(uint64_t))(*(void *)v279 + 16))(v279);
        unint64_t v30 = &v560;
        char v278 = *(WTF::StringImpl **)v3;
        unint64_t v277 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v277 = 0;
        char v278 = 0;
        uint64_t v29 = &v569;
        unint64_t v30 = &v560;
      }
    }
  }
  else
  {
    int v88 = (unint64_t *)((*((void *)v3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
    *((void *)v3 + 2) = v88 + 1;
    if (v82)
    {
      unint64_t v89 = *v88;
      uint64_t v561 = 0;
      uint64_t v560 = 0;
      if (v89 < 0x20000)
      {
        if (v89)
        {
          uint64_t v207 = WTF::fastMalloc((WTF *)(8 * v89));
          LODWORD(v561) = v89;
          uint64_t v560 = v207;
          goto LABEL_331;
        }
        uint64_t v90 = 0;
        uint64_t v91 = 0;
LABEL_87:
        uint64_t v560 = 0;
        uint64_t v459 = v90;
        uint64_t v561 = 0;
        uint64_t v460 = v91;
LABEL_88:
        char v461 = 1;
        WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v560, v82);
        goto LABEL_89;
      }
      while (1)
      {
        IPC::Decoder::decode<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(&v519, (uint64_t *)v3);
        if (!v520[0])
        {
LABEL_774:
          LOBYTE(v459) = 0;
          char v461 = 0;
          WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v560, v82);
          goto LABEL_413;
        }
        int v376 = HIDWORD(v561);
        if (HIDWORD(v561) != v561) {
          break;
        }
        WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>((uint64_t)&v560, (unint64_t)&v519);
        uint64_t v29 = &v569;
        unint64_t v30 = &v560;
        if (v520[0]) {
          goto LABEL_770;
        }
LABEL_772:
        if (!--v89)
        {
          WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v560, (WTF::StringImpl *)HIDWORD(v561));
          uint64_t v379 = v560;
          uint64_t v560 = 0;
          uint64_t v459 = v379;
          uint64_t v380 = v561;
          uint64_t v561 = 0;
          uint64_t v460 = v380;
          goto LABEL_88;
        }
      }
      uint64_t v377 = v519;
      v519 = 0;
      *(void *)(v560 + 8 * HIDWORD(v561)) = v377;
      HIDWORD(v561) = v376 + 1;
LABEL_770:
      v378 = v519;
      v519 = 0;
      if (v378) {
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v378, v82);
      }
      goto LABEL_772;
    }
    unint64_t v277 = v81;
    char v278 = 0;
  }
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v280 = *((void *)v3 + 3);
  if (v280 && v277) {
    (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v280 + 16))(v280, v278, v277);
  }
  LOBYTE(v459) = 0;
  char v461 = 0;
LABEL_413:
  IPC::Decoder::markInvalid(v3);
LABEL_89:
  unint64_t v92 = *((void *)v3 + 1);
  int v93 = *(WTF::StringImpl **)v3;
  unint64_t v94 = *((void *)v3 + 2) - *(void *)v3;
  if (v92 <= v94)
  {
    unint64_t v272 = 0;
    char v273 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v274 = *((void *)v3 + 3);
    if (v274)
    {
      if (v92)
      {
        (*(void (**)(uint64_t))(*(void *)v274 + 16))(v274);
        char v273 = *(WTF::StringImpl **)v3;
        unint64_t v272 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v272 = 0;
        char v273 = 0;
      }
      uint64_t v29 = &v569;
      unint64_t v30 = &v560;
    }
    goto LABEL_406;
  }
  int v95 = (unsigned __int8 *)v93 + v94;
  *((void *)v3 + 2) = v95 + 1;
  if (!v93)
  {
    unint64_t v272 = v92;
    char v273 = 0;
LABEL_406:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v275 = *((void *)v3 + 3);
    if (v275)
    {
      if (v272)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v275 + 16))(v275, v273, v272);
        unsigned int v96 = 0;
        int v93 = *(WTF::StringImpl **)v3;
        unint64_t v92 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v92 = 0;
        int v93 = 0;
        unsigned int v96 = 0;
      }
      uint64_t v29 = &v569;
      unint64_t v30 = &v560;
    }
    else
    {
      unint64_t v92 = 0;
      int v93 = 0;
      unsigned int v96 = 0;
    }
    goto LABEL_408;
  }
  unsigned int v96 = *v95;
  if (v96 < 2)
  {
    int v411 = 0;
    char v97 = 1;
    goto LABEL_93;
  }
LABEL_408:
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v276 = *((void *)v3 + 3);
  if (v276)
  {
    if (v92) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v276 + 16))(v276, v93);
    }
    char v97 = 0;
    int v411 = 1;
    uint64_t v29 = &v569;
    unint64_t v30 = &v560;
  }
  else
  {
    char v97 = 0;
    int v411 = 1;
  }
LABEL_93:
  if (!v96) {
    char v97 = 0;
  }
  char v397 = v97;
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v3, (uint64_t)&v456);
  unint64_t v98 = *((void *)v3 + 1);
  int v99 = *(WTF::StringImpl **)v3;
  unint64_t v100 = *((void *)v3 + 2) - *(void *)v3;
  if (v98 <= v100)
  {
    unint64_t v281 = 0;
    char v282 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v283 = *((void *)v3 + 3);
    if (v283)
    {
      if (v98)
      {
        (*(void (**)(uint64_t))(*(void *)v283 + 16))(v283);
        char v282 = *(WTF::StringImpl **)v3;
        unint64_t v281 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v281 = 0;
        char v282 = 0;
      }
      uint64_t v29 = &v569;
      unint64_t v30 = &v560;
    }
    goto LABEL_415;
  }
  int v101 = (unsigned __int8 *)v99 + v100;
  *((void *)v3 + 2) = v101 + 1;
  if (!v99)
  {
    unint64_t v281 = v98;
    char v282 = 0;
LABEL_415:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v284 = *((void *)v3 + 3);
    if (v284)
    {
      if (v281)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v284 + 16))(v284, v282, v281);
        unsigned int v102 = 0;
        int v99 = *(WTF::StringImpl **)v3;
        unint64_t v98 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v98 = 0;
        int v99 = 0;
        unsigned int v102 = 0;
      }
      uint64_t v29 = &v569;
      unint64_t v30 = &v560;
    }
    else
    {
      unint64_t v98 = 0;
      int v99 = 0;
      unsigned int v102 = 0;
    }
    goto LABEL_417;
  }
  unsigned int v102 = *v101;
  if (v102 < 2)
  {
    int v410 = 0;
    char v103 = 1;
    goto LABEL_99;
  }
LABEL_417:
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v285 = *((void *)v3 + 3);
  if (v285)
  {
    if (v98) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v285 + 16))(v285, v99);
    }
    char v103 = 0;
    int v410 = 1;
    uint64_t v29 = &v569;
    unint64_t v30 = &v560;
  }
  else
  {
    char v103 = 0;
    int v410 = 1;
  }
LABEL_99:
  if (!v102) {
    char v103 = 0;
  }
  char v396 = v103;
  IPC::Decoder::decode<WTF::URL>(v3, v454);
  unint64_t v104 = *((void *)v3 + 1);
  int v105 = *(WTF::StringImpl **)v3;
  unint64_t v106 = *((void *)v3 + 2) - *(void *)v3;
  if (v104 <= v106)
  {
    unint64_t v286 = 0;
    int v287 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v288 = *((void *)v3 + 3);
    if (v288)
    {
      if (v104)
      {
        (*(void (**)(uint64_t))(*(void *)v288 + 16))(v288);
        int v287 = *(WTF::StringImpl **)v3;
        unint64_t v286 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v286 = 0;
        int v287 = 0;
      }
      uint64_t v29 = &v569;
      unint64_t v30 = &v560;
    }
    goto LABEL_420;
  }
  int v107 = (unsigned __int8 *)v105 + v106;
  uint64_t v108 = (uint64_t)v105 + v106 + 1;
  *((void *)v3 + 2) = v108;
  if (!v105)
  {
    unint64_t v286 = v104;
    int v287 = 0;
LABEL_420:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v289 = *((void *)v3 + 3);
    if (v289)
    {
      if (v286)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v289 + 16))(v289, v287, v286);
        unsigned int v109 = 0;
        int v105 = *(WTF::StringImpl **)v3;
        unint64_t v104 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v104 = 0;
        int v105 = 0;
        unsigned int v109 = 0;
      }
      uint64_t v29 = &v569;
      unint64_t v30 = &v560;
    }
    else
    {
      unint64_t v104 = 0;
      int v105 = 0;
      unsigned int v109 = 0;
    }
    goto LABEL_422;
  }
  unsigned int v109 = *v107;
  if (v109 < 2)
  {
    int v409 = 0;
    char v110 = 1;
    goto LABEL_105;
  }
LABEL_422:
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v290 = *((void *)v3 + 3);
  if (!v290)
  {
    char v395 = 0;
    unint64_t v291 = 0;
    int v105 = 0;
    int v409 = 1;
    goto LABEL_424;
  }
  if (!v104)
  {
    char v395 = 0;
    unint64_t v291 = 0;
    int v105 = 0;
    int v409 = 1;
LABEL_667:
    uint64_t v29 = &v569;
    unint64_t v30 = &v560;
    goto LABEL_424;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v290 + 16))(v290, v105);
  char v110 = 0;
  int v105 = *(WTF::StringImpl **)v3;
  unint64_t v104 = *((void *)v3 + 1);
  int v409 = 1;
  uint64_t v108 = *((void *)v3 + 2);
  uint64_t v29 = &v569;
  unint64_t v30 = &v560;
LABEL_105:
  if (!v109) {
    char v110 = 0;
  }
  char v395 = v110;
  unint64_t v111 = v108 - (void)v105;
  if (v104 <= v111)
  {
    unint64_t v291 = 0;
    uint64_t v362 = *((void *)v3 + 3);
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    if (v362 && v104)
    {
      (*(void (**)(uint64_t))(*(void *)v362 + 16))(v362);
      int v105 = *(WTF::StringImpl **)v3;
      unint64_t v291 = *((void *)v3 + 1);
    }
    else
    {
      int v105 = 0;
    }
    goto LABEL_667;
  }
  int v112 = (unsigned __int8 *)v105 + v111;
  uint64_t v113 = (uint64_t)v105 + v111 + 1;
  *((void *)v3 + 2) = v113;
  if (!v105)
  {
    unint64_t v291 = v104;
LABEL_424:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v292 = *((void *)v3 + 3);
    if (v292)
    {
      if (v291)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v292 + 16))(v292, v105, v291);
        unsigned int v114 = 0;
        int v105 = *(WTF::StringImpl **)v3;
        unint64_t v104 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v104 = 0;
        int v105 = 0;
        unsigned int v114 = 0;
      }
      uint64_t v29 = &v569;
      unint64_t v30 = &v560;
    }
    else
    {
      unint64_t v104 = 0;
      int v105 = 0;
      unsigned int v114 = 0;
    }
    goto LABEL_426;
  }
  unsigned int v114 = *v112;
  if (v114 < 2)
  {
    int v408 = 0;
    char v115 = 1;
    goto LABEL_111;
  }
LABEL_426:
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v293 = *((void *)v3 + 3);
  if (!v293)
  {
    char v394 = 0;
    unint64_t v294 = 0;
    int v105 = 0;
    int v408 = 1;
    goto LABEL_428;
  }
  if (!v104)
  {
    char v394 = 0;
    unint64_t v294 = 0;
    int v105 = 0;
    int v408 = 1;
LABEL_663:
    uint64_t v29 = &v569;
    unint64_t v30 = &v560;
    goto LABEL_428;
  }
  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v293 + 16))(v293, v105);
  char v115 = 0;
  int v105 = *(WTF::StringImpl **)v3;
  unint64_t v104 = *((void *)v3 + 1);
  int v408 = 1;
  uint64_t v113 = *((void *)v3 + 2);
  uint64_t v29 = &v569;
  unint64_t v30 = &v560;
LABEL_111:
  if (!v114) {
    char v115 = 0;
  }
  char v394 = v115;
  unint64_t v116 = v113 - (void)v105;
  if (v104 <= v116)
  {
    unint64_t v294 = 0;
    uint64_t v361 = *((void *)v3 + 3);
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    if (v361 && v104)
    {
      (*(void (**)(uint64_t))(*(void *)v361 + 16))(v361);
      int v105 = *(WTF::StringImpl **)v3;
      unint64_t v294 = *((void *)v3 + 1);
    }
    else
    {
      int v105 = 0;
    }
    goto LABEL_663;
  }
  uint64_t v117 = (unsigned __int8 *)v105 + v116;
  *((void *)v3 + 2) = v117 + 1;
  if (!v105)
  {
    unint64_t v294 = v104;
LABEL_428:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v295 = *((void *)v3 + 3);
    if (v295)
    {
      if (v294)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v295 + 16))(v295, v105, v294);
        unint64_t v89 = 0;
        int v105 = *(WTF::StringImpl **)v3;
        unint64_t v104 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v104 = 0;
        int v105 = 0;
        unint64_t v89 = 0;
      }
      uint64_t v29 = &v569;
      unint64_t v30 = &v560;
    }
    else
    {
      unint64_t v104 = 0;
      int v105 = 0;
      unint64_t v89 = 0;
    }
    goto LABEL_430;
  }
  unint64_t v89 = *v117;
  if (v89 < 2)
  {
    int v407 = 0;
    char v118 = 1;
    goto LABEL_117;
  }
LABEL_430:
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v296 = *((void *)v3 + 3);
  if (v296)
  {
    if (v104) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v296 + 16))(v296, v105);
    }
    char v118 = 0;
    int v407 = 1;
    uint64_t v29 = &v569;
    unint64_t v30 = &v560;
  }
  else
  {
    char v118 = 0;
    int v407 = 1;
  }
LABEL_117:
  if (!v89) {
    char v118 = 0;
  }
  char v393 = v118;
  unsigned int v438 = IPC::Decoder::decode<WTF::OptionSet<WebCore::SandboxFlag>>(v3);
  IPC::Decoder::decode<WTF::URL>(v3, v452);
  IPC::Decoder::decode<WebCore::CrossOriginOpenerPolicy>((uint64_t)v451, v3);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v3, (uint64_t)v449);
  unint64_t v119 = *((void *)v3 + 1);
  uint64_t v120 = *(WTF::StringImpl **)v3;
  unint64_t v121 = *((void *)v3 + 2) - *(void *)v3;
  if (v119 <= v121)
  {
    unint64_t v297 = 0;
    char v298 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v299 = *((void *)v3 + 3);
    if (v299)
    {
      if (v119)
      {
        uint64_t v29 = &v569;
        (*(void (**)(uint64_t))(*(void *)v299 + 16))(v299);
        unint64_t v30 = &v560;
        char v298 = *(WTF::StringImpl **)v3;
        unint64_t v297 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v297 = 0;
        char v298 = 0;
        uint64_t v29 = &v569;
        unint64_t v30 = &v560;
      }
    }
    goto LABEL_433;
  }
  __int16 v122 = (unsigned __int8 *)v120 + v121;
  *((void *)v3 + 2) = v122 + 1;
  if (!v120)
  {
    unint64_t v297 = v119;
    char v298 = 0;
LABEL_433:
    unint64_t v119 = 0;
    uint64_t v120 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v300 = *((void *)v3 + 3);
    if (v300)
    {
      if (v297)
      {
        uint64_t v29 = &v569;
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v300 + 16))(v300, v298, v297);
        unint64_t v30 = &v560;
        uint64_t v120 = *(WTF::StringImpl **)v3;
        unint64_t v119 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v119 = 0;
        uint64_t v120 = 0;
        uint64_t v29 = &v569;
        unint64_t v30 = &v560;
      }
    }
    goto LABEL_434;
  }
  unsigned int v123 = *v122;
  if (v123 >= 2)
  {
LABEL_434:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v301 = *((void *)v3 + 3);
    if (v301 && v119) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v301 + 16))(v301, v120);
    }
    goto LABEL_435;
  }
  if (!v123)
  {
    *(unsigned char *)unint64_t v30 = 0;
    *((unsigned char *)v30 + 224) = 0;
    std::__optional_move_base<WebCore::NavigationRequester,false>::__optional_move_base[abi:sn180100](v567, (uint64_t)&v560);
    goto LABEL_124;
  }
  IPC::Decoder::decode<WTF::URL>(v3, &v515);
  IPC::Decoder::decode<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(&v513, (uint64_t *)v3);
  IPC::Decoder::decode<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(&v511, (uint64_t *)v3);
  IPC::Decoder::decode<WebCore::PolicyContainer>(v3, (uint64_t)&v501);
  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(v3, (uint64_t)&v498);
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v3, &v495);
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::UUID>>(v3, (uint64_t)&v575);
  uint64_t v139 = IPC::Decoder::decode<WTF::OptionSet<WebCore::SandboxFlag>>(v3);
  if (*(void *)v3)
  {
    if (!v518) {
      goto LABEL_338;
    }
    unsigned int v196 = v515;
    v515 = 0;
    v519 = v196;
    *(_OWORD *)v520 = v516;
    *(_OWORD *)&v520[16] = v517;
    LODWORD(v516) = v516 & 0xFFFFFFFE;
    if (!v514) {
      goto LABEL_338;
    }
    unsigned int v197 = v513;
    v513 = 0;
    v521 = v197;
    if (!v512) {
      goto LABEL_338;
    }
    unsigned int v198 = v511;
    v511 = 0;
    v522 = v198;
    if (!v510) {
      goto LABEL_338;
    }
    unsigned int v199 = v501;
    v501 = 0;
    v523 = v199;
    uint64_t v200 = v502;
    uint64_t v502 = 0;
    uint64_t v524 = v200;
    int v525 = v503;
    char v526 = v504;
    __int16 v527 = v505;
    long long v201 = v506;
    long long v506 = 0u;
    long long v529 = v201;
    __int16 v530 = v507;
    long long v202 = v508;
    long long v508 = 0u;
    long long v531 = v202;
    char v532 = v509;
    if (!v500) {
      goto LABEL_338;
    }
    long long v533 = v498;
    char v534 = v499;
    if (!v497) {
      goto LABEL_338;
    }
    uint64_t v535 = v495;
    char v536 = v496;
    if (!*((unsigned char *)v29 + 2704)) {
      goto LABEL_338;
    }
    long long v537 = v575;
    uint64_t v538 = v576;
    if (!WORD1(v139)) {
      goto LABEL_338;
    }
    __int16 v539 = v139;
    std::__optional_destruct_base<WebCore::NavigationRequester,false>::__optional_destruct_base[abi:sn180100]<WebCore::NavigationRequester>((uint64_t)&v560, (uint64_t)&v519);
    WebCore::NavigationRequester::~NavigationRequester((WebCore::NavigationRequester *)&v519, v203);
    std::__optional_destruct_base<WebCore::PolicyContainer,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v501, v204);
  }
  else
  {
    *(unsigned char *)unint64_t v30 = 0;
    *((unsigned char *)v30 + 224) = 0;
    int v333 = v512;
    std::__optional_destruct_base<WebCore::PolicyContainer,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v501, v82);
    if (v333 && v511) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v511, v205);
    }
  }
  if (v514 && v513) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v513, v205);
  }
  if (v518)
  {
    unsigned int v206 = v515;
    v515 = 0;
    if (v206)
    {
      if (*(_DWORD *)v206 == 2) {
        WTF::StringImpl::destroy(v206, v205);
      }
      else {
        *(_DWORD *)v206 -= 2;
      }
    }
  }
  if (!*((unsigned char *)v30 + 224))
  {
    IPC::Decoder::markInvalid(v3);
    unint64_t v30 = &v560;
    uint64_t v29 = &v569;
    if (!v565)
    {
LABEL_435:
      *((unsigned char *)v30 + 3792) = 0;
      *((unsigned char *)v30 + 4032) = 0;
      goto LABEL_126;
    }
  }
  std::__optional_destruct_base<WebCore::NavigationRequester,false>::__optional_destruct_base[abi:sn180100]<WebCore::NavigationRequester>((uint64_t)v567, (uint64_t)&v560);
LABEL_124:
  *((unsigned char *)v30 + 4032) = 1;
  if (*((unsigned char *)v30 + 224)) {
    WebCore::NavigationRequester::~NavigationRequester((WebCore::NavigationRequester *)&v560, v124);
  }
LABEL_126:
  if (!*((unsigned char *)v30 + 4032)) {
    IPC::Decoder::markInvalid(v3);
  }
  unint64_t v125 = *((void *)v3 + 1);
  uint64_t v126 = *(WTF::StringImpl **)v3;
  unint64_t v127 = *((void *)v3 + 2) - *(void *)v3;
  if (v125 <= v127)
  {
    unint64_t v302 = 0;
    char v303 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v304 = *((void *)v3 + 3);
    if (v304)
    {
      if (v125)
      {
        uint64_t v29 = &v569;
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v304 + 16))(v304, v126, v125);
        char v303 = *(WTF::StringImpl **)v3;
        unint64_t v302 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v302 = 0;
        char v303 = 0;
        uint64_t v29 = &v569;
      }
    }
    goto LABEL_437;
  }
  uint64_t v128 = (unsigned __int8 *)v126 + v127;
  *((void *)v3 + 2) = v128 + 1;
  if (!v126)
  {
    unint64_t v302 = v125;
    char v303 = 0;
LABEL_437:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v305 = *((void *)v3 + 3);
    if (v305 && v302) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v305 + 16))(v305, v303);
    }
    goto LABEL_438;
  }
  unsigned int v392 = *v128;
  if (v392 < 3)
  {
    int v406 = 0;
    goto LABEL_132;
  }
LABEL_438:
  IPC::Decoder::markInvalid(v3);
  LOBYTE(v392) = 0;
  int v406 = 1;
LABEL_132:
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((uint64_t *)v3, &v515);
  unint64_t v129 = *((void *)v3 + 1);
  int v130 = *(WTF::StringImpl **)v3;
  unint64_t v131 = *((void *)v3 + 2) - *(void *)v3;
  v403 = (unsigned char *)v5;
  v417 = (WTF *)v6;
  unint64_t v418 = v9;
  char v416 = v17;
  if (v129 <= v131)
  {
    unint64_t v306 = 0;
    char v307 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v308 = *((void *)v3 + 3);
    if (v308)
    {
      if (v129)
      {
        uint64_t v29 = &v569;
        (*(void (**)(uint64_t))(*(void *)v308 + 16))(v308);
        char v307 = *(WTF::StringImpl **)v3;
        unint64_t v306 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v306 = 0;
        char v307 = 0;
        uint64_t v29 = &v569;
      }
    }
    goto LABEL_440;
  }
  int v132 = (char *)v130 + v131;
  uint64_t v133 = (uint64_t)v130 + v131 + 1;
  *((void *)v3 + 2) = v133;
  if (!v130)
  {
    unint64_t v306 = v129;
    char v307 = 0;
LABEL_440:
    unint64_t v9 = v11;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v309 = *((void *)v3 + 3);
    if (v309 && v306) {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v309 + 16))(v309, v307, v306);
    }
    goto LABEL_441;
  }
  unint64_t v9 = v11;
  int v134 = *v132;
  if ((v134 & 0x80000000) == 0)
  {
    int v405 = 0;
    uint64_t v11 = v134 | 0x100;
    goto LABEL_136;
  }
LABEL_441:
  IPC::Decoder::markInvalid(v3);
  uint64_t v11 = 0;
  unint64_t v129 = *((void *)v3 + 1);
  uint64_t v133 = *((void *)v3 + 2);
  int v405 = 1;
  int v130 = *(WTF::StringImpl **)v3;
LABEL_136:
  unint64_t v135 = v133 - (void)v130;
  if (v129 <= v135)
  {
    unint64_t v310 = 0;
    char v311 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v312 = *((void *)v3 + 3);
    if (v312)
    {
      if (v129)
      {
        uint64_t v29 = &v569;
        (*(void (**)(uint64_t))(*(void *)v312 + 16))(v312);
        char v311 = *(WTF::StringImpl **)v3;
        unint64_t v310 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v310 = 0;
        char v311 = 0;
        uint64_t v29 = &v569;
      }
    }
    goto LABEL_443;
  }
  int v136 = (unsigned __int8 *)v130 + v135;
  *((void *)v3 + 2) = v136 + 1;
  if (!v130)
  {
    unint64_t v310 = v129;
    char v311 = 0;
LABEL_443:
    unint64_t v129 = 0;
    int v130 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v313 = *((void *)v3 + 3);
    if (v313)
    {
      if (v310)
      {
        uint64_t v29 = &v569;
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v313 + 16))(v313, v311, v310);
        int v130 = *(WTF::StringImpl **)v3;
        unint64_t v129 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v129 = 0;
        int v130 = 0;
        uint64_t v29 = &v569;
      }
    }
    goto LABEL_444;
  }
  unsigned int v137 = *v136;
  if (v137 >= 2)
  {
LABEL_444:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v314 = *((void *)v3 + 3);
    if (v314 && v129) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v314 + 16))(v314, v130);
    }
LABEL_445:
    IPC::Decoder::markInvalid(v3);
    uint64_t v138 = 0;
    int v404 = 1;
    goto LABEL_141;
  }
  if (!v137)
  {
    uint64_t v390 = 0;
    uint64_t v138 = 0;
    int v404 = 0;
    goto LABEL_141;
  }
  uint64_t v331 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v3);
  if (!v332) {
    goto LABEL_445;
  }
  uint64_t v138 = v331;
  int v404 = 0;
  uint64_t v390 = 1;
LABEL_141:
  uint64_t v139 = (uint64_t)IPC::Decoder::decode<WTF::URL>(v3, &v501);
  unint64_t v140 = *((void *)v3 + 1);
  int v141 = *(WTF::StringImpl **)v3;
  unint64_t v142 = *((void *)v3 + 2) - *(void *)v3;
  uint64_t v391 = v138;
  if (v140 <= v142)
  {
    unint64_t v315 = 0;
    unint64_t v316 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v317 = *((void *)v3 + 3);
    if (v317)
    {
      if (v140)
      {
        uint64_t v29 = &v569;
        (*(void (**)(uint64_t))(*(void *)v317 + 16))(v317);
        unint64_t v316 = *(WTF::StringImpl **)v3;
        unint64_t v315 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v315 = 0;
        unint64_t v316 = 0;
        uint64_t v29 = &v569;
      }
    }
    goto LABEL_447;
  }
  int v143 = (unsigned __int8 *)v141 + v142;
  *((void *)v3 + 2) = v143 + 1;
  if (!v141)
  {
    unint64_t v315 = v140;
    unint64_t v316 = 0;
LABEL_447:
    unint64_t v140 = 0;
    int v141 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v318 = *((void *)v3 + 3);
    if (v318)
    {
      if (v315)
      {
        uint64_t v29 = &v569;
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v318 + 16))(v318, v316, v315);
        int v141 = *(WTF::StringImpl **)v3;
        unint64_t v140 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v140 = 0;
        int v141 = 0;
        uint64_t v29 = &v569;
      }
    }
    goto LABEL_448;
  }
  unsigned int v144 = *v143;
  if (v144 >= 2)
  {
LABEL_448:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v319 = *((void *)v3 + 3);
    if (v319 && v140) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v319 + 16))(v319, v141);
    }
    goto LABEL_449;
  }
  if (!v144)
  {
    int v147 = 0;
    uint64_t v148 = 0;
    uint64_t v146 = 0;
    goto LABEL_147;
  }
  uint64_t v139 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
  if (v145)
  {
    uint64_t v146 = v139;
    int v147 = 0;
    uint64_t v148 = 1;
    goto LABEL_147;
  }
LABEL_449:
  uint64_t v139 = IPC::Decoder::markInvalid(v3);
  uint64_t v146 = 0;
  int v147 = 1;
LABEL_147:
  unint64_t v149 = *((void *)v3 + 1);
  int v82 = *(WTF::StringImpl **)v3;
  unint64_t v150 = *((void *)v3 + 2) - *(void *)v3;
  if (v149 <= v150)
  {
    unint64_t v320 = 0;
    long long v321 = 0;
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v322 = *((void *)v3 + 3);
    if (v322)
    {
      int v355 = v147;
      uint64_t v356 = v148;
      uint64_t v357 = v146;
      if (v149)
      {
        (*(void (**)(uint64_t))(*(void *)v322 + 16))(v322);
        long long v321 = *(WTF::StringImpl **)v3;
        unint64_t v320 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v320 = 0;
        long long v321 = 0;
      }
      uint64_t v29 = &v569;
      uint64_t v146 = v357;
      uint64_t v148 = v356;
      int v147 = v355;
    }
    goto LABEL_451;
  }
  int v151 = (unsigned __int8 *)v82 + v150;
  uint64_t v152 = (uint64_t)v82 + v150 + 1;
  *((void *)v3 + 2) = v152;
  if (!v82)
  {
    unint64_t v320 = v149;
    long long v321 = 0;
LABEL_451:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v323 = *((void *)v3 + 3);
    if (v323)
    {
      int v352 = v147;
      uint64_t v353 = v148;
      uint64_t v354 = v146;
      if (v320)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v323 + 16))(v323, v321, v320);
        unsigned int v153 = 0;
        int v82 = *(WTF::StringImpl **)v3;
        unint64_t v149 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v149 = 0;
        int v82 = 0;
        unsigned int v153 = 0;
      }
      uint64_t v29 = &v569;
      uint64_t v146 = v354;
      uint64_t v148 = v353;
      int v147 = v352;
    }
    else
    {
      unint64_t v149 = 0;
      int v82 = 0;
      unsigned int v153 = 0;
    }
    goto LABEL_453;
  }
  unsigned int v153 = *v151;
  if (v153 < 2)
  {
    uint64_t v154 = 0;
    unsigned int v155 = 1;
    goto LABEL_151;
  }
LABEL_453:
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v324 = *((void *)v3 + 3);
  if (!v324)
  {
    uint64_t v156 = 0;
    unint64_t v325 = 0;
    int v82 = 0;
    uint64_t v154 = 1;
    goto LABEL_455;
  }
  int v340 = v147;
  unint64_t v30 = (uint64_t *)v148;
  uint64_t v341 = v146;
  if (!v149)
  {
    uint64_t v156 = 0;
    unint64_t v325 = 0;
    int v82 = 0;
    uint64_t v154 = 1;
    uint64_t v29 = &v569;
LABEL_455:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v326 = *((void *)v3 + 3);
    if (v326)
    {
      unsigned int v388 = v156;
      uint64_t v348 = v154;
      int v349 = v147;
      uint64_t v350 = v148;
      uint64_t v351 = v146;
      if (v325)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v326 + 16))(v326, v82, v325);
        uint64_t v5 = 0;
        int v82 = *(WTF::StringImpl **)v3;
        unint64_t v149 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v149 = 0;
        int v82 = 0;
        uint64_t v5 = 0;
      }
      uint64_t v29 = &v569;
      uint64_t v146 = v351;
      uint64_t v148 = v350;
      int v147 = v349;
      uint64_t v154 = v348;
      uint64_t v156 = v388;
    }
    else
    {
      unint64_t v149 = 0;
      int v82 = 0;
      uint64_t v5 = 0;
    }
    goto LABEL_457;
  }
  uint64_t v139 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v324 + 16))(v324, v82);
  unsigned int v155 = 0;
  int v82 = *(WTF::StringImpl **)v3;
  unint64_t v149 = *((void *)v3 + 1);
  uint64_t v154 = 1;
  uint64_t v152 = *((void *)v3 + 2);
  uint64_t v29 = &v569;
  uint64_t v146 = v341;
  uint64_t v148 = (uint64_t)v30;
  int v147 = v340;
LABEL_151:
  if (v153) {
    uint64_t v156 = v155;
  }
  else {
    uint64_t v156 = 0;
  }
  unint64_t v157 = v152 - (void)v82;
  if (v149 <= v157)
  {
    uint64_t v363 = v156;
    uint64_t v364 = v154;
    int v365 = v147;
    uint64_t v366 = v148;
    uint64_t v367 = v146;
    unint64_t v325 = 0;
    uint64_t v368 = *((void *)v3 + 3);
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    if (v368 && v149)
    {
      (*(void (**)(uint64_t))(*(void *)v368 + 16))(v368);
      int v82 = *(WTF::StringImpl **)v3;
      unint64_t v325 = *((void *)v3 + 1);
    }
    else
    {
      int v82 = 0;
    }
    uint64_t v29 = &v569;
    uint64_t v146 = v367;
    uint64_t v148 = v366;
    int v147 = v365;
    uint64_t v154 = v364;
    uint64_t v156 = v363;
    goto LABEL_455;
  }
  int v158 = (unsigned __int8 *)v82 + v157;
  uint64_t v159 = (uint64_t)v82 + v157 + 1;
  *((void *)v3 + 2) = v159;
  if (!v82)
  {
    unint64_t v325 = v149;
    goto LABEL_455;
  }
  uint64_t v5 = *v158;
  if (v5 < 2)
  {
    uint64_t v160 = 0;
    unsigned int v161 = 1;
    goto LABEL_158;
  }
LABEL_457:
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v327 = *((void *)v3 + 3);
  if (!v327)
  {
    LODWORD(v162) = 0;
    unint64_t v328 = 0;
    int v82 = 0;
    LODWORD(v160) = 1;
    goto LABEL_459;
  }
  unsigned int v386 = v156;
  unint64_t v30 = (uint64_t *)v154;
  uint64_t v337 = v11;
  LODWORD(v17) = v147;
  uint64_t v338 = v148;
  uint64_t v339 = v146;
  if (!v149)
  {
    LODWORD(v162) = 0;
    unint64_t v328 = 0;
    int v82 = 0;
    uint64_t v29 = &v569;
    LODWORD(v160) = 1;
    uint64_t v11 = v337;
    uint64_t v156 = v156;
LABEL_459:
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v329 = *((void *)v3 + 3);
    if (v329)
    {
      int v383 = v162;
      int v387 = v160;
      uint64_t v342 = v156;
      uint64_t v343 = v154;
      uint64_t v344 = v11;
      int v345 = v147;
      uint64_t v346 = v148;
      uint64_t v347 = v146;
      if (v328)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v329 + 16))(v329, v82, v328);
        int v82 = *(WTF::StringImpl **)v3;
        unint64_t v149 = *((void *)v3 + 1);
      }
      else
      {
        unint64_t v149 = 0;
        int v82 = 0;
      }
      uint64_t v29 = &v569;
      uint64_t v146 = v347;
      uint64_t v148 = v346;
      int v147 = v345;
      uint64_t v11 = v344;
      uint64_t v154 = v343;
      uint64_t v156 = v342;
      LODWORD(v162) = v383;
      LODWORD(v160) = v387;
    }
    else
    {
      unint64_t v149 = 0;
      int v82 = 0;
    }
    goto LABEL_461;
  }
  uint64_t v139 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v327 + 16))(v327, v82);
  unsigned int v161 = 0;
  int v82 = *(WTF::StringImpl **)v3;
  unint64_t v149 = *((void *)v3 + 1);
  uint64_t v159 = *((void *)v3 + 2);
  uint64_t v29 = &v569;
  uint64_t v146 = v339;
  uint64_t v160 = 1;
  uint64_t v148 = v338;
  int v147 = v17;
  uint64_t v11 = v337;
  uint64_t v154 = (uint64_t)v30;
  uint64_t v156 = v386;
LABEL_158:
  if (v5) {
    unint64_t v162 = v161;
  }
  else {
    unint64_t v162 = 0;
  }
  unint64_t v163 = v159 - (void)v82;
  if (v149 <= v163)
  {
    int v384 = v162;
    int v389 = v160;
    uint64_t v369 = v156;
    uint64_t v370 = v154;
    uint64_t v371 = v11;
    int v372 = v147;
    uint64_t v373 = v148;
    uint64_t v374 = v146;
    unint64_t v328 = 0;
    uint64_t v375 = *((void *)v3 + 3);
    *(void *)unsigned __int16 v3 = 0;
    *((void *)v3 + 1) = 0;
    if (v375 && v149)
    {
      (*(void (**)(uint64_t))(*(void *)v375 + 16))(v375);
      int v82 = *(WTF::StringImpl **)v3;
      unint64_t v328 = *((void *)v3 + 1);
    }
    else
    {
      int v82 = 0;
    }
    uint64_t v29 = &v569;
    uint64_t v146 = v374;
    uint64_t v148 = v373;
    int v147 = v372;
    uint64_t v11 = v371;
    uint64_t v154 = v370;
    uint64_t v156 = v369;
    LODWORD(v162) = v384;
    LODWORD(v160) = v389;
    goto LABEL_459;
  }
  int v164 = (unsigned __int8 *)v82 + v163;
  *((void *)v3 + 2) = v164 + 1;
  if (!v82)
  {
    unint64_t v328 = v149;
    goto LABEL_459;
  }
  unsigned int v165 = *v164;
  if (v165 <= 1)
  {
    uint64_t v6 = 0;
    unint64_t v89 = v165 != 0;
    goto LABEL_165;
  }
  uint64_t v29 = &v569;
LABEL_461:
  *(void *)unsigned __int16 v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v330 = *((void *)v3 + 3);
  if (!v330) {
    goto LABEL_462;
  }
  if (!v149) {
    goto LABEL_462;
  }
  unsigned int v382 = v162;
  unsigned int v385 = v160;
  uint64_t v17 = v156;
  unint64_t v30 = (uint64_t *)v154;
  uint64_t v334 = v11;
  int v335 = v147;
  uint64_t v5 = v148;
  uint64_t v336 = v146;
  uint64_t v139 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v330 + 16))(v330, v82);
  uint64_t v29 = &v569;
  unint64_t v162 = v382;
  uint64_t v160 = v385;
  if (!*(void *)v3)
  {
LABEL_462:
    unsigned char *v403 = 0;
    v403[3792] = 0;
    goto LABEL_246;
  }
  uint64_t v146 = v336;
  uint64_t v148 = v5;
  int v147 = v335;
  uint64_t v11 = v334;
  uint64_t v154 = (uint64_t)v30;
  uint64_t v156 = v17;
  unint64_t v89 = 0;
  uint64_t v6 = 1;
LABEL_165:
  if (!(_BYTE)v8
    || !(_BYTE)v9
    || !v494
    || !v492
    || !v490
    || (v437 & 0xFF00000000) == 0
    || !v488
    || v436
    || v435
    || v442 <= 0xFFu
    || v434
    || v433
    || v432
    || v431
    || !v574
    || v441 <= 0xFFu
    || v430
    || (v440 & 0xFF0000) == 0
    || v429
    || v428
    || (v439 & 0xFF0000) == 0)
  {
    goto LABEL_338;
  }
  unint64_t v9 = v162;
  uint64_t v29 = (uint64_t *)v160;
  uint64_t v5 = v156;
  unint64_t v30 = (uint64_t *)v154;
  LODWORD(v17) = v147;
  uint64_t v435 = v148;
  uint64_t v436 = v146;
  v519 = v417;
  *(void *)v520 = v418;
  *(_OWORD *)&v520[8] = v493;
  int v166 = v491;
  v491 = 0;
  unsigned int v167 = v489;
  v489 = 0;
  *(void *)&v520[24] = v166;
  v521 = v167;
  LODWORD(v522) = v437;
  BYTE4(v522) = 0;
  char v528 = 0;
  uint64_t v437 = (uint64_t)&v529;
  uint64_t v139 = WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)&v529, (uint64_t)v486);
  int v168 = v487;
  v487 = 0;
  CFTypeRef cf = v168;
  char v541 = v416;
  BOOL v542 = v427;
  char v543 = v442;
  BOOL v544 = v426;
  char v545 = v425;
  char v546 = v424;
  char v547 = v423;
  unsigned __int16 v3 = (IPC::Decoder *)v548;
  v548[0] = 0;
  char v549 = 0;
  if (v573)
  {
    uint64_t v139 = (uint64_t)WebKit::NavigationActionData::NavigationActionData((WebKit::NavigationActionData *)v548, (const WebKit::NavigationActionData *)v572);
    char v549 = 1;
  }
  BOOL v550 = v441 != 0;
  unint64_t v8 = &v551;
  long long v551 = 0u;
  BOOL v552 = v422;
  char v553 = 0;
  char v555 = 0;
  __int16 v556 = v440;
  char v557 = v421;
  char v558 = v420;
  __int16 v559 = v439;
  if (!v419) {
    goto LABEL_338;
  }
  if (!v485) {
    goto LABEL_338;
  }
  if (!v483) {
    goto LABEL_338;
  }
  if (!v481) {
    goto LABEL_338;
  }
  if (!v415) {
    goto LABEL_338;
  }
  if (!v571) {
    goto LABEL_338;
  }
  if (!v478) {
    goto LABEL_338;
  }
  if (!v473) {
    goto LABEL_338;
  }
  if (!v471) {
    goto LABEL_338;
  }
  if (!v469) {
    goto LABEL_338;
  }
  __int16 v447 = v467;
  long long v169 = v468;
  long long v468 = 0uLL;
  long long v448 = v169;
  if (!v466
    || (v445 = v464, long long v170 = v465, v465 = 0uLL, v446 = v170, !v463)
    || v414
    || v413
    || v412
    || !v461
    || v411
    || !v458
    || (long long v443 = v456, v444 = v457, v410)
    || !v455
    || v409
    || v408
    || v407
    || !HIWORD(v438)
    || !v453
    || !v451[24]
    || !v450
    || !v568
    || v406
    || !BYTE8(v516)
    || v405
    || v404
    || !BYTE8(v506)
    || v17
    || v30
    || v29
    || v6)
  {
LABEL_338:
    __break(1u);
LABEL_339:
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v139, v82);
    while (1)
    {
      if (!--v89)
      {
        uint64_t v90 = v560;
        uint64_t v91 = v561;
        goto LABEL_87;
      }
LABEL_331:
      IPC::Decoder::decode<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>(&v519, (uint64_t *)v3);
      if (!v520[0]) {
        goto LABEL_774;
      }
      int v208 = HIDWORD(v561);
      if (HIDWORD(v561) == v561)
      {
        WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>>((uint64_t)&v560, (unint64_t)&v519);
        if (v520[0]) {
          goto LABEL_334;
        }
      }
      else
      {
        unsigned int v209 = v519;
        v519 = 0;
        *(void *)(v560 + 8 * HIDWORD(v561)) = v209;
        HIDWORD(v561) = v208 + 1;
LABEL_334:
        uint64_t v139 = (uint64_t)v519;
        v519 = 0;
        if (v139) {
          goto LABEL_339;
        }
      }
    }
  }
  WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((uint64_t)&v560, (uint64_t)&v519, v402, &v484, (uint64_t)v482, (uint64_t)&v479, (uint64_t)&v569, v474, *(double *)&v401, (uint64_t *)v472, (uint64_t *)v470, (uint64_t)&v447, (uint64_t)&v445, v462, v400, v399, v398, &v459, v397,
    &v443,
    v396,
    (uint64_t *)v454,
    v395,
    v394,
    v393,
    v381,
    v438,
    (uint64_t *)v452,
    (uint64_t)v451,
    v449[0],
    v449[1],
    (uint64_t)v567,
    v392,
    (uint64_t)v515,
    v516,
    v11,
    v391,
    v390,
    (uint64_t *)&v501,
    v436,
    v435,
    v5,
    v9,
    v89);
  *(unsigned char *)(WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((uint64_t)v403, (uint64_t)&v560) + 3792) = 1;
  WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)&v560, v171);
  int v173 = (WTF::StringImpl *)*((void *)&v446 + 1);
  *((void *)&v446 + 1) = 0;
  uint64_t v29 = &v569;
  if (v173)
  {
    if (*(_DWORD *)v173 == 2) {
      WTF::StringImpl::destroy(v173, v172);
    }
    else {
      *(_DWORD *)v173 -= 2;
    }
  }
  int v174 = (WTF::StringImpl *)v446;
  *(void *)&long long v446 = 0;
  if (v174)
  {
    if (*(_DWORD *)v174 == 2) {
      WTF::StringImpl::destroy(v174, v172);
    }
    else {
      *(_DWORD *)v174 -= 2;
    }
  }
  int v175 = (WTF::StringImpl *)*((void *)&v448 + 1);
  *((void *)&v448 + 1) = 0;
  if (v175)
  {
    if (*(_DWORD *)v175 == 2) {
      WTF::StringImpl::destroy(v175, v172);
    }
    else {
      *(_DWORD *)v175 -= 2;
    }
  }
  unsigned int v176 = (WTF::StringImpl *)v448;
  *(void *)&long long v448 = 0;
  if (v176)
  {
    if (*(_DWORD *)v176 == 2) {
      WTF::StringImpl::destroy(v176, v172);
    }
    else {
      *(_DWORD *)v176 -= 2;
    }
  }
  if (v555)
  {
    CFTypeRef v210 = v554;
    CFTypeRef v554 = 0;
    if (v210) {
      CFRelease(v210);
    }
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v551, v172);
  if (v549) {
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v548);
  }
  CFTypeRef v177 = cf;
  CFTypeRef cf = 0;
  if (v177) {
    CFRelease(v177);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v529);
  unsigned int v178 = v521;
  v521 = 0;
  if (v178) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v178, v82);
  }
  uint64_t v179 = *(void *)&v520[24];
  *(void *)&v520[24] = 0;
  if (v179) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v179, v82);
  }
LABEL_246:
  if (BYTE8(v506))
  {
    unsigned int v180 = v501;
    v501 = 0;
    if (v180)
    {
      if (*(_DWORD *)v180 == 2) {
        WTF::StringImpl::destroy(v180, v82);
      }
      else {
        *(_DWORD *)v180 -= 2;
      }
    }
  }
  if (v568 && v567[224]) {
    WebCore::NavigationRequester::~NavigationRequester((WebCore::NavigationRequester *)v567, v82);
  }
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v451, v82);
  if (v453)
  {
    unsigned int v182 = v452[0];
    v452[0] = 0;
    if (v182)
    {
      if (*(_DWORD *)v182 == 2) {
        WTF::StringImpl::destroy(v182, v181);
      }
      else {
        *(_DWORD *)v182 -= 2;
      }
    }
  }
  if (v455)
  {
    unsigned int v183 = v454[0];
    v454[0] = 0;
    if (v183)
    {
      if (*(_DWORD *)v183 == 2) {
        WTF::StringImpl::destroy(v183, v181);
      }
      else {
        *(_DWORD *)v183 -= 2;
      }
    }
  }
  if (v461) {
    WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v459, v181);
  }
  std::__optional_destruct_base<WebCore::HTTPHeaderMap,false>::~__optional_destruct_base[abi:sn180100](v462);
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v464, v184);
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v467, v185);
  if (v471)
  {
    unsigned int v187 = v470[0];
    v470[0] = 0;
    if (v187)
    {
      if (*(_DWORD *)v187 == 2) {
        WTF::StringImpl::destroy(v187, v186);
      }
      else {
        *(_DWORD *)v187 -= 2;
      }
    }
  }
  if (v473)
  {
    unsigned int v188 = v472[0];
    v472[0] = 0;
    if (v188)
    {
      if (*(_DWORD *)v188 == 2) {
        WTF::StringImpl::destroy(v188, v186);
      }
      else {
        *(_DWORD *)v188 -= 2;
      }
    }
  }
  if (v478 && v477) {
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v474, v186);
  }
  if (*((unsigned char *)v29 + 48))
  {
    unsigned int v189 = v570;
    v570 = 0;
    if (v189)
    {
      if (*(_DWORD *)v189 == 2) {
        WTF::StringImpl::destroy(v189, v186);
      }
      else {
        *(_DWORD *)v189 -= 2;
      }
    }
  }
  if (v481 && v480) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v479);
  }
  if (v483 && v482[16]) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v482, v186);
  }
  if (v485)
  {
    unsigned int v190 = v484;
    v484 = 0;
    if (v190) {
      WTF::RefCounted<WebCore::FormData>::deref(v190);
    }
  }
  if (*((unsigned char *)v29 + 2656) && *((unsigned char *)v29 + 2640)) {
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v572);
  }
  uint64_t result = (uint64_t)std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v486);
  if (v490)
  {
    uint64_t result = (uint64_t)v489;
    if (v489) {
      uint64_t result = WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v489, v192);
    }
  }
  if (v492)
  {
    uint64_t result = (uint64_t)v491;
    if (v491) {
      return WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v491, v192);
    }
  }
  return result;
}

WTF *IPC::Decoder::decode<WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>>@<X0>(WTF *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,void>::decode<IPC::Decoder,WebCore::FormData>(a1, a2);
  if (!a2[8]) {
    return (WTF *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_1988019C8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 8))
  {
    unsigned __int16 v3 = *(WTF::RefCountedBase **)v1;
    *(void *)uint64_t v1 = 0;
    if (v3) {
      WTF::RefCounted<WebCore::FormData>::deref(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

char **IPC::Decoder::decode<std::optional<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(char **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24)) {
    return (char **)IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

void sub_198801A28(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 24))
  {
    if (*(unsigned char *)(v2 + 16)) {
      WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::FetchOptions>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::FetchOptions,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 48)) {
    return (WTF::StringImpl *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_198801A8C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::FetchOptions,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::CrossOriginEmbedderPolicy>(uint64_t a1, IPC::Decoder *a2)
{
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::CrossOriginEmbedderPolicyValue>(a2);
  unsigned __int16 v5 = IPC::Decoder::decode<WebCore::CrossOriginEmbedderPolicyValue>(a2);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v13);
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v11);
  uint64_t v8 = *(void *)a2;
  if (*(void *)a2)
  {
    if (v4 > 0xFFu && v5 > 0xFFu)
    {
      if (v14)
      {
        unint64_t v9 = v13;
        int v13 = 0;
        if (v12)
        {
          uint64_t v10 = v11;
          *(_WORD *)a1 = v4 | (unsigned __int16)(v5 << 8);
          *(void *)(a1 + 8) = v9;
          *(void *)(a1 + 16) = v10;
          *(unsigned char *)(a1 + 24) = 1;
          goto LABEL_7;
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (v12)
  {
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_7:
  if (v14)
  {
    uint64_t result = v13;
    int v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (!v8) {
    return (WTF::StringImpl *)IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void sub_198801BD4(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WTF::ASCIILiteral *IPC::Decoder::decode<WebCore::HTTPHeaderMap>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    uint64_t v8 = (unint64_t *)(v5 + v6);
    a2[2] = (uint64_t)(v8 + 1);
    if (!v5)
    {
      unint64_t v39 = v4;
      uint64_t v40 = 0;
      goto LABEL_52;
    }
    unint64_t v9 = *v8;
    uint64_t v67 = 0;
    unint64_t v68 = 0;
    if (v9 < 0x10000)
    {
      if (!v9)
      {
        uint64_t v15 = 0;
        unint64_t v16 = 0;
LABEL_19:
        uint64_t v67 = 0;
        unint64_t v68 = 0;
        uint64_t v70 = v15;
        unint64_t v71 = v16;
LABEL_20:
        unsigned __int8 v72 = 1;
        WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v67);
        goto LABEL_21;
      }
      LODWORD(v68) = v9;
      uint64_t v67 = WTF::fastMalloc((WTF *)(16 * v9));
      while (1)
      {
        IPC::Decoder::decode<WebCore::HTTPHeaderMap::CommonHeader>((uint64_t)&v63, (IPC::Decoder *)a2);
        if (!(_BYTE)v65) {
          goto LABEL_89;
        }
        if (HIDWORD(v68) != v68) {
          break;
        }
        WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTTPHeaderMap::CommonHeader>((uint64_t)&v67, (unint64_t)&v63);
        if ((_BYTE)v65) {
          goto LABEL_13;
        }
LABEL_16:
        if (!--v9)
        {
          uint64_t v15 = v67;
          unint64_t v16 = v68;
          goto LABEL_19;
        }
      }
      int v11 = HIDWORD(v68) + 1;
      uint64_t v12 = v67 + 16 * HIDWORD(v68);
      *(_WORD *)uint64_t v12 = v63;
      int v13 = v64;
      unsigned int v64 = 0;
      *(void *)(v12 + 8) = v13;
      HIDWORD(v68) = v11;
LABEL_13:
      char v14 = v64;
      unsigned int v64 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v10);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      goto LABEL_16;
    }
    while (1)
    {
      IPC::Decoder::decode<WebCore::HTTPHeaderMap::CommonHeader>((uint64_t)&v63, (IPC::Decoder *)a2);
      if (!(_BYTE)v65)
      {
LABEL_89:
        LOBYTE(v70) = 0;
        unsigned __int8 v72 = 0;
        WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v67);
        goto LABEL_54;
      }
      if (HIDWORD(v68) != v68) {
        break;
      }
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTTPHeaderMap::CommonHeader>((uint64_t)&v67, (unint64_t)&v63);
      if ((_BYTE)v65) {
        goto LABEL_83;
      }
LABEL_86:
      if (!--v9)
      {
        WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v67, HIDWORD(v68));
        uint64_t v70 = v67;
        unint64_t v57 = v68;
        uint64_t v67 = 0;
        unint64_t v68 = 0;
        unint64_t v71 = v57;
        goto LABEL_20;
      }
    }
    int v53 = HIDWORD(v68) + 1;
    uint64_t v54 = v67 + 16 * HIDWORD(v68);
    *(_WORD *)uint64_t v54 = v63;
    unint64_t v55 = v64;
    unsigned int v64 = 0;
    *(void *)(v54 + 8) = v55;
    HIDWORD(v68) = v53;
LABEL_83:
    unint64_t v56 = v64;
    unsigned int v64 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2) {
        WTF::StringImpl::destroy(v56, v52);
      }
      else {
        *(_DWORD *)v56 -= 2;
      }
    }
    goto LABEL_86;
  }
  while (1)
  {
    unint64_t v39 = 0;
    uint64_t v40 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v41 = a2[3];
    if (v41)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v41 + 16))(v41, v5, v4);
        uint64_t v40 = *a2;
        unint64_t v39 = a2[1];
      }
      else
      {
        unint64_t v39 = 0;
        uint64_t v40 = 0;
      }
    }
LABEL_52:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v42 = a2[3];
    if (v42 && v39) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v40);
    }
    LOBYTE(v70) = 0;
    unsigned __int8 v72 = 0;
LABEL_54:
    uint64_t v43 = *a2;
    uint64_t v44 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v45 = a2[3];
    if (v45 && v44) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 16))(v45, v43);
    }
LABEL_21:
    unint64_t v17 = a2[1];
    uint64_t v18 = *a2;
    unint64_t v19 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v17 < v19 || v17 - v19 <= 7)
    {
      unint64_t v46 = 0;
      uint64_t v47 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v48 = a2[3];
      if (v48)
      {
        if (v17)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v48 + 16))(v48, v18, v17);
          uint64_t v47 = *a2;
          unint64_t v46 = a2[1];
        }
        else
        {
          unint64_t v46 = 0;
          uint64_t v47 = 0;
        }
      }
      goto LABEL_59;
    }
    int v21 = (unint64_t *)(v18 + v19);
    a2[2] = (uint64_t)(v21 + 1);
    if (!v18)
    {
      unint64_t v46 = v17;
      uint64_t v47 = 0;
LABEL_59:
      *a2 = 0;
      a2[1] = 0;
      uint64_t v49 = a2[3];
      if (v49 && v46) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v49 + 16))(v49, v47);
      }
      LOBYTE(v67) = 0;
      unsigned __int8 v69 = 0;
      goto LABEL_61;
    }
    unint64_t v22 = *v21;
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    if (v22 >= 0x10000)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::HTTPHeaderMap::UncommonHeader>((uint64_t)&v63, (IPC::Decoder *)a2);
        if (!(_BYTE)v65) {
          goto LABEL_97;
        }
        if (HIDWORD(v74) == v74)
        {
          WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTTPHeaderMap::UncommonHeader>((uint64_t)&v73, (unint64_t)&v63);
        }
        else
        {
          int v58 = HIDWORD(v74) + 1;
          uint64_t v59 = (void *)(v73 + 16 * HIDWORD(v74));
          uint64_t v60 = v63;
          uint64_t v63 = 0;
          *uint64_t v59 = v60;
          char v61 = v64;
          unsigned int v64 = 0;
          v59[1] = v61;
          HIDWORD(v74) = v58;
        }
        std::__optional_destruct_base<WebCore::HTTPHeaderMap::UncommonHeader,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v63, v34);
        if (!--v22)
        {
          WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v73, HIDWORD(v74));
          uint64_t v62 = v73;
          uint64_t v73 = 0;
          uint64_t v67 = v62;
          unsigned int v24 = v74;
          unsigned int v23 = HIDWORD(v74);
          goto LABEL_31;
        }
      }
    }
    if (v22)
    {
      uint64_t v33 = WTF::fastMalloc((WTF *)(16 * v22));
      LODWORD(v74) = v22;
      uint64_t v73 = v33;
      while (1)
      {
        IPC::Decoder::decode<WebCore::HTTPHeaderMap::UncommonHeader>((uint64_t)&v63, (IPC::Decoder *)a2);
        if (!(_BYTE)v65) {
          break;
        }
        if (HIDWORD(v74) == v74)
        {
          WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTTPHeaderMap::UncommonHeader>((uint64_t)&v73, (unint64_t)&v63);
        }
        else
        {
          int v35 = HIDWORD(v74) + 1;
          unsigned int v36 = (void *)(v73 + 16 * HIDWORD(v74));
          uint64_t v37 = v63;
          uint64_t v63 = 0;
          *unsigned int v36 = v37;
          unint64_t v38 = v64;
          unsigned int v64 = 0;
          v36[1] = v38;
          HIDWORD(v74) = v35;
        }
        std::__optional_destruct_base<WebCore::HTTPHeaderMap::UncommonHeader,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v63, v34);
        if (!--v22)
        {
          uint64_t v25 = v73;
          unsigned int v24 = v74;
          unsigned int v23 = HIDWORD(v74);
          goto LABEL_30;
        }
      }
LABEL_97:
      LOBYTE(v67) = 0;
      unsigned __int8 v69 = 0;
      std::__optional_destruct_base<WebCore::HTTPHeaderMap::UncommonHeader,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v63, v34);
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v73);
LABEL_61:
      uint64_t v50 = *a2;
      uint64_t v51 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t result = (WTF::ASCIILiteral *)a2[3];
      if (result && v51) {
        uint64_t result = (WTF::ASCIILiteral *)(*(uint64_t (**)(WTF::ASCIILiteral *, uint64_t))(*(void *)result + 16))(result, v50);
      }
      int v26 = 0;
      uint64_t v5 = 1;
      goto LABEL_32;
    }
    unsigned int v23 = 0;
    unsigned int v24 = 0;
    uint64_t v25 = 0;
LABEL_30:
    uint64_t v73 = 0;
    uint64_t v67 = v25;
LABEL_31:
    uint64_t v74 = 0;
    unint64_t v68 = __PAIR64__(v23, v24);
    int v26 = 1;
    unsigned __int8 v69 = 1;
    uint64_t result = WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v73);
    uint64_t v5 = 0;
LABEL_32:
    uint64_t v28 = *a2;
    if (!*a2) {
      break;
    }
    unint64_t v4 = v72;
    if (v72 && !v5)
    {
      WebCore::HTTPHeaderMap::HTTPHeaderMap();
      uint64_t v29 = v63;
      uint64_t v63 = 0;
      *(void *)a1 = v29;
      unint64_t v30 = v64;
      unsigned int v64 = 0;
      *(void *)(a1 + 8) = v30;
      uint64_t v31 = v65;
      uint64_t v65 = 0;
      *(void *)(a1 + 16) = v31;
      uint64_t v32 = v66;
      uint64_t v66 = 0;
      *(void *)(a1 + 24) = v32;
      *(unsigned char *)(a1 + 32) = 1;
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v65);
      uint64_t result = WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v63);
      int v26 = v69;
      goto LABEL_36;
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
LABEL_36:
  if (v26) {
    uint64_t result = WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v67);
  }
  if (v72) {
    uint64_t result = WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v70);
  }
  if (!v28) {
    return (WTF::ASCIILiteral *)IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::OptionSet<WebCore::SandboxFlag>>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::Decoder::decode<unsigned short>(a1);
  if ((v2 & 0xFF0000) != 0) {
    return (unsigned __int16)v2 | 0x10000u;
  }
  IPC::Decoder::markInvalid(a1);
  return 0;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::CrossOriginOpenerPolicy>(uint64_t a1, IPC::Decoder *a2)
{
  unsigned __int16 v4 = IPC::ArgumentCoder<WebCore::EdgeModeType,void>::decode<IPC::Decoder>(a2);
  if (v4 <= 0xFFu) {
    goto LABEL_19;
  }
  while (1)
  {
    unsigned __int16 v5 = IPC::ArgumentCoder<WebCore::EdgeModeType,void>::decode<IPC::Decoder>(a2);
    if (v5 <= 0xFFu) {
      IPC::Decoder::markInvalid(a2);
    }
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v13);
    uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v11);
    uint64_t v8 = *(void *)a2;
    if (!*(void *)a2) {
      break;
    }
    if (v4 > 0xFFu && v5 > 0xFFu)
    {
      if (v14)
      {
        unint64_t v9 = v13;
        int v13 = 0;
        if (v12)
        {
          uint64_t v10 = v11;
          *(_WORD *)a1 = v4 | (unsigned __int16)(v5 << 8);
          *(void *)(a1 + 8) = v9;
          *(void *)(a1 + 16) = v10;
          *(unsigned char *)(a1 + 24) = 1;
          goto LABEL_10;
        }
      }
    }
    __break(1u);
LABEL_19:
    IPC::Decoder::markInvalid(a2);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (v12)
  {
    uint64_t result = v11;
    int v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_10:
  if (v14)
  {
    uint64_t result = v13;
    int v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (!v8) {
    return (WTF::StringImpl *)IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void sub_19880245C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

IPC::Decoder *IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    return (IPC::Decoder *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    return (uint64_t *)IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

void WebCore::CrossOriginEmbedderPolicy::~CrossOriginEmbedderPolicy(WebCore::CrossOriginEmbedderPolicy *this, WTF::StringImpl *a2)
{
  unsigned __int16 v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unsigned __int16 v4 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
}

uint64_t IPC::Decoder::decode<WebKit::UnifiedOriginStorageLevel>(IPC::Decoder *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebKit::UnifiedOriginStorageLevel,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

WTF *IPC::ArgumentCoder<WebKit::ITPThirdPartyData,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::RegistrableDomain>(a1, (uint64_t)&v43);
  unint64_t v5 = *((void *)a1 + 1);
  unint64_t v6 = *(char **)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v25 = 0;
    int v26 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v27 = *((void *)a1 + 3);
    if (v27)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v27 + 16))(v27, v6, v5);
        int v26 = *(char **)a1;
        unint64_t v25 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v25 = 0;
        int v26 = 0;
      }
    }
    goto LABEL_37;
  }
  unint64_t v9 = (unint64_t *)&v6[v7];
  *((void *)a1 + 2) = v9 + 1;
  if (!v6)
  {
    unint64_t v25 = v5;
    int v26 = 0;
LABEL_37:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v28 = *((void *)a1 + 3);
    if (v28 && v25) {
      (*(void (**)(uint64_t, char *))(*(void *)v28 + 16))(v28, v26);
    }
    LOBYTE(v40) = 0;
LABEL_59:
    unint64_t v20 = *(char **)a1;
    uint64_t v39 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF *)*((void *)a1 + 3);
    if (result) {
      goto LABEL_63;
    }
    while (*(void *)a1)
    {
      if (!v44) {
        goto LABEL_65;
      }
      uint64_t v43 = 0;
      __break(1u);
LABEL_63:
      if (v39) {
        uint64_t result = (WTF *)(*(uint64_t (**)(WTF *, char *))(*(void *)result + 16))(result, v20);
      }
    }
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    goto LABEL_30;
  }
  unint64_t v10 = *v9;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  if (v10 >= 0xAAAA)
  {
    do
    {
      IPC::Decoder::decode<WebKit::ITPThirdPartyDataForSpecificFirstParty>((uint64_t)&v45, a1);
      if (!v47) {
        goto LABEL_58;
      }
      if (HIDWORD(v49) == v49)
      {
        unint64_t v29 = WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v48, HIDWORD(v49) + 1, (unint64_t)&v45);
        unint64_t v30 = (char *)v48 + 24 * HIDWORD(v49);
        uint64_t v31 = *(void *)v29;
        *(void *)unint64_t v29 = 0;
        *(void *)unint64_t v30 = v31;
        long long v32 = *(_OWORD *)(v29 + 8);
      }
      else
      {
        unint64_t v30 = (char *)v48 + 24 * HIDWORD(v49);
        uint64_t v33 = v45;
        uint64_t v45 = 0;
        *(void *)unint64_t v30 = v33;
        long long v32 = v46;
      }
      *(_OWORD *)(v30 + 8) = v32;
      ++HIDWORD(v49);
      if (v47)
      {
        uint64_t v34 = v45;
        uint64_t v45 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2) {
            WTF::StringImpl::destroy(v34, v4);
          }
          else {
            *(_DWORD *)v34 -= 2;
          }
        }
      }
      --v10;
    }
    while (v10);
    unsigned int v35 = HIDWORD(v49);
    uint64_t result = v48;
    if (v49 > HIDWORD(v49))
    {
      unsigned int v36 = v48;
      if (HIDWORD(v49))
      {
        if (HIDWORD(v49) >= 0xAAAAAAB)
        {
          __break(0xC471u);
          return result;
        }
        uint64_t v37 = v48;
        uint64_t v38 = WTF::fastMalloc((WTF *)(24 * HIDWORD(v49)));
        LODWORD(v49) = 24 * v35 / 0x18;
        uint64_t v48 = (WTF *)v38;
        uint64_t result = v37;
        unsigned int v36 = v37;
        if ((WTF::StringImpl *)v38 != v37)
        {
          WTF::VectorMover<false,WebKit::ITPThirdPartyDataForSpecificFirstParty>::move(v37, (WTF::StringImpl *)((char *)v37 + 24 * v35), v38);
          unsigned int v36 = v48;
          uint64_t result = v37;
        }
      }
      if (result)
      {
        if (v36 == result)
        {
          uint64_t v48 = 0;
          LODWORD(v49) = 0;
        }
        WTF::fastFree(result, v4);
        uint64_t result = v48;
      }
      else
      {
        uint64_t result = v36;
      }
    }
    uint64_t v40 = result;
    unsigned int v19 = v49;
    LODWORD(v10) = HIDWORD(v49);
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    goto LABEL_23;
  }
  if (v10)
  {
    uint64_t v11 = WTF::fastMalloc((WTF *)(24 * v10));
    LODWORD(v49) = 24 * (int)v10 / 0x18u;
    uint64_t v48 = (WTF *)v11;
    while (1)
    {
      IPC::Decoder::decode<WebKit::ITPThirdPartyDataForSpecificFirstParty>((uint64_t)&v45, a1);
      if (!v47) {
        break;
      }
      if (HIDWORD(v49) == v49)
      {
        unint64_t v12 = WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v48, HIDWORD(v49) + 1, (unint64_t)&v45);
        int v13 = (char *)v48 + 24 * HIDWORD(v49);
        uint64_t v14 = *(void *)v12;
        *(void *)unint64_t v12 = 0;
        *(void *)int v13 = v14;
        long long v15 = *(_OWORD *)(v12 + 8);
      }
      else
      {
        int v13 = (char *)v48 + 24 * HIDWORD(v49);
        unint64_t v16 = v45;
        uint64_t v45 = 0;
        *(void *)int v13 = v16;
        long long v15 = v46;
      }
      *(_OWORD *)(v13 + 8) = v15;
      ++HIDWORD(v49);
      if (v47)
      {
        unint64_t v17 = v45;
        uint64_t v45 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            WTF::StringImpl::destroy(v17, v4);
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
      }
      if (!--v10)
      {
        uint64_t v18 = v48;
        unsigned int v19 = v49;
        LODWORD(v10) = HIDWORD(v49);
        goto LABEL_22;
      }
    }
LABEL_58:
    LOBYTE(v40) = 0;
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v4);
    goto LABEL_59;
  }
  unsigned int v19 = 0;
  uint64_t v18 = 0;
LABEL_22:
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v40 = v18;
LABEL_23:
  unint64_t v41 = __PAIR64__(v10, v19);
  char v42 = 1;
  WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v4);
  if (*(void *)a1)
  {
    if (v44)
    {
      int v21 = v43;
      uint64_t v43 = 0;
      unint64_t v22 = v40;
      uint64_t v40 = 0;
      unint64_t v41 = 0;
      uint64_t v45 = 0;
      *(void *)&long long v46 = 0;
      *(void *)a2 = v21;
      *(void *)(a2 + 8) = v22;
      *((void *)&v46 + 1) = 0;
      *(_DWORD *)(a2 + 16) = v19;
      *(_DWORD *)(a2 + 20) = v10;
      *(unsigned char *)(a2 + 24) = 1;
      WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v20);
      unsigned int v23 = v45;
      uint64_t v45 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v20);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      goto LABEL_29;
    }
LABEL_65:
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
LABEL_29:
  uint64_t result = (WTF *)WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v20);
LABEL_30:
  if (v44)
  {
    uint64_t result = v43;
    uint64_t v43 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v20);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198802AA4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebCore::RegistrableDomain::~RegistrableDomain(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  unsigned __int16 v3 = *this;
  *this = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
}

unint64_t IPC::ArgumentCoder<WebKit::ITPThirdPartyDataForSpecificFirstParty,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 8));
  double v4 = *(double *)(a2 + 16);

  return IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t IPC::ArgumentCoder<IPC::FormDataReference,void>::encode(IPC::Encoder *a1, _DWORD **a2)
{
  double v4 = *a2;
  if (*a2) {
    ++*v4;
  }
  v8[0] = (uint64_t)v4;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>,void>::encode<IPC::Encoder,WebCore::FormData>(a1, v8);
  unint64_t v5 = (WTF::RefCountedBase *)v8[0];
  v8[0] = 0;
  if (v5) {
    WTF::RefCounted<WebCore::FormData>::deref(v5);
  }
  if (*a2)
  {
    WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,IPC::FormDataReference::sandboxExtensionHandles(void)::{lambda(0ul &)#1},WTF::Vector<WebCore::FormDataElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>((uint64_t)(*a2 + 2), (uint64_t)v8);
  }
  else
  {
    v8[0] = 0;
    v8[1] = 0;
  }
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)v8);
  return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v6);
}

void sub_198802C58(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

WTF::RefCountedBase *IPC::ArgumentCoder<IPC::FormDataReference,void>::decode@<X0>(WTF *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WTF::RefPtr<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>>>(a1, &v14);
  uint64_t result = (WTF::RefCountedBase *)IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v4, (uint64_t)&v11);
  uint64_t v7 = *(void *)a1;
  if (!*(void *)a1) {
    goto LABEL_18;
  }
  LOBYTE(v7) = v15;
  if (!v15 || (LOBYTE(v7) = v13) == 0)
  {
    __break(1u);
LABEL_18:
    *a2 = 0;
    goto LABEL_6;
  }
  uint64_t v8 = v14;
  uint64_t v14 = 0;
  if (v12)
  {
    unint64_t v9 = (const char ***)v11;
    uint64_t v10 = 8 * v12;
    do
    {
      if (*v9) {
        uint64_t result = (WTF::RefCountedBase *)WebKit::SandboxExtension::consumePermanently(v9, v6);
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  *(void *)a2 = v8;
  LOBYTE(v7) = 1;
LABEL_6:
  a2[8] = v7;
  if (v13) {
    uint64_t result = (WTF::RefCountedBase *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v6);
  }
  if (v15)
  {
    uint64_t result = v14;
    uint64_t v14 = 0;
    if (result) {
      return (WTF::RefCountedBase *)WTF::RefCounted<WebCore::FormData>::deref(result);
    }
  }
  return result;
}

void sub_198802D60(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, WTF::RefCountedBase *a13, char a14)
{
  if (v14) {
    WTF::RefCounted<WebCore::FormData>::deref(v14);
  }
  if (a12) {
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  }
  if (a14)
  {
    unint64_t v16 = a13;
    a13 = 0;
    if (v16) {
      WTF::RefCounted<WebCore::FormData>::deref(v16);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v7 = *a2;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, &v7);
  uint64_t v4 = a2[1];
  unint64_t result = IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *(void *)unint64_t result = v4;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = result[2];
  unint64_t v4 = *result + v3;
  unint64_t v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 8;
    if (v8 > 0xFFFFFFFFFFFFFFF7 || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(void *)(v2 + v8) = *a2;
      result[2] = v9;
      uint64_t v2 = *result;
      unint64_t v3 = v9;
    }
  }
  uint64_t v11 = (void *)((v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v11 >= v2 + v3)
  {
    unint64_t v12 = (unint64_t)v11 - v2 + 8;
    if ((unint64_t)v11 - v2 > 0xFFFFFFFFFFFFFFF7 || v12 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *uint64_t v11 = a2[1];
      result[2] = v12;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  unint64_t v6 = a1[1];
  uint64_t v7 = *a1;
  unint64_t v8 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v6 >= v8 && v6 - v8 > 7)
  {
    uint64_t v10 = (uint64_t *)(v7 + v8);
    a1[2] = (uint64_t)(v10 + 1);
    if (v7)
    {
      if (!v5) {
        goto LABEL_15;
      }
      uint64_t v11 = *v10;
      *(void *)a2 = result;
      *(void *)(a2 + 8) = v11;
      char v12 = 1;
      goto LABEL_9;
    }
    uint64_t v13 = v6;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      goto LABEL_16;
    }
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (!result) {
      break;
    }
    if (!v13) {
      break;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v14);
    uint64_t v7 = *a1;
    if (!*a1) {
      break;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)result + 16))(result, v7, v6);
      uint64_t v14 = *a1;
      uint64_t v13 = a1[1];
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
  }
  char v12 = 0;
  *(unsigned char *)a2 = 0;
LABEL_9:
  *(unsigned char *)(a2 + 16) = v12;
  return result;
}

unint64_t IPC::ArgumentCoder<IPC::ObjectIdentifierWriteReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(IPC::Encoder *a1, long long *a2)
{
  long long v7 = *a2;
  IPC::ArgumentCoder<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, (uint64_t *)&v7);
  uint64_t v4 = *((void *)a2 + 2);
  unint64_t result = IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *(void *)unint64_t result = v4;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<IPC::ObjectIdentifierWriteReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, (uint64_t)&v14);
  unint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 >= v7 && v5 - v7 > 7)
  {
    unint64_t v9 = (uint64_t *)(v6 + v7);
    a1[2] = (uint64_t)(v9 + 1);
    if (v6)
    {
      uint64_t v6 = v15;
      if (!v15) {
        goto LABEL_16;
      }
      uint64_t v10 = *v9;
      *(_OWORD *)a2 = v14;
      *(void *)(a2 + 16) = v10;
      char v11 = 1;
      goto LABEL_9;
    }
    uint64_t v12 = v5;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      goto LABEL_17;
    }
  }
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (!result) {
      break;
    }
    if (!v12) {
      break;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v13);
    if (!*a1) {
      break;
    }
    uint64_t v6 = v15;
LABEL_16:
    __break(1u);
LABEL_17:
    if (v5)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)result + 16))(result, v6, v5);
      uint64_t v13 = *a1;
      uint64_t v12 = a1[1];
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
  }
  char v11 = 0;
  *(unsigned char *)a2 = 0;
LABEL_9:
  *(unsigned char *)(a2 + 24) = v11;
  return result;
}

uint64_t IPC::Decoder::decode<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, (uint64_t)&v6);
  uint64_t v5 = *a1;
  if (!*a1)
  {
    *a2 = 0;
    goto LABEL_4;
  }
  if (v7)
  {
    *(_OWORD *)a2 = v6;
    LOBYTE(v5) = 1;
LABEL_4:
    a2[16] = v5;
    return result;
  }
  __break(1u);
  return result;
}

void IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode(IPC::Encoder *a1, IPC::SharedBufferReference *this)
{
  IPC::SharedBufferReference::serializableBuffer(this, v4);
  IPC::ArgumentCoder<std::optional<IPC::SharedBufferReference::SerializableBuffer>,void>::encode<IPC::Encoder,std::optional<IPC::SharedBufferReference::SerializableBuffer>>(a1, (uint64_t)v4);
  if (v5[24]) {
    BOOL v3 = v5[16] == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
  }
}

void sub_1988032F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
  if ((_BYTE)a15) {
    BOOL v18 = a13 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a11);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<IPC::SharedBufferReference,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<IPC::SharedBufferReference::SerializableBuffer>>(a1, v8);
  if (*(void *)a1)
  {
    if (!v10)
    {
      __break(1u);
      return;
    }
    IPC::SharedBufferReference::SharedBufferReference(&v6, (uint64_t)v8);
    *(void *)a2 = v6;
    *(_OWORD *)(a2 + 8) = v7;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  if (v10) {
    BOOL v4 = v9[24] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4 && v9[16] != 0) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v9);
  }
}

void IPC::Decoder::decode<std::optional<IPC::SharedBufferReference::SerializableBuffer>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  if (!a2[40]) {
    IPC::Decoder::markInvalid(a1);
  }
}

void sub_1988033F8(_Unwind_Exception *a1)
{
  std::optional<std::optional<IPC::SharedBufferReference::SerializableBuffer>>::~optional(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::optional<std::optional<IPC::SharedBufferReference::SerializableBuffer>>::~optional(unsigned char *a1)
{
  if (a1[40] && a1[32] && a1[24]) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 8));
  }
  return a1;
}

void IPC::ArgumentCoder<IPC::SharedFileHandle,void>::encode(uint64_t a1, IPC::SharedFileHandle *this)
{
  IPC::SharedFileHandle::toMachSendRight(this, &v3);
  IPC::Encoder::addAttachment(a1, (unint64_t)&v3);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v3);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::MediaPlaybackTargetContextSerialized,void>::encode(IPC::Encoder *this, uint64_t a2)
{
  BOOL v4 = *(WTF::StringImpl **)(a2 + 16);
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
  unsigned int v19 = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, (uint64_t *)&v19);
  uint64_t v6 = v19;
  unsigned int v19 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  char v7 = *(unsigned char *)(a2 + 24);
  unint64_t v8 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v9 || (*unint64_t v8 = v7, v10 = *(unsigned char *)(a2 + 25), v11 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1), !v12))
  {
    __break(0xC471u);
    JUMPOUT(0x198803620);
  }
  *char v11 = v10;
  LOBYTE(v19) = *(unsigned char *)(a2 + 26);
  IPC::Encoder::operator<<<BOOL>(this, (char *)&v19);
  LOBYTE(v19) = *(unsigned char *)(a2 + 27);
  IPC::Encoder::operator<<<BOOL>(this, (char *)&v19);
  uint64_t v13 = *(WTF::StringImpl **)(a2 + 32);
  if (v13) {
    *(_DWORD *)v13 += 2;
  }
  unsigned int v19 = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, (uint64_t *)&v19);
  unsigned __int8 v15 = v19;
  unsigned int v19 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v14);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  unint64_t v16 = *(WTF::StringImpl **)(a2 + 40);
  if (v16) {
    *(_DWORD *)v16 += 2;
  }
  unsigned int v19 = v16;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, (uint64_t *)&v19);
  uint64_t result = v19;
  unsigned int v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::MediaPlaybackTargetContextSerialized::deviceName@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 16);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WebKit::MediaPlaybackTargetContextSerialized::hasActiveRoute(WebKit::MediaPlaybackTargetContextSerialized *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t WebKit::MediaPlaybackTargetContextSerialized::supportsRemoteVideoPlayback(WebKit::MediaPlaybackTargetContextSerialized *this)
{
  return *((unsigned __int8 *)this + 25);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::MediaPlaybackTargetContextSerialized,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v52);
  unint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v6) {
    goto LABEL_48;
  }
  char v7 = (unsigned __int8 *)(v5 + v6);
  uint64_t v8 = v5 + v6 + 1;
  *((void *)a1 + 2) = v8;
  if (!v5)
  {
    unint64_t v30 = v4;
    uint64_t v31 = 0;
    goto LABEL_49;
  }
  unsigned int v9 = *v7;
  if (v9 < 2)
  {
    int v10 = 0;
    char v11 = 1;
    goto LABEL_5;
  }
  while (1)
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v34 = *((void *)a1 + 3);
    if (!v34 || !v4)
    {
      char v12 = 0;
      unint64_t v35 = 0;
      uint64_t v5 = 0;
      int v10 = 1;
LABEL_53:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v36 = *((void *)a1 + 3);
      if (v36 && v35)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v36 + 16))(v36, v5, v35);
        unsigned int v15 = 0;
        uint64_t v5 = *(void *)a1;
        unint64_t v4 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
        unsigned int v15 = 0;
      }
      goto LABEL_55;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v5);
    char v11 = 0;
    uint64_t v5 = *(void *)a1;
    unint64_t v4 = *((void *)a1 + 1);
    int v10 = 1;
    uint64_t v8 = *((void *)a1 + 2);
LABEL_5:
    if (v9) {
      char v12 = v11;
    }
    else {
      char v12 = 0;
    }
    unint64_t v13 = v8 - v5;
    if (v4 <= v13)
    {
      unint64_t v35 = 0;
      uint64_t v46 = *((void *)a1 + 3);
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      if (v46 && v4)
      {
        (*(void (**)(uint64_t))(*(void *)v46 + 16))(v46);
        uint64_t v5 = *(void *)a1;
        unint64_t v35 = *((void *)a1 + 1);
      }
      else
      {
        uint64_t v5 = 0;
      }
      goto LABEL_53;
    }
    long long v14 = (unsigned __int8 *)(v5 + v13);
    *((void *)a1 + 2) = v14 + 1;
    if (!v5)
    {
      unint64_t v35 = v4;
      goto LABEL_53;
    }
    unsigned int v15 = *v14;
    if (v15 < 2)
    {
      int v16 = 0;
      char v17 = 1;
      goto LABEL_12;
    }
LABEL_55:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v37 = *((void *)a1 + 3);
    if (!v37)
    {
      uint64_t v5 = 0;
      char v18 = 0;
      unint64_t v4 = 0;
      goto LABEL_57;
    }
    if (!v4)
    {
      uint64_t v5 = 0;
      char v18 = 0;
LABEL_57:
      int v16 = 1;
LABEL_58:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v38 = *((void *)a1 + 3);
      if (v38)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v5);
          uint64_t v39 = *(void *)a1;
          unint64_t v4 = *((void *)a1 + 1);
        }
        else
        {
          uint64_t v39 = 0;
        }
      }
      else
      {
        uint64_t v39 = 0;
        unint64_t v4 = 0;
      }
LABEL_60:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v40 = *((void *)a1 + 3);
      if (v40)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 16))(v40, v39);
          uint64_t v5 = *(void *)a1;
          unint64_t v4 = *((void *)a1 + 1);
        }
        else
        {
          uint64_t v5 = 0;
        }
      }
      else
      {
        uint64_t v5 = 0;
        unint64_t v4 = 0;
      }
      goto LABEL_62;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v5);
    char v17 = 0;
    uint64_t v5 = *(void *)a1;
    unint64_t v4 = *((void *)a1 + 1);
    int v16 = 1;
LABEL_12:
    if (v15) {
      char v18 = v17;
    }
    else {
      char v18 = 0;
    }
    if (v4 <= *((void *)a1 + 2) - v5) {
      goto LABEL_58;
    }
    unsigned int v19 = (unsigned __int8 *)*((void *)a1 + 2);
    *((void *)a1 + 2) = v19 + 1;
    if (!v5)
    {
      uint64_t v39 = 0;
      goto LABEL_60;
    }
    unsigned int v20 = *v19;
    if (v20 < 3)
    {
      unsigned int v21 = v20 | 0x100;
      goto LABEL_19;
    }
LABEL_62:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v41 = *((void *)a1 + 3);
    if (!v41)
    {
      uint64_t v5 = 0;
      unsigned int v21 = 0;
      unint64_t v4 = 0;
      goto LABEL_64;
    }
    if (!v4)
    {
      uint64_t v5 = 0;
      unsigned int v21 = 0;
LABEL_64:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v42 = *((void *)a1 + 3);
      if (v42)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v5);
          uint64_t v43 = *(void *)a1;
          unint64_t v4 = *((void *)a1 + 1);
        }
        else
        {
          uint64_t v43 = 0;
        }
      }
      else
      {
        uint64_t v43 = 0;
        unint64_t v4 = 0;
      }
      goto LABEL_66;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 16))(v41, v5);
    unsigned int v21 = 0;
    uint64_t v5 = *(void *)a1;
    unint64_t v4 = *((void *)a1 + 1);
LABEL_19:
    if (v4 <= *((void *)a1 + 2) - v5) {
      goto LABEL_64;
    }
    unint64_t v22 = (unsigned __int8 *)*((void *)a1 + 2);
    *((void *)a1 + 2) = v22 + 1;
    if (!v5)
    {
      uint64_t v43 = 0;
LABEL_66:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v44 = *((void *)a1 + 3);
      if (v44)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v44 + 16))(v44, v43);
          uint64_t v5 = *(void *)a1;
          unint64_t v4 = *((void *)a1 + 1);
        }
        else
        {
          uint64_t v5 = 0;
        }
      }
      else
      {
        uint64_t v5 = 0;
        unint64_t v4 = 0;
      }
      goto LABEL_68;
    }
    unsigned int v23 = *v22;
    if (v23 < 3)
    {
      unsigned int v24 = v23 | 0x100;
      goto LABEL_23;
    }
LABEL_68:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v45 = *((void *)a1 + 3);
    if (v45 && v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 16))(v45, v5);
    }
    unsigned int v24 = 0;
LABEL_23:
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v50);
    uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v48);
    if (!*(void *)a1) {
      break;
    }
    if (v53 && !v10 && !v16 && v21 > 0xFF && v24 > 0xFF && v51 && v49)
    {
      uint64_t v27 = v52;
      unint64_t v52 = 0;
      LOBYTE(v47) = v12;
      BYTE1(v47) = v18;
      BYTE2(v47) = v21;
      HIBYTE(v47) = v24;
      uint64_t v28 = v50;
      uint64_t v50 = 0;
      unint64_t v29 = v48;
      uint64_t v48 = 0;
      *(unsigned char *)(a2 + 8) = 2;
      *(void *)a2 = &unk_1EE9B5420;
      *(void *)(a2 + 16) = v27;
      *(_DWORD *)(a2 + 24) = v47;
      *(void *)(a2 + 32) = v28;
      *(void *)(a2 + 40) = v29;
      *(unsigned char *)(a2 + 48) = 1;
      goto LABEL_32;
    }
    __break(1u);
LABEL_48:
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v32 = *((void *)a1 + 3);
    if (v32)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
        uint64_t v31 = *(void *)a1;
        unint64_t v30 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v30 = 0;
        uint64_t v31 = 0;
      }
    }
LABEL_49:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v33 = *((void *)a1 + 3);
    if (v33 && v30)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v33 + 16))(v33, v31, v30);
      unsigned int v9 = 0;
      uint64_t v5 = *(void *)a1;
      unint64_t v4 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0;
      unsigned int v9 = 0;
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 48) = 0;
  if (!v49) {
    goto LABEL_36;
  }
LABEL_32:
  uint64_t result = v48;
  uint64_t v48 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_36:
  if (v51)
  {
    uint64_t result = v50;
    uint64_t v50 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v53)
  {
    uint64_t result = v52;
    unint64_t v52 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198803CF0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, char a18, WTF::StringImpl *a19, char a20)
{
  if (a20 && a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::MediaPlaybackTargetContextSerialized::~MediaPlaybackTargetContextSerialized(WebKit::MediaPlaybackTargetContextSerialized *this, WTF::StringImpl *a2)
{
  int v3 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unint64_t v4 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t vars8;

  int v3 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unint64_t v4 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  WTF::fastFree(this, a2);
}

void IPC::ArgumentCoder<API::Dictionary,void>::decode(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v5 = *((void *)a2 + 1);
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = ((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a2;
  if (v5 >= v7 && v5 - v7 > 3)
  {
    unsigned int v9 = (int *)(v6 + v7);
    *((void *)a2 + 2) = v9 + 1;
    if (v6)
    {
      int v2 = *v9;
      uint64_t v25 = 0;
      if (v2) {
        goto LABEL_8;
      }
      uint64_t v14 = 0;
LABEL_27:
      unsigned int v15 = (WebKit *)API::Object::newObject(0x18uLL, 9);
      *(void *)unsigned int v15 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2(v15);
      *(void *)unsigned int v15 = &unk_1EE9D1E00;
      *((void *)v15 + 2) = v14;
      *(void *)a1 = v15;
      *(unsigned char *)(a1 + 8) = 1;
      return;
    }
    unint64_t v16 = v5;
    uint64_t v17 = 0;
  }
  else
  {
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v18 = *((void *)a2 + 3);
    if (v18)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v18 + 16))(v18, v6, v5);
        uint64_t v17 = *(void *)a2;
        unint64_t v16 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
      }
    }
  }
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v19 = *((void *)a2 + 3);
  if (v19 && v16) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
  }
LABEL_32:
  IPC::Decoder::markInvalid(a2);
  if (*(void *)a2)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    BOOL v11 = 1;
    while (1)
    {
      if (v24)
      {
        unint64_t v13 = v23;
        unsigned int v23 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2) {
            WTF::StringImpl::destroy(v13, v10);
          }
          else {
            *(_DWORD *)v13 -= 2;
          }
        }
      }
      if (v11)
      {
LABEL_30:
        if (v25) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v25, v10);
        }
        goto LABEL_32;
      }
      if (!--v2) {
        break;
      }
LABEL_8:
      IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v23);
      if (!v24) {
        goto LABEL_30;
      }
      IPC::Decoder::decode<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(&v21, a2);
      if (!v22) {
        goto LABEL_34;
      }
      if (!v24) {
        goto LABEL_33;
      }
      BOOL v11 = 1;
      if ((unint64_t)v23 + 1 >= 2)
      {
        WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::add<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>(&v25, &v23, &v21, (uint64_t)v20);
        if (v20[16]) {
          BOOL v11 = 0;
        }
      }
      if (v22)
      {
        uint64_t v12 = v21;
        uint64_t v21 = 0;
        if (v12) {
          CFRelease(*(CFTypeRef *)(v12 + 8));
        }
      }
    }
    uint64_t v14 = v25;
    if (*(void *)a2) {
      goto LABEL_27;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    if (v14) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v14, v10);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
  }
}

void sub_198804084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, ...)
{
  va_start(va, a6);
  if (a6 && a5) {
    CFRelease(*(CFTypeRef *)(a5 + 8));
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  uint64_t v9 = *(void *)(v6 - 40);
  if (v9) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v8);
  }
  _Unwind_Resume(a1);
}

void sub_1988040C8()
{
}

API::Error *API::Error::create(API::Error *this, const WebCore::ResourceError *a2)
{
  unint64_t v4 = (API::Error *)API::Object::newObject(0x60uLL, 10);
  uint64_t result = API::Error::Error(v4, a2);
  *(void ++*(_DWORD *)this = v4;
  return result;
}

void sub_198804118(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<API::Rect,void>::encode(IPC::Encoder *a1, double *a2)
{
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[2]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[3]);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, a2[4]);
  double v4 = a2[5];

  return IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v4);
}

void API::Boolean::create(API::Boolean *this@<X0>, WebKit **a2@<X8>)
{
  char v2 = (char)this;
  double v4 = (WebKit *)API::Object::newObject(0x18uLL, 32);
  *((unsigned char *)v4 + 16) = v2;
  *(void *)double v4 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v4);
  *(void *)double v4 = &unk_1EE9B3ED0;
  *a2 = v4;
}

void API::Double::create(double a1@<D0>, double **a2@<X8>)
{
  unint64_t v5 = (double *)API::Object::newObject(0x18uLL, 33);
  void v5[2] = a1;
  *(void *)unint64_t v5 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v5);
  *(void *)unint64_t v5 = &unk_1EE9B5380;
  *a2 = v5;
}

void IPC::ArgumentCoder<API::UInt64,void>::decode(uint64_t a1, void *a2)
{
  double v4 = (API::UInt64 *)IPC::Decoder::decode<unsigned long long>(a2);
  if (*a2)
  {
    if (v5)
    {
      API::UInt64::create(v4, &v6);
      *(void *)a1 = v6;
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
  }
}

void API::UInt64::create(API::UInt64 *this@<X0>, WebKit **a2@<X8>)
{
  double v4 = (WebKit *)API::Object::newObject(0x18uLL, 34);
  *((void *)v4 + 2) = this;
  *(void *)double v4 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v4);
  *(void *)double v4 = &unk_1EE9B3EF8;
  *a2 = v4;
}

unint64_t IPC::Decoder::decode<long long>(IPC::Decoder *a1)
{
  unint64_t v2 = IPC::ArgumentCoder<long long,void>::decode<IPC::Decoder>(a1);
  if (!v3) {
    IPC::Decoder::markInvalid(a1);
  }
  return v2;
}

IPC::Encoder *IPC::Encoder::operator<<<API::Point const&>(IPC::Encoder *a1, uint64_t a2)
{
  return a1;
}

void IPC::Decoder::decode<WTF::Ref<API::Data,WTF::RawPtrTraits<API::Data>,WTF::DefaultRefDerefTraits<API::Data>>>(uint64_t a1, void *a2)
{
  IPC::ArgumentCoder<API::Data,void>::decode(a1, a2);
  if (!*(unsigned char *)(a1 + 8))
  {
    uint64_t v4 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v5 = a2[3];
    if (v5 && v4 != 0)
    {
      unint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::Decoder::decode<WTF::Ref<API::Double,WTF::RawPtrTraits<API::Double>,WTF::DefaultRefDerefTraits<API::Double>>>(uint64_t a1, void *a2)
{
  unint64_t v3 = a2[1];
  uint64_t v4 = *a2;
  unint64_t v5 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v3 >= v5 && v3 - v5 > 7)
  {
    unint64_t v7 = (uint64_t *)(v4 + v5);
    a2[2] = v7 + 1;
    if (v4)
    {
      uint64_t v8 = *v7;
      uint64_t v9 = (WebKit *)API::Object::newObject(0x18uLL, 33);
      *((void *)v9 + 2) = v8;
      *(void *)uint64_t v9 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2(v9);
      *(void *)uint64_t v9 = &unk_1EE9B5380;
      *(void *)a1 = v9;
      *(unsigned char *)(a1 + 8) = 1;
      return;
    }
    unint64_t v10 = v3;
    uint64_t v11 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v12 = a2[3];
    if (v12)
    {
      unint64_t v16 = a2;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v4, v3);
        a2 = v16;
        uint64_t v11 = *v16;
        unint64_t v10 = v16[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v13 = a2[3];
  if (v13)
  {
    unsigned int v15 = a2;
    if (v10)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
      if (*v15)
      {
        __break(1u);
        return;
      }
      a2 = v15;
      unint64_t v10 = v15[1];
      uint64_t v13 = v15[3];
    }
  }
  else
  {
    unint64_t v10 = 0;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *a2 = 0;
  a2[1] = 0;
  if (v13 && v10)
  {
    uint64_t v14 = *(void (**)(void))(*(void *)v13 + 16);
    v14();
  }
}

void IPC::Decoder::decode<WTF::Ref<API::Error,WTF::RawPtrTraits<API::Error>,WTF::DefaultRefDerefTraits<API::Error>>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebCore::ResourceError>(a2, (uint64_t)v11);
  if (*(void *)a2)
  {
    if (v11[80])
    {
      API::Error::create((API::Error *)&v10, (const WebCore::ResourceError *)v11);
      *(void *)a1 = v10;
      *(unsigned char *)(a1 + 8) = 1;
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v5);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v4);
    uint64_t v6 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v7 = *((void *)a2 + 3);
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      uint64_t v9 = *(void (**)(void))(*(void *)v7 + 16);
      v9();
    }
  }
}

void sub_198804748(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::Ref<API::FrameHandle,WTF::RawPtrTraits<API::FrameHandle>,WTF::DefaultRefDerefTraits<API::FrameHandle>>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)v19);
  unint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 2) - *(void *)a2;
  if (v4 <= v6)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        uint64_t v14 = *(void *)a2;
        unint64_t v13 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_8;
  }
  uint64_t v7 = (unsigned __int8 *)(v5 + v6);
  *((void *)a2 + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v13 = v4;
    uint64_t v14 = 0;
LABEL_8:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v16 = *((void *)a2 + 3);
    if (v16)
    {
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14, v13);
        uint64_t v5 = *(void *)a2;
        unint64_t v4 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_9;
  }
  unsigned int v8 = *v7;
  if (v8 < 2)
  {
    if (v20)
    {
      BOOL v9 = v8 != 0;
      uint64_t v11 = v19[0];
      uint64_t v10 = v19[1];
      uint64_t v12 = API::Object::newObject(0x28uLL, 11);
      *(void *)uint64_t v12 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2((WebKit *)v12);
      *(void *)uint64_t v12 = &unk_1EE9B3E30;
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = v10;
      *(unsigned char *)(v12 + 32) = v9;
      *(void *)a1 = v12;
      *(unsigned char *)(a1 + 8) = 1;
      return;
    }
LABEL_26:
    __break(1u);
    return;
  }
LABEL_9:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v17 = *((void *)a2 + 3);
  if (v17)
  {
    if (v4)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v5);
      if (*(void *)a2) {
        goto LABEL_26;
      }
      unint64_t v4 = *((void *)a2 + 1);
      uint64_t v17 = *((void *)a2 + 3);
    }
  }
  else
  {
    unint64_t v4 = 0;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  if (v17 && v4)
  {
    uint64_t v18 = *(void (**)(void))(*(void *)v17 + 16);
    v18();
  }
}

void IPC::Decoder::decode<WTF::Ref<WebKit::WebImage,WTF::RawPtrTraits<WebKit::WebImage>,WTF::DefaultRefDerefTraits<WebKit::WebImage>>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = a2[2];
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7) {
    goto LABEL_26;
  }
  unsigned int v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (unint64_t)(v8 + 1);
  if (!v5)
  {
    unint64_t v16 = v6;
    unint64_t v17 = 0;
    goto LABEL_27;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2) {
    goto LABEL_28;
  }
  if (v9)
  {
    IPC::Decoder::decode<WebCore::ImageBufferParameters>(a2, (uint64_t)&v44);
    if (v48)
    {
      IPC::Decoder::decode<WebCore::ShareableBitmapHandle>((IPC::Decoder *)a2, v42);
      char v10 = v43;
      if (v43)
      {
        if (!v48) {
          goto LABEL_25;
        }
        uint64_t v36 = v44;
        int v37 = v45;
        uint64_t v11 = v46;
        uint64_t v46 = 0;
        uint64_t v38 = v11;
        __int16 v39 = v47;
        WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v40, (uint64_t)v42);
        char v10 = 1;
      }
      else
      {
        LOBYTE(v36) = 0;
      }
      char v41 = v10;
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v42);
      if (v48)
      {
        uint64_t v12 = v46;
        uint64_t v46 = 0;
        if (v12) {
          CFRelease(v12);
        }
      }
    }
    else
    {
      LOBYTE(v36) = 0;
      char v41 = 0;
    }
    if (v41
      || (unint64_t v26 = *a2, v27 = a2[1], *a2 = 0, a2[1] = 0, (v28 = a2[3]) != 0)
      && v27
      && ((*(void (**)(unint64_t, unint64_t))(*(void *)v28 + 16))(v28, v26), v41))
    {
      unint64_t v29 = v36;
      int v30 = v37;
      unint64_t v13 = v38;
      uint64_t v38 = 0;
      uint64_t v31 = v13;
      __int16 v32 = v39;
      WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)&v33, (uint64_t)v40);
      char v14 = 1;
      char v34 = 1;
    }
    else
    {
      char v14 = 0;
      LOBYTE(v29) = 0;
    }
    char v35 = v14;
    std::__optional_destruct_base<std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36);
    if (!v35) {
      goto LABEL_30;
    }
  }
  else
  {
    LOBYTE(v36) = 0;
    char v41 = 0;
    LOBYTE(v29) = 0;
    char v34 = 0;
    char v35 = 1;
    std::__optional_destruct_base<std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36);
  }
  while (1)
  {
    unint64_t v15 = *a2;
    if (!*a2) {
      break;
    }
    if (v35)
    {
      WebKit::WebImage::create((uint64_t *)&v29, &v36);
      *(void *)a1 = v36;
      *(unsigned char *)(a1 + 8) = 1;
      goto LABEL_21;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v18 = a2[3];
    if (v18)
    {
      if (v6)
      {
        (*(void (**)(unint64_t))(*(void *)v18 + 16))(v18);
        unint64_t v17 = *a2;
        unint64_t v16 = a2[1];
      }
      else
      {
        unint64_t v16 = 0;
        unint64_t v17 = 0;
      }
    }
LABEL_27:
    unint64_t v6 = 0;
    unint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v19 = a2[3];
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v19 + 16))(v19, v17, v16);
        unint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        unint64_t v5 = 0;
      }
    }
LABEL_28:
    *a2 = 0;
    a2[1] = 0;
    unint64_t v20 = a2[3];
    if (v20 && v6) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v20 + 16))(v20, v5);
    }
    LOBYTE(v29) = 0;
    char v35 = 0;
LABEL_30:
    unint64_t v21 = *a2;
    unint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v22 = a2[3];
    if (v22 && v6) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v22 + 16))(v22, v21);
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
LABEL_21:
  if (v35) {
    std::__optional_destruct_base<std::pair<WebCore::ImageBufferParameters,WebCore::ShareableBitmapHandle>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29);
  }
  if (!v15)
  {
    unint64_t v23 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v24 = a2[3];
    if (v24)
    {
      if (v23)
      {
        uint64_t v25 = *(void (**)(void))(*(void *)v24 + 16);
        v25();
      }
    }
  }
}

void sub_198804D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, CFTypeRef a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,CFTypeRef cf)
{
}

void IPC::Decoder::decode<WTF::Ref<API::PageHandle,WTF::RawPtrTraits<API::PageHandle>,WTF::DefaultRefDerefTraits<API::PageHandle>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  char v6 = v5;
  uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  uint64_t v9 = v8;
  unint64_t v10 = *((void *)a2 + 1);
  uint64_t v11 = *(void *)a2;
  unint64_t v12 = *((void *)a2 + 2) - *(void *)a2;
  if (v10 <= v12) {
    goto LABEL_11;
  }
  unint64_t v13 = (unsigned __int8 *)(v11 + v12);
  *((void *)a2 + 2) = v13 + 1;
  if (!v11)
  {
    unint64_t v18 = v10;
    uint64_t v19 = 0;
    goto LABEL_12;
  }
  unsigned int v14 = *v13;
  if (v14 > 1) {
    goto LABEL_13;
  }
  int v15 = 0;
  for (BOOL i = v14 != 0; ; BOOL i = 0)
  {
    if (v6 && (_BYTE)v9 && !v15)
    {
      uint64_t v17 = API::Object::newObject(0x28uLL, 13);
      *(void *)uint64_t v17 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2((WebKit *)v17);
      *(void *)uint64_t v17 = &unk_1EE9B3F48;
      *(void *)(v17 + 16) = v4;
      *(void *)(v17 + 24) = v7;
      *(unsigned char *)(v17 + 32) = i;
      *(void *)a1 = v17;
      *(unsigned char *)(a1 + 8) = 1;
      return;
    }
    __break(1u);
LABEL_11:
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v20 = *((void *)a2 + 3);
    if (v20)
    {
      uint64_t v25 = v9;
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
        uint64_t v19 = *(void *)a2;
        unint64_t v18 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v18 = 0;
        uint64_t v19 = 0;
      }
      uint64_t v9 = v25;
    }
LABEL_12:
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v21 = *((void *)a2 + 3);
    if (v21)
    {
      uint64_t v24 = v9;
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v21 + 16))(v21, v19, v18);
        uint64_t v11 = *(void *)a2;
        unint64_t v10 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
      uint64_t v9 = v24;
    }
LABEL_13:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v22 = *((void *)a2 + 3);
    if (!v22)
    {
      unint64_t v10 = 0;
      goto LABEL_15;
    }
    uint64_t v26 = v9;
    if (!v10) {
      goto LABEL_15;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v11);
    if (!*(void *)a2) {
      break;
    }
    int v15 = 1;
    uint64_t v9 = v26;
  }
  unint64_t v10 = *((void *)a2 + 1);
  uint64_t v22 = *((void *)a2 + 3);
LABEL_15:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  if (v22 && v10)
  {
    unint64_t v23 = *(void (**)(void))(*(void *)v22 + 16);
    v23();
  }
}

void IPC::Decoder::decode<WTF::Ref<API::Point,WTF::RawPtrTraits<API::Point>,WTF::DefaultRefDerefTraits<API::Point>>>(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  unint64_t v3 = a2[1];
  uint64_t v4 = *a2;
  unint64_t v5 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v3 >= v5 && v3 - v5 > 7)
  {
    uint64_t v7 = (uint64_t *)(v4 + v5);
    a2[2] = v7 + 1;
    if (v4)
    {
      int v8 = 0;
      uint64_t v9 = *v7;
      goto LABEL_8;
    }
    unint64_t v15 = v3;
    uint64_t v16 = 0;
  }
  else
  {
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    a1 = a2[3];
    if (a1) {
      goto LABEL_35;
    }
  }
  while (1)
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t v9 = 0;
    a1 = a2[3];
    if (!a1)
    {
      unint64_t v3 = 0;
      uint64_t v4 = 0;
LABEL_20:
      int v8 = 1;
      goto LABEL_8;
    }
    uint64_t v24 = a2;
    if (v15)
    {
      a1 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 16))(a1, v16, v15);
      a2 = v24;
      uint64_t v4 = *v24;
      unint64_t v3 = v24[1];
      goto LABEL_20;
    }
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    int v8 = 1;
LABEL_8:
    unint64_t v10 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 >= v10 && v3 - v10 > 7)
    {
      unint64_t v12 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = v12 + 1;
      if (v4)
      {
        if (!v8)
        {
          uint64_t v13 = *v12;
          unsigned int v14 = (WebKit *)API::Object::newObject(0x20uLL, 36);
          *(void *)unsigned int v14 = &unk_1EE9D1E28;
          WebKit::InitializeWebKit2(v14);
          *(void *)unsigned int v14 = &unk_1EE9B3E80;
          *((void *)v14 + 2) = v9;
          *((void *)v14 + 3) = v13;
          *(void *)uint64_t v2 = v14;
          *(unsigned char *)(v2 + 8) = 1;
          return;
        }
        goto LABEL_34;
      }
      unint64_t v17 = v3;
      uint64_t v18 = 0;
    }
    else
    {
      unint64_t v17 = 0;
      uint64_t v18 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v19 = a2[3];
      if (v19)
      {
        uint64_t v26 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v4);
          a2 = v26;
          uint64_t v18 = *v26;
          unint64_t v17 = v26[1];
        }
        else
        {
          unint64_t v17 = 0;
          uint64_t v18 = 0;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t v20 = a2[3];
    if (!v20)
    {
      uint64_t v21 = 0;
      goto LABEL_24;
    }
    uint64_t v25 = a2;
    if (!v17) {
      break;
    }
    a1 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
    uint64_t v4 = *v25;
    if (!*v25)
    {
      a2 = v25;
      uint64_t v21 = v25[1];
      uint64_t v20 = v25[3];
      goto LABEL_24;
    }
LABEL_34:
    __break(1u);
LABEL_35:
    unint64_t v23 = a2;
    if (v3)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v4);
      a2 = v23;
      uint64_t v16 = *v23;
      unint64_t v15 = v23[1];
    }
    else
    {
      unint64_t v15 = 0;
      uint64_t v16 = 0;
    }
  }
  uint64_t v21 = 0;
LABEL_24:
  *(unsigned char *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 0;
  *a2 = 0;
  a2[1] = 0;
  if (v20 && v21)
  {
    uint64_t v22 = *(void (**)(void))(*(void *)v20 + 16);
    v22();
  }
}

void IPC::Decoder::decode<WTF::Ref<API::Rect,WTF::RawPtrTraits<API::Rect>,WTF::DefaultRefDerefTraits<API::Rect>>>(uint64_t a1, void *a2)
{
  unint64_t v3 = a2[1];
  uint64_t v4 = *a2;
  unint64_t v5 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v3 >= v5 && v3 - v5 > 7)
  {
    uint64_t v7 = (uint64_t *)(v4 + v5);
    a2[2] = v7 + 1;
    if (v4)
    {
      int v8 = 0;
      uint64_t v9 = *v7;
      goto LABEL_8;
    }
    unint64_t v24 = v3;
    uint64_t v25 = 0;
  }
  else
  {
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v26 = a2[3];
    if (v26)
    {
      uint64_t v42 = a2;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v4);
        a2 = v42;
        uint64_t v25 = *v42;
        unint64_t v24 = v42[1];
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v27 = a2[3];
  if (!v27)
  {
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v9 = 0;
LABEL_31:
    int v8 = 1;
    goto LABEL_8;
  }
  char v49 = a2;
  if (v24)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v27 + 16))(v27, v25, v24);
    uint64_t v9 = 0;
    a2 = v49;
    uint64_t v4 = *v49;
    unint64_t v3 = v49[1];
    goto LABEL_31;
  }
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v9 = 0;
  int v8 = 1;
LABEL_8:
  unint64_t v10 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
  if (v3 >= v10 && v3 - v10 > 7)
  {
    unint64_t v12 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a2[2] = v12 + 1;
    if (v4)
    {
      int v13 = 0;
      uint64_t v14 = *v12;
      goto LABEL_15;
    }
    unint64_t v28 = v3;
    uint64_t v29 = 0;
  }
  else
  {
    unint64_t v28 = 0;
    uint64_t v29 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v30 = a2[3];
    if (v30)
    {
      char v53 = a2;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v4);
        a2 = v53;
        uint64_t v29 = *v53;
        unint64_t v28 = v53[1];
      }
      else
      {
        unint64_t v28 = 0;
        uint64_t v29 = 0;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v14 = 0;
  uint64_t v31 = a2[3];
  if (v31)
  {
    uint64_t v50 = a2;
    if (!v28)
    {
      unint64_t v3 = 0;
      uint64_t v4 = 0;
      int v13 = 1;
      goto LABEL_15;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v31 + 16))(v31, v29, v28);
    a2 = v50;
    uint64_t v4 = *v50;
    unint64_t v3 = v50[1];
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  int v13 = 1;
LABEL_15:
  unint64_t v15 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
  if (v3 < v15 || v3 - v15 <= 7)
  {
    unint64_t v32 = 0;
    uint64_t v33 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v34 = a2[3];
    if (v34)
    {
      int v47 = v13;
      uint64_t v54 = a2;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v4);
        a2 = v54;
        uint64_t v33 = *v54;
        unint64_t v32 = v54[1];
      }
      else
      {
        unint64_t v32 = 0;
        uint64_t v33 = 0;
      }
      int v13 = v47;
    }
  }
  else
  {
    uint64_t v16 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a2[2] = v16 + 1;
    if (v4)
    {
      int v17 = 0;
      uint64_t v18 = *v16;
      goto LABEL_19;
    }
    unint64_t v32 = v3;
    uint64_t v33 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v18 = 0;
  uint64_t v35 = a2[3];
  if (v35)
  {
    int v45 = v13;
    char v51 = a2;
    if (v32)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v35 + 16))(v35, v33, v32);
      a2 = v51;
      uint64_t v4 = *v51;
      unint64_t v3 = v51[1];
    }
    else
    {
      unint64_t v3 = 0;
      uint64_t v4 = 0;
    }
    int v17 = 1;
    int v13 = v45;
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    int v17 = 1;
  }
LABEL_19:
  unint64_t v19 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
  if (v3 < v19 || v3 - v19 <= 7)
  {
    unint64_t v36 = 0;
    uint64_t v37 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v38 = a2[3];
    if (v38)
    {
      int v44 = v17;
      int v48 = v13;
      unint64_t v55 = a2;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v4);
        a2 = v55;
        uint64_t v37 = *v55;
        unint64_t v36 = v55[1];
      }
      else
      {
        unint64_t v36 = 0;
        uint64_t v37 = 0;
      }
      int v17 = v44;
      int v13 = v48;
    }
  }
  else
  {
    uint64_t v20 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    a2[2] = v20 + 1;
    if (v4)
    {
      int v21 = 0;
      uint64_t v22 = *v20;
      if (v8) {
        goto LABEL_80;
      }
      goto LABEL_23;
    }
    unint64_t v36 = v3;
    uint64_t v37 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v39 = a2[3];
  if (v39)
  {
    int v43 = v17;
    int v46 = v13;
    unint64_t v52 = a2;
    if (v36)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v37, v36);
      if (*v52)
      {
        int v21 = 1;
        uint64_t v22 = 0;
        int v17 = v43;
        int v13 = v46;
        if (v8) {
          goto LABEL_80;
        }
LABEL_23:
        if (!v13 && !v17 && !v21)
        {
          unint64_t v23 = (WebKit *)API::Object::newObject(0x30uLL, 38);
          *(void *)unint64_t v23 = &unk_1EE9D1E28;
          WebKit::InitializeWebKit2(v23);
          *(void *)unint64_t v23 = &unk_1EE9B3EA8;
          *((void *)v23 + 2) = v9;
          *((void *)v23 + 3) = v14;
          *((void *)v23 + 4) = v18;
          *((void *)v23 + 5) = v22;
          *(void *)a1 = v23;
          *(unsigned char *)(a1 + 8) = 1;
          return;
        }
LABEL_80:
        __break(1u);
        return;
      }
      a2 = v52;
      uint64_t v40 = v52[1];
      uint64_t v39 = v52[3];
    }
    else
    {
      uint64_t v40 = 0;
    }
  }
  else
  {
    uint64_t v40 = 0;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *a2 = 0;
  a2[1] = 0;
  if (v39 && v40)
  {
    char v41 = *(void (**)(void))(*(void *)v39 + 16);
    v41();
  }
}

uint64_t IPC::Decoder::decode<WTF::Ref<API::SerializedScriptValue,WTF::RawPtrTraits<API::SerializedScriptValue>,WTF::DefaultRefDerefTraits<API::SerializedScriptValue>>>(uint64_t a1, void *a2)
{
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)v9);
  if (*a2)
  {
    if (v10)
    {
      uint64_t result = API::SerializedScriptValue::createFromWireBytes(v9[0], (WTF *)v9[1], &v8);
      *(void *)a1 = v8;
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v6 = v5 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

void IPC::Decoder::decode<WTF::Ref<API::Size,WTF::RawPtrTraits<API::Size>,WTF::DefaultRefDerefTraits<API::Size>>>(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  unint64_t v3 = a2[1];
  uint64_t v4 = *a2;
  unint64_t v5 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v3 >= v5 && v3 - v5 > 7)
  {
    uint64_t v7 = (uint64_t *)(v4 + v5);
    a2[2] = v7 + 1;
    if (v4)
    {
      int v8 = 0;
      uint64_t v9 = *v7;
      goto LABEL_8;
    }
    unint64_t v15 = v3;
    uint64_t v16 = 0;
  }
  else
  {
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    a1 = a2[3];
    if (a1) {
      goto LABEL_35;
    }
  }
  while (1)
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t v9 = 0;
    a1 = a2[3];
    if (!a1)
    {
      unint64_t v3 = 0;
      uint64_t v4 = 0;
LABEL_20:
      int v8 = 1;
      goto LABEL_8;
    }
    unint64_t v24 = a2;
    if (v15)
    {
      a1 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 16))(a1, v16, v15);
      a2 = v24;
      uint64_t v4 = *v24;
      unint64_t v3 = v24[1];
      goto LABEL_20;
    }
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    int v8 = 1;
LABEL_8:
    unint64_t v10 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 >= v10 && v3 - v10 > 7)
    {
      unint64_t v12 = (uint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a2[2] = v12 + 1;
      if (v4)
      {
        if (!v8)
        {
          uint64_t v13 = *v12;
          uint64_t v14 = (WebKit *)API::Object::newObject(0x20uLL, 37);
          *(void *)uint64_t v14 = &unk_1EE9D1E28;
          WebKit::InitializeWebKit2(v14);
          *(void *)uint64_t v14 = &unk_1EE9B3E58;
          *((void *)v14 + 2) = v9;
          *((void *)v14 + 3) = v13;
          *(void *)uint64_t v2 = v14;
          *(unsigned char *)(v2 + 8) = 1;
          return;
        }
        goto LABEL_34;
      }
      unint64_t v17 = v3;
      uint64_t v18 = 0;
    }
    else
    {
      unint64_t v17 = 0;
      uint64_t v18 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v19 = a2[3];
      if (v19)
      {
        uint64_t v26 = a2;
        if (v3)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v4);
          a2 = v26;
          uint64_t v18 = *v26;
          unint64_t v17 = v26[1];
        }
        else
        {
          unint64_t v17 = 0;
          uint64_t v18 = 0;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t v20 = a2[3];
    if (!v20)
    {
      uint64_t v21 = 0;
      goto LABEL_24;
    }
    uint64_t v25 = a2;
    if (!v17) {
      break;
    }
    a1 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
    uint64_t v4 = *v25;
    if (!*v25)
    {
      a2 = v25;
      uint64_t v21 = v25[1];
      uint64_t v20 = v25[3];
      goto LABEL_24;
    }
LABEL_34:
    __break(1u);
LABEL_35:
    unint64_t v23 = a2;
    if (v3)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v4);
      a2 = v23;
      uint64_t v16 = *v23;
      unint64_t v15 = v23[1];
    }
    else
    {
      unint64_t v15 = 0;
      uint64_t v16 = 0;
    }
  }
  uint64_t v21 = 0;
LABEL_24:
  *(unsigned char *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 0;
  *a2 = 0;
  a2[1] = 0;
  if (v20 && v21)
  {
    uint64_t v22 = *(void (**)(void))(*(void *)v20 + 16);
    v22();
  }
}

WTF::StringImpl *IPC::Decoder::decode<WTF::Ref<API::URL,WTF::RawPtrTraits<API::URL>,WTF::DefaultRefDerefTraits<API::URL>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v10);
  uint64_t v6 = *(void *)a2;
  if (*(void *)a2)
  {
    if (!v11)
    {
      __break(1u);
      goto LABEL_14;
    }
    uint64_t result = API::URL::create((API::URL *)&v10, &v9);
    *(void *)a1 = v9;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
  }
  if (v11)
  {
    uint64_t result = v10;
    unint64_t v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (v6) {
          return result;
        }
        goto LABEL_14;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v6) {
    return result;
  }
LABEL_14:
  uint64_t v7 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result && v7)
  {
    int v8 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (WTF::StringImpl *)v8();
  }
  return result;
}

void sub_198805E2C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::Ref<API::URLRequest,WTF::RawPtrTraits<API::URLRequest>,WTF::DefaultRefDerefTraits<API::URLRequest>>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebCore::ResourceRequest>(a2, (uint64_t)v9);
  if (*(void *)a2)
  {
    if (v10)
    {
      API::URLRequest::create(v9, &v8);
      *(void *)a1 = v8;
      *(unsigned char *)(a1 + 8) = 1;
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v9);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v9);
    uint64_t v4 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v5 = *((void *)a2 + 3);
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void sub_198805F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)va);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::Ref<API::URLResponse,WTF::RawPtrTraits<API::URLResponse>,WTF::DefaultRefDerefTraits<API::URLResponse>>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebCore::ResourceResponse>(a2, v11);
  if (*(void *)a2)
  {
    if (v11[256])
    {
      API::URLResponse::create((API::URLResponse *)v11, &v10);
      *(void *)a1 = v10;
      *(unsigned char *)(a1 + 8) = 1;
      std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v11, v5);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v11, v4);
    uint64_t v6 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v7 = *((void *)a2 + 3);
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      uint64_t v9 = *(void (**)(void))(*(void *)v7 + 16);
      v9();
    }
  }
}

void sub_198806040(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)va, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::Ref<API::UInt64,WTF::RawPtrTraits<API::UInt64>,WTF::DefaultRefDerefTraits<API::UInt64>>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<API::UInt64,void>::decode(a1, a2);
  if (!*(unsigned char *)(a1 + 8))
  {
    IPC::Decoder::markInvalid(a2);
  }
}

void IPC::Decoder::decode<WTF::Ref<API::Int64,WTF::RawPtrTraits<API::Int64>,WTF::DefaultRefDerefTraits<API::Int64>>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = IPC::Decoder::decode<long long>(a2);
  if (*(void *)a2)
  {
    if (v5)
    {
      unint64_t v6 = v4;
      uint64_t v7 = (WebKit *)API::Object::newObject(0x18uLL, 35);
      *((void *)v7 + 2) = v6;
      *(void *)uint64_t v7 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2(v7);
      *(void *)uint64_t v7 = &unk_1EE9B3F20;
      *(void *)a1 = v7;
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
    uint64_t v8 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v9 = *((void *)a2 + 3);
    if (v9) {
      BOOL v10 = v8 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      char v11 = *(void (**)(void))(*(void *)v9 + 16);
      v11();
    }
  }
}

WTF::StringImpl *IPC::Decoder::decode<WTF::Ref<API::UserContentURLPattern,WTF::RawPtrTraits<API::UserContentURLPattern>,WTF::DefaultRefDerefTraits<API::UserContentURLPattern>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v11);
  uint64_t v6 = *(void *)a2;
  if (*(void *)a2)
  {
    if (!v12)
    {
      __break(1u);
      goto LABEL_14;
    }
    uint64_t v7 = (API::UserContentURLPattern *)API::Object::newObject(0x38uLL, 27);
    uint64_t result = API::UserContentURLPattern::UserContentURLPattern(v7, (const WTF::String *)&v11);
    *(void *)a1 = v7;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    *(unsigned char *)a1 = 0;
  }
  *(unsigned char *)(a1 + 8) = v8;
  if (v12)
  {
    uint64_t result = v11;
    char v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (v6) {
          return result;
        }
        goto LABEL_14;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v6) {
    return result;
  }
LABEL_14:
  uint64_t v9 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result && v9)
  {
    BOOL v10 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (WTF::StringImpl *)v10();
  }
  return result;
}

void sub_1988062C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  operator delete(v10);
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, v12);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t API::SerializedScriptValue::createFromWireBytes@<X0>(char *a1@<X0>, WTF *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = API::Object::newObject(0x18uLL, 20);
  uint64_t v7 = (void *)result;
  char v12 = 0;
  if (a2)
  {
    if ((unint64_t)a2 >> 32)
    {
      __break(0xC471u);
      return result;
    }
    char v8 = (WTF *)WTF::fastMalloc(a2);
    char v12 = v8;
    do
    {
      char v9 = *a1++;
      *(unsigned char *)char v8 = v9;
      char v8 = (WTF *)((char *)v8 + 1);
      a2 = (WTF *)((char *)a2 - 1);
    }
    while (a2);
  }
  BOOL v10 = (WebKit *)WebCore::SerializedScriptValue::createFromWireBytes(&v13);
  *uint64_t v7 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v10);
  *uint64_t v7 = &unk_1EE9B3F70;
  void v7[2] = v13;
  *a3 = v7;
  uint64_t v13 = 0;
  uint64_t result = (uint64_t)v12;
  if (v12) {
    return WTF::fastFree(v12, v11);
  }
  return result;
}

void sub_1988063F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  operator delete(v11);
  _Unwind_Resume(a1);
}

API::URL *API::URL::create@<X0>(API::URL *this@<X0>, API::URL **a2@<X8>)
{
  char v5 = (API::URL *)API::Object::newObject(0x20uLL, 24);
  uint64_t result = API::URL::URL(v5, this);
  *a2 = v5;
  return result;
}

void sub_198806470(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

CFTypeRef *API::URLRequest::create@<X0>(const String *this@<X0>, CFTypeRef **a2@<X8>)
{
  char v5 = (CFTypeRef *)API::Object::newObject(0xD8uLL, 25);
  *char v5 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v5);
  *char v5 = &unk_1EE9D1E50;
  uint64_t result = WebCore::ResourceRequest::ResourceRequest(v5 + 2, this);
  *a2 = v5;
  return result;
}

API::URLResponse *API::URLResponse::create@<X0>(API::URLResponse *this@<X0>, API::URLResponse **a2@<X8>)
{
  char v5 = (API::URLResponse *)API::Object::newObject(0x110uLL, 26);
  uint64_t result = API::URLResponse::URLResponse(v5, this);
  *a2 = v5;
  return result;
}

void sub_198806554(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *IPC::ArgumentCoder<WebKit::AppPrivacyReportTestingData,void>::decode(void *result)
{
  unint64_t v1 = result[1];
  uint64_t v2 = *result;
  unint64_t v3 = result[2] - *result;
  if (v1 <= v3)
  {
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v26 = result[3];
    if (v26)
    {
      unint64_t v56 = result;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v26 + 16))(v26);
        uint64_t result = v56;
        uint64_t v25 = *v56;
        unint64_t v24 = v56[1];
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = 0;
      }
    }
    goto LABEL_26;
  }
  unint64_t v4 = (unsigned __int8 *)(v2 + v3);
  uint64_t v5 = v2 + v3 + 1;
  result[2] = v5;
  if (!v2)
  {
    unint64_t v24 = v1;
    uint64_t v25 = 0;
LABEL_26:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v27 = result[3];
    if (v27)
    {
      unint64_t v55 = result;
      if (v24)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v27 + 16))(v27, v25, v24);
        unsigned int v6 = 0;
        uint64_t result = v55;
        uint64_t v2 = *v55;
        unint64_t v1 = v55[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v6 = 0;
      }
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v6 = 0;
    }
    goto LABEL_28;
  }
  unsigned int v6 = *v4;
  if (v6 < 2)
  {
    char v7 = 0;
    int v8 = 1;
    goto LABEL_5;
  }
LABEL_28:
  *uint64_t result = 0;
  result[1] = 0;
  unint64_t v28 = result[3];
  if (!v28)
  {
    int v9 = 0;
    uint64_t v2 = 0;
    char v7 = 1;
    goto LABEL_30;
  }
  unsigned int v47 = v6;
  uint64_t v54 = result;
  if (!v1)
  {
    int v9 = 0;
    unint64_t v28 = 0;
    uint64_t v2 = 0;
    char v7 = 1;
LABEL_30:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v29 = result[3];
    if (v29)
    {
      int v39 = v9;
      char v46 = v7;
      char v53 = result;
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v29 + 16))(v29, v2, v28);
        unsigned int v13 = 0;
        uint64_t result = v53;
        uint64_t v2 = *v53;
        unint64_t v1 = v53[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v13 = 0;
      }
      char v7 = v46;
      int v9 = v39;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v13 = 0;
    }
    goto LABEL_32;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v28 + 16))(v28, v2);
  int v8 = 0;
  uint64_t result = v54;
  uint64_t v2 = *v54;
  unint64_t v1 = v54[1];
  char v7 = 1;
  uint64_t v5 = v54[2];
  unsigned int v6 = v47;
LABEL_5:
  if (v6) {
    int v9 = v8;
  }
  else {
    int v9 = 0;
  }
  unint64_t v10 = v5 - v2;
  if (v1 <= v10)
  {
    int v34 = v9;
    char v44 = v7;
    unint64_t v28 = 0;
    uint64_t v31 = result[3];
    *uint64_t result = 0;
    result[1] = 0;
    int v48 = result;
    if (v31 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v31 + 16))(v31);
      uint64_t result = v48;
      uint64_t v2 = *v48;
      unint64_t v28 = v48[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    char v7 = v44;
    int v9 = v34;
    goto LABEL_30;
  }
  char v11 = (unsigned __int8 *)(v2 + v10);
  uint64_t v12 = v2 + v10 + 1;
  result[2] = v12;
  if (!v2)
  {
    unint64_t v28 = v1;
    goto LABEL_30;
  }
  unsigned int v13 = *v11;
  if (v13 < 2)
  {
    int v14 = 0;
    int v15 = 1;
    goto LABEL_12;
  }
LABEL_32:
  *uint64_t result = 0;
  result[1] = 0;
  unint64_t v30 = result[3];
  if (!v30)
  {
    int v15 = 0;
    uint64_t v2 = 0;
    goto LABEL_34;
  }
  int v38 = v9;
  unsigned int v43 = v13;
  char v45 = v7;
  unint64_t v52 = result;
  if (!v1)
  {
    int v15 = 0;
    unint64_t v30 = 0;
    uint64_t v2 = 0;
LABEL_34:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v18 = result[3];
    if (v18)
    {
      int v37 = v15;
      unsigned int v42 = v13;
      char v51 = result;
      if (v30)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v18 + 16))(v18, v2, v30);
        LODWORD(v18) = 0;
        uint64_t result = v51;
        uint64_t v2 = *v51;
        unint64_t v1 = v51[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        LODWORD(v18) = 0;
      }
      int v15 = v37;
      unsigned int v13 = v42;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
    }
LABEL_36:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v20 = result[3];
    if (!v20)
    {
      int v9 = 0;
      int v19 = 0;
      goto LABEL_18;
    }
    int v33 = v18;
    int v36 = v15;
    unsigned int v41 = v13;
    uint64_t v50 = result;
    if (v1)
    {
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v2);
      uint64_t v20 = *v50;
      if (*v50)
      {
LABEL_75:
        __break(1u);
        return result;
      }
    }
    else
    {
      LOBYTE(v20) = 0;
    }
    int v9 = 0;
    int v19 = 0;
    int v15 = v36;
    unsigned int v13 = v41;
    LODWORD(v18) = v33;
    goto LABEL_18;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v30 + 16))(v30, v2);
  int v15 = 0;
  uint64_t result = v52;
  uint64_t v2 = *v52;
  unint64_t v1 = v52[1];
  int v14 = 1;
  uint64_t v12 = v52[2];
  char v7 = v45;
  int v9 = v38;
  unsigned int v13 = v43;
LABEL_12:
  unint64_t v16 = v12 - v2;
  if (v1 <= v16)
  {
    int v35 = v15;
    unsigned int v40 = v13;
    unint64_t v30 = 0;
    uint64_t v32 = result[3];
    *uint64_t result = 0;
    result[1] = 0;
    char v49 = result;
    if (v32 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
      uint64_t result = v49;
      uint64_t v2 = *v49;
      unint64_t v30 = v49[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    int v15 = v35;
    unsigned int v13 = v40;
    goto LABEL_34;
  }
  unint64_t v17 = (unsigned __int8 *)(v2 + v16);
  result[2] = v17 + 1;
  if (!v2)
  {
    unint64_t v30 = v1;
    goto LABEL_34;
  }
  LODWORD(v18) = *v17;
  if (v18 > 1) {
    goto LABEL_36;
  }
  if ((v7 & 1) != 0 || v14) {
    goto LABEL_75;
  }
  int v19 = 0x1000000;
  LOBYTE(v20) = 1;
LABEL_18:
  BOOL v21 = v13 != 0;
  if ((v20 & (v18 != 0)) != 0) {
    int v22 = 0x10000;
  }
  else {
    int v22 = 0;
  }
  if ((v15 & v21) != 0) {
    int v23 = 256;
  }
  else {
    int v23 = 0;
  }
  return (void *)(v9 | v19 | v22 | v23);
}

uint64_t IPC::ArgumentCoder<WebKit::BackgroundFetchState,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  unsigned __int8 v5 = *(_DWORD *)(a2 + 24);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  IPC::ArgumentCoder<std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::variant<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(a1, a2, v5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 72));
  IPC::ArgumentCoder<WebCore::BackgroundFetchOptions,void>::encode(a1, a2 + 80);
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 112));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 120));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 128));
  IPC::Encoder::operator<<<unsigned long long const&>(a1, (uint64_t *)(a2 + 136));
  char v6 = *(unsigned char *)(a2 + 144);
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  char v7 = *(unsigned char *)(a2 + 145);
  IPC::Encoder::operator<<<BOOL>(a1, &v7);
  return IPC::Encoder::operator<<<BOOL>(a1, (char *)(a2 + 146));
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::BackgroundFetchState,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (uint64_t)a1;
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::SecurityOriginData>(a1, v90);
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)v2, &v69);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v2, (uint64_t)&v67);
  IPC::Decoder::decode<WebCore::BackgroundFetchOptions>((IPC::Decoder *)v2, v4, (uint64_t)&v62);
  unint64_t v5 = *(void *)(v2 + 8);
  char v6 = *(WTF::StringImpl **)v2;
  unint64_t v7 = ((*(void *)(v2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v2;
  if (v5 >= v7 && v5 - v7 > 7)
  {
    int v9 = (uint64_t *)((char *)v6 + v7);
    *(void *)(v2 + 16) = v9 + 1;
    if (!v6)
    {
      unint64_t v38 = v5;
      int v39 = 0;
      goto LABEL_65;
    }
    int v61 = 0;
    uint64_t v60 = *v9;
    goto LABEL_8;
  }
  while (1)
  {
    unint64_t v38 = 0;
    int v39 = 0;
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v40 = *(void *)(v2 + 24);
    if (v40)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v40 + 16))(v40);
        int v39 = *(WTF::StringImpl **)v2;
        unint64_t v38 = *(void *)(v2 + 8);
      }
      else
      {
        unint64_t v38 = 0;
        int v39 = 0;
      }
    }
LABEL_65:
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v41 = *(void *)(v2 + 24);
    if (v41 && v38)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v41 + 16))(v41, v39, v38);
      uint64_t v60 = 0;
      char v6 = *(WTF::StringImpl **)v2;
      unint64_t v5 = *(void *)(v2 + 8);
    }
    else
    {
      unint64_t v5 = 0;
      char v6 = 0;
      uint64_t v60 = 0;
    }
    int v61 = 1;
LABEL_8:
    unint64_t v10 = ((*(void *)(v2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v6;
    if (v5 < v10 || v5 - v10 <= 7)
    {
      unint64_t v42 = 0;
      unsigned int v43 = 0;
      *(void *)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      uint64_t v44 = *(void *)(v2 + 24);
      if (v44)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
          unsigned int v43 = *(WTF::StringImpl **)v2;
          unint64_t v42 = *(void *)(v2 + 8);
        }
        else
        {
          unint64_t v42 = 0;
          unsigned int v43 = 0;
        }
      }
    }
    else
    {
      char v11 = (uint64_t *)((*(void *)(v2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v2 + 16) = v11 + 1;
      if (v6)
      {
        int v12 = 0;
        uint64_t v59 = *v11;
        goto LABEL_12;
      }
      unint64_t v42 = v5;
      unsigned int v43 = 0;
    }
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v45 = *(void *)(v2 + 24);
    if (v45 && v42)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v45 + 16))(v45, v43, v42);
      uint64_t v59 = 0;
      char v6 = *(WTF::StringImpl **)v2;
      unint64_t v5 = *(void *)(v2 + 8);
    }
    else
    {
      unint64_t v5 = 0;
      char v6 = 0;
      uint64_t v59 = 0;
    }
    int v12 = 1;
LABEL_12:
    unint64_t v13 = ((*(void *)(v2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v6;
    if (v5 < v13 || v5 - v13 <= 7)
    {
      unint64_t v46 = 0;
      unsigned int v47 = 0;
      *(void *)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      uint64_t v48 = *(void *)(v2 + 24);
      if (v48)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v48 + 16))(v48);
          unsigned int v47 = *(WTF::StringImpl **)v2;
          unint64_t v46 = *(void *)(v2 + 8);
        }
        else
        {
          unint64_t v46 = 0;
          unsigned int v47 = 0;
        }
      }
    }
    else
    {
      int v14 = (uint64_t *)((*(void *)(v2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v2 + 16) = v14 + 1;
      if (v6)
      {
        int v15 = 0;
        uint64_t v16 = *v14;
        goto LABEL_16;
      }
      unint64_t v46 = v5;
      unsigned int v47 = 0;
    }
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v49 = *(void *)(v2 + 24);
    if (v49 && v46)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v49 + 16))(v49, v47, v46);
      uint64_t v16 = 0;
      char v6 = *(WTF::StringImpl **)v2;
      unint64_t v5 = *(void *)(v2 + 8);
    }
    else
    {
      unint64_t v5 = 0;
      char v6 = 0;
      uint64_t v16 = 0;
    }
    int v15 = 1;
LABEL_16:
    unint64_t v17 = ((*(void *)(v2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v6;
    if (v5 < v17 || v5 - v17 <= 7)
    {
      unint64_t v50 = 0;
      char v51 = 0;
      *(void *)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      uint64_t v52 = *(void *)(v2 + 24);
      if (v52)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v52 + 16))(v52);
          char v51 = *(WTF::StringImpl **)v2;
          unint64_t v50 = *(void *)(v2 + 8);
        }
        else
        {
          unint64_t v50 = 0;
          char v51 = 0;
        }
      }
    }
    else
    {
      uint64_t v18 = (uint64_t *)((*(void *)(v2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v2 + 16) = v18 + 1;
      if (v6)
      {
        int v19 = 0;
        uint64_t v20 = *v18;
        goto LABEL_20;
      }
      unint64_t v50 = v5;
      char v51 = 0;
    }
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v53 = *(void *)(v2 + 24);
    if (v53 && v50) {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v53 + 16))(v53, v51, v50);
    }
    uint64_t v20 = 0;
    int v19 = 1;
LABEL_20:
    unsigned __int16 v21 = IPC::Decoder::decode<WebCore::BackgroundFetchResult>((void *)v2);
    unsigned __int16 Failure = IPC::Decoder::decode<WebCore::BackgroundFetchFailureReason>((void *)v2);
    unint64_t v5 = *(void *)(v2 + 8);
    int v23 = *(WTF::StringImpl **)v2;
    unint64_t v24 = *(void *)(v2 + 16) - *(void *)v2;
    if (v5 <= v24)
    {
      unint64_t v54 = 0;
      unint64_t v55 = 0;
      *(void *)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      uint64_t v56 = *(void *)(v2 + 24);
      if (v56)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v56 + 16))(v56);
          unint64_t v55 = *(WTF::StringImpl **)v2;
          unint64_t v54 = *(void *)(v2 + 8);
        }
        else
        {
          unint64_t v54 = 0;
          unint64_t v55 = 0;
        }
      }
      goto LABEL_80;
    }
    uint64_t v25 = (unsigned __int8 *)v23 + v24;
    *(void *)(v2 + 16) = v25 + 1;
    if (!v23)
    {
      unint64_t v54 = v5;
      unint64_t v55 = 0;
LABEL_80:
      unint64_t v5 = 0;
      int v23 = 0;
      *(void *)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      uint64_t v57 = *(void *)(v2 + 24);
      if (v57)
      {
        if (v54)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v57 + 16))(v57, v55, v54);
          int v23 = *(WTF::StringImpl **)v2;
          unint64_t v5 = *(void *)(v2 + 8);
        }
        else
        {
          unint64_t v5 = 0;
          int v23 = 0;
        }
      }
      goto LABEL_81;
    }
    uint64_t v26 = a2;
    unsigned int v27 = *v25;
    if (v27 <= 1)
    {
      uint64_t v2 = 0;
      a2 = v27 != 0;
      goto LABEL_24;
    }
LABEL_81:
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    uint64_t v58 = *(void *)(v2 + 24);
    if (!v58
      || !v5
      || (uint64_t v26 = a2,
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v58 + 16))(v58, v23),
          !*(void *)v2))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 152) = 0;
      goto LABEL_49;
    }
    a2 = 0;
    uint64_t v2 = 1;
LABEL_24:
    if (v92)
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v74, (uint64_t)v90);
      if (v72)
      {
        unint64_t v28 = v69;
        unsigned __int8 v69 = 0;
        uint64_t v76 = v28;
        long long v77 = v70;
        long long v78 = v71;
        LODWORD(v70) = v70 & 0xFFFFFFFE;
        if (v68)
        {
          uint64_t v29 = v67;
          uint64_t v67 = 0;
          uint64_t v79 = v29;
          if (v66)
          {
            v80[0] = v62;
            uint64_t v30 = v63;
            uint64_t v62 = 0;
            uint64_t v63 = 0;
            v80[1] = v30;
            uint64_t v31 = v64;
            unsigned int v64 = 0;
            unint64_t v81 = v31;
            uint64_t v82 = v65;
            if (!v61)
            {
              uint64_t v83 = v60;
              if (!v12)
              {
                uint64_t v84 = v59;
                if (!v15)
                {
                  uint64_t v85 = v16;
                  if (!v19)
                  {
                    uint64_t v86 = v20;
                    if (v21 > 0xFFu)
                    {
                      char v87 = v21;
                      if (Failure > 0xFFu)
                      {
                        char v88 = Failure;
                        if (!v2) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  char v89 = a2;
  std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::__optional_destruct_base[abi:sn180100]<WebKit::BackgroundFetchState>(v26, (uint64_t)v74);
  int v33 = v81;
  unint64_t v81 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, v32);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  WTF::Vector<WebCore::ImageResource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v80, v32);
  int v34 = v79;
  uint64_t v79 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, v23);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  int v35 = v76;
  uint64_t v76 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2) {
      WTF::StringImpl::destroy(v35, v23);
    }
    else {
      *(_DWORD *)v35 -= 2;
    }
  }
  if (v75 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v75])(&v73, v74);
  }
LABEL_49:
  uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::BackgroundFetchOptions,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v62, v23);
  if (v68)
  {
    uint64_t result = v67;
    uint64_t v67 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v72)
  {
    uint64_t result = v69;
    unsigned __int8 v69 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v92)
  {
    if (v91 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v91])(v74, v90);
    }
  }
  return result;
}

void sub_198807378(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, char a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,int a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,WTF::StringImpl *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,uint64_t a42,WTF::StringImpl *a43)
{
  std::__optional_destruct_base<WebCore::BackgroundFetchOptions,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a13, a2);
  if (a19)
  {
    unint64_t v46 = a18;
    a18 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2) {
        WTF::StringImpl::destroy(v46, v45);
      }
      else {
        *(_DWORD *)v46 -= 2;
      }
    }
  }
  if (a25)
  {
    unsigned int v47 = a20;
    a20 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2) {
        WTF::StringImpl::destroy(v47, v45);
      }
      else {
        *(_DWORD *)v47 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v43 - 104))
  {
    uint64_t v48 = *(unsigned int *)(v43 - 112);
    if (v48 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v48])(&a31, v43 - 136);
    }
  }
  _Unwind_Resume(a1);
}

WTF *IPC::Decoder::decode<WebCore::BackgroundFetchOptions>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::BackgroundFetchOptions,void>::decode(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 32))
  {
    uint64_t v6 = *(void *)a1;
    uint64_t v7 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF *)*((void *)a1 + 3);
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  return result;
}

void sub_19880755C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::BackgroundFetchOptions,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebCore::BackgroundFetchResult>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      int v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        a1 = v12;
        uint64_t v8 = *v12;
        unint64_t v7 = v12[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_7;
  }
  unint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_7:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      char v11 = a1;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v8, v7);
        a1 = v11;
        uint64_t v2 = *v11;
        unint64_t v1 = v11[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v5 = *v4;
  if (v5 < 3) {
    return v5 | 0x100;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v1) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v2);
    }
    return 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::BackgroundFetchFailureReason>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      int v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        a1 = v12;
        uint64_t v8 = *v12;
        unint64_t v7 = v12[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_7;
  }
  unint64_t v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_7:
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      char v11 = a1;
      if (v7)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v8, v7);
        a1 = v11;
        uint64_t v2 = *v11;
        unint64_t v1 = v11[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
      }
    }
    goto LABEL_8;
  }
  unsigned int v5 = *v4;
  if (v5 < 6) {
    return v5 | 0x100;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v1) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v2);
    }
    return 0;
  }
  return result;
}

void IPC::ArgumentCoder<WebKit::DataDetectionResult,void>::decode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v12[2] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  unint64_t v4 = (const void *)objc_opt_class();
  v12[0] = v4;
  if (v4) {
    unint64_t v4 = CFRetain(v4);
  }
  unsigned int v5 = (const void *)((uint64_t (*)(const void *))*MEMORY[0x1E4FB62E8])(v4);
  v12[1] = v5;
  if (v5) {
    CFRetain(v5);
  }
  WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v9, v12, 2);
  WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)(a1 + 56), &v9);
  IPC::decodeRequiringAllowedClasses<NSArray,NSArray*>((uint64_t)&cf, (uint64_t *)a1);
  unint64_t v7 = v9;
  if (v9) {
    goto LABEL_18;
  }
  while (1)
  {
    for (uint64_t i = 1; i != -1; --i)
    {
      unint64_t v7 = v12[i];
      v12[i] = 0;
      if (v7) {
        CFRelease(v7);
      }
    }
    if (!*(void *)a1) {
      break;
    }
    if (v11)
    {
      *(void *)a2 = cf;
      *(unsigned char *)(a2 + 8) = 1;
      return;
    }
    __break(1u);
LABEL_18:
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable((const void **)v7, v6);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  if (v11)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_198807974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v13 = 8;
  while (1)
  {
    int v14 = *(const void **)(&a12 + v13);
    *(void *)(&a12 + v13) = 0;
    if (v14) {
      CFRelease(v14);
    }
    v13 -= 8;
    if (v13 == -8) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t IPC::ArgumentCoder<WebKit::InsertTextOptions,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::Encoder::operator<<<BOOL>(a1, a2);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 1);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 2);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 3);
  char v5 = a2[4];
  return IPC::Encoder::operator<<<BOOL>(a1, &v5);
}

void *IPC::ArgumentCoder<WebKit::InsertTextOptions,void>::decode(void *result)
{
  unint64_t v1 = result[1];
  uint64_t v2 = *result;
  unint64_t v3 = result[2] - *result;
  if (v1 <= v3)
  {
    unint64_t v37 = 0;
    uint64_t v38 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v39 = result[3];
    if (v39)
    {
      unint64_t v150 = result;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v39 + 16))(v39);
        uint64_t result = v150;
        uint64_t v38 = *v150;
        unint64_t v37 = v150[1];
      }
      else
      {
        unint64_t v37 = 0;
        uint64_t v38 = 0;
      }
    }
    goto LABEL_38;
  }
  unint64_t v4 = (unsigned __int8 *)(v2 + v3);
  uint64_t v5 = v2 + v3 + 1;
  result[2] = v5;
  if (!v2)
  {
    unint64_t v37 = v1;
    uint64_t v38 = 0;
LABEL_38:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v40 = result[3];
    if (v40)
    {
      unint64_t v149 = result;
      if (v37)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v40 + 16))(v40, v38, v37);
        unsigned int v6 = 0;
        uint64_t result = v149;
        uint64_t v2 = *v149;
        unint64_t v1 = v149[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v6 = 0;
      }
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v6 = 0;
    }
    goto LABEL_40;
  }
  unsigned int v6 = *v4;
  if (v6 < 2)
  {
    int v7 = 0;
    unsigned int v8 = 1;
    goto LABEL_5;
  }
LABEL_40:
  *uint64_t result = 0;
  result[1] = 0;
  unint64_t v41 = result[3];
  if (!v41)
  {
    unsigned int v8 = 0;
    uint64_t v2 = 0;
    int v7 = 1;
    goto LABEL_42;
  }
  unsigned int v135 = v6;
  uint64_t v148 = result;
  if (!v1)
  {
    unsigned int v8 = 0;
    unint64_t v41 = 0;
    uint64_t v2 = 0;
    int v7 = 1;
LABEL_42:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v42 = result[3];
    if (v42)
    {
      unsigned int v122 = v8;
      int v134 = v7;
      int v147 = result;
      if (v41)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v42 + 16))(v42, v2, v41);
        unsigned int v12 = 0;
        uint64_t result = v147;
        uint64_t v2 = *v147;
        unint64_t v1 = v147[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v12 = 0;
      }
      unsigned int v8 = v122;
      int v7 = v134;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v12 = 0;
    }
    goto LABEL_44;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v41 + 16))(v41, v2);
  unsigned int v8 = 0;
  uint64_t result = v148;
  uint64_t v2 = *v148;
  unint64_t v1 = v148[1];
  int v7 = 1;
  uint64_t v5 = v148[2];
  unsigned int v6 = v135;
LABEL_5:
  if (!v6) {
    unsigned int v8 = 0;
  }
  unint64_t v9 = v5 - v2;
  if (v1 <= v9)
  {
    unsigned int v111 = v8;
    int v123 = v7;
    unint64_t v41 = 0;
    uint64_t v51 = result[3];
    *uint64_t result = 0;
    result[1] = 0;
    int v136 = result;
    if (v51 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v51 + 16))(v51);
      uint64_t result = v136;
      uint64_t v2 = *v136;
      unint64_t v41 = v136[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    unsigned int v8 = v111;
    int v7 = v123;
    goto LABEL_42;
  }
  uint64_t v10 = (unsigned __int8 *)(v2 + v9);
  uint64_t v11 = v2 + v9 + 1;
  result[2] = v11;
  if (!v2)
  {
    unint64_t v41 = v1;
    goto LABEL_42;
  }
  unsigned int v12 = *v10;
  if (v12 < 2)
  {
    int v13 = 0;
    int v14 = 1;
    goto LABEL_11;
  }
LABEL_44:
  *uint64_t result = 0;
  result[1] = 0;
  unint64_t v43 = result[3];
  if (!v43)
  {
    int v14 = 0;
    uint64_t v2 = 0;
    int v13 = 1;
    goto LABEL_46;
  }
  unsigned int v110 = v12;
  unsigned int v121 = v8;
  int v133 = v7;
  uint64_t v146 = result;
  if (!v1)
  {
    int v14 = 0;
    unint64_t v43 = 0;
    uint64_t v2 = 0;
    int v13 = 1;
LABEL_46:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v44 = result[3];
    if (v44)
    {
      int v91 = v13;
      int v100 = v14;
      unsigned int v109 = v12;
      unsigned int v120 = v8;
      int v132 = v7;
      char v145 = result;
      if (v43)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v44 + 16))(v44, v2, v43);
        unsigned int v18 = 0;
        uint64_t result = v145;
        uint64_t v2 = *v145;
        unint64_t v1 = v145[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v18 = 0;
      }
      unsigned int v8 = v120;
      int v7 = v132;
      int v14 = v100;
      unsigned int v12 = v109;
      int v13 = v91;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v18 = 0;
    }
    goto LABEL_48;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v43 + 16))(v43, v2);
  int v14 = 0;
  uint64_t result = v146;
  uint64_t v2 = *v146;
  unint64_t v1 = v146[1];
  int v13 = 1;
  uint64_t v11 = v146[2];
  unsigned int v8 = v121;
  int v7 = v133;
  unsigned int v12 = v110;
LABEL_11:
  unint64_t v15 = v11 - v2;
  if (v1 <= v15)
  {
    int v83 = v13;
    int v92 = v14;
    unsigned int v101 = v12;
    unsigned int v112 = v8;
    int v124 = v7;
    unint64_t v43 = 0;
    uint64_t v52 = result[3];
    *uint64_t result = 0;
    result[1] = 0;
    unsigned int v137 = result;
    if (v52 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v52 + 16))(v52);
      uint64_t result = v137;
      uint64_t v2 = *v137;
      unint64_t v43 = v137[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    unsigned int v8 = v112;
    int v7 = v124;
    int v14 = v92;
    unsigned int v12 = v101;
    int v13 = v83;
    goto LABEL_46;
  }
  uint64_t v16 = (unsigned __int8 *)(v2 + v15);
  uint64_t v17 = v2 + v15 + 1;
  result[2] = v17;
  if (!v2)
  {
    unint64_t v43 = v1;
    goto LABEL_46;
  }
  unsigned int v18 = *v16;
  if (v18 < 2)
  {
    int v19 = 0;
    char v20 = 1;
    goto LABEL_15;
  }
LABEL_48:
  *uint64_t result = 0;
  result[1] = 0;
  unint64_t v45 = result[3];
  if (!v45)
  {
    char v20 = 0;
    uint64_t v2 = 0;
    int v19 = 1;
    goto LABEL_50;
  }
  unsigned int v82 = v18;
  int v90 = v13;
  int v99 = v14;
  unsigned int v108 = v12;
  unsigned int v119 = v8;
  int v131 = v7;
  unsigned int v144 = result;
  if (!v1)
  {
    char v20 = 0;
    unint64_t v45 = 0;
    uint64_t v2 = 0;
    int v19 = 1;
LABEL_50:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v46 = result[3];
    if (v46)
    {
      int v69 = v19;
      char v75 = v20;
      unsigned int v81 = v18;
      int v89 = v13;
      int v98 = v14;
      unsigned int v107 = v12;
      unsigned int v118 = v8;
      int v130 = v7;
      int v143 = result;
      if (v45)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v46 + 16))(v46, v2, v45);
        unsigned int v23 = 0;
        uint64_t result = v143;
        uint64_t v2 = *v143;
        unint64_t v1 = v143[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v23 = 0;
      }
      unsigned int v8 = v118;
      int v7 = v130;
      int v14 = v98;
      unsigned int v12 = v107;
      int v13 = v89;
      char v20 = v75;
      unsigned int v18 = v81;
      int v19 = v69;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v23 = 0;
    }
    goto LABEL_52;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v45 + 16))(v45, v2);
  char v20 = 0;
  uint64_t result = v144;
  uint64_t v2 = *v144;
  unint64_t v1 = v144[1];
  int v19 = 1;
  uint64_t v17 = v144[2];
  unsigned int v8 = v119;
  int v7 = v131;
  int v14 = v99;
  unsigned int v12 = v108;
  int v13 = v90;
  unsigned int v18 = v82;
LABEL_15:
  unint64_t v21 = v17 - v2;
  if (v1 <= v21)
  {
    int v64 = v19;
    char v70 = v20;
    unsigned int v76 = v18;
    int v84 = v13;
    int v93 = v14;
    unsigned int v102 = v12;
    unsigned int v113 = v8;
    int v125 = v7;
    unint64_t v45 = 0;
    uint64_t v53 = result[3];
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v138 = result;
    if (v53 && v1)
    {
      (*(void (**)(uint64_t))(*(void *)v53 + 16))(v53);
      uint64_t result = v138;
      uint64_t v2 = *v138;
      unint64_t v45 = v138[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    unsigned int v8 = v113;
    int v7 = v125;
    int v14 = v93;
    unsigned int v12 = v102;
    int v13 = v84;
    char v20 = v70;
    unsigned int v18 = v76;
    int v19 = v64;
    goto LABEL_50;
  }
  int v22 = (unsigned __int8 *)(v2 + v21);
  result[2] = v22 + 1;
  if (!v2)
  {
    unint64_t v45 = v1;
    goto LABEL_50;
  }
  unsigned int v23 = *v22;
  if (v23 < 2)
  {
    int v24 = 0;
    char v25 = 1;
    goto LABEL_19;
  }
LABEL_52:
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t v47 = result[3];
  if (!v47)
  {
    uint64_t v2 = 0;
    char v25 = 0;
    unint64_t v1 = 0;
    int v24 = 1;
    goto LABEL_54;
  }
  unsigned int v63 = v23;
  int v68 = v19;
  char v74 = v20;
  unsigned int v80 = v18;
  int v88 = v13;
  int v97 = v14;
  unsigned int v106 = v12;
  unsigned int v117 = v8;
  int v129 = v7;
  unint64_t v142 = result;
  if (!v1)
  {
    uint64_t v2 = 0;
    char v25 = 0;
    int v24 = 1;
LABEL_54:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v48 = result[3];
    if (v48)
    {
      int v56 = v24;
      char v59 = v25;
      unsigned int v62 = v23;
      int v67 = v19;
      char v73 = v20;
      unsigned int v79 = v18;
      int v87 = v13;
      int v96 = v14;
      unsigned int v105 = v12;
      unsigned int v116 = v8;
      int v128 = v7;
      int v141 = result;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 16))(v48, v2);
        uint64_t result = v141;
        uint64_t v49 = *v141;
        unint64_t v1 = v141[1];
      }
      else
      {
        uint64_t v49 = 0;
      }
      unsigned int v8 = v116;
      int v7 = v128;
      int v14 = v96;
      unsigned int v12 = v105;
      int v13 = v87;
      char v20 = v73;
      unsigned int v18 = v79;
      unsigned int v23 = v62;
      int v19 = v67;
      int v24 = v56;
      char v25 = v59;
    }
    else
    {
      uint64_t v49 = 0;
      unint64_t v1 = 0;
    }
    goto LABEL_56;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v47 + 16))(v47, v2);
  char v25 = 0;
  uint64_t result = v142;
  uint64_t v2 = *v142;
  unint64_t v1 = v142[1];
  int v24 = 1;
  unsigned int v8 = v117;
  int v7 = v129;
  int v14 = v97;
  unsigned int v12 = v106;
  int v13 = v88;
  char v20 = v74;
  unsigned int v18 = v80;
  unsigned int v23 = v63;
  int v19 = v68;
LABEL_19:
  if (v1 <= result[2] - v2) {
    goto LABEL_54;
  }
  uint64_t v26 = (unsigned __int8 *)result[2];
  result[2] = v26 + 1;
  if (!v2)
  {
    uint64_t v49 = 0;
LABEL_56:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v50 = result[3];
    if (v50)
    {
      int v55 = v24;
      char v58 = v25;
      unsigned int v61 = v23;
      int v66 = v19;
      char v72 = v20;
      unsigned int v78 = v18;
      int v86 = v13;
      int v95 = v14;
      unsigned int v104 = v12;
      unsigned int v115 = v8;
      int v127 = v7;
      unint64_t v140 = result;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v50 + 16))(v50, v49);
        uint64_t result = v140;
        uint64_t v2 = *v140;
        unint64_t v1 = v140[1];
      }
      else
      {
        uint64_t v2 = 0;
      }
      unsigned int v8 = v115;
      int v7 = v127;
      int v14 = v95;
      unsigned int v12 = v104;
      int v13 = v86;
      char v20 = v72;
      unsigned int v18 = v78;
      unsigned int v23 = v61;
      int v19 = v66;
      int v24 = v55;
      char v25 = v58;
    }
    else
    {
      uint64_t v2 = 0;
      unint64_t v1 = 0;
    }
LABEL_58:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v28 = result[3];
    if (!v28)
    {
      unsigned int v8 = 0;
      uint64_t v29 = 0;
      goto LABEL_29;
    }
    int v54 = v24;
    char v57 = v25;
    unsigned int v60 = v23;
    int v65 = v19;
    char v71 = v20;
    unsigned int v77 = v18;
    int v85 = v13;
    int v94 = v14;
    unsigned int v103 = v12;
    unsigned int v114 = v8;
    int v126 = v7;
    uint64_t v139 = result;
    if (v1)
    {
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v2);
      uint64_t v28 = *v139;
      if (*v139)
      {
        unsigned int v12 = v103;
        unsigned int v8 = v114;
        int v13 = v85;
        int v14 = v94;
        char v20 = v71;
        unsigned int v18 = v77;
        unsigned int v23 = v60;
        int v19 = v65;
        int v24 = v54;
        char v25 = v57;
        LODWORD(v28) = v126;
        if (!v126) {
          goto LABEL_24;
        }
LABEL_123:
        __break(1u);
        return result;
      }
    }
    else
    {
      LOBYTE(v28) = 0;
    }
    unsigned int v8 = 0;
    uint64_t v29 = 0;
    int v14 = v94;
    unsigned int v12 = v103;
    char v20 = v71;
    unsigned int v18 = v77;
    char v25 = v57;
    unsigned int v23 = v60;
    goto LABEL_29;
  }
  unsigned int v27 = *v26;
  if (v27 > 1) {
    goto LABEL_58;
  }
  if (v7) {
    goto LABEL_123;
  }
  LODWORD(v28) = v27 | 0x100;
LABEL_24:
  if (v13 || v19 || v24 || v28 <= 0xFF) {
    goto LABEL_123;
  }
  uint64_t v29 = 1;
LABEL_29:
  BOOL v30 = v12 != 0;
  unint64_t v31 = ((unint64_t)v28 << 32) | (v29 << 40);
  uint64_t v32 = 0x1000000;
  if ((v25 & (v23 != 0)) == 0) {
    uint64_t v32 = 0;
  }
  unint64_t v33 = v31 | v32;
  uint64_t v34 = 0x10000;
  if ((v20 & (v18 != 0)) == 0) {
    uint64_t v34 = 0;
  }
  BOOL v35 = (v14 & v30) == 0;
  uint64_t v36 = 256;
  if (v35) {
    uint64_t v36 = 0;
  }
  return (void *)(v33 | v34 | v36 | v8);
}

unint64_t IPC::ArgumentCoder<WebKit::RemoteObjectInvocation,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::RefPtr<API::Dictionary,WTF::RawPtrTraits<API::Dictionary>,WTF::DefaultRefDerefTraits<API::Dictionary>>,void>::encode<IPC::Encoder,API::Dictionary>(a1, (void *)(a2 + 8));

  return IPC::ArgumentCoder<std::unique_ptr<WebKit::RemoteObjectInvocation::ReplyInfo>,void>::encode<IPC::Encoder,std::unique_ptr<WebKit::RemoteObjectInvocation::ReplyInfo> const&>(a1, (uint64_t **)(a2 + 16));
}

uint64_t IPC::ArgumentCoder<WebKit::RemoteObjectInvocation,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v15);
  IPC::Decoder::decode<WTF::RefPtr<API::Dictionary,WTF::RawPtrTraits<API::Dictionary>,WTF::DefaultRefDerefTraits<API::Dictionary>>>(&v13, a1);
  IPC::Decoder::decode<std::unique_ptr<WebKit::RemoteObjectInvocation::ReplyInfo>>(&v11, a1);
  if (!*(void *)a1) {
    goto LABEL_14;
  }
  if (!v16 || !v14 || !v12)
  {
    __break(1u);
LABEL_14:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    goto LABEL_6;
  }
  WebKit::RemoteObjectInvocation::RemoteObjectInvocation(&v9, &v15, &v13, (uint64_t *)&v11);
  long long v4 = v9;
  long long v9 = 0uLL;
  *(_OWORD *)a2 = v4;
  uint64_t v5 = v10;
  uint64_t v10 = 0;
  *(void *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 24) = 1;
  WebKit::RemoteObjectInvocation::~RemoteObjectInvocation((WebKit::RemoteObjectInvocation *)&v9);
LABEL_6:
  if (v12)
  {
    unsigned int v6 = v11;
    uint64_t v11 = 0;
    if (v6) {
      std::default_delete<WebKit::RemoteObjectInvocation::ReplyInfo>::operator()[abi:sn180100]((int)&v11, v6);
    }
  }
  if (v14)
  {
    uint64_t v7 = v13;
    uint64_t v13 = 0;
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 + 8));
    }
  }
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15);
}

void sub_198808534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, char a14, uint64_t a15, char a16)
{
  if (a14)
  {
    unsigned int v18 = a13;
    a13 = 0;
    if (v18) {
      std::default_delete<WebKit::RemoteObjectInvocation::ReplyInfo>::operator()[abi:sn180100]((int)&a13, v18);
    }
  }
  if (a16)
  {
    uint64_t v19 = a15;
    a15 = 0;
    if (v19) {
      CFRelease(*(CFTypeRef *)(v19 + 8));
    }
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v16 - 32);
  _Unwind_Resume(a1);
}

void sub_198808588()
{
}

void IPC::Decoder::decode<WTF::RefPtr<API::Dictionary,WTF::RawPtrTraits<API::Dictionary>,WTF::DefaultRefDerefTraits<API::Dictionary>>>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<WTF::RefPtr<API::Dictionary,WTF::RawPtrTraits<API::Dictionary>,WTF::DefaultRefDerefTraits<API::Dictionary>>,void>::decode<IPC::Decoder,API::Dictionary>(a1, a2);
  if (!a1[8])
  {
    IPC::Decoder::markInvalid(a2);
  }
}

uint64_t IPC::Decoder::decode<std::unique_ptr<WebKit::RemoteObjectInvocation::ReplyInfo>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::unique_ptr<WebKit::RemoteObjectInvocation::ReplyInfo>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[8])
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void WebKit::RemoteObjectInvocation::~RemoteObjectInvocation(WebKit::RemoteObjectInvocation *this)
{
  long long v4 = (WTF *)*((void *)this + 2);
  uint64_t v2 = (void *)((char *)this + 16);
  unint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<WebKit::RemoteObjectInvocation::ReplyInfo>::operator()[abi:sn180100]((int)v2, v3);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  unsigned int v6 = *(WTF::StringImpl **)this;
  *(void ++*(_DWORD *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
}

unint64_t IPC::ArgumentCoder<WebKit::RevealItem,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, a2[1]);
  uint64_t v4 = a2[2];

  return IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, v4);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::RevealItem,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v10);
  uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WebKit::RevealItemRange>(a1, (uint64_t)&v8);
  if (!*(void *)a1)
  {
LABEL_13:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 32) = 0;
    if (!v11) {
      return result;
    }
    goto LABEL_7;
  }
  if (!v11 || !v9)
  {
    __break(1u);
    goto LABEL_13;
  }
  long long v6 = v8;
  uint64_t v7 = v10;
  if (v10) {
    *(_DWORD *)v10 += 2;
  }
  *(void *)a2 = v7;
  *(_OWORD *)(a2 + 8) = v6;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 1;
LABEL_7:
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1988087AC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, char a14)
{
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *IPC::Decoder::decode<WebKit::RevealItemRange>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::StorageEstimate,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::ConsumerSharedCARingBufferHandle,void>::encode(IPC::Encoder *a1, unint64_t a2)
{
  IPC::Encoder::addAttachment((uint64_t)a1, a2);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 16);

  return IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, v4);
}

void IPC::ArgumentCoder<WebKit::ConsumerSharedCARingBufferHandle,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  IPC::Decoder::decode<WebCore::SharedMemoryHandle>(a1, (uint64_t)v16);
  unint64_t v4 = *((void *)v2 + 1);
  uint64_t v5 = *(void *)v2;
  unint64_t v6 = ((*((void *)v2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v2;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    long long v8 = (IPC::Decoder **)(v5 + v6);
    *((void *)v2 + 2) = v8 + 1;
    if (!v5)
    {
      unint64_t v10 = v4;
      uint64_t v11 = 0;
      goto LABEL_16;
    }
    int v9 = 0;
    uint64_t v2 = *v8;
    goto LABEL_8;
  }
  while (1)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v12 = *((void *)v2 + 3);
    if (v12)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v5, v4);
        uint64_t v11 = *(void *)v2;
        unint64_t v10 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
LABEL_16:
    *(void *)uint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v13 = *((void *)v2 + 3);
    if (!v13) {
      break;
    }
    if (!v10) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
    if (!*(void *)v2) {
      break;
    }
    uint64_t v2 = 0;
    int v9 = 1;
LABEL_8:
    uint64_t v5 = v18;
    if (v18)
    {
      WTF::MachSendRight::MachSendRight();
      uint64_t v5 = v17;
      *(void *)&long long v15 = v17;
      if (!v9)
      {
        *((void *)&v15 + 1) = v2;
        WTF::MachSendRight::MachSendRight();
        *(_OWORD *)(a2 + 8) = v15;
        *(unsigned char *)(a2 + 24) = 1;
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v14);
        goto LABEL_11;
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
LABEL_11:
  if (v18) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v16);
  }
}

void sub_198808A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  if (a14) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::ArgumentCoder<WebCore::FontPlatformSerializedTraits,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<std::optional<WTF::RetainPtr<__CFNumber const*>>,void>::encode<IPC::Encoder,std::optional<WTF::RetainPtr<__CFNumber const*>> const&>(a1, (uint64_t)(a2 + 1));
  IPC::ArgumentCoder<std::optional<WTF::RetainPtr<__CFNumber const*>>,void>::encode<IPC::Encoder,std::optional<WTF::RetainPtr<__CFNumber const*>> const&>(a1, (uint64_t)(a2 + 3));
  IPC::ArgumentCoder<std::optional<WTF::RetainPtr<__CFNumber const*>>,void>::encode<IPC::Encoder,std::optional<WTF::RetainPtr<__CFNumber const*>> const&>(a1, (uint64_t)(a2 + 5));

  return IPC::ArgumentCoder<std::optional<WTF::RetainPtr<__CFNumber const*>>,void>::encode<IPC::Encoder,std::optional<WTF::RetainPtr<__CFNumber const*>> const&>(a1, (uint64_t)(a2 + 7));
}

unsigned char *IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(unsigned char *result, uint64_t *a2)
{
  unint64_t v3 = result;
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v12 = a2[3];
    if (v12)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t v11 = *a2;
        uint64_t v10 = a2[1];
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_10;
  }
  long long v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v10 = v6;
    uint64_t v11 = 0;
LABEL_10:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v13 = a2[3];
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v5);
    }
    goto LABEL_12;
  }
  if (!v9)
  {
    *uint64_t result = 0;
    result[8] = 0;
    goto LABEL_8;
  }
  uint64_t result = (unsigned char *)IPC::Decoder::decode<WTF::RetainPtr<__CFNumber const*>>((uint64_t)&v17, a2);
  if (v18)
  {
    *(void *)unint64_t v3 = v17;
    uint64_t v3[8] = 1;
LABEL_8:
    v3[16] = 1;
    return result;
  }
LABEL_12:
  *unint64_t v3 = 0;
  v3[16] = 0;
  uint64_t v15 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (unsigned char *)a2[3];
  if (result && v15)
  {
    uint64_t v16 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (unsigned char *)v16();
  }
  return result;
}

void IPC::ArgumentCoder<WebCore::FontPlatformSerializedAttributes,void>::decode(unsigned char *a1, IPC::Decoder *a2)
{
  long long v8 = a2;
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v300);
  IPC::Decoder::decode<WTF::String>(v8, (uint64_t)&v298);
  IPC::Decoder::decode<WTF::String>(v8, (uint64_t)&v296);
  unint64_t v9 = *((void *)v8 + 1);
  uint64_t v10 = *(WTF::StringImpl **)v8;
  unint64_t v11 = *((void *)v8 + 2) - *(void *)v8;
  if (v9 <= v11)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *(void *)long long v8 = 0;
    *((void *)v8 + 1) = 0;
    uint64_t v16 = *((void *)v8 + 3);
    if (v16)
    {
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
        uint64_t v15 = *(WTF::StringImpl **)v8;
        unint64_t v14 = *((void *)v8 + 1);
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_9;
  }
  uint64_t v12 = (unsigned __int8 *)v10 + v11;
  *((void *)v8 + 2) = v12 + 1;
  if (!v10)
  {
    unint64_t v14 = v9;
    uint64_t v15 = 0;
LABEL_9:
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *(void *)long long v8 = 0;
    *((void *)v8 + 1) = 0;
    uint64_t v17 = *((void *)v8 + 3);
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v17 + 16))(v17, v15, v14);
        uint64_t v10 = *(WTF::StringImpl **)v8;
        unint64_t v9 = *((void *)v8 + 1);
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_10;
  }
  unsigned int v13 = *v12;
  if (v13 >= 2)
  {
LABEL_10:
    *(void *)long long v8 = 0;
    *((void *)v8 + 1) = 0;
    uint64_t v18 = *((void *)v8 + 3);
    if (v18 && v9) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v18 + 16))(v18, v10);
    }
    goto LABEL_11;
  }
  if (v13)
  {
    IPC::Decoder::decode<WTF::RetainPtr<__CFData const*>>(v8, (uint64_t)&v212);
    if ((_BYTE)v213)
    {
      int v202 = 0;
      int v211 = 0;
      CFTypeRef v201 = v212;
      goto LABEL_13;
    }
LABEL_11:
    uint64_t v19 = *(WTF::StringImpl **)v8;
    uint64_t v20 = *((void *)v8 + 1);
    *(void *)long long v8 = 0;
    *((void *)v8 + 1) = 0;
    unint64_t v21 = (unsigned char *)*((void *)v8 + 3);
    if (v21) {
      goto LABEL_329;
    }
    goto LABEL_12;
  }
  CFTypeRef v201 = 0;
  int v211 = 0;
  int v202 = 1;
  while (1)
  {
LABEL_13:
    unint64_t v22 = *((void *)v8 + 1);
    unsigned int v23 = *(WTF::StringImpl **)v8;
    unint64_t v24 = *((void *)v8 + 2) - *(void *)v8;
    if (v22 <= v24)
    {
      unint64_t v130 = 0;
      int v131 = 0;
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v132 = *((void *)v8 + 3);
      if (v132)
      {
        if (v22)
        {
          (*(void (**)(uint64_t))(*(void *)v132 + 16))(v132);
          int v131 = *(WTF::StringImpl **)v8;
          unint64_t v130 = *((void *)v8 + 1);
        }
        else
        {
          unint64_t v130 = 0;
          int v131 = 0;
        }
      }
LABEL_340:
      unint64_t v22 = 0;
      unsigned int v23 = 0;
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v133 = *((void *)v8 + 3);
      if (v133)
      {
        if (v130)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v133 + 16))(v133, v131, v130);
          unsigned int v23 = *(WTF::StringImpl **)v8;
          unint64_t v22 = *((void *)v8 + 1);
        }
        else
        {
          unint64_t v22 = 0;
          unsigned int v23 = 0;
        }
      }
LABEL_341:
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v134 = *((void *)v8 + 3);
      if (!v134 || !v22) {
        goto LABEL_377;
      }
LABEL_343:
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v134 + 16))(v134, v23);
      goto LABEL_377;
    }
    char v25 = (unsigned __int8 *)v23 + v24;
    *((void *)v8 + 2) = v25 + 1;
    if (!v23)
    {
      unint64_t v130 = v22;
      int v131 = 0;
      goto LABEL_340;
    }
    unsigned int v26 = *v25;
    if (v26 >= 2) {
      goto LABEL_341;
    }
    if (!v26)
    {
      CFTypeRef v200 = 0;
      int v209 = 1;
      int v210 = 0;
      goto LABEL_20;
    }
    IPC::ArgumentCoder<WTF::RetainPtr<__CFBoolean const*>,void>::decode((uint64_t *)v8, &v212);
    if ((_BYTE)v213)
    {
      int v209 = 0;
      int v210 = 0;
      CFTypeRef v200 = v212;
      goto LABEL_20;
    }
    unsigned int v23 = *(WTF::StringImpl **)v8;
    uint64_t v163 = *((void *)v8 + 1);
    *(void *)long long v8 = 0;
    *((void *)v8 + 1) = 0;
    uint64_t v134 = *((void *)v8 + 3);
    if (v134 && v163) {
      goto LABEL_343;
    }
LABEL_377:
    int v164 = *(WTF::StringImpl **)v8;
    uint64_t v165 = *((void *)v8 + 1);
    *(void *)long long v8 = 0;
    *((void *)v8 + 1) = 0;
    uint64_t v166 = *((void *)v8 + 3);
    if (v166 && v165) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v166 + 16))(v166, v164);
    }
    CFTypeRef v200 = 0;
    int v210 = 1;
LABEL_20:
    IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v293, (uint64_t *)v8);
    IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v290, (uint64_t *)v8);
    IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v287, (uint64_t *)v8);
    IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v284, (uint64_t *)v8);
    IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v281, (uint64_t *)v8);
    IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v278, (uint64_t *)v8);
    IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v275, (uint64_t *)v8);
    IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v272, (uint64_t *)v8);
    IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&cf, (uint64_t *)v8);
    unint64_t v27 = *((void *)v8 + 1);
    uint64_t v28 = *(char **)v8;
    unint64_t v29 = *((void *)v8 + 2) - *(void *)v8;
    if (v27 <= v29)
    {
      unint64_t v135 = 0;
      int v136 = 0;
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v137 = *((void *)v8 + 3);
      if (v137)
      {
        if (v27)
        {
          (*(void (**)(uint64_t))(*(void *)v137 + 16))(v137);
          int v136 = *(WTF::StringImpl **)v8;
          unint64_t v135 = *((void *)v8 + 1);
        }
        else
        {
          unint64_t v135 = 0;
          int v136 = 0;
        }
      }
      goto LABEL_345;
    }
    BOOL v30 = &v28[v29];
    uint64_t v31 = (uint64_t)&v28[v29 + 1];
    *((void *)v8 + 2) = v31;
    if (!v28)
    {
      unint64_t v135 = v27;
      int v136 = 0;
LABEL_345:
      unint64_t v27 = 0;
      uint64_t v28 = 0;
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v138 = *((void *)v8 + 3);
      if (v138)
      {
        if (v135)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v138 + 16))(v138, v136, v135);
          uint64_t v28 = *(char **)v8;
          unint64_t v27 = *((void *)v8 + 1);
        }
        else
        {
          unint64_t v27 = 0;
          uint64_t v28 = 0;
        }
      }
      goto LABEL_346;
    }
    unsigned int v32 = *v30;
    if (v32 < 2)
    {
      if (!v32)
      {
        LOBYTE(v265) = 0;
        char v267 = 0;
        char v268 = 1;
        goto LABEL_47;
      }
      unint64_t v33 = ((v31 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v28;
      if (v27 >= v33 && v27 - v33 > 7)
      {
        uint64_t v34 = (unint64_t *)&v28[v33];
        unint64_t v2 = *v34;
        *((void *)v8 + 2) = v34 + 1;
        uint64_t v257 = 0;
        uint64_t v258 = 0;
        if (v2 >= 0x10000)
        {
          do
          {
            IPC::Decoder::decode<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>>((uint64_t)&v212, (uint64_t *)v8);
            if (!(_BYTE)v214) {
              goto LABEL_44;
            }
            if (HIDWORD(v258) == v258)
            {
              WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>>((uint64_t)&v257, (unint64_t)&v212);
            }
            else
            {
              int v42 = HIDWORD(v258) + 1;
              unint64_t v43 = (void *)((char *)v257 + 16 * HIDWORD(v258));
              CFTypeRef v44 = v212;
              CFTypeRef v212 = 0;
              *unint64_t v43 = v44;
              unint64_t v45 = v213;
              uint64_t v213 = 0;
              v43[1] = v45;
              HIDWORD(v258) = v42;
            }
            std::__optional_destruct_base<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v212);
            --v2;
          }
          while (v2);
          uint64_t v186 = HIDWORD(v258);
          unint64_t v3 = (const void **)v257;
          if (v258 > HIDWORD(v258))
          {
            unsigned int v187 = v257;
            if (HIDWORD(v258))
            {
              if (HIDWORD(v258) >> 28) {
                goto LABEL_488;
              }
              unsigned int v188 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v258)));
              LODWORD(v258) = v186;
              uint64_t v257 = v188;
              unsigned int v187 = (WTF *)v3;
              if (v188 != (WTF *)v3)
              {
                WTF::VectorMover<false,std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>>::move(v3, &v3[2 * v186], v188);
                unsigned int v187 = v257;
              }
            }
            if (v3)
            {
              if (v187 == (WTF *)v3)
              {
                uint64_t v257 = 0;
                LODWORD(v258) = 0;
              }
              WTF::fastFree((WTF *)v3, v28);
              unint64_t v3 = (const void **)v257;
            }
            else
            {
              unint64_t v3 = (const void **)v187;
            }
          }
          uint64_t v257 = 0;
          uint64_t v203 = v258;
        }
        else
        {
          if (v2)
          {
            BOOL v35 = (WTF *)WTF::fastMalloc((WTF *)(16 * v2));
            LODWORD(v258) = v2;
            uint64_t v257 = v35;
            while (1)
            {
              IPC::Decoder::decode<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>>((uint64_t)&v212, (uint64_t *)v8);
              if (!(_BYTE)v214) {
                break;
              }
              if (HIDWORD(v258) == v258)
              {
                WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>>((uint64_t)&v257, (unint64_t)&v212);
              }
              else
              {
                int v36 = HIDWORD(v258) + 1;
                unint64_t v37 = (void *)((char *)v257 + 16 * HIDWORD(v258));
                CFTypeRef v38 = v212;
                CFTypeRef v212 = 0;
                *unint64_t v37 = v38;
                uint64_t v39 = v213;
                uint64_t v213 = 0;
                v37[1] = v39;
                HIDWORD(v258) = v36;
              }
              std::__optional_destruct_base<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v212);
              if (!--v2)
              {
                unint64_t v3 = (const void **)v257;
                uint64_t v40 = v258;
                goto LABEL_37;
              }
            }
LABEL_44:
            std::__optional_destruct_base<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v212);
            WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v257, v46);
LABEL_45:
            uint64_t v28 = *(char **)v8;
            uint64_t v47 = *((void *)v8 + 1);
            *(void *)long long v8 = 0;
            *((void *)v8 + 1) = 0;
            uint64_t v48 = *((void *)v8 + 3);
            if (v48 && v47) {
              goto LABEL_336;
            }
            goto LABEL_46;
          }
          unint64_t v3 = 0;
          uint64_t v40 = 0;
LABEL_37:
          uint64_t v203 = v40;
          uint64_t v257 = 0;
        }
        uint64_t v258 = 0;
        LODWORD(v2) = 1;
        char v263 = 1;
        WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v257, v28);
        uint64_t v261 = 0;
        unsigned __int8 v265 = v3;
        uint64_t v262 = 0;
        uint64_t v266 = v203;
        char v267 = 1;
        WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v261, v41);
        char v268 = 1;
        goto LABEL_47;
      }
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v167 = *((void *)v8 + 3);
      if (v167)
      {
        (*(void (**)(uint64_t))(*(void *)v167 + 16))(v167);
        int v168 = *(WTF::StringImpl **)v8;
        uint64_t v169 = *((void *)v8 + 1);
        uint64_t v170 = *((void *)v8 + 3);
        *(void *)long long v8 = 0;
        *((void *)v8 + 1) = 0;
        if (v170)
        {
          if (v169) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v170 + 16))(v170, v168);
          }
        }
      }
      goto LABEL_45;
    }
LABEL_346:
    *(void *)long long v8 = 0;
    *((void *)v8 + 1) = 0;
    uint64_t v48 = *((void *)v8 + 3);
    if (v48 && v27) {
LABEL_336:
    }
      (*(void (**)(uint64_t, char *))(*(void *)v48 + 16))(v48, v28);
LABEL_46:
    LOBYTE(v265) = 0;
    char v268 = 0;
    uint64_t v49 = *(WTF::StringImpl **)v8;
    uint64_t v50 = *((void *)v8 + 1);
    *(void *)long long v8 = 0;
    *((void *)v8 + 1) = 0;
    uint64_t v51 = *((void *)v8 + 3);
    if (v51 && v50) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v51 + 16))(v51, v49);
    }
LABEL_47:
    unint64_t v52 = *((void *)v8 + 1);
    uint64_t v53 = *(char **)v8;
    unint64_t v54 = *((void *)v8 + 2) - *(void *)v8;
    if (v52 <= v54)
    {
      unint64_t v139 = 0;
      unint64_t v140 = 0;
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v141 = *((void *)v8 + 3);
      if (v141)
      {
        if (v52)
        {
          (*(void (**)(uint64_t))(*(void *)v141 + 16))(v141);
          unint64_t v140 = *(WTF::StringImpl **)v8;
          unint64_t v139 = *((void *)v8 + 1);
        }
        else
        {
          unint64_t v139 = 0;
          unint64_t v140 = 0;
        }
      }
      goto LABEL_350;
    }
    int v55 = &v53[v54];
    uint64_t v56 = (uint64_t)&v53[v54 + 1];
    *((void *)v8 + 2) = v56;
    if (!v53)
    {
      unint64_t v139 = v52;
      unint64_t v140 = 0;
LABEL_350:
      unint64_t v52 = 0;
      uint64_t v53 = 0;
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v142 = *((void *)v8 + 3);
      if (v142)
      {
        if (v139)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v142 + 16))(v142, v140, v139);
          uint64_t v53 = *(char **)v8;
          unint64_t v52 = *((void *)v8 + 1);
        }
        else
        {
          unint64_t v52 = 0;
          uint64_t v53 = 0;
        }
      }
      goto LABEL_351;
    }
    unsigned int v57 = *v55;
    if (v57 < 2)
    {
      if (!v57)
      {
        LOBYTE(v261) = 0;
        char v263 = 0;
        char v264 = 1;
        goto LABEL_74;
      }
      unint64_t v58 = ((v56 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v53;
      if (v52 >= v58 && v52 - v58 > 7)
      {
        char v59 = (unint64_t *)&v53[v58];
        unint64_t v2 = *v59;
        *((void *)v8 + 2) = v59 + 1;
        uint64_t v308 = 0;
        uint64_t v309 = 0;
        if (v2 >= 0x10000)
        {
          do
          {
            IPC::Decoder::decode<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>>((uint64_t)&v212, (uint64_t *)v8);
            if (!(_BYTE)v214) {
              goto LABEL_71;
            }
            if (HIDWORD(v309) == v309)
            {
              WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>>((uint64_t)&v308, (unint64_t)&v212);
            }
            else
            {
              int v67 = HIDWORD(v309) + 1;
              int v68 = (char *)&v308[2 * HIDWORD(v309)];
              CFTypeRef v69 = v212;
              CFTypeRef v212 = 0;
              *(void *)int v68 = v69;
              char v70 = v213;
              uint64_t v213 = 0;
              *((void *)v68 + 1) = v70;
              HIDWORD(v309) = v67;
            }
            std::__optional_destruct_base<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v212);
            --v2;
          }
          while (v2);
          uint64_t v189 = HIDWORD(v309);
          unint64_t v3 = v308;
          if (v309 > HIDWORD(v309))
          {
            unsigned int v190 = v308;
            if (HIDWORD(v309))
            {
              if (HIDWORD(v309) >> 28)
              {
LABEL_488:
                __break(0xC471u);
                JUMPOUT(0x19880AA44);
              }
              unsigned int v191 = (const void **)WTF::fastMalloc((WTF *)(16 * HIDWORD(v309)));
              LODWORD(v309) = v189;
              uint64_t v308 = v191;
              unsigned int v190 = v3;
              if (v191 != v3)
              {
                WTF::VectorMover<false,std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>>::move(v3, &v3[2 * v189], v191);
                unsigned int v190 = v308;
              }
            }
            if (v3)
            {
              if (v190 == v3)
              {
                uint64_t v308 = 0;
                LODWORD(v309) = 0;
              }
              WTF::fastFree((WTF *)v3, v53);
              unint64_t v3 = v308;
            }
            else
            {
              unint64_t v3 = v190;
            }
          }
          uint64_t v308 = 0;
          uint64_t v204 = v309;
        }
        else
        {
          if (v2)
          {
            unsigned int v60 = (const void **)WTF::fastMalloc((WTF *)(16 * v2));
            LODWORD(v309) = v2;
            uint64_t v308 = v60;
            while (1)
            {
              IPC::Decoder::decode<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>>((uint64_t)&v212, (uint64_t *)v8);
              if (!(_BYTE)v214) {
                break;
              }
              if (HIDWORD(v309) == v309)
              {
                WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>>((uint64_t)&v308, (unint64_t)&v212);
              }
              else
              {
                int v61 = HIDWORD(v309) + 1;
                unsigned int v62 = (char *)&v308[2 * HIDWORD(v309)];
                CFTypeRef v63 = v212;
                CFTypeRef v212 = 0;
                *(void *)unsigned int v62 = v63;
                int v64 = v213;
                uint64_t v213 = 0;
                *((void *)v62 + 1) = v64;
                HIDWORD(v309) = v61;
              }
              std::__optional_destruct_base<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v212);
              if (!--v2)
              {
                unint64_t v3 = v308;
                uint64_t v65 = v309;
                goto LABEL_64;
              }
            }
LABEL_71:
            std::__optional_destruct_base<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v212);
            WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v308, v71);
LABEL_72:
            uint64_t v53 = *(char **)v8;
            uint64_t v72 = *((void *)v8 + 1);
            *(void *)long long v8 = 0;
            *((void *)v8 + 1) = 0;
            uint64_t v73 = *((void *)v8 + 3);
            if (v73 && v72) {
              goto LABEL_338;
            }
            goto LABEL_73;
          }
          unint64_t v3 = 0;
          uint64_t v65 = 0;
LABEL_64:
          uint64_t v204 = v65;
          uint64_t v308 = 0;
        }
        uint64_t v309 = 0;
        LODWORD(v2) = 1;
        char v259 = 1;
        WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v308, v53);
        uint64_t v257 = 0;
        uint64_t v258 = 0;
        uint64_t v261 = v3;
        uint64_t v262 = v204;
        char v263 = 1;
        WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v257, v66);
        char v264 = 1;
        goto LABEL_74;
      }
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v171 = *((void *)v8 + 3);
      if (v171)
      {
        (*(void (**)(uint64_t))(*(void *)v171 + 16))(v171);
        int v172 = *(WTF::StringImpl **)v8;
        uint64_t v173 = *((void *)v8 + 1);
        uint64_t v174 = *((void *)v8 + 3);
        *(void *)long long v8 = 0;
        *((void *)v8 + 1) = 0;
        if (v174)
        {
          if (v173) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v174 + 16))(v174, v172);
          }
        }
      }
      goto LABEL_72;
    }
LABEL_351:
    *(void *)long long v8 = 0;
    *((void *)v8 + 1) = 0;
    uint64_t v73 = *((void *)v8 + 3);
    if (v73 && v52) {
LABEL_338:
    }
      (*(void (**)(uint64_t, char *))(*(void *)v73 + 16))(v73, v53);
LABEL_73:
    LOBYTE(v261) = 0;
    char v264 = 0;
    char v74 = *(WTF::StringImpl **)v8;
    uint64_t v75 = *((void *)v8 + 1);
    *(void *)long long v8 = 0;
    *((void *)v8 + 1) = 0;
    uint64_t v76 = *((void *)v8 + 3);
    if (v76 && v75) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v76 + 16))(v76, v74);
    }
LABEL_74:
    unint64_t v77 = *((void *)v8 + 1);
    unsigned int v78 = *(WTF::StringImpl **)v8;
    unint64_t v79 = *((void *)v8 + 2) - *(void *)v8;
    if (v77 <= v79)
    {
      unint64_t v143 = 0;
      unsigned int v144 = 0;
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v145 = *((void *)v8 + 3);
      if (v145)
      {
        if (v77)
        {
          (*(void (**)(uint64_t))(*(void *)v145 + 16))(v145);
          unsigned int v144 = *(WTF::StringImpl **)v8;
          unint64_t v143 = *((void *)v8 + 1);
        }
        else
        {
          unint64_t v143 = 0;
          unsigned int v144 = 0;
        }
      }
LABEL_355:
      unint64_t v77 = 0;
      unsigned int v78 = 0;
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v146 = *((void *)v8 + 3);
      if (v146)
      {
        if (v143)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v146 + 16))(v146, v144, v143);
          unsigned int v78 = *(WTF::StringImpl **)v8;
          unint64_t v77 = *((void *)v8 + 1);
        }
        else
        {
          unint64_t v77 = 0;
          unsigned int v78 = 0;
        }
      }
LABEL_356:
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v147 = *((void *)v8 + 3);
      if (v147 && v77) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v147 + 16))(v147, v78);
      }
LABEL_393:
      LOBYTE(v257) = 0;
      char v260 = 0;
      goto LABEL_105;
    }
    unsigned int v80 = (unsigned __int8 *)v78 + v79;
    *((void *)v8 + 2) = v80 + 1;
    if (!v78)
    {
      unint64_t v143 = v77;
      unsigned int v144 = 0;
      goto LABEL_355;
    }
    if (*v80 >= 2u) {
      goto LABEL_356;
    }
    if (!*v80)
    {
      LOBYTE(v212) = 0;
      LOBYTE(v214) = 0;
      std::__optional_move_base<WebCore::FontPlatformOpticalSize,false>::__optional_move_base[abi:sn180100](&v257, (uint64_t)&v212);
      char v260 = 1;
      if ((_BYTE)v214 && v213 != -1) {
        ((void (*)(const void ***, CFTypeRef *))off_1EE9B3FB0[v213])(&v308, &v212);
      }
      goto LABEL_105;
    }
    if (v77 <= v80 + 1 - (unsigned __int8 *)v78)
    {
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v175 = *((void *)v8 + 3);
      if (v175)
      {
        (*(void (**)(uint64_t))(*(void *)v175 + 16))(v175);
        unsigned int v176 = *(WTF::StringImpl **)v8;
        uint64_t v177 = *((void *)v8 + 1);
        uint64_t v178 = *((void *)v8 + 3);
        *(void *)long long v8 = 0;
        *((void *)v8 + 1) = 0;
        if (v178)
        {
          if (v177) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v178 + 16))(v178, v176);
          }
        }
      }
LABEL_80:
      LOBYTE(v212) = 0;
      LOBYTE(v214) = 0;
LABEL_81:
      unsigned int v82 = *(WTF::StringImpl **)v8;
      uint64_t v20 = *((void *)v8 + 1);
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v83 = *((void *)v8 + 3);
      if (v83 && v20)
      {
        unint64_t v21 = (unsigned char *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v83 + 16))(v83, v82);
        int v84 = *(WTF::StringImpl **)v8;
        if (*(void *)v8) {
          goto LABEL_328;
        }
      }
      else
      {
        LODWORD(v84) = 0;
      }
      goto LABEL_83;
    }
    *((void *)v8 + 2) = v80 + 2;
    unsigned int v81 = v80[1];
    if (v81 >= 2) {
      goto LABEL_80;
    }
    if (v81)
    {
      IPC::Decoder::decode<WTF::String>(v8, (uint64_t)&v305);
      int v85 = v306;
      if ((_BYTE)v306)
      {
        CFTypeRef v212 = v305;
        int v85 = 1;
        LODWORD(v213) = 1;
        goto LABEL_94;
      }
    }
    else
    {
      IPC::Decoder::decode<WTF::RetainPtr<__CFNumber const*>>((uint64_t)&v305, (uint64_t *)v8);
      int v85 = v306;
      if ((_BYTE)v306)
      {
        CFTypeRef v212 = v305;
        LODWORD(v213) = 0;
        int v85 = 1;
        goto LABEL_94;
      }
    }
    LOBYTE(v212) = 0;
LABEL_94:
    LOBYTE(v214) = v85;
    if (!v85) {
      goto LABEL_81;
    }
    if (*(void *)v8)
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<__CFNumber const*>,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v305, (uint64_t)&v212);
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<__CFNumber const*>,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v308, (uint64_t)&v305);
      char v310 = 1;
      if (v306 != -1) {
        ((void (*)(const void ***, CFTypeRef *))off_1EE9B3FB0[v306])(&v302, &v305);
      }
      if (!(_BYTE)v214) {
        goto LABEL_101;
      }
LABEL_99:
      if (v213 != -1) {
        ((void (*)(CFTypeRef *, CFTypeRef *, uint64_t))off_1EE9B3FB0[v213])(&v305, &v212, v20);
      }
      goto LABEL_101;
    }
    LODWORD(v84) = 1;
LABEL_83:
    LOBYTE(v308) = 0;
    char v310 = 0;
    if (v84) {
      goto LABEL_99;
    }
LABEL_101:
    if (!v310)
    {
      uint64_t v179 = *(WTF::StringImpl **)v8;
      uint64_t v180 = *((void *)v8 + 1);
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v181 = *((void *)v8 + 3);
      if (!v181) {
        goto LABEL_393;
      }
      if (!v180) {
        goto LABEL_393;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v181 + 16))(v181, v179);
      if (!v310) {
        goto LABEL_393;
      }
    }
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RetainPtr<__CFNumber const*>,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v257, (uint64_t)&v308);
    char v259 = 1;
    char v260 = 1;
    if (v310 && v309 != -1) {
      ((void (*)(CFTypeRef *, const void ***))off_1EE9B3FB0[v309])(&v212, &v308);
    }
LABEL_105:
    unint64_t v86 = *((void *)v8 + 1);
    if (!v260)
    {
      uint64_t v148 = *(WTF::StringImpl **)v8;
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v149 = *((void *)v8 + 3);
      if (!v149 || !v86)
      {
        unint64_t v86 = 0;
        int v87 = *(WTF::StringImpl **)v8;
LABEL_361:
        unint64_t v150 = 0;
        int v151 = 0;
        *(void *)long long v8 = 0;
        *((void *)v8 + 1) = 0;
        uint64_t v152 = *((void *)v8 + 3);
        if (v152)
        {
          if (v86)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v152 + 16))(v152, v87);
            int v151 = *(WTF::StringImpl **)v8;
            unint64_t v150 = *((void *)v8 + 1);
          }
          else
          {
            unint64_t v150 = 0;
            int v151 = 0;
          }
        }
        goto LABEL_362;
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v149 + 16))(v149, v148);
      unint64_t v86 = *((void *)v8 + 1);
    }
    int v87 = *(WTF::StringImpl **)v8;
    unint64_t v88 = *((void *)v8 + 2) - *(void *)v8;
    if (v86 <= v88) {
      goto LABEL_361;
    }
    int v89 = (unsigned __int8 *)v87 + v88;
    *((void *)v8 + 2) = v89 + 1;
    if (v87)
    {
      unsigned int v90 = *v89;
      if (v90 >= 2) {
        goto LABEL_366;
      }
      if (!v90)
      {
        int v205 = 0;
        unint64_t v3 = 0;
        LODWORD(v2) = 1;
        goto LABEL_160;
      }
      IPC::Decoder::decode<WTF::String>(v8, (uint64_t)&v311);
      IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v212, (uint64_t *)v8);
      IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v308, (uint64_t *)v8);
      IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v305, (uint64_t *)v8);
      unint64_t v21 = IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v302, (uint64_t *)v8);
      unint64_t v2 = *(void *)v8;
      if (*(void *)v8)
      {
        if (!v312) {
          goto LABEL_328;
        }
        uint64_t v4 = (const void **)v311;
        char v311 = 0;
        if (!(_BYTE)v214) {
          goto LABEL_328;
        }
        int v92 = v213;
        if ((_BYTE)v213)
        {
          int v91 = (void *)v212;
          CFTypeRef v212 = 0;
        }
        else
        {
          int v91 = 0;
        }
        if (!v310) {
          goto LABEL_328;
        }
        int v93 = v309;
        if ((_BYTE)v309)
        {
          unint64_t v6 = v308;
          uint64_t v308 = 0;
        }
        else
        {
          unint64_t v6 = 0;
        }
        if (!v307) {
          goto LABEL_328;
        }
        unint64_t v5 = v306;
        if ((_BYTE)v306)
        {
          CFTypeRef v7 = v305;
          CFTypeRef v305 = 0;
        }
        else
        {
          CFTypeRef v7 = 0;
        }
        if (!v304) {
          goto LABEL_328;
        }
        unsigned int v196 = v4;
        if (!v303)
        {
          unint64_t v3 = 0;
          int v96 = 1;
LABEL_134:
          if (v307 && (_BYTE)v306 && v305)
          {
            CFTypeRef v206 = v91;
            CFRelease(v305);
            int v91 = (void *)v206;
          }
          if (v310 && (_BYTE)v309 && v308)
          {
            CFTypeRef v207 = v91;
            CFRelease(v308);
            int v91 = (void *)v207;
          }
          if ((_BYTE)v214 && (_BYTE)v213 && v212)
          {
            CFTypeRef v208 = v91;
            CFRelease(v212);
            int v91 = (void *)v208;
          }
          if (v312)
          {
            int v97 = v311;
            char v311 = 0;
            if (v97)
            {
              if (*(_DWORD *)v97 == 2)
              {
                uint64_t v4 = (const void **)v91;
                WTF::StringImpl::destroy(v97, v19);
                int v91 = v4;
                if (v2)
                {
LABEL_147:
                  int v205 = 0;
                  LODWORD(v2) = 0;
                  if (v92) {
                    CFTypeRef v98 = v91;
                  }
                  else {
                    CFTypeRef v98 = 0;
                  }
                  BOOL v194 = v93 != 0;
                  BOOL v195 = v92 != 0;
                  if (v93) {
                    int v99 = v6;
                  }
                  else {
                    int v99 = 0;
                  }
                  unsigned int v197 = v99;
                  unsigned int v198 = v98;
                  BOOL v100 = v5 != 0;
                  if (v5) {
                    unint64_t v5 = (unint64_t)v7;
                  }
                  else {
                    unint64_t v5 = 0;
                  }
                  char v192 = v96 ^ 1;
                  BOOL v193 = v100;
                  if (v96) {
                    unint64_t v6 = 0;
                  }
                  else {
                    unint64_t v6 = v3;
                  }
                  unint64_t v3 = v196;
                  goto LABEL_160;
                }
                goto LABEL_365;
              }
              *(_DWORD *)v97 -= 2;
            }
          }
          if (v2) {
            goto LABEL_147;
          }
LABEL_365:
          int v87 = *(WTF::StringImpl **)v8;
          unint64_t v86 = *((void *)v8 + 1);
          goto LABEL_366;
        }
        BOOL v94 = 0;
        unint64_t v3 = v302;
        unint64_t v302 = 0;
        int v95 = 1;
      }
      else
      {
        unint64_t v5 = 0;
        int v93 = 0;
        int v92 = 0;
        unsigned int v196 = 0;
        int v95 = v303;
        BOOL v94 = v304 == 0;
      }
      int v96 = 0;
      if (!v94 && v95)
      {
        if (v302)
        {
          CFTypeRef v129 = v91;
          CFRelease(v302);
          int v91 = (void *)v129;
        }
        int v96 = 0;
      }
      goto LABEL_134;
    }
    unint64_t v150 = v86;
    int v151 = 0;
LABEL_362:
    unint64_t v86 = 0;
    int v87 = 0;
    *(void *)long long v8 = 0;
    *((void *)v8 + 1) = 0;
    uint64_t v153 = *((void *)v8 + 3);
    if (!v153) {
      goto LABEL_366;
    }
    if (v150)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v153 + 16))(v153, v151, v150);
      goto LABEL_365;
    }
    unint64_t v86 = 0;
    int v87 = 0;
LABEL_366:
    *(void *)long long v8 = 0;
    *((void *)v8 + 1) = 0;
    uint64_t v154 = *((void *)v8 + 3);
    if (v154 && v86) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v154 + 16))(v154, v87);
    }
    unsigned int v155 = *(WTF::StringImpl **)v8;
    uint64_t v156 = *((void *)v8 + 1);
    *(void *)long long v8 = 0;
    *((void *)v8 + 1) = 0;
    uint64_t v157 = *((void *)v8 + 3);
    if (v157 && v156) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v157 + 16))(v157, v155);
    }
    unint64_t v3 = 0;
    int v205 = 1;
LABEL_160:
    unint64_t v101 = *((void *)v8 + 1);
    unsigned int v102 = *(char **)v8;
    unint64_t v103 = *((void *)v8 + 2) - *(void *)v8;
    if (v101 <= v103)
    {
      unint64_t v158 = 0;
      uint64_t v159 = 0;
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v160 = *((void *)v8 + 3);
      if (v160)
      {
        if (v101)
        {
          (*(void (**)(uint64_t))(*(void *)v160 + 16))(v160);
          uint64_t v159 = *(WTF::StringImpl **)v8;
          unint64_t v158 = *((void *)v8 + 1);
        }
        else
        {
          unint64_t v158 = 0;
          uint64_t v159 = 0;
        }
      }
LABEL_370:
      unint64_t v101 = 0;
      unsigned int v102 = 0;
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v161 = *((void *)v8 + 3);
      if (v161)
      {
        if (v158)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v161 + 16))(v161, v159, v158);
          unsigned int v102 = *(char **)v8;
          unint64_t v101 = *((void *)v8 + 1);
        }
        else
        {
          unint64_t v101 = 0;
          unsigned int v102 = 0;
        }
      }
LABEL_371:
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v162 = *((void *)v8 + 3);
      if (!v162 || !v101) {
        goto LABEL_395;
      }
LABEL_373:
      (*(void (**)(uint64_t, char *))(*(void *)v162 + 16))(v162, v102);
      goto LABEL_395;
    }
    unsigned int v104 = &v102[v103];
    *((void *)v8 + 2) = v104 + 1;
    if (!v102)
    {
      unint64_t v158 = v101;
      uint64_t v159 = 0;
      goto LABEL_370;
    }
    unsigned int v105 = *v104;
    if (v105 >= 2) {
      goto LABEL_371;
    }
    if (!v105)
    {
      int v106 = 0;
      CFTypeRef v7 = 0;
      LODWORD(v4) = 1;
      goto LABEL_167;
    }
    IPC::ArgumentCoder<WTF::RetainPtr<__CFArray const*>,void>::decode((uint64_t *)v8, v102, (uint64_t)&v212);
    if ((_BYTE)v213)
    {
      int v106 = 0;
      LODWORD(v4) = 0;
      CFTypeRef v7 = v212;
      goto LABEL_167;
    }
    unsigned int v102 = *(char **)v8;
    uint64_t v182 = *((void *)v8 + 1);
    *(void *)long long v8 = 0;
    *((void *)v8 + 1) = 0;
    uint64_t v162 = *((void *)v8 + 3);
    if (v162 && v182) {
      goto LABEL_373;
    }
LABEL_395:
    unsigned int v183 = *(WTF::StringImpl **)v8;
    uint64_t v184 = *((void *)v8 + 1);
    *(void *)long long v8 = 0;
    *((void *)v8 + 1) = 0;
    uint64_t v185 = *((void *)v8 + 3);
    if (v185 && v184) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v185 + 16))(v185, v183);
    }
    CFTypeRef v7 = 0;
    int v106 = 1;
LABEL_167:
    unint64_t v21 = IPC::Decoder::decode<std::optional<WTF::RetainPtr<__CFNumber const*>>>(&v308, (uint64_t *)v8);
    if (!*(void *)v8) {
      break;
    }
    if (v301)
    {
      unsigned int v107 = v300;
      uint64_t v300 = 0;
      CFTypeRef v212 = v107;
      if (v299)
      {
        unsigned int v108 = v298;
        char v298 = 0;
        uint64_t v213 = v108;
        if (v297)
        {
          unsigned int v109 = v296;
          uint64_t v296 = 0;
          uint64_t v214 = v109;
          if (!v211)
          {
            LOBYTE(v215) = 0;
            char v216 = 0;
            if ((v202 & 1) == 0)
            {
              CFTypeRef v215 = v201;
              char v216 = 1;
              CFTypeRef v201 = 0;
            }
            if (!v210)
            {
              LOBYTE(v217) = 0;
              char v218 = 0;
              if ((v209 & 1) == 0)
              {
                CFTypeRef v217 = v200;
                char v218 = 1;
                CFTypeRef v200 = 0;
              }
              if (v295)
              {
                LOBYTE(v219) = 0;
                char v220 = 0;
                if (v294)
                {
                  CFTypeRef v110 = v293;
                  CFTypeRef v293 = 0;
                  CFTypeRef v219 = v110;
                  char v220 = 1;
                }
                if (v292)
                {
                  LOBYTE(v221) = 0;
                  char v222 = 0;
                  if (v291)
                  {
                    CFTypeRef v111 = v290;
                    CFTypeRef v290 = 0;
                    CFTypeRef v221 = v111;
                    char v222 = 1;
                  }
                  if (v289)
                  {
                    LOBYTE(v223) = 0;
                    char v224 = 0;
                    if (v288)
                    {
                      CFTypeRef v112 = v287;
                      CFTypeRef v287 = 0;
                      CFTypeRef v223 = v112;
                      char v224 = 1;
                    }
                    if (v286)
                    {
                      LOBYTE(v225) = 0;
                      char v226 = 0;
                      if (v285)
                      {
                        CFTypeRef v113 = v284;
                        CFTypeRef v284 = 0;
                        CFTypeRef v225 = v113;
                        char v226 = 1;
                      }
                      if (v283)
                      {
                        LOBYTE(v227) = 0;
                        char v228 = 0;
                        if (v282)
                        {
                          CFTypeRef v114 = v281;
                          CFTypeRef v281 = 0;
                          CFTypeRef v227 = v114;
                          char v228 = 1;
                        }
                        if (v280)
                        {
                          LOBYTE(v229) = 0;
                          char v230 = 0;
                          if (v279)
                          {
                            CFTypeRef v115 = v278;
                            CFTypeRef v278 = 0;
                            CFTypeRef v229 = v115;
                            char v230 = 1;
                          }
                          if (v277)
                          {
                            LOBYTE(v231) = 0;
                            char v232 = 0;
                            if (v276)
                            {
                              CFTypeRef v116 = v275;
                              CFTypeRef v275 = 0;
                              CFTypeRef v231 = v116;
                              char v232 = 1;
                            }
                            if (v274)
                            {
                              LOBYTE(v233) = 0;
                              char v234 = 0;
                              if (v273)
                              {
                                CFTypeRef v117 = v272;
                                CFTypeRef v272 = 0;
                                CFTypeRef v233 = v117;
                                char v234 = 1;
                              }
                              if (v271)
                              {
                                LOBYTE(v235) = 0;
                                char v236 = 0;
                                if (v270)
                                {
                                  CFTypeRef v118 = cf;
                                  CFTypeRef cf = 0;
                                  CFTypeRef v235 = v118;
                                  char v236 = 1;
                                }
                                if (v268)
                                {
                                  LOBYTE(v237[0]) = 0;
                                  char v238 = 0;
                                  if (v267)
                                  {
                                    unsigned int v119 = v265;
                                    unsigned __int8 v265 = 0;
                                    v237[0] = v119;
                                    uint64_t v120 = v266;
                                    uint64_t v266 = 0;
                                    v237[1] = v120;
                                    char v238 = 1;
                                  }
                                  if (v264)
                                  {
                                    LOBYTE(v239) = 0;
                                    char v241 = 0;
                                    if (v263)
                                    {
                                      unsigned int v121 = v261;
                                      uint64_t v261 = 0;
                                      uint64_t v239 = v121;
                                      uint64_t v122 = v262;
                                      uint64_t v262 = 0;
                                      uint64_t v240 = v122;
                                      char v241 = 1;
                                    }
                                    if (v260)
                                    {
                                      long long v8 = (IPC::Decoder *)v237;
                                      unint64_t v21 = std::__optional_move_base<WebCore::FontPlatformOpticalSize,false>::__optional_move_base[abi:sn180100](v242, (uint64_t)&v257);
                                      if (!v205)
                                      {
                                        LOBYTE(v243) = 0;
                                        char v252 = 0;
                                        if (v2)
                                        {
                                          unint64_t v21 = a1;
                                        }
                                        else
                                        {
                                          uint64_t v243 = v3;
                                          LOBYTE(v244) = 0;
                                          char v245 = 0;
                                          unint64_t v21 = a1;
                                          if (v195)
                                          {
                                            uint64_t v244 = v198;
                                            char v245 = 1;
                                            unsigned int v198 = 0;
                                          }
                                          LOBYTE(v246) = 0;
                                          char v247 = 0;
                                          if (v194)
                                          {
                                            unint64_t v246 = v197;
                                            char v247 = 1;
                                            unsigned int v197 = 0;
                                          }
                                          LOBYTE(v248) = 0;
                                          char v249 = 0;
                                          if (v193)
                                          {
                                            unint64_t v248 = v5;
                                            char v249 = 1;
                                            unint64_t v5 = 0;
                                          }
                                          LOBYTE(v250) = 0;
                                          char v251 = 0;
                                          if (v192)
                                          {
                                            uint64_t v250 = v6;
                                            char v251 = 1;
                                            unint64_t v6 = 0;
                                          }
                                          unint64_t v3 = 0;
                                          char v252 = 1;
                                        }
                                        if (!v106)
                                        {
                                          LOBYTE(v253) = 0;
                                          char v254 = 0;
                                          if ((v4 & 1) == 0)
                                          {
                                            CFTypeRef v253 = v7;
                                            char v254 = 1;
                                            CFTypeRef v7 = 0;
                                          }
                                          if (v310)
                                          {
                                            LOBYTE(v255) = 0;
                                            char v256 = 0;
                                            int v123 = v309;
                                            if ((_BYTE)v309)
                                            {
                                              int v124 = v308;
                                              uint64_t v308 = 0;
                                              int v255 = v124;
                                              char v256 = 1;
                                            }
                                            *(unsigned char *)(WebCore::FontPlatformSerializedAttributes::FontPlatformSerializedAttributes((uint64_t)v21, (uint64_t *)&v212)+ 384) = 1;
                                            WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes((WebCore::FontPlatformSerializedAttributes *)&v212, v125);
                                            goto LABEL_230;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_328:
    __break(1u);
LABEL_329:
    if (v20) {
      (*(void (**)(unsigned char *, WTF::StringImpl *))(*(void *)v21 + 16))(v21, v19);
    }
LABEL_12:
    CFTypeRef v201 = 0;
    int v211 = 1;
  }
  *a1 = 0;
  a1[384] = 0;
  int v123 = v309;
  if (!v310) {
    goto LABEL_231;
  }
LABEL_230:
  if (v123 && v308) {
    CFRelease(v308);
  }
LABEL_231:
  if (((v106 | v4) & 1) == 0 && v7) {
    CFRelease(v7);
  }
  if (((v205 | v2) & 1) == 0)
  {
    if (v192 && v6) {
      CFRelease(v6);
    }
    if (v193 && v5) {
      CFRelease((CFTypeRef)v5);
    }
    if (v194 && v197) {
      CFRelease(v197);
    }
    if (v195 && v198)
    {
      CFRelease(v198);
      if (!v3) {
        goto LABEL_235;
      }
    }
    else if (!v3)
    {
      goto LABEL_235;
    }
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)v3, v19);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
LABEL_235:
  if (v260 && v259 && v258 != -1) {
    ((void (*)(CFTypeRef *, WTF **))off_1EE9B3FB0[v258])(&v212, &v257);
  }
  if (v264 && v263) {
    WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v261, v19);
  }
  if (v268 && v267) {
    WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v265, v19);
  }
  if (v271 && v270 && cf) {
    CFRelease(cf);
  }
  if (v274 && v273 && v272) {
    CFRelease(v272);
  }
  if (v277 && v276 && v275) {
    CFRelease(v275);
  }
  if (v280 && v279 && v278) {
    CFRelease(v278);
  }
  if (v283 && v282 && v281) {
    CFRelease(v281);
  }
  if (v286 && v285 && v284) {
    CFRelease(v284);
  }
  if (v289 && v288 && v287) {
    CFRelease(v287);
  }
  if (v292 && v291 && v290) {
    CFRelease(v290);
  }
  if (v295 && v294 && v293) {
    CFRelease(v293);
  }
  if (((v210 | v209) & 1) == 0 && v200) {
    CFRelease(v200);
  }
  if (((v202 | v211) & 1) == 0 && v201) {
    CFRelease(v201);
  }
  if (v297)
  {
    int v126 = v296;
    uint64_t v296 = 0;
    if (v126)
    {
      if (*(_DWORD *)v126 == 2) {
        WTF::StringImpl::destroy(v126, v19);
      }
      else {
        *(_DWORD *)v126 -= 2;
      }
    }
  }
  if (v299)
  {
    int v127 = v298;
    char v298 = 0;
    if (v127)
    {
      if (*(_DWORD *)v127 == 2) {
        WTF::StringImpl::destroy(v127, v19);
      }
      else {
        *(_DWORD *)v127 -= 2;
      }
    }
  }
  if (v301)
  {
    int v128 = (WTF::StringImpl *)v300;
    uint64_t v300 = 0;
    if (v128)
    {
      if (*(_DWORD *)v128 == 2) {
        WTF::StringImpl::destroy(v128, v19);
      }
      else {
        *(_DWORD *)v128 -= 2;
      }
    }
  }
}

void sub_19880AA50(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, CFTypeRef a7, CFTypeRef a8, uint64_t a9, CFTypeRef a10, CFTypeRef a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, int a19, int a20,...)
{
  va_start(va, a20);
  if (*(unsigned char *)(v20 - 112))
  {
    uint64_t v22 = *(unsigned int *)(v20 - 120);
    if (v22 != -1) {
      ((void (*)(CFTypeRef *, uint64_t))off_1EE9B3FB0[v22])((CFTypeRef *)va, v20 - 128);
    }
  }
  if (LOBYTE(STACK[0x230]) && LOBYTE(STACK[0x228])) {
    WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<__CFNumber const*>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x218], a2);
  }
  if (LOBYTE(STACK[0x250]) && LOBYTE(STACK[0x248])) {
    WTF::Vector<std::pair<WTF::RetainPtr<__CFNumber const*>,WTF::RetainPtr<CGColor *>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x238], a2);
  }
  if (LOBYTE(STACK[0x268]) && LOBYTE(STACK[0x260]) && STACK[0x258]) {
    CFRelease((CFTypeRef)STACK[0x258]);
  }
  if (LOBYTE(STACK[0x280]) && LOBYTE(STACK[0x278]) && STACK[0x270]) {
    CFRelease((CFTypeRef)STACK[0x270]);
  }
  if (LOBYTE(STACK[0x298]) && LOBYTE(STACK[0x290]) && STACK[0x288]) {
    CFRelease((CFTypeRef)STACK[0x288]);
  }
  if (LOBYTE(STACK[0x2B0]) && LOBYTE(STACK[0x2A8]) && STACK[0x2A0]) {
    CFRelease((CFTypeRef)STACK[0x2A0]);
  }
  if (LOBYTE(STACK[0x2C8]) && LOBYTE(STACK[0x2C0]) && STACK[0x2B8]) {
    CFRelease((CFTypeRef)STACK[0x2B8]);
  }
  if (LOBYTE(STACK[0x2E0]) && LOBYTE(STACK[0x2D8]) && STACK[0x2D0]) {
    CFRelease((CFTypeRef)STACK[0x2D0]);
  }
  if (LOBYTE(STACK[0x2F8]) && LOBYTE(STACK[0x2F0]) && STACK[0x2E8]) {
    CFRelease((CFTypeRef)STACK[0x2E8]);
  }
  if (LOBYTE(STACK[0x310]) && LOBYTE(STACK[0x308]) && STACK[0x300]) {
    CFRelease((CFTypeRef)STACK[0x300]);
  }
  if (*(unsigned char *)(v20 - 232))
  {
    if (*(unsigned char *)(v20 - 240))
    {
      unsigned int v26 = *(const void **)(v20 - 248);
      if (v26) {
        CFRelease(v26);
      }
    }
  }
  if (((a19 | a18) & 1) == 0 && a10) {
    CFRelease(a10);
  }
  if (((a13 | a20) & 1) == 0 && a11) {
    CFRelease(a11);
  }
  if (*(unsigned char *)(v20 - 216))
  {
    unsigned int v23 = *(WTF::StringImpl **)(v20 - 224);
    *(void *)(v20 - 224) = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v20 - 200))
  {
    unint64_t v24 = *(WTF::StringImpl **)(v20 - 208);
    *(void *)(v20 - 208) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v20 - 184))
  {
    char v25 = *(WTF::StringImpl **)(v20 - 192);
    *(void *)(v20 - 192) = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<std::optional<WebCore::FontPlatformSerializedAttributes>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v13 = *((void *)a2 + 3);
    if (v13)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        uint64_t v12 = *(void *)a2;
        unint64_t v11 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_13;
  }
  long long v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v11 = v6;
    uint64_t v12 = 0;
LABEL_13:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_14;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_14:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v5);
    }
    goto LABEL_21;
  }
  if (v9)
  {
    IPC::ArgumentCoder<WebCore::FontPlatformSerializedAttributes,void>::decode(v22, a2);
    if (v23
      || (uint64_t v19 = *(void *)a2,
          uint64_t v20 = *((void *)a2 + 1),
          *(void *)a2 = 0,
          *((void *)a2 + 1) = 0,
          (uint64_t v21 = *((void *)a2 + 3)) != 0)
      && v20
      && ((*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19), v23))
    {
      WebCore::FontPlatformSerializedAttributes::FontPlatformSerializedAttributes((uint64_t)a1, v22);
      a1[384] = 1;
      goto LABEL_8;
    }
LABEL_21:
    *a1 = 0;
    a1[392] = 0;
    goto LABEL_10;
  }
  LOBYTE(v22[0]) = 0;
  char v23 = 0;
  std::__optional_move_base<WebCore::FontPlatformSerializedAttributes,false>::__optional_move_base[abi:sn180100](a1, (uint64_t)v22);
LABEL_8:
  a1[392] = 1;
  if (v23) {
    WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes((WebCore::FontPlatformSerializedAttributes *)v22, v10);
  }
LABEL_10:
  if (!a1[392])
  {
    uint64_t v16 = *(void *)a2;
    uint64_t v17 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v18 = *((void *)a2 + 3);
    if (v18)
    {
      if (v17) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
      }
    }
  }
}

void sub_19880B414(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  if (a58) {
    WebCore::FontPlatformSerializedAttributes::~FontPlatformSerializedAttributes((WebCore::FontPlatformSerializedAttributes *)&a10, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WTF::RetainPtr<__CFString const*>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WTF::RetainPtr<__CFString const*>,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    return (WTF::StringImpl *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::FontCustomPlatformSerializedData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)a2, *(unsigned int *)(a2 + 12));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));

  return IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)(a2 + 24));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::FontCustomPlatformSerializedData,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v20);
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v18);
  unint64_t v5 = *((void *)a1 + 1);
  unint64_t v6 = *(WTF::StringImpl **)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 >= v7 && v5 - v7 > 7)
  {
    unsigned int v9 = (uint64_t *)((char *)v6 + v7);
    *((void *)a1 + 2) = v9 + 1;
    if (v6)
    {
      uint64_t v10 = *v9;
      if ((unint64_t)(v10 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
        goto LABEL_19;
      }
      int v11 = 0;
      goto LABEL_9;
    }
    unint64_t v15 = v5;
    uint64_t v16 = 0;
  }
  else
  {
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      goto LABEL_31;
    }
  }
  while (1)
  {
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v17 = *((void *)a1 + 3);
    if (v17)
    {
      if (v15)
      {
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v17 + 16))(v17, v16, v15);
        unint64_t v6 = *(WTF::StringImpl **)a1;
        if (*(void *)a1) {
          goto LABEL_30;
        }
        unint64_t v5 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        unint64_t v6 = 0;
      }
    }
LABEL_19:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (!result) {
      break;
    }
    if (!v5) {
      break;
    }
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
                                                                                                + 16))(result, v6);
    if (!*(void *)a1) {
      break;
    }
    uint64_t v10 = 0;
    int v11 = 1;
LABEL_9:
    if (v22)
    {
      uint64_t v12 = v20;
      uint64_t v13 = v21;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      if (v19)
      {
        uint64_t v14 = v18;
        uint64_t v18 = 0;
        if (!v11)
        {
          *(void *)a2 = v12;
          *(void *)(a2 + 8) = v13;
          *(void *)(a2 + 16) = v14;
          *(void *)(a2 + 24) = v10;
          *(unsigned char *)(a2 + 32) = 1;
          goto LABEL_13;
        }
      }
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v5)
    {
      (*(void (**)(WTF::StringImpl *))(*(void *)result + 16))(result);
      uint64_t v16 = *(WTF::StringImpl **)a1;
      unint64_t v15 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v15 = 0;
      uint64_t v16 = 0;
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  if (v19)
  {
    uint64_t result = v18;
    uint64_t v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_13:
  if (v22)
  {
    uint64_t result = v20;
    if (v20)
    {
      uint64_t v20 = 0;
      LODWORD(v21) = 0;
      return (WTF::StringImpl *)WTF::fastFree(result, v6);
    }
  }
  return result;
}

void sub_19880B718(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, WTF *a12, int a13, int a14, char a15)
{
  if (a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a15)
  {
    if (a12) {
      WTF::fastFree(a12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::ContentFilterUnblockHandler,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  WebCore::ContentFilterUnblockHandler::webFilterEvaluatorData((uint64_t *)&v9, (WebCore::ContentFilterUnblockHandler *)a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v9, v11);
  unint64_t v5 = v9;
  if (v9)
  {
    unsigned int v9 = 0;
    int v10 = 0;
    WTF::fastFree(v5, v4);
  }
  char v6 = *(unsigned char *)(a2 + 88);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v8)
  {
    *(unsigned char *)unint64_t result = v6;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void sub_19880B820(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::ContentFilterUnblockHandler,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v24);
  IPC::Decoder::decode<WTF::URL>(a1, v22);
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v19);
  unint64_t v4 = *((void *)a1 + 1);
  unint64_t v5 = *(WTF::StringImpl **)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v6) {
    goto LABEL_37;
  }
  unint64_t v7 = (unsigned __int8 *)v5 + v6;
  *((void *)a1 + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v15 = v4;
    uint64_t v16 = 0;
    goto LABEL_38;
  }
  unsigned int v8 = *v7;
  if (v8 > 1) {
    goto LABEL_39;
  }
  int v9 = 0;
  BOOL v10 = v8 != 0;
  while (!v25 || !v23 || !v21 || v9)
  {
    __break(1u);
LABEL_37:
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v17 = *((void *)a1 + 3);
    if (v17)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
        uint64_t v16 = *(WTF::StringImpl **)a1;
        unint64_t v15 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v15 = 0;
        uint64_t v16 = 0;
      }
    }
LABEL_38:
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v18 = *((void *)a1 + 3);
    if (v18)
    {
      if (v15)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v18 + 16))(v18, v16, v15);
        unint64_t v5 = *(WTF::StringImpl **)a1;
        unint64_t v4 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v4 = 0;
        unint64_t v5 = 0;
      }
    }
LABEL_39:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (!result
      || !v4
      || (unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v5), !*(void *)a1))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 96) = 0;
      goto LABEL_22;
    }
    BOOL v10 = 0;
    int v9 = 1;
  }
  MEMORY[0x199738820](&v26, &v24, v22, &v19, v10);
  unsigned int v11 = v26;
  unsigned int v26 = 0;
  *(void *)a2 = v11;
  double v12 = WTF::URL::URL(a2 + 8, (uint64_t *)&v27);
  if (v29)
  {
    if (v29 == v28)
    {
      *(void *)(a2 + 72) = a2 + 48;
      (*(void (**)(void *, double))(v28[0] + 24))(v28, v12);
    }
    else
    {
      *(void *)(a2 + 72) = v29;
      unint64_t v29 = 0;
    }
  }
  else
  {
    *(void *)(a2 + 72) = 0;
  }
  *(void *)(a2 + 80) = v30;
  *(unsigned char *)(a2 + 88) = v31;
  *(unsigned char *)(a2 + 96) = 1;
  uint64_t v30 = 0;
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::~__value_func[abi:sn180100](v28);
  uint64_t v13 = v27;
  unint64_t v27 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v5);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  unint64_t result = v26;
  unsigned int v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_22:
  if (v21)
  {
    unint64_t result = v19;
    if (v19)
    {
      char v19 = 0;
      int v20 = 0;
      unint64_t result = (WTF::StringImpl *)WTF::fastFree(result, v5);
    }
  }
  if (v23)
  {
    unint64_t result = v22[0];
    v22[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v25)
  {
    unint64_t result = v24;
    unint64_t v24 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19880BB8C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11, char a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,CFTypeRef cf)
{
  if (a12 && a9) {
    WTF::fastFree(a9, a2);
  }
  if (a18 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a20 && a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebCore::AttributedString>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::AttributedString,void>::decode(a1, a2);
  if (!a2[40])
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v6 = *((void *)a1 + 3);
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_19880BD28(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 40)) {
    MEMORY[0x199732DE0](v1);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::AttributedString,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::VectorArgumentCoder<false,std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)(a2 + 1));

  IPC::ArgumentCoder<std::optional<WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,void>::encode<IPC::Encoder,std::optional<WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>> const&>(a1, (uint64_t)(a2 + 3));
}

void IPC::ArgumentCoder<WebCore::AttributedString,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v54);
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(WTF::StringImpl **)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v18 = *((void *)a1 + 3);
    if (v18)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v18 + 16))(v18, v6, v5);
        uint64_t v17 = *(WTF::StringImpl **)a1;
        unint64_t v16 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
      }
    }
    goto LABEL_23;
  }
  int v9 = (unint64_t *)((char *)v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (!v6)
  {
    unint64_t v16 = v5;
    uint64_t v17 = 0;
LABEL_23:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v19 = *((void *)a1 + 3);
    if (v19 && v16) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v19 + 16))(v19, v17);
    }
    LOBYTE(v51) = 0;
    char v53 = 0;
    goto LABEL_43;
  }
  unint64_t v10 = *v9;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  if (v10 >= 0xAAAA)
  {
    do
    {
      IPC::Decoder::decode<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>>((uint64_t)&v45, (uint64_t)a1);
      if (!v47) {
        goto LABEL_42;
      }
      if (HIDWORD(v49) == v49)
      {
        WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>>((uint64_t)&v48, (unint64_t)&v45);
      }
      else
      {
        int v20 = (char *)v48 + 24 * HIDWORD(v49);
        *(_OWORD *)int v20 = v45;
        *((void *)v20 + 2) = 0;
        uint64_t v21 = v46;
        uint64_t v46 = 0;
        *((void *)v20 + 2) = v21;
        ++HIDWORD(v49);
      }
      if (v47 && v46) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v46, v4);
      }
      --v10;
    }
    while (v10);
    unsigned int v22 = HIDWORD(v49);
    char v23 = v48;
    if (v49 > HIDWORD(v49))
    {
      uint64_t v24 = (uint64_t)v48;
      if (HIDWORD(v49))
      {
        CFTypeRef v44 = v48;
        if (HIDWORD(v49) >= 0xAAAAAAB)
        {
          __break(0xC471u);
          goto LABEL_101;
        }
        unsigned int v25 = 24 * HIDWORD(v49);
        uint64_t v26 = WTF::fastMalloc((WTF *)(24 * HIDWORD(v49)));
        LODWORD(v49) = v25 / 0x18;
        uint64_t v48 = (WTF *)v26;
        char v23 = v44;
        uint64_t v24 = (uint64_t)v44;
        if ((WTF *)v26 != v44)
        {
          WTF::VectorMover<false,std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>>::move((uint64_t)v44, (WTF *)((char *)v44 + 24 * v22), v26);
          char v23 = v44;
          uint64_t v24 = (uint64_t)v48;
        }
      }
      if (v23)
      {
        if ((WTF *)v24 == v23)
        {
          uint64_t v48 = 0;
          LODWORD(v49) = 0;
        }
        WTF::fastFree(v23, v4);
        char v23 = v48;
      }
      else
      {
        char v23 = (WTF *)v24;
      }
    }
    uint64_t v51 = (uint64_t)v23;
    uint64_t v43 = v49;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v52 = v43;
    goto LABEL_21;
  }
  if (!v10)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
LABEL_20:
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v51 = v13;
    uint64_t v52 = v14;
LABEL_21:
    char v53 = 1;
    WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v4);
    goto LABEL_44;
  }
  LODWORD(v49) = 24 * (int)v10 / 0x18u;
  uint64_t v48 = (WTF *)WTF::fastMalloc((WTF *)(24 * v10));
  while (1)
  {
    IPC::Decoder::decode<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>>((uint64_t)&v45, (uint64_t)a1);
    if (!v47) {
      break;
    }
    if (HIDWORD(v49) == v49)
    {
      WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>>((uint64_t)&v48, (unint64_t)&v45);
    }
    else
    {
      unsigned int v11 = (char *)v48 + 24 * HIDWORD(v49);
      *(_OWORD *)unsigned int v11 = v45;
      *((void *)v11 + 2) = 0;
      uint64_t v12 = v46;
      uint64_t v46 = 0;
      *((void *)v11 + 2) = v12;
      ++HIDWORD(v49);
    }
    if (v47 && v46) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v46, v4);
    }
    if (!--v10)
    {
      uint64_t v13 = (uint64_t)v48;
      uint64_t v14 = v49;
      goto LABEL_20;
    }
  }
LABEL_42:
  LOBYTE(v51) = 0;
  char v53 = 0;
  WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v4);
LABEL_43:
  unint64_t v15 = *(WTF::StringImpl **)a1;
  uint64_t v27 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v28 = *((void *)a1 + 3);
  if (v28 && v27) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v28 + 16))(v28, v15);
  }
LABEL_44:
  if (!*(void *)a1) {
    goto LABEL_54;
  }
  if (!v55 || !v53) {
    goto LABEL_101;
  }
  if ((WebCore::AttributedString::rangesAreSafe() & 1) == 0)
  {
LABEL_54:
    *a2 = 0;
    a2[40] = 0;
    goto LABEL_71;
  }
  unint64_t v29 = *((void *)a1 + 1);
  unint64_t v15 = *(WTF::StringImpl **)a1;
  unint64_t v30 = *((void *)a1 + 2) - *(void *)a1;
  if (v29 <= v30)
  {
    unint64_t v35 = 0;
    int v36 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v37 = *((void *)a1 + 3);
    if (v37)
    {
      if (v29)
      {
        (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
        int v36 = *(WTF::StringImpl **)a1;
        unint64_t v35 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v35 = 0;
        int v36 = 0;
      }
    }
    goto LABEL_59;
  }
  char v31 = (unsigned __int8 *)v15 + v30;
  *((void *)a1 + 2) = v31 + 1;
  if (!v15)
  {
    unint64_t v35 = v29;
    int v36 = 0;
LABEL_59:
    unint64_t v29 = 0;
    unint64_t v15 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v38 = *((void *)a1 + 3);
    if (v38)
    {
      if (v35)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v38 + 16))(v38, v36, v35);
        unint64_t v15 = *(WTF::StringImpl **)a1;
        unint64_t v29 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v29 = 0;
        unint64_t v15 = 0;
      }
    }
    goto LABEL_60;
  }
  unsigned int v32 = *v31;
  if (v32 >= 2)
  {
LABEL_60:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v39 = *((void *)a1 + 3);
    if (v39 && v29) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v39 + 16))(v39, v15);
    }
    goto LABEL_61;
  }
  if (!v32)
  {
    int v33 = 0;
    LOBYTE(v48) = 0;
    LOBYTE(v49) = 0;
    int v34 = 1;
    char v50 = 1;
    goto LABEL_63;
  }
  IPC::Decoder::decode<WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>(&v45, (const void ***)a1);
  if (BYTE8(v45))
  {
    int v33 = 0;
    uint64_t v48 = (WTF *)v45;
    unsigned int v32 = 1;
    LOBYTE(v49) = 1;
    char v50 = 1;
    int v34 = 1;
    goto LABEL_63;
  }
LABEL_61:
  LOBYTE(v48) = 0;
  char v50 = 0;
  unint64_t v15 = *(WTF::StringImpl **)a1;
  uint64_t v40 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v41 = *((void *)a1 + 3);
  if (v41 && v40) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v41 + 16))(v41, v15);
  }
  unsigned int v32 = 0;
  int v34 = 0;
  int v33 = 1;
LABEL_63:
  if (!*(void *)a1)
  {
    *a2 = 0;
    a2[40] = 0;
    if (v34) {
      goto LABEL_68;
    }
    goto LABEL_71;
  }
  if (!v55 || !v53 || v33)
  {
LABEL_101:
    __break(1u);
    return;
  }
  WebCore::AttributedString::AttributedString();
  WebCore::AttributedString::AttributedString();
  a2[40] = 1;
  MEMORY[0x199732DE0](&v45);
  unsigned int v32 = v49;
  if (v50)
  {
LABEL_68:
    if (v32 && v48) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v48, v15);
    }
  }
LABEL_71:
  if (v53) {
    WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v15);
  }
  if (v55)
  {
    int v42 = v54;
    unint64_t v54 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, v15);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
  }
}

void sub_19880C3C8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  if (*(unsigned char *)(v26 - 40))
  {
    uint64_t v28 = *(WTF::StringImpl **)(v26 - 48);
    *(void *)(v26 - 48) = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, a2);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebCore::MediaRecorderPrivateOptions,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, (uint64_t)(a2 + 1));
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, (uint64_t)(a2 + 2));

  return IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(a1, (uint64_t)(a2 + 3));
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::MediaRecorderPrivateOptions,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v13);
  uint64_t v4 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  char v6 = v5;
  uint64_t v7 = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  char v9 = v8;
  unint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  if (*(void *)a1)
  {
    if (v14)
    {
      uint64_t v12 = v13;
      uint64_t v13 = 0;
      if (v6)
      {
        if (v9 && (_BYTE)v11)
        {
          *(void *)a2 = v12;
          *(void *)(a2 + 8) = v4 & 0xFFFFFFFFFFLL;
          *(_DWORD *)(a2 + 16) = v7;
          *(unsigned char *)(a2 + 20) = BYTE4(v7);
          *(_DWORD *)(a2 + 24) = result;
          *(unsigned char *)(a2 + 28) = BYTE4(result);
          *(unsigned char *)(a2 + 32) = 1;
          return result;
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  if (v14)
  {
    unint64_t result = v13;
    uint64_t v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_19880C5DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::PaymentSessionError,void>::encode(IPC::Encoder *a1, WebCore::PaymentSessionError *this)
{
  WebCore::PaymentSessionError::platformError((uint64_t *)&cf, this);
  IPC::encodeObjectDirectly<NSError>(a1, (NSError *)cf);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_19880C670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::PaymentSessionError,void>::decode(const void ***a1@<X0>, uint64_t a2@<X8>)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v4 = (const void *)objc_opt_class();
  cf[0] = v4;
  if (v4) {
    CFRetain(v4);
  }
  WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v8, cf, 1);
  WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=(a1 + 7, &v8);
  IPC::decodeRequiringAllowedClasses<NSError,NSError*>((uint64_t)&v9, (IPC::Decoder *)a1);
  char v6 = v8;
  if (v8) {
    goto LABEL_15;
  }
  while (1)
  {
    char v6 = cf[0];
    cf[0] = 0;
    if (v6) {
      CFRelease(v6);
    }
    if (!*a1) {
      break;
    }
    if (v10)
    {
      WebCore::PaymentSessionError::PaymentSessionError();
      *(void *)a2 = v8;
      *(unsigned char *)(a2 + 8) = 1;
      goto LABEL_9;
    }
    __break(1u);
LABEL_15:
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable((const void **)v6, v5);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
LABEL_9:
  if (v10)
  {
    CFTypeRef v7 = v9;
    CFTypeRef v9 = 0;
    if (v7) {
      CFRelease(v7);
    }
  }
}

void sub_19880C7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, char a12, uint64_t a13)
{
  if (a12)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::ApplePaySessionPaymentRequest::MerchantCapabilities,void>::encode(IPC::Encoder *a1, char *a2)
{
  IPC::Encoder::operator<<<BOOL>(a1, a2);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 1);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 2);
  IPC::Encoder::operator<<<BOOL>(a1, a2 + 3);

  return IPC::Encoder::operator<<<BOOL>(a1, a2 + 4);
}

_DWORD *IPC::ArgumentCoder<WebCore::ApplePaySessionPaymentRequest,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WebCore::ApplePaySessionPaymentRequest::MerchantCapabilities,void>::encode(a1, (char *)(a2 + 24));
  IPC::ArgumentCoder<WebCore::PaymentContact,void>::encode(a1, (WebCore::PaymentContact *)(a2 + 32));
  IPC::ArgumentCoder<WebCore::ApplePaySessionPaymentRequest::MerchantCapabilities,void>::encode(a1, (char *)(a2 + 48));
  IPC::ArgumentCoder<WebCore::PaymentContact,void>::encode(a1, (WebCore::PaymentContact *)(a2 + 56));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 72);
  IPC::ArgumentCoder<WebCore::ApplePaySessionPaymentRequest::MerchantCapabilities,void>::encode(a1, (char *)(a2 + 88));
  char v7 = *(unsigned char *)(a2 + 93);
  IPC::Encoder::operator<<<BOOL>(a1, &v7);
  IPC::VectorArgumentCoder<false,WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 96);
  IPC::VectorArgumentCoder<false,WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2 + 112);
  IPC::ArgumentCoder<WebCore::ApplePayLineItem,void>::encode(a1, a2 + 128);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 208));
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2 + 216);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 232));
  uint64_t v4 = (char *)WebCore::PaymentInstallmentConfiguration::applePayInstallmentConfiguration((WebCore::PaymentInstallmentConfiguration *)(a2 + 240));
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayInstallmentConfiguration>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayInstallmentConfiguration> const&>(a1, v4);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayShippingContactEditingMode>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayShippingContactEditingMode> const&>(a1, a2 + 344);
  *(_WORD *)char v6 = *(_WORD *)(a2 + 346);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(a1, v6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 352));
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayRecurringPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayRecurringPaymentRequest> const&>(a1, a2 + 360);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest> const&>(a1, a2 + 568);
  IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2 + 688);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayDeferredPaymentRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayDeferredPaymentRequest> const&>(a1, a2 + 712);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayDisbursementRequest>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayDisbursementRequest> const&>(a1, a2 + 848);
  IPC::ArgumentCoder<std::optional<WebCore::ApplePayShippingContactEditingMode>,void>::encode<IPC::Encoder,std::optional<WebCore::ApplePayShippingContactEditingMode> const&>(a1, a2 + 880);
  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 888));
}

void IPC::ArgumentCoder<WebCore::ApplePaySessionPaymentRequest,void>::decode(IPC::Decoder *a1@<X0>, WebCore::ApplePaySessionPaymentRequest *a2@<X8>)
{
  unint64_t v2 = a1;
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v417);
  IPC::Decoder::decode<WTF::String>(v2, (uint64_t)&v415);
  CFTypeRef v284 = IPC::Decoder::decode<WebCore::ApplePaySessionPaymentRequestContactFields>(v2);
  IPC::Decoder::decode<WebCore::PaymentContact>((uint64_t *)v2, (uint64_t)v412);
  char v283 = IPC::Decoder::decode<WebCore::ApplePaySessionPaymentRequestContactFields>(v2);
  IPC::Decoder::decode<WebCore::PaymentContact>((uint64_t *)v2, (uint64_t)v409);
  uint64_t v5 = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v2, v4, (uint64_t)&v406);
  unint64_t v6 = *((void *)v2 + 1);
  char v7 = *(unsigned __int8 **)v2;
  unint64_t v8 = *((void *)v2 + 2) - *(void *)v2;
  CFTypeRef v278 = a2;
  if (v6 <= v8)
  {
    unint64_t v81 = 0;
    unint64_t v82 = 0;
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v83 = *((void *)v2 + 3);
    if (v83)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v83 + 16))(v83);
        unint64_t v82 = *(void *)v2;
        unint64_t v81 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v81 = 0;
        unint64_t v82 = 0;
      }
    }
    goto LABEL_98;
  }
  CFTypeRef v9 = &v7[v8];
  uint64_t v10 = (uint64_t)&v7[v8 + 1];
  *((void *)v2 + 2) = v10;
  if (!v7)
  {
    unint64_t v81 = v6;
    unint64_t v82 = 0;
LABEL_98:
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v84 = *((void *)v2 + 3);
    if (v84 && v81)
    {
      (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v84 + 16))(v84, v82, v81);
      unsigned int v11 = 0;
      char v7 = *(unsigned __int8 **)v2;
      unint64_t v6 = *((void *)v2 + 1);
    }
    else
    {
      unint64_t v6 = 0;
      char v7 = 0;
      unsigned int v11 = 0;
    }
    goto LABEL_100;
  }
  unsigned int v11 = *v9;
  if (v11 < 2)
  {
    int v12 = 0;
    int v13 = 1;
    goto LABEL_5;
  }
LABEL_100:
  *(void *)unint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v85 = *((void *)v2 + 3);
  if (!v85 || !v6)
  {
    unsigned int v14 = 0;
    unint64_t v86 = 0;
    char v7 = 0;
    int v12 = 1;
    goto LABEL_102;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v85 + 16))(v85, v7);
  int v13 = 0;
  char v7 = *(unsigned __int8 **)v2;
  unint64_t v6 = *((void *)v2 + 1);
  int v12 = 1;
  uint64_t v10 = *((void *)v2 + 2);
LABEL_5:
  if (v11) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = 0;
  }
  unint64_t v15 = v10 - (void)v7;
  if (v6 <= v15)
  {
    int v235 = v12;
    unsigned int v236 = v14;
    unint64_t v86 = 0;
    uint64_t v237 = *((void *)v2 + 3);
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    if (v6 && v237)
    {
      (*(void (**)(uint64_t))(*(void *)v237 + 16))(v237);
      char v7 = *(unsigned __int8 **)v2;
      unint64_t v86 = *((void *)v2 + 1);
    }
    else
    {
      char v7 = 0;
    }
    unsigned int v14 = v236;
    int v12 = v235;
    goto LABEL_102;
  }
  unint64_t v16 = &v7[v15];
  uint64_t v17 = (uint64_t)&v7[v15 + 1];
  *((void *)v2 + 2) = v17;
  if (!v7)
  {
    unint64_t v86 = v6;
LABEL_102:
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v87 = *((void *)v2 + 3);
    if (v87)
    {
      int v256 = v12;
      unsigned int v257 = v14;
      if (v86)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, unint64_t))(*(void *)v87 + 16))(v87, v7, v86);
        uint64_t v18 = 0;
        char v7 = *(unsigned __int8 **)v2;
        unint64_t v6 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        char v7 = 0;
        uint64_t v18 = 0;
      }
      unsigned int v14 = v257;
      int v12 = v256;
    }
    else
    {
      unint64_t v6 = 0;
      char v7 = 0;
      uint64_t v18 = 0;
    }
    goto LABEL_104;
  }
  uint64_t v18 = *v16;
  if (v18 < 2)
  {
    uint64_t v19 = 0;
    char v20 = 1;
    goto LABEL_12;
  }
LABEL_104:
  *(void *)unint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v88 = *((void *)v2 + 3);
  if (!v88)
  {
    char v20 = 0;
    unint64_t v89 = 0;
    char v7 = 0;
    uint64_t v19 = 1;
    goto LABEL_106;
  }
  int v254 = v12;
  unsigned int v255 = v14;
  if (!v6)
  {
    char v20 = 0;
    unint64_t v89 = 0;
    char v7 = 0;
    uint64_t v19 = 1;
LABEL_106:
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v90 = *((void *)v2 + 3);
    if (v90)
    {
      char v251 = v20;
      int v252 = v12;
      unsigned int v253 = v14;
      if (v89)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, unint64_t))(*(void *)v90 + 16))(v90, v7, v89);
        uint64_t v24 = 0;
        char v7 = *(unsigned __int8 **)v2;
        unint64_t v6 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        char v7 = 0;
        uint64_t v24 = 0;
      }
      unsigned int v14 = v253;
      int v12 = v252;
      char v20 = v251;
    }
    else
    {
      unint64_t v6 = 0;
      char v7 = 0;
      uint64_t v24 = 0;
    }
    goto LABEL_108;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v88 + 16))(v88, v7);
  char v20 = 0;
  char v7 = *(unsigned __int8 **)v2;
  unint64_t v6 = *((void *)v2 + 1);
  uint64_t v19 = 1;
  uint64_t v17 = *((void *)v2 + 2);
  unsigned int v14 = v255;
  int v12 = v254;
LABEL_12:
  unint64_t v21 = v17 - (void)v7;
  if (v6 <= v21)
  {
    char v238 = v20;
    int v239 = v12;
    unsigned int v240 = v14;
    unint64_t v89 = 0;
    uint64_t v241 = *((void *)v2 + 3);
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    if (v6 && v241)
    {
      (*(void (**)(uint64_t))(*(void *)v241 + 16))(v241);
      char v7 = *(unsigned __int8 **)v2;
      unint64_t v89 = *((void *)v2 + 1);
    }
    else
    {
      char v7 = 0;
    }
    unsigned int v14 = v240;
    int v12 = v239;
    char v20 = v238;
    goto LABEL_106;
  }
  unsigned int v22 = &v7[v21];
  uint64_t v23 = (uint64_t)&v7[v21 + 1];
  *((void *)v2 + 2) = v23;
  if (!v7)
  {
    unint64_t v89 = v6;
    goto LABEL_106;
  }
  uint64_t v24 = *v22;
  if (v24 < 2)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 1;
    goto LABEL_16;
  }
LABEL_108:
  *(void *)unint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v91 = *((void *)v2 + 3);
  if (!v91)
  {
    uint64_t v26 = 0;
    unint64_t v92 = 0;
    char v7 = 0;
    uint64_t v25 = 1;
    goto LABEL_110;
  }
  char v242 = v20;
  int v243 = v12;
  unsigned int v244 = v14;
  if (!v6)
  {
    uint64_t v26 = 0;
    unint64_t v92 = 0;
    char v7 = 0;
    uint64_t v25 = 1;
LABEL_413:
    unsigned int v14 = v244;
    int v12 = v243;
    char v20 = v242;
    goto LABEL_110;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v91 + 16))(v91, v7);
  uint64_t v26 = 0;
  char v7 = *(unsigned __int8 **)v2;
  unint64_t v6 = *((void *)v2 + 1);
  uint64_t v25 = 1;
  uint64_t v23 = *((void *)v2 + 2);
  unsigned int v14 = v244;
  int v12 = v243;
  char v20 = v242;
LABEL_16:
  unint64_t v27 = v23 - (void)v7;
  if (v6 <= v27)
  {
    char v242 = v20;
    int v243 = v12;
    unsigned int v244 = v14;
    unint64_t v92 = 0;
    uint64_t v245 = *((void *)v2 + 3);
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    if (v6 && v245)
    {
      (*(void (**)(uint64_t))(*(void *)v245 + 16))(v245);
      char v7 = *(unsigned __int8 **)v2;
      unint64_t v92 = *((void *)v2 + 1);
    }
    else
    {
      char v7 = 0;
    }
    goto LABEL_413;
  }
  uint64_t v28 = &v7[v27];
  uint64_t v29 = (uint64_t)&v7[v27 + 1];
  *((void *)v2 + 2) = v29;
  if (!v7)
  {
    unint64_t v92 = v6;
LABEL_110:
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v93 = *((void *)v2 + 3);
    if (v93)
    {
      char v248 = v20;
      int v249 = v12;
      unsigned int v250 = v14;
      if (v92)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, unint64_t))(*(void *)v93 + 16))(v93, v7, v92);
        LODWORD(v30) = 0;
        char v7 = *(unsigned __int8 **)v2;
        unint64_t v6 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        char v7 = 0;
        LODWORD(v30) = 0;
      }
      unsigned int v14 = v250;
      int v12 = v249;
      char v20 = v248;
    }
    else
    {
      unint64_t v6 = 0;
      char v7 = 0;
      LODWORD(v30) = 0;
    }
    goto LABEL_112;
  }
  LODWORD(v30) = *v28;
  if (v30 < 2)
  {
    LODWORD(v31) = 0;
    unsigned int v32 = 1;
    goto LABEL_20;
  }
LABEL_112:
  *(void *)unint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v94 = *((void *)v2 + 3);
  if (!v94)
  {
    unsigned int v32 = 0;
    unint64_t v95 = 0;
    char v7 = 0;
    LODWORD(v31) = 1;
    goto LABEL_114;
  }
  unsigned int v281 = v12;
  BOOL v282 = v20;
  unsigned int v246 = v14;
  if (!v6)
  {
    unsigned int v32 = 0;
    unint64_t v95 = 0;
    char v7 = 0;
    LODWORD(v31) = 1;
LABEL_417:
    unsigned int v14 = v246;
    int v12 = v281;
    char v20 = v282;
    goto LABEL_114;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v94 + 16))(v94, v7);
  unsigned int v32 = 0;
  char v7 = *(unsigned __int8 **)v2;
  unint64_t v6 = *((void *)v2 + 1);
  LODWORD(v31) = 1;
  uint64_t v29 = *((void *)v2 + 2);
  unsigned int v14 = v246;
  int v12 = v281;
  char v20 = v282;
LABEL_20:
  unint64_t v33 = v29 - (void)v7;
  if (v6 <= v33)
  {
    unsigned int v281 = v12;
    BOOL v282 = v20;
    unsigned int v246 = v14;
    unint64_t v95 = 0;
    uint64_t v247 = *((void *)v2 + 3);
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    if (v6 && v247)
    {
      (*(void (**)(uint64_t))(*(void *)v247 + 16))(v247);
      char v7 = *(unsigned __int8 **)v2;
      unint64_t v95 = *((void *)v2 + 1);
    }
    else
    {
      char v7 = 0;
    }
    goto LABEL_417;
  }
  unint64_t v34 = (unint64_t)&v7[v33];
  uint64_t v35 = v34 + 1;
  *((void *)v2 + 2) = v34 + 1;
  if (!v7)
  {
    unint64_t v95 = v6;
LABEL_114:
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v96 = *((void *)v2 + 3);
    if (v96)
    {
      unsigned int v281 = v12;
      BOOL v282 = v20;
      unsigned int v280 = v14;
      if (v95)
      {
        (*(void (**)(uint64_t, unsigned __int8 *, unint64_t))(*(void *)v96 + 16))(v96, v7, v95);
        int v36 = 0;
        char v7 = *(unsigned __int8 **)v2;
        unint64_t v6 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        char v7 = 0;
        int v36 = 0;
      }
      unsigned int v14 = v280;
      int v12 = v281;
      char v20 = v282;
    }
    else
    {
      unint64_t v6 = 0;
      char v7 = 0;
      int v36 = 0;
    }
LABEL_116:
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v97 = *((void *)v2 + 3);
    if (!v97)
    {
      char v7 = 0;
      unint64_t v34 = 0;
      LOBYTE(v35) = 0;
      unsigned int v14 = 0;
      int v38 = 0;
      LODWORD(v31) = 1;
      goto LABEL_29;
    }
    unsigned int v281 = v12;
    BOOL v282 = v20;
    unsigned int v279 = v14;
    if (v6)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v97 + 16))(v97, v7);
      unint64_t v34 = *(void *)v2;
      if (*(void *)v2)
      {
        unsigned int v14 = v279;
        uint64_t v35 = v281;
        char v20 = v282;
        if (v281 || (v37 = 1, char v7 = *(unsigned __int8 **)v2, v19))
        {
LABEL_500:
          while (1)
          {
            __break(1u);
LABEL_501:
            if (v34)
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v5 + 16))(v5, v35, v34);
              uint64_t v145 = *(WTF::StringImpl **)v2;
              unsigned int v144 = (unsigned __int8 *)*((void *)v2 + 1);
            }
            else
            {
              unsigned int v144 = 0;
              uint64_t v145 = 0;
            }
LABEL_380:
            *(void *)unint64_t v2 = 0;
            *((void *)v2 + 1) = 0;
            uint64_t v213 = *((void *)v2 + 3);
            if (!v213) {
              break;
            }
            if (!v144) {
              break;
            }
            uint64_t v5 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v213 + 16))(v213, v145);
            if (!*(void *)v2) {
              break;
            }
            LOBYTE(v30) = 0;
            unint64_t v34 = 0;
            if (!v19) {
              goto LABEL_191;
            }
          }
          BOOL v282 = 0;
          LOBYTE(v364) = 0;
          char v373 = 0;
          int v272 = 1;
          goto LABEL_202;
        }
        goto LABEL_25;
      }
      char v7 = 0;
    }
    else
    {
      char v7 = 0;
      unint64_t v34 = 0;
    }
    LOBYTE(v35) = 0;
    unsigned int v14 = 0;
    int v38 = 0;
    LODWORD(v31) = 1;
    char v20 = v282;
    goto LABEL_29;
  }
  int v36 = (WTF::StringImpl *)*(unsigned __int8 *)v34;
  if (v36 > 1) {
    goto LABEL_116;
  }
  if (v12) {
    goto LABEL_500;
  }
  int v37 = 0;
  uint64_t v35 = 1;
  if (v19) {
    goto LABEL_500;
  }
LABEL_25:
  if (v25 || v31 || v37) {
    goto LABEL_500;
  }
  LODWORD(v31) = 0;
  int v38 = 1;
  unint64_t v34 = (unint64_t)v7;
LABEL_29:
  BOOL v39 = (v35 & (v36 != 0)) == 0;
  uint64_t v40 = 0x100000000;
  if (v39) {
    uint64_t v40 = 0;
  }
  unint64_t v41 = v40 & 0xFFFFFEFFFFFFFFFFLL | ((unint64_t)(v38 & 1) << 40);
  uint64_t v42 = 0x1000000;
  if ((v32 & (v30 != 0)) == 0) {
    uint64_t v42 = 0;
  }
  uint64_t v43 = 0x10000;
  if ((v26 & (v24 != 0)) == 0) {
    uint64_t v43 = 0;
  }
  unint64_t v44 = v41 | v43 | v42;
  uint64_t v45 = 256;
  if ((v20 & (v18 != 0)) == 0) {
    uint64_t v45 = 0;
  }
  uint64_t v25 = v44 | v45 | v14;
  unint64_t v46 = *((void *)v2 + 1);
  if ((*(void *)&v38 & 0xFFFFFFLL) == 0)
  {
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v98 = *((void *)v2 + 3);
    if (!v98 || !v46)
    {
      char v7 = 0;
      unint64_t v46 = 0;
LABEL_120:
      *(void *)unint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v99 = *((void *)v2 + 3);
      if (v99)
      {
        if (v46)
        {
          (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v99 + 16))(v99, v7);
          unint64_t v100 = *(void *)v2;
          unint64_t v46 = *((void *)v2 + 1);
        }
        else
        {
          unint64_t v100 = 0;
        }
      }
      else
      {
        unint64_t v100 = 0;
        unint64_t v46 = 0;
      }
      goto LABEL_122;
    }
    (*(void (**)(uint64_t, unint64_t))(*(void *)v98 + 16))(v98, v34);
    char v7 = *(unsigned __int8 **)v2;
    unint64_t v46 = *((void *)v2 + 1);
  }
  if (v46 <= *((void *)v2 + 2) - (void)v7) {
    goto LABEL_120;
  }
  char v47 = (unsigned __int8 *)*((void *)v2 + 2);
  *((void *)v2 + 2) = v47 + 1;
  if (!v7)
  {
    unint64_t v100 = 0;
LABEL_122:
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v101 = *((void *)v2 + 3);
    if (v101)
    {
      if (v46)
      {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v101 + 16))(v101, v100);
        char v7 = *(unsigned __int8 **)v2;
        unint64_t v46 = *((void *)v2 + 1);
      }
      else
      {
        char v7 = 0;
      }
    }
    else
    {
      char v7 = 0;
      unint64_t v46 = 0;
    }
    goto LABEL_124;
  }
  int v36 = (WTF::StringImpl *)*v47;
  if (v36 < 4)
  {
    uint64_t v26 = 0;
    goto LABEL_43;
  }
LABEL_124:
  *(void *)unint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v102 = *((void *)v2 + 3);
  if (v102 && v46) {
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v102 + 16))(v102, v7);
  }
  int v36 = 0;
  uint64_t v26 = 1;
LABEL_43:
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v403, v2);
  IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v400, (uint64_t)v2);
  IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v392, (WTF::StringImpl **)v2);
  IPC::Decoder::decode<WTF::String>(v2, (uint64_t)&v390);
  uint64_t v5 = IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v2, v48, (uint64_t)&v387);
  unint64_t v49 = *((void *)v2 + 1);
  unint64_t v50 = *(void *)v2;
  unint64_t v51 = *((void *)v2 + 2) - *(void *)v2;
  if (v49 <= v51)
  {
    unint64_t v103 = 0;
    uint64_t v35 = 0;
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v104 = *((void *)v2 + 3);
    if (v104)
    {
      if (v49)
      {
        (*(void (**)(uint64_t))(*(void *)v104 + 16))(v104);
        uint64_t v35 = *(void *)v2;
        unint64_t v103 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v103 = 0;
        uint64_t v35 = 0;
      }
    }
    goto LABEL_127;
  }
  uint64_t v52 = (unsigned __int8 *)(v50 + v51);
  uint64_t v35 = (uint64_t)(v52 + 1);
  *((void *)v2 + 2) = v52 + 1;
  if (!v50)
  {
    unint64_t v103 = v49;
    uint64_t v35 = 0;
LABEL_127:
    unint64_t v49 = 0;
    unint64_t v50 = 0;
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v105 = *((void *)v2 + 3);
    if (v105)
    {
      if (v103)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v105 + 16))(v105, v35, v103);
        unint64_t v50 = *(void *)v2;
        unint64_t v49 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v49 = 0;
        unint64_t v50 = 0;
      }
    }
    goto LABEL_128;
  }
  unsigned int v53 = *v52;
  if (v53 < 2)
  {
    unsigned int v279 = 0;
    BOOL v277 = v53 != 0;
    goto LABEL_47;
  }
LABEL_128:
  uint64_t v106 = 0;
  *(void *)unint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v107 = *((void *)v2 + 3);
  if (v107)
  {
    if (v49)
    {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v107 + 16))(v107, v50);
      uint64_t v106 = *((void *)v2 + 1);
    }
    else
    {
      uint64_t v106 = 0;
    }
  }
  unint64_t v108 = *(void *)v2;
  *(void *)unint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v109 = *((void *)v2 + 3);
  if (!v109 || !v106)
  {
    BOOL v277 = 0;
    unint64_t v49 = 0;
    unint64_t v54 = *(WTF::StringImpl **)v2;
    unsigned int v279 = 1;
LABEL_131:
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v110 = *((void *)v2 + 3);
    if (v110)
    {
      if (v49)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v110 + 16))(v110, v54);
        unint64_t v111 = *(void *)v2;
        unint64_t v49 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v111 = 0;
      }
    }
    else
    {
      unint64_t v111 = 0;
      unint64_t v49 = 0;
    }
    goto LABEL_133;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v109 + 16))(v109, v108, v106);
  BOOL v277 = 0;
  unint64_t v49 = *((void *)v2 + 1);
  unsigned int v279 = 1;
LABEL_47:
  unint64_t v54 = *(WTF::StringImpl **)v2;
  unint64_t v55 = *((void *)v2 + 2) - *(void *)v2;
  if (v49 <= v55) {
    goto LABEL_131;
  }
  uint64_t v56 = (unsigned __int8 *)v54 + v55;
  uint64_t v35 = (uint64_t)(v56 + 1);
  *((void *)v2 + 2) = v56 + 1;
  if (!v54)
  {
    unint64_t v111 = 0;
LABEL_133:
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v112 = *((void *)v2 + 3);
    if (v112)
    {
      if (v49)
      {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v112 + 16))(v112, v111);
        unint64_t v54 = *(WTF::StringImpl **)v2;
        unint64_t v49 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v54 = 0;
      }
    }
    else
    {
      unint64_t v54 = 0;
      unint64_t v49 = 0;
    }
LABEL_135:
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v113 = *((void *)v2 + 3);
    if (v113 && v49) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v113 + 16))(v113, v54);
    }
    goto LABEL_393;
  }
  if (*v56 >= 2u) {
    goto LABEL_135;
  }
  if (!*v56)
  {
    LOBYTE(v285) = 0;
    LOBYTE(v299) = 0;
    LOBYTE(v300) = 1;
    goto LABEL_241;
  }
  if (v49 <= v35 - (uint64_t)v54)
  {
    unint64_t v114 = 0;
    CFTypeRef v115 = 0;
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v116 = *((void *)v2 + 3);
    if (v116)
    {
      (*(void (**)(uint64_t))(*(void *)v116 + 16))(v116);
      unint64_t v114 = 0;
      unint64_t v261 = *(void *)v2;
      uint64_t v262 = *((void *)v2 + 1);
      uint64_t v263 = *((void *)v2 + 3);
      *(void *)unint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      CFTypeRef v115 = 0;
      if (v263)
      {
        if (v262)
        {
          (*(void (**)(uint64_t, unint64_t))(*(void *)v263 + 16))(v263, v261);
          CFTypeRef v115 = *(WTF::StringImpl **)v2;
          unint64_t v114 = *((void *)v2 + 1);
        }
      }
    }
  }
  else
  {
    *((void *)v2 + 2) = v56 + 2;
    unsigned int v57 = v56[1];
    if (v57 < 2)
    {
      uint64_t v19 = 0;
      BOOL v282 = v57 != 0;
      goto LABEL_54;
    }
    unint64_t v114 = v49;
    CFTypeRef v115 = v54;
  }
  *(void *)unint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v117 = *((void *)v2 + 3);
  if (v117 && v114)
  {
    (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v117 + 16))(v117, v115, v114);
    BOOL v282 = 0;
    uint64_t v258 = *((void *)v2 + 3);
    unint64_t v259 = *(void *)v2;
    uint64_t v260 = *((void *)v2 + 1);
    uint64_t v19 = 1;
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    if (v258 && v260)
    {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v258 + 16))(v258, v259);
      BOOL v282 = 0;
    }
  }
  else
  {
    BOOL v282 = 0;
    uint64_t v19 = 1;
  }
LABEL_54:
  IPC::Decoder::decode<WTF::String>(v2, (uint64_t)&v355);
  IPC::Decoder::decode<WTF::String>(v2, (uint64_t)&v427);
  IPC::Decoder::decode<WTF::String>(v2, (uint64_t)&v425);
  IPC::Decoder::decode<WTF::String>(v2, (uint64_t)&v423);
  unint64_t v58 = *((void *)v2 + 1);
  unint64_t v59 = *(void *)v2;
  unint64_t v60 = *((void *)v2 + 2) - *(void *)v2;
  if (v58 <= v60)
  {
    unint64_t v118 = 0;
    unint64_t v119 = 0;
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v120 = *((void *)v2 + 3);
    if (v120)
    {
      if (v58)
      {
        (*(void (**)(uint64_t))(*(void *)v120 + 16))(v120);
        unint64_t v119 = *(void *)v2;
        unint64_t v118 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v118 = 0;
        unint64_t v119 = 0;
      }
    }
    goto LABEL_142;
  }
  int v61 = (unsigned __int8 *)(v59 + v60);
  *((void *)v2 + 2) = v61 + 1;
  if (!v59)
  {
    unint64_t v118 = v58;
    unint64_t v119 = 0;
LABEL_142:
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v121 = *((void *)v2 + 3);
    if (v121 && v118)
    {
      (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v121 + 16))(v121, v119, v118);
      unsigned int v32 = 0;
      unint64_t v59 = *(void *)v2;
      unint64_t v58 = *((void *)v2 + 1);
    }
    else
    {
      unint64_t v58 = 0;
      unint64_t v59 = 0;
      unsigned int v32 = 0;
    }
    goto LABEL_144;
  }
  unsigned int v32 = *v61;
  if (v32 < 2)
  {
    uint64_t v24 = 0;
    char v62 = 1;
    goto LABEL_58;
  }
LABEL_144:
  *(void *)unint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v122 = *((void *)v2 + 3);
  if (v122 && v58) {
    (*(void (**)(uint64_t, unint64_t))(*(void *)v122 + 16))(v122, v59);
  }
  char v62 = 0;
  uint64_t v24 = 1;
LABEL_58:
  if (!v32) {
    char v62 = 0;
  }
  LOBYTE(v281) = v62;
  IPC::Decoder::decode<WTF::String>(v2, (uint64_t)&v421);
  IPC::Decoder::decode<WTF::String>(v2, (uint64_t)&v419);
  unint64_t v63 = *((void *)v2 + 1);
  int v64 = *(WTF::StringImpl **)v2;
  unint64_t v65 = ((*((void *)v2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v2;
  if (v63 < v65 || v63 - v65 <= 7)
  {
    unint64_t v123 = 0;
    unint64_t v124 = 0;
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v125 = *((void *)v2 + 3);
    if (v125)
    {
      if (v63)
      {
        (*(void (**)(uint64_t))(*(void *)v125 + 16))(v125);
        unint64_t v124 = *(void *)v2;
        unint64_t v123 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v123 = 0;
        unint64_t v124 = 0;
      }
    }
LABEL_147:
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v126 = *((void *)v2 + 3);
    if (v126 && v123) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v126 + 16))(v126, v124);
    }
    LOBYTE(v359) = 0;
    unsigned __int8 v361 = 0;
LABEL_186:
    unint64_t v141 = *(void *)v2;
    uint64_t v142 = *((void *)v2 + 1);
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v143 = *((void *)v2 + 3);
    if (v143 && v142) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v143 + 16))(v143, v141);
    }
    goto LABEL_187;
  }
  int v66 = (unint64_t *)((char *)v64 + v65);
  *((void *)v2 + 2) = v66 + 1;
  if (!v64)
  {
    unint64_t v123 = v63;
    unint64_t v124 = 0;
    goto LABEL_147;
  }
  unint64_t v30 = *v66;
  uint64_t v340 = 0;
  uint64_t v339 = 0;
  if (v30 >= 0x5555)
  {
    unsigned int v32 = 48;
    while (1)
    {
      IPC::Decoder::decode<WebCore::ApplePayInstallmentItem>((uint64_t)v344, v2);
      if (!(_BYTE)v348)
      {
LABEL_185:
        LOBYTE(v359) = 0;
        unsigned __int8 v361 = 0;
        WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v339, v64);
        goto LABEL_186;
      }
      if (HIDWORD(v340) != v340) {
        break;
      }
      WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplePayInstallmentItem>((unsigned int *)&v339, (unint64_t)v344);
      if ((_BYTE)v348) {
        goto LABEL_155;
      }
LABEL_175:
      if (!--v30)
      {
        unsigned int v32 = HIDWORD(v340);
        uint64_t v18 = (uint64_t)v339;
        if (v340 > HIDWORD(v340))
        {
          unint64_t v139 = v339;
          if (HIDWORD(v340))
          {
            if (HIDWORD(v340) >= 0x5555556)
            {
              __break(0xC471u);
              JUMPOUT(0x19880F000);
            }
            LODWORD(v30) = 48 * HIDWORD(v340);
            unint64_t v140 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(48 * HIDWORD(v340)));
            LODWORD(v340) = v30 / 0x30;
            uint64_t v339 = v140;
            unint64_t v139 = (WTF::StringImpl *)v18;
            if (v140 != (WTF::StringImpl *)v18)
            {
              WTF::VectorMover<false,WebCore::ApplePayInstallmentItem>::move((WTF::StringImpl *)v18, (WTF::StringImpl *)(v18 + 48 * v32), (uint64_t)v140);
              unint64_t v139 = v339;
            }
          }
          if (v18)
          {
            if (v139 == (WTF::StringImpl *)v18)
            {
              uint64_t v339 = 0;
              LODWORD(v340) = 0;
            }
            WTF::fastFree((WTF *)v18, v64);
            uint64_t v18 = (uint64_t)v339;
          }
          else
          {
            uint64_t v18 = (uint64_t)v139;
          }
        }
        uint64_t v339 = 0;
        uint64_t v359 = v18;
        uint64_t v234 = v340;
        uint64_t v340 = 0;
        uint64_t v360 = v234;
        goto LABEL_96;
      }
    }
    int v127 = HIDWORD(v340) + 1;
    int v128 = (BOOL *)v339 + 48 * HIDWORD(v340);
    *int v128 = v344[0];
    uint64_t v129 = v345;
    *(void *)&long long v345 = 0;
    *((void *)v128 + 1) = v129;
    uint64_t v130 = *((void *)&v345 + 1);
    *((void *)&v345 + 1) = 0;
    *((void *)v128 + 2) = v130;
    uint64_t v131 = v346;
    *(void *)&long long v346 = 0;
    *((void *)v128 + 3) = v131;
    uint64_t v132 = *((void *)&v346 + 1);
    *((void *)&v346 + 1) = 0;
    *((void *)v128 + 4) = v132;
    uint64_t v133 = v347;
    uint64_t v347 = 0;
    *((void *)v128 + 5) = v133;
    HIDWORD(v340) = v127;
LABEL_155:
    uint64_t v134 = v347;
    uint64_t v347 = 0;
    if (v134)
    {
      if (*(_DWORD *)v134 == 2) {
        WTF::StringImpl::destroy(v134, v64);
      }
      else {
        *(_DWORD *)v134 -= 2;
      }
    }
    unint64_t v135 = (WTF::StringImpl *)*((void *)&v346 + 1);
    *((void *)&v346 + 1) = 0;
    if (v135)
    {
      if (*(_DWORD *)v135 == 2) {
        WTF::StringImpl::destroy(v135, v64);
      }
      else {
        *(_DWORD *)v135 -= 2;
      }
    }
    int v136 = (WTF::StringImpl *)v346;
    *(void *)&long long v346 = 0;
    if (v136)
    {
      if (*(_DWORD *)v136 == 2) {
        WTF::StringImpl::destroy(v136, v64);
      }
      else {
        *(_DWORD *)v136 -= 2;
      }
    }
    uint64_t v137 = (WTF::StringImpl *)*((void *)&v345 + 1);
    *((void *)&v345 + 1) = 0;
    if (v137)
    {
      if (*(_DWORD *)v137 == 2) {
        WTF::StringImpl::destroy(v137, v64);
      }
      else {
        *(_DWORD *)v137 -= 2;
      }
    }
    uint64_t v138 = (WTF::StringImpl *)v345;
    *(void *)&long long v345 = 0;
    if (v138)
    {
      if (*(_DWORD *)v138 == 2) {
        WTF::StringImpl::destroy(v138, v64);
      }
      else {
        *(_DWORD *)v138 -= 2;
      }
    }
    goto LABEL_175;
  }
  if (v30)
  {
    uint64_t v18 = 48 * v30;
    LODWORD(v340) = 48 * (int)v30 / 0x30u;
    uint64_t v339 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(48 * v30));
    unsigned int v32 = 48;
    while (1)
    {
      IPC::Decoder::decode<WebCore::ApplePayInstallmentItem>((uint64_t)v344, v2);
      if (!(_BYTE)v348) {
        goto LABEL_185;
      }
      if (HIDWORD(v340) != v340) {
        break;
      }
      WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplePayInstallmentItem>((unsigned int *)&v339, (unint64_t)v344);
      if ((_BYTE)v348) {
        goto LABEL_71;
      }
LABEL_91:
      if (!--v30)
      {
        unint64_t v79 = v339;
        uint64_t v80 = v340;
        goto LABEL_95;
      }
    }
    int v67 = HIDWORD(v340) + 1;
    int v68 = (BOOL *)v339 + 48 * HIDWORD(v340);
    *int v68 = v344[0];
    uint64_t v69 = v345;
    *(void *)&long long v345 = 0;
    *((void *)v68 + 1) = v69;
    uint64_t v70 = *((void *)&v345 + 1);
    *((void *)&v345 + 1) = 0;
    *((void *)v68 + 2) = v70;
    uint64_t v71 = v346;
    *(void *)&long long v346 = 0;
    *((void *)v68 + 3) = v71;
    uint64_t v72 = *((void *)&v346 + 1);
    *((void *)&v346 + 1) = 0;
    *((void *)v68 + 4) = v72;
    uint64_t v73 = v347;
    uint64_t v347 = 0;
    *((void *)v68 + 5) = v73;
    HIDWORD(v340) = v67;
LABEL_71:
    char v74 = v347;
    uint64_t v347 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2) {
        WTF::StringImpl::destroy(v74, v64);
      }
      else {
        *(_DWORD *)v74 -= 2;
      }
    }
    uint64_t v75 = (WTF::StringImpl *)*((void *)&v346 + 1);
    *((void *)&v346 + 1) = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2) {
        WTF::StringImpl::destroy(v75, v64);
      }
      else {
        *(_DWORD *)v75 -= 2;
      }
    }
    uint64_t v76 = (WTF::StringImpl *)v346;
    *(void *)&long long v346 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2) {
        WTF::StringImpl::destroy(v76, v64);
      }
      else {
        *(_DWORD *)v76 -= 2;
      }
    }
    unint64_t v77 = (WTF::StringImpl *)*((void *)&v345 + 1);
    *((void *)&v345 + 1) = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2) {
        WTF::StringImpl::destroy(v77, v64);
      }
      else {
        *(_DWORD *)v77 -= 2;
      }
    }
    unsigned int v78 = (WTF::StringImpl *)v345;
    *(void *)&long long v345 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2) {
        WTF::StringImpl::destroy(v78, v64);
      }
      else {
        *(_DWORD *)v78 -= 2;
      }
    }
    goto LABEL_91;
  }
  unint64_t v79 = 0;
  uint64_t v80 = 0;
LABEL_95:
  uint64_t v339 = 0;
  uint64_t v359 = (uint64_t)v79;
  uint64_t v340 = 0;
  uint64_t v360 = v80;
LABEL_96:
  unsigned __int8 v361 = 1;
  WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v339, v64);
LABEL_187:
  uint64_t v5 = (uint64_t)IPC::Decoder::decode<WTF::String>(v2, (uint64_t)&v339);
  unsigned int v144 = (unsigned __int8 *)*((void *)v2 + 1);
  uint64_t v145 = *(WTF::StringImpl **)v2;
  unint64_t v146 = *((void *)v2 + 2) - *(void *)v2;
  uint64_t v276 = v25;
  unsigned int v274 = v36;
  int v275 = (int)v31;
  unsigned int v273 = v26;
  if ((unint64_t)v144 <= v146)
  {
    unint64_t v34 = 0;
    uint64_t v35 = 0;
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v212 = *((void *)v2 + 3);
    if (v212)
    {
      if (v144)
      {
        (*(void (**)(uint64_t))(*(void *)v212 + 16))(v212);
        uint64_t v35 = *(void *)v2;
        unint64_t v34 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v34 = 0;
        uint64_t v35 = 0;
      }
    }
LABEL_379:
    unsigned int v144 = 0;
    uint64_t v145 = 0;
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = *((void *)v2 + 3);
    if (v5) {
      goto LABEL_501;
    }
    goto LABEL_380;
  }
  uint64_t v147 = (unsigned __int8 *)v145 + v146;
  uint64_t v35 = (uint64_t)(v147 + 1);
  *((void *)v2 + 2) = v147 + 1;
  if (!v145)
  {
    unint64_t v34 = (unint64_t)v144;
    uint64_t v35 = 0;
    goto LABEL_379;
  }
  LODWORD(v30) = *v147;
  if (v30 > 3) {
    goto LABEL_380;
  }
  unint64_t v34 = v30 | 0x100;
  if (v19) {
    goto LABEL_500;
  }
LABEL_191:
  v344[0] = v282;
  uint64_t v35 = v356;
  if (!(_BYTE)v356) {
    goto LABEL_500;
  }
  uint64_t v148 = v355;
  int v355 = 0;
  *(void *)&long long v345 = v148;
  uint64_t v35 = v428;
  if (!v428) {
    goto LABEL_500;
  }
  uint64_t v149 = v427;
  BOOL v427 = 0;
  *((void *)&v345 + 1) = v149;
  uint64_t v35 = v426;
  if (!v426) {
    goto LABEL_500;
  }
  int v36 = v425;
  char v425 = 0;
  *(void *)&long long v346 = v36;
  uint64_t v35 = v424;
  if (!v424) {
    goto LABEL_500;
  }
  uint64_t v26 = (uint64_t)v423;
  char v423 = 0;
  *((void *)&v346 + 1) = v26;
  if (v24) {
    goto LABEL_500;
  }
  LOBYTE(v347) = v281;
  uint64_t v35 = v422;
  if (!v422) {
    goto LABEL_500;
  }
  uint64_t v24 = (uint64_t)v421;
  char v421 = 0;
  *(void *)&long long v348 = v24;
  uint64_t v35 = v420;
  if (!v420) {
    goto LABEL_500;
  }
  uint64_t v25 = (uint64_t)v419;
  char v419 = 0;
  *((void *)&v348 + 1) = v25;
  uint64_t v35 = v361;
  if (!v361) {
    goto LABEL_500;
  }
  uint64_t v18 = v359;
  uint64_t v359 = 0;
  uint64_t v349 = v18;
  LODWORD(v31) = v360;
  unsigned int v32 = HIDWORD(v360);
  uint64_t v360 = 0;
  unint64_t v350 = __PAIR64__(v32, v31);
  uint64_t v35 = v340;
  if (!(_BYTE)v340) {
    goto LABEL_500;
  }
  uint64_t v19 = (uint64_t)v339;
  uint64_t v339 = 0;
  uint64_t v351 = v19;
  if (v34 <= 0xFF) {
    goto LABEL_500;
  }
  char v352 = v30;
  LOBYTE(v364) = v282;
  long long v345 = 0u;
  char v270 = v149;
  char v271 = v148;
  *(void *)&long long v365 = v148;
  *((void *)&v365 + 1) = v149;
  long long v346 = 0u;
  *(void *)&long long v366 = v36;
  *((void *)&v366 + 1) = v26;
  char v367 = v281;
  long long v348 = 0u;
  *(void *)&long long v368 = v24;
  *((void *)&v368 + 1) = v25;
  uint64_t v349 = 0;
  uint64_t v369 = v18;
  unint64_t v350 = 0;
  unint64_t v370 = __PAIR64__(v32, v31);
  uint64_t v351 = 0;
  uint64_t v371 = v19;
  char v372 = v30;
  char v373 = 1;
  WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)v344, v145);
  int v272 = 0;
LABEL_202:
  if ((_BYTE)v340)
  {
    unint64_t v150 = v339;
    uint64_t v339 = 0;
    if (v150)
    {
      if (*(_DWORD *)v150 == 2) {
        WTF::StringImpl::destroy(v150, v145);
      }
      else {
        *(_DWORD *)v150 -= 2;
      }
    }
  }
  if (v361) {
    WTF::Vector<WebCore::ApplePayInstallmentItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v359, v145);
  }
  if (v420)
  {
    int v151 = v419;
    char v419 = 0;
    if (v151)
    {
      if (*(_DWORD *)v151 == 2) {
        WTF::StringImpl::destroy(v151, v145);
      }
      else {
        *(_DWORD *)v151 -= 2;
      }
    }
  }
  if (v422)
  {
    uint64_t v152 = v421;
    char v421 = 0;
    if (v152)
    {
      if (*(_DWORD *)v152 == 2) {
        WTF::StringImpl::destroy(v152, v145);
      }
      else {
        *(_DWORD *)v152 -= 2;
      }
    }
  }
  if (v424)
  {
    uint64_t v153 = v423;
    char v423 = 0;
    if (v153)
    {
      if (*(_DWORD *)v153 == 2) {
        WTF::StringImpl::destroy(v153, v145);
      }
      else {
        *(_DWORD *)v153 -= 2;
      }
    }
  }
  if (v426)
  {
    uint64_t v154 = v425;
    char v425 = 0;
    if (v154)
    {
      if (*(_DWORD *)v154 == 2) {
        WTF::StringImpl::destroy(v154, v145);
      }
      else {
        *(_DWORD *)v154 -= 2;
      }
    }
  }
  if (v428)
  {
    unsigned int v155 = v427;
    BOOL v427 = 0;
    if (v155)
    {
      if (*(_DWORD *)v155 == 2) {
        WTF::StringImpl::destroy(v155, v145);
      }
      else {
        *(_DWORD *)v155 -= 2;
      }
    }
  }
  if ((_BYTE)v356)
  {
    uint64_t v156 = v355;
    int v355 = 0;
    if (v156)
    {
      if (*(_DWORD *)v156 == 2) {
        WTF::StringImpl::destroy(v156, v145);
      }
      else {
        *(_DWORD *)v156 -= 2;
      }
    }
  }
  if (!v272)
  {
    LOBYTE(v285) = v282;
    long long v365 = 0u;
    char v286 = v271;
    CFTypeRef v287 = v270;
    long long v366 = 0u;
    char v288 = v36;
    uint64_t v289 = v26;
    LOBYTE(v290) = v281;
    long long v368 = 0u;
    uint64_t v291 = v24;
    uint64_t v292 = v25;
    uint64_t v369 = 0;
    uint64_t v293 = v18;
    unint64_t v370 = 0;
    unint64_t v294 = __PAIR64__(v32, v31);
    uint64_t v371 = 0;
    uint64_t v295 = v19;
    LOBYTE(v296) = v30;
    LOBYTE(v299) = 1;
    LOBYTE(v300) = 1;
    WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)&v364, v145);
    uint64_t v25 = v276;
    int v36 = (WTF::StringImpl *)v274;
    LODWORD(v31) = v275;
    uint64_t v26 = v273;
    goto LABEL_241;
  }
  unint64_t v230 = *(void *)v2;
  uint64_t v231 = *((void *)v2 + 1);
  *(void *)unint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v232 = *((void *)v2 + 3);
  uint64_t v25 = v276;
  int v36 = (WTF::StringImpl *)v274;
  LODWORD(v31) = v275;
  uint64_t v26 = v273;
  if (v232 && v231) {
    (*(void (**)(uint64_t, unint64_t))(*(void *)v232 + 16))(v232, v230);
  }
LABEL_393:
  LOBYTE(v285) = 0;
  LOBYTE(v300) = 0;
  unint64_t v54 = *(WTF::StringImpl **)v2;
  uint64_t v233 = *((void *)v2 + 1);
  *(void *)unint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v5 = *((void *)v2 + 3);
  if (v5 && v233) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)v5 + 16))(v5, v54);
  }
LABEL_241:
  if (*(void *)v2)
  {
    unint64_t v34 = v300;
    if (!(_BYTE)v300) {
      goto LABEL_500;
    }
    WebCore::PaymentInstallmentConfiguration::PaymentInstallmentConfiguration();
    v376[0] = 0;
    char v385 = 0;
    if (v373)
    {
      v376[0] = v364;
      long long v157 = v365;
      long long v365 = 0u;
      long long v158 = v366;
      long long v366 = 0u;
      long long v377 = v157;
      long long v378 = v158;
      char v379 = v367;
      long long v159 = v368;
      long long v368 = 0u;
      long long v380 = v159;
      uint64_t v160 = v369;
      uint64_t v369 = 0;
      uint64_t v381 = v160;
      *(void *)&long long v159 = v370;
      unint64_t v370 = 0;
      uint64_t v382 = v159;
      uint64_t v161 = v371;
      uint64_t v371 = 0;
      uint64_t v383 = v161;
      char v384 = v372;
      char v385 = 1;
      unsigned __int8 v386 = 1;
      WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)&v364, v54);
    }
    else
    {
      unsigned __int8 v386 = 1;
    }
  }
  else
  {
    v376[0] = 0;
    unsigned __int8 v386 = 0;
  }
  if ((_BYTE)v300 && (_BYTE)v299) {
    WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)&v285, v54);
  }
  unint64_t v162 = *((void *)v2 + 1);
  if (!v386)
  {
    unint64_t v200 = *(void *)v2;
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v201 = *((void *)v2 + 3);
    if (!v201 || !v162)
    {
      unint64_t v162 = 0;
      unint64_t v163 = *(void *)v2;
LABEL_369:
      unint64_t v202 = 0;
      unint64_t v203 = 0;
      *(void *)unint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      uint64_t v204 = *((void *)v2 + 3);
      if (v204)
      {
        if (v162)
        {
          (*(void (**)(uint64_t, unint64_t))(*(void *)v204 + 16))(v204, v163);
          unint64_t v203 = *(void *)v2;
          unint64_t v202 = *((void *)v2 + 1);
        }
        else
        {
          unint64_t v202 = 0;
          unint64_t v203 = 0;
        }
      }
      goto LABEL_370;
    }
    (*(void (**)(uint64_t, unint64_t))(*(void *)v201 + 16))(v201, v200);
    unint64_t v162 = *((void *)v2 + 1);
  }
  unint64_t v163 = *(void *)v2;
  unint64_t v164 = *((void *)v2 + 2) - *(void *)v2;
  if (v162 <= v164) {
    goto LABEL_369;
  }
  uint64_t v165 = (unsigned __int8 *)(v163 + v164);
  *((void *)v2 + 2) = v165 + 1;
  if (!v163)
  {
    unint64_t v202 = v162;
    unint64_t v203 = 0;
LABEL_370:
    unint64_t v162 = 0;
    unint64_t v163 = 0;
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v205 = *((void *)v2 + 3);
    if (v205)
    {
      if (v202)
      {
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v205 + 16))(v205, v203, v202);
        unint64_t v163 = *(void *)v2;
        unint64_t v162 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v162 = 0;
        unint64_t v163 = 0;
      }
    }
    goto LABEL_371;
  }
  if (*v165 >= 2u)
  {
LABEL_371:
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v206 = *((void *)v2 + 3);
    if (v206 && v162) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v206 + 16))(v206, v163);
    }
    unsigned int v32 = 0;
    goto LABEL_385;
  }
  if (!*v165)
  {
    unsigned int v32 = 0;
    uint64_t v24 = 0;
    goto LABEL_258;
  }
  if (v162 <= (unint64_t)&v165[-v163 + 1])
  {
    unint64_t v214 = 0;
    unint64_t v215 = 0;
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v216 = *((void *)v2 + 3);
    if (v216)
    {
      (*(void (**)(uint64_t))(*(void *)v216 + 16))(v216);
      unint64_t v214 = 0;
      unint64_t v264 = *(void *)v2;
      uint64_t v265 = *((void *)v2 + 1);
      uint64_t v266 = *((void *)v2 + 3);
      *(void *)unint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      unint64_t v215 = 0;
      if (v266)
      {
        if (v265)
        {
          (*(void (**)(uint64_t, unint64_t))(*(void *)v266 + 16))(v266, v264);
          unint64_t v215 = *(void *)v2;
          unint64_t v214 = *((void *)v2 + 1);
        }
      }
    }
  }
  else
  {
    *((void *)v2 + 2) = v165 + 2;
    unsigned int v166 = v165[1];
    if (v166 < 3)
    {
      uint64_t v24 = 0;
      unsigned int v32 = v166 | 0x100;
      goto LABEL_258;
    }
    unint64_t v214 = v162;
    unint64_t v215 = v163;
  }
  *(void *)unint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v217 = *((void *)v2 + 3);
  if (v217 && v214) {
    (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v217 + 16))(v217, v215, v214);
  }
  unsigned int v32 = 256;
LABEL_385:
  unint64_t v218 = *(void *)v2;
  uint64_t v219 = *((void *)v2 + 1);
  *(void *)unint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v220 = *((void *)v2 + 3);
  if (v220 && v219) {
    (*(void (**)(uint64_t, unint64_t))(*(void *)v220 + 16))(v220, v218);
  }
  uint64_t v24 = 1;
LABEL_258:
  uint64_t v18 = IPC::Decoder::decode<std::optional<BOOL>>(v2);
  IPC::Decoder::decode<WTF::String>(v2, (uint64_t)&v427);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayRecurringPaymentRequest>>((uint64_t)&v364, v2);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>>((uint64_t)&v359, v2);
  IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF::StringImpl *)&v355, (WTF::StringImpl **)v2);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayDeferredPaymentRequest>>((uint64_t)v344, v2);
  IPC::Decoder::decode<std::optional<WebCore::ApplePayDisbursementRequest>>((WTF *)&v339, (char **)v2);
  unint64_t v167 = *((void *)v2 + 1);
  unint64_t v168 = *(void *)v2;
  unint64_t v169 = *((void *)v2 + 2) - *(void *)v2;
  if (v167 <= v169)
  {
    unint64_t v207 = 0;
    unint64_t v208 = 0;
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v209 = *((void *)v2 + 3);
    if (v209)
    {
      if (v167)
      {
        (*(void (**)(uint64_t))(*(void *)v209 + 16))(v209);
        unint64_t v208 = *(void *)v2;
        unint64_t v207 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v207 = 0;
        unint64_t v208 = 0;
      }
    }
    goto LABEL_374;
  }
  uint64_t v170 = (unsigned __int8 *)(v168 + v169);
  *((void *)v2 + 2) = v170 + 1;
  if (!v168)
  {
    unint64_t v207 = v167;
    unint64_t v208 = 0;
LABEL_374:
    unint64_t v167 = 0;
    unint64_t v168 = 0;
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v210 = *((void *)v2 + 3);
    if (v210)
    {
      if (v207)
      {
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v210 + 16))(v210, v208, v207);
        unint64_t v168 = *(void *)v2;
        unint64_t v167 = *((void *)v2 + 1);
      }
      else
      {
        unint64_t v167 = 0;
        unint64_t v168 = 0;
      }
    }
    goto LABEL_375;
  }
  if (*v170 >= 2u)
  {
LABEL_375:
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v211 = *((void *)v2 + 3);
    if (v211 && v167) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v211 + 16))(v211, v168);
    }
    uint64_t v19 = 0;
    goto LABEL_390;
  }
  if (!*v170)
  {
    uint64_t v19 = 0;
    LODWORD(v30) = 0;
    goto LABEL_266;
  }
  if (v167 <= (unint64_t)&v170[-v168 + 1])
  {
    uint64_t v221 = v26;
    char v222 = v36;
    unint64_t v223 = 0;
    unint64_t v224 = 0;
    *(void *)unint64_t v2 = 0;
    *((void *)v2 + 1) = 0;
    uint64_t v225 = *((void *)v2 + 3);
    if (v225)
    {
      (*(void (**)(uint64_t))(*(void *)v225 + 16))(v225);
      unint64_t v223 = 0;
      unint64_t v267 = *(void *)v2;
      uint64_t v268 = *((void *)v2 + 1);
      uint64_t v269 = *((void *)v2 + 3);
      *(void *)unint64_t v2 = 0;
      *((void *)v2 + 1) = 0;
      unint64_t v224 = 0;
      if (v269)
      {
        if (v268)
        {
          (*(void (**)(uint64_t, unint64_t))(*(void *)v269 + 16))(v269, v267);
          unint64_t v224 = *(void *)v2;
          unint64_t v223 = *((void *)v2 + 1);
        }
      }
    }
  }
  else
  {
    *((void *)v2 + 2) = v170 + 2;
    unsigned int v171 = v170[1];
    if (v171 < 3)
    {
      LODWORD(v30) = 0;
      uint64_t v19 = v171 | 0x100;
      goto LABEL_266;
    }
    uint64_t v221 = v26;
    char v222 = v36;
    unint64_t v223 = v167;
    unint64_t v224 = v168;
  }
  *(void *)unint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v226 = *((void *)v2 + 3);
  if (v226 && v223) {
    (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v226 + 16))(v226, v224, v223);
  }
  uint64_t v19 = 256;
  int v36 = v222;
  uint64_t v26 = v221;
LABEL_390:
  unint64_t v227 = *(void *)v2;
  uint64_t v228 = *((void *)v2 + 1);
  *(void *)unint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v229 = *((void *)v2 + 3);
  if (v229 && v228) {
    (*(void (**)(uint64_t, unint64_t))(*(void *)v229 + 16))(v229, v227);
  }
  LODWORD(v30) = 1;
LABEL_266:
  uint64_t v5 = (uint64_t)IPC::Decoder::decode<WTF::String>(v2, (uint64_t)&v425);
  if (*(void *)v2)
  {
    unint64_t v34 = v418;
    if (!v418) {
      goto LABEL_500;
    }
    unint64_t v34 = v416;
    if (!v416) {
      goto LABEL_500;
    }
    unint64_t v34 = BYTE5(v284);
    if (!BYTE5(v284)) {
      goto LABEL_500;
    }
    unint64_t v34 = v414;
    if (!v414) {
      goto LABEL_500;
    }
    unint64_t v34 = BYTE5(v283);
    if (!BYTE5(v283)) {
      goto LABEL_500;
    }
    unint64_t v34 = v411;
    if (!v411) {
      goto LABEL_500;
    }
    unint64_t v34 = v408;
    if (!v408) {
      goto LABEL_500;
    }
    if (v31) {
      goto LABEL_500;
    }
    if (v26) {
      goto LABEL_500;
    }
    unint64_t v34 = v405;
    if (!v405) {
      goto LABEL_500;
    }
    unint64_t v34 = v402;
    if (!v402) {
      goto LABEL_500;
    }
    unint64_t v34 = v399;
    if (!v399) {
      goto LABEL_500;
    }
    unint64_t v34 = v391;
    if (!v391) {
      goto LABEL_500;
    }
    char v31 = v390;
    uint64_t v390 = 0;
    unint64_t v34 = v389;
    if (!v389) {
      goto LABEL_500;
    }
    unint64_t v34 = v279;
    if (v279) {
      goto LABEL_500;
    }
    unint64_t v34 = v386;
    if (!v386) {
      goto LABEL_500;
    }
    if (v24) {
      goto LABEL_500;
    }
    if ((v18 & 0xFF0000) == 0) {
      goto LABEL_500;
    }
    unint64_t v34 = v428;
    if (!v428) {
      goto LABEL_500;
    }
    unint64_t v2 = v427;
    BOOL v427 = 0;
    unint64_t v34 = v375;
    if (!v375) {
      goto LABEL_500;
    }
    unint64_t v34 = v363;
    if (!v363) {
      goto LABEL_500;
    }
    unint64_t v34 = v358;
    if (!v358) {
      goto LABEL_500;
    }
    unint64_t v34 = v354;
    if (!v354) {
      goto LABEL_500;
    }
    unint64_t v34 = v343;
    if (!v343) {
      goto LABEL_500;
    }
    if (v30) {
      goto LABEL_500;
    }
    unint64_t v34 = v426;
    if (!v426) {
      goto LABEL_500;
    }
    int v285 = 0;
    uint64_t v173 = v417;
    v417 = 0;
    uint64_t v174 = v415;
    char v415 = 0;
    char v286 = v173;
    CFTypeRef v287 = v174;
    LODWORD(v288) = v284;
    BYTE4(v288) = BYTE4(v284);
    uint64_t v289 = MEMORY[0x1E4FB6B48] + 16;
    CFTypeRef v290 = v413;
    if (v413) {
      CFRetain(v413);
    }
    LODWORD(v291) = v283;
    BYTE4(v291) = BYTE4(v283);
    uint64_t v292 = MEMORY[0x1E4FB6B48] + 16;
    uint64_t v293 = (uint64_t)v410;
    if (v410) {
      CFRetain(v410);
    }
    unint64_t v175 = v406;
    unint64_t v406 = 0;
    unint64_t v294 = v175;
    uint64_t v176 = v407;
    uint64_t v407 = 0;
    uint64_t v295 = v176;
    int v296 = v25;
    char v297 = BYTE4(v25);
    char v298 = (char)v36;
    uint64_t v177 = v403;
    uint64_t v403 = 0;
    uint64_t v299 = v177;
    uint64_t v178 = v404;
    uint64_t v404 = 0;
    uint64_t v300 = v178;
    uint64_t v179 = v400;
    uint64_t v400 = 0;
    uint64_t v301 = v179;
    uint64_t v180 = v401;
    uint64_t v401 = 0;
    uint64_t v302 = v180;
    char v303 = v392[0];
    long long v181 = v393;
    long long v393 = 0uLL;
    long long v304 = v181;
    long long v306 = v395;
    long long v305 = v394;
    uint64_t v182 = v397;
    uint64_t v397 = 0;
    uint64_t v307 = v396;
    uint64_t v308 = v182;
    __int16 v309 = v398;
    uint64_t v183 = v387;
    uint64_t v387 = 0;
    char v310 = v31;
    uint64_t v311 = v183;
    *(void *)&long long v181 = v388;
    uint64_t v388 = 0;
    uint64_t v312 = v181;
    BOOL v313 = v277;
    char v314 = 0;
    char v323 = 0;
    if (v385)
    {
      long long v184 = v378;
      long long v315 = v377;
      char v314 = v376[0];
      long long v377 = 0uLL;
      long long v378 = 0uLL;
      long long v316 = v184;
      char v317 = v379;
      long long v185 = v380;
      long long v380 = 0uLL;
      long long v318 = v185;
      uint64_t v186 = v381;
      uint64_t v381 = 0;
      uint64_t v319 = v186;
      uint64_t v187 = v382;
      uint64_t v382 = 0;
      uint64_t v320 = v187;
      uint64_t v188 = v383;
      uint64_t v383 = 0;
      uint64_t v321 = v188;
      char v322 = v384;
      char v323 = 1;
    }
    __int16 v324 = v32;
    __int16 v325 = v18;
    uint64_t v326 = v2;
    std::__optional_move_base<WebCore::ApplePayRecurringPaymentRequest,false>::__optional_move_base[abi:sn180100]((uint64_t)&v327, &v364);
    std::__optional_move_base<WebCore::ApplePayAutomaticReloadPaymentRequest,false>::__optional_move_base[abi:sn180100](v328, (uint64_t)&v359);
    LOBYTE(v329) = 0;
    char v331 = 0;
    if (v357)
    {
      uint64_t v189 = v355;
      int v355 = 0;
      uint64_t v329 = v189;
      uint64_t v190 = v356;
      uint64_t v356 = 0;
      uint64_t v330 = v190;
      char v331 = 1;
    }
    std::__optional_move_base<WebCore::ApplePayDeferredPaymentRequest,false>::__optional_move_base[abi:sn180100](v332, (uint64_t)v344);
    LOBYTE(v333) = 0;
    char v336 = 0;
    if (v342)
    {
      char v335 = 0;
      if (v341)
      {
        unsigned int v191 = v339;
        uint64_t v339 = 0;
        int v333 = v191;
        uint64_t v192 = v340;
        uint64_t v340 = 0;
        uint64_t v334 = v192;
        char v335 = 1;
      }
      char v336 = 1;
    }
    __int16 v337 = v19;
    BOOL v193 = v425;
    char v425 = 0;
    uint64_t v338 = v193;
    WebCore::ApplePaySessionPaymentRequest::ApplePaySessionPaymentRequest(v278, (const WebCore::ApplePaySessionPaymentRequest *)&v285);
    *((unsigned char *)v278 + 896) = 1;
    MEMORY[0x199738EC0](&v285);
  }
  else
  {
    *(unsigned char *)CFTypeRef v278 = 0;
    *((unsigned char *)v278 + 896) = 0;
  }
  if (v426)
  {
    BOOL v194 = v425;
    char v425 = 0;
    if (v194)
    {
      if (*(_DWORD *)v194 == 2) {
        WTF::StringImpl::destroy(v194, v172);
      }
      else {
        *(_DWORD *)v194 -= 2;
      }
    }
  }
  if (v343 && v342 && v341 && v339) {
    WTF::fastFree(v339, v172);
  }
  if (v354 && v353) {
    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)v344, v172);
  }
  if (v358 && v357) {
    WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v355, v172);
  }
  if (v363 && v362) {
    WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&v359, v172);
  }
  if (v375 && v374) {
    WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)&v364, v172);
  }
  if (v428)
  {
    BOOL v195 = v427;
    BOOL v427 = 0;
    if (v195)
    {
      if (*(_DWORD *)v195 == 2) {
        WTF::StringImpl::destroy(v195, v172);
      }
      else {
        *(_DWORD *)v195 -= 2;
      }
    }
  }
  if (v386 && v385) {
    WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)v376, v172);
  }
  if (v389) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v387, v172);
  }
  if (v391)
  {
    unsigned int v196 = v390;
    uint64_t v390 = 0;
    if (v196)
    {
      if (*(_DWORD *)v196 == 2) {
        WTF::StringImpl::destroy(v196, v172);
      }
      else {
        *(_DWORD *)v196 -= 2;
      }
    }
  }
  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v392, v172);
  if (v402) {
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v400, v197);
  }
  if (v405) {
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v403, v197);
  }
  if (v408) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v406, v197);
  }
  if (v411) {
    WebCore::PaymentContact::~PaymentContact((WebCore::PaymentContact *)v409);
  }
  if (v414) {
    WebCore::PaymentContact::~PaymentContact((WebCore::PaymentContact *)v412);
  }
  if (v416)
  {
    unsigned int v198 = v415;
    char v415 = 0;
    if (v198)
    {
      if (*(_DWORD *)v198 == 2) {
        WTF::StringImpl::destroy(v198, (WTF::StringImpl *)v197);
      }
      else {
        *(_DWORD *)v198 -= 2;
      }
    }
  }
  if (v418)
  {
    unsigned int v199 = v417;
    v417 = 0;
    if (v199)
    {
      if (*(_DWORD *)v199 == 2) {
        WTF::StringImpl::destroy(v199, (WTF::StringImpl *)v197);
      }
      else {
        *(_DWORD *)v199 -= 2;
      }
    }
  }
}

void sub_19880F020(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  if (LOBYTE(STACK[0x678]) && LOBYTE(STACK[0x670])) {
    WebCore::ApplePayInstallmentConfiguration::~ApplePayInstallmentConfiguration((WebCore::ApplePayInstallmentConfiguration *)&STACK[0x610], a2);
  }
  if (LOBYTE(STACK[0x690])) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x680], a2);
  }
  if (LOBYTE(STACK[0x6A0]))
  {
    uint64_t v4 = (WTF::StringImpl *)STACK[0x698];
    STACK[0x698] = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&STACK[0x6A8], a2);
  if (LOBYTE(STACK[0x710])) {
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x700], v5);
  }
  if (LOBYTE(STACK[0x728])) {
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x718], v5);
  }
  if (LOBYTE(STACK[0x740])) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0x730], v5);
  }
  if (*(unsigned char *)(v2 - 232)) {
    WebCore::PaymentContact::~PaymentContact((WebCore::PaymentContact *)(v2 - 248));
  }
  if (*(unsigned char *)(v2 - 208)) {
    WebCore::PaymentContact::~PaymentContact((WebCore::PaymentContact *)(v2 - 224));
  }
  if (*(unsigned char *)(v2 - 192))
  {
    unint64_t v6 = *(WTF::StringImpl **)(v2 - 200);
    *(void *)(v2 - 200) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v2 - 176))
  {
    char v7 = *(WTF::StringImpl **)(v2 - 184);
    *(void *)(v2 - 184) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v5);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

void *IPC::Decoder::decode<WebCore::ApplePaySessionPaymentRequestContactFields>(void *result)
{
  unint64_t v1 = result[1];
  uint64_t v2 = *result;
  unint64_t v3 = result[2] - *result;
  if (v1 <= v3)
  {
    unint64_t v43 = 0;
    uint64_t v44 = 0;
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v45 = result[3];
    if (v45)
    {
      long long v158 = result;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v45 + 16))(v45);
        unint64_t result = v158;
        uint64_t v44 = *v158;
        unint64_t v43 = v158[1];
      }
      else
      {
        unint64_t v43 = 0;
        uint64_t v44 = 0;
      }
    }
    goto LABEL_40;
  }
  uint64_t v4 = (unsigned __int8 *)(v2 + v3);
  uint64_t v5 = v2 + v3 + 1;
  result[2] = v5;
  if (!v2)
  {
    unint64_t v43 = v1;
    uint64_t v44 = 0;
LABEL_40:
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v46 = result[3];
    if (v46)
    {
      long long v157 = result;
      if (v43)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v46 + 16))(v46, v44, v43);
        unsigned int v6 = 0;
        unint64_t result = v157;
        uint64_t v2 = *v157;
        unint64_t v1 = v157[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v6 = 0;
      }
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v6 = 0;
    }
    goto LABEL_42;
  }
  unsigned int v6 = *v4;
  if (v6 < 2)
  {
    int v7 = 0;
    unsigned int v8 = 1;
    goto LABEL_5;
  }
LABEL_42:
  *unint64_t result = 0;
  result[1] = 0;
  unint64_t v47 = result[3];
  if (!v47)
  {
    unsigned int v8 = 0;
    uint64_t v2 = 0;
    int v7 = 1;
    goto LABEL_44;
  }
  unsigned int v142 = v6;
  uint64_t v156 = result;
  if (!v1)
  {
    unsigned int v8 = 0;
    unint64_t v47 = 0;
    uint64_t v2 = 0;
    int v7 = 1;
LABEL_44:
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v48 = result[3];
    if (v48)
    {
      unsigned int v129 = v8;
      int v141 = v7;
      unsigned int v155 = result;
      if (v47)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v48 + 16))(v48, v2, v47);
        unsigned int v12 = 0;
        unint64_t result = v155;
        uint64_t v2 = *v155;
        unint64_t v1 = v155[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v12 = 0;
      }
      unsigned int v8 = v129;
      int v7 = v141;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v12 = 0;
    }
    goto LABEL_46;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v47 + 16))(v47, v2);
  unsigned int v8 = 0;
  unint64_t result = v156;
  uint64_t v2 = *v156;
  unint64_t v1 = v156[1];
  int v7 = 1;
  uint64_t v5 = v156[2];
  unsigned int v6 = v142;
LABEL_5:
  if (!v6) {
    unsigned int v8 = 0;
  }
  unint64_t v9 = v5 - v2;
  if (v1 <= v9)
  {
    unsigned int v118 = v8;
    int v130 = v7;
    unint64_t v47 = 0;
    uint64_t v56 = result[3];
    *unint64_t result = 0;
    result[1] = 0;
    unsigned int v144 = result;
    if (v1 && v56)
    {
      (*(void (**)(uint64_t))(*(void *)v56 + 16))(v56);
      unint64_t result = v144;
      uint64_t v2 = *v144;
      unint64_t v47 = v144[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    unsigned int v8 = v118;
    int v7 = v130;
    goto LABEL_44;
  }
  uint64_t v10 = (unsigned __int8 *)(v2 + v9);
  uint64_t v11 = v2 + v9 + 1;
  result[2] = v11;
  if (!v2)
  {
    unint64_t v47 = v1;
    goto LABEL_44;
  }
  unsigned int v12 = *v10;
  if (v12 < 2)
  {
    int v13 = 0;
    int v14 = 1;
    goto LABEL_11;
  }
LABEL_46:
  *unint64_t result = 0;
  result[1] = 0;
  unint64_t v49 = result[3];
  if (!v49)
  {
    int v14 = 0;
    uint64_t v2 = 0;
    int v13 = 1;
    goto LABEL_48;
  }
  unsigned int v117 = v12;
  unsigned int v128 = v8;
  int v140 = v7;
  uint64_t v154 = result;
  if (!v1)
  {
    int v14 = 0;
    unint64_t v49 = 0;
    uint64_t v2 = 0;
    int v13 = 1;
LABEL_48:
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v50 = result[3];
    if (v50)
    {
      int v98 = v13;
      int v107 = v14;
      unsigned int v116 = v12;
      unsigned int v127 = v8;
      int v139 = v7;
      uint64_t v153 = result;
      if (v49)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v50 + 16))(v50, v2, v49);
        unsigned int v18 = 0;
        unint64_t result = v153;
        uint64_t v2 = *v153;
        unint64_t v1 = v153[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v18 = 0;
      }
      unsigned int v8 = v127;
      int v7 = v139;
      int v14 = v107;
      unsigned int v12 = v116;
      int v13 = v98;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v18 = 0;
    }
    goto LABEL_50;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v49 + 16))(v49, v2);
  int v14 = 0;
  unint64_t result = v154;
  uint64_t v2 = *v154;
  unint64_t v1 = v154[1];
  int v13 = 1;
  uint64_t v11 = v154[2];
  unsigned int v8 = v128;
  int v7 = v140;
  unsigned int v12 = v117;
LABEL_11:
  unint64_t v15 = v11 - v2;
  if (v1 <= v15)
  {
    int v90 = v13;
    int v99 = v14;
    unsigned int v108 = v12;
    unsigned int v119 = v8;
    int v131 = v7;
    unint64_t v49 = 0;
    uint64_t v57 = result[3];
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v145 = result;
    if (v1 && v57)
    {
      (*(void (**)(uint64_t))(*(void *)v57 + 16))(v57);
      unint64_t result = v145;
      uint64_t v2 = *v145;
      unint64_t v49 = v145[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    unsigned int v8 = v119;
    int v7 = v131;
    int v14 = v99;
    unsigned int v12 = v108;
    int v13 = v90;
    goto LABEL_48;
  }
  unint64_t v16 = (unsigned __int8 *)(v2 + v15);
  uint64_t v17 = v2 + v15 + 1;
  result[2] = v17;
  if (!v2)
  {
    unint64_t v49 = v1;
    goto LABEL_48;
  }
  unsigned int v18 = *v16;
  if (v18 < 2)
  {
    int v19 = 0;
    int v20 = 1;
    goto LABEL_15;
  }
LABEL_50:
  *unint64_t result = 0;
  result[1] = 0;
  unint64_t v51 = result[3];
  if (!v51)
  {
    int v20 = 0;
    uint64_t v2 = 0;
    int v19 = 1;
    goto LABEL_52;
  }
  unsigned int v89 = v18;
  int v97 = v13;
  int v106 = v14;
  unsigned int v115 = v12;
  unsigned int v126 = v8;
  int v138 = v7;
  uint64_t v152 = result;
  if (!v1)
  {
    int v20 = 0;
    unint64_t v51 = 0;
    uint64_t v2 = 0;
    int v19 = 1;
LABEL_52:
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v52 = result[3];
    if (v52)
    {
      int v76 = v19;
      int v82 = v20;
      unsigned int v88 = v18;
      int v96 = v13;
      int v105 = v14;
      unsigned int v114 = v12;
      unsigned int v125 = v8;
      int v137 = v7;
      int v151 = result;
      if (v51)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v52 + 16))(v52, v2, v51);
        unsigned int v24 = 0;
        unint64_t result = v151;
        uint64_t v2 = *v151;
        unint64_t v1 = v151[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        unsigned int v24 = 0;
      }
      unsigned int v8 = v125;
      int v7 = v137;
      int v14 = v105;
      unsigned int v12 = v114;
      int v13 = v96;
      int v20 = v82;
      unsigned int v18 = v88;
      int v19 = v76;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
      unsigned int v24 = 0;
    }
    goto LABEL_54;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v51 + 16))(v51, v2);
  int v20 = 0;
  unint64_t result = v152;
  uint64_t v2 = *v152;
  unint64_t v1 = v152[1];
  int v19 = 1;
  uint64_t v17 = v152[2];
  unsigned int v8 = v126;
  int v7 = v138;
  int v14 = v106;
  unsigned int v12 = v115;
  int v13 = v97;
  unsigned int v18 = v89;
LABEL_15:
  unint64_t v21 = v17 - v2;
  if (v1 <= v21)
  {
    int v71 = v19;
    int v77 = v20;
    unsigned int v83 = v18;
    int v91 = v13;
    int v100 = v14;
    unsigned int v109 = v12;
    unsigned int v120 = v8;
    int v132 = v7;
    unint64_t v51 = 0;
    uint64_t v58 = result[3];
    *unint64_t result = 0;
    result[1] = 0;
    unint64_t v146 = result;
    if (v1 && v58)
    {
      (*(void (**)(uint64_t))(*(void *)v58 + 16))(v58);
      unint64_t result = v146;
      uint64_t v2 = *v146;
      unint64_t v51 = v146[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    unsigned int v8 = v120;
    int v7 = v132;
    int v14 = v100;
    unsigned int v12 = v109;
    int v13 = v91;
    int v20 = v77;
    unsigned int v18 = v83;
    int v19 = v71;
    goto LABEL_52;
  }
  unsigned int v22 = (unsigned __int8 *)(v2 + v21);
  uint64_t v23 = v2 + v21 + 1;
  result[2] = v23;
  if (!v2)
  {
    unint64_t v51 = v1;
    goto LABEL_52;
  }
  unsigned int v24 = *v22;
  if (v24 < 2)
  {
    int v25 = 0;
    char v26 = 1;
    goto LABEL_19;
  }
LABEL_54:
  *unint64_t result = 0;
  result[1] = 0;
  unint64_t v53 = result[3];
  if (!v53)
  {
    char v26 = 0;
    uint64_t v2 = 0;
    int v25 = 1;
    goto LABEL_56;
  }
  unsigned int v70 = v24;
  int v75 = v19;
  int v81 = v20;
  unsigned int v87 = v18;
  int v95 = v13;
  int v104 = v14;
  unsigned int v113 = v12;
  unsigned int v124 = v8;
  int v136 = v7;
  unint64_t v150 = result;
  if (!v1)
  {
    char v26 = 0;
    unint64_t v53 = 0;
    uint64_t v2 = 0;
    int v25 = 1;
LABEL_56:
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v29 = result[3];
    if (v29)
    {
      int v63 = v25;
      char v66 = v26;
      unsigned int v69 = v24;
      int v74 = v19;
      int v80 = v20;
      unsigned int v86 = v18;
      int v94 = v13;
      int v103 = v14;
      unsigned int v112 = v12;
      unsigned int v123 = v8;
      int v135 = v7;
      uint64_t v149 = result;
      if (v53)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v29 + 16))(v29, v2, v53);
        LODWORD(v29) = 0;
        unint64_t result = v149;
        uint64_t v2 = *v149;
        unint64_t v1 = v149[1];
      }
      else
      {
        unint64_t v1 = 0;
        uint64_t v2 = 0;
        LODWORD(v29) = 0;
      }
      unsigned int v8 = v123;
      int v7 = v135;
      int v14 = v103;
      unsigned int v12 = v112;
      int v13 = v94;
      int v20 = v80;
      unsigned int v18 = v86;
      unsigned int v24 = v69;
      int v19 = v74;
      int v25 = v63;
      char v26 = v66;
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
    }
LABEL_58:
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v31 = result[3];
    if (!v31)
    {
      uint64_t v2 = 0;
      unsigned int v8 = 0;
      int v32 = 0;
      goto LABEL_28;
    }
    int v60 = v29;
    int v62 = v25;
    char v65 = v26;
    unsigned int v68 = v24;
    int v73 = v19;
    int v79 = v20;
    unsigned int v85 = v18;
    int v93 = v13;
    int v102 = v14;
    unsigned int v111 = v12;
    unsigned int v122 = v8;
    int v134 = v7;
    uint64_t v148 = result;
    if (v1)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v2);
      uint64_t v2 = *v148;
      if (*v148)
      {
        unint64_t result = v148;
        unsigned int v12 = v111;
        unsigned int v8 = v122;
        int v14 = v102;
        int v20 = v79;
        unsigned int v18 = v85;
        unsigned int v24 = v68;
        int v19 = v73;
        int v25 = v62;
        char v26 = v65;
        LODWORD(v29) = v60;
        LOBYTE(v31) = v134;
        if (v134) {
          goto LABEL_128;
        }
        int v30 = 1;
        if (v93) {
          goto LABEL_128;
        }
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v2 = 0;
    }
    LOBYTE(v31) = 0;
    unsigned int v8 = 0;
    int v32 = 0;
    unint64_t result = v148;
    int v14 = v102;
    unsigned int v12 = v111;
    int v20 = v79;
    unsigned int v18 = v85;
    char v26 = v65;
    unsigned int v24 = v68;
    LODWORD(v29) = v60;
    goto LABEL_28;
  }
  (*(void (**)(unint64_t, uint64_t))(*(void *)v53 + 16))(v53, v2);
  char v26 = 0;
  unint64_t result = v150;
  uint64_t v2 = *v150;
  unint64_t v1 = v150[1];
  int v25 = 1;
  uint64_t v23 = v150[2];
  unsigned int v8 = v124;
  int v7 = v136;
  int v14 = v104;
  unsigned int v12 = v113;
  int v13 = v95;
  int v20 = v81;
  unsigned int v18 = v87;
  unsigned int v24 = v70;
  int v19 = v75;
LABEL_19:
  unint64_t v27 = v23 - v2;
  if (v1 <= v27)
  {
    int v61 = v25;
    char v64 = v26;
    unsigned int v67 = v24;
    int v72 = v19;
    int v78 = v20;
    unsigned int v84 = v18;
    int v92 = v13;
    int v101 = v14;
    unsigned int v110 = v12;
    unsigned int v121 = v8;
    int v133 = v7;
    unint64_t v53 = 0;
    uint64_t v59 = result[3];
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v147 = result;
    if (v1 && v59)
    {
      (*(void (**)(uint64_t))(*(void *)v59 + 16))(v59);
      unint64_t result = v147;
      uint64_t v2 = *v147;
      unint64_t v53 = v147[1];
    }
    else
    {
      uint64_t v2 = 0;
    }
    unsigned int v8 = v121;
    int v7 = v133;
    int v14 = v101;
    unsigned int v12 = v110;
    int v13 = v92;
    int v20 = v78;
    unsigned int v18 = v84;
    unsigned int v24 = v67;
    int v19 = v72;
    int v25 = v61;
    char v26 = v64;
    goto LABEL_56;
  }
  uint64_t v28 = (unsigned __int8 *)(v2 + v27);
  result[2] = v28 + 1;
  if (!v2)
  {
    unint64_t v53 = v1;
    goto LABEL_56;
  }
  LODWORD(v29) = *v28;
  if (v29 > 1) {
    goto LABEL_58;
  }
  if (v7) {
    goto LABEL_128;
  }
  int v30 = 0;
  LOBYTE(v31) = 1;
  if (v13) {
    goto LABEL_128;
  }
LABEL_24:
  if (v19 || v25 || v30)
  {
LABEL_128:
    __break(1u);
    return result;
  }
  int v32 = 1;
LABEL_28:
  BOOL v33 = v18 != 0;
  BOOL v34 = v12 != 0;
  BOOL v35 = (v31 & (v29 != 0)) == 0;
  uint64_t v36 = 0x100000000;
  if (v35) {
    uint64_t v36 = 0;
  }
  unint64_t v37 = v36 & 0xFFFFFEFFFFFFFFFFLL | ((unint64_t)(v32 & 1) << 40);
  uint64_t v38 = 0x1000000;
  if ((v26 & (v24 != 0)) == 0) {
    uint64_t v38 = 0;
  }
  uint64_t v39 = 0x10000;
  if ((v20 & v33) == 0) {
    uint64_t v39 = 0;
  }
  unint64_t v40 = v37 | v38 | v39;
  uint64_t v41 = 256;
  if ((v14 & v34) == 0) {
    uint64_t v41 = 0;
  }
  uint64_t v42 = v40 | v41 | v8;
  if ((*(void *)&v32 & 0xFFFFFFLL) == 0)
  {
    uint64_t v54 = result[1];
    *unint64_t result = 0;
    result[1] = 0;
    uint64_t v55 = result[3];
    if (v55)
    {
      if (v54)
      {
        uint64_t v143 = v42;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v55 + 16))(v55, v2);
        return (void *)v143;
      }
    }
  }
  return (void *)v42;
}

void IPC::Decoder::decode<WebCore::PaymentContact>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::PaymentContact,void>::decode((uint64_t)a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_1988101CC(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 16)) {
    WebCore::PaymentContact::~PaymentContact(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v26 = *((void *)a2 + 3);
    if (v26)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v26 + 16))(v26, v5, v4);
        uint64_t v25 = *(void *)a2;
        unint64_t v24 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = 0;
      }
    }
    goto LABEL_20;
  }
  unsigned int v8 = (unint64_t *)(v5 + v6);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v24 = v4;
    uint64_t v25 = 0;
LABEL_20:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v27 = *((void *)a2 + 3);
    if (v27 && v24) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25);
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
LABEL_37:
    uint64_t v42 = *(void *)a2;
    uint64_t v43 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result)
    {
      if (v43) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v42);
      }
    }
    return result;
  }
  unint64_t v9 = *v8;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  if (v9 >= 0x2762)
  {
    do
    {
      IPC::Decoder::decode<WebCore::ApplePayShippingMethod>(a2, (uint64_t)&v44);
      if (!v52) {
        goto LABEL_36;
      }
      if (HIDWORD(v54) == v54)
      {
        WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplePayShippingMethod>((unsigned int *)&v53, (unint64_t)&v44);
      }
      else
      {
        int v28 = HIDWORD(v54) + 1;
        uint64_t v29 = v53 + 104 * HIDWORD(v54);
        uint64_t v30 = v44;
        uint64_t v44 = 0;
        *(void *)uint64_t v29 = v30;
        uint64_t v31 = v45;
        uint64_t v45 = 0;
        *(void *)(v29 + 8) = v31;
        uint64_t v32 = v46;
        uint64_t v46 = 0;
        *(void *)(v29 + 16) = v32;
        uint64_t v33 = v47;
        uint64_t v47 = 0;
        *(void *)(v29 + 24) = v33;
        long long v34 = v49;
        long long v35 = v50;
        long long v36 = *(_OWORD *)v51;
        *(void *)(v29 + 93) = *(void *)&v51[13];
        *(_OWORD *)(v29 + 64) = v35;
        *(_OWORD *)(v29 + 80) = v36;
        *(_OWORD *)(v29 + 48) = v34;
        *(_OWORD *)(v29 + 32) = v48;
        HIDWORD(v54) = v28;
      }
      uint64_t result = std::__optional_destruct_base<WebCore::ApplePayShippingMethod,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v44, v10);
      --v9;
    }
    while (v9);
    unsigned int v37 = HIDWORD(v54);
    uint64_t v38 = (WTF::StringImpl *)v53;
    if (v54 > HIDWORD(v54))
    {
      uint64_t v39 = (WTF::StringImpl *)v53;
      if (HIDWORD(v54))
      {
        if (HIDWORD(v54) >= 0x2762763)
        {
          __break(0xC471u);
          return result;
        }
        uint64_t v40 = WTF::fastMalloc((WTF *)(104 * HIDWORD(v54)));
        LODWORD(v54) = 104 * v37 / 0x68;
        uint64_t v53 = v40;
        uint64_t v39 = v38;
        if ((WTF::StringImpl *)v40 != v38)
        {
          WTF::VectorMover<false,WebCore::ApplePayShippingMethod>::move(v38, (WTF::StringImpl *)((char *)v38 + 104 * v37), v40);
          uint64_t v39 = (WTF::StringImpl *)v53;
        }
      }
      if (v38)
      {
        if (v39 == v38)
        {
          uint64_t v53 = 0;
          LODWORD(v54) = 0;
        }
        WTF::fastFree(v38, a2);
        uint64_t v38 = (WTF::StringImpl *)v53;
      }
      else
      {
        uint64_t v38 = v39;
      }
    }
    uint64_t v53 = 0;
    *(void *)a1 = v38;
    int v22 = v54;
    int v21 = HIDWORD(v54);
    goto LABEL_18;
  }
  if (v9)
  {
    LODWORD(v54) = 104 * (int)v9 / 0x68u;
    uint64_t v53 = WTF::fastMalloc((WTF *)(104 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebCore::ApplePayShippingMethod>(a2, (uint64_t)&v44);
      if (!v52) {
        break;
      }
      if (HIDWORD(v54) == v54)
      {
        WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplePayShippingMethod>((unsigned int *)&v53, (unint64_t)&v44);
      }
      else
      {
        int v11 = HIDWORD(v54) + 1;
        uint64_t v12 = v53 + 104 * HIDWORD(v54);
        uint64_t v13 = v44;
        uint64_t v44 = 0;
        *(void *)uint64_t v12 = v13;
        uint64_t v14 = v45;
        uint64_t v45 = 0;
        *(void *)(v12 + 8) = v14;
        uint64_t v15 = v46;
        uint64_t v46 = 0;
        *(void *)(v12 + 16) = v15;
        uint64_t v16 = v47;
        uint64_t v47 = 0;
        *(void *)(v12 + 24) = v16;
        long long v17 = v49;
        long long v18 = v50;
        long long v19 = *(_OWORD *)v51;
        *(void *)(v12 + 93) = *(void *)&v51[13];
        *(_OWORD *)(v12 + 64) = v18;
        *(_OWORD *)(v12 + 80) = v19;
        *(_OWORD *)(v12 + 48) = v17;
        *(_OWORD *)(v12 + 32) = v48;
        HIDWORD(v54) = v11;
      }
      std::__optional_destruct_base<WebCore::ApplePayShippingMethod,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v44, v10);
      if (!--v9)
      {
        uint64_t v20 = v53;
        int v22 = v54;
        int v21 = HIDWORD(v54);
        goto LABEL_17;
      }
    }
LABEL_36:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    std::__optional_destruct_base<WebCore::ApplePayShippingMethod,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v44, v10);
    WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v41);
    goto LABEL_37;
  }
  int v21 = 0;
  int v22 = 0;
  uint64_t v20 = 0;
LABEL_17:
  uint64_t v53 = 0;
  *(void *)a1 = v20;
LABEL_18:
  uint64_t v54 = 0;
  *(_DWORD *)(a1 + 8) = v22;
  *(_DWORD *)(a1 + 12) = v21;
  *(unsigned char *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, a2);
}

void sub_1988105E0(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<WebCore::ApplePayShippingMethod,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  WTF::Vector<WebCore::ApplePayShippingMethod,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9 - 64, v11);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(WTF::StringImpl **)a2;
  unint64_t v6 = ((*(void *)(a2 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    unint64_t v21 = 0;
    int v22 = 0;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v23 = *(void *)(a2 + 24);
    if (v23)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v23 + 16))(v23, v5, v4);
        int v22 = *(WTF::StringImpl **)a2;
        unint64_t v21 = *(void *)(a2 + 8);
      }
      else
      {
        unint64_t v21 = 0;
        int v22 = 0;
      }
    }
    goto LABEL_20;
  }
  unsigned int v8 = (unint64_t *)((char *)v5 + v6);
  *(void *)(a2 + 16) = v8 + 1;
  if (!v5)
  {
    unint64_t v21 = v4;
    int v22 = 0;
LABEL_20:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v24 = *(void *)(a2 + 24);
    if (v24 && v21) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v24 + 16))(v24, v22);
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
LABEL_37:
    long long v36 = *(WTF::StringImpl **)a2;
    uint64_t v37 = *(void *)(a2 + 8);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t result = *(void *)(a2 + 24);
    if (result)
    {
      if (v37) {
        return (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v36);
      }
    }
    return result;
  }
  unint64_t v9 = *v8;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  if (v9 >= 0x3333)
  {
    do
    {
      IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v38, (WTF::StringImpl **)a2);
      if (!v46) {
        goto LABEL_36;
      }
      if (HIDWORD(v48) == v48)
      {
        WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplePayLineItem>((unsigned int *)&v47, (unint64_t)v38);
      }
      else
      {
        uint64_t v25 = v47 + 80 * HIDWORD(v48);
        *(unsigned char *)uint64_t v25 = v38[0];
        uint64_t v26 = v39;
        uint64_t v39 = 0;
        *(void *)(v25 + 8) = v26;
        uint64_t v27 = v40;
        uint64_t v40 = 0;
        *(void *)(v25 + 16) = v27;
        uint64_t v28 = v43;
        long long v29 = v41;
        *(_OWORD *)(v25 + 40) = v42;
        *(void *)(v25 + 56) = v28;
        *(_OWORD *)(v25 + 24) = v29;
        uint64_t v30 = v44;
        uint64_t v44 = 0;
        *(void *)(v25 + 64) = v30;
        *(_WORD *)(v25 + 72) = v45;
        ++HIDWORD(v48);
      }
      uint64_t result = std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v38, v10);
      --v9;
    }
    while (v9);
    unsigned int v31 = HIDWORD(v48);
    uint64_t v32 = (WTF::StringImpl *)v47;
    if (v48 > HIDWORD(v48))
    {
      uint64_t v33 = (WTF::StringImpl *)v47;
      if (HIDWORD(v48))
      {
        if (HIDWORD(v48) >= 0x3333334)
        {
          __break(0xC471u);
          return result;
        }
        uint64_t v34 = WTF::fastMalloc((WTF *)(80 * HIDWORD(v48)));
        LODWORD(v48) = 80 * v31 / 0x50;
        uint64_t v47 = v34;
        uint64_t v33 = v32;
        if ((WTF::StringImpl *)v34 != v32)
        {
          WTF::VectorMover<false,WebCore::ApplePayLineItem>::move(v32, (WTF::StringImpl *)((char *)v32 + 80 * v31), v34);
          uint64_t v33 = (WTF::StringImpl *)v47;
        }
      }
      if (v32)
      {
        if (v33 == v32)
        {
          uint64_t v47 = 0;
          LODWORD(v48) = 0;
        }
        WTF::fastFree(v32, (void *)a2);
        uint64_t v32 = (WTF::StringImpl *)v47;
      }
      else
      {
        uint64_t v32 = v33;
      }
    }
    uint64_t v47 = 0;
    *(void *)a1 = v32;
    int v19 = v48;
    int v18 = HIDWORD(v48);
    goto LABEL_18;
  }
  if (v9)
  {
    LODWORD(v48) = 80 * (int)v9 / 0x50u;
    uint64_t v47 = WTF::fastMalloc((WTF *)(80 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v38, (WTF::StringImpl **)a2);
      if (!v46) {
        break;
      }
      if (HIDWORD(v48) == v48)
      {
        WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplePayLineItem>((unsigned int *)&v47, (unint64_t)v38);
      }
      else
      {
        uint64_t v11 = v47 + 80 * HIDWORD(v48);
        *(unsigned char *)uint64_t v11 = v38[0];
        uint64_t v12 = v39;
        uint64_t v39 = 0;
        *(void *)(v11 + 8) = v12;
        uint64_t v13 = v40;
        uint64_t v40 = 0;
        *(void *)(v11 + 16) = v13;
        uint64_t v14 = v43;
        long long v15 = v41;
        *(_OWORD *)(v11 + 40) = v42;
        *(void *)(v11 + 56) = v14;
        *(_OWORD *)(v11 + 24) = v15;
        uint64_t v16 = v44;
        uint64_t v44 = 0;
        *(void *)(v11 + 64) = v16;
        *(_WORD *)(v11 + 72) = v45;
        ++HIDWORD(v48);
      }
      std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v38, v10);
      if (!--v9)
      {
        uint64_t v17 = v47;
        int v19 = v48;
        int v18 = HIDWORD(v48);
        goto LABEL_17;
      }
    }
LABEL_36:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v38, v10);
    WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v35);
    goto LABEL_37;
  }
  int v18 = 0;
  int v19 = 0;
  uint64_t v17 = 0;
LABEL_17:
  uint64_t v47 = 0;
  *(void *)a1 = v17;
LABEL_18:
  uint64_t v48 = 0;
  *(_DWORD *)(a1 + 8) = v19;
  *(_DWORD *)(a1 + 12) = v18;
  *(unsigned char *)(a1 + 16) = 1;
  return WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, (void *)a2);
}

void sub_198810A00(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<WebCore::ApplePayLineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 - 64, v5);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ApplePayLineItem>(uint64_t a1, WTF::StringImpl **a2)
{
  unint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = (unint64_t)a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7) {
    goto LABEL_57;
  }
  unsigned int v8 = (unsigned __int8 *)v5 + v7;
  a2[2] = (WTF::StringImpl *)(v8 + 1);
  if (!v5)
  {
    unint64_t v44 = v6;
    __int16 v45 = 0;
    goto LABEL_58;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2) {
    goto LABEL_59;
  }
  int v81 = 0;
  BOOL v78 = v9 != 0;
  while (1)
  {
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v87);
    IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v85);
    uint64_t v10 = a2[1];
    uint64_t v11 = *a2;
    unint64_t v12 = a2[2] - *a2;
    if ((unint64_t)v10 <= v12)
    {
      long long v49 = 0;
      long long v50 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v51 = a2[3];
      if (v51)
      {
        if (v10)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v51 + 16))(v51);
          long long v50 = *a2;
          long long v49 = a2[1];
        }
        else
        {
          long long v49 = 0;
          long long v50 = 0;
        }
      }
      goto LABEL_62;
    }
    uint64_t v13 = (unsigned __int8 *)v11 + v12;
    a2[2] = (WTF::StringImpl *)(v13 + 1);
    if (!v11)
    {
      long long v49 = v10;
      long long v50 = 0;
LABEL_62:
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      *a2 = 0;
      a2[1] = 0;
      char v52 = a2[3];
      if (v52)
      {
        if (v49)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v52 + 16))(v52, v50, v49);
          uint64_t v11 = *a2;
          uint64_t v10 = a2[1];
        }
        else
        {
          uint64_t v10 = 0;
          uint64_t v11 = 0;
        }
      }
      goto LABEL_63;
    }
    unsigned int v14 = *v13;
    if (v14 < 4)
    {
      unsigned int v82 = v14 | 0x100;
      goto LABEL_9;
    }
LABEL_63:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v53 = a2[3];
    if (v53 && v10) {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v53 + 16))(v53, v11);
    }
    unsigned int v82 = 0;
LABEL_9:
    uint64_t v15 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a2);
    char v80 = v16;
    uint64_t v77 = v15;
    uint64_t v17 = a2[1];
    int v18 = *a2;
    unint64_t v19 = a2[2] - *a2;
    if ((unint64_t)v17 <= v19)
    {
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v56 = a2[3];
      if (v56)
      {
        if (v17)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v56 + 16))(v56);
          uint64_t v55 = *a2;
          uint64_t v54 = a2[1];
        }
        else
        {
          uint64_t v54 = 0;
          uint64_t v55 = 0;
        }
      }
      goto LABEL_66;
    }
    uint64_t v20 = (unsigned __int8 *)v18 + v19;
    a2[2] = (WTF::StringImpl *)(v20 + 1);
    if (!v18)
    {
      uint64_t v54 = v17;
      uint64_t v55 = 0;
LABEL_66:
      uint64_t v17 = 0;
      int v18 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v57 = a2[3];
      if (v57)
      {
        if (v54)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v57 + 16))(v57, v55, v54);
          int v18 = *a2;
          uint64_t v17 = a2[1];
        }
        else
        {
          uint64_t v17 = 0;
          int v18 = 0;
        }
      }
      goto LABEL_67;
    }
    unsigned int v21 = *v20;
    if (v21 < 5)
    {
      unsigned int v22 = v21 | 0x100;
      goto LABEL_13;
    }
LABEL_67:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v58 = a2[3];
    if (v58)
    {
      if (v17)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v58 + 16))(v58, v18);
        unsigned int v22 = 0;
        int v18 = *a2;
        uint64_t v17 = a2[1];
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    int v18 = 0;
    unsigned int v22 = 0;
LABEL_13:
    unint64_t v23 = (((unint64_t)a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)v18;
    if ((unint64_t)v17 < v23 || (unint64_t)v17 - v23 <= 3)
    {
      uint64_t v59 = 0;
      int v60 = 0;
      *a2 = 0;
      a2[1] = 0;
      int v61 = a2[3];
      if (v61)
      {
        if (v17)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v61 + 16))(v61);
          int v60 = *a2;
          uint64_t v59 = a2[1];
        }
        else
        {
          uint64_t v59 = 0;
          int v60 = 0;
        }
      }
    }
    else
    {
      uint64_t v24 = (int *)(((unint64_t)a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      a2[2] = (WTF::StringImpl *)(v24 + 1);
      if (v18)
      {
        int v79 = 0;
        int v25 = *v24;
        LODWORD(v76) = v25;
        HIDWORD(v76) = v25 & 0xFFFFFF00;
        goto LABEL_17;
      }
      uint64_t v59 = v17;
      int v60 = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    int v62 = a2[3];
    if (v62 && v59) {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v62 + 16))(v62, v60, v59);
    }
    uint64_t v76 = 0;
    int v79 = 1;
LABEL_17:
    uint64_t v75 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a2);
    char v27 = v26;
    uint64_t v28 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a2);
    char v30 = v29;
    uint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v83);
    unint64_t v6 = (unint64_t)a2[1];
    uint64_t v5 = *a2;
    unint64_t v32 = a2[2] - *a2;
    if (v6 <= v32)
    {
      unint64_t v63 = 0;
      char v64 = 0;
      *a2 = 0;
      a2[1] = 0;
      char v65 = a2[3];
      if (v65)
      {
        if (v6)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v65 + 16))(v65);
          char v64 = *a2;
          unint64_t v63 = (unint64_t)a2[1];
        }
        else
        {
          unint64_t v63 = 0;
          char v64 = 0;
        }
      }
      goto LABEL_74;
    }
    uint64_t v33 = (unsigned __int8 *)v5 + v32;
    a2[2] = (WTF::StringImpl *)(v33 + 1);
    if (!v5)
    {
      unint64_t v63 = v6;
      char v64 = 0;
LABEL_74:
      unint64_t v6 = 0;
      uint64_t v5 = 0;
      *a2 = 0;
      a2[1] = 0;
      char v66 = a2[3];
      if (v66)
      {
        if (v63)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)v66 + 16))(v66, v64, v63);
          uint64_t v5 = *a2;
          unint64_t v6 = (unint64_t)a2[1];
        }
        else
        {
          unint64_t v6 = 0;
          uint64_t v5 = 0;
        }
      }
      goto LABEL_75;
    }
    if (*v33 < 2u)
    {
      if (!*v33)
      {
        int v37 = 0;
        int v38 = 0;
        unsigned int v36 = 0x10000;
        goto LABEL_29;
      }
      if (v6 <= v33 + 1 - (unsigned __int8 *)v5)
      {
        unint64_t v35 = 0;
        unsigned int v69 = 0;
        *a2 = 0;
        a2[1] = 0;
        unsigned int v70 = a2[3];
        if (v70)
        {
          (*(void (**)(WTF::StringImpl *))(*(void *)v70 + 16))(v70);
          unint64_t v35 = 0;
          uint64_t v5 = *a2;
          unint64_t v6 = (unint64_t)a2[1];
          int v74 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          unsigned int v69 = 0;
          if (v74)
          {
            if (v6)
            {
              (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v74 + 16))(v74, v5);
              unsigned int v69 = *a2;
              unint64_t v35 = (unint64_t)a2[1];
            }
          }
        }
      }
      else
      {
        a2[2] = (WTF::StringImpl *)(v33 + 2);
        unsigned int v34 = v33[1];
        if (v34 < 2)
        {
          LODWORD(v35) = v34 | 0x100;
          goto LABEL_24;
        }
        unint64_t v35 = v6;
        unsigned int v69 = v5;
      }
      *a2 = 0;
      a2[1] = 0;
      uint64_t result = a2[3];
      if (result)
      {
        if (!v35) {
          goto LABEL_24;
        }
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)result + 16))(result, v69, v35);
      }
      LODWORD(v35) = 0;
LABEL_24:
      unsigned int v36 = (v35 > 0xFF) << 16;
      if (v35 >= 0x100) {
        int v37 = v35;
      }
      else {
        int v37 = 0;
      }
      int v38 = 256;
      goto LABEL_29;
    }
LABEL_75:
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v6) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
    }
                                                                                                  + 16))(result, v5);
    unsigned int v36 = 0;
    int v37 = 0;
    int v38 = 0;
LABEL_29:
    if (!HIWORD(v36))
    {
      uint64_t v5 = *a2;
      unint64_t v6 = (unint64_t)a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t result = a2[3];
      if (result)
      {
        if (v6) {
          uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v5);
        }
      }
    }
    uint64_t v39 = *a2;
    if (!*a2) {
      break;
    }
    if (!v81)
    {
      if (v88)
      {
        uint64_t v40 = v87;
        unsigned int v87 = 0;
        if (v86)
        {
          long long v41 = v85;
          unsigned int v85 = 0;
          if (v82 > 0xFF)
          {
            if (v80)
            {
              if (v22 > 0xFF && !v79)
              {
                if (v27)
                {
                  if (v30)
                  {
                    if (v84)
                    {
                      unsigned int v42 = v37 | v36 | v38;
                      uint64_t v43 = v83;
                      unsigned int v83 = 0;
                      if (HIWORD(v42))
                      {
                        *(unsigned char *)a1 = v78;
                        *(void *)(a1 + 8) = v40;
                        *(void *)(a1 + 16) = v41;
                        *(unsigned char *)(a1 + 24) = v82;
                        *(void *)(a1 + 32) = v77;
                        *(unsigned char *)(a1 + 40) = v22;
                        *(_DWORD *)(a1 + 44) = v76 | HIDWORD(v76);
                        *(void *)(a1 + 48) = v75;
                        *(void *)(a1 + 56) = v28;
                        *(void *)(a1 + 64) = v43;
                        *(_WORD *)(a1 + 72) = v42;
                        *(unsigned char *)(a1 + 80) = 1;
                        goto LABEL_43;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_57:
    unint64_t v44 = 0;
    __int16 v45 = 0;
    *a2 = 0;
    a2[1] = 0;
    char v46 = a2[3];
    if (v46)
    {
      if (v6)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v46 + 16))(v46, v5);
        __int16 v45 = *a2;
        unint64_t v44 = (unint64_t)a2[1];
      }
      else
      {
        unint64_t v44 = 0;
        __int16 v45 = 0;
      }
    }
LABEL_58:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v47 = a2[3];
    if (v47)
    {
      if (v44)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)v47 + 16))(v47, v45, v44);
        uint64_t v5 = *a2;
        unint64_t v6 = (unint64_t)a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_59:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v48 = a2[3];
    if (v48 && v6)
    {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v48 + 16))(v48, v5);
      BOOL v78 = 0;
      int v71 = a2[3];
      int v72 = *a2;
      int v73 = a2[1];
      int v81 = 1;
      *a2 = 0;
      a2[1] = 0;
      if (v71 && v73)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v71 + 16))(v71, v72);
        goto LABEL_60;
      }
    }
    else
    {
LABEL_60:
      BOOL v78 = 0;
      int v81 = 1;
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 80) = 0;
  if (v84)
  {
    uint64_t result = v83;
    unsigned int v83 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_43:
  if (v86)
  {
    uint64_t result = v85;
    unsigned int v85 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (!v88 || (uint64_t result = v87, v87 = 0, !result))
  {
LABEL_52:
    if (v39) {
      return result;
    }
    goto LABEL_84;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_52;
  }
  uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
  if (!v39)
  {
LABEL_84:
    unsigned int v67 = *a2;
    unsigned int v68 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result)
    {
      if (v68) {
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
      }
                                                                                                  + 16))(result, v67);
    }
  }
  return result;
}

void sub_1988113E4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16, WTF::StringImpl *a17, char a18, WTF::StringImpl *a19, char a20)
{
  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100](v20, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<std::optional<WebCore::ApplePayRecurringPaymentRequest>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v9 = *((void *)a2 + 2);
  uint64_t v10 = *(WTF::StringImpl **)a2;
  unint64_t v11 = *((void *)a2 + 1);
  unint64_t v12 = v9 - (void)v10;
  if (v11 > v12)
  {
    uint64_t v13 = (unsigned __int8 *)v10 + v12;
    *((void *)a2 + 2) = v13 + 1;
    if (!v10)
    {
      unint64_t v44 = v11;
      __int16 v45 = 0;
      goto LABEL_63;
    }
    unsigned int v14 = *v13;
    if (v14 >= 2) {
      goto LABEL_67;
    }
    if (!v14)
    {
      LOBYTE(v64) = 0;
      char v85 = 0;
      std::__optional_move_base<WebCore::ApplePayRecurringPaymentRequest,false>::__optional_move_base[abi:sn180100](a1, &v64);
      *(unsigned char *)(a1 + 208) = 1;
      if (!v85) {
        goto LABEL_59;
      }
      goto LABEL_58;
    }
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v127);
    IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v118, (WTF::StringImpl **)a2);
    uint64_t v15 = (WTF::StringImpl *)v109;
    unint64_t v16 = *((void *)a2 + 1);
    uint64_t v17 = *(WTF::StringImpl **)a2;
    unint64_t v18 = *((void *)a2 + 2) - *(void *)a2;
    if (v16 <= v18)
    {
      unint64_t v52 = 0;
      uint64_t v53 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v54 = *((void *)a2 + 3);
      if (v54)
      {
        if (v16)
        {
          (*(void (**)(uint64_t))(*(void *)v54 + 16))(v54);
          uint64_t v53 = *(WTF::StringImpl **)a2;
          unint64_t v52 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v52 = 0;
          uint64_t v53 = 0;
        }
      }
    }
    else
    {
      unint64_t v19 = (unsigned __int8 *)v17 + v18;
      *((void *)a2 + 2) = v19 + 1;
      if (v17)
      {
        unsigned int v20 = *v19;
        if (v20 < 2)
        {
          if (!v20)
          {
            LOBYTE(v86) = 0;
            LOBYTE(v91) = 0;
            v109[0] = 0;
            char v116 = 0;
            goto LABEL_14;
          }
          IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)&v86, (WTF::StringImpl **)a2);
          if ((_BYTE)v91)
          {
            long long v21 = v87;
            long long v87 = 0uLL;
            long long v110 = v21;
            long long v111 = *(_OWORD *)v88;
            long long v112 = *(_OWORD *)&v88[16];
            uint64_t v22 = v89;
            uint64_t v89 = 0;
            uint64_t v113 = *(void *)&v88[32];
            uint64_t v114 = v22;
            __int16 v115 = v90;
            char v116 = 1;
            v109[0] = v86;
LABEL_14:
            char v117 = 1;
            std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v86, v17);
LABEL_17:
            IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v107);
            IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v105);
            IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v103);
            unint64_t v32 = *(WTF::StringImpl **)a2;
            if (!*(void *)a2)
            {
              int v37 = 0;
              LOBYTE(v64) = 0;
              char v85 = 0;
LABEL_31:
              if (v104)
              {
                int v38 = v103;
                int v103 = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2) {
                    WTF::StringImpl::destroy(v38, v27);
                  }
                  else {
                    *(_DWORD *)v38 -= 2;
                  }
                }
              }
              if (v106)
              {
                uint64_t v39 = v105;
                int v105 = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 2) {
                    WTF::StringImpl::destroy(v39, v27);
                  }
                  else {
                    *(_DWORD *)v39 -= 2;
                  }
                }
              }
              if (v108)
              {
                uint64_t v40 = v107;
                int v107 = 0;
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2) {
                    WTF::StringImpl::destroy(v40, v27);
                  }
                  else {
                    *(_DWORD *)v40 -= 2;
                  }
                }
              }
              if (v117) {
                std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v109, v27);
              }
              std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v118, v27);
              if (!v128 || (long long v41 = v127, v127 = 0, !v41))
              {
LABEL_52:
                if (!v32) {
                  goto LABEL_66;
                }
                goto LABEL_55;
              }
              if (*(_DWORD *)v41 != 2)
              {
                *(_DWORD *)v41 -= 2;
                goto LABEL_52;
              }
              WTF::StringImpl::destroy(v41, v23);
              if (v32)
              {
LABEL_55:
                *(void *)a1 = v64;
                *(unsigned char *)(a1 + 8) = v5;
                uint64_t v64 = 0;
                uint64_t v66 = 0;
                uint64_t v67 = 0;
                *(void *)(a1 + 16) = v62;
                *(void *)(a1 + 24) = v63;
                long long v42 = v69;
                *(_OWORD *)(a1 + 32) = v68;
                *(_OWORD *)(a1 + 48) = v42;
                uint64_t v71 = 0;
                *(void *)(a1 + 64) = v70;
                *(void *)(a1 + 72) = v61;
                *(_WORD *)(a1 + 80) = v4;
                *(unsigned char *)(a1 + 88) = 0;
                *(unsigned char *)(a1 + 168) = 0;
                if (v37)
                {
                  *(unsigned char *)(a1 + 88) = v6;
                  unint64_t v74 = 0;
                  unint64_t v75 = 0;
                  *(void *)(a1 + 96) = v60;
                  *(void *)(a1 + 104) = v59;
                  long long v43 = v77;
                  *(_OWORD *)(a1 + 112) = v76;
                  *(_OWORD *)(a1 + 128) = v43;
                  uint64_t v79 = 0;
                  *(void *)(a1 + 144) = v78;
                  *(void *)(a1 + 152) = v58;
                  *(_WORD *)(a1 + 160) = v57;
                  *(unsigned char *)(a1 + 168) = 1;
                }
                unsigned int v82 = 0;
                unsigned int v83 = 0;
                *(void *)(a1 + 176) = v15;
                *(void *)(a1 + 184) = v2;
                char v84 = 0;
                *(void *)(a1 + 192) = v3;
                *(unsigned char *)(a1 + 200) = 1;
                *(unsigned char *)(a1 + 208) = 1;
LABEL_58:
                WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)&v64, v23);
                goto LABEL_59;
              }
LABEL_66:
              uint64_t v10 = *(WTF::StringImpl **)a2;
              unint64_t v11 = *((void *)a2 + 1);
              goto LABEL_67;
            }
            if (v128)
            {
              uint64_t v33 = (uint64_t)v127;
              unsigned int v127 = 0;
              if (v126)
              {
                char v5 = v118[0];
                LOBYTE(v87) = v118[0];
                uint64_t v35 = v119;
                uint64_t v34 = v120;
                uint64_t v119 = 0;
                uint64_t v120 = 0;
                *(_OWORD *)&v88[8] = v121;
                *(_OWORD *)&v88[24] = v122;
                uint64_t v36 = v124;
                uint64_t v89 = v123;
                uint64_t v124 = 0;
                __int16 v4 = v125;
                __int16 v91 = v125;
                if (v117)
                {
                  char v92 = 0;
                  char v99 = 0;
                  if (v116)
                  {
                    char v6 = v109[0];
                    char v92 = v109[0];
                    unint64_t v29 = *((void *)&v110 + 1);
                    unint64_t v28 = v110;
                    long long v110 = 0uLL;
                    unsigned long long v93 = __PAIR128__(v29, v28);
                    long long v94 = v111;
                    long long v95 = v112;
                    uint64_t v30 = v114;
                    uint64_t v114 = 0;
                    uint64_t v96 = v113;
                    uint64_t v97 = v30;
                    __int16 v31 = v115;
                    __int16 v98 = v115;
                    char v99 = 1;
                  }
                  else
                  {
                    char v6 = 0;
                  }
                  if (v108)
                  {
                    uint64_t v15 = v107;
                    int v107 = 0;
                    if (v106)
                    {
                      uint64_t v2 = v105;
                      int v105 = 0;
                      if (v104)
                      {
                        uint64_t v3 = v103;
                        int v103 = 0;
                        uint64_t v63 = v34;
                        uint64_t v64 = v33;
                        char v65 = v118[0];
                        uint64_t v86 = 0;
                        *((void *)&v87 + 1) = 0;
                        *(void *)char v88 = 0;
                        uint64_t v66 = v35;
                        uint64_t v67 = v34;
                        long long v68 = v121;
                        long long v69 = v122;
                        uint64_t v90 = 0;
                        uint64_t v70 = v123;
                        uint64_t v71 = v36;
                        __int16 v72 = v125;
                        char v73 = 0;
                        char v81 = 0;
                        uint64_t v61 = v36;
                        uint64_t v62 = v35;
                        unint64_t v59 = v29;
                        unint64_t v60 = v28;
                        uint64_t v58 = v30;
                        __int16 v57 = v31;
                        if (v116)
                        {
                          char v73 = v6;
                          unsigned long long v93 = 0uLL;
                          unint64_t v74 = v28;
                          unint64_t v75 = v29;
                          long long v76 = v94;
                          long long v77 = v95;
                          uint64_t v97 = 0;
                          uint64_t v78 = v96;
                          uint64_t v79 = v30;
                          __int16 v80 = v31;
                          int v37 = 1;
                          char v81 = 1;
                        }
                        else
                        {
                          char v6 = 0;
                          int v37 = 0;
                        }
                        uint64_t v100 = 0;
                        uint64_t v101 = 0;
                        unsigned int v82 = v15;
                        unsigned int v83 = v2;
                        uint64_t v102 = 0;
                        char v84 = v3;
                        char v85 = 1;
                        WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest((WebCore::ApplePayRecurringPaymentRequest *)&v86, v27);
                        goto LABEL_31;
                      }
                    }
                  }
                }
              }
            }
            __break(1u);
            goto LABEL_62;
          }
          v109[0] = 0;
          char v117 = 0;
          std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v86, v17);
LABEL_16:
          uint64_t v24 = *(WTF::StringImpl **)a2;
          uint64_t v25 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v26 = *((void *)a2 + 3);
          if (v26 && v25) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v26 + 16))(v26, v24);
          }
          goto LABEL_17;
        }
LABEL_76:
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v56 = *((void *)a2 + 3);
        if (v56 && v16) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v56 + 16))(v56, v17);
        }
        v109[0] = 0;
        char v117 = 0;
        goto LABEL_16;
      }
      unint64_t v52 = v16;
      uint64_t v53 = 0;
    }
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v55 = *((void *)a2 + 3);
    if (v55)
    {
      if (v52)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v55 + 16))(v55, v53, v52);
        uint64_t v17 = *(WTF::StringImpl **)a2;
        unint64_t v16 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
      }
    }
    goto LABEL_76;
  }
LABEL_62:
  unint64_t v44 = 0;
  __int16 v45 = 0;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v46 = *((void *)a2 + 3);
  if (v46)
  {
    if (v11)
    {
      (*(void (**)(uint64_t))(*(void *)v46 + 16))(v46);
      __int16 v45 = *(WTF::StringImpl **)a2;
      unint64_t v44 = *((void *)a2 + 1);
    }
    else
    {
      unint64_t v44 = 0;
      __int16 v45 = 0;
    }
  }
LABEL_63:
  unint64_t v11 = 0;
  uint64_t v10 = 0;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v47 = *((void *)a2 + 3);
  if (!v47) {
    goto LABEL_67;
  }
  if (v44)
  {
    (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v47 + 16))(v47, v45, v44);
    goto LABEL_66;
  }
  unint64_t v11 = 0;
  uint64_t v10 = 0;
LABEL_67:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v48 = *((void *)a2 + 3);
  if (v48 && v11) {
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v48 + 16))(v48, v10);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 208) = 0;
LABEL_59:
  if (!*(unsigned char *)(a1 + 208))
  {
    long long v49 = *(WTF::StringImpl **)a2;
    uint64_t v50 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v51 = *((void *)a2 + 3);
    if (v51)
    {
      if (v50) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v51 + 16))(v51, v49);
      }
    }
  }
}

void sub_198811C14(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  if (*((unsigned char *)v2 + 208))
  {
    if (*((unsigned char *)v2 + 200)) {
      WebCore::ApplePayRecurringPaymentRequest::~ApplePayRecurringPaymentRequest(v2, a2);
    }
  }
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<std::optional<WebCore::ApplePayAutomaticReloadPaymentRequest>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v12 = *((void *)a2 + 2);
  uint64_t v13 = *(void *)a2;
  unint64_t v14 = *((void *)a2 + 1);
  unint64_t v15 = v12 - v13;
  if (v14 > v15)
  {
    unint64_t v16 = (unsigned __int8 *)(v13 + v15);
    *((void *)a2 + 2) = v16 + 1;
    if (!v13)
    {
      unint64_t v27 = v14;
      uint64_t v28 = 0;
      goto LABEL_41;
    }
    unsigned int v17 = *v16;
    if (v17 >= 2) {
      goto LABEL_45;
    }
    if (!v17)
    {
      LOBYTE(v36) = 0;
      char v46 = 0;
      std::__optional_move_base<WebCore::ApplePayAutomaticReloadPaymentRequest,false>::__optional_move_base[abi:sn180100]((unsigned char *)a1, (uint64_t)&v36);
      *(unsigned char *)(a1 + 120) = 1;
      if (!v46) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v72);
    IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v63, (WTF::StringImpl **)a2);
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v61);
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v59);
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v57);
    uint64_t v35 = *(void *)a2;
    if (!*(void *)a2)
    {
      LOBYTE(v36) = 0;
      char v46 = 0;
      goto LABEL_12;
    }
    if (v73)
    {
      unint64_t v19 = v72;
      __int16 v72 = 0;
      if (v71)
      {
        char v7 = v63[0];
        char v48 = v63[0];
        uint64_t v4 = v64;
        uint64_t v3 = v65;
        uint64_t v64 = 0;
        uint64_t v65 = 0;
        long long v50 = v66;
        long long v51 = v67;
        uint64_t v6 = v69;
        uint64_t v52 = v68;
        uint64_t v69 = 0;
        __int16 v5 = v70;
        __int16 v54 = v70;
        if (v62)
        {
          unsigned int v8 = v61;
          uint64_t v61 = 0;
          if (v60)
          {
            uint64_t v9 = v59;
            unint64_t v59 = 0;
            if (v58)
            {
              uint64_t v2 = v57;
              uint64_t v56 = 0;
              __int16 v57 = 0;
              uint64_t v36 = v19;
              char v37 = v63[0];
              long long v49 = 0u;
              *(void *)&long long v38 = v4;
              *((void *)&v38 + 1) = v3;
              long long v39 = v66;
              long long v40 = v67;
              uint64_t v47 = 0;
              uint64_t v53 = 0;
              uint64_t v41 = v68;
              uint64_t v42 = v6;
              __int16 v43 = v70;
              long long v55 = 0u;
              *(void *)&long long v44 = v8;
              *((void *)&v44 + 1) = v9;
              __int16 v45 = v2;
              char v46 = 1;
              WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&v47, v18);
LABEL_12:
              if (v58)
              {
                unsigned int v20 = v57;
                __int16 v57 = 0;
                if (v20)
                {
                  if (*(_DWORD *)v20 == 2) {
                    WTF::StringImpl::destroy(v20, v18);
                  }
                  else {
                    *(_DWORD *)v20 -= 2;
                  }
                }
              }
              if (v60)
              {
                uint64_t v22 = v59;
                unint64_t v59 = 0;
                if (v22)
                {
                  if (*(_DWORD *)v22 == 2) {
                    WTF::StringImpl::destroy(v22, v18);
                  }
                  else {
                    *(_DWORD *)v22 -= 2;
                  }
                }
              }
              if (v62)
              {
                unint64_t v23 = v61;
                uint64_t v61 = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2) {
                    WTF::StringImpl::destroy(v23, v18);
                  }
                  else {
                    *(_DWORD *)v23 -= 2;
                  }
                }
              }
              std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v63, v18);
              if (v73)
              {
                uint64_t v24 = v72;
                __int16 v72 = 0;
                if (v24)
                {
                  if (*(_DWORD *)v24 == 2) {
                    WTF::StringImpl::destroy(v24, v21);
                  }
                  else {
                    *(_DWORD *)v24 -= 2;
                  }
                }
              }
              if (v35)
              {
                uint64_t v25 = v36;
                uint64_t v36 = 0;
                *(void *)a1 = v25;
                *(unsigned char *)(a1 + 8) = v7;
                long long v38 = 0u;
                *(void *)(a1 + 16) = v4;
                *(void *)(a1 + 24) = v3;
                long long v26 = v40;
                *(_OWORD *)(a1 + 32) = v39;
                *(_OWORD *)(a1 + 48) = v26;
                uint64_t v42 = 0;
                *(void *)(a1 + 64) = v41;
                *(void *)(a1 + 72) = v6;
                *(_WORD *)(a1 + 80) = v5;
                long long v44 = 0u;
                *(void *)(a1 + 88) = v8;
                *(void *)(a1 + 96) = v9;
                __int16 v45 = 0;
                *(void *)(a1 + 104) = v2;
                *(unsigned char *)(a1 + 112) = 1;
                *(unsigned char *)(a1 + 120) = 1;
LABEL_36:
                WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest((WebCore::ApplePayAutomaticReloadPaymentRequest *)&v36, v21);
                goto LABEL_37;
              }
              goto LABEL_44;
            }
          }
        }
      }
    }
    __break(1u);
  }
  unint64_t v27 = 0;
  uint64_t v28 = 0;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v29 = *((void *)a2 + 3);
  if (v29)
  {
    if (v14)
    {
      (*(void (**)(uint64_t))(*(void *)v29 + 16))(v29);
      uint64_t v28 = *(void *)a2;
      unint64_t v27 = *((void *)a2 + 1);
    }
    else
    {
      unint64_t v27 = 0;
      uint64_t v28 = 0;
    }
  }
LABEL_41:
  unint64_t v14 = 0;
  uint64_t v13 = 0;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v30 = *((void *)a2 + 3);
  if (!v30) {
    goto LABEL_45;
  }
  if (v27)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v30 + 16))(v30, v28, v27);
LABEL_44:
    uint64_t v13 = *(void *)a2;
    unint64_t v14 = *((void *)a2 + 1);
    goto LABEL_45;
  }
  unint64_t v14 = 0;
  uint64_t v13 = 0;
LABEL_45:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v31 = *((void *)a2 + 3);
  if (v31 && v14) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v13);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 120) = 0;
LABEL_37:
  if (!*(unsigned char *)(a1 + 120))
  {
    uint64_t v32 = *(void *)a2;
    uint64_t v33 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v34 = *((void *)a2 + 3);
    if (v34)
    {
      if (v33) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32);
      }
    }
  }
}

void sub_198812128(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (*((unsigned char *)v24 + 120))
  {
    if (*((unsigned char *)v24 + 112)) {
      WebCore::ApplePayAutomaticReloadPaymentRequest::~ApplePayAutomaticReloadPaymentRequest(v24, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<std::optional<WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(WTF::StringImpl *result, WTF::StringImpl **a2)
{
  uint64_t v3 = result;
  uint64_t v4 = a2[2];
  __int16 v5 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if ((unint64_t)v6 <= v7)
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v32 = a2[3];
    if (v32)
    {
      if (v6)
      {
        (*(void (**)(WTF::StringImpl *))(*(void *)v32 + 16))(v32);
        uint64_t v31 = *a2;
        uint64_t v30 = a2[1];
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = 0;
      }
    }
    goto LABEL_45;
  }
  unsigned int v8 = (unsigned __int8 *)v5 + v7;
  uint64_t v9 = (uint64_t)v5 + v7 + 1;
  a2[2] = (WTF::StringImpl *)v9;
  if (!v5)
  {
    uint64_t v30 = v6;
    uint64_t v31 = 0;
LABEL_45:
    uint64_t v6 = 0;
    __int16 v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v33 = a2[3];
    if (!v33) {
      goto LABEL_89;
    }
    if (!v30)
    {
      uint64_t v6 = 0;
      __int16 v5 = 0;
LABEL_89:
      *a2 = 0;
      a2[1] = 0;
      uint64_t v52 = a2[3];
      if (v52 && v6) {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v52 + 16))(v52, v5);
      }
      *(unsigned char *)uint64_t v3 = 0;
      *((unsigned char *)v3 + 24) = 0;
      uint64_t v53 = *a2;
      __int16 v54 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t result = a2[3];
      if (result)
      {
        if (v54) {
          return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v53);
        }
      }
      return result;
    }
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v33 + 16))(v33, v31, v30);
LABEL_88:
    __int16 v5 = *a2;
    uint64_t v6 = a2[1];
    goto LABEL_89;
  }
  unsigned int v10 = *v8;
  if (v10 >= 2) {
    goto LABEL_89;
  }
  if (!v10)
  {
    *(unsigned char *)uint64_t result = 0;
    *((unsigned char *)result + 16) = 0;
    *((unsigned char *)result + 24) = 1;
    return result;
  }
  unint64_t v11 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v5;
  if ((unint64_t)v6 < v11 || (unint64_t)v6 - v11 <= 7)
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t v34 = a2[3];
    if (v34)
    {
      (*(void (**)(WTF::StringImpl *))(*(void *)v34 + 16))(v34);
      uint64_t v35 = *a2;
      uint64_t v36 = a2[1];
      char v37 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v37)
      {
        if (v36) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v37 + 16))(v37, v35);
        }
      }
    }
    goto LABEL_88;
  }
  uint64_t v13 = (unint64_t *)((char *)v5 + v11);
  unint64_t v14 = *v13;
  a2[2] = (WTF::StringImpl *)(v13 + 1);
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  if (v14 < 0x6666)
  {
    if (!v14)
    {
      unint64_t v27 = 0;
      uint64_t v28 = 0;
LABEL_43:
      uint64_t v55 = v28;
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      char v57 = 1;
      WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v5);
      v56[0] = 0;
      v56[1] = 0;
      *(void *)uint64_t v3 = v27;
      *((void *)v3 + 1) = v55;
      *((unsigned char *)v3 + 16) = 1;
      uint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v56, v29);
      *((unsigned char *)v3 + 24) = 1;
      return result;
    }
    LODWORD(v65) = 40 * (int)v14 / 0x28u;
    uint64_t v64 = WTF::fastMalloc((WTF *)(40 * v14));
    while (1)
    {
      IPC::Decoder::decode<WebCore::ApplePayPaymentTokenContext>((uint64_t)&v58, (IPC::Decoder *)a2);
      if (!v63) {
        goto LABEL_87;
      }
      if (HIDWORD(v65) != v65) {
        break;
      }
      WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplePayPaymentTokenContext>((unsigned int *)&v64, (unint64_t)&v58);
      if (v63) {
        goto LABEL_18;
      }
LABEL_38:
      if (!--v14) {
        goto LABEL_39;
      }
    }
    int v15 = HIDWORD(v65) + 1;
    unint64_t v16 = (WTF::StringImpl **)(v64 + 40 * HIDWORD(v65));
    unsigned int v17 = v58;
    char v58 = 0;
    *unint64_t v16 = v17;
    unint64_t v18 = v59;
    unint64_t v59 = 0;
    v16[1] = v18;
    unint64_t v19 = v60;
    char v60 = 0;
    void v16[2] = v19;
    unsigned int v20 = v61;
    uint64_t v61 = 0;
    v16[3] = v20;
    long long v21 = v62;
    char v62 = 0;
    void v16[4] = v21;
    HIDWORD(v65) = v15;
LABEL_18:
    uint64_t v22 = v62;
    char v62 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v5);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    unint64_t v23 = v61;
    uint64_t v61 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v5);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    uint64_t v24 = v60;
    char v60 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v5);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    uint64_t v25 = v59;
    unint64_t v59 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v5);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    long long v26 = v58;
    char v58 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v5);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    goto LABEL_38;
  }
  do
  {
    IPC::Decoder::decode<WebCore::ApplePayPaymentTokenContext>((uint64_t)&v58, (IPC::Decoder *)a2);
    if (!v63)
    {
LABEL_87:
      WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v5);
      goto LABEL_88;
    }
    if (HIDWORD(v65) == v65)
    {
      uint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ApplePayPaymentTokenContext>((unsigned int *)&v64, (unint64_t)&v58);
      if (!v63) {
        goto LABEL_77;
      }
    }
    else
    {
      int v38 = HIDWORD(v65) + 1;
      long long v39 = (WTF::StringImpl **)(v64 + 40 * HIDWORD(v65));
      long long v40 = v58;
      char v58 = 0;
      *long long v39 = v40;
      uint64_t v41 = v59;
      unint64_t v59 = 0;
      v39[1] = v41;
      uint64_t v42 = v60;
      char v60 = 0;
      v39[2] = v42;
      __int16 v43 = v61;
      uint64_t v61 = 0;
      v39[3] = v43;
      long long v44 = v62;
      char v62 = 0;
      void v39[4] = v44;
      HIDWORD(v65) = v38;
    }
    __int16 v45 = v62;
    char v62 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, v5);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
    char v46 = v61;
    uint64_t v61 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2) {
        WTF::StringImpl::destroy(v46, v5);
      }
      else {
        *(_DWORD *)v46 -= 2;
      }
    }
    uint64_t v47 = v60;
    char v60 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2) {
        WTF::StringImpl::destroy(v47, v5);
      }
      else {
        *(_DWORD *)v47 -= 2;
      }
    }
    char v48 = v59;
    unint64_t v59 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2) {
        WTF::StringImpl::destroy(v48, v5);
      }
      else {
        *(_DWORD *)v48 -= 2;
      }
    }
    uint64_t result = v58;
    char v58 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
LABEL_77:
    --v14;
  }
  while (v14);
  unsigned int v49 = HIDWORD(v65);
  unint64_t v27 = (WTF *)v64;
  if (v65 <= HIDWORD(v65))
  {
LABEL_40:
    uint64_t v28 = v65;
    goto LABEL_43;
  }
  long long v50 = (WTF *)v64;
  if (!HIDWORD(v65))
  {
LABEL_83:
    if (v27)
    {
      if (v50 == v27)
      {
        uint64_t v64 = 0;
        LODWORD(v65) = 0;
      }
      WTF::fastFree(v27, v5);
LABEL_39:
      unint64_t v27 = (WTF *)v64;
    }
    else
    {
      unint64_t v27 = v50;
    }
    goto LABEL_40;
  }
  if (HIDWORD(v65) < 0x6666667)
  {
    long long v51 = (WTF *)WTF::fastMalloc((WTF *)(40 * HIDWORD(v65)));
    LODWORD(v65) = 40 * v49 / 0x28;
    uint64_t v64 = (uint64_t)v51;
    long long v50 = v27;
    if (v51 != v27)
    {
      WTF::VectorMover<false,WebCore::ApplePayPaymentTokenContext>::move(v27, (WTF *)((char *)v27 + 40 * v49), v51);
      long long v50 = (WTF *)v64;
    }
    goto LABEL_83;
  }
  __break(0xC471u);
  return result;
}

void sub_198812814(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, WTF::StringImpl *a17, WTF::StringImpl *a18, WTF::StringImpl *a19, char a20)
{
  if (a20)
  {
    if (a19)
    {
      if (*(_DWORD *)a19 == 2) {
        WTF::StringImpl::destroy(a19, a2);
      }
      else {
        *(_DWORD *)a19 -= 2;
      }
    }
    if (a18)
    {
      if (*(_DWORD *)a18 == 2) {
        WTF::StringImpl::destroy(a18, a2);
      }
      else {
        *(_DWORD *)a18 -= 2;
      }
    }
    if (a17)
    {
      if (*(_DWORD *)a17 == 2) {
        WTF::StringImpl::destroy(a17, a2);
      }
      else {
        *(_DWORD *)a17 -= 2;
      }
    }
    if (a16)
    {
      if (*(_DWORD *)a16 == 2) {
        WTF::StringImpl::destroy(a16, a2);
      }
      else {
        *(_DWORD *)a16 -= 2;
      }
    }
    if (a15)
    {
      if (*(_DWORD *)a15 == 2) {
        WTF::StringImpl::destroy(a15, a2);
      }
      else {
        *(_DWORD *)a15 -= 2;
      }
    }
  }
  WTF::Vector<WebCore::ApplePayPaymentTokenContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v20 - 48, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<std::optional<WebCore::ApplePayDeferredPaymentRequest>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v10 = *((void *)a2 + 2);
  uint64_t v11 = *(void *)a2;
  unint64_t v12 = *((void *)a2 + 1);
  unint64_t v13 = v10 - v11;
  if (v12 > v13)
  {
    unint64_t v14 = (unsigned __int8 *)(v11 + v13);
    *((void *)a2 + 2) = v14 + 1;
    if (!v11)
    {
      unint64_t v31 = v12;
      uint64_t v32 = 0;
      goto LABEL_48;
    }
    unsigned int v15 = *v14;
    if (v15 >= 2) {
      goto LABEL_52;
    }
    if (!v15)
    {
      LOBYTE(v42) = 0;
      char v53 = 0;
      std::__optional_move_base<WebCore::ApplePayDeferredPaymentRequest,false>::__optional_move_base[abi:sn180100]((unsigned char *)a1, (uint64_t)&v42);
      *(unsigned char *)(a1 + 136) = 1;
      if (!v53) {
        goto LABEL_44;
      }
      goto LABEL_43;
    }
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v82);
    IPC::Decoder::decode<WebCore::ApplePayLineItem>((uint64_t)v73, (WTF::StringImpl **)a2);
    uint64_t v16 = IPC::Decoder::decode<WTF::MonotonicTime>((uint64_t *)a2);
    unint64_t v18 = v17;
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v71);
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v69);
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v67);
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v65);
    uint64_t v41 = *(void *)a2;
    if (!*(void *)a2)
    {
      LOBYTE(v42) = 0;
      char v53 = 0;
      goto LABEL_14;
    }
    if (v83)
    {
      uint64_t v20 = v82;
      unsigned int v82 = 0;
      if (v81)
      {
        char v7 = v73[0];
        char v55 = v73[0];
        uint64_t v22 = v74;
        uint64_t v21 = v75;
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        long long v57 = v76;
        long long v58 = v77;
        uint64_t v5 = v79;
        uint64_t v59 = v78;
        uint64_t v79 = 0;
        __int16 v6 = v80;
        __int16 v61 = v80;
        if ((_BYTE)v18)
        {
          uint64_t v62 = v16;
          if (v72)
          {
            unint64_t v18 = v71;
            char v71 = 0;
            if (v70)
            {
              uint64_t v2 = v69;
              uint64_t v69 = 0;
              if (v68)
              {
                uint64_t v3 = v67;
                long long v67 = 0;
                if (v66)
                {
                  uint64_t v4 = v65;
                  uint64_t v65 = 0;
                  uint64_t v42 = v20;
                  char v43 = v73[0];
                  long long v56 = 0u;
                  uint64_t v39 = v22;
                  uint64_t v40 = v21;
                  *(void *)&long long v44 = v22;
                  *((void *)&v44 + 1) = v21;
                  long long v45 = v76;
                  long long v46 = v77;
                  uint64_t v54 = 0;
                  uint64_t v60 = 0;
                  uint64_t v47 = v78;
                  uint64_t v48 = v5;
                  __int16 v49 = v80;
                  uint64_t v50 = v16;
                  *(void *)&long long v51 = v18;
                  *((void *)&v51 + 1) = v2;
                  *(void *)&long long v52 = v3;
                  long long v63 = 0u;
                  long long v64 = 0u;
                  *((void *)&v52 + 1) = v4;
                  char v53 = 1;
                  WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&v54, v19);
LABEL_14:
                  if (v66)
                  {
                    unint64_t v23 = v65;
                    uint64_t v65 = 0;
                    if (v23)
                    {
                      if (*(_DWORD *)v23 == 2) {
                        WTF::StringImpl::destroy(v23, v19);
                      }
                      else {
                        *(_DWORD *)v23 -= 2;
                      }
                    }
                  }
                  if (v68)
                  {
                    uint64_t v25 = v67;
                    long long v67 = 0;
                    if (v25)
                    {
                      if (*(_DWORD *)v25 == 2) {
                        WTF::StringImpl::destroy(v25, v19);
                      }
                      else {
                        *(_DWORD *)v25 -= 2;
                      }
                    }
                  }
                  if (v70)
                  {
                    long long v26 = v69;
                    uint64_t v69 = 0;
                    if (v26)
                    {
                      if (*(_DWORD *)v26 == 2) {
                        WTF::StringImpl::destroy(v26, v19);
                      }
                      else {
                        *(_DWORD *)v26 -= 2;
                      }
                    }
                  }
                  if (v72)
                  {
                    unint64_t v27 = v71;
                    char v71 = 0;
                    if (v27)
                    {
                      if (*(_DWORD *)v27 == 2) {
                        WTF::StringImpl::destroy(v27, v19);
                      }
                      else {
                        *(_DWORD *)v27 -= 2;
                      }
                    }
                  }
                  std::__optional_destruct_base<WebCore::ApplePayLineItem,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v73, v19);
                  if (v83)
                  {
                    uint64_t v28 = v82;
                    unsigned int v82 = 0;
                    if (v28)
                    {
                      if (*(_DWORD *)v28 == 2) {
                        WTF::StringImpl::destroy(v28, v24);
                      }
                      else {
                        *(_DWORD *)v28 -= 2;
                      }
                    }
                  }
                  if (v41)
                  {
                    uint64_t v29 = v42;
                    uint64_t v42 = 0;
                    *(void *)a1 = v29;
                    *(unsigned char *)(a1 + 8) = v7;
                    long long v44 = 0u;
                    *(void *)(a1 + 16) = v39;
                    *(void *)(a1 + 24) = v40;
                    long long v30 = v46;
                    *(_OWORD *)(a1 + 32) = v45;
                    *(_OWORD *)(a1 + 48) = v30;
                    uint64_t v48 = 0;
                    *(void *)(a1 + 64) = v47;
                    *(void *)(a1 + 72) = v5;
                    *(_WORD *)(a1 + 80) = v6;
                    *(void *)(a1 + 88) = v16;
                    *(void *)(a1 + 96) = v18;
                    *(void *)(a1 + 104) = v2;
                    *(void *)(a1 + 112) = v3;
                    long long v51 = 0u;
                    long long v52 = 0u;
                    *(void *)(a1 + 120) = v4;
                    *(unsigned char *)(a1 + 128) = 1;
                    *(unsigned char *)(a1 + 136) = 1;
LABEL_43:
                    WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest((WebCore::ApplePayDeferredPaymentRequest *)&v42, v24);
                    goto LABEL_44;
                  }
                  goto LABEL_51;
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  unint64_t v31 = 0;
  uint64_t v32 = 0;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v33 = *((void *)a2 + 3);
  if (v33)
  {
    if (v12)
    {
      (*(void (**)(uint64_t))(*(void *)v33 + 16))(v33);
      uint64_t v32 = *(void *)a2;
      unint64_t v31 = *((void *)a2 + 1);
    }
    else
    {
      unint64_t v31 = 0;
      uint64_t v32 = 0;
    }
  }
LABEL_48:
  unint64_t v12 = 0;
  uint64_t v11 = 0;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v34 = *((void *)a2 + 3);
  if (!v34) {
    goto LABEL_52;
  }
  if (v31)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v34 + 16))(v34, v32, v31);
LABEL_51:
    uint64_t v11 = *(void *)a2;
    unint64_t v12 = *((void *)a2 + 1);
    goto LABEL_52;
  }
  unint64_t v12 = 0;
  uint64_t v11 = 0;
LABEL_52:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v35 = *((void *)a2 + 3);
  if (v35 && v12) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v11);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 136) = 0;
LABEL_44:
  if (!*(unsigned char *)(a1 + 136))
  {
    uint64_t v36 = *(void *)a2;
    uint64_t v37 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v38 = *((void *)a2 + 3);
    if (v38)
    {
      if (v37) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v36);
      }
    }
  }
}

void sub_198812D98(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (*((unsigned char *)v28 + 136))
  {
    if (*((unsigned char *)v28 + 128)) {
      WebCore::ApplePayDeferredPaymentRequest::~ApplePayDeferredPaymentRequest(v28, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198812EAC()
{
}

WTF *IPC::Decoder::decode<std::optional<WebCore::ApplePayDisbursementRequest>>(WTF *result, char **a2)
{
  uint64_t v4 = result;
  uint64_t v5 = a2[2];
  __int16 v6 = *a2;
  unint64_t v7 = (unint64_t)a2[1];
  unint64_t v8 = v5 - v6;
  if (v7 <= v8)
  {
    unint64_t v18 = 0;
    unint64_t v19 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v20 = a2[3];
    if (v20)
    {
      if (v7)
      {
        (*(void (**)(char *))(*(void *)v20 + 16))(v20);
        unint64_t v19 = *a2;
        unint64_t v18 = (unint64_t)a2[1];
      }
      else
      {
        unint64_t v18 = 0;
        unint64_t v19 = 0;
      }
    }
    goto LABEL_27;
  }
  uint64_t v9 = (unsigned __int8 *)&v6[v8];
  a2[2] = (char *)(v9 + 1);
  if (!v6)
  {
    unint64_t v18 = v7;
    unint64_t v19 = 0;
LABEL_27:
    unint64_t v7 = 0;
    __int16 v6 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v21 = a2[3];
    if (v21)
    {
      if (v18)
      {
        (*(void (**)(char *, char *, unint64_t))(*(void *)v21 + 16))(v21, v19, v18);
        __int16 v6 = *a2;
        unint64_t v7 = (unint64_t)a2[1];
      }
      else
      {
        unint64_t v7 = 0;
        __int16 v6 = 0;
      }
    }
    goto LABEL_67;
  }
  unsigned int v10 = *v9;
  if (v10 >= 2)
  {
LABEL_67:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v33 = a2[3];
    if (v33 && v7) {
      (*(void (**)(char *, char *))(*(void *)v33 + 16))(v33, v6);
    }
    *(unsigned char *)uint64_t v4 = 0;
    *((unsigned char *)v4 + 32) = 0;
    uint64_t v34 = *a2;
    uint64_t v35 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF *)a2[3];
    if (result && v35) {
      return (WTF *)(*(uint64_t (**)(WTF *, char *))(*(void *)result + 16))(result, v34);
    }
    return result;
  }
  if (*v9)
  {
    if (v7 <= v9 + 1 - (unsigned __int8 *)v6)
    {
      uint64_t v9 = 0;
      uint64_t v22 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v23 = a2[3];
      if (v23)
      {
        (*(void (**)(char *))(*(void *)v23 + 16))(v23);
        uint64_t v9 = 0;
        uint64_t v36 = *a2;
        uint64_t v37 = a2[1];
        uint64_t v38 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v22 = 0;
        if (v38)
        {
          if (v37)
          {
            (*(void (**)(char *, char *))(*(void *)v38 + 16))(v38, v36);
            uint64_t v22 = *a2;
            uint64_t v9 = (unsigned __int8 *)a2[1];
          }
        }
      }
    }
    else
    {
      uint64_t v11 = v9 + 2;
      a2[2] = (char *)(v9 + 2);
      LODWORD(v9) = v9[1];
      if (v9 < 2)
      {
        if (!v9)
        {
          int v17 = 0;
          unsigned int v15 = 0;
          unsigned int v10 = 1;
          goto LABEL_52;
        }
        uint64_t v9 = (unsigned __int8 *)(((unint64_t)(v11 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v6);
        if (v7 >= (unint64_t)v9 && v7 - (unint64_t)v9 > 7)
        {
          unint64_t v13 = (WTF **)((unint64_t)(v11 + 7) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v14 = *v13;
          a2[2] = (char *)(v13 + 1);
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          if ((unint64_t)v14 >= 0x100000)
          {
            unsigned int v15 = 0;
            LODWORD(v2) = 0;
            while (1)
            {
              uint64_t result = (WTF *)IPC::Decoder::decode<WebCore::FetchHeadersGuard>(a2);
              __int16 v39 = (__int16)result;
              LODWORD(v9) = (unsigned __int16)result;
              if ((unsigned __int16)result < 0x100u) {
                break;
              }
              if (v2 == v41)
              {
                uint64_t result = (WTF *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, (WTF *)(v2 + 1), (unint64_t)&v39);
                LODWORD(v2) = HIDWORD(v41);
                unsigned int v15 = v40;
                *((unsigned char *)v40 + HIDWORD(v41)) = *(unsigned char *)result;
              }
              else
              {
                *((unsigned char *)v15 + v2) = (_BYTE)result;
              }
              uint64_t v2 = (v2 + 1);
              HIDWORD(v41) = v2;
              unint64_t v14 = (WTF *)((char *)v14 - 1);
              if (!v14)
              {
                if (v41 <= v2) {
                  goto LABEL_73;
                }
                if (v2)
                {
                  LODWORD(v41) = v2;
                  uint64_t result = (WTF *)WTF::fastRealloc(v15, (void *)v2);
                  uint64_t v40 = result;
                  goto LABEL_73;
                }
                goto LABEL_72;
              }
            }
            unsigned int v15 = v40;
            if (!v40) {
              goto LABEL_49;
            }
          }
          else
          {
            if (!v14)
            {
              LODWORD(v9) = 0;
              unsigned int v15 = 0;
              LODWORD(v2) = 0;
              goto LABEL_25;
            }
            unsigned int v15 = (WTF *)WTF::fastMalloc(v14);
            LODWORD(v2) = 0;
            LODWORD(v41) = v14;
            uint64_t v40 = v15;
            while (1)
            {
              uint64_t result = (WTF *)IPC::Decoder::decode<WebCore::FetchHeadersGuard>(a2);
              __int16 v39 = (__int16)result;
              if ((unsigned __int16)result < 0x100u) {
                break;
              }
              if (v2 == v41)
              {
                uint64_t result = (WTF *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, (WTF *)(v2 + 1), (unint64_t)&v39);
                LODWORD(v2) = HIDWORD(v41);
                unsigned int v15 = v40;
                *((unsigned char *)v40 + HIDWORD(v41)) = *(unsigned char *)result;
              }
              else
              {
                *((unsigned char *)v15 + v2) = (_BYTE)result;
              }
              LODWORD(v2) = v2 + 1;
              HIDWORD(v41) = v2;
              unint64_t v14 = (WTF *)((char *)v14 - 1);
              if (!v14)
              {
                LODWORD(v9) = v41;
                goto LABEL_25;
              }
            }
          }
          uint64_t v40 = 0;
          LODWORD(v41) = 0;
          WTF::fastFree(v15, v6);
        }
        else
        {
          *a2 = 0;
          a2[1] = 0;
          uint64_t v25 = a2[3];
          if (v25)
          {
            (*(void (**)(char *))(*(void *)v25 + 16))(v25);
            long long v26 = *a2;
            unint64_t v27 = a2[1];
            uint64_t v28 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            if (v28)
            {
              if (v27) {
                (*(void (**)(char *, char *))(*(void *)v28 + 16))(v28, v26);
              }
            }
          }
        }
LABEL_49:
        uint64_t v29 = *a2;
        long long v30 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        unint64_t v31 = a2[3];
        if (v31 && v30) {
          (*(void (**)(char *, char *))(*(void *)v31 + 16))(v31, v29);
        }
        goto LABEL_50;
      }
      uint64_t v9 = (unsigned __int8 *)v7;
      uint64_t v22 = v6;
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t v24 = a2[3];
    if (v24 && v9) {
      (*(void (**)(char *, char *, unsigned __int8 *))(*(void *)v24 + 16))(v24, v22, v9);
    }
LABEL_50:
    __int16 v6 = *a2;
    uint64_t v32 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF *)a2[3];
    if (result && v32) {
      uint64_t result = (WTF *)(*(uint64_t (**)(WTF *, char *))(*(void *)result + 16))(result, v6);
    }
    unsigned int v15 = 0;
    int v17 = 1;
LABEL_52:
    while (*a2)
    {
      if (!v17)
      {
        if (v10)
        {
          *(unsigned char *)uint64_t v4 = 0;
          *((unsigned char *)v4 + 16) = 0;
          char v16 = 1;
        }
        else
        {
          *(void *)uint64_t v4 = v15;
          *((_DWORD *)v4 + 2) = v9;
          *((_DWORD *)v4 + 3) = v2;
          char v16 = 1;
          *((unsigned char *)v4 + 16) = 1;
        }
        goto LABEL_57;
      }
      __break(1u);
LABEL_72:
      uint64_t v40 = 0;
      LODWORD(v41) = 0;
      uint64_t result = (WTF *)WTF::fastFree(v15, v6);
LABEL_73:
      unsigned int v15 = v40;
      LODWORD(v9) = v41;
      LODWORD(v2) = HIDWORD(v41);
LABEL_25:
      int v17 = 0;
      unsigned int v10 = 0;
    }
    __int16 v6 = 0;
    if (((v17 | v10) & 1) == 0 && v15)
    {
      WTF::fastFree(v15, 0);
      __int16 v6 = *a2;
    }
    unint64_t v7 = (unint64_t)a2[1];
    goto LABEL_67;
  }
  char v16 = 0;
  *(unsigned char *)uint64_t result = 0;
LABEL_57:
  *((unsigned char *)v4 + 24) = v16;
  *((unsigned char *)v4 + 32) = 1;
  return result;
}

void sub_198813440(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11)
{
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::PaymentMethod,void>::decode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v12[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (PAL::PassKitCoreLibrary((PAL *)1))
  {
    uint64_t v4 = (const void *)((uint64_t (*)(void))*MEMORY[0x1E4FB62F0])();
    v12[0] = v4;
    if (v4) {
      CFRetain(v4);
    }
    WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)v9, v12, 1);
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)(a1 + 56), v9);
    IPC::decodeRequiringAllowedClasses<PKPaymentMethod,PKPaymentMethod*>((uint64_t *)a1, (uint64_t)&v10);
    if (v9[0]) {
      WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable((const void **)v9[0], v5);
    }
    CFTypeRef v6 = v12[0];
    v12[0] = 0;
    if (v6) {
      CFRelease(v6);
    }
    if (*(void *)a1 && v11)
    {
      WebCore::PaymentMethod::PaymentMethod();
      unint64_t v7 = v9[1];
      *(void *)a2 = MEMORY[0x1E4FB6B40] + 16;
      *(void *)(a2 + 8) = v7;
      if (v7) {
        CFRetain(v7);
      }
      *(unsigned char *)(a2 + 16) = 1;
      WebCore::PaymentMethod::~PaymentMethod((WebCore::PaymentMethod *)v9);
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 16) = 0;
    }
    if (v11)
    {
      CFTypeRef v8 = v10;
      CFTypeRef v10 = 0;
      if (v8) {
        CFRelease(v8);
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void sub_1988135B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, char a12, uint64_t a13)
{
  WebCore::PaymentMethod::~PaymentMethod((WebCore::PaymentMethod *)&a9);
  if (a12)
  {
    CFTypeRef v14 = cf;
    CFTypeRef cf = 0;
    if (v14) {
      CFRelease(v14);
    }
  }
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::Payment,void>::encode(IPC::Encoder *a1, WebCore::Payment *this)
{
  WebCore::Payment::pkPayment((uint64_t *)&cf, this);
  IPC::encodeObjectDirectly<PKPayment>(a1, (objc_object *)cf);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_19881366C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::Payment,void>::decode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v17[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (PAL::PassKitCoreLibrary((PAL *)1))
  {
    uint64_t v4 = (const void *)((uint64_t (*)(void))*MEMORY[0x1E4FB6288])();
    v17[0] = v4;
    if (v4) {
      CFRetain(v4);
    }
    WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v12, v17, 1);
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)(a1 + 56), &v12);
    IPC::decodeObjectDirectlyRequiringAllowedClasses<PKPayment>((uint64_t *)a1, (uint64_t)&cf);
    int v6 = v16;
    if ((_BYTE)v16)
    {
      CFTypeRef v7 = cf;
      CFTypeRef v13 = cf;
      if (cf)
      {
        CFRetain(cf);
        int v8 = 1;
        char v14 = 1;
        CFRelease(v7);
      }
      else
      {
        int v8 = 1;
        char v14 = 1;
      }
    }
    else
    {
      int v8 = 0;
      LOBYTE(v13) = 0;
      char v14 = 0;
    }
    uint64_t v9 = v12;
    if (v12) {
      goto LABEL_24;
    }
    while (1)
    {
      uint64_t v9 = v17[0];
      v17[0] = 0;
      if (v9) {
        CFRelease(v9);
      }
      if (!*(void *)a1)
      {
        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 16) = 0;
        if (!v8) {
          return;
        }
        goto LABEL_18;
      }
      if (v6) {
        break;
      }
      __break(1u);
LABEL_24:
      WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable((const void **)v9, v5);
    }
    WebCore::Payment::Payment();
    CFTypeRef v10 = v16;
    *(void *)a2 = MEMORY[0x1E4FB6BB8] + 16;
    *(void *)(a2 + 8) = v10;
    if (v10) {
      CFRetain(v10);
    }
    *(unsigned char *)(a2 + 16) = 1;
    WebCore::Payment::~Payment((WebCore::Payment *)&cf);
    if (v14)
    {
LABEL_18:
      CFTypeRef v11 = v13;
      CFTypeRef v13 = 0;
      if (v11) {
        CFRelease(v11);
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void sub_198813834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void **a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, CFTypeRef cf)
{
  CFRelease(v18);
  if (a10) {
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(a10, v20);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::PaymentContact,void>::encode(IPC::Encoder *a1, WebCore::PaymentContact *this)
{
  WebCore::PaymentContact::pkContact((uint64_t *)&cf, this);
  IPC::encodeObjectDirectly<PKContact>(a1, (PKContact *)cf);
  CFTypeRef v3 = cf;
  CFTypeRef cf = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_198813900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::PaymentContact,void>::decode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v12[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (PAL::PassKitCoreLibrary((PAL *)1))
  {
    uint64_t v4 = (const void *)((uint64_t (*)(void))*MEMORY[0x1E4FB6280])();
    v12[0] = v4;
    if (v4) {
      CFRetain(v4);
    }
    WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)v9, v12, 1);
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)(a1 + 56), v9);
    IPC::decodeRequiringAllowedClasses<PKContact,PKContact*>(a1, (uint64_t)&v10);
    int v6 = v9[0];
    if (v9[0]) {
      goto LABEL_19;
    }
    while (1)
    {
      int v6 = v12[0];
      v12[0] = 0;
      if (v6) {
        CFRelease(v6);
      }
      if (!*(void *)a1)
      {
        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 16) = 0;
        goto LABEL_12;
      }
      if (v11) {
        break;
      }
      __break(1u);
LABEL_19:
      WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable((const void **)v6, v5);
    }
    WebCore::PaymentContact::PaymentContact();
    CFTypeRef v7 = v9[1];
    *(void *)a2 = MEMORY[0x1E4FB6B48] + 16;
    *(void *)(a2 + 8) = v7;
    if (v7) {
      CFRetain(v7);
    }
    *(unsigned char *)(a2 + 16) = 1;
    WebCore::PaymentContact::~PaymentContact((WebCore::PaymentContact *)v9);
LABEL_12:
    if (v11)
    {
      CFTypeRef v8 = v10;
      CFTypeRef v10 = 0;
      if (v8) {
        CFRelease(v8);
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void sub_198813A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, char a12, CFTypeRef a13)
{
  WebCore::PaymentContact::~PaymentContact((WebCore::PaymentContact *)&a9);
  if (a12)
  {
    CFTypeRef v14 = cf;
    CFTypeRef cf = 0;
    if (v14) {
      CFRelease(v14);
    }
  }
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebCore::PaymentMerchantSession,void>::encode(IPC::Encoder *this, CFTypeRef *a2)
{
  CFTypeRef v3 = (objc_object *)*a2;
  if (*a2) {
    CFRetain(*a2);
  }
  IPC::encodeObjectDirectly<PKPaymentMerchantSession>(this, v3);
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_198813B38(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebCore::PaymentMerchantSession,void>::decode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (PAL::PassKitCoreLibrary((PAL *)1))
  {
    uint64_t v4 = (const void *)((uint64_t (*)(void))*MEMORY[0x1E4FB63C0])();
    cf[0] = v4;
    if (v4) {
      CFRetain(v4);
    }
    WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v8, cf, 1);
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)(a1 + 56), &v8);
    IPC::decodeRequiringAllowedClasses<PKPaymentMerchantSession,PKPaymentMerchantSession*>((uint64_t *)a1, (uint64_t)&v9);
    int v6 = v8;
    if (v8) {
      goto LABEL_16;
    }
    while (1)
    {
      int v6 = cf[0];
      cf[0] = 0;
      if (v6) {
        CFRelease(v6);
      }
      if (!*(void *)a1) {
        break;
      }
      if (v10)
      {
        *(void *)a2 = v9;
        *(unsigned char *)(a2 + 8) = 1;
        return;
      }
      __break(1u);
LABEL_16:
      WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable((const void **)v6, v5);
    }
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    if (v10)
    {
      CFTypeRef v7 = v9;
      CFTypeRef v9 = 0;
      if (v7) {
        CFRelease(v7);
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_198813C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::CallbackID,void>::decode@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (!*a1)
  {
LABEL_5:
    *a2 = 0;
    a2[8] = 0;
    return result;
  }
  if (v5)
  {
    if ((unint64_t)(result - 1) < 0xFFFFFFFFFFFFFFFELL)
    {
      *(void *)a2 = result;
      a2[8] = 1;
      return result;
    }
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::DebuggableInfoData,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4 = (char *)(a2 + 32);
  char v6 = *(unsigned char *)a2;
  IPC::Encoder::operator<<<BOOL>(a1, &v6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
  return IPC::Encoder::operator<<<BOOL>(a1, v4);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::DebuggableInfoData,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *((void *)a1 + 1);
  char v5 = *(WTF::StringImpl **)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v6) {
    goto LABEL_27;
  }
  CFTypeRef v7 = (unsigned __int8 *)v5 + v6;
  *((void *)a1 + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v20 = v4;
    uint64_t v21 = 0;
    goto LABEL_28;
  }
  unsigned int v8 = *v7;
  if (v8 >= 5) {
    goto LABEL_29;
  }
  for (unsigned int i = v8 | 0x100; ; unsigned int i = 0)
  {
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v33);
    IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v31);
    uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v29);
    unint64_t v4 = *((void *)a1 + 1);
    char v11 = *(WTF::StringImpl **)a1;
    unint64_t v12 = *((void *)a1 + 2) - *(void *)a1;
    if (v4 <= v12) {
      break;
    }
    CFTypeRef v13 = (unsigned __int8 *)v11 + v12;
    *((void *)a1 + 2) = v13 + 1;
    if (!v11)
    {
      unint64_t v25 = v4;
      long long v26 = 0;
      goto LABEL_32;
    }
    unsigned int v14 = *v13;
    if (v14 > 1) {
      goto LABEL_33;
    }
    int v15 = 0;
    BOOL v16 = v14 != 0;
LABEL_9:
    if (i > 0xFF)
    {
      if (v34)
      {
        int v17 = v33;
        uint64_t v33 = 0;
        if (v32)
        {
          unint64_t v18 = v31;
          unint64_t v31 = 0;
          if (v30)
          {
            unint64_t v19 = v29;
            uint64_t v29 = 0;
            if (!v15)
            {
              *(unsigned char *)a2 = i;
              *(void *)(a2 + 8) = v17;
              *(void *)(a2 + 16) = v18;
              *(void *)(a2 + 24) = v19;
              *(unsigned char *)(a2 + 32) = v16;
              *(unsigned char *)(a2 + 40) = 1;
              goto LABEL_15;
            }
          }
        }
      }
    }
    __break(1u);
LABEL_27:
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v22 = *((void *)a1 + 3);
    if (v22)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
        uint64_t v21 = *(WTF::StringImpl **)a1;
        unint64_t v20 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
      }
    }
LABEL_28:
    unint64_t v4 = 0;
    char v5 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v23 = *((void *)a1 + 3);
    if (v23)
    {
      if (v20)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v23 + 16))(v23, v21, v20);
        char v5 = *(WTF::StringImpl **)a1;
        unint64_t v4 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v4 = 0;
        char v5 = 0;
      }
    }
LABEL_29:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v24 = *((void *)a1 + 3);
    if (v24 && v4) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v24 + 16))(v24, v5);
    }
  }
  unint64_t v25 = 0;
  long long v26 = 0;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v27 = *((void *)a1 + 3);
  if (v27)
  {
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
      long long v26 = *(WTF::StringImpl **)a1;
      unint64_t v25 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v25 = 0;
      long long v26 = 0;
    }
  }
LABEL_32:
  unint64_t v4 = 0;
  char v11 = 0;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v28 = *((void *)a1 + 3);
  if (v28)
  {
    if (v25)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v28 + 16))(v28, v26, v25);
      char v11 = *(WTF::StringImpl **)a1;
      unint64_t v4 = *((void *)a1 + 1);
    }
    else
    {
      unint64_t v4 = 0;
      char v11 = 0;
    }
  }
LABEL_33:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
  if (result)
  {
    if (v4)
    {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result
                                                                                                  + 16))(result, v11);
      if (*(void *)a1)
      {
        BOOL v16 = 0;
        int v15 = 1;
        goto LABEL_9;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 40) = 0;
  if (v30)
  {
    uint64_t result = v29;
    uint64_t v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_15:
  if (v32)
  {
    uint64_t result = v31;
    unint64_t v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v34)
  {
    uint64_t result = v33;
    uint64_t v33 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198814124(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *IPC::ArgumentCoder<WebCore::DisplayList::SetCTM,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::AffineTransform,void>::decode(a1, (uint64_t)v10);
  if (v11)
  {
    if (*a1)
    {
      long long v5 = v10[1];
      *(_OWORD *)a2 = v10[0];
      *(_OWORD *)(a2 + 16) = v5;
      *(_OWORD *)(a2 + 32) = v10[2];
      char v6 = 1;
LABEL_4:
      *(unsigned char *)(a2 + 48) = v6;
      return result;
    }
LABEL_10:
    char v6 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_4;
  }
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (void *)a1[3];
  if (result) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    goto LABEL_10;
  }
  uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v7);
  if (!*a1) {
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::SetInlineFillColor,void>::decode(uint64_t *a1)
{
  uint64_t v2 = IPC::ArgumentCoder<WebCore::DisplayList::Rotate,void>::decode(a1);
  if ((v2 & 0xFF00000000) != 0)
  {
    if (*a1) {
      return v2 | 0x100000000;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(a1[3], v4);
        if (*a1) {
          __break(1u);
        }
      }
      return 0;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::DisplayList::SetInlineStroke,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  IPC::ArgumentCoder<std::optional<WebCore::PackedColor::RGBA>,void>::encode<IPC::Encoder,std::optional<WebCore::PackedColor::RGBA>>(a1, (uint64_t)&v5);
  uint64_t v5 = a2[1];
  return IPC::ArgumentCoder<std::optional<float>,void>::encode<IPC::Encoder,std::optional<float>>(a1, (uint64_t)&v5);
}

void *IPC::ArgumentCoder<WebCore::DisplayList::SetInlineStroke,void>::encode(void *result, uint64_t *a2)
{
  CFTypeRef v3 = result;
  uint64_t v15 = *a2;
  unint64_t v5 = result[1];
  unint64_t v4 = result[2];
  if ((v15 & 0xFF00000000) != 0)
  {
    if (v4 >= v5)
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v4) = 1;
      result[2] = v4 + 1;
    }
    uint64_t result = IPC::StreamConnectionEncoder::operator<<<int const&>(result, &v15);
    unint64_t v4 = v3[2];
  }
  else if (v4 >= v5)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v4++) = 0;
    result[2] = v4;
  }
  unint64_t v6 = v3[1];
  if (!*((unsigned char *)a2 + 12))
  {
    if (v4 < v6)
    {
      *(unsigned char *)(*v3 + v4) = 0;
      void v3[2] = v4 + 1;
      return result;
    }
    goto LABEL_20;
  }
  int v7 = *((_DWORD *)a2 + 2);
  if (v4 >= v6)
  {
    v3[1] = 0;
  }
  else
  {
    *(unsigned char *)(*v3 + v4++) = 1;
    void v3[2] = v4;
  }
  unint64_t v8 = *v3 + v4;
  unint64_t v9 = (v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v10 = v9 >= v8;
  unint64_t v11 = v9 - v8;
  if (v10)
  {
    unint64_t v12 = v11 + v4;
    unint64_t v13 = v12 + 4;
    if (v12 <= 0xFFFFFFFFFFFFFFFBLL && v13 <= v3[1])
    {
      *(_DWORD *)(*v3 + v12) = v7;
      void v3[2] = v13;
      return result;
    }
LABEL_20:
    v3[1] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::SetInlineStroke,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = IPC::ArgumentCoder<std::optional<WebCore::PackedColor::RGBA>,void>::decode<IPC::Decoder>(a1);
  uint64_t v6 = v5;
  if (!v5) {
    goto LABEL_9;
  }
  while (1)
  {
    uint64_t result = IPC::ArgumentCoder<std::optional<float>,void>::decode<IPC::Decoder>(a1);
    uint64_t v9 = v8;
    if (!v8)
    {
      uint64_t v15 = *a1;
      uint64_t v16 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v17 = a1[3];
      if (v17)
      {
        if (v16)
        {
          uint64_t v18 = result;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15);
          uint64_t v9 = 0;
          uint64_t result = v18;
        }
      }
    }
    uint64_t v10 = *a1;
    if (!*a1) {
      break;
    }
    if (v6 && v9)
    {
      *(void *)a2 = v4;
      *(void *)(a2 + 8) = result;
      LOBYTE(v10) = 1;
      goto LABEL_7;
    }
    __break(1u);
LABEL_9:
    uint64_t v11 = *a1;
    uint64_t v12 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13) {
      BOOL v14 = v12 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
    }
  }
  *(unsigned char *)a2 = 0;
LABEL_7:
  *(unsigned char *)(a2 + 16) = v10;
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<float>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<float>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::LineCap>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::StoredCredentialsPolicy,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

void *IPC::ArgumentCoder<WebCore::DisplayList::SetLineDash,void>::encode(void *a1, uint64_t a2)
{
  uint64_t result = IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, *(const void **)a2, *(unsigned int *)(a2 + 12));
  uint64_t v5 = a1[2];
  unint64_t v6 = *a1 + v5;
  unint64_t v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v10 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v10) = *(_DWORD *)(a2 + 16);
      a1[2] = v11;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::SetLineDash,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &__src);
  uint64_t result = IPC::Decoder::decode<float>(a1);
  uint64_t v6 = *(void *)a1;
  if (!*(void *)a1) {
    goto LABEL_14;
  }
  LOBYTE(v6) = v13;
  if (!v13 || (int v7 = result, (result & 0xFF00000000) == 0))
  {
    __break(1u);
LABEL_14:
    *(unsigned char *)a2 = 0;
    goto LABEL_7;
  }
  unsigned int v8 = v12;
  if (v12)
  {
    if (v12 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    unint64_t v9 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    uint64_t result = (uint64_t)memcpy(v9, __src, 8 * v12);
  }
  else
  {
    unint64_t v9 = 0;
  }
  *(void *)a2 = v9;
  *(_DWORD *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 12) = v8;
  LOBYTE(v6) = 1;
  *(_DWORD *)(a2 + 16) = v7;
LABEL_7:
  *(unsigned char *)(a2 + 24) = v6;
  if (v13)
  {
    uint64_t result = (uint64_t)__src;
    if (__src)
    {
      uint64_t __src = 0;
      int v11 = 0;
      return WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

void sub_1988147E8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, char a13)
{
  if (a13)
  {
    if (a10) {
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<true,double,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16]) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_198814854(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16))
  {
    uint64_t v4 = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t *IPC::ArgumentCoder<WebCore::DisplayList::ClipRoundedRect,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode(a1, (uint64_t)v10);
  if (v11)
  {
    if (*a1)
    {
      long long v5 = v10[1];
      *(_OWORD *)a2 = v10[0];
      *(_OWORD *)(a2 + 16) = v5;
      *(_OWORD *)(a2 + 32) = v10[2];
      char v6 = 1;
LABEL_4:
      *(unsigned char *)(a2 + 48) = v6;
      return result;
    }
LABEL_10:
    char v6 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_4;
  }
  unint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (unint64_t *)a1[3];
  if (result) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    goto LABEL_10;
  }
  uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v7);
  if (!*a1) {
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::DisplayList::ClipToImageBuffer,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  *(void *)&long long v5 = *(void *)a2;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)&v5);
  long long v5 = *(_OWORD *)(a2 + 8);
  return IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)&v5);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::ClipToImageBuffer,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = *a1 + v2;
  unint64_t v4 = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (v5)
  {
    unint64_t v7 = v6 + v2;
    unint64_t v8 = v7 + 8;
    if (v7 > 0xFFFFFFFFFFFFFFF7 || v8 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(void *)(*a1 + v7) = *(void *)a2;
      a1[2] = v8;
    }
  }
  long long v11 = *(_OWORD *)(a2 + 8);
  return IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v11);
}

unint64_t *IPC::ArgumentCoder<WebCore::DisplayList::ClipToImageBuffer,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = *a1;
  unint64_t v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v14 = a1[3];
    if (v14)
    {
      if (v4)
      {
        (*(void (**)(unint64_t))(*(void *)v14 + 16))(v14);
        unint64_t v13 = *a1;
        unint64_t v12 = a1[1];
      }
      else
      {
        unint64_t v12 = 0;
        unint64_t v13 = 0;
      }
    }
    goto LABEL_13;
  }
  unint64_t v8 = (uint64_t *)(v5 + v6);
  a1[2] = (unint64_t)(v8 + 1);
  if (!v5)
  {
    unint64_t v12 = v4;
    unint64_t v13 = 0;
LABEL_13:
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v15 = a1[3];
    if (!v15) {
      goto LABEL_14;
    }
    if (!v12)
    {
      unint64_t v4 = 0;
      unint64_t v5 = 0;
      goto LABEL_14;
    }
    uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t, unint64_t, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
    unint64_t v5 = *a1;
    if (!*a1)
    {
      unint64_t v4 = a1[1];
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  uint64_t v9 = *v8;
  if ((unint64_t)(*v8 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
LABEL_14:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v16 = a1[3];
    if (v16 && v4) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v16 + 16))(v16, v5);
    }
    uint64_t result = IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v17);
    if (!*a1) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t result = IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v17);
  if (!*a1)
  {
LABEL_17:
    char v11 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_11;
  }
  if (!v18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  *(_OWORD *)(a2 + 8) = v17;
  *(void *)a2 = v9;
  char v11 = 1;
LABEL_11:
  *(unsigned char *)(a2 + 24) = v11;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::ClipOutToPath,void>::decode@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)IPC::ArgumentCoder<WebCore::Path,void>::decode(a1, a2, v13);
  if (!v16)
  {
    unint64_t v6 = *a1;
    unint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v7 != 0) {
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  if (*a1)
  {
    if (!v16) {
      __break(1u);
    }
    std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)v11, (uint64_t)v14);
    uint64_t result = std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)(a3 + 8), (uint64_t)v11);
    a3[72] = 1;
    if (v12 != -1) {
      uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v12])(&v9, v11);
    }
  }
  else
  {
    *a3 = 0;
    a3[72] = 0;
  }
  if (v16)
  {
    if (v15 != -1) {
      return ((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v15])(v10, v14);
    }
  }
  return result;
}

void sub_198814D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a33)
  {
    uint64_t v35 = *(unsigned int *)(v33 + 64);
    if (v35 != -1) {
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v35])(&a14, &a25);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::ClipPath,void>::encode(uint64_t *a1, WebCore::Path *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::Path,void>::encode(a1, a2);
  unint64_t v5 = a1[2];
  if (v5 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v5) = *((unsigned char *)a2 + 72);
    a1[2] = v5 + 1;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::ClipPath,void>::decode@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  IPC::ArgumentCoder<WebCore::Path,void>::decode(a1, a2, v16);
  if (!v19) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t result = IPC::Decoder::decode<WebCore::RotationDirection>(a1);
    if (!*a1)
    {
      *a3 = 0;
      a3[80] = 0;
      goto LABEL_7;
    }
    if (v19)
    {
      char v6 = result;
      if ((unsigned __int16)result > 0xFFu) {
        break;
      }
    }
    __break(1u);
LABEL_12:
    unint64_t v7 = *a1;
    unint64_t v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v9 = a1[3];
    if (v9) {
      BOOL v10 = v8 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v9 + 16))(v9, v7);
    }
  }
  std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)v13, (uint64_t)v17);
  BOOL v15 = v6 != 0;
  uint64_t result = std::__variant_detail::__impl<std::monostate,WebCore::PathSegment,WTF::DataRef<WebCore::PathImpl>>::__impl[abi:sn180100]((uint64_t)(a3 + 8), (uint64_t)v13);
  a3[72] = v15;
  a3[80] = 1;
  if (v14 != -1) {
    uint64_t result = ((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v14])(&v11, v13);
  }
LABEL_7:
  if (v19)
  {
    if (v18 != -1) {
      return ((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v18])(v12, v17);
    }
  }
  return result;
}

void sub_198814F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a32)
  {
    uint64_t v34 = *(unsigned int *)(v32 + 64);
    if (v34 != -1) {
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v34])(&a13, &a24);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawFilteredImageBuffer,void>::encode(IPC::Encoder *a1, long long *a2)
{
  long long v6 = *a2;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, (uint64_t)&v6);
  long long v6 = a2[1];
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)&v6);
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v6, *((void *)a2 + 4));
  IPC::ArgumentCoder<WebCore::Filter,void>::encode(a1, v6);
  return WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref((uint64_t *)&v6, v4);
}

void sub_19881506C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawFilteredImageBuffer,void>::encode(uint64_t *a1, long long *a2)
{
  long long v6 = *a2;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, (uint64_t)&v6);
  long long v6 = a2[1];
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v6);
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v6, *((void *)a2 + 4));
  IPC::ArgumentCoder<WebCore::Filter,void>::encode((WTF::StringImpl *)a1, v6);
  return WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref((uint64_t *)&v6, v4);
}

void sub_1988150F0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawFilteredImageBuffer,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, &v14);
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)v13);
  uint64_t result = IPC::Decoder::decode<WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>>((IPC::Decoder *)a1, (uint64_t)&v11);
  if (*a1)
  {
    if (v15 && v13[16] && v12)
    {
      WebCore::DisplayList::DrawFilteredImageBuffer::DrawFilteredImageBuffer();
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v9;
      uint64_t v6 = v10;
      uint64_t v10 = 0;
      *(void *)(a2 + 32) = v6;
      *(unsigned char *)(a2 + 40) = 1;
      uint64_t result = WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v10, v7);
      goto LABEL_6;
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 40) = 0;
LABEL_6:
  if (v12) {
    return WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v11, v5);
  }
  return result;
}

void sub_1988151D0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int16 a16, char a17, char a18)
{
  if ((_BYTE)a16) {
    WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&a15, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::Filter,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    return (uint64_t *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

WTF *IPC::ArgumentCoder<WebCore::DisplayList::DrawGlyphs,void>::encode(IPC::Encoder *a1, WTF **a2)
{
  unint64_t v3 = (const WebCore::PositionedGlyphs *)(a2 + 1);
  unint64_t v7 = *a2;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)&v7);
  WebCore::PositionedGlyphs::PositionedGlyphs((WebCore::PositionedGlyphs *)&v7, v3);
  IPC::ArgumentCoder<WebCore::PositionedGlyphs,void>::encode(a1, (uint64_t)&v7);
  unint64_t v5 = v9;
  if (v9)
  {
    long long v9 = 0;
    int v10 = 0;
    WTF::fastFree(v5, v4);
  }
  uint64_t result = v7;
  if (v7)
  {
    unint64_t v7 = 0;
    int v8 = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

void sub_1988152C0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void WebCore::PositionedGlyphs::~PositionedGlyphs(WebCore::PositionedGlyphs *this, void *a2)
{
  unint64_t v3 = (WTF *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  unint64_t v4 = *(WTF **)this;
  if (*(void *)this)
  {
    *(void ++*(_DWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v4, a2);
  }
}

WTF *IPC::ArgumentCoder<WebCore::DisplayList::DrawGlyphs,void>::encode(uint64_t *a1, void *a2)
{
  uint64_t v3 = a1[2];
  unint64_t v4 = *a1 + v3;
  unint64_t v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v8 + 8;
    if (v8 > 0xFFFFFFFFFFFFFFF7 || v9 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(void *)(*a1 + v8) = *a2;
      a1[2] = v9;
    }
  }
  WebCore::PositionedGlyphs::PositionedGlyphs((WebCore::PositionedGlyphs *)&v14, (const WebCore::PositionedGlyphs *)(a2 + 1));
  IPC::ArgumentCoder<WebCore::PositionedGlyphs,void>::encode(a1, (uint64_t)&v14);
  char v12 = v16;
  if (v16)
  {
    char v16 = 0;
    int v17 = 0;
    WTF::fastFree(v12, v11);
  }
  uint64_t result = v14;
  if (v14)
  {
    uint64_t v14 = 0;
    int v15 = 0;
    return (WTF *)WTF::fastFree(result, v11);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawGlyphs,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = (char *)*a1;
  unint64_t v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v12 = a1[3];
    if (v12)
    {
      if (v4)
      {
        (*(void (**)(unint64_t))(*(void *)v12 + 16))(v12);
        unint64_t v11 = *a1;
        unint64_t v10 = a1[1];
      }
      else
      {
        unint64_t v10 = 0;
        unint64_t v11 = 0;
      }
    }
    goto LABEL_13;
  }
  unint64_t v8 = &v5[v6];
  a1[2] = (unint64_t)(v8 + 8);
  if (!v5)
  {
    unint64_t v10 = v4;
    unint64_t v11 = 0;
LABEL_13:
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v13 = a1[3];
    if (!v13) {
      goto LABEL_14;
    }
    if (!v10)
    {
      unint64_t v4 = 0;
      unint64_t v5 = 0;
      goto LABEL_14;
    }
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
    unint64_t v5 = (char *)*a1;
    if (!*a1)
    {
      unint64_t v4 = a1[1];
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  if ((unint64_t)(*(void *)v8 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
LABEL_14:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v14 = a1[3];
    if (v14 && v4) {
      (*(void (**)(unint64_t, char *))(*(void *)v14 + 16))(v14, v5);
    }
    IPC::Decoder::decode<WebCore::PositionedGlyphs>(a1, (uint64_t)v22);
    if (!*a1) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  IPC::Decoder::decode<WebCore::PositionedGlyphs>(a1, (uint64_t)v22);
  if (!*a1)
  {
LABEL_17:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 56) = 0;
    return std::__optional_destruct_base<WebCore::PositionedGlyphs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v5);
  }
  if (!v22[48])
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  WebCore::DisplayList::DrawGlyphs::DrawGlyphs();
  *(void *)a2 = v15;
  *(void *)(a2 + 8) = v16;
  *(void *)(a2 + 16) = v17;
  *(void *)(a2 + 24) = v18;
  *(void *)(a2 + 32) = v19;
  *(void *)(a2 + 40) = v20;
  *(unsigned char *)(a2 + 48) = v21;
  *(unsigned char *)(a2 + 56) = 1;
  return std::__optional_destruct_base<WebCore::PositionedGlyphs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v22, v5);
}

void sub_1988155E4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__optional_destruct_base<WebCore::PositionedGlyphs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebCore::PositionedGlyphs>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::PositionedGlyphs,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 48))
  {
    unint64_t v4 = *a1;
    unint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_198815668(_Unwind_Exception *a1, void *a2)
{
  std::__optional_destruct_base<WebCore::PositionedGlyphs,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void *IPC::ArgumentCoder<WebCore::DisplayList::DrawDecomposedGlyphs,void>::encode(void *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(a1, &v5);
  uint64_t v5 = a2[1];
  return IPC::StreamConnectionEncoder::operator<<<unsigned long const&>(a1, &v5);
}

unint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawDisplayListItems,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::VectorArgumentCoder<false,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1);
  float v4 = *(float *)(a2 + 20);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 16));

  return IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawDisplayListItems,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::VectorArgumentCoder<false,std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(v23);
  if (!v24) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t result = (uint64_t)IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    uint64_t v6 = v5;
    if (!(_BYTE)v5)
    {
      unint64_t v14 = *a1;
      unint64_t v13 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v15 = a1[3];
      if (v15)
      {
        if (v13)
        {
          uint64_t v16 = v5;
          uint64_t v17 = result;
          (*(void (**)(unint64_t, unint64_t))(*(void *)v15 + 16))(v15, v14);
          uint64_t v6 = 0;
          uint64_t v5 = v16;
          uint64_t result = v17;
        }
      }
    }
    uint64_t v21 = result;
    int v22 = (int)v5;
    if (!*a1) {
      break;
    }
    if (v24 && v6)
    {
      WebCore::DisplayList::DrawDisplayListItems::DrawDisplayListItems();
      *(void *)a2 = v18;
      uint64_t v7 = v19;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      *(void *)(a2 + 8) = v7;
      *(void *)(a2 + 16) = v20;
      *(unsigned char *)(a2 + 24) = 1;
      uint64_t result = WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v8);
      goto LABEL_7;
    }
    __break(1u);
LABEL_11:
    unint64_t v9 = *a1;
    unint64_t v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v11 = a1[3];
    if (v11) {
      BOOL v12 = v10 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v11 + 16))(v11, v9);
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
LABEL_7:
  if (v24) {
    return WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v5);
  }
  return result;
}

void sub_198815CAC(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 - 24)) {
    WTF::Vector<std::variant<WebCore::DisplayList::ApplyDeviceScaleFactor,WebCore::DisplayList::BeginTransparencyLayer,WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,WebCore::DisplayList::ClearRect,WebCore::DisplayList::ClearDropShadow,WebCore::DisplayList::Clip,WebCore::DisplayList::ClipRoundedRect,WebCore::DisplayList::ClipOut,WebCore::DisplayList::ClipOutRoundedRect,WebCore::DisplayList::ClipOutToPath,WebCore::DisplayList::ClipPath,WebCore::DisplayList::ClipToImageBuffer,WebCore::DisplayList::ConcatenateCTM,WebCore::DisplayList::DrawControlPart,WebCore::DisplayList::DrawDotsForDocumentMarker,WebCore::DisplayList::DrawEllipse,WebCore::DisplayList::DrawFilteredImageBuffer,WebCore::DisplayList::DrawFocusRingPath,WebCore::DisplayList::DrawFocusRingRects,WebCore::DisplayList::DrawGlyphs,WebCore::DisplayList::DrawDecomposedGlyphs,WebCore::DisplayList::DrawDisplayListItems,WebCore::DisplayList::DrawImageBuffer,WebCore::DisplayList::DrawLine,WebCore::DisplayList::DrawLinesForText,WebCore::DisplayList::DrawNativeImage,WebCore::DisplayList::DrawPath,WebCore::DisplayList::DrawPattern,WebCore::DisplayList::DrawRect,WebCore::DisplayList::DrawSystemImage,WebCore::DisplayList::EndTransparencyLayer,WebCore::DisplayList::FillCompositedRect,WebCore::DisplayList::FillEllipse,WebCore::DisplayList::FillPathSegment,WebCore::DisplayList::FillPath,WebCore::DisplayList::FillRect,WebCore::DisplayList::FillRectWithColor,WebCore::DisplayList::FillRectWithGradient,WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,WebCore::DisplayList::FillRectWithRoundedHole,WebCore::DisplayList::FillRoundedRect,WebCore::DisplayList::ResetClip,WebCore::DisplayList::Restore,WebCore::DisplayList::Rotate,WebCore::DisplayList::Save,WebCore::DisplayList::Scale,WebCore::DisplayList::SetCTM,WebCore::DisplayList::SetInlineFillColor,WebCore::DisplayList::SetInlineStroke,WebCore::DisplayList::SetLineCap,WebCore::DisplayList::SetLineDash,WebCore::DisplayList::SetLineJoin,WebCore::DisplayList::SetMiterLimit,WebCore::DisplayList::SetState,WebCore::DisplayList::StrokeEllipse,WebCore::DisplayList::StrokeLine,WebCore::DisplayList::StrokePathSegment,WebCore::DisplayList::StrokePath,WebCore::DisplayList::StrokeRect,WebCore::DisplayList::Translate,WebCore::DisplayList::FillLine,WebCore::DisplayList::FillArc,WebCore::DisplayList::FillClosedArc,WebCore::DisplayList::FillQuadCurve,WebCore::DisplayList::FillBezierCurve,WebCore::DisplayList::StrokeArc,WebCore::DisplayList::StrokeClosedArc,WebCore::DisplayList::StrokeQuadCurve,WebCore::DisplayList::StrokeBezierCurve,WebCore::DisplayList::ApplyFillPattern,WebCore::DisplayList::ApplyStrokePattern>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 - 40, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawImageBuffer,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  *(void *)&long long v6 = *(void *)a2;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)&v6);
  long long v6 = *(_OWORD *)(a2 + 8);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)&v6);
  long long v6 = *(_OWORD *)(a2 + 24);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)&v6);
  __int16 v4 = *(_WORD *)(a2 + 40);
  BYTE2(v6) = *(unsigned char *)(a2 + 42);
  LOWORD(v6) = v4;
  return IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::encode(a1, &v6);
}

void *IPC::ArgumentCoder<WebCore::DisplayList::DrawImageBuffer,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  unint64_t v5 = *a1 + v4;
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v9 + 8;
    if (v9 > 0xFFFFFFFFFFFFFFF7 || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(void *)(*a1 + v9) = *(void *)a2;
      a1[2] = v10;
    }
  }
  long long v14 = *(_OWORD *)(a2 + 8);
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v14);
  long long v14 = *(_OWORD *)(a2 + 24);
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v14);
  __int16 v12 = *(_WORD *)(a2 + 40);
  BYTE2(v14) = *(unsigned char *)(a2 + 42);
  LOWORD(v14) = v12;
  return IPC::StreamConnectionEncoder::operator<<<WebCore::ImagePaintingOptions>(a1, &v14);
}

void *IPC::StreamConnectionEncoder::operator<<<WebCore::ImagePaintingOptions>(void *result, unsigned char *a2)
{
  unint64_t v2 = result[2];
  if (v2 >= result[1]) {
    goto LABEL_7;
  }
  *(unsigned char *)(*result + v2) = a2[1] & 0xF;
  result[2] = v2 + 1;
  if (v2 + 1 >= result[1]
    || (*(unsigned char *)(*result + v2 + 1) = *a2 & 0x1F, result[2] = v2 + 2, v2 + 2 >= result[1])
    || (*(unsigned char *)(*result + v2 + 2) = *a2 >> 5, result[2] = v2 + 3, v2 + 3 >= result[1])
    || (*(unsigned char *)(*result + v2 + 3) = *(unsigned __int16 *)a2 >> 12, result[2] = v2 + 4, v2 + 4 >= result[1]))
  {
LABEL_7:
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2 + 4) = a2[2] & 0xF;
    result[2] = v2 + 5;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawImageBuffer,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = *a1;
  unint64_t v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    unint64_t v8 = (uint64_t *)(v5 + v6);
    a1[2] = (unint64_t)(v8 + 1);
    if (v5)
    {
      uint64_t v9 = *v8;
      if ((unint64_t)(*v8 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
        goto LABEL_23;
      }
      int v10 = 0;
      goto LABEL_9;
    }
    unint64_t v16 = v4;
    unint64_t v17 = 0;
  }
  else
  {
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      goto LABEL_31;
    }
  }
  while (1)
  {
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v18 = a1[3];
    if (v18)
    {
      if (v16)
      {
        uint64_t result = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t))(*(void *)v18 + 16))(v18, v17, v16);
        unint64_t v5 = *a1;
        if (*a1) {
          goto LABEL_30;
        }
        unint64_t v4 = a1[1];
      }
      else
      {
        unint64_t v4 = 0;
        unint64_t v5 = 0;
      }
    }
LABEL_23:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v19 = a1[3];
    if (v19 && v4) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v19 + 16))(v19, v5);
    }
    uint64_t v9 = 0;
    int v10 = 1;
LABEL_9:
    IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v23);
    IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v21);
    uint64_t result = IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::decode(a1);
    unsigned int v12 = BYTE3(result);
    if (!BYTE3(result))
    {
      unint64_t v14 = *a1;
      unint64_t v4 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v15 = a1[3];
      if (v15)
      {
        if (v4)
        {
          unsigned int v20 = result;
          (*(void (**)(unint64_t, unint64_t))(*(void *)v15 + 16))(v15, v14);
          unsigned int v12 = 0;
          uint64_t result = v20;
        }
      }
    }
    unint64_t v13 = *a1;
    if (!*a1) {
      break;
    }
    if (!v10 && v24 && v22 && v12)
    {
      *(_OWORD *)(a2 + 8) = v23;
      *(_OWORD *)(a2 + 24) = v21;
      *(void *)a2 = v9;
      *(_WORD *)(a2 + 40) = result;
      *(unsigned char *)(a2 + 42) = BYTE2(result);
      LOBYTE(v13) = 1;
      goto LABEL_16;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)result + 16))(result);
      unint64_t v17 = *a1;
      unint64_t v16 = a1[1];
    }
    else
    {
      unint64_t v16 = 0;
      unint64_t v17 = 0;
    }
  }
  *(unsigned char *)a2 = 0;
LABEL_16:
  *(unsigned char *)(a2 + 48) = v13;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawNativeImage,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v8 = *(void *)a2;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, &v8);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)(a2 + 24));
  __int16 v4 = *(_WORD *)(a2 + 40);
  char v7 = *(unsigned char *)(a2 + 42);
  __int16 v6 = v4;
  return IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::encode(a1, &v6);
}

void *IPC::ArgumentCoder<WebCore::DisplayList::DrawNativeImage,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2];
  unint64_t v4 = *a1 + v3;
  unint64_t v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6)
  {
    unint64_t v8 = v7 + v3;
    unint64_t v9 = v7 + v3 + 8;
    if (v8 > 0xFFFFFFFFFFFFFFF7 || v9 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(void *)(v2 + v8) = *(void *)a2;
      a1[2] = v9;
      uint64_t v2 = *a1;
      unint64_t v3 = v9;
    }
  }
  int v11 = *(_DWORD *)(a2 + 12);
  unint64_t v12 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v13 = v12 - (v2 + v3);
  if (v12 >= v2 + v3)
  {
    unint64_t v14 = v12 - v2;
    unint64_t v15 = v13 + v3 + 4;
    if (v14 > 0xFFFFFFFFFFFFFFFBLL || v15 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v14) = *(_DWORD *)(a2 + 8);
      a1[2] = v15;
      uint64_t v2 = *a1;
      unint64_t v3 = v15;
    }
  }
  unint64_t v17 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v18 = v17 - (v2 + v3);
  if (v17 >= v2 + v3)
  {
    unint64_t v19 = v17 - v2;
    unint64_t v20 = v18 + v3 + 4;
    if (v19 > 0xFFFFFFFFFFFFFFFBLL || v20 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v19) = v11;
      a1[2] = v20;
      uint64_t v2 = *a1;
      unint64_t v3 = v20;
    }
  }
  int v22 = *(_DWORD *)(a2 + 20);
  unint64_t v23 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v24 = v23 - (v2 + v3);
  if (v23 >= v2 + v3)
  {
    unint64_t v25 = v23 - v2;
    unint64_t v26 = v24 + v3 + 4;
    if (v25 > 0xFFFFFFFFFFFFFFFBLL || v26 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v25) = *(_DWORD *)(a2 + 16);
      a1[2] = v26;
      uint64_t v2 = *a1;
      unint64_t v3 = v26;
    }
  }
  unint64_t v28 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v29 = v28 - (v2 + v3);
  if (v28 >= v2 + v3)
  {
    unint64_t v30 = v28 - v2;
    unint64_t v31 = v29 + v3 + 4;
    if (v30 > 0xFFFFFFFFFFFFFFFBLL || v31 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v30) = v22;
      a1[2] = v31;
      uint64_t v2 = *a1;
      unint64_t v3 = v31;
    }
  }
  int v33 = *(_DWORD *)(a2 + 28);
  uint64_t v34 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v34 >= v2 + v3)
  {
    uint64_t v35 = (char *)v34 - v2;
    if ((unint64_t)v34 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v35 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *uint64_t v34 = *(_DWORD *)(a2 + 24);
      a1[2] = (uint64_t)(v35 + 4);
      uint64_t v2 = *a1;
      unint64_t v3 = (unint64_t)(v35 + 4);
    }
  }
  uint64_t v36 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v36 >= v2 + v3)
  {
    uint64_t v37 = (char *)v36 - v2;
    if ((unint64_t)v36 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v37 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *uint64_t v36 = v33;
      a1[2] = (uint64_t)(v37 + 4);
      uint64_t v2 = *a1;
      unint64_t v3 = (unint64_t)(v37 + 4);
    }
  }
  int v38 = *(_DWORD *)(a2 + 36);
  __int16 v39 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v39 >= v2 + v3)
  {
    uint64_t v40 = (char *)v39 - v2;
    if ((unint64_t)v39 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v40 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *__int16 v39 = *(_DWORD *)(a2 + 32);
      a1[2] = (uint64_t)(v40 + 4);
      uint64_t v2 = *a1;
      unint64_t v3 = (unint64_t)(v40 + 4);
    }
  }
  uint64_t v41 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v41 >= v2 + v3)
  {
    uint64_t v42 = (char *)v41 - v2;
    if ((unint64_t)v41 - v2 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v42 + 4) > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *uint64_t v41 = v38;
      a1[2] = (uint64_t)(v42 + 4);
    }
  }
  __int16 v43 = *(_WORD *)(a2 + 40);
  char v46 = *(unsigned char *)(a2 + 42);
  __int16 v45 = v43;
  return IPC::StreamConnectionEncoder::operator<<<WebCore::ImagePaintingOptions>(a1, &v45);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawSystemImage,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::SystemImage,void>::encode(a1, *(WebCore::ARKitBadgeSystemImage **)a2);
  int v5 = *(_DWORD *)(a2 + 12);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[2];
  unint64_t v8 = *a1 + v7;
  unint64_t v9 = (v8 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v10 = v9 >= v8;
  unint64_t v11 = v9 - v8;
  if (v10)
  {
    unint64_t v12 = v11 + v7;
    unint64_t v13 = v11 + v7 + 4;
    if (v12 > 0xFFFFFFFFFFFFFFFBLL || v13 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v6 + v12) = *(_DWORD *)(a2 + 8);
      a1[2] = v13;
      uint64_t v6 = *a1;
      unint64_t v7 = v13;
    }
  }
  unint64_t v15 = (v6 + v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = v15 - (v6 + v7);
  if (v15 >= v6 + v7)
  {
    unint64_t v17 = v15 - v6;
    unint64_t v18 = v16 + v7 + 4;
    if (v17 > 0xFFFFFFFFFFFFFFFBLL || v18 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v6 + v17) = v5;
      a1[2] = v18;
      uint64_t v6 = *a1;
      unint64_t v7 = v18;
    }
  }
  int v20 = *(_DWORD *)(a2 + 20);
  unint64_t v21 = (v6 + v7 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = v21 - (v6 + v7);
  if (v21 >= v6 + v7)
  {
    unint64_t v23 = v21 - v6;
    unint64_t v24 = v22 + v7 + 4;
    if (v23 > 0xFFFFFFFFFFFFFFFBLL || v24 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v6 + v23) = *(_DWORD *)(a2 + 16);
      a1[2] = v24;
      uint64_t v6 = *a1;
      unint64_t v7 = v24;
    }
  }
  unint64_t v26 = (_DWORD *)((v6 + v7 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v26 >= v6 + v7)
  {
    unint64_t v27 = (unint64_t)v26 - v6 + 4;
    if ((unint64_t)v26 - v6 > 0xFFFFFFFFFFFFFFFBLL || v27 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *unint64_t v26 = v20;
      a1[2] = v27;
    }
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawSystemImage,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::Ref<WebCore::SystemImage,WTF::RawPtrTraits<WebCore::SystemImage>,WTF::DefaultRefDerefTraits<WebCore::SystemImage>>>(a1, &v7);
  uint64_t result = IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v5);
  if (*a1)
  {
    if (v8 && v6)
    {
      uint64_t result = (unint64_t *)v7;
      ++*(_DWORD *)(v7 + 8);
      *(_OWORD *)(a2 + 8) = v5;
      *(void *)a2 = result;
      *(unsigned char *)(a2 + 24) = 1;
      uint64_t v7 = 0;
LABEL_5:
      if (*((_DWORD *)result + 2) == 1) {
        return (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 8))(result);
      }
      --*((_DWORD *)result + 2);
      return result;
    }
    __break(1u);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (v8)
  {
    uint64_t result = (unint64_t *)v7;
    uint64_t v7 = 0;
    if (result) {
      goto LABEL_5;
    }
  }
  return result;
}

void sub_198816668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13, char a14)
{
  if (a14 && a13)
  {
    if (a13[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)a13 + 8))(a13);
    }
    else {
      --a13[2];
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::Decoder::decode<WTF::Ref<WebCore::SystemImage,WTF::RawPtrTraits<WebCore::SystemImage>,WTF::DefaultRefDerefTraits<WebCore::SystemImage>>>@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<WebCore::SystemImage,void>::decode(a1, a2);
  if (!a2[8])
  {
    unint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  unint64_t v3 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(a1, &v5);
  uint64_t v5 = a2[1];
  return IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(v3, &v5);
}

unint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  uint64_t v6 = v5;
  if (!v5) {
    goto LABEL_9;
  }
  while (1)
  {
    unint64_t result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    uint64_t v9 = v8;
    if (!v8)
    {
      unint64_t v15 = *a1;
      unint64_t v16 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v17 = a1[3];
      if (v17)
      {
        if (v16)
        {
          unint64_t v18 = result;
          (*(void (**)(unint64_t, unint64_t))(*(void *)v17 + 16))(v17, v15);
          uint64_t v9 = 0;
          unint64_t result = v18;
        }
      }
    }
    unint64_t v10 = *a1;
    if (!*a1) {
      break;
    }
    if (v6 && v9)
    {
      *(void *)a2 = v4;
      *(void *)(a2 + 8) = result;
      LOBYTE(v10) = 1;
      goto LABEL_7;
    }
    __break(1u);
LABEL_9:
    unint64_t v11 = *a1;
    unint64_t v12 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v13 = a1[3];
    if (v13) {
      BOOL v14 = v12 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11);
    }
  }
  *(unsigned char *)a2 = 0;
LABEL_7:
  *(unsigned char *)(a2 + 16) = v10;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawPattern,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  *(void *)&long long v8 = *(void *)a2;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, (uint64_t *)&v8);
  long long v8 = *(_OWORD *)(a2 + 8);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)&v8);
  long long v8 = *(_OWORD *)(a2 + 24);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)&v8);
  IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(a1, (double *)(a2 + 40));
  float v4 = *(float *)(a2 + 92);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 88));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v4);
  float v5 = *(float *)(a2 + 100);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 96));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v5);
  __int16 v6 = *(_WORD *)(a2 + 104);
  BYTE2(v8) = *(unsigned char *)(a2 + 106);
  LOWORD(v8) = v6;
  return IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::encode(a1, &v8);
}

void *IPC::ArgumentCoder<WebCore::DisplayList::DrawPattern,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  unint64_t v5 = *a1 + v4;
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (v7)
  {
    unint64_t v9 = v8 + v4;
    unint64_t v10 = v9 + 8;
    if (v9 > 0xFFFFFFFFFFFFFFF7 || v10 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(void *)(*a1 + v9) = *(void *)a2;
      a1[2] = v10;
    }
  }
  long long v16 = *(_OWORD *)(a2 + 8);
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v16);
  long long v16 = *(_OWORD *)(a2 + 24);
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v16);
  IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(a1, (void *)(a2 + 40));
  *(void *)&long long v16 = *(void *)(a2 + 88);
  unint64_t v12 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(a1, &v16);
  *(void *)&long long v16 = *(void *)(a2 + 96);
  unint64_t v13 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(v12, &v16);
  __int16 v14 = *(_WORD *)(a2 + 104);
  BYTE2(v16) = *(unsigned char *)(a2 + 106);
  LOWORD(v16) = v14;
  return IPC::StreamConnectionEncoder::operator<<<WebCore::ImagePaintingOptions>(v13, &v16);
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawPattern,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = *a1;
  unint64_t v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    unint64_t v8 = (void *)(v5 + v6);
    a1[2] = (unint64_t)(v8 + 1);
    if (v5)
    {
      if ((unint64_t)(*v8 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
        goto LABEL_34;
      }
      int v9 = 0;
      goto LABEL_9;
    }
    unint64_t v25 = v4;
    unint64_t v26 = 0;
  }
  else
  {
    unint64_t v25 = 0;
    unint64_t v26 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      goto LABEL_42;
    }
  }
  while (1)
  {
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v27 = a1[3];
    if (v27)
    {
      if (v25)
      {
        uint64_t result = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t))(*(void *)v27 + 16))(v27, v26, v25);
        unint64_t v5 = *a1;
        if (*a1) {
          goto LABEL_41;
        }
        unint64_t v4 = a1[1];
      }
      else
      {
        unint64_t v4 = 0;
        unint64_t v5 = 0;
      }
    }
LABEL_34:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v28 = a1[3];
    if (v28 && v4) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v28 + 16))(v28, v5);
    }
    int v9 = 1;
LABEL_9:
    IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)v40);
    IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)v39);
    IPC::ArgumentCoder<WebCore::AffineTransform,void>::decode(a1, (uint64_t)v37);
    int v10 = v38;
    if (!v38)
    {
      unint64_t v17 = *a1;
      unint64_t v18 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v19 = a1[3];
      if (v19)
      {
        if (v18) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v19 + 16))(v19, v17);
        }
      }
    }
    IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
    uint64_t v12 = v11;
    if (!v11)
    {
      unint64_t v20 = *a1;
      unint64_t v21 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v22 = a1[3];
      if (v22)
      {
        if (v21) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v22 + 16))(v22, v20);
        }
      }
    }
    IPC::Decoder::decode<WebCore::FloatPoint>(a1);
    char v14 = v13;
    uint64_t result = IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::decode(a1);
    unsigned int v16 = BYTE3(result);
    if (!BYTE3(result))
    {
      unint64_t v23 = *a1;
      unint64_t v4 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      unint64_t v24 = a1[3];
      if (v24)
      {
        if (v4)
        {
          unsigned int v29 = result;
          (*(void (**)(unint64_t, unint64_t))(*(void *)v24 + 16))(v24, v23);
          unsigned int v16 = 0;
          uint64_t result = v29;
        }
      }
    }
    if (!*a1) {
      break;
    }
    if (!v9 && v40[16] && v39[16] && v10 && v12 && v14 && v16)
    {
      uint64_t result = WebCore::DisplayList::DrawPattern::DrawPattern();
      *(_OWORD *)(a2 + 64) = v34;
      *(_OWORD *)(a2 + 80) = v35;
      *(_OWORD *)(a2 + 96) = v36;
      *(_OWORD *)a2 = v30;
      *(_OWORD *)(a2 + 16) = v31;
      *(_OWORD *)(a2 + 32) = v32;
      *(_OWORD *)(a2 + 48) = v33;
      *(unsigned char *)(a2 + 112) = 1;
      return result;
    }
LABEL_41:
    __break(1u);
LABEL_42:
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)result + 16))(result);
      unint64_t v26 = *a1;
      unint64_t v25 = a1[1];
    }
    else
    {
      unint64_t v25 = 0;
      unint64_t v26 = 0;
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 112) = 0;
  return result;
}

void *IPC::ArgumentCoder<WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,void>::encode(void *result, __int16 *a2)
{
  unint64_t v2 = result[2];
  if (v2 >= result[1] || (__int16 v3 = *a2, *(unsigned char *)(*result + v2) = *a2, result[2] = v2 + 1, v2 + 1 >= result[1]))
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2 + 1) = HIBYTE(v3);
    result[2] = v2 + 2;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode,void>::decode(uint64_t *a1)
{
  uint64_t result = IPC::Decoder::decode<WebCore::CompositeMode>(a1);
  uint64_t v4 = *a1;
  if (!*a1)
  {
    LOBYTE(result) = 0;
    return (unsigned __int16)(result | (unsigned __int16)(v3 << 8)) | (v4 << 16);
  }
  if ((result & 0xFF0000) != 0)
  {
    __int16 v3 = result >> 8;
    LODWORD(v4) = 1;
    return (unsigned __int16)(result | (unsigned __int16)(v3 << 8)) | (v4 << 16);
  }
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::CompositeMode>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::CompositeMode,void>::decode(a1);
  if ((result & 0xFF0000) == 0)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawRect,void>::encode(IPC::Encoder *a1, float *a2)
{
  long long v6 = *(_OWORD *)a2;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (float *)&v6);
  float v4 = a2[4];

  return IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t *IPC::ArgumentCoder<WebCore::DisplayList::DrawRect,void>::encode(uint64_t *a1, long long *a2)
{
  long long v13 = *a2;
  uint64_t result = IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, &v13);
  uint64_t v5 = a1[2];
  unint64_t v6 = *a1 + v5;
  unint64_t v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v10 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v10) = *((_DWORD *)a2 + 4);
      a1[2] = v11;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawRect,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::FloatRect>(a1, (uint64_t)&v6);
  uint64_t result = IPC::Decoder::decode<float>(a1);
  unint64_t v5 = *a1;
  if (!*a1) {
    goto LABEL_7;
  }
  LOBYTE(v5) = v7;
  if (!v7 || (result & 0xFF00000000) == 0)
  {
    __break(1u);
LABEL_7:
    *(unsigned char *)a2 = 0;
    goto LABEL_5;
  }
  *(_OWORD *)a2 = v6;
  *(_DWORD *)(a2 + 16) = result;
  LOBYTE(v5) = 1;
LABEL_5:
  *(unsigned char *)(a2 + 20) = v5;
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawLinesForText,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)a2);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 4));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 8));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 12));
  IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, *(const void **)(a2 + 16), *(unsigned int *)(a2 + 28));
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(a1, *(float *)(a2 + 32));
  char v4 = *(unsigned char *)(a2 + 36);
  unint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6 || (*unint64_t v5 = v4, v7 = *(unsigned char *)(a2 + 37), v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1), !v9))
  {
    __break(0xC471u);
    JUMPOUT(0x1988170D8);
  }
  *BOOL v8 = v7;
  char v11 = *(unsigned char *)(a2 + 38);
  return IPC::Encoder::operator<<<BOOL>(a1, &v11);
}

void *IPC::ArgumentCoder<WebCore::DisplayList::DrawLinesForText,void>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2];
  unint64_t v6 = *a1 + v5;
  unint64_t v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(v4 + v10) = *(_DWORD *)a2;
      a1[2] = v11;
      uint64_t v4 = *a1;
      unint64_t v5 = v11;
    }
  }
  long long v13 = (_DWORD *)((v4 + v5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v13 >= v4 + v5)
  {
    unint64_t v14 = (unint64_t)v13 - v4 + 4;
    if ((unint64_t)v13 - v4 > 0xFFFFFFFFFFFFFFFBLL || v14 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *long long v13 = *(_DWORD *)(a2 + 4);
      a1[2] = v14;
    }
  }
  IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(a1, (_DWORD *)(a2 + 8));
  uint64_t result = IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, *(const void **)(a2 + 16), *(unsigned int *)(a2 + 28));
  unint64_t v17 = a1[2];
  unint64_t v18 = *a1 + v17;
  unint64_t v19 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v8 = v19 >= v18;
  unint64_t v20 = v19 - v18;
  if (v8)
  {
    unint64_t v21 = v20 + v17;
    unint64_t v22 = v20 + v17 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v21) = *(_DWORD *)(a2 + 32);
      a1[2] = v22;
      unint64_t v17 = v22;
    }
  }
  if (v17 >= a1[1]
    || (*(unsigned char *)(*a1 + v17) = *(unsigned char *)(a2 + 36), a1[2] = v17 + 1, v17 + 1 >= a1[1])
    || (*(unsigned char *)(*a1 + v17 + 1) = *(unsigned char *)(a2 + 37), a1[2] = v17 + 2, v17 + 2 >= a1[1]))
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v17 + 2) = *(unsigned char *)(a2 + 38);
    a1[2] = v17 + 3;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebCore::DisplayList::DrawLinesForText,void>::decode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (uint64_t)IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
  int v6 = v5;
  uint64_t v7 = v5;
  if (!(_BYTE)v5) {
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v65 = result;
    int v66 = v6;
    BOOL v8 = IPC::Decoder::decode<WebCore::FloatPoint>(a1);
    int v6 = v9;
    long long v63 = v8;
    int v64 = v9;
    IPC::Decoder::decode<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)a1, &v60);
    uint64_t result = IPC::Decoder::decode<float>(a1);
    unint64_t v10 = a1[1];
    unint64_t v11 = (char *)*a1;
    unint64_t v12 = a1[2] - *a1;
    if (v10 <= v12)
    {
      unint64_t v25 = 0;
      unint64_t v26 = 0;
      *a1 = 0;
      a1[1] = 0;
      unint64_t v27 = a1[3];
      if (v27)
      {
        uint64_t v53 = result;
        if (v10)
        {
          (*(void (**)(unint64_t))(*(void *)v27 + 16))(v27);
          unint64_t v26 = *a1;
          unint64_t v25 = a1[1];
        }
        else
        {
          unint64_t v25 = 0;
          unint64_t v26 = 0;
        }
        uint64_t result = v53;
      }
      goto LABEL_33;
    }
    long long v13 = &v11[v12];
    uint64_t v14 = (uint64_t)&v11[v12 + 1];
    a1[2] = v14;
    if (!v11)
    {
      unint64_t v25 = v10;
      unint64_t v26 = 0;
LABEL_33:
      *a1 = 0;
      a1[1] = 0;
      unint64_t v28 = a1[3];
      if (v28)
      {
        uint64_t v51 = result;
        if (v25)
        {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v28 + 16))(v28, v26, v25);
          unint64_t v11 = (char *)*a1;
          unint64_t v10 = a1[1];
        }
        else
        {
          unint64_t v10 = 0;
          unint64_t v11 = 0;
        }
        uint64_t result = v51;
      }
      else
      {
        unint64_t v10 = 0;
        unint64_t v11 = 0;
      }
      goto LABEL_35;
    }
    if (*v13 < 2u)
    {
      int v15 = 0;
      goto LABEL_6;
    }
LABEL_35:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v29 = a1[3];
    if (!v29)
    {
      unint64_t v11 = 0;
      int v15 = 1;
      goto LABEL_37;
    }
    uint64_t v48 = result;
    if (!v10)
    {
      unint64_t v29 = 0;
      unint64_t v11 = 0;
      int v15 = 1;
LABEL_37:
      *a1 = 0;
      a1[1] = 0;
      unint64_t v30 = a1[3];
      if (v30)
      {
        int v42 = v15;
        uint64_t v50 = result;
        if (v29)
        {
          (*(void (**)(unint64_t, char *, unint64_t))(*(void *)v30 + 16))(v30, v11, v29);
          unint64_t v11 = (char *)*a1;
          unint64_t v10 = a1[1];
        }
        else
        {
          unint64_t v10 = 0;
          unint64_t v11 = 0;
        }
        uint64_t result = v50;
        int v15 = v42;
      }
      else
      {
        unint64_t v10 = 0;
        unint64_t v11 = 0;
      }
      goto LABEL_39;
    }
    (*(void (**)(unint64_t, char *))(*(void *)v29 + 16))(v29, v11);
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = a1[1];
    int v15 = 1;
    uint64_t v14 = a1[2];
    uint64_t result = v48;
LABEL_6:
    unint64_t v16 = v14 - (void)v11;
    if (v10 <= v16)
    {
      int v45 = v15;
      uint64_t v55 = result;
      unint64_t v29 = 0;
      unint64_t v36 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v36 && v10)
      {
        (*(void (**)(unint64_t))(*(void *)v36 + 16))(v36);
        unint64_t v11 = (char *)*a1;
        unint64_t v29 = a1[1];
      }
      else
      {
        unint64_t v11 = 0;
      }
      uint64_t result = v55;
      int v15 = v45;
      goto LABEL_37;
    }
    unint64_t v17 = &v11[v16];
    a1[2] = (unint64_t)(v17 + 1);
    if (!v11)
    {
      unint64_t v29 = v10;
      goto LABEL_37;
    }
    if (*v17 < 2u)
    {
      int v18 = 0;
      goto LABEL_10;
    }
LABEL_39:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v31 = a1[3];
    if (!v31)
    {
      unint64_t v11 = 0;
      unint64_t v10 = 0;
      int v18 = 1;
      goto LABEL_41;
    }
    int v40 = v15;
    uint64_t v47 = result;
    if (!v10) {
      break;
    }
    (*(void (**)(unint64_t, char *))(*(void *)v31 + 16))(v31, v11);
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = a1[1];
    int v18 = 1;
    uint64_t result = v47;
    int v15 = v40;
LABEL_10:
    if (v10 <= a1[2] - (unint64_t)v11) {
      goto LABEL_41;
    }
    unint64_t v19 = (unsigned __int8 *)a1[2];
    a1[2] = (unint64_t)(v19 + 1);
    if (!v11)
    {
      unint64_t v33 = 0;
      goto LABEL_43;
    }
    if (*v19 >= 6u) {
      goto LABEL_45;
    }
    int v20 = 0;
LABEL_14:
    if (v7 && (_BYTE)v6 && v62 && (result & 0xFF00000000) != 0 && !v15 && !v18 && !v20)
    {
      uint64_t result = WebCore::DisplayList::DrawLinesForText::DrawLinesForText();
      *(_OWORD *)a2 = v56;
      *(void *)(a2 + 16) = v57;
      *(void *)(a2 + 24) = v58;
      *(_DWORD *)(a2 + 32) = *(_DWORD *)v59;
      *(_DWORD *)(a2 + 35) = *(_DWORD *)&v59[3];
      *(unsigned char *)(a2 + 40) = 1;
      goto LABEL_22;
    }
    __break(1u);
LABEL_27:
    unint64_t v21 = *a1;
    unint64_t v22 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v23 = a1[3];
    if (v23) {
      BOOL v24 = v22 == 0;
    }
    else {
      BOOL v24 = 1;
    }
    if (!v24)
    {
      uint64_t v46 = result;
      (*(void (**)(unint64_t, unint64_t))(*(void *)v23 + 16))(v23, v21);
      uint64_t result = v46;
    }
  }
  unint64_t v11 = 0;
  int v18 = 1;
LABEL_41:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v32 = a1[3];
  if (v32)
  {
    int v39 = v18;
    int v44 = v15;
    uint64_t v54 = result;
    if (v10)
    {
      (*(void (**)(unint64_t, char *))(*(void *)v32 + 16))(v32, v11);
      unint64_t v33 = *a1;
      unint64_t v10 = a1[1];
    }
    else
    {
      unint64_t v33 = 0;
    }
    uint64_t result = v54;
    int v15 = v44;
    int v18 = v39;
  }
  else
  {
    unint64_t v33 = 0;
    unint64_t v10 = 0;
  }
LABEL_43:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v34 = a1[3];
  if (v34)
  {
    int v38 = v18;
    int v43 = v15;
    uint64_t v52 = result;
    if (v10)
    {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v34 + 16))(v34, v33);
      unint64_t v11 = (char *)*a1;
      unint64_t v10 = a1[1];
    }
    else
    {
      unint64_t v11 = 0;
    }
    uint64_t result = v52;
    int v15 = v43;
    int v18 = v38;
  }
  else
  {
    unint64_t v11 = 0;
    unint64_t v10 = 0;
  }
LABEL_45:
  *a1 = 0;
  a1[1] = 0;
  unint64_t v35 = a1[3];
  if (v35)
  {
    if (v10)
    {
      int v37 = v18;
      int v41 = v15;
      uint64_t v49 = result;
      (*(void (**)(unint64_t, char *))(*(void *)v35 + 16))(v35, v11);
      uint64_t result = v49;
      int v15 = v41;
      int v18 = v37;
      if (*a1)
      {
        int v20 = 1;
        goto LABEL_14;
      }
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 40) = 0;
LABEL_22:
  if (v62)
  {
    uint64_t result = (uint64_t)v60;
    if (v60)
    {
      uint64_t v60 = 0;
      int v61 = 0;
      return WTF::fastFree((WTF *)result, v11);
    }
  }
  return result;
}