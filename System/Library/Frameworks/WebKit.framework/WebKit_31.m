void sub_19946D254(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  unsigned int *v25;

  if (a22 && (a21 & 0x8000000000000) != 0)
  {
    v25 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *,0>(unsigned int *a1, uint64_t a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(a1, a2, a3, a4);
  if (*a5 < *a4 || *a5 <= *a4 && a5[1] < a4[1])
  {
    result = std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)a4, (uint64_t)a5);
    if (*a4 < *a3 || *a4 <= *a3 && a4[1] < a3[1])
    {
      result = std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)a3, (uint64_t)a4);
      if (*a3 < *(_DWORD *)a2 || *a3 <= *(_DWORD *)a2 && a3[1] < *(_DWORD *)(a2 + 4))
      {
        result = std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)a2, (uint64_t)a3);
        if (*(_DWORD *)a2 < *a1 || *(_DWORD *)a2 <= *a1 && *(_DWORD *)(a2 + 4) < a1[1])
        {
          return std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)a1, a2);
        }
      }
    }
  }
  return result;
}

unsigned int *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(unsigned int *result, uint64_t a2, unsigned int *a3)
{
  v5 = result;
  unsigned int v6 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 < *result || v6 <= *result && *(_DWORD *)(a2 + 4) < result[1])
  {
    if (*a3 >= v6 && (*a3 > v6 || a3[1] >= *(_DWORD *)(a2 + 4)))
    {
      result = std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)result, a2);
      if (*a3 >= *(_DWORD *)a2 && (*a3 > *(_DWORD *)a2 || a3[1] >= *(_DWORD *)(a2 + 4))) {
        return result;
      }
      result = (unsigned int *)a2;
    }
    uint64_t v7 = (uint64_t)a3;
    goto LABEL_18;
  }
  if (*a3 < v6 || *a3 <= v6 && a3[1] < *(_DWORD *)(a2 + 4))
  {
    result = std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)a2, (uint64_t)a3);
    if (*(_DWORD *)a2 < *v5 || *(_DWORD *)a2 <= *v5 && *(_DWORD *)(a2 + 4) < v5[1])
    {
      result = v5;
      uint64_t v7 = a2;
LABEL_18:
      return std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)result, v7);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(uint64_t a1, _DWORD *a2)
{
  BOOL v4 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      uint64_t v5 = (uint64_t)(a2 - 10);
      unsigned int v6 = *(a2 - 10);
      if (v6 < *(_DWORD *)a1 || v6 <= *(_DWORD *)a1 && *(a2 - 9) < *(_DWORD *)(a1 + 4)) {
        std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)a1, v5);
      }
      break;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>((unsigned int *)a1, a1 + 40, a2 - 10);
      break;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>((unsigned int *)a1, a1 + 40, (unsigned int *)(a1 + 80), a2 - 10);
      break;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *,0>((unsigned int *)a1, a1 + 40, (unsigned int *)(a1 + 80), (unsigned int *)(a1 + 120), a2 - 10);
      break;
    default:
      uint64_t v7 = (_DWORD *)(a1 + 80);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>((unsigned int *)a1, a1 + 40, (unsigned int *)(a1 + 80));
      v8 = (_DWORD *)(a1 + 120);
      BOOL v4 = 1;
      if ((_DWORD *)(a1 + 120) != a2)
      {
        uint64_t v9 = 0;
        int v10 = 0;
        while (1)
        {
          if (*v8 < *v7 || *v8 <= *v7 && v8[1] < v7[1])
          {
            uint64_t v19 = *(void *)v8;
            std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](&v20, (uint64_t)(v8 + 2));
            std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](&v22, (uint64_t)(v8 + 6));
            for (uint64_t i = v9; ; i -= 40)
            {
              *(void *)(a1 + i + 120) = *(void *)(a1 + i + 80);
              std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(a1 + i + 128, (unsigned __int8 *)(a1 + i + 88));
              std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(a1 + i + 144, (unsigned __int8 *)(a1 + i + 104));
              if (i == -80)
              {
                v13 = (void *)a1;
                goto LABEL_20;
              }
              unsigned int v12 = *(_DWORD *)(a1 + i + 40);
              if (v19 >= v12 && (v19 > v12 || HIDWORD(v19) >= *(_DWORD *)(a1 + i + 44))) {
                break;
              }
            }
            v13 = (void *)(a1 + i + 80);
LABEL_20:
            void *v13 = v19;
            uint64_t v14 = a1 + i;
            std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v14 + 88, (unsigned __int8 *)&v20);
            std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v14 + 104, (unsigned __int8 *)&v22);
            if (v23)
            {
              if ((v22 & 0x8000000000000) != 0)
              {
                v16 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
                if (atomic_fetch_add((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, v16);
                  WTF::fastFree((WTF *)v16, v15);
                }
              }
            }
            if (v21)
            {
              if ((v20 & 0x8000000000000) != 0)
              {
                v17 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
                if (atomic_fetch_add((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
                {
                  atomic_store(1u, v17);
                  WTF::fastFree((WTF *)v17, v15);
                }
              }
            }
            if (++v10 == 8) {
              break;
            }
          }
          uint64_t v7 = v8;
          v9 += 40;
          v8 += 10;
          if (v8 == a2) {
            return 1;
          }
        }
        BOOL v4 = v8 + 10 == a2;
      }
      break;
  }
  return v4;
}

void sub_19946D900(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  if (a12 && (a11 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *std::swap[abi:sn180100]<WebCore::CompositionHighlight>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v8 = *a1;
  uint64_t v5 = (uint64_t)(a1 + 1);
  std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](&v9, (uint64_t)(a1 + 1));
  std::__optional_move_base<WebCore::Color,false>::__optional_move_base[abi:sn180100](&v11, v4);
  *a1 = *(void *)a2;
  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v5, (unsigned __int8 *)(a2 + 8));
  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(v4, (unsigned __int8 *)(a2 + 24));
  *(void *)a2 = v8;
  std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(a2 + 8, (unsigned __int8 *)&v9);
  result = (unsigned int *)std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(a2 + 24, (unsigned __int8 *)&v11);
  if (v12)
  {
    if ((v11 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v7);
      }
    }
  }
  if (v10 && (v9 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

void sub_19946DAB0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  if (a12 && (a11 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(unsigned int *a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *>(a1, a2, a3);
  if (*a4 < *a3 || *a4 <= *a3 && a4[1] < a3[1])
  {
    result = std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)a3, (uint64_t)a4);
    if (*a3 < *(_DWORD *)a2 || *a3 <= *(_DWORD *)a2 && a3[1] < *(_DWORD *)(a2 + 4))
    {
      result = std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)a2, (uint64_t)a3);
      if (*(_DWORD *)a2 < *a1 || *(_DWORD *)a2 <= *a1 && *(_DWORD *)(a2 + 4) < a1[1])
      {
        return std::swap[abi:sn180100]<WebCore::CompositionHighlight>((uint64_t *)a1, a2);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t *a2)
{
  if (a2 != (uint64_t *)a1)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 12);
    uint64_t v5 = *((unsigned int *)a2 + 3);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *((unsigned int *)a2 + 3));
        LODWORD(v4) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct((WTF::StringImpl *)(*(void *)a1 + 16 * v5), (WTF::StringImpl *)(*(void *)a1 + 16 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      LODWORD(v4) = v5;
    }
    uint64_t v6 = *a2;
    if (v4)
    {
      uint64_t v7 = v6 + 16 * v4;
      uint64_t v8 = *(uint64_t **)a1;
      do
      {
        WTF::String::operator=(v8, (WTF::StringImpl **)v6);
        v8[1] = *(void *)(v6 + 8);
        v6 += 16;
        v8 += 2;
      }
      while (v6 != v7);
      uint64_t v6 = *a2;
      unsigned int v9 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      unsigned int v9 = 0;
    }
    uint64_t v10 = *((unsigned int *)a2 + 3);
    if (v9 != v10)
    {
      uint64_t v11 = v6 + 16 * v10;
      char v12 = (void *)(*(void *)a1 + 16 * v9);
      uint64_t v13 = v6 + 16 * v9;
      do
      {
        uint64_t v14 = *(_DWORD **)v13;
        if (*(void *)v13) {
          *v14 += 2;
        }
        *char v12 = v14;
        v12[1] = *(void *)(v13 + 8);
        v13 += 16;
        v12 += 2;
      }
      while (v13 != v11);
      unsigned int v9 = *((_DWORD *)a2 + 3);
    }
    *(_DWORD *)(a1 + 12) = v9;
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t *a2)
{
  if (a2 != (uint64_t *)a1)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 12);
    uint64_t v5 = *((unsigned int *)a2 + 3);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *((unsigned int *)a2 + 3));
        LODWORD(v4) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::Color>::destruct((void *)(*(void *)a1 + 8 * v5), (void *)(*(void *)a1 + 8 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      LODWORD(v4) = v5;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = *(void *)a1;
    if (v4)
    {
      uint64_t v8 = 8 * v4;
      do
      {
        WebCore::Color::operator=();
        v6 += 8;
        v7 += 8;
        v8 -= 8;
      }
      while (v8);
      uint64_t v6 = *a2;
      LODWORD(v4) = *(_DWORD *)(a1 + 12);
      uint64_t v7 = *(void *)a1;
    }
    uint64_t v9 = *((unsigned int *)a2 + 3);
    if (v4 != v9)
    {
      uint64_t v10 = (WebCore::Color *)(v7 + 8 * v4);
      uint64_t v11 = (const Color *)(v6 + 8 * v4);
      uint64_t v12 = 8 * v9 - 8 * v4;
      do
      {
        uint64_t v10 = (WebCore::Color *)(WebCore::Color::Color(v10, v11++) + 8);
        v12 -= 8;
      }
      while (v12);
      LODWORD(v4) = *((_DWORD *)a2 + 3);
    }
    *(_DWORD *)(a1 + 12) = v4;
  }
  return a1;
}

void sub_19946DFC8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 1) {
      WTF::fastFree(a10, a2);
    }
    else {
      --*(_DWORD *)a10;
    }
  }
  _Unwind_Resume(exception_object);
}

void ___ZZ78__WKContentView_WKInteraction___dragInteraction_prepareForSession_completion__ENK4__84cvU13block_pointerFvN6WebKit31ProceedWithTextSelectionInImageEEEv_block_invoke(id *a1, int a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  WeakRetained = objc_loadWeakRetained(a1 + 4);
  if (!WeakRetained || a2)
  {
    (*((void (**)(void))a1[6] + 2))();
    if (!WeakRetained) {
      return;
    }
  }
  else
  {
    [a1[5] locationInView:WeakRetained];
    v28.x = v5;
    v28.CGFloat y = v6;
    WebKit::DragDropInteractionState::prepareForDragSession((uint64_t)(WeakRetained + 388), a1[5], a1[6]);
    uint64_t v7 = WeakRetained[53];
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v26, &v28);
    float v8 = roundf(v26[0]);
    uint64_t v9 = 0x7FFFFFFFLL;
    uint64_t v10 = 0x80000000;
    if (v8 > -2147500000.0) {
      uint64_t v10 = (int)v8;
    }
    if (v8 < 2147500000.0) {
      uint64_t v9 = v10;
    }
    float v11 = roundf(v26[1]);
    uint64_t v12 = 0x7FFFFFFF00000000;
    unint64_t v13 = 0x8000000000000000;
    if (v11 > -2147500000.0) {
      unint64_t v13 = (unint64_t)(int)v11 << 32;
    }
    if (v11 < 2147500000.0) {
      uint64_t v12 = v13;
    }
    uint64_t v27 = v12 | v9;
    objc_msgSend(WeakRetained, "convertPoint:toView:", objc_msgSend(WeakRetained, "window"), v28.x, v28.y);
    *(void *)buf = v14;
    *(void *)&buf[8] = v15;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v24, (const CGPoint *)buf);
    float v16 = roundf(v24[0]);
    uint64_t v17 = 0x7FFFFFFFLL;
    uint64_t v18 = (int)v16;
    if (v16 <= -2147500000.0) {
      uint64_t v18 = 0x80000000;
    }
    if (v16 < 2147500000.0) {
      uint64_t v17 = v18;
    }
    float v19 = roundf(v24[1]);
    uint64_t v20 = 0x7FFFFFFF00000000;
    unint64_t v21 = 0x8000000000000000;
    if (v19 > -2147500000.0) {
      unint64_t v21 = (unint64_t)(int)v19 << 32;
    }
    if (v19 < 2147500000.0) {
      uint64_t v20 = v21;
    }
    uint64_t v25 = v20 | v17;
    WebKit::WebPageProxy::requestDragStart(v7, (uint64_t)&v27, (uint64_t)&v25, [WeakRetained _allowedDragSourceActions]);
    uint64_t v22 = qword_1EB357DA8;
    if (os_log_type_enabled((os_log_t)qword_1EB357DA8, OS_LOG_TYPE_DEFAULT))
    {
      id v23 = a1[5];
      *(_DWORD *)buf = 134218496;
      *(void *)&buf[4] = v23;
      *(_WORD *)&buf[12] = 2048;
      *(CGFloat *)&buf[14] = v28.x;
      __int16 v30 = 2048;
      CGFloat y = v28.y;
      _os_log_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEFAULT, "Drag session requested: %p at origin: {%.0f, %.0f}", buf, 0x20u);
    }
  }
  CFRelease(WeakRetained);
}

void sub_19946E24C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c92_ZTSKZ78__WKContentView_WKInteraction___dragInteraction_prepareForSession_completion__E4__84(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = a1 + 32;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  CGFloat v5 = *(const void **)(a2 + 40);
  *(void *)(v4 + 8) = v5;
  if (v5) {
    CFRetain(v5);
  }
  result = _Block_copy(*(const void **)(a2 + 48));
  *(void *)(a1 + 48) = result;
  return result;
}

void sub_19946E2D0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c92_ZTSKZ78__WKContentView_WKInteraction___dragInteraction_prepareForSession_completion__E4__84(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 48));
  v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }

  objc_destroyWeak((id *)(a1 + 32));
}

uint64_t ___ZZ91__WKContentView_WKInteraction__selectPositionAtPoint_withContextRequest_completionHandler__EN4__94clEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c126_ZTSKZZ91__WKContentView_WKInteraction__selectPositionAtPoint_withContextRequest_completionHandler__EN4__94clEvEUlP8NSObjectE_(uint64_t a1, uint64_t a2)
{
  result = _Block_copy(*(const void **)(a2 + 32));
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c126_ZTSKZZ91__WKContentView_WKInteraction__selectPositionAtPoint_withContextRequest_completionHandler__EN4__94clEvEUlP8NSObjectE_(uint64_t a1)
{
}

void sub_19946E580(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZL18createItemProviderRKN6WebKit12WebPageProxyERKN7WebCore22PromisedAttachmentInfoE_block_invoke(uint64_t a1, uint64_t a2)
{
  return 0;
}

CFTypeRef __copy_helper_block_e8_32c93_ZTSKZL18createItemProviderRKN6WebKit12WebPageProxyERKN7WebCore22PromisedAttachmentInfoEE3__1(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c93_ZTSKZL18createItemProviderRKN6WebKit12WebPageProxyERKN7WebCore22PromisedAttachmentInfoEE3__1(uint64_t a1)
{
  v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t ___ZL18createItemProviderRKN6WebKit12WebPageProxyERKN7WebCore22PromisedAttachmentInfoE_block_invoke_2998(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v2 = *(void *)(a1 + 32);
  v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EEA0E768;
  v3[1] = &v6;
  CGFloat v5 = v3;
  API::Attachment::doWithFileWrapper(v2, &v5);
  (*(void (**)(void *))(*v3 + 8))(v3);
  return 0;
}

void sub_19946E68C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c93_ZTSKZL18createItemProviderRKN6WebKit12WebPageProxyERKN7WebCore22PromisedAttachmentInfoEE3__0(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(a2 + 32);
  if (v3) {
    CFTypeRef result = CFRetain(*(CFTypeRef *)(v3 + 8));
  }
  v2[4] = v3;
  return result;
}

void __destroy_helper_block_e8_32c93_ZTSKZL18createItemProviderRKN6WebKit12WebPageProxyERKN7WebCore22PromisedAttachmentInfoEE3__0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
}

void WTF::Detail::CallableWrapper<createItemProvider(WebKit::WebPageProxy const&,WebCore::PromisedAttachmentInfo const&)::$_0::operator() const(void({block_pointer})(NSData *,NSError *))::{lambda(NSFileWrapper *)#1},void,NSFileWrapper *>::call(uint64_t a1, void *a2)
{
  uint64_t v3 = (const void *)[a2 regularFileContents];
  if (v3)
  {
    uint64_t v4 = v3;
    CFRetain(v3);
    (*(void (**)(void))(**(void **)(a1 + 8) + 16))();
    CFRelease(v4);
  }
  else
  {
    uint64_t v5 = **(void **)(a1 + 8);
    uint64_t v6 = [MEMORY[0x1E4F28C58] errorWithDomain:@"WKErrorDomain" code:1 userInfo:0];
    uint64_t v7 = *(void (**)(uint64_t, void, uint64_t))(v5 + 16);
    v7(v5, 0, v6);
  }
}

void sub_19946E7D0(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19946E888(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf)
{
  CFTypeRef v17 = cf;
  cf = 0;
  if (v17) {
    CFRelease(v17);
  }
  WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, a2);
  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, v18);
  WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, v19);
  _Unwind_Resume(a1);
}

void ___ZZ61__WKContentView_WKInteraction__imageAnalysisGestureDidBegin__EN5__102clEN6WebKit32InteractionInformationAtPositionE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if ([WeakRetained validateImageAnalysisRequestIdentifier:*(void *)(a1 + 32)])
  {
    int v6 = [a2 hasResultsForAnalysisTypes:1];
    uint64_t v7 = qword_1EB358910;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_1EB358910, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
      double v10 = (v9 - *(double *)(a1 + 152)) * 1000.0;
      uint64_t v11 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 134218496;
      double v32 = v10;
      __int16 v33 = 2048;
      uint64_t v34 = v11;
      __int16 v35 = 1024;
      int v36 = v6;
      _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "Image analysis completed in %.0f ms (request %llu; found text? %d)",
        buf,
        0x1Cu);
    }
    uint64_t v12 = WeakRetained[53];
    WebKit::makeTextRecognitionResult(a2, (uint64_t)buf);
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v30, (const IntPoint *)(a1 + 128));
    uint64_t v24 = *(void *)(a1 + 32);
    id v25 = 0;
    objc_copyWeak(&v25, v4);
    char v26 = v6;
    unint64_t v13 = *(const void **)(a1 + 136);
    CFTypeRef v27 = v13;
    if (v13) {
      CFRetain(v13);
    }
    uint64_t v14 = *(_DWORD **)(a1 + 144);
    if (v14) {
      ++*v14;
    }
    CGPoint v28 = v14;
    uint64_t v15 = WTF::fastMalloc((WTF *)0x30);
    *(void *)uint64_t v15 = &unk_1EEA0E7E0;
    *(void *)(v15 + 8) = v24;
    *(void *)(v15 + 16) = 0;
    objc_moveWeak((id *)(v15 + 16), &v25);
    *(unsigned char *)(v15 + 24) = v26;
    *(void *)(v15 + 32) = v27;
    float v16 = v28;
    CFTypeRef v27 = 0;
    CGPoint v28 = 0;
    *(void *)(v15 + 40) = v16;
    uint64_t v29 = v15;
    WebKit::WebPageProxy::updateWithTextRecognitionResult(v12, (uint64_t)buf, a1 + 48, (uint64_t)v30, &v29);
    uint64_t v17 = v29;
    uint64_t v29 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    uint64_t v18 = (uint64_t)v28;
    CGPoint v28 = 0;
    if (v18) {
      WTF::RefCounted<WebKit::ImageAnalysisGestureDeferralToken>::deref(v18);
    }
    CFTypeRef v19 = v27;
    CFTypeRef v27 = 0;
    if (v19) {
      CFRelease(v19);
    }
    objc_destroyWeak(&v25);
    CFTypeRef v21 = cf;
    CFTypeRef cf = 0;
    if (v21) {
      CFRelease(v21);
    }
    WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v20);
    WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34 + 2, v22);
    WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v23);
  }
  else if (!WeakRetained)
  {
    return;
  }
  CFRelease(WeakRetained);
}

void sub_19946EB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CFTypeRef cf)
{
  if (v23) {
    CFRelease(v23);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e16_32c157_ZTSKZZ61__WKContentView_WKInteraction__imageAnalysisGestureDidBegin__EN5__102clEN6WebKit32InteractionInformationAtPositionEEUlP16VKCImageAnalysisP7NSErrorE_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = a1 + 40;
  *(void *)(a1 + 32) = v4;
  objc_copyWeak((id *)(a1 + 40), (id *)(a2 + 40));
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v5 + 8) = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 112);
  *(void *)(v5 + 88) = *(void *)(a2 + 128);
  *(_OWORD *)(v5 + 72) = v9;
  *(_OWORD *)(v5 + 56) = v8;
  *(_OWORD *)(v5 + 40) = v7;
  CFTypeRef result = *(CFTypeRef *)(a2 + 136);
  *(void *)(v5 + 96) = result;
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  uint64_t v11 = *(_DWORD **)(a2 + 144);
  if (v11) {
    ++*v11;
  }
  *(void *)(a1 + 144) = v11;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  return result;
}

void sub_19946EC98(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e16_32c157_ZTSKZZ61__WKContentView_WKInteraction__imageAnalysisGestureDidBegin__EN5__102clEN6WebKit32InteractionInformationAtPositionEEUlP16VKCImageAnalysisP7NSErrorE_(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v2) {
    WTF::RefCounted<WebKit::ImageAnalysisGestureDeferralToken>::deref(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v3) {
    CFRelease(v3);
  }

  objc_destroyWeak((id *)(a1 + 40));
}

void sub_19946EEB8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::RefCounted<WebKit::ImageAnalysisGestureDeferralToken>::deref(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)result == 1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(result + 8));
    uint64_t v3 = WeakRetained;
    if (WeakRetained)
    {
      [WeakRetained _endImageAnalysisGestureDeferral:*(unsigned __int8 *)(v1 + 16)];
      CFRelease(v3);
    }
    objc_destroyWeak((id *)(v1 + 8));
    return WTF::fastFree((WTF *)v1, v4);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void sub_19946EF64(_Unwind_Exception *a1)
{
  CFRelease(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZL55shouldUseMachineReadableCodeMenuFromImageAnalysisResultP16VKCImageAnalysis_block_invoke(uint64_t a1, void *a2)
{
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }

  return [a2 isLiveCameraOnlyAction];
}

WTF *WTF::ThreadSafeRefCounted<WTF::Box<WebKit::ImageAnalysisContextMenuActionData>::Data,(WTF::DestructionThread)0>::deref(WTF *this, void *a2)
{
  if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
  {
    uint64_t v2 = this;
    atomic_store(1u, (unsigned int *)this);
    uint64_t v3 = (const void *)*((void *)this + 3);
    *((void *)v2 + 3) = 0;
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = (const void *)*((void *)v2 + 2);
    *((void *)v2 + 2) = 0;
    if (v4) {
      CFRelease(v4);
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  return this;
}

void sub_19946F408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (v32) {
    CFRelease(v32);
  }
  if (v31) {
    CFRelease(v31);
  }
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZZ85__WKContentView_WKInteraction___insertDynamicImageAnalysisContextMenuItemsIfPossible_ENK3__5clEP6UIMenu_block_invoke(void *a1, void *a2)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    a2 = 0;
  }
  uint64_t result = objc_msgSend((id)objc_msgSend(a2, "identifier"), "isEqualToString:", a1[4]);
  if (result)
  {
    uint64_t v5 = a1[6];
  }
  else
  {
    uint64_t result = objc_msgSend((id)objc_msgSend(a2, "identifier"), "isEqualToString:", a1[5]);
    if (!result) {
      return result;
    }
    uint64_t v5 = a1[7];
  }
  *(unsigned char *)(*(void *)(v5 + 8) + 24) = 1;
  return result;
}

void sub_19946F5D0(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZL40wkLegacyPreviewActionsFromElementActionsP7NSArrayIP16_WKElementActionEP23_WKActivatedElementInfo_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) runActionWithElementInfo:*(void *)(a1 + 40)];
}

uint64_t ___ZL30uiActionForLegacyPreviewActionP15UIPreviewActionP16UIViewController_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))([*(id *)(a1 + 32) handler] + 16);

  return v1();
}

void ___ZZ113__WKContentView_WKInteractionPreview___internalContextMenuInteraction_configurationForMenuAtLocation_completion__ENK5__128cvU13block_pointerFvN6WebKit31ProceedWithTextSelectionInImageEEEv_block_invoke(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (!WeakRetained || a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    if (!v5) {
      return;
    }
  }
  else
  {
    WeakRetained[1208] = 1;
    long long v6 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "objectForKey:", @"WebKitShowLinkPreviews");
    if (v6) {
      *((unsigned char *)v5 + 1208) = [v6 BOOLValue];
    }
    [*(id *)(a1 + 40) locationInView:v5];
    v19.x = v7;
    v19.CGFloat y = v8;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v17, &v19);
    float v9 = roundf(*(float *)&v17);
    uint64_t v10 = 0x80000000;
    if (v9 > -2147500000.0) {
      uint64_t v10 = (int)v9;
    }
    if (v9 < 2147500000.0) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0x7FFFFFFFLL;
    }
    float v12 = roundf(*((float *)&v17 + 1));
    unint64_t v13 = 0x8000000000000000;
    if (v12 > -2147500000.0) {
      unint64_t v13 = (unint64_t)(int)v12 << 32;
    }
    if (v12 < 2147500000.0) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0x7FFFFFFF00000000;
    }
    if ([v5 _shouldUseContextMenus]) {
      uint64_t v15 = 16777473;
    }
    else {
      uint64_t v15 = 0x1000001000101;
    }
    if ([objc_loadWeak((id *)v5 + 54) _allowAnimationControls]) {
      uint64_t v16 = 0x10000000000;
    }
    else {
      uint64_t v16 = 0;
    }
    *(void *)&v19.x = MEMORY[0x1E4F143A8];
    *(void *)&v19.CGFloat y = 3321888768;
    uint64_t v20 = ___ZZ113__WKContentView_WKInteractionPreview___internalContextMenuInteraction_configurationForMenuAtLocation_completion__ENK5__128clEN6WebKit31ProceedWithTextSelectionInImageE_block_invoke;
    CFTypeRef v21 = &__block_descriptor_48_e8_32c221_ZTSKZZ113__WKContentView_WKInteractionPreview___internalContextMenuInteraction_configurationForMenuAtLocation_completion__ENK5__128clEN6WebKit31ProceedWithTextSelectionInImageEEUlNS0_32InteractionInformationAtPositionEE__e6320_v648__0_InteractionInformationAtPosition__InteractionInformationRequest__IntPoint_ii_BBBBBBB_B_optional_BOOL_____cB_B_CBBBBBBBBBBBBB_Markable_WebCore::ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__WTF::SupportsObjectIdentifierNullState::Yes____WebCore::ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__WTF::SupportsObjectIdentifierNullState::Yes__::MarkableTraits___ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__WTF::SupportsObjectIdentifierNullState::Yes____ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__WTF::SupportsObjectIdentifierNullState::Yes__Q__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__WTF::SupportsObjectIdentifierNullState::Yes__Q___BBBBBB_FloatPoint_ff__URL__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___b1b1b1b3b26IIIIIII__URL__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___b1b1b1b3b26IIIIIII__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____IntRect__IntPoint_ii__IntSize_ii___RefPtr_WebCore::ShareableBitmap__WTF::RawPtrTraits_WebCore::ShareableBitmap___WTF::DefaultRefDerefTraits_WebCore::ShareableBitmap_____ShareableBitmap___String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___f_FloatRect__FloatPoint_ff__FloatSize_ff___optional_WebCore::Cursor_____c_Cursor_C_RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___IntPoint_ii__v__B__TextIndicatorData__FloatRect__FloatPoint_ff__FloatSize_ff___FloatRect__FloatPoint_ff__FloatSize_ff___FloatRect__FloatPoint_ff__FloatSize_ff___Vector_WebCore::FloatRect__0UL__WTF::CrashOnOverflow__16UL__WTF::FastMalloc____FloatRect_II_f_RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___Color_Q_C_OptionSet_WebCore::TextIndicatorOption__S___String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____RetainPtr_NSArray___v__IntRect__IntPoint_ii__IntSize_ii___optional_WebCore::ElementContext_____c_ElementContext__FloatRect__FloatPoint_ff__FloatSize_ff___Markable_WTF::ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__WTF::SupportsObjectIdentifierNullState::No___WTF::ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__WTF::SupportsObjectIdentifierNullState::No_::MarkableTraits___ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__WTF::SupportsObjectIdentifierNullState::No__Q___ProcessQualified_WTF::UUID___UUID_T__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__WTF::SupportsObjectIdentifierNullState::Yes__Q___Markable_WTF::ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__WTF::SupportsObjectIdentifierNullState::No___WTF::ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__WTF::SupportsObjectIdentifierNullState::No_::MarkableTraits___ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__WTF::SupportsObjectIdentifierNullState::No__Q____B__optional_WebCore::ElementContext_____c_ElementContext__FloatRect__FloatPoint_ff__FloatSize_ff___Markable_WTF::ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__WTF::SupportsObjectIdentifierNullState::No___WTF::ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__WTF::SupportsObjectIdentifierNullState::No_::MarkableTraits___ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__WTF::SupportsObjectIdentifierNullState::No__Q___ProcessQualified_WTF::UUID___UUID_T__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__WTF::SupportsObjectIdentifierNullState::Yes__Q___Markable_WTF::ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__WTF::SupportsObjectIdentifierNullState::No___WTF::ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__WTF::SupportsObjectIdentifierNullState::No_::MarkableTraits___ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__WTF::SupportsObjectIdentifierNullState::No__Q____B__Vector_WebCore::ElementAnimationContext__0UL__WTF::CrashOnOverflow__16UL__WTF::FastMalloc____ElementAnimationContext_II__8l;
    id v17 = 0;
    objc_initWeak(&v17, v5);
    aBlock = _Block_copy(*(const void **)(a1 + 48));
    id v22 = 0;
    objc_copyWeak(&v22, &v17);
    id v23 = _Block_copy(aBlock);
    objc_msgSend(v5, "doAfterPositionInformationUpdate:forRequest:", &v19, v14 | v11, v16 | v15);
    _Block_release(aBlock);
    objc_destroyWeak(&v17);
    _Block_release(v23);
    objc_destroyWeak(&v22);
  }
  CFRelease(v5);
}

void sub_19946F850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock)
{
  if (v16) {
    CFRelease(v16);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c129_ZTSKZ113__WKContentView_WKInteractionPreview___internalContextMenuInteraction_configurationForMenuAtLocation_completion__E5__128(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = a1 + 32;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  id v5 = *(const void **)(a2 + 40);
  *(void *)(v4 + 8) = v5;
  if (v5) {
    CFRetain(v5);
  }
  uint64_t result = _Block_copy(*(const void **)(a2 + 48));
  *(void *)(a1 + 48) = result;
  return result;
}

void sub_19946F924(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c129_ZTSKZ113__WKContentView_WKInteractionPreview___internalContextMenuInteraction_configurationForMenuAtLocation_completion__E5__128(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 48));
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }

  objc_destroyWeak((id *)(a1 + 32));
}

void ___ZZ113__WKContentView_WKInteractionPreview___internalContextMenuInteraction_configurationForMenuAtLocation_completion__ENK5__128clEN6WebKit31ProceedWithTextSelectionInImageE_block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = *(void *)(a1 + 40);
  if (WeakRetained)
  {
    uint64_t v4 = WeakRetained;
    [WeakRetained continueContextMenuInteraction:v3];
    CFRelease(v4);
  }
  else
  {
    id v5 = *(void (**)(uint64_t, void))(v3 + 16);
    uint64_t v6 = *(void *)(a1 + 40);
    v5(v6, 0);
  }
}

void sub_19946FA14(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c221_ZTSKZZ113__WKContentView_WKInteractionPreview___internalContextMenuInteraction_configurationForMenuAtLocation_completion__ENK5__128clEN6WebKit31ProceedWithTextSelectionInImageEEUlNS0_32InteractionInformationAtPositionEE_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_19946FA74(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c221_ZTSKZZ113__WKContentView_WKInteractionPreview___internalContextMenuInteraction_configurationForMenuAtLocation_completion__ENK5__128clEN6WebKit31ProceedWithTextSelectionInImageEEUlNS0_32InteractionInformationAtPositionEE_(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 32);
  _Block_release(*(const void **)(a1 + 40));

  objc_destroyWeak(v1);
}

void sub_19946FEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, CFTypeRef a11, CFTypeRef a12, char a13, CFTypeRef a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf, CFTypeRef a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,CFTypeRef a25)
{
  CFTypeRef v31 = cf;
  CFTypeRef cf = 0;
  if (v31) {
    CFRelease(v31);
  }
  objc_destroyWeak(v28);
  CFTypeRef v32 = a12;
  a12 = 0;
  if (v32) {
    CFRelease(v32);
  }
  CFTypeRef v33 = a11;
  a11 = 0;
  if (v33) {
    CFRelease(v33);
  }
  objc_destroyWeak(&location);
  CFTypeRef v34 = a25;
  a25 = 0;
  if (v34) {
    CFRelease(v34);
  }
  objc_destroyWeak(v27);
  if (v26) {
    CFRelease(v26);
  }
  __int16 v35 = *(const void **)(v29 - 72);
  *(void *)(v29 - 72) = 0;
  if (v35) {
    CFRelease(v35);
  }
  CFRelease(v25);
  _Unwind_Resume(a1);
}

uint64_t ___ZZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__EN5__124clEP26UIContextMenuConfiguration_block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained) {
    return 0;
  }
  uint64_t v3 = WeakRetained;
  uint64_t v4 = (void *)WeakRetained[103];
  if (!v4)
  {
    CFTypeRef v5 = 0;
    CFTypeRef v16 = 0;
    CFTypeRef cf = 0;
    goto LABEL_7;
  }
  [v4 defaultActionsForImageSheet:*(void *)(a1 + 40)];
  CFTypeRef v5 = cf;
  CFTypeRef v16 = cf;
  if (!cf)
  {
LABEL_7:
    char v6 = 1;
    goto LABEL_8;
  }
  CFRetain(cf);
  char v6 = 0;
LABEL_8:
  CGFloat v8 = *(const void **)(a1 + 40);
  uint64_t v15 = v8;
  if (v8) {
    CFRetain(v8);
  }
  float v9 = menuElementsFromDefaultActions((id *)&v16, &v15);
  if (v8) {
    CFRelease(v8);
  }
  if ((v6 & 1) == 0) {
    CFRelease(v5);
  }
  uint64_t v10 = [v3 placeholderForDynamicallyInsertedImageAnalysisActions];
  if (v10 || (uint64_t v10 = [v3 machineReadableCodeSubMenuForImageContextMenu]) != 0) {
    [v9 addObject:v10];
  }
  uint64_t v11 = (void *)MEMORY[0x1E4F42B80];
  if (v3[210]) {
    float v12 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    float v12 = &stru_1EEA10550;
  }
  uint64_t v7 = [v11 menuWithTitle:v12 children:v9];
  CFTypeRef v13 = cf;
  CFTypeRef cf = 0;
  if (v13) {
    CFRelease(v13);
  }
  CFRelease(v3);
  return v7;
}

void sub_199470198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v12);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c151_ZTSKZZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__EN5__124clEP26UIContextMenuConfigurationEUlP7NSArrayIP13UIMenuElementEE_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = a1 + 32;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(v3 + 8) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_19947023C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c151_ZTSKZZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__EN5__124clEP26UIContextMenuConfigurationEUlP7NSArrayIP13UIMenuElementEE_(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }

  objc_destroyWeak((id *)(a1 + 32));
}

CFTypeRef ___ZZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__EN5__124clEP26UIContextMenuConfiguration_block_invoke_3135(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained) {
    return 0;
  }
  uint64_t v3 = WeakRetained;
  uint64_t v4 = (void *)[WeakRetained webViewUIDelegate];
  if ((objc_opt_respondsToSelector() & 1) == 0
    || (CFTypeRef v5 = (CFTypeRef)objc_msgSend(v4, "_webView:contextMenuContentPreviewForElement:", objc_msgSend(v3, "webView"), v3[150])) == 0)
  {
    char v6 = [WKImagePreviewViewController alloc];
    uint64_t v7 = *(const void **)(a1 + 40);
    CFTypeRef v15 = v7;
    if (v7) {
      CFRetain(v7);
    }
    CGFloat v8 = *(const void **)(a1 + 48);
    CFTypeRef cf = v8;
    CFTypeRef v14 = 0;
    if (v8) {
      CFRetain(v8);
    }
    CFTypeRef v5 = (id)CFMakeCollectable([(WKImagePreviewViewController *)v6 initWithCGImage:&v15 defaultActions:&v14 elementInfo:&cf]);
    CFTypeRef v9 = cf;
    CFTypeRef cf = 0;
    if (v9) {
      CFRelease(v9);
    }
    CFTypeRef v10 = v14;
    CFTypeRef v14 = 0;
    if (v10) {
      CFRelease(v10);
    }
    CFTypeRef v11 = v15;
    CFTypeRef v15 = 0;
    if (v11) {
      CFRelease(v11);
    }
  }
  CFRelease(v3);
  return v5;
}

void sub_1994703B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef a11, CFTypeRef cf)
{
  if (a11) {
    CFRelease(a11);
  }
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v12);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c126_ZTSKZZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__EN5__124clEP26UIContextMenuConfigurationEUlvE0_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = a1 + 32;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  CFTypeRef v5 = *(const void **)(a2 + 40);
  *(void *)(v4 + 8) = v5;
  if (v5) {
    CFRetain(v5);
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(a1 + 48) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_199470474(_Unwind_Exception *a1)
{
  uint64_t v4 = *(const void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;
  if (v4) {
    CFRelease(v4);
  }
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c126_ZTSKZZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__EN5__124clEP26UIContextMenuConfigurationEUlvE0_(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    CFRelease(v3);
  }

  objc_destroyWeak((id *)(a1 + 32));
}

void ___ZZ95__WKContentView_WKInteractionPreview__contextMenuInteraction_willEndForConfiguration_animator__ENK5__132cvU13block_pointerFvvEEv_block_invoke(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = WeakRetained;
    *((unsigned char *)WeakRetained + 1280) = 0;
    [WeakRetained _removeContextMenuHintContainerIfPossible];
    [objc_loadWeak(v2 + 54) _didDismissContextMenu];
    [v2 _stopSuppressingSelectionAssistantForReason:4];
    CFRelease(v2);
  }
}

void sub_1994706C4(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c110_ZTSKZ95__WKContentView_WKInteractionPreview__contextMenuInteraction_willEndForConfiguration_animator__E5__132(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c110_ZTSKZ95__WKContentView_WKInteractionPreview__contextMenuInteraction_willEndForConfiguration_animator__E5__132(uint64_t a1)
{
}

void sub_1994707EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1994708FC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_199470A0C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WTF::VectorMover<false,std::optional<std::pair<WebKit::InteractionInformationRequest,WTF::BlockPtr<void ()(WebKit::InteractionInformationAtPosition)>>>>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    CFTypeRef v5 = (unsigned char *)(a3 + 24);
    do
    {
      *(v5 - 24) = 0;
      unsigned char *v5 = 0;
      if (*(unsigned char *)(v4 + 24))
      {
        *(_OWORD *)(v5 - 24) = *(_OWORD *)v4;
        uint64_t v6 = *(void *)(v4 + 16);
        *(void *)(v4 + 16) = 0;
        *((void *)v5 - 1) = v6;
        unsigned char *v5 = 1;
        if (*(unsigned char *)(v4 + 24)) {
          _Block_release(*(const void **)(v4 + 16));
        }
      }
      v4 += 32;
      v5 += 32;
    }
    while (v4 != a2);
  }
}

void sub_199470CC4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_199471050(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16)
{
  uint64_t v18 = *(WTF::StringImpl **)(v16 - 48);
  *(void *)(v16 - 48) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, a2);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1994713A8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t selectionChangedWithGesture(void *a1, uint64_t a2, int a3, int a4, char a5)
{
  WebCore::IntPoint::operator CGPoint();
  if ((a3 - 1) > 6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = qword_1994F90C8[(char)(a3 - 1)];
  }
  if ((a4 - 1) < 5) {
    uint64_t v10 = (a4 - 1) + 1;
  }
  else {
    uint64_t v10 = 0;
  }

  return objc_msgSend(a1, "selectionChangedWithGestureAt:withGesture:withState:withFlags:", v9, v10, a5 & 7);
}

void sub_199472350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, uint64_t a11, uint64_t a12)
{
  CFRelease(v12);
  _Unwind_Resume(a1);
}

void sub_1994725A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  CFRelease(v10);
  _Unwind_Resume(a1);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZ95__WKContentView_WKInteraction__requestPreferredArrowDirectionForEditMenuWithCompletionHandler__EN4__44clEvENUlvE_clEvEUlRT_E_vJRKNS_6VectorIN7WebCore9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0ED60;
  _Block_release(*(const void **)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZ95__WKContentView_WKInteraction__requestPreferredArrowDirectionForEditMenuWithCompletionHandler__EN4__44clEvENUlvE_clEvEUlRT_E_vJRKNS_6VectorIN7WebCore9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEED0Ev(const void **a1)
{
  *a1 = &unk_1EEA0ED60;
  _Block_release(a1[1]);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZ95__WKContentView_WKInteraction__requestPreferredArrowDirectionForEditMenuWithCompletionHandler__EN4__44clEvENUlvE_clEvEUlRT_E_vJRKNS_6VectorIN7WebCore9FloatRectELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEE4callESE_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void sub_19947293C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,CFTypeRef a29,WTF::StringImpl *a30)
{
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a11) {
    CFRelease(a11);
  }
  if (a30)
  {
    if (*(_DWORD *)a30 == 2) {
      WTF::StringImpl::destroy(a30, a2);
    }
    else {
      *(_DWORD *)a30 -= 2;
    }
  }
  if (a29) {
    CFRelease(a29);
  }
  std::__optional_destruct_base<WebKit::RemoveBackgroundData,false>::~__optional_destruct_base[abi:sn180100](v30 - 160, a2);
  _Unwind_Resume(a1);
}

__n128 std::__optional_storage_base<WebKit::RemoveBackgroundData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::RemoveBackgroundData,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96))
  {
    if (*(unsigned char *)(a1 + 96))
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      long long v4 = *(_OWORD *)(a2 + 16);
      long long v5 = *(_OWORD *)(a2 + 32);
      long long v6 = *(_OWORD *)(a2 + 48);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 16) = v4;
      uint64_t v7 = *(void *)(a2 + 80);
      *(void *)(a2 + 80) = 0;
      CGFloat v8 = *(const void **)(a1 + 80);
      *(void *)(a1 + 80) = v7;
      if (v8) {
        CFRelease(v8);
      }
      WTF::String::operator=((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
    }
  }
  else if (*(unsigned char *)(a1 + 96))
  {
    std::__optional_destruct_base<WebKit::RemoveBackgroundData,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    __n128 result = *(__n128 *)(a2 + 16);
    long long v10 = *(_OWORD *)(a2 + 32);
    long long v11 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v11;
    *(__n128 *)(a1 + 16) = result;
    *(_OWORD *)(a1 + 32) = v10;
    uint64_t v12 = *(void *)(a2 + 80);
    *(void *)(a2 + 80) = 0;
    *(void *)(a1 + 80) = v12;
    uint64_t v13 = *(void *)(a2 + 88);
    *(void *)(a2 + 88) = 0;
    *(void *)(a1 + 88) = v13;
    *(unsigned char *)(a1 + 96) = 1;
  }
  return result;
}

void sub_199472DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (v21) {
    CFRelease(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ89__WKContentView_WKInteraction__doAfterComputingImageAnalysisResultsForBackgroundRemoval__EN4__46clEbEUlONSt3__18optionalIN7WebCore21ShareableBitmapHandleEEERT_E_vJS8_RKNS_6StringEEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0EDD8;
  objc_destroyWeak((id *)(a1 + 104));
  uint64_t v2 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ89__WKContentView_WKInteraction__doAfterComputingImageAnalysisResultsForBackgroundRemoval__EN4__46clEbEUlONSt3__18optionalIN7WebCore21ShareableBitmapHandleEEERT_E_vJS8_RKNS_6StringEEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0EDD8;
  objc_destroyWeak((id *)(a1 + 104));
  uint64_t v3 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree((WTF *)a1, v2);
}

void _ZN3WTF6Detail15CallableWrapperIZZ89__WKContentView_WKInteraction__doAfterComputingImageAnalysisResultsForBackgroundRemoval__EN4__46clEbEUlONSt3__18optionalIN7WebCore21ShareableBitmapHandleEEERT_E_vJS8_RKNS_6StringEEE4callES8_SE_(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  v39[2] = *(id *)MEMORY[0x1E4F143B8];
  long long v6 = (id *)(a1 + 104);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    CGFloat v8 = WeakRetained;
    if (*(unsigned char *)(a2 + 64))
    {
      WebCore::ShareableBitmap::create();
      if (v31)
      {
        WebCore::ShareableBitmap::makeCGImage();
        uint64_t v9 = (WebKit *)cf;
        if (cf)
        {
          long long v10 = *a3;
          if (*a3) {
            *(_DWORD *)v10 += 2;
          }
          CFTypeRef v32 = v10;
          long long v11 = *(_OWORD *)(a1 + 64);
          long long v35 = *(_OWORD *)(a1 + 48);
          long long v36 = v11;
          uint64_t v12 = *(void *)(a1 + 80);
          long long v13 = *(_OWORD *)(a1 + 32);
          long long v33 = *(_OWORD *)(a1 + 16);
          long long v34 = v13;
          uint64_t v14 = *(void *)(a1 + 96);
          *(void *)(a1 + 96) = 0;
          *(void *)&long long v37 = v12;
          uint64_t v38 = v14;
          v39[0] = 0;
          objc_copyWeak(v39, v6);
          uint64_t v15 = WTF::fastMalloc((WTF *)0x80);
          uint64_t v16 = v15;
          *(void *)uint64_t v15 = &unk_1EEA0EE00;
          id v17 = v32;
          if (v32) {
            *(_DWORD *)v32 += 2;
          }
          *(void *)(v15 + 120) = 0;
          *(void *)(v15 + 16) = v17;
          long long v19 = v36;
          long long v18 = v37;
          long long v20 = v35;
          long long v21 = v33;
          *(_OWORD *)(v15 + 48) = v34;
          *(_OWORD *)(v15 + 64) = v20;
          *(_OWORD *)(v15 + 80) = v19;
          *(_OWORD *)(v15 + 96) = v18;
          *(_OWORD *)(v15 + 32) = v21;
          uint64_t v22 = v38;
          uint64_t v38 = 0;
          *(void *)(v15 + 112) = v22;
          objc_moveWeak((id *)(v15 + 120), v39);
          uint64_t v29 = v16;
          WebKit::requestBackgroundRemoval(v9, &v29);
          uint64_t v23 = v29;
          uint64_t v29 = 0;
          if (v23) {
            (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
          }
          objc_destroyWeak(v39);
          uint64_t v25 = v38;
          uint64_t v38 = 0;
          if (v25) {
            (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
          }
          char v26 = v32;
          CFTypeRef v32 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2) {
              WTF::StringImpl::destroy(v26, v24);
            }
            else {
              *(_DWORD *)v26 -= 2;
            }
          }
        }
        else
        {
          WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 96));
        }
        CFTypeRef v27 = cf;
        CFTypeRef cf = 0;
        if (v27) {
          CFRelease(v27);
        }
      }
      else
      {
        WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 96));
      }
      CGPoint v28 = v31;
      CFTypeRef v31 = 0;
      if (v28) {
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v28, v24);
      }
    }
    else
    {
      WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 96));
    }
    CFRelease(v8);
  }
  else
  {
    WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 96));
  }
}

void sub_199473254(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, WTF *a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a12) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)a12, a2);
  }
  CFRelease(v25);
  _Unwind_Resume(a1);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZ89__WKContentView_WKInteraction__doAfterComputingImageAnalysisResultsForBackgroundRemoval__EN4__46clEbENUlONSt3__18optionalIN7WebCore21ShareableBitmapHandleEEERT_E_clIKNS_6StringEEEDaS8_SA_EUlP7CGImageE_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0EE00;
  objc_destroyWeak((id *)(a1 + 120));
  uint64_t v3 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  long long v4 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZ89__WKContentView_WKInteraction__doAfterComputingImageAnalysisResultsForBackgroundRemoval__EN4__46clEbENUlONSt3__18optionalIN7WebCore21ShareableBitmapHandleEEERT_E_clIKNS_6StringEEEDaS8_SA_EUlP7CGImageE_vJSH_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0EE00;
  objc_destroyWeak((id *)(a1 + 120));
  uint64_t v3 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  long long v4 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree((WTF *)a1, v2);
}

void _ZN3WTF6Detail15CallableWrapperIZZZ89__WKContentView_WKInteraction__doAfterComputingImageAnalysisResultsForBackgroundRemoval__EN4__46clEbENUlONSt3__18optionalIN7WebCore21ShareableBitmapHandleEEERT_E_clIKNS_6StringEEEDaS8_SA_EUlP7CGImageE_vJSH_EE4callESH_(uint64_t a1, const void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 120));
  if (WeakRetained)
  {
    long long v6 = WeakRetained;
    if (a2)
    {
      long long v11 = *(_OWORD *)(a1 + 64);
      long long v12 = *(_OWORD *)(a1 + 80);
      *(void *)&long long v13 = *(void *)(a1 + 96);
      long long v9 = *(_OWORD *)(a1 + 32);
      long long v10 = *(_OWORD *)(a1 + 48);
      CFRetain(a2);
      uint64_t v7 = *(_DWORD **)(a1 + 16);
      if (v7) {
        *v7 += 2;
      }
      v14[2] = v11;
      v14[3] = v12;
      v14[4] = v13;
      v14[0] = v9;
      v14[1] = v10;
      uint64_t v15 = a2;
      uint64_t v16 = v7;
      char v17 = 1;
      std::__optional_storage_base<WebKit::RemoveBackgroundData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::RemoveBackgroundData,false>>((uint64_t)v6 + 3968, (uint64_t)v14);
      std::__optional_destruct_base<WebKit::RemoveBackgroundData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v8);
    }
    else
    {
      std::__optional_destruct_base<WebKit::RemoveBackgroundData,false>::reset[abi:sn180100]((uint64_t)WeakRetained + 3968, v5);
    }
    WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 112));
    CFRelease(v6);
  }
  else
  {
    WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 112));
  }
}

void sub_199473644(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::__optional_destruct_base<WebKit::RemoveBackgroundData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  CFRelease(v12);
  _Unwind_Resume(a1);
}

uint64_t *WTF::Vector<WebCore::TextAlternativeWithRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = result;
  void *result = 0;
  result[1] = 0;
  if (!a3) {
    return v3;
  }
  if (a3 < 0xAAAAAAB)
  {
    unsigned int v6 = 24 * a3;
    uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a3));
    *((_DWORD *)v3 + 2) = v6 / 0x18;
    uint64_t *v3 = v7;
    uint64_t v8 = a2 + 24 * a3;
    unsigned int v9 = *((_DWORD *)v3 + 3);
    do
    {
      uint64_t v10 = *v3 + 24 * v9;
      *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
      long long v11 = *(const void **)(a2 + 16);
      *(void *)(v10 + 16) = v11;
      if (v11) {
        CFRetain(v11);
      }
      unsigned int v9 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v9;
      a2 += 24;
    }
    while (a2 != v8);
    return v3;
  }
  __break(0xC471u);
  return result;
}

void sub_1994742F4(_Unwind_Exception *exception_object, void *a2)
{
  long long v4 = *(WTF **)v2;
  if (*(void *)v2)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_199474694(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22)
{
  if (a21) {
    WTF::fastFree(a21, a2);
  }
  CFRelease(*(CFTypeRef *)(v22 + 8));
  CFRelease(cf);
  _Unwind_Resume(a1);
}

void sub_1994748D8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_199474AD0(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WebKit::KeyEventAndCompletionBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::KeyEventAndCompletionBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::KeyEventAndCompletionBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebKit::KeyEventAndCompletionBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    long long v4 = *(const void ***)a1;
    uint64_t v5 = *(unsigned int *)(a1 + 12);
    if (a2 < 2)
    {
      uint64_t v6 = (void *)(a1 + 16);
      *(void *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(void *)a1 = v6;
    }
    WTF::VectorMover<false,WebKit::KeyEventAndCompletionBlock>::move(v4, &v4[2 * v5], v6);
    if ((const void **)(a1 + 16) != v4 && v4 != 0)
    {
      if (*(const void ***)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
  }
}

void sub_199475030(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19947512C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_199475284(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_199475584(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *aBlock, uint64_t a10, WTF::StringImpl *a11, CFTypeRef cf, uint64_t a13, CFTypeRef a14, uint64_t a15, uint64_t a16)
{
  if (cf) {
    CFRelease(cf);
  }
  if (aBlock)
  {
    if (*(_DWORD *)aBlock == 2) {
      WTF::StringImpl::destroy(aBlock, a2);
    }
    else {
      *(_DWORD *)aBlock -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ102__WKContentView_WKInteraction___internalSelectTextForContextMenuWithLocationInView_completionHandler__ENK4__78clIKN6WebKit10RevealItemEEEDabRT_EUlvE_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0F148;
  objc_destroyWeak((id *)(a1 + 56));
  unint64_t v3 = *(const void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3) {
    CFRelease(v3);
  }
  long long v4 = *(WTF::StringImpl **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Block_release(*(const void **)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ102__WKContentView_WKInteraction___internalSelectTextForContextMenuWithLocationInView_completionHandler__ENK4__78clIKN6WebKit10RevealItemEEEDabRT_EUlvE_vJEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA0F148;
  objc_destroyWeak((id *)(a1 + 56));
  unint64_t v3 = *(const void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3) {
    CFRelease(v3);
  }
  long long v4 = *(WTF::StringImpl **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Block_release(*(const void **)(a1 + 8));

  return WTF::fastFree((WTF *)a1, v5);
}

void _ZN3WTF6Detail15CallableWrapperIZZ102__WKContentView_WKInteraction___internalSelectTextForContextMenuWithLocationInView_completionHandler__ENK4__78clIKN6WebKit10RevealItemEEEDabRT_EUlvE_vJEE4callEv(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    unint64_t v3 = WeakRetained;
    (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
    CFRelease(v3);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
  }
}

void sub_1994758B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199475B24(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19947609C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, _DWORD *a19, _DWORD *a20,_DWORD *a21,uint64_t a22,uint64_t a23,char a24)
{
  if (v25) {
    CFRelease(v25);
  }
  uint64_t v28 = *(void *)(v26 - 80);
  *(void *)(v26 - 80) = 0;
  if (v28)
  {
    char v29 = 0;
    uint64_t v30 = *(void *)(v28 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v30, (unsigned __int8 *)&v29, 1u, memory_order_acquire, memory_order_acquire);
    if (v29) {
      MEMORY[0x19972E8D0](v30);
    }
    uint64_t v31 = *(void *)(v30 + 8);
    int v32 = 1;
    uint64_t v33 = v31 - 1;
    *(void *)(v30 + 8) = v31 - 1;
    if (v31 == 1)
    {
      uint64_t v36 = *(void *)(v30 + 16);
      uint64_t v34 = *(void *)(v30 + 24);
      *(void *)(v30 + 24) = 0;
      BOOL v35 = v36 != 0;
    }
    else
    {
      uint64_t v34 = 0;
      BOOL v35 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v30, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
    if (v32 == 1)
    {
      if (v33) {
        goto LABEL_16;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v30);
      if (v33) {
        goto LABEL_16;
      }
    }
    if (v34) {
      (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
    }
    if (!v35) {
      WTF::fastFree((WTF *)v30, a2);
    }
  }
LABEL_16:
  if (v24[2] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v24 + 8))(v24);
  }
  else {
    --v24[2];
  }
  if (a24)
  {
    if ((a22 & 0x8000000000000) != 0)
    {
      long long v37 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v37);
        WTF::fastFree((WTF *)v37, a2);
      }
    }
    if (a21)
    {
      if (a21[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a21 + 8))(a21);
      }
      else {
        --a21[2];
      }
    }
    if (a20)
    {
      if (a20[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a20 + 8))(a20);
      }
      else {
        --a20[2];
      }
    }
    if (a19)
    {
      if (a19[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)a19 + 8))(a19);
      }
      else {
        --a19[2];
      }
    }
    if (a16) {
      WTF::fastFree(a16, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<WTF::BlockPtr<void ()(WebKit::ProceedWithTextSelectionInImage)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::BlockPtr<void ()(WebKit::ProceedWithTextSelectionInImage)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::BlockPtr<void ()(WebKit::ProceedWithTextSelectionInImage)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WTF::BlockPtr<void ()(WebKit::ProceedWithTextSelectionInImage)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      long long v4 = *(WTF **)a1;
      uint64_t v5 = *(unsigned int *)(a1 + 12);
      uint64_t v6 = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(void *)a1 = v6;
      if (v5)
      {
        unint64_t v8 = (void *)v6;
        uint64_t v9 = 8 * v5;
        unint64_t v10 = (const void **)v4;
        do
        {
          long long v11 = *v10;
          *unint64_t v10 = 0;
          *v8++ = v11;
          long long v12 = *v10++;
          _Block_release(v12);
          v9 -= 8;
        }
        while (v9);
      }
      if (v4)
      {
        if (*(WTF **)a1 == v4)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7);
      }
    }
  }
}

void sub_199476778(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13)
{
}

void sub_199476A48(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_199476BC0(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_199476DEC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_199476F94(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1994771D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF *a37,int a38,WTF *a39,int a40)
{
  MEMORY[0x199732DE0](v42);
  MEMORY[0x199732DE0](v41);
  MEMORY[0x199732DE0](v40);
  MEMORY[0x199732DE0](&a10);
  _Unwind_Resume(a1);
}

void sub_199477584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (v21) {
    CFRelease(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_1994779D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (v21) {
    CFRelease(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t enableModernDownloadProgress(void)
{
  id v0 = objc_alloc((Class)off_1EC2B21A8());
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    char v1 = objc_opt_respondsToSelector();
    if (!v0) {
      return v1 & 1;
    }
    goto LABEL_3;
  }
  char v1 = 1;
  if (v0) {
LABEL_3:
  }
    CFRelease(v0);
  return v1 & 1;
}

void sub_199477B70(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t activityAccessToken@<X0>(void *a1@<X8>)
{
  _MergedGlobals_6();
  if (objc_opt_respondsToSelector())
  {
    int v2 = _MergedGlobals_6;
  }
  else
  {
    off_1EC2B21A8();
    uint64_t result = objc_opt_respondsToSelector();
    if ((result & 1) == 0)
    {
      *a1 = 0;
      a1[1] = 0;
      return result;
    }
    int v2 = off_1EC2B21A8;
  }
  long long v4 = (void *)[(id)v2() createAccessToken];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (char *)[v4 bytes];
    unint64_t v7 = (WTF *)[v5 length];
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
  }

  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>((uint64_t)a1, v6, v7);
}

void sub_199477D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_199477FF8(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_199478914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id location, uint64_t a14, id a15)
{
  _Block_release(v17);
  _Block_release(v16);
  _Block_release(v15);
  _Unwind_Resume(a1);
}

void sub_199478CE4(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_199478E74(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_199479074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1994792D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  _Block_release(v10);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_199479508(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19947969C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

Class initBEDownloadMonitor(void)
{
  if ((_MergedGlobals_7 & 1) == 0)
  {
    qword_1EB35A3B8 = ___ZL23BrowserEngineKitLibraryv_block_invoke();
    _MergedGlobals_7 = 1;
  }
  Class result = objc_getClass("BEDownloadMonitor");
  qword_1EB35A3B0 = (uint64_t)result;
  _MergedGlobals_6 = BEDownloadMonitorFunction;
  return result;
}

uint64_t BEDownloadMonitorFunction(void)
{
  return qword_1EB35A3B0;
}

uint64_t ___ZL23BrowserEngineKitLibraryv_block_invoke()
{
  uint64_t result = (uint64_t)dlopen("/System/Library/Frameworks/BrowserEngineKit.framework/BrowserEngineKit", 2);
  if (!result)
  {
    uint64_t result = 13;
    __break(0xC471u);
  }
  return result;
}

Class initBEDownloadProgress(void)
{
  if ((_MergedGlobals_7 & 1) == 0)
  {
    qword_1EB35A3B8 = ___ZL23BrowserEngineKitLibraryv_block_invoke();
    _MergedGlobals_7 = 1;
  }
  Class result = objc_getClass("BEDownloadProgress");
  qword_1EB35A3C0 = (uint64_t)result;
  off_1EC2B21A8 = BEDownloadProgressFunction;
  return result;
}

uint64_t BEDownloadProgressFunction(void)
{
  return qword_1EB35A3C0;
}

void sub_199479A34(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v9)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

Class initBEURLWithBookmark(void)
{
  if ((_MergedGlobals_7 & 1) == 0)
  {
    qword_1EB35A3B8 = ___ZL23BrowserEngineKitLibraryv_block_invoke();
    _MergedGlobals_7 = 1;
  }
  Class result = objc_getClass("BEURLWithBookmark");
  qword_1EB35A3C8 = (uint64_t)result;
  off_1EC2B21B0 = BEURLWithBookmarkFunction;
  return result;
}

uint64_t BEURLWithBookmarkFunction(void)
{
  return qword_1EB35A3C8;
}

void sub_199479E2C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v9)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19947A1B0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v9)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19947A408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_19947A740(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, CFTypeRef cf)
{
  if (a11)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a11, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)a11);
      WTF::fastFree(a11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19947A9C8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19947ABF4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, CFTypeRef cf)
{
  if (a11)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a11, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)a11);
      WTF::fastFree(a11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19947AEA0(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19947B0CC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, CFTypeRef cf)
{
  if (a11)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a11, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)a11);
      WTF::fastFree(a11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19947B3A8(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19947B474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_19947B730(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19947B958(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19947BF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf, uint64_t a20,uint64_t a21,CFTypeRef a22,uint64_t a23,uint64_t a24)
{
  CFRelease(v25);
  if (v24) {
    CFRelease(v24);
  }
  _Unwind_Resume(a1);
}

void sub_19947C508(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19947C790(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::Vector<appendFilesAsShareableURLs(WTF::RetainPtr<NSMutableArray> &&,WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSURL *,BOOL,WTF::CompletionHandler<void ()(WTF::RetainPtr<NSMutableArray> &)> &&)::FileWriteTask,0ul,WebCore::RawFile,16ul,WTF::CrashOnOverflow>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = (const void **)(*(void *)a1 + 8);
    do
    {
      uint64_t v6 = *v5;
      void *v5 = 0;
      if (v6) {
        CFRelease(v6);
      }
      unint64_t v7 = (WTF::StringImpl *)*(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, a2);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  unint64_t v8 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v8, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<appendFilesAsShareableURLs(WTF::RetainPtr<NSMutableArray> &&,WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSURL *,BOOL,WTF::CompletionHandler<void ()(WTF::RetainPtr<NSMutableArray> &)> &&)::$_1,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EEA0F6E0;
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WTF::Vector<appendFilesAsShareableURLs(WTF::RetainPtr<NSMutableArray> &&,WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSURL *,BOOL,WTF::CompletionHandler<void ()(WTF::RetainPtr<NSMutableArray> &)> &&)::FileWriteTask,0ul,WebCore::RawFile,16ul,WTF::CrashOnOverflow>::~Vector((unsigned int *)(a1 + 16), a2);
  uint64_t v5 = *(const void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5) {
    CFRelease(v5);
  }
  return a1;
}

{
  uint64_t v3;
  const void *v4;
  void *v5;
  const void *v6;
  uint64_t vars8;

  *(void *)a1 = &unk_1EEA0F6E0;
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WTF::Vector<appendFilesAsShareableURLs(WTF::RetainPtr<NSMutableArray> &&,WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSURL *,BOOL,WTF::CompletionHandler<void ()(WTF::RetainPtr<NSMutableArray> &)> &&)::FileWriteTask,0ul,WebCore::RawFile,16ul,WTF::CrashOnOverflow>::~Vector((unsigned int *)(a1 + 16), a2);
  uint64_t v6 = *(const void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v6) {
    CFRelease(v6);
  }

  return WTF::fastFree((WTF *)a1, v5);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<appendFilesAsShareableURLs(WTF::RetainPtr<NSMutableArray> &&,WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSURL *,BOOL,WTF::CompletionHandler<void ()(WTF::RetainPtr<NSMutableArray> &)> &&)::$_1,void>::call(uint64_t a1, const WTF::String *a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(unsigned int *)(a1 + 28);
  if (!v3) {
    goto LABEL_21;
  }
  uint64_t v4 = *(WebCore::ResourceResponseBase **)(a1 + 16);
  uint64_t v5 = (WebCore::ResourceResponseBase *)((char *)v4 + 16 * v3);
  while (1)
  {
    WebCore::ResourceResponseBase::sanitizeSuggestedFilename((uint64_t *)&v15, v4, a2);
    uint64_t v6 = v15 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
    id v8 = +[WKShareSheet writeFileToShareableURL:v6 data:*((void *)v4 + 1) temporaryDirectory:*(void *)(v2 + 32)];
    uint64_t v9 = v15;
    uint64_t v15 = 0;
    if (v9) {
      break;
    }
LABEL_8:
    if (!v8) {
      goto LABEL_18;
    }
LABEL_11:
    if (*(unsigned char *)(v2 + 40))
    {
      unint64_t v10 = [[WKShareSheetFileItemProvider alloc] initWithURL:v8];
      a1 = *(void *)(v2 + 8);
      if (!v10) {
        goto LABEL_19;
      }
      [(id)a1 addObject:v10];
      CFRelease(v10);
    }
    else
    {
      a1 = [*(id *)(v2 + 8) addObject:v8];
    }
    uint64_t v4 = (WebCore::ResourceResponseBase *)((char *)v4 + 16);
    if (v4 == v5) {
      goto LABEL_21;
    }
  }
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
    goto LABEL_8;
  }
  WTF::StringImpl::destroy(v9, v7);
  if (v8) {
    goto LABEL_11;
  }
LABEL_18:
  a1 = *(void *)(v2 + 8);
LABEL_19:
  *(void *)(v2 + 8) = 0;
  if (a1) {
    CFRelease((CFTypeRef)a1);
  }
LABEL_21:
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  uint64_t v11 = *(void *)(v2 + 48);
  *(void *)(v2 + 48) = 0;
  uint64_t v12 = *(void *)(v2 + 8);
  *(void *)(v2 + 8) = 0;
  long long v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(void *)long long v13 = &unk_1EEA0F708;
  *((void *)v13 + 1) = v11;
  *((void *)v13 + 2) = v12;
  uint64_t v15 = v13;
  WTF::RunLoop::dispatch();
  Class result = v15;
  uint64_t v15 = 0;
  if (result) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_19947CC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10) {
    (*(void (**)(WTF::StringImpl *))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<appendFilesAsShareableURLs(WTF::RetainPtr<NSMutableArray> &&,WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSURL *,BOOL,WTF::CompletionHandler<void ()(WTF::RetainPtr<NSMutableArray> &)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EEA0F708;
  uint64_t v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<appendFilesAsShareableURLs(WTF::RetainPtr<NSMutableArray> &&,WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSURL *,BOOL,WTF::CompletionHandler<void ()(WTF::RetainPtr<NSMutableArray> &)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA0F708;
  uint64_t v3 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<appendFilesAsShareableURLs(WTF::RetainPtr<NSMutableArray> &&,WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,NSURL *,BOOL,WTF::CompletionHandler<void ()(WTF::RetainPtr<NSMutableArray> &)> &&)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, a1 + 16);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_19947CEE8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::presentStorageAccessAlert(void *a1, WTF::String *this, WTF::String *a3, uint64_t *a4)
{
  WTF::String::createCFString((uint64_t *)&v17, this);
  WTF::String::createCFString((uint64_t *)&cf, a3);
  unint64_t v7 = NSString;
  WebCore::copyLocalizedString((uint64_t *)&arg, (WebCore *)@"Allow “%@” to use cookies and website data while browsing “%@”?", v8);
  if (arg)
  {
    CFAutorelease(arg);
    CFTypeRef v9 = arg;
  }
  else
  {
    CFTypeRef v9 = 0;
  }
  unint64_t v10 = (WebKit *)objc_msgSend(v7, "stringWithFormat:", v9, v17, cf);
  uint64_t v11 = NSString;
  WebCore::copyLocalizedString((uint64_t *)&arg, (WebCore *)@"This will allow “%@” to track your activity.", v12);
  if (arg)
  {
    CFAutorelease(arg);
    CFTypeRef v13 = arg;
  }
  else
  {
    CFTypeRef v13 = 0;
  }
  WebKit::displayStorageAccessAlert(a1, v10, (NSString *)objc_msgSend(v11, "stringWithFormat:", v13, v17), a4);
  CFTypeRef v14 = cf;
  CFTypeRef cf = 0;
  if (v14) {
    CFRelease(v14);
  }
  CFTypeRef v15 = v17;
  CFTypeRef v17 = 0;
  if (v15) {
    CFRelease(v15);
  }
}

void sub_19947D128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef a13, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a12) {
    CFRelease(a12);
  }
  if (a13) {
    CFRelease(a13);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::displayStorageAccessAlert(void *a1, WebKit *a2, NSString *a3, uint64_t *a4)
{
  uint64_t v7 = *a4;
  *a4 = 0;
  CFStringRef v8 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  void *v8 = MEMORY[0x1E4F14398];
  v8[1] = 50331650;
  v8[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::displayStorageAccessAlert(WKWebView *,NSString *,NSString *,NSString *,NSArray<NSString *> *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::displayStorageAccessAlert(WKWebView *,NSString *,NSString *,NSString *,NSArray<NSString *> *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
  v8[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::displayStorageAccessAlert(WKWebView *,NSString *,NSString *,NSString *,NSArray<NSString *> *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::displayStorageAccessAlert(WKWebView *,NSString *,NSString *,NSString *,NSArray<NSString *> *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::descriptor;
  v8[4] = v7;
  WebCore::localizedString((uint64_t *)&cf, (WebCore *)@"Allow (cross-site cookie and website data access)", v9);
  if (cf)
  {
    uint64_t v11 = (__CFString *)WTF::StringImpl::operator NSString *();
    CFStringRef v12 = (WTF::StringImpl *)cf;
    CFTypeRef cf = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
  else
  {
    uint64_t v11 = &stru_1EEA10550;
  }
  WebCore::localizedString((uint64_t *)&cf, (WebCore *)@"Don’t Allow (cross-site cookie and website data access)", (const __CFString *)v10);
  if (cf)
  {
    CFTypeRef v14 = (__CFString *)WTF::StringImpl::operator NSString *();
    CFTypeRef v15 = (WTF::StringImpl *)cf;
    CFTypeRef cf = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v13);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    CFTypeRef v14 = &stru_1EEA10550;
  }
  WebKit::createUIAlertController(a2, a3, &cf);
  uint64_t v16 = (void *)MEMORY[0x1E4F42720];
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3321888768;
  float v26[2] = ___ZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEE_block_invoke;
  v26[3] = &__block_descriptor_40_e8_32c120_ZTSKZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEEE3__1_e23_v16__0__UIAlertAction_8l;
  CFTypeRef v17 = _Block_copy(v8);
  CFTypeRef v27 = _Block_copy(v17);
  uint64_t v18 = [v16 actionWithTitle:v11 style:1 handler:v26];
  _Block_release(v17);
  long long v19 = (void *)MEMORY[0x1E4F42720];
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3321888768;
  float v24[2] = ___ZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEE_block_invoke_33;
  v24[3] = &__block_descriptor_40_e8_32c120_ZTSKZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEEE3__2_e23_v16__0__UIAlertAction_8l;
  long long v20 = _Block_copy(v8);
  aBlock = _Block_copy(v20);
  uint64_t v21 = [v19 actionWithTitle:v14 style:0 handler:v24];
  _Block_release(v20);
  [(id)cf addAction:v21];
  [(id)cf addAction:v18];
  uint64_t v22 = objc_msgSend(a1, "_wk_viewControllerForFullScreenPresentation");
  [v22 presentViewController:cf animated:1 completion:0];
  _Block_release(aBlock);
  _Block_release(v27);
  CFTypeRef v23 = cf;
  CFTypeRef cf = 0;
  if (v23) {
    CFRelease(v23);
  }
  _Block_release(v8);
}

void sub_19947D430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, CFTypeRef cf)
{
  _Block_release(aBlock);
  _Block_release(v21);
  _Block_release(a19);
  if (cf) {
    CFRelease(cf);
  }
  _Block_release(v20);
  _Unwind_Resume(a1);
}

void WebKit::presentStorageAccessAlertQuirk(void *a1, WTF::String *this, WTF::String *a3, WTF::String *a4, uint64_t *a5)
{
  WTF::String::createCFString((uint64_t *)&v21, this);
  WTF::String::createCFString((uint64_t *)&v20, a3);
  WTF::String::createCFString((uint64_t *)&cf, a4);
  CFStringRef v9 = NSString;
  WebCore::copyLocalizedString((uint64_t *)&v22, (WebCore *)@"Allow “%@” and “%@” to use cookies and website data while browsing “%@”?", v10);
  if (v22)
  {
    CFAutorelease(v22);
    CFTypeRef v11 = v22;
  }
  else
  {
    CFTypeRef v11 = 0;
  }
  CFStringRef v12 = (WebKit *)objc_msgSend(v9, "stringWithFormat:", v11, v21, v20, cf);
  CFTypeRef v13 = NSString;
  WebCore::copyLocalizedString((uint64_t *)&v22, (WebCore *)@"This will allow “%@” and “%@” to track your activity.", v14);
  if (v22)
  {
    CFAutorelease(v22);
    CFTypeRef v15 = v22;
  }
  else
  {
    CFTypeRef v15 = 0;
  }
  WebKit::displayStorageAccessAlert(a1, v12, (NSString *)objc_msgSend(v13, "stringWithFormat:", v15, v21, v20), a5);
  CFTypeRef v16 = cf;
  CFTypeRef cf = 0;
  if (v16) {
    CFRelease(v16);
  }
  CFTypeRef v17 = v20;
  CFTypeRef v20 = 0;
  if (v17) {
    CFRelease(v17);
  }
  CFTypeRef v18 = v21;
  CFTypeRef v21 = 0;
  if (v18) {
    CFRelease(v18);
  }
}

void sub_19947D64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, CFTypeRef a14, CFTypeRef a15)
{
  CFTypeRef v17 = *(const void **)(v15 - 40);
  *(void *)(v15 - 40) = 0;
  if (v17) {
    CFRelease(v17);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a14) {
    CFRelease(a14);
  }
  if (a15) {
    CFRelease(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::presentStorageAccessAlertSSOQuirk(void *a1, __CFString *a2, uint64_t *a3, uint64_t *a4)
{
  CFStringRef v8 = NSString;
  WebCore::copyLocalizedString((uint64_t *)&arg, (WebCore *)@"Allow related %@ websites to share cookies and website data?", a2);
  if (arg)
  {
    CFAutorelease(arg);
    CFTypeRef v9 = arg;
  }
  else
  {
    CFTypeRef v9 = 0;
  }
  WTF::String::createCFString((uint64_t *)&arg, (WTF::String *)a2);
  CFStringRef v12 = (WebKit *)objc_msgSend(v8, "stringWithFormat:", v9, arg);
  CFTypeRef v13 = arg;
  CFTypeRef arg = 0;
  if (v13) {
    CFRelease(v13);
  }
  v73 = 0;
  v71 = (WTF::StringImpl **)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a3, v10, v11);
  uint64_t v72 = v14;
  if (*a3) {
    CFTypeRef v16 = (WTF::StringImpl **)(*a3 + 24 * *(unsigned int *)(*a3 - 4));
  }
  else {
    CFTypeRef v16 = 0;
  }
  while (1)
  {
    CFTypeRef v17 = v71;
    if (v71 == v16) {
      break;
    }
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v73, v71, v15, (uint64_t)&arg);
    uint64_t v20 = *((unsigned int *)v17 + 5);
    if (v20)
    {
      CFTypeRef v21 = (WTF::StringImpl **)v17[1];
      uint64_t v22 = 8 * v20;
      do
      {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v73, v21++, v19, (uint64_t)&arg);
        v22 -= 8;
      }
      while (v22);
    }
    v71 += 3;
    WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v71, v18, v19);
  }
  if (!v73 || *((_DWORD *)v73 - 3) <= 1u)
  {
    WTF::CompletionHandler<void ()(BOOL)>::operator()(a4);
    goto LABEL_93;
  }
  v71 = 0;
  uint64_t v72 = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map((uint64_t *)&v71, &v73);
  CFTypeRef arg = WTF::codePointCompareLessThan;
  unint64_t v24 = 126 - 2 * __clz(HIDWORD(v72));
  if (HIDWORD(v72)) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WTF::String const&,WTF::String const&),WTF::String*,false>((uint64_t)v71, (char *)&v71[HIDWORD(v72)], (uint64_t (**)(uint64_t *, uint64_t *))&arg, v25, 1);
  uint64_t v27 = HIDWORD(v72);
  if (HIDWORD(v72) > 3)
  {
    uint64_t v33 = NSString;
    WebCore::copyLocalizedString((uint64_t *)&arg, (WebCore *)@"Using the same cookies and website data is required for %s, %s, and %lu other websites to work correctly, but could make it easier to track your browsing across these websites.", v26);
    if (arg)
    {
      CFAutorelease(arg);
      CFTypeRef v34 = arg;
    }
    else
    {
      CFTypeRef v34 = 0;
    }
    if (!HIDWORD(v72))
    {
      __break(0xC471u);
      JUMPOUT(0x19947DD18);
    }
    WTF::String::utf8();
    if (arg) {
      BOOL v35 = (char *)arg + 16;
    }
    else {
      BOOL v35 = 0;
    }
    if (HIDWORD(v72) > 1)
    {
      WTF::String::utf8();
      if (v74) {
        uint64_t v36 = v74 + 16;
      }
      else {
        uint64_t v36 = 0;
      }
      uint64_t v38 = (NSString *)objc_msgSend(v33, "stringWithFormat:", v34, v35, v36, HIDWORD(v72) - 2);
      uint64_t v39 = (WTF *)v74;
      v74 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 1) {
          WTF::fastFree(v39, v37);
        }
        else {
          --*(_DWORD *)v39;
        }
      }
      uint64_t v40 = (WTF *)arg;
      CFTypeRef arg = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 1) {
          WTF::fastFree(v40, v37);
        }
        else {
          --*(_DWORD *)v40;
        }
      }
      uint64_t v41 = NSString;
      WebCore::copyLocalizedString((uint64_t *)&arg, (WebCore *)@"Related %@ websites", v37);
      if (arg)
      {
        CFAutorelease(arg);
        CFTypeRef v42 = arg;
      }
      else
      {
        CFTypeRef v42 = 0;
      }
      WTF::String::createCFString((uint64_t *)&arg, (WTF::String *)a2);
      objc_msgSend(v41, "stringWithFormat:", v42, arg);
      CFTypeRef v43 = arg;
      CFTypeRef arg = 0;
      if (v43) {
        CFRelease(v43);
      }
      uint64_t v44 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:HIDWORD(v72)];
      if (HIDWORD(v72))
      {
        v45 = (void *)v44;
        v46 = v71;
        uint64_t v47 = 8 * HIDWORD(v72);
        do
        {
          if (*v46) {
            v48 = (__CFString *)WTF::StringImpl::operator NSString *();
          }
          else {
            v48 = &stru_1EEA10550;
          }
          [v45 addObject:v48];
          ++v46;
          v47 -= 8;
        }
        while (v47);
      }
      goto LABEL_92;
    }
LABEL_107:
    __break(0xC471u);
    JUMPOUT(0x19947DD10);
  }
  if (!HIDWORD(v72)) {
    goto LABEL_107;
  }
  int v28 = HIDWORD(v72) - 1;
  char v29 = v71[HIDWORD(v72) - 1];
  v71[HIDWORD(v72) - 1] = 0;
  v66 = v29;
  WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)&v71[v27 - 1], (WTF::StringImpl *)&v71[v27]);
  HIDWORD(v72) = v28;
  CFTypeRef arg = 0;
  v68 = 0;
  int v69 = 0;
  char v70 = 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v64 = (WTF::StringImpl *)v74;
  WTF::makeStringByJoining();
  if (v69 || v68)
  {
    if (v65)
    {
      uint64_t v62 = *((void *)v65 + 1);
      unint64_t v63 = *((unsigned int *)v65 + 1) | ((unint64_t)((*((_DWORD *)v65 + 4) >> 2) & 1) << 32);
    }
    else
    {
      uint64_t v62 = 0;
      unint64_t v63 = 0x100000000;
    }
    WTF::StringBuilder::append((uint64_t)&arg, v62, v63);
    uint64_t v31 = v65;
  }
  else
  {
    WTF::String::operator=((uint64_t *)&arg, &v65);
    uint64_t v31 = v65;
    if (v65) {
      int v32 = *((_DWORD *)v65 + 1);
    }
    else {
      int v32 = 0;
    }
    int v69 = v32;
  }
  v65 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, v30);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  if (v64)
  {
    if (*(_DWORD *)v64 == 2) {
      WTF::StringImpl::destroy(v64, v30);
    }
    else {
      *(_DWORD *)v64 -= 2;
    }
  }
  if (HIDWORD(v72) == 2) {
    WTF::StringBuilder::append();
  }
  v49 = NSString;
  WebCore::copyLocalizedString((uint64_t *)&v74, (WebCore *)@"Using the same cookies and website data is required for %s and %s to work correctly, but could make it easier to track your browsing across these websites.", (const __CFString *)v30);
  if (v74)
  {
    CFAutorelease(v74);
    v50 = v74;
  }
  else
  {
    v50 = 0;
  }
  v51 = (WTF::StringImpl *)arg;
  if (arg
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&arg),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&arg),
        (v51 = (WTF::StringImpl *)arg) != 0))
  {
    *(_DWORD *)v51 += 2;
  }
  v65 = v51;
  WTF::String::utf8();
  v52 = v74;
  WTF::String::utf8();
  v53 = v52 + 16;
  if (!v52) {
    v53 = 0;
  }
  uint64_t v38 = (NSString *)objc_msgSend(v49, "stringWithFormat:", v50, v53, 0);
  v55 = (WTF *)v74;
  v74 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1) {
      WTF::fastFree(v55, v54);
    }
    else {
      --*(_DWORD *)v55;
    }
  }
  v56 = v65;
  v65 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2) {
      WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v54);
    }
    else {
      *(_DWORD *)v56 -= 2;
    }
  }
  v57 = v68;
  v68 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2) {
      WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v54);
    }
    else {
      *(_DWORD *)v57 -= 2;
    }
  }
  v58 = (WTF::StringImpl *)arg;
  CFTypeRef arg = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2) {
      WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v54);
    }
    else {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = v66;
  v66 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2) {
      WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v54);
    }
    else {
      *(_DWORD *)v59 -= 2;
    }
  }
LABEL_92:
  WebKit::displayStorageAccessAlert(a1, v12, v38, a4);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v60);
LABEL_93:
  Class result = v73;
  if (v73) {
    return (uint64_t *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v73, v23);
  }
  return result;
}

void sub_19947DD24(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14, WTF::StringImpl *a15, WTF::StringImpl *cf, WTF::StringImpl *a17, uint64_t a18, char a19)
{
  CFTypeRef v21 = *(const void **)(v19 - 72);
  *(void *)(v19 - 72) = 0;
  if (v21) {
    CFRelease(v21);
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (cf)
  {
    if (*(_DWORD *)cf == 2) {
      WTF::StringImpl::destroy(cf, a2);
    }
    else {
      *(_DWORD *)cf -= 2;
    }
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a19, a2);
  CFTypeRef v23 = *(WTF::StringImpl ***)(v19 - 80);
  if (v23) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v23, v22);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c120_ZTSKZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEEE3__1(uint64_t a1, uint64_t a2)
{
  Class result = _Block_copy(*(const void **)(a2 + 32));
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c120_ZTSKZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEEE3__1(uint64_t a1)
{
}

uint64_t ___ZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEE_block_invoke_33(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c120_ZTSKZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEEE3__2(uint64_t a1, uint64_t a2)
{
  Class result = _Block_copy(*(const void **)(a2 + 32));
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c120_ZTSKZN6WebKit25displayStorageAccessAlertEP9WKWebViewP8NSStringS3_S3_P7NSArrayIS3_EON3WTF17CompletionHandlerIFvbEEEE3__2(uint64_t a1)
{
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::displayStorageAccessAlert(WKWebView *,NSString *,NSString *,NSString *,NSArray<NSString *> *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::displayStorageAccessAlert(WKWebView *,NSString *,NSString *,NSString *,NSArray<NSString *> *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::displayStorageAccessAlert(WKWebView *,NSString *,NSString *,NSString *,NSArray<NSString *> *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::displayStorageAccessAlert(WKWebView *,NSString *,NSString *,NSString *,NSArray<NSString *> *,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)(a1 + 32));
}

void sub_19947E288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19947E358(_Unwind_Exception *a1)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_19947E568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19947E640(_Unwind_Exception *a1)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_19947E7B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19947E9C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19947EABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19947EBEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19947ED10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19947F04C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  if (a10) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_19947F39C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19947F518(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19947F5E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19947F694(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19947F86C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19947F91C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19947FA68(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void sub_19947FCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Unwind_Resume(a1);
}

void sub_19947FDC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19947FE7C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19947FF48(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199480184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1994802D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1994807D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  _Unwind_Resume(a1);
}

void sub_1994809D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Unwind_Resume(a1);
}

void sub_199480A9C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199480B30(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl **a10)
{
  if (a10) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_199480C3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199480CE0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199480D88(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

id toAPI(void **a1)
{
  if (*a1) {
    uint64_t v2 = *((unsigned int *)*a1 - 3);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:v2];
  uint64_t v4 = (const WTF::WallTime *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a1);
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  if (*a1) {
    uint64_t v8 = (uint64_t)&(*a1)[2 * *((unsigned int *)*a1 - 1)];
  }
  else {
    uint64_t v8 = 0;
  }
  if ((const WTF::WallTime *)v8 != v4)
  {
    do
    {
      CFTypeRef v9 = WebKit::toAPI((const WTF::WallTime *)((char *)v6 + 8), v5);
      if (*(void *)v6) {
        uint64_t v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v10 = &stru_1EEA10550;
      }
      [v3 setObject:v9 forKey:v10];

      while (1)
      {
        uint64_t v6 = (const WTF::WallTime *)((char *)v6 + 16);
        if (v6 == v7) {
          break;
        }
        if ((unint64_t)(*(void *)v6 + 1) > 1) {
          goto LABEL_15;
        }
      }
      uint64_t v6 = v7;
LABEL_15:
      ;
    }
    while (v6 != (const WTF::WallTime *)v8);
  }
  CFTypeRef v11 = (void *)[v3 copy];

  return v11;
}

{
  uint64_t v2;
  void *v3;
  id **v4;
  const WTF::WallTime *v5;
  id **v6;
  id **v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t vars8;

  if (*a1) {
    uint64_t v2 = *((unsigned int *)*a1 - 3);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:v2];
  uint64_t v4 = (id **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a1);
  uint64_t v6 = v4;
  uint64_t v7 = (id **)v5;
  if (*a1) {
    uint64_t v8 = (uint64_t)&(*a1)[2 * *((unsigned int *)*a1 - 1)];
  }
  else {
    uint64_t v8 = 0;
  }
  if ((id **)v8 != v4)
  {
    do
    {
      CFTypeRef v9 = WebKit::toAPI((WebKit *)(v6 + 1), v5);
      uint64_t v10 = WebKit::WebExtensionAction::wrapper(*v6);
      [v3 setObject:v9 forKey:v10];

      while (1)
      {
        v6 += 2;
        if (v6 == v7) {
          break;
        }
        if ((unint64_t)*v6 + 1 > 1) {
          goto LABEL_13;
        }
      }
      uint64_t v6 = v7;
LABEL_13:
      ;
    }
    while (v6 != (id **)v8);
  }
  CFTypeRef v11 = (void *)[v3 copy];

  return v11;
}

void sub_199480F38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199481030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void toImpl(uint64_t *a1, void *a2)
{
  id v3 = a2;
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x3812000000;
  CFStringRef v12 = __Block_byref_object_copy__16;
  CFTypeRef v13 = __Block_byref_object_dispose__16;
  uint64_t v14 = &unk_19964AFC1;
  uint64_t v15 = 0;
  unsigned int v4 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize([v3 count]);
  if (v4 <= 8) {
    unsigned int v5 = 8;
  }
  else {
    unsigned int v5 = v4;
  }
  uint64_t v6 = WTF::fastMalloc((WTF *)(16 * v5 + 16));
  bzero((void *)(v6 + 16), 16 * v5);
  uint64_t v15 = (WTF::StringImpl **)(v6 + 16);
  *(_DWORD *)(v6 + 12) = v5;
  *((_DWORD *)v15 - 2) = v5 - 1;
  *((_DWORD *)v15 - 4) = 0;
  *((_DWORD *)v15 - 3) = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = ___ZL6toImplP12NSDictionaryIP8NSStringP6NSDateE_block_invoke;
  v8[3] = &unk_1E5814218;
  v8[4] = &v9;
  [v3 enumerateKeysAndObjectsUsingBlock:v8];
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(a1, (void **)v10 + 6);
  _Block_object_dispose(&v9, 8);
  if (v15) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v15, v7);
  }
}

{
  id v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  void v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t *(*v13)(uint64_t, void *);
  void *v14;
  uint64_t *v15;

  id v3 = a2;
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x3812000000;
  CFStringRef v12 = __Block_byref_object_copy__432;
  CFTypeRef v13 = __Block_byref_object_dispose__433;
  uint64_t v14 = &unk_19964AFC1;
  uint64_t v15 = 0;
  unsigned int v4 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize([v3 count]);
  if (v4 <= 8) {
    unsigned int v5 = 8;
  }
  else {
    unsigned int v5 = v4;
  }
  uint64_t v6 = WTF::fastMalloc((WTF *)(16 * v5 + 16));
  bzero((void *)(v6 + 16), 16 * v5);
  uint64_t v15 = (uint64_t *)(v6 + 16);
  *(_DWORD *)(v6 + 12) = v5;
  *((_DWORD *)v15 - 2) = v5 - 1;
  *((_DWORD *)v15 - 4) = 0;
  *((_DWORD *)v15 - 3) = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = ___ZL6toImplP12NSDictionaryIP26WKWebExtensionMatchPatternP6NSDateE_block_invoke;
  v8[3] = &unk_1E5814240;
  v8[4] = &v9;
  [v3 enumerateKeysAndObjectsUsingBlock:v8];
  WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::HashTable(a1, (void **)v10 + 6);
  _Block_object_dispose(&v9, 8);
  if (v15) {
    WTF::HashTable<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>>::deallocateTable(v15, v7);
  }
}

void sub_1994811C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl **a20)
{
  _Block_object_dispose(&a14, 8);
  if (a20) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(a20, v22);
  }

  _Unwind_Resume(a1);
}

void sub_199481350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19948144C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1994815E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20)
{
  _Block_object_dispose(&a14, 8);
  if (a20) {
    WTF::HashTable<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>>::deallocateTable(a20, v22);
  }

  _Unwind_Resume(a1);
}

void sub_199481724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199481874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1994819E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199481B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199481BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199481DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  _Unwind_Resume(a1);
}

void sub_199481F00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1994820EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  _Unwind_Resume(a1);
}

void sub_199482214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19948240C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  _Unwind_Resume(a1);
}

void sub_1994825A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_199482748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Unwind_Resume(a1);
}

double toImpl(NSDate *a1)
{
  uint64_t v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v8 = [NSString stringWithUTF8String:"WallTime toImpl(NSDate *__strong)"];
      [v7 handleFailureInFunction:v8, @"WKWebExtensionContext.mm", 193, @"Invalid parameter not satisfying: %@", @"!date || [date isKindOfClass:NSDate.class]" file lineNumber description];
    }
    double v3 = WebKit::toImpl((WebKit *)v1, v2);
  }
  else
  {
    unsigned int v4 = [MEMORY[0x1E4F1C9C8] distantFuture];
    double v3 = WebKit::toImpl(v4, v5);
  }
  return v3;
}

void sub_199482890(_Unwind_Exception *a1)
{
  unsigned int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19948297C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199482B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  _Unwind_Resume(a1);
}

void sub_199482D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_199482EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Unwind_Resume(a1);
}

void sub_199482FC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199483194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199483308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_199483494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1994835FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Unwind_Resume(a1);
}

void sub_1994836FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }

  _Unwind_Resume(a1);
}

void sub_19948388C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1994839D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199483B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  _Unwind_Resume(a1);
}

void sub_199483C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_199483CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199483DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199483EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19948401C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199484104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199484220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebKit::WebExtensionWindow,WTF::RawPtrTraits<WebKit::WebExtensionWindow>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionWindow>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

void sub_1994843D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

void sub_1994844E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1994845E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1994846FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199484804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199484918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199484AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199484C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void toImpl(uint64_t *a1, void *a2, uint64_t *a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  *a1 = 0;
  id v43 = v5;
  unsigned int v6 = [v5 count];
  unsigned int v7 = (v6 - 1) | ((v6 - 1) >> 1) | (((v6 - 1) | ((v6 - 1) >> 1)) >> 2);
  unsigned int v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
  unint64_t v9 = (v8 | HIWORD(v8)) + 1;
  if (v9 > 0x400)
  {
    if (v9 > 2 * (unint64_t)v6) {
      goto LABEL_6;
    }
  }
  else if (3 * v9 > 4 * (unint64_t)v6)
  {
LABEL_4:
    double v10 = (double)v6;
    double v11 = (double)v9;
    double v12 = 0.604166667;
    goto LABEL_7;
  }
  LODWORD(v9) = 2 * v9;
  if (v9 <= 0x400) {
    goto LABEL_4;
  }
LABEL_6:
  double v10 = (double)v6;
  double v11 = (double)v9;
  double v12 = 0.416666667;
LABEL_7:
  if (v11 * v12 <= v10) {
    LODWORD(v9) = 2 * v9;
  }
  if (v9 <= 8) {
    unsigned int v13 = 8;
  }
  else {
    unsigned int v13 = v9;
  }
  uint64_t v14 = WTF::fastZeroedMalloc((WTF *)(8 * v13 + 16));
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v13;
  *(_DWORD *)(*a1 - 8) = v13 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  id v15 = v43;
  uint64_t v16 = [v15 countByEnumeratingWithState:&v45 objects:v49 count:16];
  if (v16)
  {
    uint64_t v17 = *(void *)v46;
    do
    {
      uint64_t v18 = 0;
      do
      {
        if (*(void *)v46 != v17) {
          objc_enumerationMutation(v15);
        }
        uint64_t v19 = *(void **)(*((void *)&v45 + 1) + 8 * v18);
        if (([v19 conformsToProtocol:&unk_1EEA97528] & 1) == 0)
        {
          CFTypeRef v42 = [MEMORY[0x1E4F28B00] currentHandler];
          uint64_t v40 = objc_msgSend(NSString, "stringWithUTF8String:", "WebKit::WebExtensionContext::TabSet toImpl(NSSet<id<WKWebExtensionTab>> *__strong, WebKit::WebExtensionContext &)");
          [v42 handleFailureInFunction:v40, @"WKWebExtensionContext.mm", 730, @"Invalid parameter not satisfying: %@", @"[tab conformsToProtocol:@protocol(WKWebExtensionTab)]" file lineNumber description];
        }
        WebKit::WebExtensionContext::getOrCreateTab(a3, v19, (uint64_t)&v44);
        uint64_t v20 = *a1;
        if (*a1
          || (WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::expand(a1, 0), (uint64_t v20 = *a1) != 0))
        {
          int v21 = *(_DWORD *)(v20 - 8);
        }
        else
        {
          int v21 = 0;
        }
        uint64_t v22 = 0;
        uint64_t v23 = v44;
        unint64_t v24 = (~(v44 << 32) + v44) ^ ((unint64_t)(~(v44 << 32) + v44) >> 22);
        unint64_t v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
        unint64_t v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
        unsigned int v27 = (v26 >> 31) ^ v26;
        for (int i = 1; ; ++i)
        {
          unsigned int v29 = v27 & v21;
          uint64_t v30 = (uint64_t *)(v20 + 8 * v29);
          uint64_t v31 = *v30;
          if (*v30 == -1)
          {
            uint64_t v22 = (uint64_t *)(v20 + 8 * v29);
            goto LABEL_28;
          }
          if (!v31) {
            break;
          }
          if (v31 == v44) {
            goto LABEL_42;
          }
LABEL_28:
          unsigned int v27 = i + v29;
        }
        if (v22)
        {
          *uint64_t v22 = 0;
          --*(_DWORD *)(*a1 - 16);
          uint64_t v23 = v44;
          uint64_t v30 = v22;
        }
        uint64_t v44 = 0;
        uint64_t v32 = *v30;
        *uint64_t v30 = v23;
        if (v32) {
          WTF::RefCounted<WebKit::WebExtensionTab>::deref(v32);
        }
        uint64_t v33 = *a1;
        if (*a1) {
          int v34 = *(_DWORD *)(v33 - 12) + 1;
        }
        else {
          int v34 = 1;
        }
        *(_DWORD *)(v33 - 12) = v34;
        uint64_t v35 = *a1;
        if (*a1) {
          int v36 = *(_DWORD *)(v35 - 12);
        }
        else {
          int v36 = 0;
        }
        uint64_t v37 = (*(_DWORD *)(v35 - 16) + v36);
        unint64_t v38 = *(unsigned int *)(v35 - 4);
        if (v38 > 0x400)
        {
          if (v38 <= 2 * v37) {
LABEL_41:
          }
            WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::expand(a1, v30);
        }
        else if (3 * v38 <= 4 * v37)
        {
          goto LABEL_41;
        }
LABEL_42:
        uint64_t v39 = v44;
        uint64_t v44 = 0;
        if (v39) {
          WTF::RefCounted<WebKit::WebExtensionTab>::deref(v39);
        }
        ++v18;
      }
      while (v18 != v16);
      uint64_t v41 = [v15 countByEnumeratingWithState:&v45 objects:v49 count:16];
      uint64_t v16 = v41;
    }
    while (v41);
  }
}

void sub_199484FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  if (*v11) {
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::deallocateTable(*v11, v15);
  }

  _Unwind_Resume(a1);
}

void sub_19948513C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199485304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1994854C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1994855F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1994856B0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = 0;
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

WTF::StringImpl **__Block_byref_object_dispose__16(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl ***)(a1 + 48);
  if (result) {
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  }
  return result;
}

void ___ZL6toImplP12NSDictionaryIP8NSStringP6NSDateE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unsigned int v6 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v31 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v32 = [NSString stringWithUTF8String:"WebKit::WebExtensionContext::PermissionsMap toImpl(NSDictionary<WKWebExtensionPermission,NSDate *> *__strong)_block_invoke"];
    [v31 handleFailureInFunction:v32, @"WKWebExtensionContext.mm", 223, @"Invalid parameter not satisfying: %@", @"[permission isKindOfClass:NSString.class]" file lineNumber description];
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v33 = [MEMORY[0x1E4F28B00] currentHandler];
    int v34 = [NSString stringWithUTF8String:"WebKit::WebExtensionContext::PermissionsMap toImpl(NSDictionary<WKWebExtensionPermission,NSDate *> *__strong)_block_invoke"];
    [v33 handleFailureInFunction:v34, @"WKWebExtensionContext.mm", 224, @"Invalid parameter not satisfying: %@", @"[date isKindOfClass:NSDate.class]" file lineNumber description];
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  MEMORY[0x19972EAD0](&v35, v5);
  double v10 = toImpl(v6);
  uint64_t v13 = *(void *)(v7 + 48);
  double v11 = (uint64_t *)(v7 + 48);
  uint64_t v12 = v13;
  if (v13
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v11, 0), (uint64_t v12 = *v11) != 0))
  {
    int v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    int v14 = 0;
  }
  unsigned int v15 = *((_DWORD *)v35 + 4);
  if (v15 >= 0x100) {
    unsigned int v16 = v15 >> 8;
  }
  else {
    unsigned int v16 = WTF::StringImpl::hashSlowCase(v35);
  }
  uint64_t v17 = 0;
  for (int i = 1; ; ++i)
  {
    uint64_t v19 = v16 & v14;
    uint64_t v20 = (WTF::StringImpl **)(v12 + 16 * v19);
    int v21 = *v20;
    if (*v20 == (WTF::StringImpl *)-1)
    {
      uint64_t v17 = (WTF::StringImpl **)(v12 + 16 * v19);
      goto LABEL_17;
    }
    if (!v21) {
      break;
    }
    if (WTF::equal(v21, v35, v9))
    {
      *(double *)(v12 + 16 * v19 + 8) = v10;
      goto LABEL_34;
    }
LABEL_17:
    unsigned int v16 = i + v19;
  }
  if (v17)
  {
    void *v17 = 0;
    v17[1] = 0;
    --*(_DWORD *)(*v11 - 16);
    uint64_t v20 = v17;
  }
  uint64_t v22 = v35;
  uint64_t v35 = 0;
  uint64_t v23 = *v20;
  *uint64_t v20 = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v8);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  *((double *)v20 + 1) = v10;
  uint64_t v24 = *v11;
  if (*v11) {
    int v25 = *(_DWORD *)(v24 - 12) + 1;
  }
  else {
    int v25 = 1;
  }
  *(_DWORD *)(v24 - 12) = v25;
  uint64_t v26 = *v11;
  if (*v11) {
    int v27 = *(_DWORD *)(v26 - 12);
  }
  else {
    int v27 = 0;
  }
  uint64_t v28 = (*(_DWORD *)(v26 - 16) + v27);
  unint64_t v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28) {
LABEL_33:
    }
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v11, (uint64_t)v20);
  }
  else if (3 * v29 <= 4 * v28)
  {
    goto LABEL_33;
  }
LABEL_34:
  uint64_t v30 = v35;
  uint64_t v35 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v8);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
}

void sub_199485A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__432(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = 0;
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

uint64_t *__Block_byref_object_dispose__433(uint64_t a1, void *a2)
{
  uint64_t result = *(uint64_t **)(a1 + 48);
  if (result) {
    return (uint64_t *)WTF::HashTable<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int>>,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashMap<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>,unsigned int,WTF::DefaultHash<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<API::ContentWorld,WTF::RawPtrTraits<API::ContentWorld>,WTF::DefaultRefDerefTraits<API::ContentWorld>>>>::deallocateTable(result, a2);
  }
  return result;
}

void ___ZL6toImplP12NSDictionaryIP26WKWebExtensionMatchPatternP6NSDateE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v32 = a2;
  id v5 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v28 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v29 = [NSString stringWithUTF8String:"WebKit::WebExtensionContext::PermissionMatchPatternsMap toImpl(NSDictionary<WKWebExtensionMatchPattern *,NSDate *> *__strong)_block_invoke"];
    [v28 handleFailureInFunction:v29, @"WKWebExtensionContext.mm", 237, @"Invalid parameter not satisfying: %@", @"[origin isKindOfClass:WKWebExtensionMatchPattern.class]" file lineNumber description];
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v30 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v31 = [NSString stringWithUTF8String:"WebKit::WebExtensionContext::PermissionMatchPatternsMap toImpl(NSDictionary<WKWebExtensionMatchPattern *,NSDate *> *__strong)_block_invoke"];
    [v30 handleFailureInFunction:v31, @"WKWebExtensionContext.mm", 238, @"Invalid parameter not satisfying: %@", @"[date isKindOfClass:NSDate.class]" file lineNumber description];
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = [v32 _webExtensionMatchPattern];
  CFRetain(*(CFTypeRef *)(v7 + 8));
  double v8 = toImpl(v5);
  uint64_t v11 = *(void *)(v6 + 48);
  double v10 = (uint64_t *)(v6 + 48);
  uint64_t v9 = v11;
  if (v11
    || (WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(v10, 0), (uint64_t v9 = *v10) != 0))
  {
    unsigned int v12 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    unsigned int v12 = 0;
  }
  uint64_t v13 = 0;
  unint64_t v14 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
  unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  int v17 = (v16 >> 31) ^ v16;
  for (int i = 1; ; ++i)
  {
    uint64_t v19 = v17 & v12;
    uint64_t v20 = (uint64_t *)(v9 + 16 * v19);
    uint64_t v21 = *v20;
    if (*v20 == -1)
    {
      uint64_t v13 = (uint64_t *)(v9 + 16 * v19);
      goto LABEL_14;
    }
    if (!v21) {
      break;
    }
    if (v21 == v7)
    {
      *(double *)(v9 + 16 * v19 + 8) = v8;
      CFRelease(*(CFTypeRef *)(v7 + 8));
      goto LABEL_27;
    }
LABEL_14:
    int v17 = i + v19;
  }
  if (v13)
  {
    uint64_t *v13 = 0;
    v13[1] = 0;
    --*(_DWORD *)(*v10 - 16);
    uint64_t *v13 = v7;
  }
  else
  {
    *uint64_t v20 = v7;
    uint64_t v13 = (uint64_t *)(v9 + 16 * v19);
  }
  *((double *)v13 + 1) = v8;
  uint64_t v22 = *v10;
  if (*v10) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v24 = *v10;
  if (*v10) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26) {
LABEL_26:
    }
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime>>,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashMap<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::WallTime,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(v10, v13);
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_26;
  }
LABEL_27:
}

void sub_199485D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(NSError *)>,void,NSError * {__strong}>::~CallableWrapper(uint64_t a1)
{
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(NSError *)>,void,NSError * {__strong}>::~CallableWrapper(id *a1)
{
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtrArc<void ()(NSError *)>,void,NSError * {__strong}>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void sub_199485FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    CFRelease(*(CFTypeRef *)(a10 + 8));
  }

  _Unwind_Resume(a1);
}

void sub_199486038(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_199486120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19948620C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199486320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199486460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  _Unwind_Resume(a1);
}

void sub_199486644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  if (a10) {
    WTF::HashTable<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebPageProxy const,WTF::RawPtrTraits<WebKit::WebPageProxy const>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy const>>>>::deallocateTable(a10, v12);
  }
  _Unwind_Resume(a1);
}

void sub_199486798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199486998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199486C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199486EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199487054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1994871A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1994872FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1994874C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_199487628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_199487780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_199487958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_199487B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_199487C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

void sub_199487D90(_Unwind_Exception *a1)
{
  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_199487E88(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_199487FE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19948808C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_199488234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1994885E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13)
{
  _Unwind_Resume(a1);
}

void sub_199488728(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_1994887E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1994888D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199488A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_199488B04(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_199488CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<WKWebExtensionDataRecord>(void *a1)
{
  id v1 = a1;
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_199488D58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_199488E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void WTF::makeVector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  id v26 = v3;
  unint64_t v4 = [v3 count];
  int v5 = v4;
  if (v4)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      return;
    }
    uint64_t v6 = WTF::fastMalloc((WTF *)(8 * v4));
    *(_DWORD *)(a2 + 8) = v5;
    *(void *)a2 = v6;
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v7 = v26;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (!v8) {
    goto LABEL_21;
  }
  uint64_t v9 = *(void *)v30;
  do
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      if (*(void *)v30 != v9) {
        objc_enumerationMutation(v7);
      }
      id v11 = *(id *)(*((void *)&v29 + 1) + 8 * i);
      objc_opt_class();
      unsigned int v12 = WTF::dynamic_objc_cast<WKWebExtensionDataRecord>(v11);
      uint64_t v13 = v12;
      if (v12)
      {
        uint64_t v14 = [v12 _webExtensionDataRecord];
        CFRetain(*(CFTypeRef *)(v14 + 8));
        uint64_t v27 = v14;
        unsigned __int8 v28 = 1;
      }
      else
      {
        LOBYTE(v27) = 0;
        unsigned __int8 v28 = 0;
      }

      if (v28)
      {
        uint64_t v15 = *(unsigned int *)(a2 + 12);
        if (v15 == *(_DWORD *)(a2 + 8))
        {
          unint64_t v16 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v15 + 1, (unint64_t)&v27);
          uint64_t v17 = *(unsigned int *)(a2 + 12);
          uint64_t v18 = *(WTF **)a2;
          uint64_t v19 = *v16;
          uint64_t *v16 = 0;
          *((void *)v18 + v17) = v19;
          LODWORD(v18) = v28;
          *(_DWORD *)(a2 + 12) = v17 + 1;
          if (!v18) {
            goto LABEL_19;
          }
        }
        else
        {
          uint64_t v20 = *(WTF **)a2;
          uint64_t v21 = v27;
          uint64_t v27 = 0;
          *((void *)v20 + v15) = v21;
          *(_DWORD *)(a2 + 12) = v15 + 1;
        }
        uint64_t v22 = v27;
        uint64_t v27 = 0;
        if (v22) {
          CFRelease(*(CFTypeRef *)(v22 + 8));
        }
      }
LABEL_19:
    }
    uint64_t v8 = [v7 countByEnumeratingWithState:&v29 objects:v33 count:16];
  }
  while (v8);
LABEL_21:

  uint64_t v24 = *(unsigned int *)(a2 + 12);
  if (*(_DWORD *)(a2 + 8) > v24)
  {
    int v25 = *(WTF **)a2;
    if (v24)
    {
      *(_DWORD *)(a2 + 8) = v24;
      *(void *)a2 = WTF::fastRealloc(v25, (void *)(8 * v24));
    }
    else if (v25)
    {
      *(void *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      WTF::fastFree(v25, v23);
    }
  }
}

void sub_1994890F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WebKit::WebPageProxy>,WTF::DefaultRefDerefTraits<WebKit::WebPageProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, v13);
  _Unwind_Resume(a1);
}

id WebKit::toAPI(uint64_t a1)
{
  WTF::createNSArray<WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (id *)&cf);
  id v1 = WTF::RetainPtr<NSSet>::get((id *)&cf);
  CFTypeRef v2 = cf;
  CFTypeRef cf = 0;
  if (v2) {
    CFRelease(v2);
  }

  return v1;
}

void sub_1994891C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WTF::createNSArray<WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t a1@<X0>, id *a2@<X8>)
{
  id v4 = (id)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(unsigned int *)(a1 + 12)];
  int v5 = v4;
  *a2 = v4;
  if (v4) {
    CFRetain(v4);
  }

  uint64_t v6 = *(unsigned int *)(a1 + 12);
  if (v6)
  {
    id v7 = *(id ***)a1;
    uint64_t v8 = 8 * v6;
    do
    {
      WTF::RetainPtr<NSSet>::get(a2);
      uint64_t v9 = (WTF *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionAction::wrapper(*v7);
      id v10 = (id)objc_claimAutoreleasedReturnValue();
      id v11 = v10;
      CFTypeRef cf = v10;
      if (v10) {
        CFRetain(v10);
      }

      WTF::RetainPtr<NSSet>::get((id *)&cf);
      unsigned int v12 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
      WTF::addUnlessNil(v9, v12, v13);

      CFTypeRef v14 = cf;
      CFTypeRef cf = 0;
      if (v14) {
        CFRelease(v14);
      }

      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
}

void sub_1994892F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  id v11 = v10;

  _Unwind_Resume(a1);
}

id WebKit::createDataRecordError(uint64_t a1, void *a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    uint64_t v8 = *MEMORY[0x1E4F28228];
    v9[0] = v3;
    int v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:&v8 count:1];
  }
  else
  {
    int v5 = (void *)MEMORY[0x1E4F1CC08];
  }
  uint64_t v6 = [MEMORY[0x1E4F28C58] errorWithDomain:@"WKWebExtensionDataRecordErrorDomain" code:a1 userInfo:v5];

  return v6;
}

void sub_199489454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebKit::toWebExtensionDataTypes(WebKit *this, NSSet *a2)
{
  CFTypeRef v2 = this;
  unsigned int v3 = [(WebKit *)v2 containsObject:@"local"];
  int v4 = [(WebKit *)v2 containsObject:@"session"];
  int v5 = [(WebKit *)v2 containsObject:@"synchronized"];
  unsigned int v6 = v3 | 2;
  if (!v4) {
    unsigned int v6 = v3;
  }
  if (v5) {
    uint64_t v7 = v6 | 4;
  }
  else {
    uint64_t v7 = v6;
  }

  return v7;
}

void sub_1994894F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id WebKit::toAPI(char a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  unsigned int v3 = v2;
  if (a1) {
    [v2 addObject:@"local"];
  }
  if ((a1 & 2) != 0) {
    [v3 addObject:@"session"];
  }
  if ((a1 & 4) != 0) {
    [v3 addObject:@"synchronized"];
  }
  int v4 = (void *)[v3 copy];

  return v4;
}

void sub_19948959C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1994896F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void WebKit::wrapper<WebKit::WebExtensionMatchPattern>(void *a1, id *this)
{
  id v3 = WebKit::WebExtensionAction::wrapper(this);
  *a1 = v3;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
}

void sub_199489780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_199489804(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_199489950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_199489C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13)
{
  _Unwind_Resume(a1);
}

void sub_199489ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, WTF::StringImpl *a12)
{
  _Unwind_Resume(a1);
}

void API::Object::constructInWrapper<WebKit::WebExtensionMatchPattern>(void *a1)
{
  id v2 = a1;
  uint64_t v1 = [v2 _apiObject];
  *(void *)uint64_t v1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v1);
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0;
  *(_WORD *)(v1 + 40) = 1;
  *(_WORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  *(void *)uint64_t v1 = &unk_1EEA001E8;
  *(void *)(v1 + 8) = v2;
  *(void *)(v1 + 16) = 0;
}

void sub_19948A020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19948A39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, WTF::StringImpl *a14)
{
  _Unwind_Resume(a1);
}

void sub_19948A5F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19948A6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19948A764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19948A7FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19948A914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19948AA48(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19948AB3C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19948AC68(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19948AD34(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19948AEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  _Unwind_Resume(a1);
}

void sub_19948B02C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19948B228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19948B378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }

  _Unwind_Resume(a1);
}

void sub_19948B460(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13) {
    BOOL v16 = a11 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19948B6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, v19);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (v17 && v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v19);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c62_ZTSN3WTF11OSObjectPtrIPU24objcproto13OS_xpc_object8NSObjectEE(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1) {
}
  }

id WebKit::XPCEndpoint::endpoint@<X0>(WebKit::XPCEndpoint *this@<X0>, void *a2@<X8>)
{
  id result = (id)*((void *)this + 2);
  *a2 = result;
  if (result) {
    return result;
  }
  return result;
}

void sub_19948BB5C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_19948BCD4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  if ((WTF *)(v10 + 16) != a9 && a9 != 0) {
    WTF::fastFree(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_19948BFDC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::typeFromObject(IPC *this, objc_object *a2)
{
  if (objc_opt_isKindOfClass()) {
    return 0;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 2;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 3;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 4;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 5;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 6;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 7;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 8;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 9;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 13;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 11;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 12;
  }
  NSClassFromString(&cfstr_Nscftype.isa);
  if (objc_opt_isKindOfClass()) {
    return 14;
  }
  if ([(IPC *)this conformsToProtocol:&unk_1EEA79688]) {
    return 10;
  }
  return 15;
}

uint64_t IPC::isSerializableValue(IPC *this, objc_object *a2)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return IPC::typeFromObject(this, v3) != 15;
  }
  uint64_t result = (uint64_t)CTFontCopyAttribute(this, (CFStringRef)*MEMORY[0x1E4F24668]);
  if (result)
  {
    CFRelease((CFTypeRef)result);
    return 1;
  }
  return result;
}

void IPC::encodeObjectDirectly<NSObject  {objcproto14NSSecureCoding}>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = (void *)[objc_alloc(MEMORY[0x1E4F28DB0]) initRequiringSecureCoding:1];
  int v5 = objc_alloc_init(WKSecureCodingArchivingDelegate);
  uint64_t v6 = PAL::DataDetectorsCoreLibrary((PAL *)1);
  uint64_t v7 = (void (**)(void))MEMORY[0x1E4FB62E8];
  if (v6)
  {
    ((void (*)(void))*MEMORY[0x1E4FB62E8])();
    if (objc_opt_isKindOfClass()) {
      [(WKSecureCodingArchivingDelegate *)v5 setRewriteMutableString:1];
    }
  }
  uint64_t v8 = PAL::RevealCoreLibrary((PAL *)1);
  uint64_t v9 = (void (**)(void))MEMORY[0x1E4FB6258];
  if (v8)
  {
    ((void (*)(void))*MEMORY[0x1E4FB6258])();
    if (objc_opt_isKindOfClass()) {
      [(WKSecureCodingArchivingDelegate *)v5 setRewriteMutableString:1];
    }
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [(WKSecureCodingArchivingDelegate *)v5 setRewriteMutableData:1];
    [(WKSecureCodingArchivingDelegate *)v5 setRewriteMutableArray:1];
  }
  if (PAL::RevealCoreLibrary((PAL *)1))
  {
    (*v9)();
    if (objc_opt_isKindOfClass()) {
      [(WKSecureCodingArchivingDelegate *)v5 setTransformURLs:0];
    }
  }
  if (PAL::DataDetectorsCoreLibrary((PAL *)1))
  {
    (*v7)();
    if (objc_opt_isKindOfClass()) {
      [(WKSecureCodingArchivingDelegate *)v5 setTransformURLs:0];
    }
  }
  if (PAL::PassKitCoreLibrary((PAL *)1))
  {
    ((void (*)(void))*MEMORY[0x1E4FB6350])();
    if (objc_opt_isKindOfClass())
    {
      [(WKSecureCodingArchivingDelegate *)v5 setTransformURLs:0];
      [(WKSecureCodingArchivingDelegate *)v5 setRewriteMutableArray:1];
    }
  }
  [v4 setDelegate:v5];
  [v4 encodeObject:a2 forKey:*MEMORY[0x1E4F284E8]];
  [v4 finishEncoding];
  [v4 setDelegate:0];
  IPC::ArgumentCoder<__CFData const*,void>::encode(a1, (CFTypeRef)[v4 encodedData]);
  if (v5) {
    CFRelease(v5);
  }
  if (v4)
  {
    CFRelease(v4);
  }
}

void sub_19948C52C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSObject  {objcproto14NSSecureCoding}>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  v32[3] = *MEMORY[0x1E4F143B8];
  int v4 = a1 + 7;
  uint64_t v3 = a1[7];
  if (!v3 || !*(_DWORD *)(v3 - 12))
  {
    __break(0xC471u);
    goto LABEL_78;
  }
  IPC::Decoder::decode<WTF::RetainPtr<__CFData const*>>((IPC::Decoder *)a1, (uint64_t)&cf);
  if (!v31)
  {
    *a2 = 0;
    a2[8] = 0;
    goto LABEL_73;
  }
  id v5 = objc_alloc(MEMORY[0x1E4F28DC0]);
  if (!v31)
  {
    __break(1u);
LABEL_78:
    JUMPOUT(0x19948C92CLL);
  }
  uint64_t v6 = (void *)[v5 initForReadingFromData:cf error:0];
  [v6 setDecodingFailurePolicy:0];
  uint64_t v7 = objc_alloc_init(WKSecureCodingArchivingDelegate);
  [v6 setDelegate:v7];
  v32[0] = objc_opt_class();
  if (WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>>,objc_class const*>(v4, v32)|| (v32[0] = objc_opt_class(), WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>>,objc_class const*>(v4, v32)))
  {
    uint64_t v8 = (const void *)objc_opt_class();
    CFTypeRef v29 = v8;
    if (v8) {
      CFRetain(v8);
    }
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::add((uint64_t)v32, v4, &v29);
    if (v29) {
      CFRelease(v29);
    }
    uint64_t v9 = (const void *)objc_opt_class();
    CFTypeRef v29 = v9;
    if (v9) {
      CFRetain(v9);
    }
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::add((uint64_t)v32, v4, &v29);
    if (v29) {
      CFRelease(v29);
    }
    uint64_t v10 = (const void *)objc_opt_class();
    CFTypeRef v29 = v10;
    if (v10) {
      CFRetain(v10);
    }
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::add((uint64_t)v32, v4, &v29);
    if (v29) {
      CFRelease(v29);
    }
    id v11 = (const void *)objc_opt_class();
    CFTypeRef v29 = v11;
    if (v11) {
      CFRetain(v11);
    }
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::add((uint64_t)v32, v4, &v29);
    if (v29) {
      CFRelease(v29);
    }
    unsigned int v12 = (const void *)objc_opt_class();
    CFTypeRef v29 = v12;
    if (v12) {
      CFRetain(v12);
    }
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::add((uint64_t)v32, v4, &v29);
    if (v29) {
      CFRelease(v29);
    }
    uint64_t v13 = (const void *)objc_opt_class();
    CFTypeRef v29 = v13;
    if (v13) {
      CFRetain(v13);
    }
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::add((uint64_t)v32, v4, &v29);
    if (v29) {
      CFRelease(v29);
    }
  }
  v32[0] = objc_opt_class();
  if (WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>>,objc_class const*>(v4, v32))
  {
    CFTypeRef v14 = (const void *)objc_opt_class();
    CFTypeRef v29 = v14;
    if (v14) {
      CFRetain(v14);
    }
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::add((uint64_t)v32, v4, &v29);
    if (v29) {
      CFRelease(v29);
    }
  }
  uint64_t v15 = PAL::ContactsLibrary((PAL *)1);
  BOOL v16 = (uint64_t (**)(void))MEMORY[0x1E4FB6350];
  if (v15)
  {
    v32[0] = ((uint64_t (*)(void))*MEMORY[0x1E4FB6288])();
    if (WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>>,objc_class const*>(v4, v32)|| (v32[0] = ((uint64_t (*)(void))*MEMORY[0x1E4FB62F0])(), WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>>,objc_class const*>(v4, v32))|| (v32[0] = ((uint64_t (*)(void))*MEMORY[0x1E4FB62D0])(), WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>>,objc_class const*>(v4, v32)))
    {
      int v17 = (const void *)(*v16)();
      CFTypeRef v29 = v17;
      if (v17) {
        CFRetain(v17);
      }
      WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::add((uint64_t)v32, v4, &v29);
      if (v29) {
        CFRelease(v29);
      }
    }
  }
  if (PAL::PassKitCoreLibrary((PAL *)1))
  {
    if ((*v16)())
    {
      v32[0] = (*v16)();
      if (WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>>,objc_class const*>(v4, v32))
      {
        uint64_t v18 = (const void *)((uint64_t (*)(void))*MEMORY[0x1E4FB62B8])();
        CFTypeRef v29 = v18;
        if (v18) {
          CFRetain(v18);
        }
        WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::add((uint64_t)v32, v4, &v29);
        if (v29) {
          CFRelease(v29);
        }
      }
    }
  }
  id v19 = objc_alloc(MEMORY[0x1E4F1CA80]);
  uint64_t v20 = *v4;
  if (*v4) {
    LODWORD(v20) = *(_DWORD *)(v20 - 12);
  }
  uint64_t v21 = (void *)[v19 initWithCapacity:v20];
  uint64_t v22 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)v4);
  int v23 = v22;
  int v25 = v24;
  if (*v4) {
    uint64_t v26 = *v4 + 8 * *(unsigned int *)(*v4 - 4);
  }
  else {
    uint64_t v26 = 0;
  }
  if ((void *)v26 != v22)
  {
    do
    {
      [v21 addObject:*v23];
      while (++v23 != v25)
      {
        if ((unint64_t)(*v23 + 1) > 1) {
          goto LABEL_64;
        }
      }
      int v23 = v25;
LABEL_64:
      ;
    }
    while (v23 != (void *)v26);
  }
  [v6 _enableStrictSecureDecodingMode];
  uint64_t v27 = (const void *)[v6 decodeObjectOfClasses:v21 forKey:*MEMORY[0x1E4F284E8]];
  *(void *)a2 = v27;
  if (v27) {
    CFRetain(v27);
  }
  a2[8] = 1;
  [v6 finishDecoding];
  [v6 setDelegate:0];
  if (v21) {
    CFRelease(v21);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v6) {
    CFRelease(v6);
  }
LABEL_73:
  if (v31)
  {
    CFTypeRef v28 = cf;
    CFTypeRef cf = 0;
    if (v28) {
      CFRelease(v28);
    }
  }
}

void sub_19948CA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, CFTypeRef cf, CFTypeRef a11, char a12)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (a12)
  {
    if (a11) {
      CFRelease(a11);
    }
  }
  _Unwind_Resume(a1);
}

void IPC::encodeObjectDirectly<NSParagraphStyle>(IPC::Encoder *a1, void *cf)
{
  if (cf)
  {
    WebKit::CoreIPCSecureCoding::CoreIPCSecureCoding((WebKit::CoreIPCSecureCoding *)&v8, cf);
    CFTypeRef v4 = v8;
    CFTypeRef v8 = 0;
    CFTypeRef cfa = v4;
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    LOBYTE(cfa) = 0;
  }
  char v10 = v5;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCSecureCoding>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCSecureCoding>>(a1, (uint64_t)&cfa);
  if (v10)
  {
    CFTypeRef v6 = cfa;
    CFTypeRef cfa = 0;
    if (v6) {
      CFRelease(v6);
    }
  }
  if (cf)
  {
    CFTypeRef v7 = v8;
    CFTypeRef v8 = 0;
    if (v7) {
      CFRelease(v7);
    }
  }
}

void sub_19948CCAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef cf, char a12)
{
  if (a12 && cf) {
    CFRelease(cf);
  }
  if (v12)
  {
    if (a10) {
      CFRelease(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSParagraphStyle>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCSecureCoding>>(a1, (uint64_t)&cf);
  if (!v9)
  {
    *a2 = 0;
    a2[8] = 0;
    return;
  }
  if (!v8)
  {
    *(void *)a2 = 0;
    a2[8] = 1;
    return;
  }
  CFTypeRef v3 = cf;
  if (!cf)
  {
    *(void *)a2 = 0;
    a2[8] = 1;
LABEL_6:
    CFTypeRef v6 = cf;
    CFTypeRef cf = 0;
    if (v6) {
      CFRelease(v6);
    }
    return;
  }
  CFRetain(cf);
  int v4 = v9;
  int v5 = v8;
  *(void *)a2 = v3;
  a2[8] = 1;
  if (v4 && v5) {
    goto LABEL_6;
  }
}

void sub_19948CD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebKit::CoreIPCSecureCoding>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCSecureCoding>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_19948CE28(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<std::optional<WebKit::CoreIPCSecureCoding>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

void IPC::encodeObjectDirectly<PKSecureElementPass>(IPC::Encoder *a1, void *cf)
{
  if (cf)
  {
    WebKit::CoreIPCSecureCoding::CoreIPCSecureCoding((WebKit::CoreIPCSecureCoding *)&v8, cf);
    CFTypeRef v4 = v8;
    CFTypeRef v8 = 0;
    CFTypeRef cfa = v4;
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    LOBYTE(cfa) = 0;
  }
  char v10 = v5;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCSecureCoding>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCSecureCoding>>(a1, (uint64_t)&cfa);
  if (v10)
  {
    CFTypeRef v6 = cfa;
    CFTypeRef cfa = 0;
    if (v6) {
      CFRelease(v6);
    }
  }
  if (cf)
  {
    CFTypeRef v7 = v8;
    CFTypeRef v8 = 0;
    if (v7) {
      CFRelease(v7);
    }
  }
}

void sub_19948CECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef cf, char a12)
{
  if (a12 && cf) {
    CFRelease(cf);
  }
  if (v12)
  {
    if (a10) {
      CFRelease(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<PKSecureElementPass>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCSecureCoding>>(a1, (uint64_t)&cf);
  if (!v9)
  {
    *a2 = 0;
    a2[8] = 0;
    return;
  }
  if (!v8)
  {
    *(void *)a2 = 0;
    a2[8] = 1;
    return;
  }
  CFTypeRef v3 = cf;
  if (!cf)
  {
    *(void *)a2 = 0;
    a2[8] = 1;
LABEL_6:
    CFTypeRef v6 = cf;
    CFTypeRef cf = 0;
    if (v6) {
      CFRelease(v6);
    }
    return;
  }
  CFRetain(cf);
  int v4 = v9;
  int v5 = v8;
  *(void *)a2 = v3;
  a2[8] = 1;
  if (v4 && v5) {
    goto LABEL_6;
  }
}

void sub_19948CFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<std::optional<WebKit::CoreIPCSecureCoding>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 8))
    {
      id v2 = *(const void **)a1;
      *(void *)a1 = 0;
      if (v2) {
        CFRelease(v2);
      }
    }
  }
  return a1;
}

BOOL WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::contains<WTF::HashSetTranslator<WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>>,objc_class const*>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = ~(*a2 << 32) + *a2;
  unint64_t v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  uint64_t v8 = *(void *)(v2 + 8 * v7);
  if (v8 == *a2) {
    return 1;
  }
  int v9 = 1;
  do
  {
    BOOL result = v8 != 0;
    if (!v8) {
      break;
    }
    unsigned int v7 = (v7 + v9) & v3;
    uint64_t v8 = *(void *)(v2 + 8 * v7);
    ++v9;
  }
  while (v8 != *a2);
  return result;
}

void WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::add(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::expand(a2, 0), (uint64_t v6 = *a2) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  int v9 = (const void *)*a3;
  unint64_t v10 = ~(*a3 << 32) + *a3;
  unint64_t v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v8 & ((v12 >> 31) ^ v12);
  CFTypeRef v14 = (const void **)(v6 + 8 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    BOOL v16 = 0;
    int v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if (v7) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = *(unsigned int *)(v6 - 4);
        }
        char v27 = 0;
        uint64_t v26 = v6 + 8 * v21;
        goto LABEL_30;
      }
      if (v15 == (const void *)-1) {
        BOOL v16 = v14;
      }
      unsigned int v13 = (v13 + v17) & v8;
      CFTypeRef v14 = (const void **)(v6 + 8 * v13);
      uint64_t v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      void *v16 = 0;
      --*(_DWORD *)(*a2 - 16);
      int v9 = (const void *)*a3;
      CFTypeRef v14 = v16;
    }
  }
  *a3 = 0;
  uint64_t v18 = *v14;
  *CFTypeRef v14 = v9;
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v19 = *a2;
  if (*a2) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v22 = *a2;
  if (*a2) {
    int v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
  unint64_t v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_24:
      CFTypeRef v14 = WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::expand(a2, v14);
      uint64_t v22 = *a2;
      if (*a2) {
        unint64_t v25 = *(unsigned int *)(v22 - 4);
      }
      else {
        unint64_t v25 = 0;
      }
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_24;
  }
  uint64_t v26 = v22 + 8 * v25;
  char v27 = 1;
LABEL_30:
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = v26;
  *(unsigned char *)(a1 + 16) = v27;
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCSecureCoding>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCSecureCoding>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  unint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19948D308);
    }
    unsigned char *v5 = 1;
    if (*(unsigned char *)(a2 + 8))
    {
      uint64_t v7 = *(void *)a2;
      IPC::encodeObjectDirectly<NSObject  {objcproto14NSSecureCoding}>(a1, v7);
    }
    else
    {
      int v8 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::ArgumentCoder<std::optional<WebKit::CoreIPCSecureCoding>,void>::decode<IPC::Decoder>(v8, v9);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x19948D328);
    }
    unsigned char *v5 = 0;
  }
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCSecureCoding>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      uint64_t v15 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        a1 = v15;
        uint64_t v10 = *v15;
        unint64_t v9 = v15[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v9 = v3;
    uint64_t v10 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      CFTypeRef v14 = a1;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        a1 = v14;
        uint64_t v4 = *v14;
        unint64_t v3 = v14[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebKit::CoreIPCSecureCoding>(a1, (uint64_t)&v16);
      char v8 = v17;
      if (v17)
      {
        *(void *)a2 = v16;
        char v8 = 1;
        *(unsigned char *)(a2 + 8) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 16) = v8;
    return;
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v13 = a1[3];
  if (v13 && v3) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
}

void IPC::Decoder::decode<WebKit::CoreIPCSecureCoding>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebKit::CoreIPCSecureCoding,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5 && v4 != 0)
    {
      unsigned int v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

WebKit::CoreIPCArray *WebKit::CoreIPCArray::CoreIPCArray(WebKit::CoreIPCArray *this, NSArray *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v5 = [(NSArray *)a2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(a2);
        }
        char v8 = *(objc_object **)(*((void *)&v15 + 1) + 8 * i);
        if (IPC::isSerializableValue((IPC *)v8, v4))
        {
          WebKit::CoreIPCNSCFObject::CoreIPCNSCFObject((WebKit::CoreIPCNSCFObject *)&v14, v8);
          uint64_t v9 = *((unsigned int *)this + 3);
          if (v9 == *((_DWORD *)this + 2))
          {
            uint64_t v10 = (objc_object **)WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v9 + 1, (unint64_t)&v14);
            uint64_t v9 = *((unsigned int *)this + 3);
            uint64_t v11 = *(void *)this;
            uint64_t v12 = *v10;
            *uint64_t v10 = 0;
          }
          else
          {
            uint64_t v11 = *(void *)this;
            uint64_t v12 = v14;
            CFTypeRef v14 = 0;
          }
          *(void *)(v11 + 8 * v9) = v12;
          *((_DWORD *)this + 3) = v9 + 1;
          uint64_t v4 = v14;
          CFTypeRef v14 = 0;
          if (v4) {
            std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&v14, (uint64_t)v4);
          }
        }
      }
      uint64_t v5 = [(NSArray *)a2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v5);
  }
  return this;
}

void sub_19948D6D0(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCArray::toID(WebKit::CoreIPCNSCFObject **this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)this + 3)];
  uint64_t v5 = *((unsigned int *)this + 3);
  if (v5)
  {
    uint64_t v6 = *this;
    uint64_t v7 = 8 * v5;
    do
    {
      WebKit::CoreIPCNSCFObject::toID((uint64_t *)&cf, v6);
      [v4 addObject:cf];
      CFTypeRef v8 = cf;
      CFTypeRef cf = 0;
      if (v8) {
        CFRelease(v8);
      }
      uint64_t v6 = (WebKit::CoreIPCNSCFObject *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  *a2 = v4;
}

void sub_19948D7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 40);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS6_13CoreIPCCFTypeENS6_12CoreIPCColorENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_17CoreIPCDictionaryENS6_12CoreIPCErrorENS6_11CoreIPCFontENS6_13CoreIPCLocaleENS6_15CoreIPCNSShadowENS6_14CoreIPCNSValueENS6_13CoreIPCNumberENS6_11CoreIPCNullENS6_19CoreIPCSecureCodingENS6_13CoreIPCStringENS6_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v3])(&v5, a2);
    }
    *(_DWORD *)(a2 + 40) = -1;
    return MEMORY[0x199740C10](a2, 0x10E2C408981D52ALL);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = a2;
  uint64_t v3 = *a2;
  uint64_t *result = 0;
  if (v3) {
    return (uint64_t *)std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)result, v3);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if ((*a2 & 0x8000000000000) != 0)
  {
    uint64_t v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, const void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100]((WTF::StringImpl ***)(a2 + 24), 0);
  uint64_t v4 = *(const void **)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const void **)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 32);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EEA0F968[v3])(&v5, a2 + 8);
  }
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, const void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl ***std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100](WTF::StringImpl ***result, WTF::StringImpl **a2)
{
  uint64_t v2 = *result;
  WTF::StringImpl *result = a2;
  if (v2)
  {
    std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100](v2 + 3, 0);
    uint64_t v4 = v2[2];
    v2[2] = 0;
    if (v4) {
      CFRelease(v4);
    }
    char v5 = *v2;
    const void *v2 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    return (WTF::StringImpl ***)WTF::fastFree((WTF *)v2, v3);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, const void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      a2 = *(void **)v4;
      *(void *)uint64_t v4 = 0;
      if (a2) {
        std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)v4, (uint64_t)a2);
      }
      uint64_t v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

unint64_t WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19948DC5CLL);
    }
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = (uint64_t *)(*(void *)a1 + 8 * *(unsigned int *)(a1 + 12));
    uint64_t v6 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::CoreIPCNSCFObject>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebKit::CoreIPCNSCFObject>::move(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v5 = (uint64_t *)result;
    do
    {
      uint64_t v6 = *v5;
      uint64_t *v5 = 0;
      *a3 = v6;
      uint64_t v7 = *v5;
      uint64_t *v5 = 0;
      if (v7) {
        uint64_t result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)v5, v7);
      }
      ++a3;
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

WebKit::CoreIPCCFArray *WebKit::CoreIPCCFArray::CoreIPCCFArray(WebKit::CoreIPCCFArray *this, CFArrayRef theArray)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v6 = 0;
      do
      {
        ValueAtIndex = (IPC *)CFArrayGetValueAtIndex(theArray, v6);
        if (IPC::typeFromCFTypeRef(ValueAtIndex, v8) != 16)
        {
          WebKit::CoreIPCCFType::CoreIPCCFType((WebKit::CoreIPCCFType *)&v14, ValueAtIndex);
          uint64_t v9 = *((unsigned int *)this + 3);
          if (v9 == *((_DWORD *)this + 2))
          {
            unint64_t v10 = (uint64_t *)WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v9 + 1, (unint64_t)&v14);
            uint64_t v9 = *((unsigned int *)this + 3);
            uint64_t v11 = *(void *)this;
            uint64_t v12 = *v10;
            *unint64_t v10 = 0;
          }
          else
          {
            uint64_t v11 = *(void *)this;
            uint64_t v12 = v14;
            uint64_t v14 = 0;
          }
          *(void *)(v11 + 8 * v9) = v12;
          *((_DWORD *)this + 3) = v9 + 1;
          uint64_t v13 = v14;
          uint64_t v14 = 0;
          if (v13) {
            std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v14, v13);
          }
        }
        ++v6;
      }
      while (Count != v6);
    }
  }
  return this;
}

void sub_19948DDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v12 = a10;
  a10 = 0;
  if (v12) {
    std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&a10, (uint64_t)v12);
  }
  WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10, v12);
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCCFArray::createCFArray(WebKit::CoreIPCCFType **this@<X0>, __CFArray **a2@<X8>)
{
  Mutable = CFArrayCreateMutable(0, *((unsigned int *)this + 3), MEMORY[0x1E4F1D510]);
  uint64_t v5 = *((unsigned int *)this + 3);
  if (v5)
  {
    CFIndex v6 = *this;
    uint64_t v7 = 8 * v5;
    do
    {
      WebKit::CoreIPCCFType::toID(v6, (CFTypeRef *)&value);
      unint64_t v8 = value;
      if (value)
      {
        CFArrayAppendValue(Mutable, value);
        CFRelease(v8);
      }
      CFIndex v6 = (WebKit::CoreIPCCFType *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  *a2 = Mutable;
}

void sub_19948DEA0(_Unwind_Exception *a1)
{
  CFRelease(v2);
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    CFIndex v6 = *(WTF **)a1;
    uint64_t v7 = 8 * v3;
    do
    {
      a2 = *(void **)v6;
      *(void *)CFIndex v6 = 0;
      if (a2) {
        std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)v6, (uint64_t)a2);
      }
      CFIndex v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCCFType>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (uint64_t *)WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *v3;
  uint64_t *v3 = 0;
  *(void *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    uint64_t v9 = a3 - v5;
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v9;
  }
  else
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10) {
      unint64_t v7 = v6 + 1;
    }
    else {
      unint64_t v7 = 16;
    }
    if (v7 > a2) {
      a2 = v7;
    }
    WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19948E0CCLL);
    }
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = (uint64_t *)(*(void *)a1 + 8 * *(unsigned int *)(a1 + 12));
    unint64_t v6 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::CoreIPCCFType>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebKit::CoreIPCCFType>::move(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v5 = (uint64_t *)result;
    do
    {
      uint64_t v6 = *v5;
      uint64_t *v5 = 0;
      *a3 = v6;
      uint64_t v7 = *v5;
      uint64_t *v5 = 0;
      if (v7) {
        uint64_t result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)v5, v7);
      }
      ++a3;
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t ___ZN6WebKit19CoreIPCCFDictionaryC2EPK14__CFDictionary_block_invoke(uint64_t a1, IPC *this, IPC *a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 32);
  uint64_t result = IPC::typeFromCFTypeRef(this, this);
  if (result != 16)
  {
    uint64_t result = IPC::typeFromCFTypeRef(a3, v7);
    if (result != 16)
    {
      uint64_t v8 = *v5;
      WebKit::CoreIPCCFType::CoreIPCCFType((WebKit::CoreIPCCFType *)&v19, this);
      uint64_t result = WebKit::CoreIPCCFType::CoreIPCCFType((WebKit::CoreIPCCFType *)&v18, a3);
      uint64_t v10 = v18;
      uint64_t v9 = v19;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = v9;
      uint64_t v21 = v10;
      uint64_t v11 = *(unsigned int *)(v8 + 12);
      if (v11 == *(_DWORD *)(v8 + 8))
      {
        uint64_t result = WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>(v8, (unint64_t)&v20);
      }
      else
      {
        uint64_t v12 = (uint64_t *)(*(void *)v8 + 16 * v11);
        uint64_t v20 = 0;
        *uint64_t v12 = v9;
        uint64_t v13 = v21;
        uint64_t v21 = 0;
        v12[1] = v13;
        *(_DWORD *)(v8 + 12) = v11 + 1;
      }
      uint64_t v14 = v21;
      uint64_t v21 = 0;
      if (v14) {
        uint64_t result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v21, v14);
      }
      uint64_t v15 = v20;
      uint64_t v20 = 0;
      if (v15) {
        uint64_t result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v20, v15);
      }
      uint64_t v16 = v18;
      uint64_t v18 = 0;
      if (v16) {
        uint64_t result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v18, v16);
      }
      uint64_t v17 = v19;
      uint64_t v19 = 0;
      if (v17) {
        return std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v19, v17);
      }
    }
  }
  return result;
}

void sub_19948E270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = a12;
  a12 = 0;
  if (v14) {
    std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100](v12, v14);
  }
  uint64_t v15 = a11;
  a11 = 0;
  if (v15) {
    std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&a11, v15);
  }
  uint64_t v16 = a9;
  a9 = 0;
  if (v16) {
    std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&a9, v16);
  }
  uint64_t v17 = a10;
  a10 = 0;
  if (v17) {
    std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&a10, v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](uint64_t *a1, void *a2)
{
  uint64_t result = *a1;
  *a1 = (uint64_t)a2;
  if (result)
  {
    uint64_t v4 = (WTF *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2);
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>::destruct(*(void *)a1, (uint64_t *)(*(void *)a1 + 16 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>::destruct(uint64_t result, uint64_t *a2)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v3 = (uint64_t *)(result + 8);
    do
    {
      uint64_t v4 = *v3;
      uint64_t *v3 = 0;
      uint64_t v5 = v3 - 1;
      if (v4) {
        uint64_t result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)v3, v4);
      }
      uint64_t v6 = *v5;
      uint64_t *v5 = 0;
      if (v6) {
        uint64_t result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)(v3 - 1), v6);
      }
      uint64_t v7 = v3 + 1;
      v3 += 2;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  uint64_t v5 = (void *)(*(void *)a1 + 16 * v4);
  uint64_t v6 = *v3;
  uint64_t *v3 = 0;
  void *v5 = v6;
  uint64_t v7 = v3[1];
  v3[1] = 0;
  v5[1] = v7;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x19948E57CLL);
    }
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = (void *)(*(void *)a1 + 16 * *(unsigned int *)(a1 + 12));
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>::move(uint64_t result, void *a2, void *a3)
{
  if ((void *)result != a2)
  {
    uint64_t v5 = (uint64_t *)(result + 8);
    do
    {
      unint64_t v7 = v5 - 1;
      uint64_t v6 = *(v5 - 1);
      *(v5 - 1) = 0;
      *a3 = v6;
      uint64_t v8 = *v5;
      uint64_t *v5 = 0;
      a3[1] = v8;
      uint64_t v9 = *v5;
      uint64_t *v5 = 0;
      if (v9) {
        uint64_t result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)v5, v9);
      }
      uint64_t v10 = *v7;
      *unint64_t v7 = 0;
      if (v10) {
        uint64_t result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)(v5 - 1), v10);
      }
      uint64_t v11 = v5 + 1;
      v5 += 2;
      a3 += 2;
    }
    while (v11 != a2);
  }
  return result;
}

uint64_t WebKit::CoreIPCCFType::CoreIPCCFType(WebKit::CoreIPCCFType *this, IPC *a2)
{
  switch(IPC::typeFromCFTypeRef(a2, a2))
  {
    case 1u:
      LOBYTE(BitmapRepresentation) = CFBooleanGetValue(a2) != 0;
      int v5 = 2;
      goto LABEL_3;
    case 2u:
      unint64_t BitmapRepresentation = (unint64_t)CFCharacterSetCreateBitmapRepresentation(0, a2);
      int v5 = 3;
      goto LABEL_3;
    case 3u:
      if (a2) {
        CFRetain(a2);
      }
      unint64_t BitmapRepresentation = (unint64_t)a2;
      int v5 = 4;
      goto LABEL_3;
    case 4u:
      unint64_t BitmapRepresentation = MEMORY[0x19972B790](a2);
      int v5 = 5;
      goto LABEL_3;
    case 5u:
      WebKit::CoreIPCCFDictionary::CoreIPCCFDictionary((WebKit::CoreIPCCFDictionary *)&v14, a2);
      unint64_t BitmapRepresentation = v14;
      int v5 = 6;
      goto LABEL_3;
    case 6u:
      WTF::isIntegralOrPointerType((WTF *)&v14);
      int v5 = 7;
      goto LABEL_3;
    case 7u:
      unint64_t BitmapRepresentation = WebKit::CoreIPCNumber::numberHolderForNumber(a2, v3);
      uint64_t v12 = v4;
      int v5 = 8;
      goto LABEL_3;
    case 8u:
      MEMORY[0x19972EAD0](&BitmapRepresentation, a2);
      int v5 = 9;
      goto LABEL_3;
    case 9u:
      if (a2)
      {
        CFRetain(a2);
        unint64_t BitmapRepresentation = (unint64_t)a2;
        int v5 = 10;
LABEL_3:
        int v13 = v5;
LABEL_4:
        WTF::makeUniqueRefWithoutFastMallocCheck<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>();
      }
      uint64_t result = 40;
      __break(0xC471u);
      return result;
    case 0xAu:
      unint64_t BitmapRepresentation = (unint64_t)SecCertificateCopyData(a2);
      int v5 = 11;
      goto LABEL_3;
    case 0xBu:
      unint64_t BitmapRepresentation = SecAccessControlCopyData();
      int v5 = 15;
      goto LABEL_3;
    case 0xCu:
      unint64_t BitmapRepresentation = SecTrustSerialize();
      int v5 = 12;
      goto LABEL_3;
    case 0xDu:
      WebKit::CoreIPCCGColorSpace::CoreIPCCGColorSpace((WebKit::CoreIPCCGColorSpace *)&v14, a2);
      std::__variant_detail::__impl<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>::__impl[abi:sn180100]((uint64_t)&BitmapRepresentation, (uint64_t)&v14);
      int v13 = 13;
      if (v15 != -1) {
        ((void (*)(char *, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v15])(&v16, &v14);
      }
      goto LABEL_4;
    case 0xEu:
      WebCore::Color::createAndPreserveColorSpace();
      WebCore::Color::Color();
      int v13 = 14;
      if ((v14 & 0x8000000000000) != 0)
      {
        uint64_t v9 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, v8);
        }
      }
      goto LABEL_4;
    case 0xFu:
    case 0x10u:
      unint64_t BitmapRepresentation = 0;
      int v13 = 0;
      goto LABEL_4;
    default:
      WebKit::CoreIPCCFArray::CoreIPCCFArray((WebKit::CoreIPCCFArray *)&v14, a2);
      unint64_t BitmapRepresentation = v14;
      uint64_t v6 = v15;
      unint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v12 = v6;
      int v13 = 1;
      WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v7);
      goto LABEL_4;
  }
}

void sub_19948E8A4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, int a13)
{
  if ((a12 & 0x8000000000000) != 0)
  {
    unint64_t v14 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WTF::makeUniqueRefWithoutFastMallocCheck<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>()
{
}

void sub_19948E9C0(_Unwind_Exception *a1)
{
  MEMORY[0x199740C10](v1, 0x10E2C401DBBE44BLL);
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCCFType::toID(WebKit::CoreIPCCFType *this@<X0>, CFTypeRef *a2@<X8>)
{
  WebKit::CoreIPCCFType::toCFType((uint64_t *)&cf, this);
  CFTypeRef v3 = cf;
  *a2 = cf;
  if (v3)
  {
    CFRetain(v3);
    CFRelease(v3);
  }
}

void sub_19948EA4C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCCFType::toCFType(CFTypeRef *__return_ptr a1@<X8>, WebKit::CoreIPCCFType *this@<X0>, const Color *a3@<X1>)
{
  uint64_t v4 = *(void *)this;
  int v5 = *(_DWORD *)(v4 + 16);
  if (v5 == -1) {
    uint64_t v6 = -1;
  }
  else {
    uint64_t v6 = *(unsigned int *)(v4 + 16);
  }
  switch(v6)
  {
    case 1:
      if (v5 != 1) {
        goto LABEL_22;
      }
      WebKit::CoreIPCCFArray::createCFArray((WebKit::CoreIPCCFType **)v4, (__CFArray **)&cf);
      goto LABEL_7;
    case 2:
      if (v5 != 2) {
        goto LABEL_22;
      }
      uint64_t v10 = (WebKit::CoreIPCCFType **)MEMORY[0x1E4F1CFD0];
      if (!*(unsigned char *)v4) {
        uint64_t v10 = (WebKit::CoreIPCCFType **)MEMORY[0x1E4F1CFC8];
      }
      uint64_t v9 = *v10;
      if (!*v10) {
        goto LABEL_16;
      }
      goto LABEL_15;
    case 3:
      if (v5 != 3) {
        goto LABEL_22;
      }
      CFCharacterSetRef v11 = CFCharacterSetCreateWithBitmapRepresentation(0, *(CFDataRef *)v4);
      goto LABEL_45;
    case 4:
      if (v5 == 4) {
        goto LABEL_14;
      }
      goto LABEL_22;
    case 5:
      if (v5 != 5) {
        goto LABEL_22;
      }
      CFCharacterSetRef v11 = CFDateCreate(0, *(CFAbsoluteTime *)v4);
      goto LABEL_45;
    case 6:
      if (v5 != 6) {
        goto LABEL_22;
      }
      WebKit::CoreIPCCFDictionary::createCFDictionary((WebKit::CoreIPCCFType ***)v4, &cf);
      goto LABEL_7;
    case 7:
      if (v5 != 7) {
        goto LABEL_22;
      }
      WebKit::CoreIPCNull::toCFObject(&cf);
      goto LABEL_7;
    case 8:
      if (v5 != 8) {
        goto LABEL_22;
      }
      ((void (*)(CFTypeRef *__return_ptr))WebKit::CoreIPCNumber::createCFNumber)(&cf);
      goto LABEL_7;
    case 9:
      if (v5 != 9) {
        goto LABEL_22;
      }
      WebKit::CoreIPCString::toID((WebKit::CoreIPCString *)v4, (__CFString **)&cf);
      CFTypeRef v7 = cf;
      *a1 = cf;
      if (v7)
      {
        CFRetain(v7);
        CFTypeRef v8 = cf;
        CFTypeRef cf = 0;
        if (v8) {
          CFRelease(v8);
        }
      }
      return;
    case 10:
      if (v5 != 10) {
        goto LABEL_22;
      }
LABEL_14:
      uint64_t v9 = *(WebKit::CoreIPCCFType **)v4;
      if (*(void *)v4) {
LABEL_15:
      }
        CFRetain(v9);
LABEL_16:
      *a1 = v9;
      return;
    case 11:
      if (v5 != 11) {
        goto LABEL_22;
      }
      CFCharacterSetRef v11 = SecCertificateCreateWithData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFDataRef *)v4);
      goto LABEL_45;
    case 12:
      if (v5 != 12) {
        goto LABEL_22;
      }
      CFCharacterSetRef v11 = *(CFCharacterSetRef *)v4;
      if (v11) {
        CFCharacterSetRef v11 = (CFCharacterSetRef)SecTrustDeserialize();
      }
      goto LABEL_45;
    case 13:
      if (v5 != 13) {
        goto LABEL_22;
      }
      WebKit::CoreIPCCGColorSpace::toCF((WebKit::CoreIPCCGColorSpace *)v4, (CGColorSpaceRef *)&cf);
      goto LABEL_7;
    case 14:
      if (v5 != 14) {
        goto LABEL_22;
      }
      WebCore::cachedCGColor((uint64_t *)&cf, (WebCore *)v4, a3);
LABEL_7:
      *a1 = cf;
      break;
    case 15:
      if (v5 != 15) {
        goto LABEL_22;
      }
      CFCharacterSetRef v11 = (CFCharacterSetRef)SecAccessControlCreateFromData();
LABEL_45:
      *a1 = v11;
      break;
    default:
      while (v5)
LABEL_22:
        std::__throw_bad_variant_access[abi:sn180100]();
      *a1 = 0;
      break;
  }
}

void sub_19948EC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WTF::UniqueRef<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>,void>::encode<IPC::Encoder>()
{
}

uint64_t IPC::typeFromCFTypeRef(IPC *this, const void *a2)
{
  if (!this) {
    return 15;
  }
  CFTypeID v2 = CFGetTypeID(this);
  if (v2 == CFArrayGetTypeID()) {
    return 0;
  }
  if (v2 == CFBooleanGetTypeID()) {
    return 1;
  }
  if (v2 == CFCharacterSetGetTypeID()) {
    return 2;
  }
  if (v2 == CFDataGetTypeID()) {
    return 3;
  }
  if (v2 == CFDateGetTypeID()) {
    return 4;
  }
  if (v2 == CFDictionaryGetTypeID()) {
    return 5;
  }
  if (v2 == CFNullGetTypeID()) {
    return 6;
  }
  if (v2 == CFNumberGetTypeID()) {
    return 7;
  }
  if (v2 == CFStringGetTypeID()) {
    return 8;
  }
  if (v2 == CFURLGetTypeID()) {
    return 9;
  }
  if (v2 == CGColorSpaceGetTypeID()) {
    return 13;
  }
  if (v2 == CGColorGetTypeID()) {
    return 14;
  }
  if (v2 == SecCertificateGetTypeID()) {
    return 10;
  }
  if (v2 == SecAccessControlGetTypeID()) {
    return 11;
  }
  if (v2 == SecTrustGetTypeID()) {
    return 12;
  }
  return 16;
}

void IPC::ArgumentCoder<WTF::UniqueRef<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>,void>::decode(uint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  IPC::Decoder::decode<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>(a1, a2, (uint64_t)v4);
  if (v4[24]) {
    WTF::makeUniqueRefWithoutFastMallocCheck<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>();
  }
  *a3 = 0;
  a3[8] = 0;
}

void sub_19948EEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, int a16, int a17, char a18)
{
  if (a18)
  {
    if (a16 != -1) {
      ((void (*)(char *, __int16 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS6_14CoreIPCBooleanENS6_21CoreIPCCFCharacterSetENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_19CoreIPCCFDictionaryENS6_11CoreIPCNullENS6_13CoreIPCNumberENS6_13CoreIPCStringENS6_12CoreIPCCFURLENS6_21CoreIPCSecCertificateENS6_15CoreIPCSecTrustENS6_19CoreIPCCGColorSpaceEN7WebCore5ColorENS6_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[a16])(&a10, &a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 24))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
    }
  }
}

void sub_19948EF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 24))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 16);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS6_14CoreIPCBooleanENS6_21CoreIPCCFCharacterSetENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_19CoreIPCCFDictionaryENS6_11CoreIPCNullENS6_13CoreIPCNumberENS6_13CoreIPCStringENS6_12CoreIPCCFURLENS6_21CoreIPCSecCertificateENS6_15CoreIPCSecTrustENS6_19CoreIPCCGColorSpaceEN7WebCore5ColorENS6_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

unint64_t WebKit::CoreIPCNumber::numberHolderForNumber(WebKit::CoreIPCNumber *this, const __CFNumber *a2)
{
  CFNumberType Type = CFNumberGetType(this);
  uint64_t v4 = [(WebKit::CoreIPCNumber *)this compare:&unk_1EEA52FD8];
  switch(Type)
  {
    case kCFNumberSInt8Type:
      goto LABEL_10;
    case kCFNumberSInt16Type:
      goto LABEL_14;
    case kCFNumberSInt32Type:
      goto LABEL_17;
    case kCFNumberSInt64Type:
      if (v4 != -1) {
        goto LABEL_3;
      }
      goto LABEL_22;
    case kCFNumberFloat32Type:
    case kCFNumberFloatType:
      [(WebKit::CoreIPCNumber *)this floatValue];
      unint64_t v6 = 0;
      LOBYTE(v5) = v10;
      LOBYTE(v7) = BYTE1(v10);
      unsigned int v8 = v10 & 0xFFFF0000;
      return v6 | v8 | v5 | (v7 << 8);
    case kCFNumberFloat64Type:
    case kCFNumberDoubleType:
      [(WebKit::CoreIPCNumber *)this doubleValue];
      uint64_t v5 = v11;
      LOBYTE(v7) = BYTE1(v11);
      goto LABEL_7;
    case kCFNumberCharType:
      if (v4 == -1)
      {
LABEL_10:
        LOBYTE(v5) = [(WebKit::CoreIPCNumber *)this charValue];
        unint64_t v6 = 0;
        unsigned int v8 = 0;
        LOBYTE(v7) = 0;
      }
      else
      {
        LOBYTE(v5) = [(WebKit::CoreIPCNumber *)this unsignedCharValue];
        unint64_t v6 = 0;
        unsigned int v8 = 0;
        LOBYTE(v7) = 0;
      }
      return v6 | v8 | v5 | (v7 << 8);
    case kCFNumberShortType:
      if (v4 == -1)
      {
LABEL_14:
        LOWORD(v5) = [(WebKit::CoreIPCNumber *)this shortValue];
        unint64_t v6 = 0;
        unsigned int v8 = 0;
        LOBYTE(v7) = BYTE1(v5);
      }
      else
      {
        LODWORD(v5) = [(WebKit::CoreIPCNumber *)this unsignedShortValue];
        unint64_t v6 = 0;
        unsigned int v8 = 0;
        LODWORD(v7) = v5 >> 8;
      }
      return v6 | v8 | v5 | (v7 << 8);
    case kCFNumberIntType:
      if (v4 == -1)
      {
LABEL_17:
        LODWORD(v5) = [(WebKit::CoreIPCNumber *)this intValue];
        unint64_t v6 = 0;
        LOBYTE(v7) = BYTE1(v5);
        unsigned int v8 = v5 & 0xFFFF0000;
      }
      else
      {
        LODWORD(v5) = [(WebKit::CoreIPCNumber *)this unsignedIntValue];
        unint64_t v6 = 0;
        LOBYTE(v7) = BYTE1(v5);
        unsigned int v8 = v5 & 0xFFFF0000;
      }
      return v6 | v8 | v5 | (v7 << 8);
    case kCFNumberLongType:
      if (v4 == -1) {
        goto LABEL_20;
      }
      uint64_t v5 = [(WebKit::CoreIPCNumber *)this unsignedLongValue];
      unint64_t v6 = v5 & 0xFFFFFFFF00000000;
      LOBYTE(v7) = BYTE1(v5);
      unsigned int v8 = v5 & 0xFFFF0000;
      break;
    case kCFNumberLongLongType:
      if (v4 == -1)
      {
LABEL_22:
        uint64_t v5 = [(WebKit::CoreIPCNumber *)this longLongValue];
        unint64_t v6 = v5 & 0xFFFFFFFF00000000;
        LOBYTE(v7) = BYTE1(v5);
        unsigned int v8 = v5 & 0xFFFF0000;
      }
      else
      {
LABEL_3:
        uint64_t v5 = [(WebKit::CoreIPCNumber *)this unsignedLongLongValue];
        unint64_t v6 = v5 & 0xFFFFFFFF00000000;
        LOBYTE(v7) = BYTE1(v5);
        unsigned int v8 = v5 & 0xFFFF0000;
      }
      return v6 | v8 | v5 | (v7 << 8);
    case kCFNumberCFIndexType:
    case kCFNumberNSIntegerType:
LABEL_20:
      uint64_t v5 = [(WebKit::CoreIPCNumber *)this longValue];
      unint64_t v6 = v5 & 0xFFFFFFFF00000000;
      LOBYTE(v7) = BYTE1(v5);
      unsigned int v8 = v5 & 0xFFFF0000;
      break;
    case kCFNumberCGFloatType:
      [(WebKit::CoreIPCNumber *)this doubleValue];
      uint64_t v5 = v12;
      unint64_t v7 = v12 >> 8;
LABEL_7:
      unsigned int v8 = v5 & 0xFFFF0000;
      unint64_t v6 = v5 & 0xFFFFFFFF00000000;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x19948F0E0);
  }
  return v6 | v8 | v5 | (v7 << 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENSB_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJS9_SF_SI_EEEEEEDcSM_DpT0_(uint64_t a1, const void **a2)
{
  CFTypeID v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENSB_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJS9_SF_SI_EEEEEEDcSM_DpT0_(uint64_t a1, const void **a2)
{
  CFTypeID v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>>::__assign_alt[abi:sn180100]<1ul,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<__CFString const*>>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 == 1)
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    unint64_t v6 = *a2;
    *a2 = v5;
    if (v6)
    {
      CFRelease(v6);
    }
  }
  else
  {
    if (v4 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v4])(&v9, a1);
    }
    unsigned int v8 = *a3;
    *a3 = 0;
    *(void *)a1 = v8;
    *(_DWORD *)(a1 + 8) = 1;
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>>::__assign_alt[abi:sn180100]<2ul,WTF::RetainPtr<void const*>,WTF::RetainPtr<void const*>>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 == -1) {
    goto LABEL_4;
  }
  if (v5 != 2)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v5])(&v9, a1);
LABEL_4:
    unint64_t v6 = *a3;
    *a3 = 0;
    *(void *)a1 = v6;
    *(_DWORD *)(a1 + 8) = 2;
    return;
  }
  unint64_t v7 = *a3;
  *a3 = 0;
  unsigned int v8 = *a2;
  *a2 = v7;
  if (v8)
  {
    CFRelease(v8);
  }
}

uint64_t std::__variant_detail::__impl<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>::__impl[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3 != -1)
  {
    ((void (*)(unsigned char *, uint64_t, uint64_t))off_1EEA0F990[v3])(v5, a1, a2);
    *(_DWORD *)(a1 + 8) = v3;
  }
  return a1;
}

void sub_19948F404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 8);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENSB_IPKvEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJS9_SF_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENSB_IPKvEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJS9_SF_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, const void **a2)
{
  CFTypeID v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, const void **a2)
{
  CFTypeID v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t *a2)
{
  return std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::reset[abi:sn180100](a2, 0);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, const void **a2)
{
  CFTypeID v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, const void **a2)
{
  CFTypeID v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, const void **a2)
{
  CFTypeID v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v3])(&v5, a2);
  }
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if ((*a2 & 0x8000000000000) != 0)
  {
    uint64_t v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEEEEDcSS_DpT0_(uint64_t a1, const void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 16);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS6_14CoreIPCBooleanENS6_21CoreIPCCFCharacterSetENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_19CoreIPCCFDictionaryENS6_11CoreIPCNullENS6_13CoreIPCNumberENS6_13CoreIPCStringENS6_12CoreIPCCFURLENS6_21CoreIPCSecCertificateENS6_15CoreIPCSecTrustENS6_19CoreIPCCGColorSpaceEN7WebCore5ColorENS6_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v3])(&v5, a2);
    }
    *(_DWORD *)(a2 + 16) = -1;
    return MEMORY[0x199740C10](a2, 0x10E2C401DBBE44BLL);
  }
  return result;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_19948F64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 16);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS6_14CoreIPCBooleanENS6_21CoreIPCCFCharacterSetENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_19CoreIPCCFDictionaryENS6_11CoreIPCNullENS6_13CoreIPCNumberENS6_13CoreIPCStringENS6_12CoreIPCCFURLENS6_21CoreIPCSecCertificateENS6_15CoreIPCSecTrustENS6_19CoreIPCCGColorSpaceEN7WebCore5ColorENS6_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS6_14CoreIPCBooleanENS6_21CoreIPCCFCharacterSetENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_19CoreIPCCFDictionaryENS6_11CoreIPCNullENS6_13CoreIPCNumberENS6_13CoreIPCStringENS6_12CoreIPCCFURLENS6_21CoreIPCSecCertificateENS6_15CoreIPCSecTrustENS6_19CoreIPCCGColorSpaceEN7WebCore5ColorENS6_23CoreIPCSecAccessControlEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS6_14CoreIPCBooleanENS6_21CoreIPCCFCharacterSetENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_19CoreIPCCFDictionaryENS6_11CoreIPCNullENS6_13CoreIPCNumberENS6_13CoreIPCStringENS6_12CoreIPCCFURLENS6_21CoreIPCSecCertificateENS6_15CoreIPCSecTrustENS6_19CoreIPCCGColorSpaceEN7WebCore5ColorENS6_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JST_SS_EEEDcmSV_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, void *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__impl<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>::__impl[abi:sn180100](a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14ELm14EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_()
{
  return WebCore::Color::Color();
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15ELm15EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit14CoreIPCCFArrayENS8_14CoreIPCBooleanENS8_21CoreIPCCFCharacterSetENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_19CoreIPCCFDictionaryENS8_11CoreIPCNullENS8_13CoreIPCNumberENS8_13CoreIPCStringENS8_12CoreIPCCFURLENS8_21CoreIPCSecCertificateENS8_15CoreIPCSecTrustENS8_19CoreIPCCGColorSpaceEN7WebCore5ColorENS8_23CoreIPCSecAccessControlEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

__CFString *WebKit::CoreIPCString::toID@<X0>(WebKit::CoreIPCString *this@<X0>, __CFString **a2@<X8>)
{
  if (*(void *)this)
  {
    __n128 result = (__CFString *)WTF::StringImpl::operator NSString *();
    *a2 = result;
    if (!result) {
      return result;
    }
  }
  else
  {
    __n128 result = &stru_1EEA10550;
    *a2 = &stru_1EEA10550;
  }

  return (__CFString *)CFRetain(result);
}

void std::invoke[abi:sn180100]<WTF::Visitor<WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WebCore::ColorSpace)#1},WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WTF::RetainPtr<__CFString const*>)#1},WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WTF::RetainPtr<void const*>)#1}>,WTF::RetainPtr<__CFString const*> const&>(CFTypeRef *a1@<X1>, CGColorSpaceRef *a2@<X8>)
{
  CFStringRef v3 = (const __CFString *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  *a2 = CGColorSpaceCreateWithName(v3);
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_19948FAC4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::invoke[abi:sn180100]<WTF::Visitor<WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WebCore::ColorSpace)#1},WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WTF::RetainPtr<__CFString const*>)#1},WebKit::CoreIPCCGColorSpace::toCF(void)::{lambda(WTF::RetainPtr<void const*>)#1}>,WTF::RetainPtr<void const*> const&>(CFTypeRef *a1@<X1>, CGColorSpaceRef *a2@<X8>)
{
  CFTypeRef v3 = *a1;
  if (*a1) {
    CFRetain(*a1);
  }
  *a2 = CGColorSpaceCreateWithPropertyList(v3);
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_19948FB3C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 10)
  {
__ZN3IPC13ArgumentCoderINSt3__17variantIJDnN6WebKit14CoreIPCCFArrayENS3_14CoreIPCBooleanENS3_21CoreIPCCFCharacterSetENS3_11CoreIPCDataENS3_11CoreIPCDateENS3_19CoreIPCCFDictionaryENS3_11CoreIPCNullENS3_13CoreIPCNumberENS3_13CoreIPCStringENS3_12CoreIPCCFURLENS3_21CoreIPCSecCertificateENS3_15CoreIPCSecTrustENS3_19CoreIPCCGColorSpaceEN7WebCore5ColorENS3_23CoreIPCSecAccessControlEEEEvE6encodeINS_7EncoderERKSK_JLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10EEEEvRT_OT0_NS1_16integer_sequenceImJXspT1_EEEEm:
    JUMPOUT(0x19948FEB0);
  }
  if (*(_DWORD *)(a2 + 16) != 10)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto __ZN3IPC13ArgumentCoderINSt3__17variantIJDnN6WebKit14CoreIPCCFArrayENS3_14CoreIPCBooleanENS3_21CoreIPCCFCharacterSetENS3_11CoreIPCDataENS3_11CoreIPCDateENS3_19CoreIPCCFDictionaryENS3_11CoreIPCNullENS3_13CoreIPCNumberENS3_13CoreIPCStringENS3_12CoreIPCCFURLENS3_21CoreIPCSecCertificateENS3_15CoreIPCSecTrustENS3_19CoreIPCCGColorSpaceEN7WebCore5ColorENS3_23CoreIPCSecAccessControlEEEEvE6encodeINS_7EncoderERKSK_JLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10EEEEvRT_OT0_NS1_16integer_sequenceImJXspT1_EEEEm;
  }

  return IPC::ArgumentCoder<WebKit::CoreIPCCFURL,void>::encode(a1, (CFURLRef *)a2);
}

void *IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2[16];
  unint64_t v3 = a1[2];
  if (v3 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v3) = v2;
    a1[2] = v3 + 1;
  }
  return IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(a1, (WebKit::CoreIPCData *)a2, v2);
}

void *IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(void *result, WebKit::CoreIPCData *a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul>(result, a2, a3);
  }
  if (*((_DWORD *)a2 + 4))
  {
    __n128 result = (void *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul>(result, a2, a3);
  }
  return result;
}

void *IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul>(void *a1, WebKit::CoreIPCData *a2, uint64_t a3)
{
  if (a3 != 1)
  {
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul>(a1, a2, a3);
  }
  if (*((_DWORD *)a2 + 4) != 1)
  {
    a1 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul>(a1, a2, a3);
  }

  return (void *)IPC::ArgumentCoder<WebKit::CoreIPCCFArray,void>::encode();
}

void *IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul>(void *a1, WebKit::CoreIPCData *a2, uint64_t a3)
{
  if (a3 != 2)
  {
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul>(a1, a2, a3);
  }
  if (*((_DWORD *)a2 + 4) != 2)
  {
    a1 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul>(a1, a2, a3);
  }

  return IPC::ArgumentCoder<WebKit::CoreIPCBoolean,void>::encode(a1, a2);
}

void *IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul>(void *a1, WebKit::CoreIPCData *a2, uint64_t a3)
{
  if (a3 != 3)
  {
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul,3ul>(a1, a2, a3);
  }
  if (*((_DWORD *)a2 + 4) != 3)
  {
    a1 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul,3ul>(a1, a2, a3);
  }

  return IPC::ArgumentCoder<WebKit::CoreIPCCFCharacterSet,void>::encode(a1, (CFDataRef *)a2);
}

void *IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&,0ul,1ul,2ul,3ul>(void *a1, WebKit::CoreIPCData *this, uint64_t a3)
{
  if (a3 != 4)
  {
__ZN3IPC13ArgumentCoderINSt3__17variantIJDnN6WebKit14CoreIPCCFArrayENS3_14CoreIPCBooleanENS3_21CoreIPCCFCharacterSetENS3_11CoreIPCDataENS3_11CoreIPCDateENS3_19CoreIPCCFDictionaryENS3_11CoreIPCNullENS3_13CoreIPCNumberENS3_13CoreIPCStringENS3_12CoreIPCCFURLENS3_21CoreIPCSecCertificateENS3_15CoreIPCSecTrustENS3_19CoreIPCCGColorSpaceEN7WebCore5ColorENS3_23CoreIPCSecAccessControlEEEEvE6encodeINS_23StreamConnectionEncoderERKSK_JLm0ELm1ELm2ELm3ELm4EEEEvRT_OT0_NS1_16integer_sequenceImJXspT1_EEEEm:
    JUMPOUT(0x1994901C0);
  }
  if (*((_DWORD *)this + 4) != 4)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto __ZN3IPC13ArgumentCoderINSt3__17variantIJDnN6WebKit14CoreIPCCFArrayENS3_14CoreIPCBooleanENS3_21CoreIPCCFCharacterSetENS3_11CoreIPCDataENS3_11CoreIPCDateENS3_19CoreIPCCFDictionaryENS3_11CoreIPCNullENS3_13CoreIPCNumberENS3_13CoreIPCStringENS3_12CoreIPCCFURLENS3_21CoreIPCSecCertificateENS3_15CoreIPCSecTrustENS3_19CoreIPCCGColorSpaceEN7WebCore5ColorENS3_23CoreIPCSecAccessControlEEEEvE6encodeINS_23StreamConnectionEncoderERKSK_JLm0ELm1ELm2ELm3ELm4EEEEvRT_OT0_NS1_16integer_sequenceImJXspT1_EEEEm;
  }
  WebKit::CoreIPCData::dataReference((CFIndex)this, (uint64_t)v5);
  return IPC::ArgumentCoder<std::optional<std::span<unsigned char const,18446744073709551615ul>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<std::span<unsigned char const,18446744073709551615ul>>>(a1, (uint64_t)v5);
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = a1[2] - *a1;
  if (v5 <= v7)
  {
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v17 = a1[3];
    if (v17)
    {
      uint64_t v22 = v3;
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v6, v5);
        unint64_t v3 = v22;
        uint64_t v16 = *v22;
        unint64_t v15 = v22[1];
      }
      else
      {
        unint64_t v15 = 0;
        uint64_t v16 = 0;
      }
    }
    goto LABEL_30;
  }
  unsigned int v8 = (unsigned char *)(v6 + v7);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    unint64_t v15 = v5;
    uint64_t v16 = 0;
LABEL_30:
    uint64_t *v3 = 0;
    v3[1] = 0;
    uint64_t v18 = v3[3];
    if (v18 && v15) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
    }
    goto LABEL_31;
  }
  uint64_t v9 = *v8;
  if (v9 >= 0x10) {
    goto LABEL_31;
  }
  if (!*v8)
  {
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 0;
    goto LABEL_16;
  }
  switch(v9)
  {
    case 1:
      IPC::Decoder::decode<WebKit::CoreIPCCFArray>(a1, a2, (uint64_t)&v23);
      if (v24)
      {
        *(void *)a3 = v23;
        uint64_t v13 = *((void *)&v23 + 1);
        long long v23 = 0uLL;
        *(void *)(a3 + 8) = v13;
        char v14 = 1;
        *(_DWORD *)(a3 + 16) = 1;
        WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v12);
      }
      else
      {
        char v14 = 0;
        *(unsigned char *)a3 = 0;
      }
      *(unsigned char *)(a3 + 24) = v14;
      return;
    case 2:
      unsigned __int16 v19 = IPC::Decoder::decode<WebKit::CoreIPCBoolean>(a1);
      if (v19 > 0xFFu)
      {
        *(unsigned char *)a3 = v19;
        int v11 = 2;
        goto LABEL_15;
      }
LABEL_31:
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 24) = 0;
      return;
    case 3:
      IPC::Decoder::decode<WebKit::CoreIPCCFCharacterSet>(a1, &v23);
      char v10 = BYTE8(v23);
      if (BYTE8(v23))
      {
        *(void *)a3 = v23;
        int v11 = 3;
        goto LABEL_15;
      }
      goto LABEL_40;
    case 4:
      IPC::Decoder::decode<WebKit::CoreIPCData>((IPC::Decoder *)a1, &v23);
      char v10 = BYTE8(v23);
      if (BYTE8(v23))
      {
        *(void *)a3 = v23;
        int v11 = 4;
        goto LABEL_15;
      }
      goto LABEL_40;
    case 5:
      uint64_t v20 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
      if (v21)
      {
        *(void *)a3 = v20;
        int v11 = 5;
        goto LABEL_15;
      }
      goto LABEL_31;
    case 6:
      IPC::Decoder::decode<WebKit::CoreIPCCFDictionary>(a1, (uint64_t)&v23);
      char v10 = BYTE8(v23);
      if (BYTE8(v23))
      {
        *(void *)a3 = v23;
        int v11 = 6;
        goto LABEL_15;
      }
      goto LABEL_40;
    case 7:
      if ((unsigned __int16)IPC::Decoder::decode<WebKit::CoreIPCNull>(a1) > 0xFFu)
      {
        int v11 = 7;
        goto LABEL_15;
      }
      goto LABEL_31;
    case 8:
      IPC::Decoder::decode<WebKit::CoreIPCNumber>(a1, &v23);
      char v10 = v24;
      if (v24)
      {
        *(_OWORD *)a3 = v23;
        int v11 = 8;
LABEL_15:
        *(_DWORD *)(a3 + 16) = v11;
LABEL_16:
        char v10 = 1;
LABEL_17:
        *(unsigned char *)(a3 + 24) = v10;
        return;
      }
      goto LABEL_40;
    case 9:
      IPC::Decoder::decode<WebKit::CoreIPCString>((IPC::Decoder *)a1, (uint64_t)&v23);
      char v10 = BYTE8(v23);
      if (BYTE8(v23))
      {
        *(void *)a3 = v23;
        int v11 = 9;
        goto LABEL_15;
      }
LABEL_40:
      *(unsigned char *)a3 = 0;
      goto LABEL_17;
  }

  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::decode<IPC::Decoder,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul>(a3, (IPC::Decoder *)a1, v9);
}

uint64_t IPC::Decoder::decode<WebKit::CoreIPCCFArray>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::CoreIPCCFArray,void>::decode(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16)) {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

void sub_199490740(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebKit::CoreIPCBoolean>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::CoreIPCBoolean,void>::decode(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

void *IPC::Decoder::decode<WebKit::CoreIPCCFCharacterSet>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::CoreIPCCFCharacterSet,void>::decode(a1, a2);
  if (!a2[8])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (void *)v7();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::CoreIPCNull>(void *a1)
{
  if (*a1) {
    return 256;
  }
  uint64_t v2 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)result + 16))(result);
    }
    return 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::CoreIPCNumber>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::CoreIPCNumber,void>::decode(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::CoreIPCString>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ApplePayAMSUIRequest,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1994909B0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<std::tuple<WTF::String>,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::decode<IPC::Decoder,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul>(uint64_t a1, IPC::Decoder *a2, uint64_t a3)
{
  if (a3 == 10)
  {
    IPC::Decoder::decode<WebKit::CoreIPCCFURL>(a2, &v5);
    char v4 = v6;
    if (v6)
    {
      *(void *)a1 = v5;
      *(_DWORD *)(a1 + 16) = 10;
      char v4 = 1;
    }
    else
    {
      *(unsigned char *)a1 = 0;
    }
    *(unsigned char *)(a1 + 24) = v4;
  }
  else
  {
    IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::decode<IPC::Decoder,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul>(a1, (uint64_t *)a2, a3);
  }
}

void IPC::Decoder::decode<WebKit::CoreIPCCFURL>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  if (!a2[8]) {
    IPC::Decoder::markInvalid(a1);
  }
}

void sub_199490A88(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 8))
  {
    uint64_t v3 = *(const void **)v1;
    *(void *)uint64_t v1 = 0;
    if (v3) {
      CFRelease(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::decode<IPC::Decoder,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  switch(a3)
  {
    case 11:
      uint64_t result = (unsigned int *)IPC::Decoder::decode<WebKit::CoreIPCCFCharacterSet>(a2, &v11);
      char v6 = v12;
      if ((_BYTE)v12)
      {
        *(void *)a1 = v11;
        int v7 = 11;
LABEL_7:
        *(_DWORD *)(a1 + 16) = v7;
        char v6 = 1;
LABEL_22:
        *(unsigned char *)(a1 + 24) = v6;
        return result;
      }
      goto LABEL_21;
    case 12:
      uint64_t result = (unsigned int *)IPC::Decoder::decode<WebKit::CoreIPCSecTrust>(a2, &v11);
      char v6 = v12;
      if ((_BYTE)v12)
      {
        *(void *)a1 = v11;
        int v7 = 12;
        goto LABEL_7;
      }
LABEL_21:
      *(unsigned char *)a1 = 0;
      goto LABEL_22;
    case 13:
      uint64_t result = (unsigned int *)IPC::Decoder::decode<WebKit::CoreIPCCGColorSpace>(a2);
      if (v13)
      {
        uint64_t result = (unsigned int *)std::__variant_detail::__impl<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>::__impl[abi:sn180100](a1, (uint64_t)&v11);
        *(_DWORD *)(a1 + 16) = 13;
        *(unsigned char *)(a1 + 24) = 1;
        if (v13)
        {
          if (v12 != -1) {
            return (unsigned int *)((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENS9_IPKvEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v12])(&v14, &v11);
          }
        }
        return result;
      }
LABEL_25:
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 24) = 0;
      return result;
  }
  if (a3 != 14)
  {
    uint64_t result = (unsigned int *)IPC::Decoder::decode<WebKit::CoreIPCCFCharacterSet>(a2, &v11);
    char v6 = v12;
    if ((_BYTE)v12)
    {
      *(void *)a1 = v11;
      int v7 = 15;
      goto LABEL_7;
    }
    goto LABEL_21;
  }
  IPC::ArgumentCoder<WebCore::Color,void>::decode(a2, &v11);
  if (!(_BYTE)v12)
  {
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (unsigned int *)a2[3];
    if (!result) {
      goto LABEL_25;
    }
    if (!v10) {
      goto LABEL_25;
    }
    uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)result + 16))(result, v9);
    if (!(_BYTE)v12) {
      goto LABEL_25;
    }
  }
  uint64_t result = (unsigned int *)WebCore::Color::Color();
  *(_DWORD *)(a1 + 16) = 14;
  *(unsigned char *)(a1 + 24) = 1;
  if ((_BYTE)v12)
  {
    if ((v11 & 0x8000000000000) != 0)
    {
      uint64_t result = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v8);
      }
    }
  }
  return result;
}

void sub_199490C78(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, char a12)
{
  if (a10 && (a9 & 0x8000000000000) != 0)
  {
    char v13 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void *IPC::Decoder::decode<WebKit::CoreIPCSecTrust>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::CoreIPCSecTrust,void>::decode(a1, a2);
  if (!a2[8])
  {
    return (void *)IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

uint64_t WebKit::CoreIPCCFURL::createWithBaseURLAndBytes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CFIndex v4 = *(unsigned int *)(a2 + 12);
  if (v4)
  {
    if (*(unsigned char *)(a1 + 8)) {
      CFURLRef v5 = *(const __CFURL **)a1;
    }
    else {
      CFURLRef v5 = 0;
    }
    uint64_t result = (uint64_t)CFURLCreateAbsoluteURLWithBytes(0, *(const UInt8 **)a2, v4, 0x8000100u, v5, 1u);
    if (result)
    {
      *(void *)a3 = result;
      *(unsigned char *)(a3 + 8) = 1;
    }
    else
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 8) = 0;
    }
  }
  else
  {
    int v7 = (const void *)[MEMORY[0x1E4F1CB10] URLWithString:&stru_1EEA10550];
    if (v7)
    {
      unsigned int v8 = v7;
      uint64_t result = (uint64_t)CFRetain(v7);
      *(void *)a3 = v8;
      *(unsigned char *)(a3 + 8) = 1;
    }
    else
    {
      uint64_t result = 40;
      __break(0xC471u);
    }
  }
  return result;
}

const void *WebKit::CoreIPCCFURL::baseURL@<X0>(CFURLRef *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = CFURLGetBaseURL(*this);
  if (result)
  {
    CFURLRef v5 = result;
    uint64_t result = CFRetain(result);
    *(void *)a2 = v5;
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = v4;
  return result;
}

CFIndex WebKit::CoreIPCCFURL::toVector@<X0>(CFURLRef *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = CFURLGetBytes(*this, 0, 0);
  if (v4 == -1) {
    goto LABEL_7;
  }
  CFIndex v5 = v4;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v4;
  if (!v4)
  {
    char v6 = 0;
    return CFURLGetBytes(*this, v6, v5);
  }
  if (HIDWORD(v4))
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x199490EE4);
  }
  char v6 = (UInt8 *)WTF::fastMalloc((WTF *)v4);
  *(_DWORD *)(a2 + 8) = v5;
  *(void *)a2 = v6;
  return CFURLGetBytes(*this, v6, v5);
}

void sub_199490EF0(_Unwind_Exception *exception_object, void *a2)
{
  if (v3)
  {
    *(void *)uint64_t v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCCNPhoneNumber *WebKit::CoreIPCCNPhoneNumber::CoreIPCCNPhoneNumber(WebKit::CoreIPCCNPhoneNumber *this, CNPhoneNumber *a2)
{
  return this;
}

void sub_199490F60(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  unint64_t v4 = *v2;
  const void *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef WebKit::CoreIPCCNPhoneNumber::toID@<X0>(WebKit::CoreIPCCNPhoneNumber *this@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (void *)((uint64_t (*)(void))*MEMORY[0x1E4FB62A8])();
  if (*(void *)this) {
    CFIndex v5 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    CFIndex v5 = &stru_1EEA10550;
  }
  if (*((void *)this + 1)) {
    char v6 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    char v6 = &stru_1EEA10550;
  }
  CFTypeRef result = (CFTypeRef)[v4 phoneNumberWithDigits:v5 countryCode:v6];
  *a2 = result;
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

WebKit::CoreIPCCNPostalAddress *WebKit::CoreIPCCNPostalAddress::CoreIPCCNPostalAddress(WebKit::CoreIPCCNPostalAddress *this, CNPostalAddress *a2)
{
  return this;
}

void sub_199491154(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v11 = *v9;
  *uint64_t v9 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, a2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  int v12 = *v8;
  const void *v8 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, a2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  char v13 = *v7;
  *int v7 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, a2);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  char v14 = *v6;
  *char v6 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, a2);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  unint64_t v15 = *v5;
  __CFString *v5 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, a2);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = *v4;
  *unint64_t v4 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, a2);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = *v3;
  WTF *v3 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, a2);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t v18 = *v2;
  const void *v2 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, a2);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::CoreIPCCNPostalAddress::toID@<X0>(WebKit::CoreIPCCNPostalAddress *this@<X0>, void *a2@<X8>)
{
  id v4 = objc_alloc_init((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB63A8])());
  if (*(void *)this) {
    uint64_t v5 = WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v5 = 0;
  }
  [v4 setStreet:v5];
  if (*((void *)this + 1)) {
    uint64_t v6 = WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v6 = 0;
  }
  [v4 setSubLocality:v6];
  if (*((void *)this + 2)) {
    uint64_t v7 = WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v7 = 0;
  }
  [v4 setCity:v7];
  if (*((void *)this + 3)) {
    uint64_t v8 = WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v8 = 0;
  }
  [v4 setSubAdministrativeArea:v8];
  if (*((void *)this + 4)) {
    uint64_t v9 = WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v9 = 0;
  }
  [v4 setState:v9];
  if (*((void *)this + 5)) {
    uint64_t v10 = WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v10 = 0;
  }
  [v4 setPostalCode:v10];
  if (*((void *)this + 6)) {
    uint64_t v11 = WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v11 = 0;
  }
  [v4 setCountry:v11];
  if (*((void *)this + 7)) {
    uint64_t v12 = WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v12 = 0;
  }
  [v4 setISOCountryCode:v12];
  if (*((void *)this + 8)) {
    uint64_t v13 = WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t result = [v4 setFormattedAddress:v13];
  *a2 = v4;
  return result;
}

void sub_199491420(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCCNContact *WebKit::CoreIPCCNContact::CoreIPCCNContact(WebKit::CoreIPCCNContact *this, CNContact *a2)
{
  uint64_t v211 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 168) = 0;
  *((unsigned char *)this + 176) = 0;
  v164 = (WTF::StringImpl **)((char *)this + 176);
  v165 = (WTF::StringImpl **)((char *)this + 136);
  *((unsigned char *)this + 208) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  v170 = (void *)((char *)this + 232);
  v171 = (void *)((char *)this + 216);
  *(_OWORD *)((char *)this + 248) = 0u;
  v169 = (void *)((char *)this + 248);
  v167 = (void *)((char *)this + 280);
  v168 = (void *)((char *)this + 264);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 121) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  MEMORY[0x19972EAD0](&v193, [(CNContact *)a2 identifier]);
  uint64_t v5 = v193;
  v193 = 0;
  uint64_t v6 = *(WTF::StringImpl **)this;
  *(void *)this = v5;
  if (v6)
  {
    int v7 = *(_DWORD *)v6 - 2;
    if (*(_DWORD *)v6 != 2)
    {
LABEL_5:
      *(_DWORD *)uint64_t v6 = v7;
      goto LABEL_6;
    }
    WTF::StringImpl::destroy(v6, v4);
    uint64_t v6 = v193;
    v193 = 0;
    if (v6)
    {
      int v7 = *(_DWORD *)v6 - 2;
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v8);
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
LABEL_6:
  uint64_t v9 = [(CNContact *)a2 contactType];
  *((void *)this + 1) = v9;
  uint64_t v10 = (NSString *)[(CNContact *)a2 isKeyAvailable:PAL::get_Contacts_CNContactNamePrefixKey(v9)];
  if (v10)
  {
    uint64_t v10 = [(CNContact *)a2 namePrefix];
    if (v10)
    {
      MEMORY[0x19972EAD0](&v193, [(CNContact *)a2 namePrefix]);
      uint64_t v12 = v193;
      v193 = 0;
      uint64_t v10 = (NSString *)*((void *)this + 2);
      *((void *)this + 2) = v12;
      if (v10)
      {
        int v13 = *(_DWORD *)v10 - 2;
        if (*(_DWORD *)v10 != 2)
        {
LABEL_12:
          *(_DWORD *)uint64_t v10 = v13;
          goto LABEL_13;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v10, v11);
        uint64_t v10 = (NSString *)v193;
        v193 = 0;
        if (v10)
        {
          int v13 = *(_DWORD *)v10 - 2;
          if (*(_DWORD *)v10 == 2)
          {
            uint64_t v10 = (NSString *)WTF::StringImpl::destroy((WTF::StringImpl *)v10, v14);
            goto LABEL_13;
          }
          goto LABEL_12;
        }
      }
    }
  }
LABEL_13:
  unint64_t v15 = (NSString *)[(CNContact *)a2 isKeyAvailable:PAL::get_Contacts_CNContactGivenNameKey((PAL *)v10)];
  if (v15)
  {
    unint64_t v15 = [(CNContact *)a2 givenName];
    if (v15)
    {
      MEMORY[0x19972EAD0](&v193, [(CNContact *)a2 givenName]);
      uint64_t v17 = v193;
      v193 = 0;
      unint64_t v15 = (NSString *)*((void *)this + 3);
      *((void *)this + 3) = v17;
      if (v15)
      {
        int v18 = *(_DWORD *)v15 - 2;
        if (*(_DWORD *)v15 != 2)
        {
LABEL_19:
          *(_DWORD *)unint64_t v15 = v18;
          goto LABEL_20;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v15, v16);
        unint64_t v15 = (NSString *)v193;
        v193 = 0;
        if (v15)
        {
          int v18 = *(_DWORD *)v15 - 2;
          if (*(_DWORD *)v15 == 2)
          {
            unint64_t v15 = (NSString *)WTF::StringImpl::destroy((WTF::StringImpl *)v15, v19);
            goto LABEL_20;
          }
          goto LABEL_19;
        }
      }
    }
  }
LABEL_20:
  uint64_t v20 = (NSString *)[(CNContact *)a2 isKeyAvailable:PAL::get_Contacts_CNContactMiddleNameKey((PAL *)v15)];
  if (v20)
  {
    uint64_t v20 = [(CNContact *)a2 middleName];
    if (v20)
    {
      MEMORY[0x19972EAD0](&v193, [(CNContact *)a2 middleName]);
      uint64_t v22 = v193;
      v193 = 0;
      uint64_t v20 = (NSString *)*((void *)this + 4);
      *((void *)this + 4) = v22;
      if (v20)
      {
        int v23 = *(_DWORD *)v20 - 2;
        if (*(_DWORD *)v20 != 2)
        {
LABEL_26:
          *(_DWORD *)uint64_t v20 = v23;
          goto LABEL_27;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v20, v21);
        uint64_t v20 = (NSString *)v193;
        v193 = 0;
        if (v20)
        {
          int v23 = *(_DWORD *)v20 - 2;
          if (*(_DWORD *)v20 == 2)
          {
            uint64_t v20 = (NSString *)WTF::StringImpl::destroy((WTF::StringImpl *)v20, v24);
            goto LABEL_27;
          }
          goto LABEL_26;
        }
      }
    }
  }
LABEL_27:
  unint64_t v25 = (NSString *)[(CNContact *)a2 isKeyAvailable:PAL::get_Contacts_CNContactFamilyNameKey((PAL *)v20)];
  if (v25)
  {
    unint64_t v25 = [(CNContact *)a2 familyName];
    if (v25)
    {
      MEMORY[0x19972EAD0](&v193, [(CNContact *)a2 familyName]);
      char v27 = v193;
      v193 = 0;
      unint64_t v25 = (NSString *)*((void *)this + 5);
      *((void *)this + 5) = v27;
      if (v25)
      {
        int v28 = *(_DWORD *)v25 - 2;
        if (*(_DWORD *)v25 != 2)
        {
LABEL_33:
          *(_DWORD *)unint64_t v25 = v28;
          goto LABEL_34;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v25, v26);
        unint64_t v25 = (NSString *)v193;
        v193 = 0;
        if (v25)
        {
          int v28 = *(_DWORD *)v25 - 2;
          if (*(_DWORD *)v25 == 2)
          {
            unint64_t v25 = (NSString *)WTF::StringImpl::destroy((WTF::StringImpl *)v25, v29);
            goto LABEL_34;
          }
          goto LABEL_33;
        }
      }
    }
  }
LABEL_34:
  long long v30 = (NSString *)[(CNContact *)a2 isKeyAvailable:PAL::get_Contacts_CNContactPreviousFamilyNameKey((PAL *)v25)];
  if (v30)
  {
    long long v30 = [(CNContact *)a2 previousFamilyName];
    if (v30)
    {
      MEMORY[0x19972EAD0](&v193, [(CNContact *)a2 previousFamilyName]);
      long long v32 = v193;
      v193 = 0;
      long long v30 = (NSString *)*((void *)this + 6);
      *((void *)this + 6) = v32;
      if (v30)
      {
        int v33 = *(_DWORD *)v30 - 2;
        if (*(_DWORD *)v30 != 2)
        {
LABEL_40:
          *(_DWORD *)long long v30 = v33;
          goto LABEL_41;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v30, v31);
        long long v30 = (NSString *)v193;
        v193 = 0;
        if (v30)
        {
          int v33 = *(_DWORD *)v30 - 2;
          if (*(_DWORD *)v30 == 2)
          {
            long long v30 = (NSString *)WTF::StringImpl::destroy((WTF::StringImpl *)v30, v34);
            goto LABEL_41;
          }
          goto LABEL_40;
        }
      }
    }
  }
LABEL_41:
  uint64_t v35 = (NSString *)[(CNContact *)a2 isKeyAvailable:PAL::get_Contacts_CNContactNameSuffixKey((PAL *)v30)];
  if (v35)
  {
    uint64_t v35 = [(CNContact *)a2 nameSuffix];
    if (v35)
    {
      MEMORY[0x19972EAD0](&v193, [(CNContact *)a2 nameSuffix]);
      uint64_t v37 = v193;
      v193 = 0;
      uint64_t v35 = (NSString *)*((void *)this + 7);
      *((void *)this + 7) = v37;
      if (v35)
      {
        int v38 = *(_DWORD *)v35 - 2;
        if (*(_DWORD *)v35 != 2)
        {
LABEL_47:
          *(_DWORD *)uint64_t v35 = v38;
          goto LABEL_48;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v35, v36);
        uint64_t v35 = (NSString *)v193;
        v193 = 0;
        if (v35)
        {
          int v38 = *(_DWORD *)v35 - 2;
          if (*(_DWORD *)v35 == 2)
          {
            uint64_t v35 = (NSString *)WTF::StringImpl::destroy((WTF::StringImpl *)v35, v39);
            goto LABEL_48;
          }
          goto LABEL_47;
        }
      }
    }
  }
LABEL_48:
  uint64_t v40 = (NSString *)[(CNContact *)a2 isKeyAvailable:PAL::get_Contacts_CNContactNicknameKey((PAL *)v35)];
  if (v40)
  {
    uint64_t v40 = [(CNContact *)a2 nickname];
    if (v40)
    {
      MEMORY[0x19972EAD0](&v193, [(CNContact *)a2 nickname]);
      CFTypeRef v42 = v193;
      v193 = 0;
      uint64_t v40 = (NSString *)*((void *)this + 8);
      *((void *)this + 8) = v42;
      if (v40)
      {
        int v43 = *(_DWORD *)v40 - 2;
        if (*(_DWORD *)v40 != 2)
        {
LABEL_54:
          *(_DWORD *)uint64_t v40 = v43;
          goto LABEL_55;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v40, v41);
        uint64_t v40 = (NSString *)v193;
        v193 = 0;
        if (v40)
        {
          int v43 = *(_DWORD *)v40 - 2;
          if (*(_DWORD *)v40 == 2)
          {
            uint64_t v40 = (NSString *)WTF::StringImpl::destroy((WTF::StringImpl *)v40, v44);
            goto LABEL_55;
          }
          goto LABEL_54;
        }
      }
    }
  }
LABEL_55:
  long long v45 = (NSString *)[(CNContact *)a2 isKeyAvailable:PAL::get_Contacts_CNContactOrganizationNameKey((PAL *)v40)];
  if (v45)
  {
    long long v45 = [(CNContact *)a2 organizationName];
    if (v45)
    {
      MEMORY[0x19972EAD0](&v193, [(CNContact *)a2 organizationName]);
      long long v47 = v193;
      v193 = 0;
      long long v45 = (NSString *)*((void *)this + 9);
      *((void *)this + 9) = v47;
      if (v45)
      {
        int v48 = *(_DWORD *)v45 - 2;
        if (*(_DWORD *)v45 != 2)
        {
LABEL_61:
          *(_DWORD *)long long v45 = v48;
          goto LABEL_62;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v45, v46);
        long long v45 = (NSString *)v193;
        v193 = 0;
        if (v45)
        {
          int v48 = *(_DWORD *)v45 - 2;
          if (*(_DWORD *)v45 == 2)
          {
            long long v45 = (NSString *)WTF::StringImpl::destroy((WTF::StringImpl *)v45, v49);
            goto LABEL_62;
          }
          goto LABEL_61;
        }
      }
    }
  }
LABEL_62:
  uint64_t v50 = (NSString *)[(CNContact *)a2 isKeyAvailable:PAL::get_Contacts_CNContactDepartmentNameKey((PAL *)v45)];
  if (v50)
  {
    uint64_t v50 = [(CNContact *)a2 departmentName];
    if (v50)
    {
      MEMORY[0x19972EAD0](&v193, [(CNContact *)a2 departmentName]);
      v52 = v193;
      v193 = 0;
      uint64_t v50 = (NSString *)*((void *)this + 10);
      *((void *)this + 10) = v52;
      if (v50)
      {
        int v53 = *(_DWORD *)v50 - 2;
        if (*(_DWORD *)v50 != 2)
        {
LABEL_68:
          *(_DWORD *)uint64_t v50 = v53;
          goto LABEL_69;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v50, v51);
        uint64_t v50 = (NSString *)v193;
        v193 = 0;
        if (v50)
        {
          int v53 = *(_DWORD *)v50 - 2;
          if (*(_DWORD *)v50 == 2)
          {
            uint64_t v50 = (NSString *)WTF::StringImpl::destroy((WTF::StringImpl *)v50, v54);
            goto LABEL_69;
          }
          goto LABEL_68;
        }
      }
    }
  }
LABEL_69:
  v55 = (NSString *)[(CNContact *)a2 isKeyAvailable:PAL::get_Contacts_CNContactJobTitleKey((PAL *)v50)];
  if (v55)
  {
    v55 = [(CNContact *)a2 jobTitle];
    if (v55)
    {
      MEMORY[0x19972EAD0](&v193, [(CNContact *)a2 jobTitle]);
      v57 = v193;
      v193 = 0;
      v55 = (NSString *)*((void *)this + 11);
      *((void *)this + 11) = v57;
      if (v55)
      {
        int v58 = *(_DWORD *)v55 - 2;
        if (*(_DWORD *)v55 != 2)
        {
LABEL_75:
          *(_DWORD *)v55 = v58;
          goto LABEL_76;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v55, v56);
        v55 = (NSString *)v193;
        v193 = 0;
        if (v55)
        {
          int v58 = *(_DWORD *)v55 - 2;
          if (*(_DWORD *)v55 == 2)
          {
            v55 = (NSString *)WTF::StringImpl::destroy((WTF::StringImpl *)v55, v59);
            goto LABEL_76;
          }
          goto LABEL_75;
        }
      }
    }
  }
LABEL_76:
  v60 = (NSString *)[(CNContact *)a2 isKeyAvailable:PAL::get_Contacts_CNContactPhoneticGivenNameKey((PAL *)v55)];
  if (v60)
  {
    v60 = [(CNContact *)a2 phoneticGivenName];
    if (v60)
    {
      MEMORY[0x19972EAD0](&v193, [(CNContact *)a2 phoneticGivenName]);
      uint64_t v62 = v193;
      v193 = 0;
      v60 = (NSString *)*((void *)this + 12);
      *((void *)this + 12) = v62;
      if (v60)
      {
        int v63 = *(_DWORD *)v60 - 2;
        if (*(_DWORD *)v60 != 2)
        {
LABEL_82:
          *(_DWORD *)v60 = v63;
          goto LABEL_83;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v60, v61);
        v60 = (NSString *)v193;
        v193 = 0;
        if (v60)
        {
          int v63 = *(_DWORD *)v60 - 2;
          if (*(_DWORD *)v60 == 2)
          {
            v60 = (NSString *)WTF::StringImpl::destroy((WTF::StringImpl *)v60, v64);
            goto LABEL_83;
          }
          goto LABEL_82;
        }
      }
    }
  }
LABEL_83:
  v65 = (NSString *)[(CNContact *)a2 isKeyAvailable:PAL::get_Contacts_CNContactPhoneticMiddleNameKey((PAL *)v60)];
  if (v65)
  {
    v65 = [(CNContact *)a2 phoneticMiddleName];
    if (v65)
    {
      MEMORY[0x19972EAD0](&v193, [(CNContact *)a2 phoneticMiddleName]);
      v67 = v193;
      v193 = 0;
      v65 = (NSString *)*((void *)this + 13);
      *((void *)this + 13) = v67;
      if (v65)
      {
        int v68 = *(_DWORD *)v65 - 2;
        if (*(_DWORD *)v65 != 2)
        {
LABEL_89:
          *(_DWORD *)v65 = v68;
          goto LABEL_90;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v65, v66);
        v65 = (NSString *)v193;
        v193 = 0;
        if (v65)
        {
          int v68 = *(_DWORD *)v65 - 2;
          if (*(_DWORD *)v65 == 2)
          {
            v65 = (NSString *)WTF::StringImpl::destroy((WTF::StringImpl *)v65, v69);
            goto LABEL_90;
          }
          goto LABEL_89;
        }
      }
    }
  }
LABEL_90:
  char v70 = (NSString *)[(CNContact *)a2 isKeyAvailable:PAL::get_Contacts_CNContactPhoneticFamilyNameKey((PAL *)v65)];
  if (v70)
  {
    char v70 = [(CNContact *)a2 phoneticFamilyName];
    if (v70)
    {
      MEMORY[0x19972EAD0](&v193, [(CNContact *)a2 phoneticFamilyName]);
      uint64_t v72 = v193;
      v193 = 0;
      char v70 = (NSString *)*((void *)this + 14);
      *((void *)this + 14) = v72;
      if (v70)
      {
        int v73 = *(_DWORD *)v70 - 2;
        if (*(_DWORD *)v70 != 2)
        {
LABEL_96:
          *(_DWORD *)char v70 = v73;
          goto LABEL_97;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v70, v71);
        char v70 = (NSString *)v193;
        v193 = 0;
        if (v70)
        {
          int v73 = *(_DWORD *)v70 - 2;
          if (*(_DWORD *)v70 == 2)
          {
            char v70 = (NSString *)WTF::StringImpl::destroy((WTF::StringImpl *)v70, v74);
            goto LABEL_97;
          }
          goto LABEL_96;
        }
      }
    }
  }
LABEL_97:
  v75 = (NSString *)[(CNContact *)a2 isKeyAvailable:PAL::get_Contacts_CNContactPhoneticOrganizationNameKey((PAL *)v70)];
  if (v75)
  {
    v75 = [(CNContact *)a2 phoneticOrganizationName];
    if (v75)
    {
      MEMORY[0x19972EAD0](&v193, [(CNContact *)a2 phoneticOrganizationName]);
      v77 = v193;
      v193 = 0;
      v75 = (NSString *)*((void *)this + 15);
      *((void *)this + 15) = v77;
      if (v75)
      {
        int v78 = *(_DWORD *)v75 - 2;
        if (*(_DWORD *)v75 != 2)
        {
LABEL_103:
          *(_DWORD *)v75 = v78;
          goto LABEL_104;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v75, v76);
        v75 = (NSString *)v193;
        v193 = 0;
        if (v75)
        {
          int v78 = *(_DWORD *)v75 - 2;
          if (*(_DWORD *)v75 == 2)
          {
            v75 = (NSString *)WTF::StringImpl::destroy((WTF::StringImpl *)v75, v79);
            goto LABEL_104;
          }
          goto LABEL_103;
        }
      }
    }
  }
LABEL_104:
  v80 = (NSString *)[(CNContact *)a2 isKeyAvailable:PAL::get_Contacts_CNContactNoteKey((PAL *)v75)];
  if (v80)
  {
    v80 = [(CNContact *)a2 note];
    if (v80)
    {
      MEMORY[0x19972EAD0](&v193, [(CNContact *)a2 note]);
      v82 = v193;
      v193 = 0;
      v80 = (NSString *)*((void *)this + 16);
      *((void *)this + 16) = v82;
      if (v80)
      {
        int v83 = *(_DWORD *)v80 - 2;
        if (*(_DWORD *)v80 != 2)
        {
LABEL_110:
          *(_DWORD *)v80 = v83;
          goto LABEL_111;
        }
        WTF::StringImpl::destroy((WTF::StringImpl *)v80, v81);
        v80 = (NSString *)v193;
        v193 = 0;
        if (v80)
        {
          int v83 = *(_DWORD *)v80 - 2;
          if (*(_DWORD *)v80 == 2)
          {
            v80 = (NSString *)WTF::StringImpl::destroy((WTF::StringImpl *)v80, v84);
            goto LABEL_111;
          }
          goto LABEL_110;
        }
      }
    }
  }
LABEL_111:
  v85 = (NSDateComponents *)[(CNContact *)a2 isKeyAvailable:PAL::get_Contacts_CNContactBirthdayKey((PAL *)v80)];
  if (v85)
  {
    v85 = [(CNContact *)a2 birthday];
    if (v85) {
      v85 = (NSDateComponents *)std::optional<WebKit::CoreIPCDateComponents>::operator=[abi:sn180100]<NSDateComponents *,void>(v165, [(CNContact *)a2 birthday]);
    }
  }
  v86 = (NSDateComponents *)[(CNContact *)a2 isKeyAvailable:PAL::get_Contacts_CNContactNonGregorianBirthdayKey((PAL *)v85)];
  if (v86)
  {
    v86 = [(CNContact *)a2 nonGregorianBirthday];
    if (v86) {
      v86 = (NSDateComponents *)std::optional<WebKit::CoreIPCDateComponents>::operator=[abi:sn180100]<NSDateComponents *,void>(v164, [(CNContact *)a2 nonGregorianBirthday]);
    }
  }
  uint64_t v87 = [(CNContact *)a2 isKeyAvailable:PAL::get_Contacts_CNContactDatesKey((PAL *)v86)];
  v166 = a2;
  if (v87)
  {
    uint64_t v87 = [(CNContact *)a2 dates];
    if (v87)
    {
      long long v203 = 0u;
      long long v204 = 0u;
      long long v201 = 0u;
      long long v202 = 0u;
      v88 = [(CNContact *)a2 dates];
      uint64_t v87 = [(NSArray *)v88 countByEnumeratingWithState:&v201 objects:v210 count:16];
      uint64_t v89 = v87;
      if (v87)
      {
        uint64_t v90 = *(void *)v202;
        do
        {
          uint64_t v91 = 0;
          do
          {
            if (*(void *)v202 != v90) {
              objc_enumerationMutation(v88);
            }
            v92 = *(void **)(*((void *)&v201 + 1) + 8 * v91);
            MEMORY[0x19972EAD0](&v193, [v92 identifier]);
            MEMORY[0x19972EAD0](&v194, [v92 label]);
            WebKit::CoreIPCDateComponents::CoreIPCDateComponents((WebKit::CoreIPCDateComponents *)v176, (NSDateComponents *)[v92 value]);
            long long v93 = *(_OWORD *)v176;
            v176[0] = 0;
            v176[1] = 0;
            long long v195 = v93;
            *(WTF **)&long long v196 = v177[0];
            *(WTF **)&long long v93 = v177[1];
            v177[0] = 0;
            v177[1] = 0;
            *((void *)&v196 + 1) = v93;
            int v200 = 0;
            unsigned int v94 = *((_DWORD *)this + 57);
            if (v94 == *((_DWORD *)this + 56))
            {
              WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCContactLabeledValue>((uint64_t)v171, (unint64_t)&v193);
            }
            else
            {
              v96 = (PAL **)(*v171 + 96 * v94);
              v97 = v193;
              v193 = 0;
              *v96 = v97;
              v98 = v194;
              v194 = 0;
              v96[1] = v98;
              std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v96 + 2), (uint64_t)&v195);
              ++*((_DWORD *)this + 57);
            }
            if (v200 != -1) {
              ((void (*)(char *, long long *))off_1EEA0FAA8[v200])(&v205, &v195);
            }
            int v200 = -1;
            v99 = v194;
            v194 = 0;
            if (v99)
            {
              if (*(_DWORD *)v99 == 2) {
                WTF::StringImpl::destroy(v99, v95);
              }
              else {
                *(_DWORD *)v99 -= 2;
              }
            }
            v100 = v193;
            v193 = 0;
            if (v100)
            {
              if (*(_DWORD *)v100 == 2) {
                WTF::StringImpl::destroy(v100, v95);
              }
              else {
                *(_DWORD *)v100 -= 2;
              }
            }
            v101 = v177[0];
            if (v177[0])
            {
              v177[0] = 0;
              LODWORD(v177[1]) = 0;
              WTF::fastFree(v101, v95);
            }
            v102 = v176[1];
            v176[1] = 0;
            if (v102)
            {
              if (*(_DWORD *)v102 == 2) {
                WTF::StringImpl::destroy(v102, v95);
              }
              else {
                *(_DWORD *)v102 -= 2;
              }
            }
            v103 = v176[0];
            v176[0] = 0;
            if (v103)
            {
              if (*(_DWORD *)v103 == 2) {
                WTF::StringImpl::destroy(v103, v95);
              }
              else {
                *(_DWORD *)v103 -= 2;
              }
            }
            ++v91;
          }
          while (v89 != v91);
          uint64_t v87 = [(NSArray *)v88 countByEnumeratingWithState:&v201 objects:v210 count:16];
          uint64_t v89 = v87;
        }
        while (v87);
      }
    }
  }
  v104 = (PAL *)[(CNContact *)v166 isKeyAvailable:PAL::get_Contacts_CNContactPhoneNumbersKey((PAL *)v87)];
  if (v104)
  {
    v104 = [(CNContact *)v166 phoneNumbers];
    if (v104)
    {
      long long v191 = 0u;
      long long v192 = 0u;
      long long v189 = 0u;
      long long v190 = 0u;
      v105 = [(CNContact *)v166 phoneNumbers];
      v104 = (PAL *)[(NSArray *)v105 countByEnumeratingWithState:&v189 objects:v209 count:16];
      v106 = v104;
      if (v104)
      {
        uint64_t v107 = *(void *)v190;
        do
        {
          v108 = 0;
          do
          {
            if (*(void *)v190 != v107) {
              objc_enumerationMutation(v105);
            }
            v109 = *(void **)(*((void *)&v189 + 1) + 8 * (void)v108);
            MEMORY[0x19972EAD0](&v193, [v109 identifier]);
            MEMORY[0x19972EAD0](&v194, [v109 label]);
            WebKit::CoreIPCCNPhoneNumber::CoreIPCCNPhoneNumber((WebKit::CoreIPCCNPhoneNumber *)v176, (CNPhoneNumber *)[v109 value]);
            long long v110 = *(_OWORD *)v176;
            v176[0] = 0;
            v176[1] = 0;
            long long v195 = v110;
            int v200 = 1;
            unsigned int v111 = *((_DWORD *)this + 61);
            if (v111 == *((_DWORD *)this + 60))
            {
              WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCContactLabeledValue>((uint64_t)v170, (unint64_t)&v193);
            }
            else
            {
              v113 = (PAL **)(*v170 + 96 * v111);
              v114 = v193;
              v193 = 0;
              *v113 = v114;
              v115 = v194;
              v194 = 0;
              v113[1] = v115;
              std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v113 + 2), (uint64_t)&v195);
              ++*((_DWORD *)this + 61);
            }
            if (v200 != -1) {
              ((void (*)(char *, long long *))off_1EEA0FAA8[v200])(&v205, &v195);
            }
            int v200 = -1;
            v116 = v194;
            v194 = 0;
            if (v116)
            {
              if (*(_DWORD *)v116 == 2) {
                WTF::StringImpl::destroy(v116, v112);
              }
              else {
                *(_DWORD *)v116 -= 2;
              }
            }
            v117 = v193;
            v193 = 0;
            if (v117)
            {
              if (*(_DWORD *)v117 == 2) {
                WTF::StringImpl::destroy(v117, v112);
              }
              else {
                *(_DWORD *)v117 -= 2;
              }
            }
            v118 = v176[1];
            v176[1] = 0;
            if (v118)
            {
              if (*(_DWORD *)v118 == 2) {
                WTF::StringImpl::destroy(v118, v112);
              }
              else {
                *(_DWORD *)v118 -= 2;
              }
            }
            v119 = v176[0];
            v176[0] = 0;
            if (v119)
            {
              if (*(_DWORD *)v119 == 2) {
                WTF::StringImpl::destroy(v119, v112);
              }
              else {
                *(_DWORD *)v119 -= 2;
              }
            }
            v108 = (PAL *)((char *)v108 + 1);
          }
          while (v106 != v108);
          v104 = (PAL *)[(NSArray *)v105 countByEnumeratingWithState:&v189 objects:v209 count:16];
          v106 = v104;
        }
        while (v104);
      }
    }
  }
  v120 = (PAL *)[(CNContact *)v166 isKeyAvailable:PAL::get_Contacts_CNContactEmailAddressesKey(v104)];
  if (v120)
  {
    v120 = [(CNContact *)v166 emailAddresses];
    if (v120)
    {
      long long v187 = 0u;
      long long v188 = 0u;
      long long v185 = 0u;
      long long v186 = 0u;
      v121 = [(CNContact *)v166 emailAddresses];
      v120 = (PAL *)[(NSArray *)v121 countByEnumeratingWithState:&v185 objects:v208 count:16];
      v122 = v120;
      if (v120)
      {
        uint64_t v123 = *(void *)v186;
        do
        {
          v124 = 0;
          do
          {
            if (*(void *)v186 != v123) {
              objc_enumerationMutation(v121);
            }
            v125 = *(void **)(*((void *)&v185 + 1) + 8 * (void)v124);
            MEMORY[0x19972EAD0](&v193, [v125 identifier]);
            MEMORY[0x19972EAD0](&v194, [v125 label]);
            MEMORY[0x19972EAD0](&v195, [v125 value]);
            int v200 = 3;
            unsigned int v126 = *((_DWORD *)this + 65);
            if (v126 == *((_DWORD *)this + 64))
            {
              WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCContactLabeledValue>((uint64_t)v169, (unint64_t)&v193);
            }
            else
            {
              v128 = (PAL **)(*v169 + 96 * v126);
              v129 = v193;
              v193 = 0;
              *v128 = v129;
              v130 = v194;
              v194 = 0;
              v128[1] = v130;
              std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v128 + 2), (uint64_t)&v195);
              ++*((_DWORD *)this + 65);
            }
            if (v200 != -1) {
              ((void (*)(WTF::StringImpl **, long long *))off_1EEA0FAA8[v200])(v176, &v195);
            }
            int v200 = -1;
            v131 = v194;
            v194 = 0;
            if (v131)
            {
              if (*(_DWORD *)v131 == 2) {
                WTF::StringImpl::destroy(v131, v127);
              }
              else {
                *(_DWORD *)v131 -= 2;
              }
            }
            v132 = v193;
            v193 = 0;
            if (v132)
            {
              if (*(_DWORD *)v132 == 2) {
                WTF::StringImpl::destroy(v132, v127);
              }
              else {
                *(_DWORD *)v132 -= 2;
              }
            }
            v124 = (PAL *)((char *)v124 + 1);
          }
          while (v122 != v124);
          v120 = (PAL *)[(NSArray *)v121 countByEnumeratingWithState:&v185 objects:v208 count:16];
          v122 = v120;
        }
        while (v120);
      }
    }
  }
  v133 = (PAL *)[(CNContact *)v166 isKeyAvailable:PAL::get_Contacts_CNContactPostalAddressesKey(v120)];
  if (v133)
  {
    v133 = [(CNContact *)v166 postalAddresses];
    if (v133)
    {
      long long v183 = 0u;
      long long v184 = 0u;
      long long v181 = 0u;
      long long v182 = 0u;
      v134 = [(CNContact *)v166 postalAddresses];
      v133 = (PAL *)[(NSArray *)v134 countByEnumeratingWithState:&v181 objects:v207 count:16];
      v135 = v133;
      if (v133)
      {
        uint64_t v136 = *(void *)v182;
        do
        {
          v137 = 0;
          do
          {
            if (*(void *)v182 != v136) {
              objc_enumerationMutation(v134);
            }
            v138 = *(void **)(*((void *)&v181 + 1) + 8 * (void)v137);
            MEMORY[0x19972EAD0](&v193, [v138 identifier]);
            MEMORY[0x19972EAD0](&v194, [v138 label]);
            WebKit::CoreIPCCNPostalAddress::CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)v176, (CNPostalAddress *)[v138 value]);
            long long v139 = *(_OWORD *)v176;
            long long v140 = *(_OWORD *)v177;
            *(_OWORD *)v176 = 0u;
            *(_OWORD *)v177 = 0u;
            long long v195 = v139;
            long long v196 = v140;
            long long v141 = v178;
            long long v142 = v179;
            long long v178 = 0u;
            long long v179 = 0u;
            long long v197 = v141;
            long long v198 = v142;
            uint64_t v143 = v180;
            uint64_t v180 = 0;
            uint64_t v199 = v143;
            int v200 = 2;
            unsigned int v144 = *((_DWORD *)this + 69);
            if (v144 == *((_DWORD *)this + 68))
            {
              WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCContactLabeledValue>((uint64_t)v168, (unint64_t)&v193);
            }
            else
            {
              v146 = (PAL **)(*v168 + 96 * v144);
              v147 = v193;
              v193 = 0;
              *v146 = v147;
              v148 = v194;
              v194 = 0;
              v146[1] = v148;
              std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v146 + 2), (uint64_t)&v195);
              ++*((_DWORD *)this + 69);
            }
            if (v200 != -1) {
              ((void (*)(char *, long long *))off_1EEA0FAA8[v200])(&v205, &v195);
            }
            int v200 = -1;
            v149 = v194;
            v194 = 0;
            if (v149)
            {
              if (*(_DWORD *)v149 == 2) {
                WTF::StringImpl::destroy(v149, v145);
              }
              else {
                *(_DWORD *)v149 -= 2;
              }
            }
            v150 = v193;
            v193 = 0;
            if (v150)
            {
              if (*(_DWORD *)v150 == 2) {
                WTF::StringImpl::destroy(v150, v145);
              }
              else {
                *(_DWORD *)v150 -= 2;
              }
            }
            WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)v176, v145);
            v137 = (PAL *)((char *)v137 + 1);
          }
          while (v135 != v137);
          v133 = (PAL *)[(NSArray *)v134 countByEnumeratingWithState:&v181 objects:v207 count:16];
          v135 = v133;
        }
        while (v133);
      }
    }
  }
  if ([(CNContact *)v166 isKeyAvailable:PAL::get_Contacts_CNContactUrlAddressesKey(v133)])
  {
    if ([(CNContact *)v166 urlAddresses])
    {
      long long v174 = 0u;
      long long v175 = 0u;
      long long v172 = 0u;
      long long v173 = 0u;
      v151 = [(CNContact *)v166 urlAddresses];
      uint64_t v152 = [(NSArray *)v151 countByEnumeratingWithState:&v172 objects:v206 count:16];
      if (v152)
      {
        uint64_t v153 = *(void *)v173;
        do
        {
          for (uint64_t i = 0; i != v152; ++i)
          {
            if (*(void *)v173 != v153) {
              objc_enumerationMutation(v151);
            }
            v155 = *(void **)(*((void *)&v172 + 1) + 8 * i);
            MEMORY[0x19972EAD0](&v193, [v155 identifier]);
            MEMORY[0x19972EAD0](&v194, [v155 label]);
            MEMORY[0x19972EAD0](&v195, [v155 value]);
            int v200 = 3;
            unsigned int v156 = *((_DWORD *)this + 73);
            if (v156 == *((_DWORD *)this + 72))
            {
              WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCContactLabeledValue>((uint64_t)v167, (unint64_t)&v193);
            }
            else
            {
              v158 = (PAL **)(*v167 + 96 * v156);
              v159 = v193;
              v193 = 0;
              *v158 = v159;
              v160 = v194;
              v194 = 0;
              v158[1] = v160;
              std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v158 + 2), (uint64_t)&v195);
              ++*((_DWORD *)this + 73);
            }
            if (v200 != -1) {
              ((void (*)(WTF::StringImpl **, long long *))off_1EEA0FAA8[v200])(v176, &v195);
            }
            int v200 = -1;
            v161 = v194;
            v194 = 0;
            if (v161)
            {
              if (*(_DWORD *)v161 == 2) {
                WTF::StringImpl::destroy(v161, v157);
              }
              else {
                *(_DWORD *)v161 -= 2;
              }
            }
            v162 = v193;
            v193 = 0;
            if (v162)
            {
              if (*(_DWORD *)v162 == 2) {
                WTF::StringImpl::destroy(v162, v157);
              }
              else {
                *(_DWORD *)v162 -= 2;
              }
            }
          }
          uint64_t v152 = [(NSArray *)v151 countByEnumeratingWithState:&v172 objects:v206 count:16];
        }
        while (v152);
      }
    }
  }
  return this;
}

void sub_199492734(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a12, a2);
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a13, v18);
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a14, v19);
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a15, v20);
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a16, v21);
  std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100](a9, v22);
  std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100](a10, v23);
  unint64_t v25 = v16[16];
  v16[16] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v24);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  uint64_t v26 = v16[15];
  v16[15] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v24);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  char v27 = v16[14];
  v16[14] = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v24);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  int v28 = v16[13];
  v16[13] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v24);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  CFTypeRef v29 = v16[12];
  v16[12] = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v24);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  long long v30 = v16[11];
  v16[11] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v24);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  char v31 = v16[10];
  v16[10] = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, v24);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  long long v32 = v16[9];
  v16[9] = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v24);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  int v33 = v16[8];
  v16[8] = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, v24);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  uint64_t v34 = v16[7];
  v16[7] = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, v24);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  uint64_t v35 = v16[6];
  v16[6] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2) {
      WTF::StringImpl::destroy(v35, v24);
    }
    else {
      *(_DWORD *)v35 -= 2;
    }
  }
  int v36 = v16[5];
  v16[5] = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, v24);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
  uint64_t v37 = v16[4];
  v16[4] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2) {
      WTF::StringImpl::destroy(v37, v24);
    }
    else {
      *(_DWORD *)v37 -= 2;
    }
  }
  int v38 = v16[3];
  v16[3] = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2) {
      WTF::StringImpl::destroy(v38, v24);
    }
    else {
      *(_DWORD *)v38 -= 2;
    }
  }
  uint64_t v39 = v16[2];
  v16[2] = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2) {
      WTF::StringImpl::destroy(v39, v24);
    }
    else {
      *(_DWORD *)v39 -= 2;
    }
  }
  uint64_t v40 = *v16;
  WTF::StringImpl *v16 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2) {
      WTF::StringImpl::destroy(v40, v24);
    }
    else {
      *(_DWORD *)v40 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

WebKit::CoreIPCDateComponents *std::optional<WebKit::CoreIPCDateComponents>::operator=[abi:sn180100]<NSDateComponents *,void>(WTF::StringImpl **this, NSDateComponents *a2)
{
  if (*((unsigned char *)this + 32))
  {
    WebKit::CoreIPCDateComponents::CoreIPCDateComponents((WebKit::CoreIPCDateComponents *)&v13, a2);
    id v4 = v13;
    int v13 = 0;
    uint64_t v5 = *this;
    *this = v4;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = v14;
    char v14 = 0;
    int v7 = this[1];
    this[1] = v6;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v3);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v8 = this[2];
    if (v8)
    {
      this[2] = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v8, v3);
    }
    uint64_t v9 = v14;
    this[2] = v15;
    uint64_t v10 = v16;
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    this[3] = v10;
    char v14 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v3);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t v11 = v13;
    int v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v3);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  else
  {
    WebKit::CoreIPCDateComponents::CoreIPCDateComponents((WebKit::CoreIPCDateComponents *)this, a2);
    *((unsigned char *)this + 32) = 1;
  }
  return (WebKit::CoreIPCDateComponents *)this;
}

void sub_199492F18(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF *a11, int a12)
{
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCCNContact::toID(WebKit::CoreIPCCNContact *this@<X0>, void *a2@<X8>)
{
  id v4 = objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB6300])());
  if (*(void *)this) {
    uint64_t v5 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v5 = &stru_1EEA10550;
  }
  uint64_t v6 = (void *)[v4 initWithIdentifier:v5];
  [v6 setContactType:*((void *)this + 1)];
  if (*((void *)this + 2)) {
    [v6 setNamePrefix:WTF::StringImpl::operator NSString *()];
  }
  if (*((void *)this + 3)) {
    [v6 setGivenName:WTF::StringImpl::operator NSString *()];
  }
  if (*((void *)this + 4)) {
    [v6 setMiddleName:WTF::StringImpl::operator NSString *()];
  }
  if (*((void *)this + 5)) {
    [v6 setFamilyName:WTF::StringImpl::operator NSString *()];
  }
  if (*((void *)this + 6)) {
    [v6 setPreviousFamilyName:WTF::StringImpl::operator NSString *()];
  }
  if (*((void *)this + 7)) {
    [v6 setNameSuffix:WTF::StringImpl::operator NSString *()];
  }
  if (*((void *)this + 8)) {
    [v6 setNickname:WTF::StringImpl::operator NSString *()];
  }
  if (*((void *)this + 9)) {
    [v6 setOrganizationName:WTF::StringImpl::operator NSString *()];
  }
  if (*((void *)this + 10)) {
    [v6 setDepartmentName:WTF::StringImpl::operator NSString *()];
  }
  if (*((void *)this + 11)) {
    [v6 setJobTitle:WTF::StringImpl::operator NSString *()];
  }
  if (*((void *)this + 12)) {
    [v6 setPhoneticGivenName:WTF::StringImpl::operator NSString *()];
  }
  if (*((void *)this + 13)) {
    [v6 setPhoneticMiddleName:WTF::StringImpl::operator NSString *()];
  }
  if (*((void *)this + 14)) {
    [v6 setPhoneticFamilyName:WTF::StringImpl::operator NSString *()];
  }
  if (*((void *)this + 15)) {
    [v6 setPhoneticOrganizationName:WTF::StringImpl::operator NSString *()];
  }
  if (*((void *)this + 16)) {
    [v6 setNote:WTF::StringImpl::operator NSString *()];
  }
  if (*((unsigned char *)this + 168))
  {
    WebKit::CoreIPCDateComponents::toID((WebKit::CoreIPCCNContact *)((char *)this + 136), &cf);
    [v6 setBirthday:cf];
    CFTypeRef v7 = cf;
    CFTypeRef cf = 0;
    if (v7) {
      CFRelease(v7);
    }
  }
  if (*((unsigned char *)this + 208))
  {
    WebKit::CoreIPCDateComponents::toID((WebKit::CoreIPCCNContact *)((char *)this + 176), &cf);
    [v6 setNonGregorianBirthday:cf];
    CFTypeRef v8 = cf;
    CFTypeRef cf = 0;
    if (v8) {
      CFRelease(v8);
    }
  }
  if (*((_DWORD *)this + 57))
  {
    WebKit::nsArrayFromVectorOfLabeledValues(&cf, (uint64_t *)this + 27);
    CFTypeRef v9 = cf;
    [v6 setDates:cf];
    if (v9) {
      CFRelease(v9);
    }
  }
  if (*((_DWORD *)this + 61))
  {
    WebKit::nsArrayFromVectorOfLabeledValues(&cf, (uint64_t *)this + 29);
    CFTypeRef v10 = cf;
    [v6 setPhoneNumbers:cf];
    if (v10) {
      CFRelease(v10);
    }
  }
  if (*((_DWORD *)this + 65))
  {
    WebKit::nsArrayFromVectorOfLabeledValues(&cf, (uint64_t *)this + 31);
    CFTypeRef v11 = cf;
    [v6 setEmailAddresses:cf];
    if (v11) {
      CFRelease(v11);
    }
  }
  if (*((_DWORD *)this + 69))
  {
    WebKit::nsArrayFromVectorOfLabeledValues(&cf, (uint64_t *)this + 33);
    CFTypeRef v12 = cf;
    [v6 setPostalAddresses:cf];
    if (v12) {
      CFRelease(v12);
    }
  }
  if (*((_DWORD *)this + 73))
  {
    WebKit::nsArrayFromVectorOfLabeledValues(&cf, (uint64_t *)this + 35);
    CFTypeRef v13 = cf;
    [v6 setUrlAddresses:cf];
    if (v13) {
      CFRelease(v13);
    }
  }
  *a2 = v6;
}

void sub_1994932CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::nsArrayFromVectorOfLabeledValues(void *a1, uint64_t *a2)
{
  id v4 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)a2 + 3)];
  uint64_t v5 = *((unsigned int *)a2 + 3);
  if (v5)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = 96 * v5;
    CFTypeRef v8 = (uint64_t (**)(void *))MEMORY[0x1E4FB62C0];
    while (1)
    {
      uint64_t v9 = *(unsigned int *)(v6 + 88);
      if (v9 == -1) {
        break;
      }
      int v18 = &v16;
      CFTypeRef v10 = ((void *(*)(CFTypeRef *__return_ptr, char **, uint64_t))off_1EEA0FAC8[v9])(&cf, &v18, v6 + 16);
      id v11 = objc_alloc((Class)(*v8)(v10));
      if (*(void *)v6) {
        CFTypeRef v12 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        CFTypeRef v12 = &stru_1EEA10550;
      }
      if (*(void *)(v6 + 8)) {
        CFTypeRef v13 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        CFTypeRef v13 = &stru_1EEA10550;
      }
      char v14 = (const void *)[v11 initWithIdentifier:v12 label:v13 value:cf];
      CFTypeRef v15 = cf;
      CFTypeRef cf = 0;
      if (v15) {
        CFRelease(v15);
      }
      if (v14)
      {
        [v4 addObject:v14];
        CFRelease(v14);
      }
      v6 += 96;
      v7 -= 96;
      if (!v7) {
        goto LABEL_16;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
  else
  {
LABEL_16:
    *a1 = v4;
  }
}

void sub_199493498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  CFRelease(v12);
  if (v11) {
    CFRelease(v11);
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit21CoreIPCDateComponentsENS8_20CoreIPCCNPhoneNumberENS8_22CoreIPCCNPostalAddressENS8_13CoreIPCStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (WTF *)a2[2];
  if (v3)
  {
    a2[2] = 0;
    *((_DWORD *)a2 + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  id v4 = (WTF::StringImpl *)a2[1];
  a2[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t result = (WTF::StringImpl *)*a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit21CoreIPCDateComponentsENS8_20CoreIPCCNPhoneNumberENS8_22CoreIPCCNPostalAddressENS8_13CoreIPCStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit21CoreIPCDateComponentsENS8_20CoreIPCCNPhoneNumberENS8_22CoreIPCCNPostalAddressENS8_13CoreIPCStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(int a1, WebKit::CoreIPCCNPostalAddress *this)
{
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit21CoreIPCDateComponentsENS8_20CoreIPCCNPhoneNumberENS8_22CoreIPCCNPostalAddressENS8_13CoreIPCStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *std::__variant_detail::__alt<2ul,WebKit::CoreIPCCNPostalAddress>::__alt[abi:sn180100]<WebKit::CoreIPCCNPostalAddress>(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  WTF::StringImpl *result = v2;
  uint64_t v3 = a2[1];
  a2[1] = 0;
  result[1] = v3;
  uint64_t v4 = a2[2];
  a2[2] = 0;
  result[2] = v4;
  uint64_t v5 = a2[3];
  a2[3] = 0;
  result[3] = v5;
  uint64_t v6 = a2[4];
  a2[4] = 0;
  result[4] = v6;
  uint64_t v7 = a2[5];
  a2[5] = 0;
  result[5] = v7;
  uint64_t v8 = a2[6];
  a2[6] = 0;
  result[6] = v8;
  uint64_t v9 = a2[7];
  a2[7] = 0;
  result[7] = v9;
  uint64_t v10 = a2[8];
  a2[8] = 0;
  result[8] = v10;
  return result;
}

void WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress(WebKit::CoreIPCCNPostalAddress *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, a2);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, a2);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  id v11 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, a2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
}

uint64_t std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(WTF **)(a1 + 16);
    if (v3)
    {
      *(void *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v3, a2);
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::RetainPtr<objc_object *> WebKit::nsArrayFromVectorOfLabeledValues(WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()<WebKit::CoreIPCContactLabeledValue const> const(WebKit::CoreIPCContactLabeledValue const &)::{lambda(WebKit::CoreIPCContactLabeledValue const &)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString> const&>@<X0>(WebKit::CoreIPCDateComponents *this@<X1>, void *a2@<X8>)
{
  return WebKit::CoreIPCDateComponents::toID(this, a2);
}

CFTypeRef std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::RetainPtr<objc_object *> WebKit::nsArrayFromVectorOfLabeledValues(WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()<WebKit::CoreIPCContactLabeledValue const> const(WebKit::CoreIPCContactLabeledValue const &)::{lambda(WebKit::CoreIPCContactLabeledValue const &)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString> const&>@<X0>(WebKit::CoreIPCCNPhoneNumber *this@<X1>, void *a2@<X8>)
{
  return WebKit::CoreIPCCNPhoneNumber::toID(this, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::RetainPtr<objc_object *> WebKit::nsArrayFromVectorOfLabeledValues(WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()<WebKit::CoreIPCContactLabeledValue const> const(WebKit::CoreIPCContactLabeledValue const &)::{lambda(WebKit::CoreIPCContactLabeledValue const &)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString> const&>@<X0>(WebKit::CoreIPCCNPostalAddress *this@<X1>, void *a2@<X8>)
{
  return WebKit::CoreIPCCNPostalAddress::toID(this, a2);
}

__CFString *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::RetainPtr<objc_object *> WebKit::nsArrayFromVectorOfLabeledValues(WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()<WebKit::CoreIPCContactLabeledValue const> const(WebKit::CoreIPCContactLabeledValue const &)::{lambda(WebKit::CoreIPCContactLabeledValue const &)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString> const&>@<X0>(WebKit::CoreIPCString *this@<X1>, __CFString **a2@<X8>)
{
  return WebKit::CoreIPCString::toID(this, a2);
}

uint64_t WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::CoreIPCContactLabeledValue>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 96 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::CoreIPCContactLabeledValue>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    uint64_t v9 = v2;
    uint64_t v10 = v3;
    uint64_t v5 = result;
    do
    {
      uint64_t v6 = *((unsigned int *)v5 + 22);
      if (v6 != -1) {
        ((void (*)(char *, char *))off_1EEA0FAA8[v6])(&v8, (char *)v5 + 16);
      }
      *((_DWORD *)v5 + 22) = -1;
      uint64_t v7 = (WTF::StringImpl *)*((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, a2);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
      uint64_t result = *(WTF::StringImpl **)v5;
      *(void *)uint64_t v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v5 = (WTF::StringImpl *)((char *)v5 + 96);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCContactLabeledValue>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (uint64_t *)WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = (void *)(*(void *)a1 + 96 * *(unsigned int *)(a1 + 12));
  uint64_t v5 = *v3;
  uint64_t *v3 = 0;
  *uint64_t v4 = v5;
  uint64_t v6 = v3[1];
  v3[1] = 0;
  v4[1] = v6;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v4 + 2), (uint64_t)(v3 + 2));
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

void sub_199493A24(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v5 = *v3;
  uint64_t *v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *v2;
  const void *v2 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 72) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_199493AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 72);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1EEA0FAA8[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 72) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 72);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EEA0FAA8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 72) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 72);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EEA0FAE8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 72) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit21CoreIPCDateComponentsENS8_20CoreIPCCNPhoneNumberENS8_22CoreIPCCNPostalAddressENS8_13CoreIPCStringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  uint64_t v4 = a3[1];
  a3[1] = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = v4;
  uint64_t v5 = a3[2];
  a3[2] = 0;
  *(void *)(a2 + 16) = v5;
  LODWORD(v5) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = 0;
  *(_DWORD *)(a2 + 24) = v5;
  LODWORD(v5) = *((_DWORD *)a3 + 7);
  *((_DWORD *)a3 + 7) = 0;
  *(_DWORD *)(a2 + 28) = v5;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit21CoreIPCDateComponentsENS8_20CoreIPCCNPhoneNumberENS8_22CoreIPCCNPostalAddressENS8_13CoreIPCStringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  uint64_t v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit21CoreIPCDateComponentsENS8_20CoreIPCCNPhoneNumberENS8_22CoreIPCCNPostalAddressENS8_13CoreIPCStringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<2ul,WebKit::CoreIPCCNPostalAddress>::__alt[abi:sn180100]<WebKit::CoreIPCCNPostalAddress>(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit21CoreIPCDateComponentsENS8_20CoreIPCCNPhoneNumberENS8_22CoreIPCCNPostalAddressENS8_13CoreIPCStringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

unint64_t WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 96 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0x2AAAAAB)
  {
    uint64_t v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    uint64_t v4 = (WTF::StringImpl **)(*(void *)result + 96 * *(unsigned int *)(result + 12));
    int v5 = 96 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(96 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFE0) / 0x60;
    *(void *)uint64_t v2 = v6;
    WTF::VectorMover<false,WebKit::CoreIPCContactLabeledValue>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::CoreIPCContactLabeledValue>::move(WTF::StringImpl *result, WTF::StringImpl **a2, uint64_t a3)
{
  if (result != (WTF::StringImpl *)a2)
  {
    uint64_t v4 = a3 + 16;
    uint64_t v5 = (uint64_t)result + 16;
    do
    {
      unint64_t v7 = (WTF::StringImpl **)(v5 - 16);
      uint64_t v6 = *(void *)(v5 - 16);
      *(void *)(v5 - 16) = 0;
      *(void *)(v4 - 16) = v6;
      uint64_t v8 = *(void *)(v5 - 8);
      *(void *)(v5 - 8) = 0;
      *(void *)(v4 - 8) = v8;
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor(v4, v5);
      uint64_t v10 = *(unsigned int *)(v5 + 72);
      if (v10 != -1) {
        ((void (*)(char *, uint64_t))off_1EEA0FAA8[v10])(&v12, v5);
      }
      *(_DWORD *)(v5 + 72) = -1;
      id v11 = *(WTF::StringImpl **)(v5 - 8);
      *(void *)(v5 - 8) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v9);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      uint64_t result = *v7;
      *unint64_t v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v4 += 96;
      v5 += 96;
    }
    while (v7 + 12 != a2);
  }
  return result;
}

void sub_199493E48(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *(WTF::StringImpl **)(v2 - 8);
  *(void *)(v2 - 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(WTF::StringImpl **)(v2 - 16);
  *(void *)(v2 - 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCCVPixelBufferRef::toCF(mach_port_t *this@<X0>, void *a2@<X8>)
{
  mach_port_t v3 = *this;
  if (v3 && (IOSurfaceRef v4 = IOSurfaceLookupFromMachPort(v3)) != 0)
  {
    IOSurfaceRef v5 = v4;
    uint64_t v9 = 0;
    int v6 = ((uint64_t (*)(void, IOSurfaceRef, void, uint64_t *))*MEMORY[0x1E4FB6520])(*MEMORY[0x1E4F1CF80], v4, 0, &v9);
    uint64_t v7 = v9;
    if (v6) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = v9 == 0;
    }
    if (v8)
    {
      *a2 = 0;
      CFRelease(v5);
    }
    else
    {
      CFRelease(v5);
      *a2 = v7;
    }
  }
  else
  {
    *a2 = 0;
  }
}

void sub_199493F40(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

WebKit::CoreIPCDateComponents *WebKit::CoreIPCDateComponents::CoreIPCDateComponents(WebKit::CoreIPCDateComponents *this, NSDateComponents *a2)
{
  *((_OWORD *)this + 1) = 0u;
  IOSurfaceRef v4 = (void *)((char *)this + 16);
  *(_OWORD *)this = 0u;
  if ([(NSDateComponents *)a2 calendar])
  {
    MEMORY[0x19972EAD0](&v21, [(NSCalendar *)[(NSDateComponents *)a2 calendar] calendarIdentifier]);
    int v6 = v21;
    char v21 = 0;
    uint64_t v7 = *(WTF::StringImpl **)this;
    *(void *)this = v6;
    if (v7)
    {
      int v8 = *(_DWORD *)v7 - 2;
      if (*(_DWORD *)v7 != 2)
      {
LABEL_6:
        *(_DWORD *)uint64_t v7 = v8;
        goto LABEL_7;
      }
      WTF::StringImpl::destroy(v7, v5);
      uint64_t v7 = v21;
      char v21 = 0;
      if (v7)
      {
        int v8 = *(_DWORD *)v7 - 2;
        if (*(_DWORD *)v7 == 2)
        {
          WTF::StringImpl::destroy(v7, v9);
          goto LABEL_7;
        }
        goto LABEL_6;
      }
    }
  }
LABEL_7:
  if (![(NSDateComponents *)a2 timeZone]) {
    goto LABEL_13;
  }
  MEMORY[0x19972EAD0](&v21, [(NSTimeZone *)[(NSDateComponents *)a2 timeZone] name]);
  id v11 = v21;
  char v21 = 0;
  char v12 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = v11;
  if (!v12) {
    goto LABEL_13;
  }
  int v13 = *(_DWORD *)v12 - 2;
  if (*(_DWORD *)v12 != 2)
  {
LABEL_12:
    *(_DWORD *)char v12 = v13;
    goto LABEL_13;
  }
  WTF::StringImpl::destroy(v12, v10);
  char v12 = v21;
  char v21 = 0;
  if (v12)
  {
    int v13 = *(_DWORD *)v12 - 2;
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v14);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v15 = WTF::fastMalloc((WTF *)0x70);
  uint64_t v16 = 0;
  *((_DWORD *)this + 6) = 14;
  *((void *)this + 2) = v15;
  do
  {
    uint64_t v17 = [(NSDateComponents *)a2 valueForComponent:WebKit::calendarUnitForComponentIndex[v16]];
    char v21 = v17;
    uint64_t v18 = *((unsigned int *)this + 7);
    if (v18 == *((_DWORD *)this + 6))
    {
      unsigned __int16 v19 = (void *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v18 + 1, (unint64_t)&v21);
      uint64_t v18 = *((unsigned int *)this + 7);
      *(void *)(*((void *)this + 2) + 8 * v18) = *v19;
    }
    else
    {
      *(void *)(*v4 + 8 * v18) = v17;
    }
    *((_DWORD *)this + 7) = v18 + 1;
    ++v16;
  }
  while (v16 != 14);
  return this;
}

void sub_1994940F8(_Unwind_Exception *exception_object, void *a2)
{
  IOSurfaceRef v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 16) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    WTF::fastFree(v5, a2);
  }
  int v6 = *(WTF::StringImpl **)(v2 + 8);
  *(void *)(v2 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = *(WTF::StringImpl **)v2;
  *(void *)uint64_t v2 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WebKit::CoreIPCDateComponents::toID@<X0>(WebKit::CoreIPCDateComponents *this@<X0>, void *a2@<X8>)
{
  uint64_t result = (_DWORD *)objc_opt_new();
  IOSurfaceRef v5 = result;
  for (unint64_t i = 0; i != 14; ++i)
  {
    if (i >= *((unsigned int *)this + 7))
    {
      __break(0xC471u);
      return result;
    }
    uint64_t result = (_DWORD *)[v5 setValue:*(void *)(*((void *)this + 2) + 8 * i) forComponent:WebKit::calendarUnitForComponentIndex[i]];
  }
  if (*(void *)this && *(_DWORD *)(*(void *)this + 4)) {
    objc_msgSend(v5, "setCalendar:", objc_msgSend(MEMORY[0x1E4F1C9A8], "calendarWithIdentifier:", WTF::StringImpl::operator NSString *()));
  }
  uint64_t result = (_DWORD *)*((void *)this + 1);
  if (result)
  {
    if (result[1]) {
      uint64_t result = (_DWORD *)objc_msgSend(v5, "setTimeZone:", objc_msgSend(MEMORY[0x1E4F1CAF0], "timeZoneWithName:", WTF::StringImpl::operator NSString *()));
    }
  }
  *a2 = v5;
  return result;
}

void sub_19949425C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

NSUInteger WebKit::CoreIPCDictionary::CoreIPCDictionary(WebKit::CoreIPCDictionary *this, NSDictionary *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  NSUInteger result = [(NSDictionary *)a2 count];
  int v5 = result;
  if (result)
  {
    if (result >> 28)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v6 = WTF::fastMalloc((WTF *)(16 * result));
    *((_DWORD *)this + 2) = v5;
    *(void *)this = v6;
  }
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  NSUInteger v7 = [(NSDictionary *)a2 countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v29 != v8) {
          objc_enumerationMutation(a2);
        }
        uint64_t v10 = *(objc_object **)(*((void *)&v28 + 1) + 8 * i);
        id v11 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", v10, v24);
        if (IPC::isSerializableValue((IPC *)v10, v12)
          && (IPC::isSerializableValue((IPC *)v11, v13) & 1) != 0)
        {
          WebKit::CoreIPCNSCFObject::CoreIPCNSCFObject((WebKit::CoreIPCNSCFObject *)&v25, v10);
          WebKit::CoreIPCNSCFObject::CoreIPCNSCFObject((WebKit::CoreIPCNSCFObject *)&v24, v11);
          uint64_t v15 = v24;
          uint64_t v14 = v25;
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          uint64_t v26 = v14;
          uint64_t v27 = v15;
          uint64_t v16 = *((unsigned int *)this + 3);
          if (v16 == *((_DWORD *)this + 2))
          {
            WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>((uint64_t)this, (unint64_t)&v26);
          }
          else
          {
            int v17 = v16 + 1;
            uint64_t v18 = (uint64_t *)(*(void *)this + 16 * v16);
            uint64_t v26 = 0;
            *uint64_t v18 = v14;
            uint64_t v19 = v27;
            uint64_t v27 = 0;
            v18[1] = v19;
            *((_DWORD *)this + 3) = v17;
          }
          uint64_t v20 = v27;
          uint64_t v27 = 0;
          if (v20) {
            std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&v27, v20);
          }
          uint64_t v21 = v26;
          uint64_t v26 = 0;
          if (v21) {
            std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&v26, v21);
          }
          uint64_t v22 = v24;
          uint64_t v24 = 0;
          if (v22) {
            std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&v24, v22);
          }
          uint64_t v23 = v25;
          uint64_t v25 = 0;
          if (v23) {
            std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&v25, v23);
          }
        }
      }
      NSUInteger v7 = [(NSDictionary *)a2 countByEnumeratingWithState:&v28 objects:v32 count:16];
    }
    while (v7);
  }
  return (NSUInteger)this;
}

void sub_199494488(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCDictionary::toID(uint64_t *__return_ptr a1@<X8>, WebKit::CoreIPCDictionary *this@<X0>)
{
  int v5 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:*((unsigned int *)this + 3)];
  uint64_t v6 = *((unsigned int *)this + 3);
  if (v6)
  {
    uint64_t v7 = *(void *)this;
    uint64_t v8 = 16 * v6;
    do
    {
      WebKit::CoreIPCNSCFObject::toID((WebKit::CoreIPCNSCFObject **)&v14, (WebKit::CoreIPCNSCFObject *)(v7 + 8), v4);
      CFTypeRef v9 = v14;
      WebKit::CoreIPCNSCFObject::toID((WebKit::CoreIPCNSCFObject **)&cf, (WebKit::CoreIPCNSCFObject *)v7, v10);
      [v5 setObject:v9 forKey:cf];
      CFTypeRef v11 = cf;
      CFTypeRef cf = 0;
      if (v11) {
        CFRelease(v11);
      }
      CFTypeRef v12 = v14;
      CFTypeRef v14 = 0;
      if (v12) {
        CFRelease(v12);
      }
      v7 += 16;
      v8 -= 16;
    }
    while (v8);
  }
  *a1 = (uint64_t)v5;
}

void sub_1994945D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, CFTypeRef a10)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a10) {
    CFRelease(a10);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>::destruct(*(void *)a1, (uint64_t *)(*(void *)a1 + 16 * v3));
  }
  IOSurfaceRef v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>::destruct(uint64_t result, uint64_t *a2)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v3 = (uint64_t *)(result + 8);
    do
    {
      uint64_t v4 = *v3;
      uint64_t *v3 = 0;
      int v5 = v3 - 1;
      if (v4) {
        NSUInteger result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)v3, v4);
      }
      uint64_t v6 = *v5;
      uint64_t *v5 = 0;
      if (v6) {
        NSUInteger result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)(v3 - 1), v6);
      }
      uint64_t v7 = v3 + 1;
      v3 += 2;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  int v5 = v4 + 1;
  uint64_t v6 = (void *)(*(void *)a1 + 16 * v4);
  uint64_t v7 = *v3;
  uint64_t *v3 = 0;
  *uint64_t v6 = v7;
  uint64_t v8 = v3[1];
  v3[1] = 0;
  v6[1] = v8;
  *(_DWORD *)(a1 + 12) = v5;
  return 1;
}

unint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x199494868);
    }
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = (void *)(*(void *)a1 + 16 * *(unsigned int *)(a1 + 12));
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>::move(uint64_t result, void *a2, void *a3)
{
  if ((void *)result != a2)
  {
    uint64_t v5 = (uint64_t *)(result + 8);
    do
    {
      unint64_t v7 = v5 - 1;
      uint64_t v6 = *(v5 - 1);
      *(v5 - 1) = 0;
      *a3 = v6;
      uint64_t v8 = *v5;
      uint64_t *v5 = 0;
      a3[1] = v8;
      uint64_t v9 = *v5;
      uint64_t *v5 = 0;
      if (v9) {
        NSUInteger result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)v5, v9);
      }
      uint64_t v10 = *v7;
      *unint64_t v7 = 0;
      if (v10) {
        NSUInteger result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)(v5 - 1), v10);
      }
      CFTypeRef v11 = v5 + 1;
      v5 += 2;
      a3 += 2;
    }
    while (v11 != a2);
  }
  return result;
}

uint64_t WebKit::CoreIPCError::hasValidUserInfo(id *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v1 = *a1;
  uint64_t v2 = [*a1 objectForKey:@"NSErrorClientCertificateChainKey"];
  if (v2)
  {
    uint64_t v6 = (void *)v2;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      return 0;
    }
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    uint64_t v7 = [v6 countByEnumeratingWithState:&v23 objects:v28 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v24;
LABEL_9:
      uint64_t v10 = 0;
      while (1)
      {
        if (*(void *)v24 != v9) {
          objc_enumerationMutation(v6);
        }
        CFTypeID v11 = CFGetTypeID(*(CFTypeRef *)(*((void *)&v23 + 1) + 8 * v10));
        if (v11 != SecCertificateGetTypeID()) {
          return 0;
        }
        if (v8 == ++v10)
        {
          uint64_t v8 = [v6 countByEnumeratingWithState:&v23 objects:v28 count:16];
          if (v8) {
            goto LABEL_9;
          }
          break;
        }
      }
    }
  }
  unint64_t v3 = (void *)[v1 objectForKey:@"NSErrorPeerCertificateChainKey"];
  if (v3
    && (CFTypeRef v12 = v3,
        long long v21 = 0u,
        long long v22 = 0u,
        long long v19 = 0u,
        long long v20 = 0u,
        (uint64_t v13 = [v3 countByEnumeratingWithState:&v19 objects:v27 count:16]) != 0))
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v20;
LABEL_18:
    uint64_t v16 = 0;
    while (1)
    {
      if (*(void *)v20 != v15) {
        objc_enumerationMutation(v12);
      }
      CFTypeID v17 = CFGetTypeID(*(CFTypeRef *)(*((void *)&v19 + 1) + 8 * v16));
      if (v17 != SecCertificateGetTypeID()) {
        break;
      }
      if (v14 == ++v16)
      {
        uint64_t v14 = [v12 countByEnumeratingWithState:&v19 objects:v27 count:16];
        if (v14) {
          goto LABEL_18;
        }
        goto LABEL_3;
      }
    }
  }
  else
  {
LABEL_3:
    uint64_t v4 = (const void *)[v1 objectForKey:*MEMORY[0x1E4F289B8]];
    if (!v4 || (CFTypeID v18 = CFGetTypeID(v4), v18 == SecTrustGetTypeID()))
    {
      if (![v1 objectForKey:*MEMORY[0x1E4F28A50]]) {
        return 1;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        return 1;
      }
    }
  }
  return 0;
}

void WebKit::CoreIPCError::toID(WebKit::CoreIPCError *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (WebKit::CoreIPCError *)*((void *)this + 3);
  if (v4)
  {
    WebKit::CoreIPCError::toID((uint64_t *)&v12, v4);
    uint64_t v7 = v12;
    if (v12)
    {
      CFIndex Count = CFDictionaryGetCount(*((CFDictionaryRef *)this + 2));
      MutableCopCGFloat y = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count + 1, *((CFDictionaryRef *)this + 2));
      CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F28A50], v7);
      id v10 = objc_alloc(MEMORY[0x1E4F28C58]);
      if (*(void *)this) {
        CFTypeID v11 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        CFTypeID v11 = &stru_1EEA10550;
      }
      *a2 = [v10 initWithDomain:v11 code:*((void *)this + 1) userInfo:MutableCopy];
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
      CFRelease(v7);
    }
    else
    {
      *a2 = 0;
    }
  }
  else
  {
    id v5 = objc_alloc(MEMORY[0x1E4F28C58]);
    if (*(void *)this) {
      uint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      uint64_t v6 = &stru_1EEA10550;
    }
    *a2 = [v5 initWithDomain:v6 code:*((void *)this + 1) userInfo:*((void *)this + 2)];
  }
}

void sub_199494C7C(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::CoreIPCError::isSafeToEncodeUserInfo(WebKit::CoreIPCError *this, objc_object *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 1;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 1;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 1;
  }
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (!this || (isKindOfClass & 1) == 0)
  {
    objc_opt_class();
    unsigned int v6 = (this != 0) & objc_opt_isKindOfClass();
    if (v6 == 1)
    {
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      CFTypeRef v12 = (void *)[(WebKit::CoreIPCError *)this objectEnumerator];
      uint64_t v13 = [v12 countByEnumeratingWithState:&v18 objects:v26 count:16];
      if (v13)
      {
        uint64_t v15 = v13;
        uint64_t v16 = *(void *)v19;
        while (2)
        {
          for (uint64_t i = 0; i != v15; ++i)
          {
            if (*(void *)v19 != v16) {
              objc_enumerationMutation(v12);
            }
            if (!WebKit::CoreIPCError::isSafeToEncodeUserInfo(*(WebKit::CoreIPCError **)(*((void *)&v18 + 1) + 8 * i), v14))
            {
              int v5 = 0;
              return v6 & v5;
            }
          }
          uint64_t v15 = [v12 countByEnumeratingWithState:&v18 objects:v26 count:16];
          int v5 = 1;
          if (v15) {
            continue;
          }
          break;
        }
      }
      else
      {
        int v5 = 1;
      }
    }
    return v6 & v5;
  }
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v7 = [(WebKit::CoreIPCError *)this countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (!v7) {
    return 1;
  }
  uint64_t v9 = v7;
  uint64_t v10 = *(void *)v23;
LABEL_12:
  uint64_t v11 = 0;
  while (1)
  {
    if (*(void *)v23 != v10) {
      objc_enumerationMutation(this);
    }
    uint64_t result = WebKit::CoreIPCError::isSafeToEncodeUserInfo(*(WebKit::CoreIPCError **)(*((void *)&v22 + 1) + 8 * v11), v8);
    if (!result) {
      return result;
    }
    if (v9 == ++v11)
    {
      uint64_t v9 = [(WebKit::CoreIPCError *)this countByEnumeratingWithState:&v22 objects:v27 count:16];
      uint64_t result = 1;
      if (v9) {
        goto LABEL_12;
      }
      return result;
    }
  }
}

WebKit::CoreIPCError *WebKit::CoreIPCError::CoreIPCError(WebKit::CoreIPCError *this, NSError *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  MEMORY[0x19972EAD0](this, [(NSError *)a2 domain]);
  uint64_t v40 = this;
  NSInteger v4 = [(NSError *)a2 code];
  *((void *)this + 2) = 0;
  int v5 = (char *)this + 16;
  *((void *)v5 - 1) = v4;
  *((void *)v5 + 1) = 0;
  unsigned int v6 = [(NSError *)a2 userInfo];
  CFIndex v7 = [(NSDictionary *)v6 count];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v7, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v9 = Mutable;
  v51[0] = MEMORY[0x1E4F143A8];
  v51[1] = 3321888768;
  v51[2] = ___ZN6WebKit12CoreIPCErrorC2EP7NSError_block_invoke;
  v51[3] = &__block_descriptor_48_e8_40c39_ZTSN3WTF9RetainPtrIP14__CFDictionaryEE_e15_v32__0_8_16_B24l;
  v51[4] = v40;
  CFTypeRef cf = Mutable;
  if (Mutable) {
    CFRetain(Mutable);
  }
  [(NSDictionary *)v6 enumerateKeysAndObjectsUsingBlock:v51];
  id v10 = [(NSDictionary *)v6 objectForKey:@"NSErrorClientCertificateChainKey"];
  if (v10)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      long long v22 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v10, "count"));
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      uint64_t v23 = [v10 countByEnumeratingWithState:&v47 objects:v54 count:16];
      if (v23)
      {
        uint64_t v24 = *(void *)v48;
        do
        {
          uint64_t v25 = 0;
          do
          {
            if (*(void *)v48 != v24) {
              objc_enumerationMutation(v10);
            }
            long long v26 = *(void **)(*((void *)&v47 + 1) + 8 * v25);
            CFTypeID v27 = CFGetTypeID(v26);
            if (v27 == SecIdentityGetTypeID() || (CFTypeID v31 = CFGetTypeID(v26), v31 == SecCertificateGetTypeID()))
            {
              CFTypeID v28 = CFGetTypeID(v26);
              if (v28 == SecIdentityGetTypeID())
              {
                SecCertificateRef certificateRef = 0;
                OSStatus v29 = SecIdentityCopyCertificate((SecIdentityRef)v26, &certificateRef);
                SecCertificateRef v30 = certificateRef;
                if (v29) {
                  long long v22 = 0;
                }
                else {
                  [v22 addObject:certificateRef];
                }
                if (v30) {
                  CFRelease(v30);
                }
                if (v29) {
                  goto LABEL_40;
                }
              }
              else
              {
                [v22 addObject:v26];
              }
            }
            ++v25;
          }
          while (v23 != v25);
          uint64_t v32 = [v10 countByEnumeratingWithState:&v47 objects:v54 count:16];
          uint64_t v23 = v32;
        }
        while (v32);
      }
LABEL_40:
      CFDictionarySetValue(v9, @"NSErrorClientCertificateChainKey", v22);
    }
  }
  CFArrayRef v11 = [(NSDictionary *)v6 objectForKey:@"NSErrorPeerCertificateChainKey"];
  CFTypeRef v12 = (void *)MEMORY[0x1E4F289B8];
  if (!v11)
  {
    uint64_t v13 = [(NSDictionary *)v6 objectForKey:*MEMORY[0x1E4F289B8]];
    uint64_t v14 = v13;
    if (!v13) {
      goto LABEL_6;
    }
    CFTypeID v34 = CFGetTypeID(v13);
    if (v34 != SecTrustGetTypeID()) {
      goto LABEL_6;
    }
    CFArrayRef v35 = SecTrustCopyCertificateChain(v14);
    CFArrayRef v11 = v35;
    if (!v35) {
      goto LABEL_6;
    }
    CFAutorelease(v35);
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    uint64_t v36 = [(__CFArray *)v11 countByEnumeratingWithState:&v42 objects:v53 count:16];
    if (v36)
    {
      uint64_t v37 = *(void *)v43;
LABEL_49:
      uint64_t v38 = 0;
      while (1)
      {
        if (*(void *)v43 != v37) {
          objc_enumerationMutation(v11);
        }
        CFTypeID v39 = CFGetTypeID(*(CFTypeRef *)(*((void *)&v42 + 1) + 8 * v38));
        if (v39 != SecCertificateGetTypeID()) {
          break;
        }
        if (v36 == ++v38)
        {
          uint64_t v36 = [(__CFArray *)v11 countByEnumeratingWithState:&v42 objects:v53 count:16];
          if (v36) {
            goto LABEL_49;
          }
          goto LABEL_55;
        }
      }
    }
    else
    {
LABEL_55:
      CFDictionarySetValue(v9, @"NSErrorPeerCertificateChainKey", v11);
    }
  }
LABEL_6:
  uint64_t v15 = (const void *)*v12;
  id v16 = [(NSDictionary *)v6 objectForKey:*v12];
  CFTypeID v17 = v16;
  if (v16)
  {
    CFTypeID v33 = CFGetTypeID(v16);
    if (v33 == SecTrustGetTypeID()) {
      CFDictionarySetValue(v9, v15, v17);
    }
  }
  if (v9) {
    CFRetain(v9);
  }
  long long v18 = *(const void **)v5;
  *(void *)int v5 = v9;
  if (v18) {
    CFRelease(v18);
  }
  SecCertificateRef certificateRef = [(NSDictionary *)v6 objectForKey:*MEMORY[0x1E4F28A50]];
  if (certificateRef)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      std::make_unique[abi:sn180100]<WebKit::CoreIPCError,objc_object *&>((WebKit::CoreIPCError **)&v41, (NSError **)&certificateRef);
      long long v21 = v41;
      uint64_t v41 = 0;
      std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100]((WTF::StringImpl ***)v5 + 1, v21);
      std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100](&v41, 0);
    }
  }
  CFTypeRef v19 = cf;
  CFTypeRef cf = 0;
  if (v19) {
    CFRelease(v19);
  }
  if (v9) {
    CFRelease(v9);
  }
  return v40;
}

void sub_1994953C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl ***a10, WTF::StringImpl **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v36) {
    CFRelease(v36);
  }
  std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100](a10, 0);
  uint64_t v40 = *v37;
  *uint64_t v37 = 0;
  if (v40) {
    CFRelease(v40);
  }
  uint64_t v41 = *a11;
  *a11 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, v39);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void ___ZN6WebKit12CoreIPCErrorC2EP7NSError_block_invoke(uint64_t a1, void *a2, void *a3)
{
  if (![a2 isEqualToString:@"NSErrorClientCertificateChainKey"]
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    if (WebKit::CoreIPCError::isSafeToEncodeUserInfo((WebKit::CoreIPCError *)a3, v6))
    {
      CFIndex v7 = *(__CFDictionary **)(a1 + 40);
      CFDictionarySetValue(v7, a2, a3);
    }
  }
}

CFTypeRef __copy_helper_block_e8_40c39_ZTSN3WTF9RetainPtrIP14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSN3WTF9RetainPtrIP14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t std::make_unique[abi:sn180100]<WebKit::CoreIPCError,objc_object *&>(WebKit::CoreIPCError **a1, NSError **a2)
{
  NSInteger v4 = (WebKit::CoreIPCError *)WTF::fastMalloc((WTF *)0x20);
  uint64_t result = WebKit::CoreIPCError::CoreIPCError(v4, *a2);
  *a1 = v4;
  return result;
}

void sub_1994955C0(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCFont::toID(WebKit::CoreIPCFont *this@<X0>, void *a2@<X8>)
{
  WebKit::CoreIPCDictionary::toID((uint64_t *)&cf, this);
  NSInteger v4 = (const void *)WebKit::fontWithAttributes((WebKit *)cf, v3, 0.0);
  *a2 = v4;
  if (v4) {
    CFRetain(v4);
  }
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
}

void sub_199495634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (a2 == 1)
  {
    CFArrayRef v11 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v11);
    objc_end_catch();
    *id v10 = 0;
    JUMPOUT(0x199495620);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::CoreIPCLocale::isValidIdentifier(WebKit::CoreIPCLocale *this, const WTF::String *a2)
{
  unint64_t v3 = (void *)[MEMORY[0x1E4F1CA20] availableLocaleIdentifiers];
  if (*(void *)this) {
    NSInteger v4 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    NSInteger v4 = &stru_1EEA10550;
  }
  if ([v3 containsObject:v4]) {
    return 1;
  }
  WebKit::CoreIPCLocale::canonicalLocaleStringReplacement((WebKit::CoreIPCLocale *)&v9, this);
  BOOL v5 = v10 != 0;
  if (v10)
  {
    CFIndex v7 = v9;
    uint64_t v9 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return v5;
}

uint64_t WebKit::CoreIPCLocale::canonicalLocaleStringReplacement(WebKit::CoreIPCLocale *this, const WTF::String *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (_MergedGlobals_138 == 1)
  {
    unint64_t v3 = (void *)qword_1EB35A3E8;
  }
  else
  {
    uint64_t v13 = a2;
    unint64_t v3 = objc_opt_new();
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    CFIndex v7 = (void *)[MEMORY[0x1E4F1CA20] availableLocaleIdentifiers];
    uint64_t v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v15;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v15 != v9) {
            objc_enumerationMutation(v7);
          }
          uint64_t v11 = *(void *)(*((void *)&v14 + 1) + 8 * i);
          CFTypeRef v12 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CA20], "localeWithLocaleIdentifier:", v11), "localeIdentifier");
          if (([v12 isEqualToString:v11] & 1) == 0) {
            [v3 setObject:v11 forKey:v12];
          }
        }
        uint64_t v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v8);
    }
    qword_1EB35A3E8 = (uint64_t)v3;
    _MergedGlobals_138 = 1;
    a2 = v13;
  }
  if (*(void *)a2) {
    NSInteger v4 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    NSInteger v4 = &stru_1EEA10550;
  }
  uint64_t result = [v3 objectForKey:v4];
  if (result)
  {
    uint64_t result = MEMORY[0x19972EAD0](this);
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    *(unsigned char *)this = 0;
  }
  *((unsigned char *)this + 8) = v6;
  return result;
}

void sub_1994958F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebKit::CoreIPCLocale::CoreIPCLocale(uint64_t *a1, WTF::StringImpl **a2)
{
  MEMORY[0x19972EAD0](a1, objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CA20], "currentLocale"), "localeIdentifier"));
  NSInteger v4 = (void *)[MEMORY[0x1E4F1CA20] availableLocaleIdentifiers];
  if (*a2) {
    BOOL v5 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    BOOL v5 = &stru_1EEA10550;
  }
  if ([v4 containsObject:v5])
  {
    WTF::String::operator=(a1, a2);
  }
  else
  {
    WebKit::CoreIPCLocale::canonicalLocaleStringReplacement((WebKit::CoreIPCLocale *)&v9, (const WTF::String *)a2);
    if (v10)
    {
      WTF::String::operator=(a1, &v9);
      if (v10)
      {
        CFIndex v7 = v9;
        uint64_t v9 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2) {
            WTF::StringImpl::destroy(v7, v6);
          }
          else {
            *(_DWORD *)v7 -= 2;
          }
        }
      }
    }
  }
  return a1;
}

void sub_199495A00(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  CFTypeRef v12 = *v10;
  *char v10 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, a2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef WebKit::CoreIPCLocale::toID@<X0>(WebKit::CoreIPCLocale *this@<X0>, void *a2@<X8>)
{
  id v4 = objc_alloc(MEMORY[0x1E4F1CA20]);
  if (*(void *)this) {
    BOOL v5 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    BOOL v5 = &stru_1EEA10550;
  }
  CFTypeRef result = (CFTypeRef)[v4 initWithLocaleIdentifier:v5];
  *a2 = result;
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

uint64_t WebKit::CoreIPCNSCFObject::CoreIPCNSCFObject(WebKit::CoreIPCNSCFObject *this, objc_object *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    switch(IPC::typeFromObject((IPC *)a2, a2))
    {
      case 1u:
        WebCore::colorFromCocoaColor((uint64_t *)&v23, (WebCore *)a2, v3);
        WebCore::Color::Color();
        int v21 = 3;
        if (((unint64_t)v23 & 0x8000000000000) != 0)
        {
          CFTypeRef v12 = (unsigned int *)((unint64_t)v23 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v23 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, v11);
          }
        }
        break;
      case 2u:
        CFRetain(a2);
        unint64_t v19 = (unint64_t)a2;
        int v6 = 4;
        goto LABEL_27;
      case 3u:
        unint64_t v19 = MEMORY[0x19972B790](a2);
        int v6 = 5;
        goto LABEL_27;
      case 4u:
        WebKit::CoreIPCError::CoreIPCError((WebKit::CoreIPCError *)&v23, (NSError *)a2);
        unint64_t v19 = (unint64_t)v23;
        *(void *)long long v20 = *(void *)cf;
        long long v7 = *(_OWORD *)&cf[8];
        uint64_t v23 = 0;
        *(void *)&cf[8] = 0;
        *(void *)&cf[16] = 0;
        *(_OWORD *)&v20[8] = v7;
        int v21 = 7;
        std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100]((WTF::StringImpl ***)&cf[16], 0);
        uint64_t v9 = *(const void **)&cf[8];
        *(void *)&cf[8] = 0;
        if (v9) {
          CFRelease(v9);
        }
        char v10 = v23;
        uint64_t v23 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2) {
            WTF::StringImpl::destroy(v10, v8);
          }
          else {
            *(_DWORD *)v10 -= 2;
          }
        }
        break;
      case 5u:
        WebKit::CoreIPCDictionary::CoreIPCDictionary((WebKit::CoreIPCDictionary *)&v23, (NSDictionary *)a2);
        unint64_t v19 = (unint64_t)v23;
        uint64_t v14 = *(void *)cf;
        uint64_t v23 = 0;
        *(void *)CFTypeRef cf = 0;
        *(void *)long long v20 = v14;
        int v15 = 6;
        goto LABEL_24;
      case 6u:
        WebKit::CoreIPCDictionary::CoreIPCDictionary((WebKit::CoreIPCDictionary *)&v23, (NSDictionary *)objc_msgSend((id)-[objc_object fontDescriptor](a2, "fontDescriptor"), "fontAttributes"));
        unint64_t v19 = (unint64_t)v23;
        uint64_t v16 = *(void *)cf;
        uint64_t v23 = 0;
        *(void *)CFTypeRef cf = 0;
        *(void *)long long v20 = v16;
        int v15 = 8;
LABEL_24:
        int v21 = v15;
        WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v13);
        break;
      case 7u:
        MEMORY[0x19972EAD0](&v19, [(objc_object *)a2 localeIdentifier]);
        int v6 = 9;
        goto LABEL_27;
      case 8u:
        unint64_t v19 = WebKit::CoreIPCNumber::numberHolderForNumber((WebKit::CoreIPCNumber *)a2, (const __CFNumber *)v3);
        *(void *)long long v20 = v17;
        int v6 = 12;
        goto LABEL_27;
      case 9u:
        int v6 = 13;
        goto LABEL_27;
      case 0xAu:
        WebKit::CoreIPCSecureCoding::CoreIPCSecureCoding((WebKit::CoreIPCSecureCoding *)&v19, a2);
        int v6 = 14;
        goto LABEL_27;
      case 0xBu:
        MEMORY[0x19972EAD0](&v19, a2);
        int v6 = 15;
        goto LABEL_27;
      case 0xCu:
        MEMORY[0x19972E8A0](&v23, a2);
        unint64_t v19 = (unint64_t)v23;
        *(_OWORD *)long long v20 = *(_OWORD *)cf;
        *(_OWORD *)&v20[16] = *(_OWORD *)&cf[16];
        int v6 = 16;
        goto LABEL_27;
      case 0xDu:
        WebKit::CoreIPCNSValue::valueFromNSValue((WebKit::CoreIPCNSValue *)a2, (uint64_t)&v23);
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v20, (uint64_t)cf);
        int v21 = 11;
        if (*(_DWORD *)&cf[24] != -1) {
          ((void (*)(char *, unsigned char *))off_1EEA0FB38[*(unsigned int *)&cf[24]])(&v22, cf);
        }
        break;
      case 0xEu:
        WebKit::CoreIPCCFType::CoreIPCCFType((WebKit::CoreIPCCFType *)&v23, (IPC *)a2);
        unint64_t v19 = (unint64_t)v23;
        int v6 = 2;
LABEL_27:
        int v21 = v6;
        break;
      case 0xFu:
        uint64_t result = 75;
        __break(0xC471u);
        return result;
      default:
        WebKit::CoreIPCArray::CoreIPCArray((WebKit::CoreIPCArray *)&v23, (NSArray *)a2);
        unint64_t v19 = (unint64_t)v23;
        uint64_t v4 = *(void *)cf;
        uint64_t v23 = 0;
        *(void *)CFTypeRef cf = 0;
        *(void *)long long v20 = v4;
        int v21 = 1;
        WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v5);
        break;
    }
  }
  else
  {
    unint64_t v19 = 0;
    int v21 = 0;
  }
  WTF::makeUniqueRefWithoutFastMallocCheck<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>();
}

void sub_199495E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  if (a25 != -1) {
    ((void (*)(char *, uint64_t))off_1EEA0FB38[a25])(&a20, v25);
  }
  _Unwind_Resume(exception_object);
}

void WTF::makeUniqueRefWithoutFastMallocCheck<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>()
{
}

void sub_199495F78(_Unwind_Exception *a1)
{
  MEMORY[0x199740C10](v1, 0x10E2C408981D52ALL);
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCNSCFObject::toID(WebKit::CoreIPCNSCFObject **__return_ptr a1@<X8>, WebKit::CoreIPCNSCFObject *this@<X0>, const Color *a3@<X1>)
{
  *a1 = 0;
  uint64_t v4 = *(void *)this;
  int v5 = *(_DWORD *)(v4 + 40);
  if (v5 == -1) {
    uint64_t v6 = -1;
  }
  else {
    uint64_t v6 = *(unsigned int *)(v4 + 40);
  }
  switch(v6)
  {
    case 1:
      if (v5 != 1) {
        goto LABEL_45;
      }
      WebKit::CoreIPCArray::toID((WebKit::CoreIPCNSCFObject **)v4, &v9);
      goto LABEL_43;
    case 2:
      if (v5 != 2) {
        goto LABEL_45;
      }
      WebKit::CoreIPCCFType::toID((WebKit::CoreIPCCFType *)v4, (CFTypeRef *)&v9);
      goto LABEL_43;
    case 3:
      if (v5 != 3) {
        goto LABEL_45;
      }
      WebCore::cocoaColor((uint64_t *)&v9, (WebCore *)v4, a3);
      goto LABEL_43;
    case 4:
      if (v5 != 4) {
        goto LABEL_45;
      }
      uint64_t v8 = *(WebKit::CoreIPCNSCFObject **)v4;
      if (*(void *)v4) {
        goto LABEL_17;
      }
      goto LABEL_18;
    case 5:
      if (v5 != 5) {
        goto LABEL_45;
      }
      WebKit::CoreIPCDate::toID((CFAbsoluteTime *)v4, (CFDateRef *)&v9);
      goto LABEL_43;
    case 6:
      if (v5 != 6) {
        goto LABEL_45;
      }
      WebKit::CoreIPCDictionary::toID((uint64_t *)&v9, (WebKit::CoreIPCDictionary *)v4);
      goto LABEL_43;
    case 7:
      if (v5 != 7) {
        goto LABEL_45;
      }
      WebKit::CoreIPCError::toID((WebKit::CoreIPCError *)v4, &v9);
      goto LABEL_43;
    case 8:
      if (v5 != 8) {
        goto LABEL_45;
      }
      WebKit::CoreIPCFont::toID((WebKit::CoreIPCFont *)v4, &v9);
      goto LABEL_43;
    case 9:
      if (v5 != 9) {
        goto LABEL_45;
      }
      WebKit::CoreIPCLocale::toID((WebKit::CoreIPCLocale *)v4, &v9);
      goto LABEL_43;
    case 10:
      if (v5 != 10) {
        goto LABEL_45;
      }
      WebKit::CoreIPCNSShadow::toID((WebKit::CoreIPCNSShadow *)v4, &v9);
      goto LABEL_43;
    case 11:
      if (v5 != 11) {
        goto LABEL_45;
      }
      WebKit::CoreIPCNSValue::toID(v4, (uint64_t *)&v9);
      goto LABEL_43;
    case 12:
      if (v5 != 12) {
        goto LABEL_45;
      }
      WebKit::CoreIPCNumber::toID((WebKit::CoreIPCNumber *)v4, &v9);
      goto LABEL_43;
    case 13:
      if (v5 != 13) {
        goto LABEL_45;
      }
      WebKit::CoreIPCNull::toID(&v9);
      goto LABEL_43;
    case 14:
      if (v5 != 14) {
        goto LABEL_45;
      }
      uint64_t v8 = *(WebKit::CoreIPCNSCFObject **)v4;
      if (*(void *)v4) {
LABEL_17:
      }
        CFRetain(*(CFTypeRef *)v4);
      goto LABEL_18;
    case 15:
      if (v5 != 15) {
        goto LABEL_45;
      }
      WebKit::CoreIPCString::toID((WebKit::CoreIPCString *)v4, &v9);
LABEL_43:
      *a1 = (WebKit::CoreIPCNSCFObject *)v9;
      return;
    case 16:
      if (v5 != 16) {
        goto LABEL_45;
      }
      long long v7 = (WebKit::CoreIPCNSCFObject *)WTF::URL::operator NSURL *();
      uint64_t v8 = v7;
      if (v7) {
        CFRetain(v7);
      }
LABEL_18:
      *a1 = v8;
      break;
    default:
      if (v5)
      {
LABEL_45:
        std::__throw_bad_variant_access[abi:sn180100]();
        __break(1u);
        JUMPOUT(0x19949616CLL);
      }
      return;
  }
}

void IPC::ArgumentCoder<WTF::UniqueRef<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>,void>::decode(uint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>, __n128 a4@<Q0>)
{
  IPC::Decoder::decode<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>(a1, a2, (uint64_t)v5, a4);
  if (v5[48]) {
    WTF::makeUniqueRefWithoutFastMallocCheck<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>();
  }
  *a3 = 0;
  a3[8] = 0;
}

void sub_1994963C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, char a17)
{
  if (a17)
  {
    if (a15 != -1) {
      ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS6_13CoreIPCCFTypeENS6_12CoreIPCColorENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_17CoreIPCDictionaryENS6_12CoreIPCErrorENS6_11CoreIPCFontENS6_13CoreIPCLocaleENS6_15CoreIPCNSShadowENS6_14CoreIPCNSValueENS6_13CoreIPCNumberENS6_11CoreIPCNullENS6_19CoreIPCSecureCodingENS6_13CoreIPCStringENS6_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[a15])(&a9, &a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::decode<IPC::Decoder>(a1, a2, a3, a4);
  if (!*(unsigned char *)(a3 + 48))
  {
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v8 = a1[3];
    if (v8) {
      BOOL v9 = v7 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
}

void sub_199496474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 48))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 40);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS6_13CoreIPCCFTypeENS6_12CoreIPCColorENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_17CoreIPCDictionaryENS6_12CoreIPCErrorENS6_11CoreIPCFontENS6_13CoreIPCLocaleENS6_15CoreIPCNSShadowENS6_14CoreIPCNSValueENS6_13CoreIPCNumberENS6_11CoreIPCNullENS6_19CoreIPCSecureCodingENS6_13CoreIPCStringENS6_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 40) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_1994964F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 24);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1EEA0FB38[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 24) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EEA0FB38[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EEA0FB48[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_199496614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 40);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS6_13CoreIPCCFTypeENS6_12CoreIPCColorENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_17CoreIPCDictionaryENS6_12CoreIPCErrorENS6_11CoreIPCFontENS6_13CoreIPCLocaleENS6_15CoreIPCNSShadowENS6_14CoreIPCNSValueENS6_13CoreIPCNumberENS6_11CoreIPCNullENS6_19CoreIPCSecureCodingENS6_13CoreIPCStringENS6_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 40);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS6_13CoreIPCCFTypeENS6_12CoreIPCColorENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_17CoreIPCDictionaryENS6_12CoreIPCErrorENS6_11CoreIPCFontENS6_13CoreIPCLocaleENS6_15CoreIPCNSShadowENS6_14CoreIPCNSValueENS6_13CoreIPCNumberENS6_11CoreIPCNullENS6_19CoreIPCSecureCodingENS6_13CoreIPCStringENS6_10CoreIPCURLEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 40) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 40);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS6_13CoreIPCCFTypeENS6_12CoreIPCColorENS6_11CoreIPCDataENS6_11CoreIPCDateENS6_17CoreIPCDictionaryENS6_12CoreIPCErrorENS6_11CoreIPCFontENS6_13CoreIPCLocaleENS6_15CoreIPCNSShadowENS6_14CoreIPCNSValueENS6_13CoreIPCNumberENS6_11CoreIPCNullENS6_19CoreIPCSecureCodingENS6_13CoreIPCStringENS6_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JST_SS_EEEDcmSV_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 40) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, void *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_()
{
  return WebCore::Color::Color();
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0;
  *a2 = v3;
  a2[1] = v4;
  uint64_t v5 = a3[2];
  a3[2] = 0;
  a2[2] = v5;
  uint64_t v6 = a3[3];
  a3[3] = 0;
  a2[3] = v6;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  unint64_t v4 = a3[1].n128_u64[1];
  a3[1].n128_u64[1] = 0;
  a2[1].n128_u64[1] = v4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,(std::__variant_detail::_Trait)1>::__move_constructor(a2 + 8, a3 + 8);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14ELm14EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15ELm15EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16ELm16EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN6WebKit12CoreIPCArrayENS8_13CoreIPCCFTypeENS8_12CoreIPCColorENS8_11CoreIPCDataENS8_11CoreIPCDateENS8_17CoreIPCDictionaryENS8_12CoreIPCErrorENS8_11CoreIPCFontENS8_13CoreIPCLocaleENS8_15CoreIPCNSShadowENS8_14CoreIPCNSValueENS8_13CoreIPCNumberENS8_11CoreIPCNullENS8_19CoreIPCSecureCodingENS8_13CoreIPCStringENS8_10CoreIPCURLEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJDnS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return WTF::URL::URL(a2, a3);
}

void WebKit::CoreIPCDate::toID(CFAbsoluteTime *this@<X0>, CFDateRef *a2@<X8>)
{
  CFDateRef v3 = CFDateCreate(0, *this);
  *a2 = v3;
  if (v3)
  {
    CFDateRef v4 = v3;
    CFRetain(v3);
    CFRelease(v4);
  }
}

void sub_199496898(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCNumber::toID(WebKit::CoreIPCNumber *this@<X0>, void *a2@<X8>)
{
  WebKit::CoreIPCNumber::createCFNumber(this);
  *a2 = cf;
  if (cf)
  {
    CFRetain(cf);
    CFRelease(cf);
  }
}

void sub_199496900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(IPC::Encoder *a1, WebCore::Color *a2)
{
  int v4 = *((_DWORD *)a2 + 10);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x199496CB4);
  }
  unsigned char *v5 = v4;
  switch((char)v4)
  {
    case 0:
      if (*((_DWORD *)a2 + 10)) {
        goto LABEL_54;
      }
      return;
    case 1:
      if (*((_DWORD *)a2 + 10) != 1) {
        goto LABEL_54;
      }
      IPC::VectorArgumentCoder<false,WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1);
      return;
    case 2:
      if (*((_DWORD *)a2 + 10) != 2) {
        goto LABEL_54;
      }
      IPC::ArgumentCoder<WTF::UniqueRef<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>,void>::encode<IPC::Encoder>();
      return;
    case 3:
      if (*((_DWORD *)a2 + 10) != 3) {
        goto LABEL_54;
      }
      WebCore::Color::data(v9, a2);
      IPC::ArgumentCoder<std::optional<WebCore::ColorDataForIPC>,void>::encode<IPC::Encoder,std::optional<WebCore::ColorDataForIPC>>(a1, (char *)v9);
      return;
    case 4:
      if (*((_DWORD *)a2 + 10) != 4) {
        goto LABEL_54;
      }
      IPC::ArgumentCoder<WebKit::CoreIPCData,void>::encode(a1, a2);
      return;
    case 5:
      if (*((_DWORD *)a2 + 10) != 5) {
        goto LABEL_54;
      }
      double v7 = *(double *)a2;
      IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v7);
      return;
    case 6:
      if (*((_DWORD *)a2 + 10) == 6) {
        goto LABEL_30;
      }
      goto LABEL_54;
    case 7:
      if (*((_DWORD *)a2 + 10) != 7) {
        goto LABEL_54;
      }
      IPC::ArgumentCoder<WebKit::CoreIPCError,void>::encode(a1, (uint64_t)a2);
      break;
    case 8:
      if (*((_DWORD *)a2 + 10) != 8) {
        goto LABEL_54;
      }
LABEL_30:
      IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)a2);
      break;
    case 9:
      if (*((_DWORD *)a2 + 10) != 9) {
        goto LABEL_54;
      }
      IPC::ArgumentCoder<WebKit::CoreIPCLocale,void>::encode(a1, (WTF::StringImpl **)a2);
      break;
    case 10:
      if (*((_DWORD *)a2 + 10) != 10) {
        goto LABEL_54;
      }
      IPC::ArgumentCoder<WebKit::CoreIPCNSShadow,void>::encode(a1, (uint64_t)a2);
      break;
    case 11:
      if (*((_DWORD *)a2 + 10) != 11) {
        goto LABEL_54;
      }
      LOBYTE(v9[0]) = *((_DWORD *)a2 + 8);
      IPC::Encoder::operator<<<BOOL>(a1, (char *)v9);
      IPC::ArgumentCoder<std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,void>::encode<IPC::Encoder,std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding> const&>(a1, (uint64_t)a2, LOBYTE(v9[0]));
      break;
    case 12:
      if (*((_DWORD *)a2 + 10) != 12) {
        goto LABEL_54;
      }
      IPC::ArgumentCoder<WebKit::CoreIPCNumber,void>::encode(a1, a2);
      break;
    case 13:
      if (*((_DWORD *)a2 + 10) == 13) {
        return;
      }
      goto LABEL_54;
    case 14:
      if (*((_DWORD *)a2 + 10) != 14) {
        goto LABEL_54;
      }
      uint64_t v8 = *(void *)a2;
      IPC::encodeObjectDirectly<NSObject  {objcproto14NSSecureCoding}>(a1, v8);
      break;
    case 15:
      if (*((_DWORD *)a2 + 10) != 15) {
        goto LABEL_54;
      }
      goto LABEL_56;
    case 16:
      while (*((_DWORD *)a2 + 10) != 16)
LABEL_54:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_56:
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
      break;
    default:
      return;
  }
}

void IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = a1[2] - *a1;
  if (v5 <= v7)
  {
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v28 = a1[3];
    if (v28)
    {
      uint64_t v32 = a1;
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v28 + 16))(a1[3], v6, v5);
        a1 = v32;
        uint64_t v27 = *v32;
        unint64_t v26 = v32[1];
      }
      else
      {
        unint64_t v26 = 0;
        uint64_t v27 = 0;
      }
    }
    goto LABEL_47;
  }
  uint64_t v8 = (unsigned char *)(v6 + v7);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v6)
  {
    unint64_t v26 = v5;
    uint64_t v27 = 0;
LABEL_47:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v29 = a1[3];
    if (v29 && v26) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v27);
    }
    goto LABEL_4;
  }
  unsigned int v9 = *v8;
  if (v9 >= 0x11)
  {
LABEL_4:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 48) = 0;
    return;
  }
  if (!*v8)
  {
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 40) = 0;
LABEL_14:
    char v12 = 1;
LABEL_15:
    *(unsigned char *)(a3 + 48) = v12;
    return;
  }
  if (v9 != 1)
  {
    switch(v9)
    {
      case 2u:
        IPC::Decoder::decode<WebKit::CoreIPCCFType>(a1, a2, (uint64_t)v34);
        char v12 = (char)v34[1];
        if (LOBYTE(v34[1]))
        {
          *(WTF::StringImpl **)a3 = v34[0];
          int v13 = 2;
LABEL_13:
          *(_DWORD *)(a3 + 40) = v13;
          goto LABEL_14;
        }
        break;
      case 3u:
        IPC::Decoder::decode<WebKit::CoreIPCColor>(a1, v34);
        char v15 = (char)v34[1];
        if (LOBYTE(v34[1]))
        {
          WebCore::Color::Color();
          *(_DWORD *)(a3 + 40) = 3;
          char v15 = 1;
        }
        else
        {
          *(unsigned char *)a3 = 0;
        }
        *(unsigned char *)(a3 + 48) = v15;
        std::optional<WebCore::Color>::~optional((uint64_t)v34, v14);
        return;
      case 4u:
        IPC::Decoder::decode<WebKit::CoreIPCData>((IPC::Decoder *)a1, v34);
        char v12 = (char)v34[1];
        if (LOBYTE(v34[1]))
        {
          *(WTF::StringImpl **)a3 = v34[0];
          int v13 = 4;
          goto LABEL_13;
        }
        break;
      default:
        switch(v9)
        {
          case 5u:
            uint64_t v16 = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
            if (!v17) {
              goto LABEL_4;
            }
            *(void *)a3 = v16;
            int v13 = 5;
            goto LABEL_13;
          case 6u:
            IPC::Decoder::decode<WebKit::CoreIPCDictionary>(v34);
            char v12 = v35;
            if (!(_BYTE)v35) {
              goto LABEL_67;
            }
            *(WTF::StringImpl **)a3 = v34[0];
            unint64_t v19 = v34[1];
            v34[0] = 0;
            v34[1] = 0;
            *(void *)(a3 + 8) = v19;
            int v20 = 6;
            break;
          case 7u:
            IPC::Decoder::decode<WebKit::CoreIPCError>((IPC::Decoder *)a1, (uint64_t)v34);
            char v21 = v36;
            if ((_BYTE)v36)
            {
              char v22 = v34[1];
              *(WTF::StringImpl **)a3 = v34[0];
              *(void *)(a3 + 8) = v22;
              long long v23 = v35;
              v34[0] = 0;
              long long v35 = 0uLL;
              *(_OWORD *)(a3 + 16) = v23;
              *(_DWORD *)(a3 + 40) = 7;
              char v21 = 1;
            }
            else
            {
              *(unsigned char *)a3 = 0;
            }
            *(unsigned char *)(a3 + 48) = v21;
            std::__optional_destruct_base<WebKit::CoreIPCError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v34);
            return;
          case 8u:
            IPC::Decoder::decode<WebKit::CoreIPCFont>(a1, (uint64_t)v34);
            char v12 = v35;
            if (!(_BYTE)v35) {
              goto LABEL_67;
            }
            *(WTF::StringImpl **)a3 = v34[0];
            uint64_t v24 = v34[1];
            v34[0] = 0;
            v34[1] = 0;
            *(void *)(a3 + 8) = v24;
            int v20 = 8;
            break;
          default:
            switch(v9)
            {
              case 9u:
                IPC::Decoder::decode<WebKit::CoreIPCLocale>((IPC::Decoder *)a1, v34);
                char v12 = (char)v34[1];
                if (LOBYTE(v34[1]))
                {
                  *(WTF::StringImpl **)a3 = v34[0];
                  int v13 = 9;
                  goto LABEL_13;
                }
                break;
              case 0xAu:
                IPC::Decoder::decode<WebKit::CoreIPCNSShadow>((uint64_t)a1, (uint64_t)v34, a4);
                char v12 = v36;
                if ((_BYTE)v36)
                {
                  *(_OWORD *)a3 = *(_OWORD *)v34;
                  uint64_t v25 = *((void *)&v35 + 1);
                  *(void *)(a3 + 16) = v35;
                  *(void *)(a3 + 24) = v25;
                  int v13 = 10;
                  goto LABEL_13;
                }
                break;
              case 0xBu:
                IPC::Decoder::decode<WebKit::CoreIPCNSValue>(a1, v34);
                if (!v37) {
                  goto LABEL_4;
                }
                std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,(std::__variant_detail::_Trait)1>::__move_constructor(a3 + 8, (uint64_t)&v34[1]);
                *(_DWORD *)(a3 + 40) = 11;
                *(unsigned char *)(a3 + 48) = 1;
                if (v37 && v36 != -1) {
                  ((void (*)(char *, WTF::StringImpl **))off_1EEA0FB38[v36])(&v33, &v34[1]);
                }
                return;
              case 0xCu:
                IPC::Decoder::decode<WebKit::CoreIPCNumber>(a1, v34);
                char v12 = v35;
                if ((_BYTE)v35)
                {
                  *(_OWORD *)a3 = *(_OWORD *)v34;
                  int v13 = 12;
                  goto LABEL_13;
                }
                break;
              case 0xDu:
                if ((unsigned __int16)IPC::Decoder::decode<WebKit::CoreIPCNull>(a1) <= 0xFFu) {
                  goto LABEL_4;
                }
                int v13 = 13;
                goto LABEL_13;
              case 0xEu:
                IPC::Decoder::decode<WebKit::CoreIPCSecureCoding>(a1, (uint64_t)v34);
                char v12 = (char)v34[1];
                if (LOBYTE(v34[1]))
                {
                  *(WTF::StringImpl **)a3 = v34[0];
                  int v13 = 14;
                  goto LABEL_13;
                }
                break;
              case 0xFu:
                IPC::Decoder::decode<WebKit::CoreIPCString>((IPC::Decoder *)a1, (uint64_t)v34);
                char v12 = (char)v34[1];
                if (LOBYTE(v34[1]))
                {
                  *(WTF::StringImpl **)a3 = v34[0];
                  int v13 = 15;
                  goto LABEL_13;
                }
                break;
              default:
                IPC::Decoder::decode<WebKit::CoreIPCURL>((IPC::Decoder *)a1, v34);
                if (!v37) {
                  goto LABEL_4;
                }
                WTF::URL::URL(a3, (uint64_t *)v34);
                *(_DWORD *)(a3 + 40) = 16;
                *(unsigned char *)(a3 + 48) = 1;
                if (v37)
                {
                  CFTypeID v31 = v34[0];
                  v34[0] = 0;
                  if (v31)
                  {
                    if (*(_DWORD *)v31 == 2) {
                      WTF::StringImpl::destroy(v31, v30);
                    }
                    else {
                      *(_DWORD *)v31 -= 2;
                    }
                  }
                }
                return;
            }
            goto LABEL_67;
        }
        *(_DWORD *)(a3 + 40) = v20;
        WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v18);
        goto LABEL_14;
    }
LABEL_67:
    *(unsigned char *)a3 = 0;
    goto LABEL_15;
  }
  IPC::Decoder::decode<WebKit::CoreIPCArray>(a1, a2, (uint64_t)v34);
  if (!(_BYTE)v35) {
    goto LABEL_4;
  }
  *(WTF::StringImpl **)a3 = v34[0];
  uint64_t v11 = v34[1];
  v34[0] = 0;
  v34[1] = 0;
  *(void *)(a3 + 8) = v11;
  *(_DWORD *)(a3 + 40) = 1;
  *(unsigned char *)(a3 + 48) = 1;
  WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v10);
}

void sub_1994971D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, char a19)
{
  if (a19 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebKit::CoreIPCArray>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::CoreIPCArray,void>::decode(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  return result;
}

void sub_1994972C8(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebKit::CoreIPCCFType>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  IPC::ArgumentCoder<WebKit::CoreIPCCFType,void>::decode(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 8))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
    }
  }
}

void sub_199497354(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 8))
  {
    uint64_t v3 = *(void *)v1;
    *(void *)uint64_t v1 = 0;
    if (v3) {
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100](v1, v3);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *IPC::Decoder::decode<WebKit::CoreIPCColor>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::CoreIPCColor,void>::decode(a1, a2);
  if (!a2[8])
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unsigned int *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1994973F0(_Unwind_Exception *a1, void *a2)
{
  std::optional<WebCore::Color>::~optional(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<WebKit::CoreIPCDictionary>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::CoreIPCDictionary,void>::decode(a1, a2, a3, a4);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v7);
    }
  }
  return result;
}

void sub_199497474(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebKit::CoreIPCError>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a2 + 32)) {
    IPC::Decoder::markInvalid(a1);
  }
}

void sub_1994974CC(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WebKit::CoreIPCError,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebKit::CoreIPCError,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100]((WTF::StringImpl ***)(a1 + 24), 0);
    uint64_t v3 = *(const void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3) {
      CFRelease(v3);
    }
    int v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

void *IPC::Decoder::decode<WebKit::CoreIPCFont>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::CoreIPCFont,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1994975BC(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::CoreIPCLocale>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::CoreIPCLocale,void>::decode(a1, a2);
  if (!a2[8])
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_199497648(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::optional<WebCore::PublicSuffix>::~optional(v2, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebKit::CoreIPCNSShadow>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  IPC::ArgumentCoder<WebKit::CoreIPCNSShadow,void>::decode((const void ***)a1, a2, a3);
  if (!*(unsigned char *)(a2 + 32))
  {
    uint64_t v5 = *(const void ***)a1;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v7 = *(void *)(a1 + 24);
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      (*(void (**)(uint64_t, const void **))(*(void *)v7 + 16))(v7, v5);
    }
  }
}

void sub_1994976CC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 32))
  {
    uint64_t v3 = *(const void **)(v1 + 24);
    *(void *)(v1 + 24) = 0;
    if (v3) {
      CFRelease(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebKit::CoreIPCNSValue>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<WebKit::CoreIPCNSValue,void>::decode(a1, a2);
  if (!a2[40])
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_199497768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 40))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 32);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))off_1EEA0FB38[v15])(&a13, v13 + 8);
    }
    *(_DWORD *)(v13 + 32) = -1;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::CoreIPCURL>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::CoreIPCURL,void>::decode(a1, a2);
  if (!a2[40]) {
    return (WTF::StringImpl *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_1994977E4(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

WebKit::CoreIPCNSShadow *WebKit::CoreIPCNSShadow::CoreIPCNSShadow(WebKit::CoreIPCNSShadow *this, NSShadow *a2)
{
  [(NSShadow *)a2 shadowOffset];
  *(void *)this = v4;
  *((void *)this + 1) = v5;
  [(NSShadow *)a2 shadowBlurRadius];
  *((void *)this + 2) = v6;
  id v7 = [(NSShadow *)a2 shadowColor];
  *((void *)this + 3) = v7;
  if (v7) {
    CFRetain(v7);
  }
  return this;
}

uint64_t WebKit::CoreIPCNSShadow::toID@<X0>(WebKit::CoreIPCNSShadow *this@<X0>, void *a2@<X8>)
{
  ((void (*)(void))*MEMORY[0x1E4FB6270])();
  uint64_t v4 = objc_opt_new();
  objc_msgSend(v4, "setShadowOffset:", *(double *)this, *((double *)this + 1));
  [v4 setShadowBlurRadius:*((double *)this + 2)];
  uint64_t result = [v4 setShadowColor:*((void *)this + 3)];
  *a2 = v4;
  return result;
}

void sub_1994978B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCNSURLRequest *WebKit::CoreIPCNSURLRequest::CoreIPCNSURLRequest(WebKit::CoreIPCNSURLRequest *this, NSURLRequest *a2)
{
  uint64_t v183 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 16) = 0;
  *((unsigned char *)this + 24) = 0;
  uint64_t v4 = (char *)this + 32;
  WTF::URL::URL((WebKit::CoreIPCNSURLRequest *)((char *)this + 32));
  *((void *)this + 9) = 0;
  *((unsigned char *)this + 80) = 0;
  *((unsigned char *)this + 88) = 0;
  uint64_t v5 = (char *)this + 88;
  *((unsigned char *)this + 128) = 0;
  *((unsigned char *)this + 136) = 0;
  *(_DWORD *)((char *)this + 138) = 0;
  *((_DWORD *)this + 41) = 0;
  *((_WORD *)this + 84) = 0;
  *((unsigned char *)this + 176) = 0;
  *((unsigned char *)this + 184) = 0;
  *((unsigned char *)this + 192) = 0;
  *((unsigned char *)this + 208) = 0;
  *((unsigned char *)this + 216) = 0;
  *((unsigned char *)this + 224) = 0;
  *((unsigned char *)this + 232) = 0;
  *((unsigned char *)this + 248) = 0;
  *((void *)this + 32) = 0;
  *((unsigned char *)this + 264) = 0;
  *((void *)this + 34) = 0;
  *((unsigned char *)this + 280) = 0;
  *((unsigned char *)this + 288) = 0;
  *((unsigned char *)this + 296) = 0;
  *((unsigned char *)this + 320) = 0;
  *((unsigned char *)this + 328) = 0;
  *((unsigned char *)this + 352) = 0;
  *((unsigned char *)this + 368) = 0;
  *((void *)this + 18) = 0;
  uint64_t v6 = (char *)this + 144;
  *((void *)v6 + 20) = 0;
  v150 = v6 + 160;
  *((void *)v6 + 24) = 0;
  v151 = v6 + 192;
  *((void *)v6 + 1) = 0;
  v6[16] = 0;
  v6[168] = 0;
  *((_DWORD *)v6 + 50) = 0;
  id v7 = (void *)[(NSURLRequest *)a2 _webKitPropertyListData];
  BOOL v8 = (NSDictionary *)[v7 objectForKeyedSubscript:@"protocolProperties"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    WebKit::CoreIPCPlistDictionary::CoreIPCPlistDictionary((WebKit::CoreIPCPlistDictionary *)&v181, v8);
    if (*((unsigned char *)this + 16))
    {
      uint64_t v101 = *((unsigned int *)this + 3);
      if (v101) {
        WTF::VectorDestructor<true,WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>>::destruct(*(WTF::StringImpl **)this, (WTF::StringImpl *)(*(void *)this + 16 * v101));
      }
      v102 = *(WTF **)this;
      if (*(void *)this)
      {
        *(void *)this = 0;
        *((_DWORD *)this + 2) = 0;
        WTF::fastFree(v102, v9);
      }
      *(void *)this = v181;
      uint64_t v103 = v182;
      long long v181 = 0;
      uint64_t v182 = 0;
      *((void *)this + 1) = v103;
    }
    else
    {
      *(void *)this = v181;
      uint64_t v10 = v182;
      long long v181 = 0;
      uint64_t v182 = 0;
      *((void *)this + 1) = v10;
      *((unsigned char *)this + 16) = 1;
    }
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v181, v9);
  }
  uint64_t v11 = (void *)[v7 objectForKeyedSubscript:@"isMutable"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((unsigned char *)this + 24) = [v11 BOOLValue];
  }
  uint64_t v12 = [v7 objectForKeyedSubscript:@"URL"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    MEMORY[0x19972E8A0](&v181, v12);
    WTF::URL::operator=((uint64_t)v4, (uint64_t)&v181);
    uint64_t v14 = v181;
    long long v181 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  uint64_t v15 = (void *)[v7 objectForKeyedSubscript:@"timeout"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v15 doubleValue];
    *((void *)this + 9) = v16;
  }
  char v17 = (void *)[v7 objectForKeyedSubscript:@"cachePolicy"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    unsigned int v18 = [v17 unsignedCharValue];
    if (v18 <= 5) {
      *((unsigned char *)this + 80) = v18;
    }
  }
  uint64_t v19 = [v7 objectForKeyedSubscript:@"mainDocumentURL"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    MEMORY[0x19972E8A0](&v181, v19);
    if (*((unsigned char *)this + 128))
    {
      WTF::URL::operator=((uint64_t)v5, (uint64_t)&v181);
    }
    else
    {
      WTF::URL::URL((uint64_t)v5, (uint64_t *)&v181);
      *((unsigned char *)this + 128) = 1;
    }
    char v21 = v181;
    long long v181 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v20);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
  }
  char v22 = (void *)[v7 objectForKeyedSubscript:@"shouldHandleHTTPCookies"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((unsigned char *)this + 136) = [v22 BOOLValue];
  }
  long long v23 = (void *)[v7 objectForKeyedSubscript:@"explicitFlags"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    int v24 = [v23 shortValue];
    if ((v24 & 0xFFFFE821) == 0) {
      *((_WORD *)this + 69) = v24;
    }
  }
  uint64_t v25 = (void *)[v7 objectForKeyedSubscript:@"allowCellular"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((unsigned char *)this + 140) = [v25 BOOLValue];
  }
  unint64_t v26 = (void *)[v7 objectForKeyedSubscript:@"preventsIdleSystemSleep"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((unsigned char *)this + 141) = [v26 BOOLValue];
  }
  uint64_t v27 = (void *)[v7 objectForKeyedSubscript:@"timeWindowDelay"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v27 doubleValue];
    *(void *)uint64_t v6 = v28;
  }
  uint64_t v29 = (void *)[v7 objectForKeyedSubscript:@"timeWindowDuration"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v29 doubleValue];
    *((void *)this + 19) = v30;
  }
  CFTypeID v31 = (void *)[v7 objectForKeyedSubscript:@"networkServiceType"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    unsigned int v32 = [v31 unsignedCharValue];
    if (v32 <= 0xB) {
      *((unsigned char *)this + 160) = v32;
    }
  }
  char v33 = (void *)[v7 objectForKeyedSubscript:@"requestPriority"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((_DWORD *)this + 41) = [v33 intValue];
  }
  CFTypeID v34 = (void *)[v7 objectForKeyedSubscript:@"isHTTP"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((_WORD *)this + 84) = [v34 BOOLValue] | 0x100;
  }
  uint64_t v35 = [v7 objectForKeyedSubscript:@"httpMethod"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    MEMORY[0x19972EAD0](&v181, v35);
    uint64_t v37 = (uint64_t)v181;
    if (!*((unsigned char *)this + 184))
    {
      *((void *)this + 22) = v181;
      *((unsigned char *)this + 184) = 1;
      goto LABEL_47;
    }
    long long v181 = 0;
    v104 = (WTF::StringImpl *)*((void *)this + 22);
    *((void *)this + 22) = v37;
    if (v104)
    {
      int v105 = *(_DWORD *)v104 - 2;
      if (*(_DWORD *)v104 != 2) {
        goto LABEL_174;
      }
      WTF::StringImpl::destroy(v104, v36);
      v104 = v181;
      long long v181 = 0;
      if (!v104) {
        goto LABEL_47;
      }
      int v105 = *(_DWORD *)v104 - 2;
      if (*(_DWORD *)v104 == 2) {
        WTF::StringImpl::destroy(v104, v106);
      }
      else {
LABEL_174:
      }
        *(_DWORD *)v104 = v105;
    }
  }
LABEL_47:
  id obj = (id)[v7 objectForKeyedSubscript:@"headerFields"];
  objc_opt_class();
  v154 = v7;
  if (objc_opt_isKindOfClass())
  {
    long long v175 = 0;
    uint64_t v176 = 0;
    unint64_t v38 = [obj count];
    if (v38)
    {
      if (v38 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x199498ED4);
      }
      LODWORD(v176) = v38;
      long long v175 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(32 * v38));
    }
    long long v173 = 0u;
    long long v174 = 0u;
    long long v171 = 0u;
    long long v172 = 0u;
    uint64_t v39 = [obj countByEnumeratingWithState:&v171 objects:&v181 count:16];
    if (v39)
    {
      uint64_t v153 = *(void *)v172;
      do
      {
        uint64_t v40 = 0;
        do
        {
          if (*(void *)v172 != v153) {
            objc_enumerationMutation(obj);
          }
          uint64_t v41 = *(void *)(*((void *)&v171 + 1) + 8 * v40);
          long long v42 = (void *)[obj objectForKey:v41];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            long long v163 = 0uLL;
            unint64_t v43 = [v42 count];
            int v44 = v43;
            if (v43)
            {
              if (v43 >> 29) {
                goto LABEL_260;
              }
              uint64_t v45 = WTF::fastMalloc((WTF *)(8 * v43));
              DWORD2(v163) = v44;
              *(void *)&long long v163 = v45;
            }
            long long v169 = 0u;
            long long v170 = 0u;
            long long v167 = 0u;
            long long v168 = 0u;
            uint64_t v46 = [v42 countByEnumeratingWithState:&v167 objects:v180 count:16];
            if (v46)
            {
              uint64_t v47 = *(void *)v168;
              do
              {
                uint64_t v48 = 0;
                do
                {
                  if (*(void *)v168 != v47) {
                    objc_enumerationMutation(v42);
                  }
                  long long v49 = *(WTF::StringImpl **)(*((void *)&v167 + 1) + 8 * v48);
                  objc_opt_class();
                  if (objc_opt_isKindOfClass())
                  {
                    v177 = v49;
                    if (HIDWORD(v163) == DWORD2(v163))
                    {
                      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,NSString *&>((uint64_t)&v163, &v177);
                    }
                    else
                    {
                      MEMORY[0x19972EAD0](v163 + 8 * HIDWORD(v163), v49);
                      ++HIDWORD(v163);
                    }
                  }
                  ++v48;
                }
                while (v46 != v48);
                uint64_t v50 = [v42 countByEnumeratingWithState:&v167 objects:v180 count:16];
                uint64_t v46 = v50;
              }
              while (v50);
            }
            MEMORY[0x19972EAD0](&v177, v41);
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v178, (uint64_t)&v163);
            int v179 = 1;
            if (HIDWORD(v176) == v176)
            {
              WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>((uint64_t)&v175, (unint64_t)&v177);
              id v7 = v154;
            }
            else
            {
              std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::pair[abi:sn180100]((void *)v175 + 4 * HIDWORD(v176), (uint64_t *)&v177);
              id v7 = v154;
              ++HIDWORD(v176);
            }
            if (v179 != -1) {
              ((void (*)(WTF::StringImpl **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v179])(v157, v178);
            }
            int v179 = -1;
            v52 = v177;
            v177 = 0;
            if (v52)
            {
              if (*(_DWORD *)v52 == 2) {
                WTF::StringImpl::destroy(v52, v51);
              }
              else {
                *(_DWORD *)v52 -= 2;
              }
            }
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v163, v51);
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            MEMORY[0x19972EAD0](&v177, v41);
            MEMORY[0x19972EAD0](v178, v42);
            int v179 = 0;
            if (HIDWORD(v176) == v176)
            {
              WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>((uint64_t)&v175, (unint64_t)&v177);
            }
            else
            {
              std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::pair[abi:sn180100]((void *)v175 + 4 * HIDWORD(v176), (uint64_t *)&v177);
              ++HIDWORD(v176);
            }
            if (v179 != -1) {
              ((void (*)(long long *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v179])(&v163, v178);
            }
            int v179 = -1;
            v54 = v177;
            v177 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 2) {
                WTF::StringImpl::destroy(v54, v53);
              }
              else {
                *(_DWORD *)v54 -= 2;
              }
            }
          }
          ++v40;
        }
        while (v40 != v39);
        uint64_t v55 = [obj countByEnumeratingWithState:&v171 objects:&v181 count:16];
        uint64_t v39 = v55;
      }
      while (v55);
    }
    WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v175, HIDWORD(v176));
    if (*((unsigned char *)this + 208))
    {
      uint64_t v139 = *((unsigned int *)this + 51);
      if (v139) {
        WTF::VectorDestructor<true,std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::destruct(*((WTF::StringImpl **)this + 24), (WTF::StringImpl *)(*((void *)this + 24) + 32 * v139));
      }
      long long v140 = (WTF *)*((void *)this + 24);
      if (v140)
      {
        *((void *)this + 24) = 0;
        *((_DWORD *)this + 50) = 0;
        WTF::fastFree(v140, v56);
      }
      *((void *)this + 24) = v175;
      uint64_t v141 = v176;
      long long v175 = 0;
      uint64_t v176 = 0;
      *((void *)this + 25) = v141;
    }
    else
    {
      *((void *)this + 24) = v175;
      uint64_t v57 = v176;
      long long v175 = 0;
      uint64_t v176 = 0;
      *((void *)this + 25) = v57;
      *((unsigned char *)this + 208) = 1;
    }
    WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v175, v56);
  }
  int v58 = (const void *)[v7 objectForKeyedSubscript:@"body"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (v58) {
      CFRetain(v58);
    }
    if (*((unsigned char *)this + 224))
    {
      uint64_t v107 = (const void *)*((void *)this + 27);
      *((void *)this + 27) = v58;
      if (v107) {
        CFRelease(v107);
      }
    }
    else
    {
      *((void *)this + 27) = v58;
      *((unsigned char *)this + 224) = 1;
    }
  }
  v59 = (void *)[v7 objectForKeyedSubscript:@"bodyParts"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    long long v175 = 0;
    uint64_t v176 = 0;
    unint64_t v108 = [v59 count];
    int v109 = v108;
    if (v108)
    {
      if (v108 >> 28)
      {
LABEL_260:
        __break(0xC471u);
        JUMPOUT(0x199498EBCLL);
      }
      long long v110 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(16 * v108));
      LODWORD(v176) = v109;
      long long v175 = v110;
    }
    long long v165 = 0u;
    long long v166 = 0u;
    long long v163 = 0u;
    long long v164 = 0u;
    uint64_t v111 = [v59 countByEnumeratingWithState:&v163 objects:&v177 count:16];
    if (v111)
    {
      uint64_t v112 = *(void *)v164;
      do
      {
        for (uint64_t i = 0; i != v111; ++i)
        {
          if (*(void *)v164 != v112) {
            objc_enumerationMutation(v59);
          }
          v114 = *(const void **)(*((void *)&v163 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            MEMORY[0x19972EAD0](v157, v114);
            int v116 = HIDWORD(v176);
            if (HIDWORD(v176) == v176)
            {
              unint64_t v117 = HIDWORD(v176) + ((unint64_t)HIDWORD(v176) >> 2);
              unint64_t v118 = v117 >= 0x10 ? v117 + 1 : 16;
              unint64_t v119 = v118 <= (unint64_t)HIDWORD(v176) + 1 ? HIDWORD(v176) + 1 : v118;
              WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v175, v119);
              int v116 = HIDWORD(v176);
              v120 = (char *)v175 + 16 * HIDWORD(v176);
              v121 = v157[0];
              v157[0] = 0;
              *(void *)v120 = v121;
            }
            else
            {
              v122 = v157[0];
              v120 = (char *)v175 + 16 * HIDWORD(v176);
              v157[0] = 0;
              *(void *)v120 = v122;
            }
            *((_DWORD *)v120 + 2) = 0;
            HIDWORD(v176) = v116 + 1;
            uint64_t v123 = v157[0];
            v157[0] = 0;
            if (v123)
            {
              if (*(_DWORD *)v123 == 2) {
                WTF::StringImpl::destroy(v123, v115);
              }
              else {
                *(_DWORD *)v123 -= 2;
              }
            }
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            if (v114) {
              CFRetain(v114);
            }
            int v124 = HIDWORD(v176);
            if (HIDWORD(v176) == v176)
            {
              unint64_t v125 = HIDWORD(v176) + ((unint64_t)HIDWORD(v176) >> 2);
              if (v125 >= 0x10) {
                unint64_t v126 = v125 + 1;
              }
              else {
                unint64_t v126 = 16;
              }
              if (v126 <= (unint64_t)HIDWORD(v176) + 1) {
                unint64_t v127 = HIDWORD(v176) + 1;
              }
              else {
                unint64_t v127 = v126;
              }
              WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v175, v127);
              int v124 = HIDWORD(v176);
              v128 = (char *)v175 + 16 * HIDWORD(v176);
            }
            else
            {
              v128 = (char *)v175 + 16 * HIDWORD(v176);
            }
            *(void *)v128 = v114;
            *((_DWORD *)v128 + 2) = 1;
            HIDWORD(v176) = v124 + 1;
          }
        }
        uint64_t v111 = [v59 countByEnumeratingWithState:&v163 objects:&v177 count:16];
      }
      while (v111);
    }
    WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v175, HIDWORD(v176));
    id v7 = v154;
    if (*((unsigned char *)this + 248))
    {
      uint64_t v130 = *((unsigned int *)this + 61);
      v131 = (unsigned int *)*((void *)this + 29);
      if (v130)
      {
        uint64_t v132 = 16 * v130;
        do
        {
          uint64_t v133 = v131[2];
          if (v133 != -1) {
            ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit13CoreIPCStringENS6_11CoreIPCDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v133])(v157, v131);
          }
          v131[2] = -1;
          v131 += 4;
          v132 -= 16;
        }
        while (v132);
        v131 = (unsigned int *)*((void *)this + 29);
      }
      if (v131)
      {
        *((void *)this + 29) = 0;
        *((_DWORD *)this + 60) = 0;
        WTF::fastFree((WTF *)v131, v129);
      }
      *((void *)this + 29) = v175;
      uint64_t v134 = v176;
      long long v175 = 0;
      uint64_t v176 = 0;
      *((void *)this + 30) = v134;
    }
    else
    {
      *((void *)this + 29) = v175;
      uint64_t v143 = v176;
      long long v175 = 0;
      uint64_t v176 = 0;
      *((void *)this + 30) = v143;
      *((unsigned char *)this + 248) = 1;
    }
    WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v175, v129);
  }
  v60 = (void *)[v7 objectForKeyedSubscript:@"startTimeoutTime"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v60 doubleValue];
    *((void *)this + 32) = v61;
  }
  uint64_t v62 = (void *)[v7 objectForKeyedSubscript:@"requiresShortConnectionTimeout"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((unsigned char *)this + 264) = [v62 BOOLValue];
  }
  int v63 = (void *)[v7 objectForKeyedSubscript:@"payloadTransmissionTimeout"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v63 doubleValue];
    *((void *)this + 34) = v64;
  }
  v65 = (void *)[v7 objectForKeyedSubscript:@"allowedProtocolTypes"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((unsigned char *)this + 280) = [v65 unsignedCharValue];
  }
  uint64_t v66 = [v7 objectForKeyedSubscript:@"boundInterfaceIdentifier"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_109;
  }
  MEMORY[0x19972EAD0](&v175, v66);
  uint64_t v136 = v175;
  if (*((unsigned char *)this + 296))
  {
    long long v175 = 0;
    unsigned int v144 = (WTF::StringImpl *)*((void *)this + 36);
    *((void *)this + 36) = v136;
    if (v144)
    {
      int v145 = *(_DWORD *)v144 - 2;
      if (*(_DWORD *)v144 != 2) {
        goto LABEL_247;
      }
      WTF::StringImpl::destroy(v144, v135);
      unsigned int v144 = v175;
      long long v175 = 0;
      id v7 = v154;
      if (!v144) {
        goto LABEL_109;
      }
      int v145 = *(_DWORD *)v144 - 2;
      if (*(_DWORD *)v144 == 2) {
        WTF::StringImpl::destroy(v144, v146);
      }
      else {
LABEL_247:
      }
        *(_DWORD *)unsigned int v144 = v145;
      id v7 = v154;
    }
  }
  else
  {
    *((void *)this + 36) = v175;
    *((unsigned char *)this + 296) = 1;
  }
LABEL_109:
  v67 = (void *)[v7 objectForKeyedSubscript:@"allowsExpensiveNetworkAccess"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    _WORD *v150 = [v67 BOOLValue] | 0x100;
  }
  int v68 = (void *)[v7 objectForKeyedSubscript:@"allowsConstrainedNetworkAccess"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((_WORD *)this + 153) = [v68 BOOLValue] | 0x100;
  }
  int v69 = (void *)[v7 objectForKeyedSubscript:@"allowsUCA"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((_WORD *)this + 154) = [v69 BOOLValue] | 0x100;
  }
  char v70 = (void *)[v7 objectForKeyedSubscript:@"assumesHTTP3Capable"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((unsigned char *)this + 310) = [v70 BOOLValue];
  }
  [v7 objectForKeyedSubscript:@"attribution"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((unsigned char *)this + 311) = [v65 unsignedCharValue] != 0;
  }
  v71 = (void *)[v7 objectForKeyedSubscript:@"knownTracker"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((unsigned char *)this + 312) = [v71 BOOLValue];
  }
  uint64_t v72 = [v7 objectForKeyedSubscript:@"trackerContext"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    MEMORY[0x19972EAD0](&v175, v72);
    v138 = v175;
    if (!*((unsigned char *)this + 328))
    {
      *((void *)this + 40) = v175;
      *((unsigned char *)this + 328) = 1;
      goto LABEL_122;
    }
    long long v175 = 0;
    v147 = (WTF::StringImpl *)*((void *)this + 40);
    *((void *)this + 40) = v138;
    if (v147)
    {
      int v148 = *(_DWORD *)v147 - 2;
      if (*(_DWORD *)v147 != 2) {
        goto LABEL_253;
      }
      WTF::StringImpl::destroy(v147, v137);
      v147 = v175;
      long long v175 = 0;
      id v7 = v154;
      if (!v147) {
        goto LABEL_122;
      }
      int v148 = *(_DWORD *)v147 - 2;
      if (*(_DWORD *)v147 == 2) {
        WTF::StringImpl::destroy(v147, v149);
      }
      else {
LABEL_253:
      }
        *(_DWORD *)v147 = v148;
      id v7 = v154;
    }
  }
LABEL_122:
  int v73 = (void *)[v7 objectForKeyedSubscript:@"privacyProxyFailClosed"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    unsigned char *v151 = [v73 BOOLValue];
  }
  v74 = (void *)[v7 objectForKeyedSubscript:@"privacyProxyFailClosedForUnreachableNonMainHosts"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((unsigned char *)this + 337) = [v74 BOOLValue];
  }
  v75 = (void *)[v7 objectForKeyedSubscript:@"privacyProxyFailClosedForUnreachableHosts"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((unsigned char *)this + 338) = [v75 BOOLValue];
  }
  v76 = (void *)[v7 objectForKeyedSubscript:@"requiresDNSSECValidation"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *(_WORD *)((char *)this + 339) = [v76 BOOLValue] | 0x100;
  }
  v77 = (void *)[v7 objectForKeyedSubscript:@"allowsPersistentDNS"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((unsigned char *)this + 341) = [v77 BOOLValue];
  }
  int v78 = (void *)[v7 objectForKeyedSubscript:@"prohibitPrivacyProxy"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((unsigned char *)this + 342) = [v78 BOOLValue];
  }
  v79 = (void *)[v7 objectForKeyedSubscript:@"allowPrivateAccessTokensForThirdParty"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((unsigned char *)this + 343) = [v79 BOOLValue];
  }
  v80 = (void *)[v7 objectForKeyedSubscript:@"useEnhancedPrivacyMode"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((unsigned char *)this + 344) = [v80 BOOLValue];
  }
  v81 = (void *)[v7 objectForKeyedSubscript:@"blockTrackers"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((unsigned char *)this + 345) = [v81 BOOLValue];
  }
  v82 = (void *)[v7 objectForKeyedSubscript:@"failInsecureLoadWithHTTPSDNSRecord"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((unsigned char *)this + 346) = [v82 BOOLValue];
  }
  int v83 = (void *)[v7 objectForKeyedSubscript:@"isWebSearchContent"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    *((unsigned char *)this + 347) = [v83 BOOLValue];
  }
  v84 = (void *)[v7 objectForKeyedSubscript:@"contentDispositionEncodingFallbackArray"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v161 = 0;
    uint64_t v162 = 0;
    unint64_t v85 = [v84 count];
    int v86 = v85;
    if (v85)
    {
      if (v85 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x199498EDCLL);
      }
      uint64_t v87 = WTF::fastMalloc((WTF *)(16 * v85));
      LODWORD(v162) = v86;
      uint64_t v161 = v87;
    }
    long long v159 = 0u;
    long long v160 = 0u;
    *(_OWORD *)v157 = 0u;
    long long v158 = 0u;
    uint64_t v88 = [v84 countByEnumeratingWithState:v157 objects:&v175 count:16];
    if (v88)
    {
      uint64_t v89 = *(void *)v158;
      do
      {
        uint64_t v90 = 0;
        do
        {
          if (*(void *)v158 != v89) {
            objc_enumerationMutation(v84);
          }
          uint64_t v91 = (WebKit::CoreIPCNumber *)*((void *)v157[1] + v90);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            *(void *)&long long v156 = WebKit::CoreIPCNumber::numberHolderForNumber(v91, v92);
            *((void *)&v156 + 1) = v93;
            uint64_t v94 = HIDWORD(v162);
            if (HIDWORD(v162) == v162)
            {
              v97 = (long long *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v161, HIDWORD(v162) + 1, (unint64_t)&v156);
              uint64_t v94 = HIDWORD(v162);
              uint64_t v95 = v161;
              long long v96 = *v97;
            }
            else
            {
              uint64_t v95 = v161;
              long long v96 = v156;
            }
            *(_OWORD *)(v95 + 16 * v94) = v96;
            ++HIDWORD(v162);
          }
          ++v90;
        }
        while (v88 != v90);
        uint64_t v98 = [v84 countByEnumeratingWithState:v157 objects:&v175 count:16];
        uint64_t v88 = v98;
      }
      while (v98);
    }
    WTF::Vector<WebKit::CoreIPCNumber,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v161, HIDWORD(v162));
    if (*((unsigned char *)this + 368))
    {
      long long v142 = (WTF *)*((void *)this + 44);
      if (v142)
      {
        *((void *)this + 44) = 0;
        *((_DWORD *)this + 90) = 0;
        WTF::fastFree(v142, v99);
      }
      *((void *)this + 44) = v161;
      *((void *)this + 45) = v162;
    }
    else
    {
      *((void *)this + 44) = v161;
      *((void *)this + 45) = v162;
      *((unsigned char *)this + 368) = 1;
    }
  }
  return this;
}

void sub_199498EE8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, WebKit::CoreIPCNSURLRequestData *a11)
{
  WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11 - 224, a2);
  WebKit::CoreIPCNSURLRequestData::~CoreIPCNSURLRequestData(a11, v13);
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCNSURLRequest::toID(WebKit::CoreIPCNSURLRequest *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:43];
  if (*((unsigned char *)this + 16))
  {
    WebKit::CoreIPCPlistDictionary::toID((WebKit::CoreIPCString **)this, cf);
    if (cf[0])
    {
      [v4 setObject:cf[0] forKey:@"protocolProperties"];
      CFTypeRef v5 = cf[0];
      cf[0] = 0;
      if (v5) {
        CFRelease(v5);
      }
    }
  }
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 24)), @"isMutable");
  uint64_t v6 = (const void *)WTF::URL::operator NSURL *();
  id v7 = v6;
  if (v6)
  {
    CFRetain(v6);
    [v4 setObject:v7 forKey:@"URL"];
    CFRelease(v7);
  }
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithDouble:", *((double *)this + 9)), @"timeout");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)this + 80)), @"cachePolicy");
  if (*((unsigned char *)this + 128))
  {
    BOOL v8 = (const void *)WTF::URL::operator NSURL *();
    BOOL v9 = v8;
    if (v8)
    {
      CFRetain(v8);
      [v4 setObject:v9 forKey:@"mainDocumentURL"];
      CFRelease(v9);
    }
  }
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 136)), @"shouldHandleHTTPCookies");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithShort:", *((__int16 *)this + 69)), @"explicitFlags");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 140)), @"allowCellular");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 141)), @"preventsIdleSystemSleep");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithDouble:", *((double *)this + 18)), @"timeWindowDelay");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithDouble:", *((double *)this + 19)), @"timeWindowDuration");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)this + 160)), @"networkServiceType");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithInt:", *((unsigned int *)this + 41)), @"requestPriority");
  if (*((unsigned char *)this + 169)) {
    objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 168)), @"isHTTP");
  }
  if (*((unsigned char *)this + 184))
  {
    WebKit::CoreIPCString::toID((WebKit::CoreIPCNSURLRequest *)((char *)this + 176), (__CFString **)cf);
    if (cf[0])
    {
      [v4 setObject:cf[0] forKey:@"httpMethod"];
      CFTypeRef v10 = cf[0];
      cf[0] = 0;
      if (v10) {
        CFRelease(v10);
      }
    }
  }
  if (*((unsigned char *)this + 208))
  {
    id v11 = objc_alloc(MEMORY[0x1E4F1CA60]);
    if (!*((unsigned char *)this + 208)) {
      goto LABEL_89;
    }
    CFTypeRef v12 = (CFTypeRef)[v11 initWithCapacity:*((unsigned int *)this + 51)];
    CFTypeRef v43 = v12;
    if (!*((unsigned char *)this + 208)) {
      goto LABEL_89;
    }
    uint64_t v13 = *((unsigned int *)this + 51);
    if (v13)
    {
      long long v42 = a2;
      uint64_t v14 = (void *)*((void *)this + 24);
      uint64_t v15 = &v14[4 * v13];
      do
      {
        cf[0] = v14;
        cf[1] = &v43;
        cf[2] = v14;
        cf[3] = &v43;
        int v16 = *((_DWORD *)v14 + 6);
        if (v16 == 1)
        {
          char v17 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)v14 + 5)];
          uint64_t v18 = *((unsigned int *)v14 + 5);
          if (v18)
          {
            uint64_t v19 = (void *)v14[1];
            uint64_t v20 = 8 * v18;
            do
            {
              if (*v19) {
                char v21 = (__CFString *)WTF::StringImpl::operator NSString *();
              }
              else {
                char v21 = &stru_1EEA10550;
              }
              objc_msgSend(v17, "addObject:", v21, v42);
              ++v19;
              v20 -= 8;
            }
            while (v20);
          }
          if (*v14) {
            [(id)v43 setObject:v17 forKey:WTF::StringImpl::operator NSString *()];
          }
          if (v17) {
            CFRelease(v17);
          }
        }
        else
        {
          if (v16)
          {
LABEL_88:
            std::__throw_bad_variant_access[abi:sn180100]();
            goto LABEL_89;
          }
          std::invoke[abi:sn180100]<WTF::Visitor<WebKit::CoreIPCNSURLRequest::toID(void)::$_0,WebKit::CoreIPCNSURLRequest::toID(void)::$_1>,WTF::String const&>((void **)cf, v14[1]);
        }
        v14 += 4;
      }
      while (v14 != v15);
      a2 = v42;
      CFTypeRef v12 = v43;
    }
    objc_msgSend(v4, "setObject:forKey:", v12, @"headerFields", v42);
    CFTypeRef v22 = v43;
    CFTypeRef v43 = 0;
    if (v22) {
      CFRelease(v22);
    }
  }
  if (*((unsigned char *)this + 224))
  {
    uint64_t v30 = (const void *)*((void *)this + 27);
    if (v30)
    {
      CFRetain(*((CFTypeRef *)this + 27));
      [v4 setObject:v30 forKey:@"body"];
      CFRelease(v30);
    }
  }
  if (*((unsigned char *)this + 248))
  {
    id v31 = objc_alloc(MEMORY[0x1E4F1CA48]);
    if (!*((unsigned char *)this + 248)) {
      goto LABEL_89;
    }
    uint64_t v32 = [v31 initWithCapacity:*((unsigned int *)this + 61)];
    if (!*((unsigned char *)this + 248)) {
      goto LABEL_89;
    }
    char v33 = (void *)v32;
    uint64_t v34 = *((unsigned int *)this + 61);
    if (!v34)
    {
LABEL_78:
      [v4 setObject:v33 forKey:@"bodyParts"];
      if (v33) {
        CFRelease(v33);
      }
      goto LABEL_37;
    }
    uint64_t v35 = *((void *)this + 29);
    uint64_t v36 = 16 * v34;
    while (1)
    {
      int v37 = *(_DWORD *)(v35 + 8);
      if (v37 != 1) {
        break;
      }
      CFTypeRef v39 = *(CFTypeRef *)v35;
      if (*(void *)v35)
      {
        CFRetain(*(CFTypeRef *)v35);
        [v33 addObject:v39];
        CFTypeRef v38 = v39;
LABEL_76:
        CFRelease(v38);
      }
LABEL_77:
      v35 += 16;
      v36 -= 16;
      if (!v36) {
        goto LABEL_78;
      }
    }
    if (v37) {
      goto LABEL_88;
    }
    WebKit::CoreIPCString::toID((WebKit::CoreIPCString *)v35, (__CFString **)cf);
    if (!cf[0]) {
      goto LABEL_77;
    }
    objc_msgSend(v33, "addObject:");
    CFTypeRef v38 = cf[0];
    cf[0] = 0;
    if (!v38) {
      goto LABEL_77;
    }
    goto LABEL_76;
  }
LABEL_37:
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithDouble:", *((double *)this + 32)), @"startTimeoutTime");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 264)), @"requiresShortConnectionTimeout");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithDouble:", *((double *)this + 34)), @"payloadTransmissionTimeout");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)this + 280)), @"allowedProtocolTypes");
  if (*((unsigned char *)this + 296))
  {
    WebKit::CoreIPCString::toID((WebKit::CoreIPCNSURLRequest *)((char *)this + 288), (__CFString **)cf);
    if (cf[0])
    {
      [v4 setObject:cf[0] forKey:@"boundInterfaceIdentifier"];
      CFTypeRef v40 = cf[0];
      cf[0] = 0;
      if (v40) {
        CFRelease(v40);
      }
    }
  }
  if (*((unsigned char *)this + 305)) {
    objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 304)), @"allowsExpensiveNetworkAccess");
  }
  if (*((unsigned char *)this + 307)) {
    objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 306)), @"allowsConstrainedNetworkAccess");
  }
  if (*((unsigned char *)this + 309)) {
    objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 308)), @"allowsUCA");
  }
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 310)), @"assumesHTTP3Capable");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)this + 311)), @"attribution");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 312)), @"knownTracker");
  if (*((unsigned char *)this + 328))
  {
    WebKit::CoreIPCString::toID((WebKit::CoreIPCNSURLRequest *)((char *)this + 320), (__CFString **)cf);
    if (cf[0])
    {
      [v4 setObject:cf[0] forKey:@"trackerContext"];
      CFTypeRef v41 = cf[0];
      cf[0] = 0;
      if (v41) {
        CFRelease(v41);
      }
    }
  }
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 336)), @"privacyProxyFailClosed");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 337)), @"privacyProxyFailClosedForUnreachableNonMainHosts");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 338)), @"privacyProxyFailClosedForUnreachableHosts");
  if (*((unsigned char *)this + 340)) {
    objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 339)), @"requiresDNSSECValidation");
  }
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 341)), @"allowsPersistentDNS");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 342)), @"prohibitPrivacyProxy");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 343)), @"allowPrivateAccessTokensForThirdParty");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 344)), @"useEnhancedPrivacyMode");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 345)), @"blockTrackers");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 346)), @"failInsecureLoadWithHTTPSDNSRecord");
  objc_msgSend(v4, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)this + 347)), @"isWebSearchContent");
  if (!*((unsigned char *)this + 368)) {
    goto LABEL_58;
  }
  id v23 = objc_alloc(MEMORY[0x1E4F1CA48]);
  if (!*((unsigned char *)this + 368)
    || (uint64_t v24 = [v23 initWithCapacity:*((unsigned int *)this + 91)], !*((unsigned char *)this + 368)))
  {
LABEL_89:
    __break(1u);
    return;
  }
  uint64_t v25 = (void *)v24;
  uint64_t v26 = *((unsigned int *)this + 91);
  if (v26)
  {
    uint64_t v27 = (WebKit::CoreIPCNumber *)*((void *)this + 44);
    uint64_t v28 = 16 * v26;
    do
    {
      WebKit::CoreIPCNumber::toID(v27, cf);
      if (cf[0])
      {
        objc_msgSend(v25, "addObject:");
        CFTypeRef v29 = cf[0];
        cf[0] = 0;
        if (v29) {
          CFRelease(v29);
        }
      }
      uint64_t v27 = (WebKit::CoreIPCNumber *)((char *)v27 + 16);
      v28 -= 16;
    }
    while (v28);
  }
  [v4 setObject:v25 forKey:@"contentDispositionEncodingFallbackArray"];
  if (v25) {
    CFRelease(v25);
  }
LABEL_58:
  *a2 = [objc_alloc(MEMORY[0x1E4F18DA8]) _initWithWebKitPropertyListData:v4];
  if (v4) {
    CFRelease(v4);
  }
}

void sub_199499AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v11) {
    CFRelease(v11);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::VectorDestructor<true,WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (WTF::StringImpl **)((char *)result + 8);
    do
    {
      uint64_t v4 = *v3;
      const void *v3 = 0;
      if (v4) {
        std::default_delete<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>::operator()[abi:sn180100]((uint64_t)v3, (uint64_t)v4);
      }
      uint64_t result = *(v3 - 1);
      *(v3 - 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      CFTypeRef v5 = v3 + 1;
      v3 += 2;
    }
    while (v5 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t std::default_delete<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 16);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit17CoreIPCPlistArrayENS6_22CoreIPCPlistDictionaryENS6_13CoreIPCStringENS6_13CoreIPCNumberENS6_11CoreIPCDateENS6_11CoreIPCDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v3])(&v5, a2);
    }
    *(_DWORD *)(a2 + 16) = -1;
    return MEMORY[0x199740C10](a2, 0x10E2C401DBBE44BLL);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit17CoreIPCPlistArrayENS8_22CoreIPCPlistDictionaryENS8_13CoreIPCStringENS8_13CoreIPCNumberENS8_11CoreIPCDateENS8_11CoreIPCDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJS9_SA_SB_SC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit17CoreIPCPlistArrayENS8_22CoreIPCPlistDictionaryENS8_13CoreIPCStringENS8_13CoreIPCNumberENS8_11CoreIPCDateENS8_11CoreIPCDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJS9_SA_SB_SC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit17CoreIPCPlistArrayENS8_22CoreIPCPlistDictionaryENS8_13CoreIPCStringENS8_13CoreIPCNumberENS8_11CoreIPCDateENS8_11CoreIPCDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJS9_SA_SB_SC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit17CoreIPCPlistArrayENS8_22CoreIPCPlistDictionaryENS8_13CoreIPCStringENS8_13CoreIPCNumberENS8_11CoreIPCDateENS8_11CoreIPCDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJS9_SA_SB_SC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, const void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

WTF::StringImpl *WTF::VectorDestructor<true,std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    uint64_t v8 = v2;
    uint64_t v9 = v3;
    char v5 = result;
    do
    {
      uint64_t v6 = *((unsigned int *)v5 + 6);
      if (v6 != -1) {
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v6])(&v7, (char *)v5 + 8);
      }
      *((_DWORD *)v5 + 6) = -1;
      uint64_t result = *(WTF::StringImpl **)v5;
      *(void *)char v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      char v5 = (WTF::StringImpl *)((char *)v5 + 32);
    }
    while (v5 != a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit13CoreIPCStringENS8_11CoreIPCDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6WebKit13CoreIPCStringENS8_11CoreIPCDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, const void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void WebKit::CoreIPCNSURLRequestData::~CoreIPCNSURLRequestData(WebKit::CoreIPCNSURLRequestData *this, void *a2)
{
  if (*((unsigned char *)this + 368))
  {
    uint64_t v3 = (WTF *)*((void *)this + 44);
    if (v3)
    {
      *((void *)this + 44) = 0;
      *((_DWORD *)this + 90) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  std::__optional_destruct_base<std::tuple<WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 320, (WTF::StringImpl *)a2);
  std::__optional_destruct_base<std::tuple<WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 288, v4);
  if (*((unsigned char *)this + 248)) {
    WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 232, v5);
  }
  if (*((unsigned char *)this + 224))
  {
    uint64_t v6 = (const void *)*((void *)this + 27);
    *((void *)this + 27) = 0;
    if (v6) {
      CFRelease(v6);
    }
  }
  if (*((unsigned char *)this + 208)) {
    WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 192, v5);
  }
  std::__optional_destruct_base<std::tuple<WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 176, (WTF::StringImpl *)v5);
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 88, v7);
  uint64_t v9 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  if (*((unsigned char *)this + 16)) {
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this, v8);
  }
}

uint64_t WebKit::CoreIPCNSURLRequestData::CoreIPCNSURLRequestData(uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v4 = *a2;
    *a2 = 0;
    *(void *)a1 = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(a1 + 8) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(a1 + 12) = v4;
    *(unsigned char *)(a1 + 16) = 1;
  }
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  WTF::URL::URL(a1 + 32, a2 + 4);
  uint64_t v5 = a2[9];
  *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
  *(void *)(a1 + 72) = v5;
  std::__optional_move_base<WebKit::CoreIPCURL,false>::__optional_move_base[abi:sn180100]((unsigned char *)(a1 + 88), (uint64_t)(a2 + 11));
  long long v6 = *(_OWORD *)(a2 + 17);
  long long v7 = *(_OWORD *)(a2 + 19);
  *(_WORD *)(a1 + 168) = *((_WORD *)a2 + 84);
  *(_OWORD *)(a1 + 152) = v7;
  *(_OWORD *)(a1 + 136) = v6;
  *(unsigned char *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  if (*((unsigned char *)a2 + 184))
  {
    uint64_t v8 = a2[22];
    a2[22] = 0;
    *(void *)(a1 + 176) = v8;
    *(unsigned char *)(a1 + 184) = 1;
  }
  *(unsigned char *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  if (*((unsigned char *)a2 + 208))
  {
    *(void *)(a1 + 192) = 0;
    *(void *)(a1 + 200) = 0;
    uint64_t v9 = a2[24];
    a2[24] = 0;
    *(void *)(a1 + 192) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 50);
    *((_DWORD *)a2 + 50) = 0;
    *(_DWORD *)(a1 + 200) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 51);
    *((_DWORD *)a2 + 51) = 0;
    *(_DWORD *)(a1 + 204) = v9;
    *(unsigned char *)(a1 + 208) = 1;
  }
  *(unsigned char *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  if (*((unsigned char *)a2 + 224))
  {
    uint64_t v17 = a2[27];
    a2[27] = 0;
    *(void *)(a1 + 216) = v17;
    *(unsigned char *)(a1 + 224) = 1;
  }
  *(unsigned char *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  if (*((unsigned char *)a2 + 248))
  {
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
    uint64_t v18 = a2[29];
    a2[29] = 0;
    *(void *)(a1 + 232) = v18;
    LODWORD(v18) = *((_DWORD *)a2 + 60);
    *((_DWORD *)a2 + 60) = 0;
    *(_DWORD *)(a1 + 240) = v18;
    LODWORD(v18) = *((_DWORD *)a2 + 61);
    *((_DWORD *)a2 + 61) = 0;
    *(_DWORD *)(a1 + 244) = v18;
    *(unsigned char *)(a1 + 248) = 1;
  }
  long long v10 = *((_OWORD *)a2 + 16);
  *(_OWORD *)(a1 + 265) = *(_OWORD *)((char *)a2 + 265);
  *(_OWORD *)(a1 + 256) = v10;
  *(unsigned char *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  if (*((unsigned char *)a2 + 296))
  {
    uint64_t v11 = a2[36];
    a2[36] = 0;
    *(void *)(a1 + 288) = v11;
    *(unsigned char *)(a1 + 296) = 1;
  }
  uint64_t v12 = a2[38];
  *(unsigned char *)(a1 + 312) = *((unsigned char *)a2 + 312);
  *(void *)(a1 + 304) = v12;
  *(unsigned char *)(a1 + 320) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  if (*((unsigned char *)a2 + 328))
  {
    uint64_t v13 = a2[40];
    a2[40] = 0;
    *(void *)(a1 + 320) = v13;
    *(unsigned char *)(a1 + 328) = 1;
  }
  uint64_t v14 = a2[42];
  *(_DWORD *)(a1 + 344) = *((_DWORD *)a2 + 86);
  *(void *)(a1 + 336) = v14;
  *(unsigned char *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 368) = 0;
  if (*((unsigned char *)a2 + 368))
  {
    *(void *)(a1 + 352) = 0;
    *(void *)(a1 + 360) = 0;
    uint64_t v15 = a2[44];
    a2[44] = 0;
    *(void *)(a1 + 352) = v15;
    LODWORD(v15) = *((_DWORD *)a2 + 90);
    *((_DWORD *)a2 + 90) = 0;
    *(_DWORD *)(a1 + 360) = v15;
    LODWORD(v15) = *((_DWORD *)a2 + 91);
    *((_DWORD *)a2 + 91) = 0;
    *(_DWORD *)(a1 + 364) = v15;
    *(unsigned char *)(a1 + 368) = 1;
  }
  return a1;
}

void sub_19949A134(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v5 = *v3;
  WTF *v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_move_base<WebKit::CoreIPCURL,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    WTF::URL::URL((uint64_t)a1, (uint64_t *)a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_19949A1C0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 32 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  uint64_t v4 = *(unsigned int **)a1;
  if (v3)
  {
    uint64_t v5 = 16 * v3;
    do
    {
      uint64_t v6 = v4[2];
      if (v6 != -1) {
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit13CoreIPCStringENS6_11CoreIPCDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v6])(&v8, v4);
      }
      v4[2] = -1;
      v4 += 4;
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = *(unsigned int **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (uint64_t *)WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::pair[abi:sn180100]((void *)(*(void *)a1 + 32 * *(unsigned int *)(a1 + 12)), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

void *std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::pair[abi:sn180100](void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  *a1 = v3;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

void sub_19949A34C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  uint64_t *v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x19949A4B0);
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    uint64_t v5 = (WTF::StringImpl *)(*(void *)a1 + 32 * *(unsigned int *)(a1 + 12));
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::move(WTF::StringImpl *result, WTF::StringImpl *a2, void *a3)
{
  if (result != a2)
  {
    uint64_t v11 = v3;
    uint64_t v12 = v4;
    unint64_t v7 = result;
    do
    {
      std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::pair[abi:sn180100](a3, (uint64_t *)v7);
      uint64_t v9 = *((unsigned int *)v7 + 6);
      if (v9 != -1) {
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v9])(&v10, (char *)v7 + 8);
      }
      *((_DWORD *)v7 + 6) = -1;
      uint64_t result = *(WTF::StringImpl **)v7;
      *(void *)unint64_t v7 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      a3 += 4;
      unint64_t v7 = (WTF::StringImpl *)((char *)v7 + 32);
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      uint64_t result = (uint64_t)WTF::VectorDestructor<true,std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::destruct((WTF::StringImpl *)(*(void *)result + 32 * a2), (WTF::StringImpl *)(*(void *)result + 32 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >> 27)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(void *)uint64_t v3 = result;
      if ((WTF::StringImpl *)result != v5) {
        uint64_t result = (uint64_t)WTF::VectorMover<false,std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>::move(v5, (WTF::StringImpl *)((char *)v5 + 32 * v4), (void *)result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x19949A6DCLL);
    }
    unint64_t v4 = *(WTF **)a1;
    uint64_t v5 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 12);
    uint64_t v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>>::move(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    uint64_t v7 = result;
    do
    {
      uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCString,WebKit::CoreIPCData>,(std::__variant_detail::_Trait)1>::__move_constructor(a3, v7);
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      if (v8 != -1) {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit13CoreIPCStringENS6_11CoreIPCDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v8])(&v9, v7);
      }
      *(_DWORD *)(v7 + 8) = -1;
      a3 += 16;
      v7 += 16;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCString,WebKit::CoreIPCData>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::CoreIPCString,WebKit::CoreIPCData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCString,WebKit::CoreIPCData>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_19949A7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 8);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit13CoreIPCStringENS6_11CoreIPCDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::CoreIPCString,WebKit::CoreIPCData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCString,WebKit::CoreIPCData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit13CoreIPCStringENS6_11CoreIPCDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EEA0FCB8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit13CoreIPCStringENS8_11CoreIPCDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit13CoreIPCStringENS8_11CoreIPCDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    uint64_t v5 = *(WTF **)result;
    if (v4 > a2)
    {
      char v6 = (char *)v5 + 16 * a2;
      uint64_t v7 = 16 * v4 - 16 * a2;
      do
      {
        uint64_t v8 = *((unsigned int *)v6 + 2);
        if (v8 != -1) {
          uint64_t result = ((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit13CoreIPCStringENS6_11CoreIPCDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v8])(&v9, v6);
        }
        *((_DWORD *)v6 + 2) = -1;
        v6 += 16;
        v7 -= 16;
      }
      while (v7);
      *(_DWORD *)(v3 + 12) = a2;
      uint64_t v5 = *(WTF **)v3;
      LODWORD(v4) = a2;
    }
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(void *)uint64_t v3 = result;
      if ((WTF *)result != v5) {
        uint64_t result = WTF::VectorMover<false,std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>>::move((uint64_t)v5, (uint64_t)v5 + 16 * v4, result);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebKit::CoreIPCNumber,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    int v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      *(_DWORD *)(result + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF **)result;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if (v4 && (WTF *)result != v5)
      {
        uint64_t v6 = 16 * v4;
        uint64_t v7 = v5;
        do
        {
          long long v8 = *(_OWORD *)v7;
          uint64_t v7 = (WTF *)((char *)v7 + 16);
          *(_OWORD *)uint64_t result = v8;
          result += 16;
          v6 -= 16;
        }
        while (v6);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

void **std::invoke[abi:sn180100]<WTF::Visitor<WebKit::CoreIPCNSURLRequest::toID(void)::$_0,WebKit::CoreIPCNSURLRequest::toID(void)::$_1>,WTF::String const&>(void **result, uint64_t a2)
{
  if (a2)
  {
    int v2 = result;
    if (**result)
    {
      uint64_t v3 = (void *)*result[1];
      uint64_t v4 = WTF::StringImpl::operator NSString *();
      if (**v2) {
        uint64_t v5 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v5 = &stru_1EEA10550;
      }
      return (void **)[v3 setObject:v4 forKey:v5];
    }
  }
  return result;
}

uint64_t WebKit::CoreIPCNSValue::valueFromNSValue@<X0>(WebKit::CoreIPCNSValue *this@<X0>, uint64_t a2@<X8>)
{
  if (!strcmp((const char *)[(WebKit::CoreIPCNSValue *)this objCType], "{_NSRange=QQ}"))
  {
    if (!strcmp((const char *)[(WebKit::CoreIPCNSValue *)this objCType], "{_NSRange=QQ}"))
    {
      uint64_t result = [(WebKit::CoreIPCNSValue *)this rangeValue];
      *(void *)(a2 + 8) = result;
      *(void *)(a2 + 16) = v6;
      *(_DWORD *)(a2 + 24) = 0;
      *(_DWORD *)(a2 + 32) = 0;
    }
    else
    {
      uint64_t result = 46;
      __break(0xC471u);
    }
  }
  else
  {
    uint64_t result = WebKit::CoreIPCSecureCoding::CoreIPCSecureCoding((WebKit::CoreIPCSecureCoding *)&v7, this);
    *(void *)(a2 + 8) = v7;
    *(_DWORD *)(a2 + 32) = 1;
  }
  return result;
}

uint64_t WebKit::CoreIPCNSValue::toID@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  int v3 = *(_DWORD *)(this + 32);
  if (v3 == 1)
  {
    uint64_t v4 = *(void *)(this + 8);
    if (v4) {
      this = (uint64_t)CFRetain(*(CFTypeRef *)(this + 8));
    }
    goto LABEL_8;
  }
  if (!v3 && !*(_DWORD *)(this + 24))
  {
    this = objc_msgSend(MEMORY[0x1E4F29238], "valueWithRange:", *(void *)(this + 8), *(void *)(this + 16));
    uint64_t v4 = this;
    if (this) {
      this = (uint64_t)CFRetain((CFTypeRef)this);
    }
LABEL_8:
    *a2 = v4;
    return this;
  }
  this = std::__throw_bad_variant_access[abi:sn180100]();
  __break(1u);
  return this;
}

void sub_19949AC30(_Unwind_Exception *a1)
{
  void *v1 = 0;
  _Unwind_Resume(a1);
}

CFTypeRef WebKit::CoreIPCNull::toID@<X0>(void *a1@<X8>)
{
  CFTypeRef result = (CFTypeRef)[MEMORY[0x1E4F1CA98] null];
  *a1 = result;
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

CFTypeRef WebKit::CoreIPCNull::toCFObject@<X0>(void *a1@<X8>)
{
  CFTypeRef result = (CFTypeRef)*MEMORY[0x1E4F1D260];
  *a1 = *MEMORY[0x1E4F1D260];
  if (result) {
    return CFRetain(result);
  }
  return result;
}

WebKit::CoreIPCPKContact *WebKit::CoreIPCPKContact::CoreIPCPKContact(WebKit::CoreIPCPKContact *this, PKContact *a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 48) = 0;
  MEMORY[0x19972EAD0]((char *)this + 56, [(PKContact *)a2 emailAddress]);
  *((unsigned char *)this + 64) = 0;
  uint64_t v4 = (WTF::StringImpl **)((char *)this + 64);
  *((unsigned char *)this + 80) = 0;
  *((unsigned char *)this + 88) = 0;
  uint64_t v5 = (WTF::StringImpl **)((char *)this + 88);
  *((unsigned char *)this + 160) = 0;
  MEMORY[0x19972EAD0]((char *)this + 168, [(PKContact *)a2 supplementarySubLocality]);
  if ([(PKContact *)a2 name])
  {
    uint64_t v6 = [(PKContact *)a2 name];
    if (*((unsigned char *)this + 48))
    {
      WebKit::CoreIPCPersonNameComponents::CoreIPCPersonNameComponents((WebKit::CoreIPCPersonNameComponents *)&v48, v6);
      long long v8 = v48;
      uint64_t v48 = 0;
      char v9 = *(WTF::StringImpl **)this;
      *(void *)this = v8;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v7);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      uint64_t v10 = v49;
      long long v49 = 0;
      uint64_t v11 = (WTF::StringImpl *)*((void *)this + 1);
      *((void *)this + 1) = v10;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v7);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      uint64_t v12 = v50;
      uint64_t v50 = 0;
      uint64_t v13 = (WTF::StringImpl *)*((void *)this + 2);
      *((void *)this + 2) = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2) {
          WTF::StringImpl::destroy(v13, v7);
        }
        else {
          *(_DWORD *)v13 -= 2;
        }
      }
      uint64_t v14 = v51;
      uint64_t v51 = 0;
      uint64_t v15 = (WTF::StringImpl *)*((void *)this + 3);
      *((void *)this + 3) = v14;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v7);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
      uint64_t v16 = v52;
      uint64_t v52 = 0;
      uint64_t v17 = (WTF::StringImpl *)*((void *)this + 4);
      *((void *)this + 4) = v16;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v7);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
      uint64_t v18 = v53;
      int v53 = 0;
      std::unique_ptr<WebKit::CoreIPCPersonNameComponents>::reset[abi:sn180100]((WebKit::CoreIPCPersonNameComponents **)this + 5, v18);
      WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents(&v48);
    }
    else
    {
      WebKit::CoreIPCPersonNameComponents::CoreIPCPersonNameComponents(this, v6);
      *((unsigned char *)this + 48) = 1;
    }
  }
  if ([(PKContact *)a2 phoneNumber])
  {
    uint64_t v19 = [(PKContact *)a2 phoneNumber];
    if (*((unsigned char *)this + 80))
    {
      WebKit::CoreIPCCNPhoneNumber::CoreIPCCNPhoneNumber((WebKit::CoreIPCCNPhoneNumber *)&v48, v19);
      char v21 = v48;
      uint64_t v48 = 0;
      CFTypeRef v22 = *v4;
      *uint64_t v4 = v21;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v20);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
      id v23 = v49;
      long long v49 = 0;
      uint64_t v24 = (WTF::StringImpl *)*((void *)this + 9);
      *((void *)this + 9) = v23;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
        {
          WTF::StringImpl::destroy(v24, v20);
          uint64_t v25 = v49;
          long long v49 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2) {
              WTF::StringImpl::destroy(v25, v20);
            }
            else {
              *(_DWORD *)v25 -= 2;
            }
          }
        }
        else
        {
          *(_DWORD *)v24 -= 2;
          long long v49 = 0;
        }
      }
      uint64_t v26 = v48;
      uint64_t v48 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, v20);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
    }
    else
    {
      WebKit::CoreIPCCNPhoneNumber::CoreIPCCNPhoneNumber((WebKit::CoreIPCPKContact *)((char *)this + 64), v19);
      *((unsigned char *)this + 80) = 1;
    }
  }
  if ([(PKContact *)a2 postalAddress])
  {
    uint64_t v27 = [(PKContact *)a2 postalAddress];
    if (*((unsigned char *)this + 160))
    {
      WebKit::CoreIPCCNPostalAddress::CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)&v48, v27);
      CFTypeRef v29 = v48;
      uint64_t v48 = 0;
      uint64_t v30 = *v5;
      __CFString *v5 = v29;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2) {
          WTF::StringImpl::destroy(v30, v28);
        }
        else {
          *(_DWORD *)v30 -= 2;
        }
      }
      id v31 = v49;
      long long v49 = 0;
      uint64_t v32 = (WTF::StringImpl *)*((void *)this + 12);
      *((void *)this + 12) = v31;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2) {
          WTF::StringImpl::destroy(v32, v28);
        }
        else {
          *(_DWORD *)v32 -= 2;
        }
      }
      uint64_t v33 = v50;
      uint64_t v50 = 0;
      uint64_t v34 = (WTF::StringImpl *)*((void *)this + 13);
      *((void *)this + 13) = v33;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, v28);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
      uint64_t v35 = v51;
      uint64_t v51 = 0;
      uint64_t v36 = (WTF::StringImpl *)*((void *)this + 14);
      *((void *)this + 14) = v35;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2) {
          WTF::StringImpl::destroy(v36, v28);
        }
        else {
          *(_DWORD *)v36 -= 2;
        }
      }
      uint64_t v37 = v52;
      uint64_t v52 = 0;
      CFTypeRef v38 = (WTF::StringImpl *)*((void *)this + 15);
      *((void *)this + 15) = v37;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2) {
          WTF::StringImpl::destroy(v38, v28);
        }
        else {
          *(_DWORD *)v38 -= 2;
        }
      }
      CFTypeRef v39 = v53;
      int v53 = 0;
      CFTypeRef v40 = (WTF::StringImpl *)*((void *)this + 16);
      *((void *)this + 16) = v39;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2) {
          WTF::StringImpl::destroy(v40, v28);
        }
        else {
          *(_DWORD *)v40 -= 2;
        }
      }
      uint64_t v41 = v54;
      uint64_t v54 = 0;
      long long v42 = (WTF::StringImpl *)*((void *)this + 17);
      *((void *)this + 17) = v41;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2) {
          WTF::StringImpl::destroy(v42, v28);
        }
        else {
          *(_DWORD *)v42 -= 2;
        }
      }
      uint64_t v43 = v55;
      uint64_t v55 = 0;
      int v44 = (WTF::StringImpl *)*((void *)this + 18);
      *((void *)this + 18) = v43;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2) {
          WTF::StringImpl::destroy(v44, v28);
        }
        else {
          *(_DWORD *)v44 -= 2;
        }
      }
      uint64_t v45 = v56;
      uint64_t v56 = 0;
      uint64_t v46 = (WTF::StringImpl *)*((void *)this + 19);
      *((void *)this + 19) = v45;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2) {
          WTF::StringImpl::destroy(v46, v28);
        }
        else {
          *(_DWORD *)v46 -= 2;
        }
      }
      WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)&v48, v28);
    }
    else
    {
      WebKit::CoreIPCCNPostalAddress::CoreIPCCNPostalAddress((WebKit::CoreIPCPKContact *)((char *)this + 88), v27);
      *((unsigned char *)this + 160) = 1;
    }
  }
  return this;
}

void sub_19949B114(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  long long v8 = *v6;
  *uint64_t v6 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  if (*(unsigned char *)(v2 + 160)) {
    WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress(v5, a2);
  }
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100](v4, a2);
  uint64_t v10 = *v3;
  void *v3 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  if (*(unsigned char *)(v2 + 48)) {
    WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents((WebKit::CoreIPCPersonNameComponents **)v2);
  }
  _Unwind_Resume(a1);
}

uint64_t WebKit::CoreIPCPKContact::toID@<X0>(WebKit::CoreIPCPKContact *this@<X0>, void *a2@<X8>)
{
  id v4 = objc_alloc_init((Class)((uint64_t (*)(void))*MEMORY[0x1E4FB6280])());
  if (*((unsigned char *)this + 48))
  {
    WebKit::CoreIPCPersonNameComponents::toID(this, &cf);
    [v4 setName:cf];
    CFTypeRef v5 = cf;
    CFTypeRef cf = 0;
    if (v5) {
      CFRelease(v5);
    }
  }
  if (*((unsigned char *)this + 80))
  {
    WebKit::CoreIPCCNPhoneNumber::toID((WebKit::CoreIPCPKContact *)((char *)this + 64), &cf);
    [v4 setPhoneNumber:cf];
    CFTypeRef v6 = cf;
    CFTypeRef cf = 0;
    if (v6) {
      CFRelease(v6);
    }
  }
  if (*((unsigned char *)this + 160))
  {
    WebKit::CoreIPCCNPostalAddress::toID((WebKit::CoreIPCPKContact *)((char *)this + 88), &cf);
    CFTypeRef v7 = cf;
    [v4 setPostalAddress:cf];
    if (v7) {
      CFRelease(v7);
    }
  }
  if (*((void *)this + 7)) {
    uint64_t v8 = WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v8 = 0;
  }
  [v4 setEmailAddress:v8];
  if (*((void *)this + 21)) {
    uint64_t v9 = WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t result = [v4 setSupplementarySubLocality:v9];
  *a2 = v4;
  return result;
}

void sub_19949B2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCPersonNameComponents *std::unique_ptr<WebKit::CoreIPCPersonNameComponents>::reset[abi:sn180100](WebKit::CoreIPCPersonNameComponents **a1, WebKit::CoreIPCPersonNameComponents *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents(result);
    return (WebKit::CoreIPCPersonNameComponents *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents(WebKit::CoreIPCPersonNameComponents **this)
{
  std::unique_ptr<WebKit::CoreIPCPersonNameComponents>::reset[abi:sn180100](this + 5, 0);
  int v3 = this[4];
  this[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  id v4 = this[3];
  this[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  CFTypeRef v5 = this[2];
  this[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  CFTypeRef v6 = this[1];
  this[1] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  CFTypeRef v7 = *this;
  *this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
}

WebKit::CoreIPCPersonNameComponents *WebKit::CoreIPCPersonNameComponents::CoreIPCPersonNameComponents(WebKit::CoreIPCPersonNameComponents *this, NSPersonNameComponents *a2)
{
  MEMORY[0x19972EAD0](this, [(NSPersonNameComponents *)a2 namePrefix]);
  MEMORY[0x19972EAD0]((char *)this + 8, [(NSPersonNameComponents *)a2 givenName]);
  MEMORY[0x19972EAD0]((char *)this + 16, [(NSPersonNameComponents *)a2 middleName]);
  MEMORY[0x19972EAD0]((char *)this + 24, [(NSPersonNameComponents *)a2 familyName]);
  MEMORY[0x19972EAD0]((char *)this + 32, [(NSPersonNameComponents *)a2 nickname]);
  *((void *)this + 5) = 0;
  if ([(NSPersonNameComponents *)a2 phoneticRepresentation])
  {
    id v4 = [(NSPersonNameComponents *)a2 phoneticRepresentation];
    CFTypeRef v5 = (WebKit::CoreIPCPersonNameComponents *)WTF::fastMalloc((WTF *)0x30);
    WebKit::CoreIPCPersonNameComponents::CoreIPCPersonNameComponents(v5, v4);
    std::unique_ptr<WebKit::CoreIPCPersonNameComponents>::reset[abi:sn180100]((WebKit::CoreIPCPersonNameComponents **)this + 5, v5);
  }
  return this;
}

void sub_19949B534(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v8, a2);
  std::unique_ptr<WebKit::CoreIPCPersonNameComponents>::reset[abi:sn180100](v7, 0);
  uint64_t v11 = *v6;
  *CFTypeRef v6 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = *v5;
  WebKit::CoreIPCPersonNameComponents *v5 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = *v4;
  *id v4 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v10);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = *v3;
  WTF::StringImpl *v3 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v10);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = *v2;
  WTF::StringImpl *v2 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v10);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCPersonNameComponents::toID(WebKit::CoreIPCPersonNameComponents *this@<X0>, void *a2@<X8>)
{
  id v4 = objc_opt_new();
  if (*(void *)this) {
    uint64_t v5 = WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v5 = 0;
  }
  [v4 setNamePrefix:v5];
  if (*((void *)this + 1)) {
    uint64_t v6 = WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v6 = 0;
  }
  [v4 setGivenName:v6];
  if (*((void *)this + 2)) {
    uint64_t v7 = WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v7 = 0;
  }
  [v4 setMiddleName:v7];
  if (*((void *)this + 3)) {
    uint64_t v8 = WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v8 = 0;
  }
  [v4 setFamilyName:v8];
  if (*((void *)this + 4)) {
    uint64_t v9 = WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v9 = 0;
  }
  [v4 setNickname:v9];
  uint64_t v10 = (WebKit::CoreIPCPersonNameComponents *)*((void *)this + 5);
  if (v10)
  {
    WebKit::CoreIPCPersonNameComponents::toID((uint64_t *)&v12, v10);
    uint64_t v11 = v12;
    [v4 setPhoneticRepresentation:v12];
    if (v11) {
      CFRelease(v11);
    }
  }
  *a2 = v4;
}

void sub_19949B748(_Unwind_Exception *exception_object)
{
  if (v2) {
    CFRelease(v2);
  }
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCPlistArray *WebKit::CoreIPCPlistArray::CoreIPCPlistArray(WebKit::CoreIPCPlistArray *this, NSArray *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v5 = [(NSArray *)a2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(a2);
        }
        uint64_t v8 = *(objc_object **)(*((void *)&v15 + 1) + 8 * i);
        if (WebKit::CoreIPCPlistObject::isPlistType((WebKit::CoreIPCPlistObject *)v8, v4))
        {
          WebKit::CoreIPCPlistObject::CoreIPCPlistObject((WebKit::CoreIPCPlistObject *)&v14, v8);
          uint64_t v9 = *((unsigned int *)this + 3);
          if (v9 == *((_DWORD *)this + 2))
          {
            uint64_t v10 = (objc_object **)WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v9 + 1, (unint64_t)&v14);
            uint64_t v9 = *((unsigned int *)this + 3);
            uint64_t v11 = *(void *)this;
            uint64_t v12 = *v10;
            *uint64_t v10 = 0;
          }
          else
          {
            uint64_t v11 = *(void *)this;
            uint64_t v12 = v14;
            uint64_t v14 = 0;
          }
          *(void *)(v11 + 8 * v9) = v12;
          *((_DWORD *)this + 3) = v9 + 1;
          id v4 = v14;
          uint64_t v14 = 0;
          if (v4) {
            std::default_delete<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>::operator()[abi:sn180100]((uint64_t)&v14, (uint64_t)v4);
          }
        }
      }
      uint64_t v5 = [(NSArray *)a2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v5);
  }
  return this;
}

void sub_19949B8E4(_Unwind_Exception *a1, void *a2)
{
  WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(a1);
}

void *WebKit::CoreIPCPlistArray::toID@<X0>(WebKit::CoreIPCPlistObject **this@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)this + 3)];
  uint64_t v5 = result;
  uint64_t v6 = *((unsigned int *)this + 3);
  if (v6)
  {
    uint64_t v7 = *this;
    uint64_t v8 = 8 * v6;
    do
    {
      uint64_t result = (void *)WebKit::CoreIPCPlistObject::toID(v7);
      uint64_t v9 = cf;
      CFTypeRef cf = 0;
      if (v9)
      {
        CFRelease(v9);
        uint64_t result = (void *)[v5 addObject:v9];
      }
      uint64_t v7 = (WebKit::CoreIPCPlistObject *)((char *)v7 + 8);
      v8 -= 8;
    }
    while (v8);
  }
  *a2 = v5;
  return result;
}

void sub_19949B9C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    id v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      a2 = *(void **)v4;
      *(void *)id v4 = 0;
      if (a2) {
        std::default_delete<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>::operator()[abi:sn180100]((uint64_t)v4, (uint64_t)a2);
      }
      id v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

unint64_t WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19949BB78);
    }
    id v4 = *(WTF **)a1;
    uint64_t v5 = (uint64_t *)(*(void *)a1 + 8 * *(unsigned int *)(a1 + 12));
    uint64_t v6 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::CoreIPCPlistObject>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebKit::CoreIPCPlistObject>::move(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v5 = (uint64_t *)result;
    do
    {
      uint64_t v6 = *v5;
      uint64_t *v5 = 0;
      *a3 = v6;
      uint64_t v7 = *v5;
      uint64_t *v5 = 0;
      if (v7) {
        uint64_t result = std::default_delete<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>::operator()[abi:sn180100]((uint64_t)v5, v7);
      }
      ++a3;
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

NSUInteger WebKit::CoreIPCPlistDictionary::CoreIPCPlistDictionary(WebKit::CoreIPCPlistDictionary *this, NSDictionary *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  NSUInteger result = [(NSDictionary *)a2 count];
  int v5 = result;
  if (result)
  {
    if (result >> 28)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v6 = WTF::fastMalloc((WTF *)(16 * result));
    *((_DWORD *)this + 2) = v5;
    *(void *)this = v6;
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  NSUInteger v7 = [(NSDictionary *)a2 countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v30;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v30 != v8) {
          objc_enumerationMutation(a2);
        }
        uint64_t v10 = *(void *)(*((void *)&v29 + 1) + 8 * v9);
        uint64_t v11 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", v10, v25);
        if (v10)
        {
          uint64_t v12 = v11;
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            if (WebKit::CoreIPCPlistObject::isPlistType((WebKit::CoreIPCPlistObject *)v12, v13))
            {
              MEMORY[0x19972EAD0](&v26, v10);
              WebKit::CoreIPCPlistObject::CoreIPCPlistObject((WebKit::CoreIPCPlistObject *)&v25, v12);
              long long v15 = v25;
              uint64_t v14 = v26;
              uint64_t v25 = 0;
              uint64_t v26 = 0;
              uint64_t v27 = v14;
              uint64_t v28 = v15;
              uint64_t v16 = *((unsigned int *)this + 3);
              if (v16 == *((_DWORD *)this + 2))
              {
                WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>>((uint64_t)this, (unint64_t)&v27);
              }
              else
              {
                int v17 = v16 + 1;
                long long v18 = (WTF::StringImpl **)(*(void *)this + 16 * v16);
                uint64_t v27 = 0;
                *long long v18 = v14;
                uint64_t v19 = v28;
                uint64_t v28 = 0;
                v18[1] = v19;
                *((_DWORD *)this + 3) = v17;
              }
              uint64_t v20 = v28;
              uint64_t v28 = 0;
              if (v20) {
                std::default_delete<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>::operator()[abi:sn180100]((uint64_t)&v28, (uint64_t)v20);
              }
              char v21 = v27;
              uint64_t v27 = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 2) {
                  WTF::StringImpl::destroy(v21, v20);
                }
                else {
                  *(_DWORD *)v21 -= 2;
                }
              }
              CFTypeRef v22 = v25;
              uint64_t v25 = 0;
              if (v22) {
                std::default_delete<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>::operator()[abi:sn180100]((uint64_t)&v25, (uint64_t)v22);
              }
              id v23 = v26;
              uint64_t v26 = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2) {
                  WTF::StringImpl::destroy(v23, v22);
                }
                else {
                  *(_DWORD *)v23 -= 2;
                }
              }
            }
          }
        }
        ++v9;
      }
      while (v7 != v9);
      NSUInteger v24 = [(NSDictionary *)a2 countByEnumeratingWithState:&v29 objects:v33 count:16];
      NSUInteger v7 = v24;
    }
    while (v24);
  }
  return (NSUInteger)this;
}

void sub_19949BE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>::~KeyValuePair(&a11);
  uint64_t v13 = a9;
  a9 = 0;
  if (v13) {
    std::default_delete<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>::operator()[abi:sn180100]((uint64_t)&a9, (uint64_t)v13);
  }
  uint64_t v14 = a10;
  a10 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11, v13);
  _Unwind_Resume(a1);
}

WTF::StringImpl **WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>::~KeyValuePair(WTF::StringImpl **a1)
{
  id v4 = a1[1];
  int v2 = a1 + 1;
  unint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>::operator()[abi:sn180100]((uint64_t)v2, (uint64_t)v3);
  }
  int v5 = *a1;
  *a1 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

void WebKit::CoreIPCPlistDictionary::toID(WebKit::CoreIPCString **this@<X0>, void *a2@<X8>)
{
  id v4 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:*((unsigned int *)this + 3)];
  uint64_t v5 = *((unsigned int *)this + 3);
  if (v5)
  {
    uint64_t v6 = *this;
    NSUInteger v7 = (WebKit::CoreIPCString *)((char *)v6 + 16 * v5);
    while (1)
    {
      WebKit::CoreIPCString::toID(v6, (__CFString **)&v12);
      uint64_t v8 = (char *)v6 + 8;
      ((void (*)(CFTypeRef *__return_ptr, char *))WebKit::CoreIPCPlistObject::toID)(&cf, v8);
      CFTypeRef v9 = v12;
      if (!v12) {
        goto LABEL_6;
      }
      if (cf) {
        break;
      }
      CFTypeRef v12 = 0;
LABEL_9:
      CFRelease(v9);
LABEL_10:
      uint64_t v6 = (WebKit::CoreIPCString *)(v8 + 8);
      if (v6 == v7) {
        goto LABEL_11;
      }
    }
    objc_msgSend(v4, "setObject:forKey:");
LABEL_6:
    CFTypeRef v10 = cf;
    CFTypeRef cf = 0;
    if (v10) {
      CFRelease(v10);
    }
    CFTypeRef v9 = v12;
    CFTypeRef v12 = 0;
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_11:
  *a2 = v4;
}

void sub_19949BFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, CFTypeRef a10)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a10) {
    CFRelease(a10);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19949C018()
{
}

uint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 16 * v3));
  }
  id v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>>(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  int v5 = v4 + 1;
  uint64_t v6 = (void *)(*(void *)a1 + 16 * v4);
  uint64_t v7 = *v3;
  uint64_t *v3 = 0;
  *uint64_t v6 = v7;
  uint64_t v8 = v3[1];
  v3[1] = 0;
  v6[1] = v8;
  *(_DWORD *)(a1 + 12) = v5;
  return 1;
}

unint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x19949C208);
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    uint64_t v5 = (WTF::StringImpl *)(*(void *)a1 + 16 * *(unsigned int *)(a1 + 12));
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>>::move(WTF::StringImpl *result, WTF::StringImpl *a2, void *a3)
{
  if (result != a2)
  {
    uint64_t v5 = (WTF::StringImpl **)((char *)result + 8);
    do
    {
      uint64_t v6 = (uint64_t)*(v5 - 1);
      *(v5 - 1) = 0;
      *a3 = v6;
      unint64_t v7 = *v5;
      WTF::StringImpl *v5 = 0;
      a3[1] = v7;
      unint64_t v8 = *v5;
      WTF::StringImpl *v5 = 0;
      if (v8) {
        std::default_delete<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>::operator()[abi:sn180100]((uint64_t)v5, (uint64_t)v8);
      }
      NSUInteger result = *(v5 - 1);
      *(v5 - 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          NSUInteger result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      unint64_t v9 = (WTF::StringImpl *)(v5 + 1);
      v5 += 2;
      a3 += 2;
    }
    while (v9 != a2);
  }
  return result;
}

uint64_t WebKit::CoreIPCPlistObject::isPlistType(WebKit::CoreIPCPlistObject *this, objc_object *a2)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    char isKindOfClass = 1;
  }
  else
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  return isKindOfClass & 1;
}

void WebKit::CoreIPCPlistObject::CoreIPCPlistObject(WebKit::CoreIPCPlistObject *this, NSArray *a2)
{
  switch(IPC::typeFromObject((IPC *)a2, (objc_object *)a2))
  {
    case 0u:
      WebKit::CoreIPCPlistArray::CoreIPCPlistArray((WebKit::CoreIPCPlistArray *)&v13, a2);
      unint64_t v10 = v13;
      uint64_t v6 = v14;
      unint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v11 = v6;
      int v12 = 0;
      WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v7);
      goto LABEL_4;
    case 2u:
      if (a2) {
        CFRetain(a2);
      }
      unint64_t v10 = (unint64_t)a2;
      int v5 = 5;
      goto LABEL_3;
    case 3u:
      unint64_t v10 = MEMORY[0x19972B790](a2);
      int v5 = 4;
      goto LABEL_3;
    case 5u:
      WebKit::CoreIPCPlistDictionary::CoreIPCPlistDictionary((WebKit::CoreIPCPlistDictionary *)&v13, (NSDictionary *)a2);
      unint64_t v10 = v13;
      uint64_t v8 = v14;
      unint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v11 = v8;
      int v12 = 1;
      WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v9);
      goto LABEL_4;
    case 8u:
      unint64_t v10 = WebKit::CoreIPCNumber::numberHolderForNumber((WebKit::CoreIPCNumber *)a2, v3);
      uint64_t v11 = v4;
      int v5 = 3;
      goto LABEL_3;
    case 0xBu:
      MEMORY[0x19972EAD0](&v10, a2);
      int v5 = 2;
LABEL_3:
      int v12 = v5;
LABEL_4:
      WTF::makeUniqueRefWithoutFastMallocCheck<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>,std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>();
    default:
      __break(0xC471u);
      JUMPOUT(0x19949C484);
  }
}

void sub_19949C4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  if (a12 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit17CoreIPCPlistArrayENS6_22CoreIPCPlistDictionaryENS6_13CoreIPCStringENS6_13CoreIPCNumberENS6_11CoreIPCDateENS6_11CoreIPCDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[a12])(&a14, &a10);
  }
  _Unwind_Resume(exception_object);
}

void WTF::makeUniqueRefWithoutFastMallocCheck<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>,std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>()
{
}

void sub_19949C59C(_Unwind_Exception *a1)
{
  MEMORY[0x199740C10](v1, 0x10E2C401DBBE44BLL);
  _Unwind_Resume(a1);
}

uint64_t *IPC::ArgumentCoder<WTF::UniqueRef<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  NSUInteger result = IPC::Decoder::decode<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>(a1, (uint64_t)v4);
  if (v4[24]) {
    WTF::makeUniqueRefWithoutFastMallocCheck<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>,std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>();
  }
  *a2 = 0;
  a2[8] = 0;
  return result;
}

void sub_19949C798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, int a16, int a17, char a18)
{
  if (a18)
  {
    if (a16 != -1) {
      ((void (*)(char *, __int16 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit17CoreIPCPlistArrayENS6_22CoreIPCPlistDictionaryENS6_13CoreIPCStringENS6_13CoreIPCNumberENS6_11CoreIPCDateENS6_11CoreIPCDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[a16])(&a10, &a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  NSUInteger result = IPC::ArgumentCoder<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24)) {
    return (uint64_t *)IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

void sub_19949C814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 24))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 16);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit17CoreIPCPlistArrayENS6_22CoreIPCPlistDictionaryENS6_13CoreIPCStringENS6_13CoreIPCNumberENS6_11CoreIPCDateENS6_11CoreIPCDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v15])(&a13, v13);
    }
    *(_DWORD *)(v13 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_19949C890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 16);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit17CoreIPCPlistArrayENS6_22CoreIPCPlistDictionaryENS6_13CoreIPCStringENS6_13CoreIPCNumberENS6_11CoreIPCDateENS6_11CoreIPCDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    NSUInteger result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN6WebKit17CoreIPCPlistArrayENS6_22CoreIPCPlistDictionaryENS6_13CoreIPCStringENS6_13CoreIPCNumberENS6_11CoreIPCDateENS6_11CoreIPCDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    NSUInteger result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN6WebKit17CoreIPCPlistArrayENS6_22CoreIPCPlistDictionaryENS6_13CoreIPCStringENS6_13CoreIPCNumberENS6_11CoreIPCDateENS6_11CoreIPCDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit17CoreIPCPlistArrayENS8_22CoreIPCPlistDictionaryENS8_13CoreIPCStringENS8_13CoreIPCNumberENS8_11CoreIPCDateENS8_11CoreIPCDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SA_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit17CoreIPCPlistArrayENS8_22CoreIPCPlistDictionaryENS8_13CoreIPCStringENS8_13CoreIPCNumberENS8_11CoreIPCDateENS8_11CoreIPCDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SA_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit17CoreIPCPlistArrayENS8_22CoreIPCPlistDictionaryENS8_13CoreIPCStringENS8_13CoreIPCNumberENS8_11CoreIPCDateENS8_11CoreIPCDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SA_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit17CoreIPCPlistArrayENS8_22CoreIPCPlistDictionaryENS8_13CoreIPCStringENS8_13CoreIPCNumberENS8_11CoreIPCDateENS8_11CoreIPCDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SA_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit17CoreIPCPlistArrayENS8_22CoreIPCPlistDictionaryENS8_13CoreIPCStringENS8_13CoreIPCNumberENS8_11CoreIPCDateENS8_11CoreIPCDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SA_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN6WebKit17CoreIPCPlistArrayENS8_22CoreIPCPlistDictionaryENS8_13CoreIPCStringENS8_13CoreIPCNumberENS8_11CoreIPCDateENS8_11CoreIPCDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS9_SA_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t IPC::ArgumentCoder<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>,void>::encode<IPC::Encoder,std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19949CAC8);
  }
  unsigned char *v5 = v4;
  switch((int)v4)
  {
    case 0:
      if (*(_DWORD *)(a2 + 16)) {
        goto LABEL_20;
      }
      uint64_t result = IPC::ArgumentCoder<WebKit::CoreIPCPlistArray,void>::encode(a1, a2);
      break;
    case 1:
      if (*(_DWORD *)(a2 + 16) != 1) {
        goto LABEL_20;
      }
      uint64_t result = IPC::ArgumentCoder<WebKit::CoreIPCPlistDictionary,void>::encode(a1, a2);
      break;
    case 2:
      if (*(_DWORD *)(a2 + 16) != 2) {
        goto LABEL_20;
      }
      uint64_t result = (uint64_t)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
      break;
    case 3:
      if (*(_DWORD *)(a2 + 16) != 3)
      {
LABEL_20:
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_21;
      }
      uint64_t result = (uint64_t)IPC::ArgumentCoder<WebKit::CoreIPCNumber,void>::encode(a1, (void *)a2);
      break;
    default:
LABEL_21:
      uint64_t result = (uint64_t)IPC::ArgumentCoder<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>,void>::encode<IPC::Encoder,std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData> const&,0ul,1ul,2ul,3ul>(a1, (WebKit::CoreIPCData *)a2, v4);
      break;
  }
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>,void>::encode<IPC::Encoder,std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData> const&,0ul,1ul,2ul,3ul>(IPC::Encoder *result, WebKit::CoreIPCData *a2, uint64_t a3)
{
  if (a3 != 5)
  {
    if (a3 != 4) {
      return result;
    }
    if (*((_DWORD *)a2 + 4) == 4)
    {
      double v3 = *(double *)a2;
      return (IPC::Encoder *)IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(result, v3);
    }
LABEL_12:
    uint64_t v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)IPC::ArgumentCoder<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>,void>::decode<IPC::Decoder>(v4);
  }
  if (*((_DWORD *)a2 + 4) != 5) {
    goto LABEL_12;
  }

  return (IPC::Encoder *)IPC::ArgumentCoder<WebKit::CoreIPCData,void>::encode(result, a2);
}

uint64_t *IPC::ArgumentCoder<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  int v2 = result;
  unint64_t v4 = result[1];
  uint64_t v5 = *result;
  unint64_t v6 = result[2] - *result;
  if (v4 <= v6)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t *result = 0;
    result[1] = 0;
    uint64_t v13 = result[3];
    if (v13)
    {
      uint64_t v19 = v2;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v5, v4);
        int v2 = v19;
        uint64_t v12 = *v19;
        unint64_t v11 = v19[1];
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_17;
  }
  char v7 = (unsigned char *)(v5 + v6);
  result[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    unint64_t v11 = v4;
    uint64_t v12 = 0;
LABEL_17:
    uint64_t *v2 = 0;
    v2[1] = 0;
    uint64_t result = (uint64_t *)v2[3];
    if (result && v11) {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v12);
    }
    goto LABEL_18;
  }
  uint64_t v8 = *v7;
  if (v8 >= 6)
  {
LABEL_18:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    return result;
  }
  if (!*v7)
  {
    uint64_t result = (uint64_t *)IPC::Decoder::decode<WebKit::CoreIPCPlistArray>((uint64_t)&v20, result);
    char v9 = v21;
    if (v21)
    {
      *(void *)a2 = v20;
      uint64_t v15 = *((void *)&v20 + 1);
      long long v20 = 0uLL;
      *(void *)(a2 + 8) = v15;
      *(_DWORD *)(a2 + 16) = 0;
      uint64_t result = (uint64_t *)WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v14);
      goto LABEL_13;
    }
    goto LABEL_21;
  }
  switch(v8)
  {
    case 1:
      uint64_t result = IPC::Decoder::decode<WebKit::CoreIPCPlistDictionary>(&v20, result);
      if (v21)
      {
        *(void *)a2 = v20;
        uint64_t v17 = *((void *)&v20 + 1);
        long long v20 = 0uLL;
        *(void *)(a2 + 8) = v17;
        char v18 = 1;
        *(_DWORD *)(a2 + 16) = 1;
        uint64_t result = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v16);
      }
      else
      {
        char v18 = 0;
        *(unsigned char *)a2 = 0;
      }
      *(unsigned char *)(a2 + 24) = v18;
      break;
    case 2:
      uint64_t result = (uint64_t *)IPC::Decoder::decode<WebKit::CoreIPCString>((IPC::Decoder *)result, (uint64_t)&v20);
      char v9 = BYTE8(v20);
      if (BYTE8(v20))
      {
        *(void *)a2 = v20;
        int v10 = 2;
        goto LABEL_12;
      }
LABEL_21:
      *(unsigned char *)a2 = 0;
      goto LABEL_14;
    case 3:
      uint64_t result = (uint64_t *)IPC::Decoder::decode<WebKit::CoreIPCNumber>(result, &v20);
      char v9 = v21;
      if (v21)
      {
        *(_OWORD *)a2 = v20;
        int v10 = 3;
LABEL_12:
        *(_DWORD *)(a2 + 16) = v10;
LABEL_13:
        char v9 = 1;
LABEL_14:
        *(unsigned char *)(a2 + 24) = v9;
        return result;
      }
      goto LABEL_21;
    default:
      return (uint64_t *)IPC::ArgumentCoder<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>,void>::decode<IPC::Decoder,0ul,1ul,2ul,3ul>(a2, result, v8);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::CoreIPCPlistArray>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::CoreIPCPlistArray,void>::decode(a2, a2, a1);
  if (!*(unsigned char *)(a1 + 16))
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_19949CE8C(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<WebKit::CoreIPCPlistDictionary>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::CoreIPCPlistDictionary,void>::decode(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16)) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_19949CEE4(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>,void>::decode<IPC::Decoder,0ul,1ul,2ul,3ul>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (a3 == 4)
  {
    uint64_t result = IPC::Decoder::decode<WTF::MonotonicTime>(a2);
    if (!v5)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 24) = 0;
      return result;
    }
    *(void *)a1 = result;
    int v6 = 4;
  }
  else
  {
    uint64_t result = (uint64_t)IPC::Decoder::decode<WebKit::CoreIPCData>((IPC::Decoder *)a2, &v8);
    char v7 = v9;
    if (!v9)
    {
      *(unsigned char *)a1 = 0;
      goto LABEL_9;
    }
    *(void *)a1 = v8;
    int v6 = 5;
  }
  *(_DWORD *)(a1 + 16) = v6;
  char v7 = 1;
LABEL_9:
  *(unsigned char *)(a1 + 24) = v7;
  return result;
}

WebKit::CoreIPCPresentationIntent *WebKit::CoreIPCPresentationIntent::CoreIPCPresentationIntent(WebKit::CoreIPCPresentationIntent *this, NSPresentationIntent *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  *(void *)this = [(NSPresentationIntent *)a2 intentKind];
  NSInteger v4 = [(NSPresentationIntent *)a2 identity];
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 1) = v4;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  if ([(NSPresentationIntent *)a2 parentIntent])
  {
    char v5 = [(NSPresentationIntent *)a2 parentIntent];
    int v6 = (WebKit::CoreIPCPresentationIntent *)WTF::fastMalloc((WTF *)0x58);
    WebKit::CoreIPCPresentationIntent::CoreIPCPresentationIntent(v6, v5);
    uint64_t v27 = 0;
    std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100]((WTF::StringImpl **)this + 2, v6);
    std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100](&v27, 0);
  }
  switch(*(void *)this)
  {
    case 1:
      *((void *)this + 7) = [(NSPresentationIntent *)a2 headerLevel];
      return this;
    case 4:
      *((void *)this + 9) = [(NSPresentationIntent *)a2 ordinal];
      return this;
    case 5:
      MEMORY[0x19972EAD0](&v27, [(NSPresentationIntent *)a2 languageHint]);
      uint64_t v8 = v27;
      uint64_t v27 = 0;
      char v9 = (WTF::StringImpl *)*((void *)this + 8);
      *((void *)this + 8) = v8;
      if (!v9) {
        return this;
      }
      int v10 = *(_DWORD *)v9 - 2;
      if (*(_DWORD *)v9 != 2) {
        goto LABEL_10;
      }
      WTF::StringImpl::destroy(v9, v7);
      char v9 = v27;
      uint64_t v27 = 0;
      if (v9)
      {
        int v10 = *(_DWORD *)v9 - 2;
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v11);
        }
        else {
LABEL_10:
        }
          *(_DWORD *)char v9 = v10;
      }
      return this;
    case 8:
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      uint64_t v12 = [(NSPresentationIntent *)a2 columnAlignments];
      uint64_t v13 = [(NSArray *)v12 countByEnumeratingWithState:&v23 objects:v28 count:16];
      if (v13)
      {
        uint64_t v14 = *(void *)v24;
        do
        {
          for (uint64_t i = 0; i != v13; ++i)
          {
            if (*(void *)v24 != v14) {
              objc_enumerationMutation(v12);
            }
            uint64_t v16 = [*(id *)(*((void *)&v23 + 1) + 8 * i) unsignedIntegerValue];
            unint64_t v17 = *((unsigned int *)this + 11);
            if (v17 == *((_DWORD *)this + 10))
            {
              unint64_t v18 = v17 + (v17 >> 2);
              if (v18 >= 0x10) {
                unint64_t v19 = v18 + 1;
              }
              else {
                unint64_t v19 = 16;
              }
              if (v19 <= v17 + 1) {
                unint64_t v20 = v17 + 1;
              }
              else {
                unint64_t v20 = v19;
              }
              WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)this + 32, v20);
              unint64_t v17 = *((unsigned int *)this + 11);
              char v21 = (uint64_t *)(*((void *)this + 4) + 8 * v17);
            }
            else
            {
              char v21 = (uint64_t *)(*((void *)this + 4) + 8 * v17);
            }
            *char v21 = v16;
            *((_DWORD *)this + 11) = v17 + 1;
          }
          uint64_t v13 = [(NSArray *)v12 countByEnumeratingWithState:&v23 objects:v28 count:16];
        }
        while (v13);
      }
      *((void *)this + 6) = [(NSPresentationIntent *)a2 columnCount];
      return this;
    case 0xALL:
      *((void *)this + 10) = [(NSPresentationIntent *)a2 row];
      return this;
    case 0xBLL:
      *((void *)this + 3) = [(NSPresentationIntent *)a2 column];
      return this;
    default:
      return this;
  }
}

void sub_19949D240(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  int v6 = *(WTF::StringImpl **)(v2 + 64);
  *(void *)(v2 + 64) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  char v7 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 32) = 0;
    *(_DWORD *)(v2 + 40) = 0;
    WTF::fastFree(v7, a2);
  }
  std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100](v3, 0);
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCPresentationIntent::toID(WebKit::CoreIPCPresentationIntent *this@<X0>, void *a2@<X8>)
{
  NSInteger v4 = (WebKit::CoreIPCPresentationIntent *)*((void *)this + 2);
  if (v4) {
    WebKit::CoreIPCPresentationIntent::toID((uint64_t *)&v31, v4);
  }
  else {
    long long v31 = 0;
  }
  switch(*(void *)this)
  {
    case 0:
      uint64_t v5 = *((void *)this + 1);
      int v6 = v31;
      char v7 = (const void *)[MEMORY[0x1E4F28F78] paragraphIntentWithIdentity:v5 nestedInsideIntent:v31];
      *a2 = v7;
      if (v7) {
        goto LABEL_36;
      }
      break;
    case 1:
      uint64_t v8 = *((void *)this + 1);
      uint64_t v9 = *((void *)this + 7);
      int v6 = v31;
      char v7 = (const void *)[MEMORY[0x1E4F28F78] headerIntentWithIdentity:v8 level:v9 nestedInsideIntent:v31];
      *a2 = v7;
      if (v7) {
        goto LABEL_36;
      }
      break;
    case 2:
      uint64_t v10 = *((void *)this + 1);
      int v6 = v31;
      char v7 = (const void *)[MEMORY[0x1E4F28F78] orderedListIntentWithIdentity:v10 nestedInsideIntent:v31];
      *a2 = v7;
      if (v7) {
        goto LABEL_36;
      }
      break;
    case 3:
      uint64_t v11 = *((void *)this + 1);
      int v6 = v31;
      char v7 = (const void *)[MEMORY[0x1E4F28F78] unorderedListIntentWithIdentity:v11 nestedInsideIntent:v31];
      *a2 = v7;
      if (v7) {
        goto LABEL_36;
      }
      break;
    case 4:
      uint64_t v12 = *((void *)this + 1);
      uint64_t v13 = *((void *)this + 9);
      int v6 = v31;
      char v7 = (const void *)[MEMORY[0x1E4F28F78] listItemIntentWithIdentity:v12 ordinal:v13 nestedInsideIntent:v31];
      *a2 = v7;
      if (v7) {
        goto LABEL_36;
      }
      break;
    case 5:
      uint64_t v14 = (void *)MEMORY[0x1E4F28F78];
      uint64_t v15 = *((void *)this + 1);
      if (*((void *)this + 8)) {
        uint64_t v16 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v16 = &stru_1EEA10550;
      }
      int v6 = v31;
      char v7 = (const void *)[v14 codeBlockIntentWithIdentity:v15 languageHint:v16 nestedInsideIntent:v31];
      *a2 = v7;
      if (v7) {
        goto LABEL_36;
      }
      break;
    case 6:
      uint64_t v17 = *((void *)this + 1);
      int v6 = v31;
      char v7 = (const void *)[MEMORY[0x1E4F28F78] blockQuoteIntentWithIdentity:v17 nestedInsideIntent:v31];
      *a2 = v7;
      if (v7) {
        goto LABEL_36;
      }
      break;
    case 7:
      uint64_t v18 = *((void *)this + 1);
      int v6 = v31;
      char v7 = (const void *)[MEMORY[0x1E4F28F78] thematicBreakIntentWithIdentity:v18 nestedInsideIntent:v31];
      *a2 = v7;
      if (v7) {
        goto LABEL_36;
      }
      break;
    case 8:
      unint64_t v19 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)this + 11)];
      uint64_t v20 = *((unsigned int *)this + 11);
      if (v20)
      {
        char v21 = (void *)*((void *)this + 4);
        uint64_t v22 = 8 * v20;
        do
        {
          objc_msgSend(v19, "addObject:", objc_msgSend(NSNumber, "numberWithLongLong:", *v21++));
          v22 -= 8;
        }
        while (v22);
      }
      uint64_t v23 = *((void *)this + 1);
      uint64_t v24 = *((void *)this + 6);
      int v6 = v31;
      long long v25 = (const void *)[MEMORY[0x1E4F28F78] tableIntentWithIdentity:v23 columnCount:v24 alignments:v19 nestedInsideIntent:v31];
      *a2 = v25;
      if (v25) {
        CFRetain(v25);
      }
      if (v19) {
        CFRelease(v19);
      }
      break;
    case 9:
      uint64_t v26 = *((void *)this + 1);
      int v6 = v31;
      char v7 = (const void *)[MEMORY[0x1E4F28F78] tableHeaderRowIntentWithIdentity:v26 nestedInsideIntent:v31];
      *a2 = v7;
      if (v7) {
        goto LABEL_36;
      }
      break;
    case 0xALL:
      uint64_t v27 = *((void *)this + 1);
      uint64_t v28 = *((void *)this + 10);
      int v6 = v31;
      char v7 = (const void *)[MEMORY[0x1E4F28F78] tableRowIntentWithIdentity:v27 row:v28 nestedInsideIntent:v31];
      *a2 = v7;
      if (v7) {
        goto LABEL_36;
      }
      break;
    case 0xBLL:
      uint64_t v29 = *((void *)this + 1);
      uint64_t v30 = *((void *)this + 3);
      int v6 = v31;
      char v7 = (const void *)[MEMORY[0x1E4F28F78] tableCellIntentWithIdentity:v29 column:v30 nestedInsideIntent:v31];
      *a2 = v7;
      if (v7) {
LABEL_36:
      }
        CFRetain(v7);
      break;
    default:
      *a2 = 0;
      int v6 = v31;
      break;
  }
  if (v6)
  {
    CFRelease(v6);
  }
}

void sub_19949D614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (v10) {
    CFRelease(v10);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl **std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100](WTF::StringImpl **result, WTF::StringImpl *a2)
{
  uint64_t v2 = *result;
  uint64_t *result = a2;
  if (v2)
  {
    double v3 = (WTF::StringImpl *)*((void *)v2 + 8);
    *((void *)v2 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    NSInteger v4 = (WTF *)*((void *)v2 + 4);
    if (v4)
    {
      *((void *)v2 + 4) = 0;
      *((_DWORD *)v2 + 10) = 0;
      WTF::fastFree(v4, a2);
    }
    std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100]((char *)v2 + 16, 0);
    return (WTF::StringImpl **)WTF::fastFree(v2, v5);
  }
  return result;
}

uint64_t WebKit::CoreIPCSecureCoding::conformsToWebKitSecureCoding(WebKit::CoreIPCSecureCoding *this, objc_object *a2)
{
  if (objc_opt_respondsToSelector()) {
    char v2 = objc_opt_respondsToSelector();
  }
  else {
    char v2 = 0;
  }
  return v2 & 1;
}

uint64_t WebKit::CoreIPCSecureCoding::CoreIPCSecureCoding(WebKit::CoreIPCSecureCoding *this, void *cf)
{
  double v3 = this;
  *(void *)this = cf;
  if (cf
    && (this = (WebKit::CoreIPCSecureCoding *)CFRetain(cf), *(void *)v3)
    && (this = (WebKit::CoreIPCSecureCoding *)[cf conformsToProtocol:&unk_1EEA79688],
        (this & 1) == 0))
  {
    uint64_t result = 112;
    __break(0xC471u);
  }
  else
  {
    WebKit::SecureCoding::internalClassNamesExemptFromSecureCodingCrash(this);
    NSInteger v4 = (uint64_t *)qword_1EB35A400;
    if (qword_1EB35A400)
    {
      uint64_t v5 = (objc_class *)objc_opt_class();
      int v6 = NSStringFromClass(v5);
      MEMORY[0x19972EAD0](&v20, v6);
      uint64_t v9 = *v4;
      uint64_t v10 = v20;
      if (v9) {
        goto LABEL_13;
      }
      while (1)
      {
        uint64_t v20 = 0;
        if (!v10) {
          goto LABEL_9;
        }
        if (*(_DWORD *)v10 != 2) {
          break;
        }
        WTF::StringImpl::destroy(v10, v7);
        if (v9) {
          return (uint64_t)v3;
        }
LABEL_12:
        uint64_t v12 = (WebKit *)objc_opt_class();
        uint64_t v10 = (WTF::StringImpl *)WebKit::crashWithClassName(v12, v13);
        __break(1u);
LABEL_13:
        int v14 = *(_DWORD *)(v9 - 8);
        unsigned int v15 = *((_DWORD *)v10 + 4);
        if (v15 >= 0x100) {
          unsigned int v16 = v15 >> 8;
        }
        else {
          unsigned int v16 = WTF::StringImpl::hashSlowCase(v10);
        }
        for (int i = 0; ; v16 = i + v18)
        {
          int v18 = v16 & v14;
          unint64_t v19 = *(WTF **)(v9 + 8 * (v16 & v14));
          if (v19 != (WTF *)-1)
          {
            if (!v19)
            {
              uint64_t v9 = 0;
              goto LABEL_23;
            }
            if (WTF::equal(v19, v20, v8)) {
              break;
            }
          }
          ++i;
        }
        uint64_t v9 = 1;
LABEL_23:
        uint64_t v10 = v20;
      }
      *(_DWORD *)v10 -= 2;
LABEL_9:
      if (v9) {
        return (uint64_t)v3;
      }
      goto LABEL_12;
    }
    return (uint64_t)v3;
  }
  return result;
}

void sub_19949D8A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  uint64_t v12 = *v10;
  *uint64_t v10 = 0;
  if (v12) {
    CFRelease(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::crashWithClassName(WebKit *this, objc_class *a2)
{
  double v3 = (WebKit *)WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"NSSecureCoding path used for unexpected object", (const char *)0x2E);
  WebKit::logAndSetCrashLogMessage(v3, v4);
  uint64_t v5 = [NSStringFromClass(this) UTF8String];
  strncpy(__dst, v5, 0x30uLL);
  int v6 = (WebKit *)WTFCrashWithInfoImpl(106, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/Shared/Cocoa/CoreIPCSecureCoding.mm", "void WebKit::crashWithClassName(Class)", 43, *(unint64_t *)__dst, v11, v12, v13, v14, v15);
  return WebKit::fontWithAttributes(v6, v7, v8);
}

uint64_t WebKit::fontWithAttributes(WebKit *this, NSDictionary *a2, double a3)
{
  uint64_t v4 = [MEMORY[0x1E4F42A38] fontDescriptorWithFontAttributes:this];
  return [MEMORY[0x1E4F42A30] fontWithDescriptor:v4 size:a3];
}

void WebKit::dictionaryForWebKitSecureCodingType(WebKit *this, objc_object *a2)
{
  if (WebKit::CoreIPCSecureCoding::conformsToWebKitSecureCoding((WebKit::CoreIPCSecureCoding *)a2, a2))
  {
    uint64_t v4 = (const void *)[(objc_object *)a2 _webKitPropertyListData];
    *(void *)this = v4;
    if (v4)
    {
      CFRetain(v4);
    }
  }
  else
  {
    uint64_t v5 = objc_opt_new();
    [(objc_object *)a2 encodeWithCoder:v5];
    int v6 = (const void *)[v5 accumulatedDictionary];
    *(void *)this = v6;
    if (v6) {
      CFRetain(v6);
    }
    if (v5)
    {
      CFRelease(v5);
    }
  }
}

void sub_19949DAB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::CoreIPCDDScannerResult::CoreIPCDDScannerResult(uint64_t a1, objc_object *a2)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  v60 = (const void ***)(a1 + 40);
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  double v3 = (const void **)(a1 + 64);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 25) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  WebKit::dictionaryForWebKitSecureCodingType((WebKit *)&v64, a2);
  id v4 = v64;
  uint64_t v5 = (const void *)[v64 objectForKey:@"AR"];
  int v6 = v5;
  if (v5) {
    CFRetain(v5);
  }
  char v7 = *(const void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    CFRelease(v7);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    double v8 = *(const void **)a1;
    *(void *)a1 = 0;
    if (v8) {
      CFRelease(v8);
    }
  }
  uint64_t v9 = (const void *)[v4 objectForKey:@"MS"];
  uint64_t v10 = v9;
  if (v9) {
    CFRetain(v9);
  }
  unint64_t v11 = *(const void **)(a1 + 8);
  *(void *)(a1 + 8) = v10;
  if (v11) {
    CFRelease(v11);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v12 = *(const void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v12) {
      CFRelease(v12);
    }
  }
  unint64_t v13 = (const void *)[v4 objectForKey:@"T"];
  unint64_t v14 = v13;
  if (v13) {
    CFRetain(v13);
  }
  unint64_t v15 = *(const void **)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  if (v15) {
    CFRelease(v15);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unsigned int v16 = *(const void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v16) {
      CFRelease(v16);
    }
  }
  uint64_t v17 = (const void *)[v4 objectForKey:@"P"];
  int v18 = v17;
  if (v17) {
    CFRetain(v17);
  }
  unint64_t v19 = *(const void **)(a1 + 24);
  *(void *)(a1 + 24) = v18;
  if (v19) {
    CFRelease(v19);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v20 = *(const void **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v20) {
      CFRelease(v20);
    }
  }
  char v21 = (const void *)[v4 objectForKey:@"VN"];
  uint64_t v22 = v21;
  if (v21) {
    CFRetain(v21);
  }
  uint64_t v23 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = v22;
  if (v23) {
    CFRelease(v23);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v24 = *(const void **)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v24) {
      CFRelease(v24);
    }
  }
  long long v25 = (void *)[v4 objectForKey:@"SR"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    if (isKindOfClass)
    {
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      uint64_t v29 = [v25 countByEnumeratingWithState:&v67 objects:v71 count:16];
      if (v29)
      {
        uint64_t v30 = *(void *)v68;
        long long v31 = (void (**)(void))MEMORY[0x1E4FB62E8];
        do
        {
          for (uint64_t i = 0; i != v29; ++i)
          {
            if (*(void *)v68 != v30) {
              objc_enumerationMutation(v25);
            }
            uint64_t v33 = *(const void **)(*((void *)&v67 + 1) + 8 * i);
            (*v31)();
            if (objc_opt_isKindOfClass())
            {
              int v34 = HIDWORD(v66);
              if (HIDWORD(v66) == v66)
              {
                unint64_t v35 = HIDWORD(v66) + ((unint64_t)HIDWORD(v66) >> 2);
                if (v35 >= 0x10) {
                  unint64_t v36 = v35 + 1;
                }
                else {
                  unint64_t v36 = 16;
                }
                if (v36 <= (unint64_t)HIDWORD(v66) + 1) {
                  unint64_t v37 = HIDWORD(v66) + 1;
                }
                else {
                  unint64_t v37 = v36;
                }
                WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v65, v37);
                int v34 = HIDWORD(v66);
                *(void *)(v65 + 8 * HIDWORD(v66)) = v33;
                if (v33)
                {
LABEL_54:
                  CFRetain(v33);
                  int v34 = HIDWORD(v66);
                }
              }
              else
              {
                *(void *)(v65 + 8 * HIDWORD(v66)) = v33;
                if (v33) {
                  goto LABEL_54;
                }
              }
              HIDWORD(v66) = v34 + 1;
              continue;
            }
          }
          uint64_t v29 = [v25 countByEnumeratingWithState:&v67 objects:v71 count:16];
        }
        while (v29);
      }
    }
    uint64_t v61 = v65;
    uint64_t v38 = v66;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v62 = v38;
    char v63 = 1;
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v28);
    int v39 = 1;
  }
  else
  {
    int v39 = 0;
    LOBYTE(v61) = 0;
    char v63 = 0;
  }
  if (*(unsigned __int8 *)(a1 + 56) == v39)
  {
    if (!*(unsigned char *)(a1 + 56)) {
      goto LABEL_75;
    }
    uint64_t v40 = *(unsigned int *)(a1 + 52);
    if (v40)
    {
      uint64_t v41 = *v60;
      uint64_t v42 = 8 * v40;
      do
      {
        uint64_t v43 = *v41;
        *uint64_t v41 = 0;
        if (v43) {
          CFRelease(v43);
        }
        ++v41;
        v42 -= 8;
      }
      while (v42);
    }
    int v44 = (WTF *)*v60;
    if (*v60)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      WTF::fastFree(v44, v26);
    }
    *(void *)(a1 + 40) = v61;
    uint64_t v45 = v62;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    *(void *)(a1 + 48) = v45;
  }
  else if (*(unsigned char *)(a1 + 56))
  {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v60, v26);
    *(unsigned char *)(a1 + 56) = 0;
  }
  else
  {
    *(void *)(a1 + 40) = v61;
    uint64_t v46 = v62;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    *(void *)(a1 + 48) = v46;
    *(unsigned char *)(a1 + 56) = 1;
  }
  if (v63) {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v26);
  }
LABEL_75:
  uint64_t v47 = (const void *)[v4 objectForKey:@"V"];
  uint64_t v48 = v47;
  if (v47) {
    CFRetain(v47);
  }
  long long v49 = *v3;
  WebKit *v3 = v48;
  if (v49) {
    CFRelease(v49);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v50 = *v3;
    WebKit *v3 = 0;
    if (v50) {
      CFRelease(v50);
    }
  }
  uint64_t v51 = (const void *)[v4 objectForKey:@"C"];
  uint64_t v52 = v51;
  if (v51) {
    CFRetain(v51);
  }
  int v53 = *(const void **)(a1 + 72);
  *(void *)(a1 + 72) = v52;
  if (v53) {
    CFRelease(v53);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v54 = *(const void **)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    if (v54) {
      CFRelease(v54);
    }
  }
  uint64_t v55 = (const void *)[v4 objectForKey:@"CF"];
  uint64_t v56 = v55;
  if (v55) {
    CFRetain(v55);
  }
  uint64_t v57 = *(const void **)(a1 + 80);
  *(void *)(a1 + 80) = v56;
  if (v57) {
    CFRelease(v57);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    int v58 = *(const void **)(a1 + 80);
    *(void *)(a1 + 80) = 0;
    if (v58)
    {
      CFRelease(v58);
      if (!v4) {
        return a1;
      }
      goto LABEL_96;
    }
  }
  if (v4) {
LABEL_96:
  }
    CFRelease(v4);
  return a1;
}

void sub_19949E0D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  if (a13) {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  }
  if (v16) {
    CFRelease(v16);
  }
  unint64_t v19 = *(const void **)(v15 + 80);
  *(void *)(v15 + 80) = 0;
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = *(const void **)(v15 + 72);
  *(void *)(v15 + 72) = 0;
  if (v20) {
    CFRelease(v20);
  }
  char v21 = *v17;
  const void *v17 = 0;
  if (v21) {
    CFRelease(v21);
  }
  if (*(unsigned char *)(v15 + 56)) {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a10, a2);
  }
  uint64_t v22 = *(const void **)(v15 + 32);
  *(void *)(v15 + 32) = 0;
  if (v22) {
    CFRelease(v22);
  }
  uint64_t v23 = *(const void **)(v15 + 24);
  *(void *)(v15 + 24) = 0;
  if (v23) {
    CFRelease(v23);
  }
  uint64_t v24 = *(const void **)(v15 + 16);
  *(void *)(v15 + 16) = 0;
  if (v24) {
    CFRelease(v24);
  }
  long long v25 = *(const void **)(v15 + 8);
  *(void *)(v15 + 8) = 0;
  if (v25) {
    CFRelease(v25);
  }
  uint64_t v26 = *(const void **)v15;
  *(void *)uint64_t v15 = 0;
  if (v26) {
    CFRelease(v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::CoreIPCDDScannerResult::toID@<X0>(WebKit::CoreIPCDDScannerResult *this@<X0>, void *a2@<X8>)
{
  id v4 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:9];
  uint64_t v5 = v4;
  if (*(void *)this) {
    [v4 setObject:*(void *)this forKeyedSubscript:@"AR"];
  }
  uint64_t v6 = *((void *)this + 1);
  if (v6) {
    [v5 setObject:v6 forKeyedSubscript:@"MS"];
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7) {
    [v5 setObject:v7 forKeyedSubscript:@"T"];
  }
  uint64_t v8 = *((void *)this + 3);
  if (v8) {
    [v5 setObject:v8 forKeyedSubscript:@"P"];
  }
  uint64_t v9 = *((void *)this + 4);
  if (v9) {
    [v5 setObject:v9 forKeyedSubscript:@"VN"];
  }
  uint64_t v10 = *((void *)this + 8);
  if (v10) {
    [v5 setObject:v10 forKeyedSubscript:@"V"];
  }
  uint64_t v11 = *((void *)this + 9);
  if (v11) {
    [v5 setObject:v11 forKeyedSubscript:@"C"];
  }
  uint64_t v12 = *((void *)this + 10);
  if (v12) {
    [v5 setObject:v12 forKeyedSubscript:@"CF"];
  }
  if (*((unsigned char *)this + 56))
  {
    unint64_t v13 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)this + 13)];
    uint64_t v14 = *((unsigned int *)this + 13);
    if (v14)
    {
      uint64_t v15 = (void *)*((void *)this + 5);
      uint64_t v16 = 8 * v14;
      do
      {
        if (*v15) {
          objc_msgSend(v13, "addObject:");
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    if (v13)
    {
      [v5 setObject:v13 forKeyedSubscript:@"SR"];
      CFRelease(v13);
    }
  }
  uint64_t v17 = (uint64_t (**)(void))MEMORY[0x1E4FB62E8];
  if ([(id)((uint64_t (*)(void))*MEMORY[0x1E4FB62E8])() instancesRespondToSelector:sel__initWithWebKitPropertyListData_])
  {
    uint64_t result = [objc_alloc((Class)(*v17)()) _initWithWebKitPropertyListData:v5];
    *a2 = result;
  }
  else
  {
    uint64_t result = 430;
    __break(0xC471u);
  }
  return result;
}

void sub_19949E390(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

WebKit::CoreIPCNSURLCredential *WebKit::CoreIPCNSURLCredential::CoreIPCNSURLCredential(WebKit::CoreIPCNSURLCredential *this, objc_object *a2)
{
  *(void *)this = 0;
  WebKit::dictionaryForWebKitSecureCodingType((WebKit *)&v9, a2);
  id v3 = v9;
  id v4 = (const void *)[v9 objectForKey:@"__nsurlcredential_proto_plist"];
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v6 = *(const void **)this;
  *(void *)this = v5;
  if (v6) {
    CFRelease(v6);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v7 = *(const void **)this;
    *(void *)this = 0;
    if (v7) {
      CFRelease(v7);
    }
  }
  if (v3) {
    CFRelease(v3);
  }
  return this;
}

void sub_19949E464(_Unwind_Exception *exception_object)
{
  id v3 = *v1;
  const void *v1 = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCNSURLCredential::toID(WebKit::CoreIPCNSURLCredential *this@<X0>, void *a2@<X8>)
{
  id v4 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:1];
  uint64_t v5 = v4;
  if (*(void *)this) {
    [v4 setObject:*(void *)this forKeyedSubscript:@"__nsurlcredential_proto_plist"];
  }
  if ([MEMORY[0x1E4F18D88] instancesRespondToSelector:sel__initWithWebKitPropertyListData_])
  {
    *a2 = [objc_alloc(MEMORY[0x1E4F18D88]) _initWithWebKitPropertyListData:v5];
  }
  else
  {
    uint64_t v6 = [[WKKeyedCoder alloc] initWithDictionary:v5];
    *a2 = [objc_alloc(MEMORY[0x1E4F18D88]) initWithCoder:v6];
    if (v6)
    {
      CFRelease(v6);
    }
  }
}

void sub_19949E570(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCNSURLProtectionSpace *WebKit::CoreIPCNSURLProtectionSpace::CoreIPCNSURLProtectionSpace(WebKit::CoreIPCNSURLProtectionSpace *this, objc_object *a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id v3 = (const void ***)((char *)this + 56);
  *((unsigned char *)this + 72) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 41) = 0u;
  WebKit::dictionaryForWebKitSecureCodingType((WebKit *)&v60, a2);
  id v4 = v60;
  uint64_t v5 = (const void *)[v60 objectForKey:@"__nsurlprotectionspace_proto_plist"];
  uint64_t v6 = v5;
  if (v5) {
    CFRetain(v5);
  }
  uint64_t v7 = *(const void **)this;
  *(void *)this = v6;
  if (v7) {
    CFRelease(v7);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v8 = *(const void **)this;
    *(void *)this = 0;
    if (v8) {
      CFRelease(v8);
    }
  }
  id v9 = (const void *)[v4 objectForKey:@"host"];
  uint64_t v10 = v9;
  if (v9) {
    CFRetain(v9);
  }
  uint64_t v11 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = v10;
  if (v11) {
    CFRelease(v11);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v12 = (const void *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v12) {
      CFRelease(v12);
    }
  }
  unint64_t v13 = (const void *)[v4 objectForKey:@"port"];
  uint64_t v14 = v13;
  if (v13) {
    CFRetain(v13);
  }
  uint64_t v15 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = v14;
  if (v15) {
    CFRelease(v15);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v16 = (const void *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v16) {
      CFRelease(v16);
    }
  }
  uint64_t v17 = (const void *)[v4 objectForKey:@"type"];
  int v18 = v17;
  if (v17) {
    CFRetain(v17);
  }
  unint64_t v19 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = v18;
  if (v19) {
    CFRelease(v19);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v20 = (const void *)*((void *)this + 3);
    *((void *)this + 3) = 0;
    if (v20) {
      CFRelease(v20);
    }
  }
  char v21 = (const void *)[v4 objectForKey:@"realm"];
  uint64_t v22 = v21;
  if (v21) {
    CFRetain(v21);
  }
  uint64_t v23 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = v22;
  if (v23) {
    CFRelease(v23);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v24 = (const void *)*((void *)this + 4);
    *((void *)this + 4) = 0;
    if (v24) {
      CFRelease(v24);
    }
  }
  long long v25 = (const void *)[v4 objectForKey:@"scheme"];
  uint64_t v26 = v25;
  if (v25) {
    CFRetain(v25);
  }
  uint64_t v27 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = v26;
  if (v27) {
    CFRelease(v27);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v28 = (const void *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (v28) {
      CFRelease(v28);
    }
  }
  uint64_t v29 = (const void *)[v4 objectForKey:@"trust"];
  uint64_t v30 = v29;
  if (v29) {
    CFRetain(v29);
  }
  long long v31 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = v30;
  if (v31)
  {
    CFRelease(v31);
    uint64_t v30 = (const void *)*((void *)this + 6);
    if (v30) {
      goto LABEL_47;
    }
LABEL_51:
    *((void *)this + 6) = 0;
    goto LABEL_52;
  }
  if (!v30) {
    goto LABEL_51;
  }
LABEL_47:
  CFTypeID v32 = CFGetTypeID(v30);
  if (v32 != SecTrustGetTypeID())
  {
    uint64_t v33 = (const void *)*((void *)this + 6);
    *((void *)this + 6) = 0;
    if (v33) {
      CFRelease(v33);
    }
  }
LABEL_52:
  int v34 = (void *)[v4 objectForKey:@"distnames"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    if (isKindOfClass)
    {
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      uint64_t v38 = [v34 countByEnumeratingWithState:&v63 objects:v67 count:16];
      if (v38)
      {
        uint64_t v39 = *(void *)v64;
        do
        {
          uint64_t v40 = 0;
          do
          {
            if (*(void *)v64 != v39) {
              objc_enumerationMutation(v34);
            }
            uint64_t v41 = *(const void **)(*((void *)&v63 + 1) + 8 * v40);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              int v42 = HIDWORD(v62);
              if (HIDWORD(v62) == v62)
              {
                unint64_t v43 = HIDWORD(v62) + ((unint64_t)HIDWORD(v62) >> 2);
                if (v43 >= 0x10) {
                  unint64_t v44 = v43 + 1;
                }
                else {
                  unint64_t v44 = 16;
                }
                if (v44 <= (unint64_t)HIDWORD(v62) + 1) {
                  unint64_t v45 = HIDWORD(v62) + 1;
                }
                else {
                  unint64_t v45 = v44;
                }
                WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v61, v45);
                int v42 = HIDWORD(v62);
                *(void *)(v61 + 8 * HIDWORD(v62)) = v41;
                if (v41)
                {
LABEL_70:
                  CFRetain(v41);
                  int v42 = HIDWORD(v62);
                }
              }
              else
              {
                *(void *)(v61 + 8 * HIDWORD(v62)) = v41;
                if (v41) {
                  goto LABEL_70;
                }
              }
              HIDWORD(v62) = v42 + 1;
            }
            ++v40;
          }
          while (v38 != v40);
          uint64_t v46 = [v34 countByEnumeratingWithState:&v63 objects:v67 count:16];
          uint64_t v38 = v46;
        }
        while (v46);
      }
    }
    uint64_t v57 = v61;
    uint64_t v47 = v62;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v58 = v47;
    char v59 = 1;
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v37);
    int v48 = 1;
  }
  else
  {
    int v48 = 0;
    LOBYTE(v57) = 0;
    char v59 = 0;
  }
  if (*((unsigned __int8 *)this + 72) == v48)
  {
    if (!*((unsigned char *)this + 72)) {
      goto LABEL_93;
    }
    uint64_t v49 = *((unsigned int *)this + 17);
    if (v49)
    {
      uint64_t v50 = *v3;
      uint64_t v51 = 8 * v49;
      do
      {
        uint64_t v52 = *v50;
        const void *v50 = 0;
        if (v52) {
          CFRelease(v52);
        }
        ++v50;
        v51 -= 8;
      }
      while (v51);
    }
    int v53 = (WTF *)*v3;
    if (*v3)
    {
      *((void *)this + 7) = 0;
      *((_DWORD *)this + 16) = 0;
      WTF::fastFree(v53, v35);
    }
    *((void *)this + 7) = v57;
    uint64_t v54 = v58;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    *((void *)this + 8) = v54;
  }
  else if (*((unsigned char *)this + 72))
  {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v35);
    *((unsigned char *)this + 72) = 0;
  }
  else
  {
    *((void *)this + 7) = v57;
    uint64_t v55 = v58;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    *((void *)this + 8) = v55;
    *((unsigned char *)this + 72) = 1;
  }
  if (v59) {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v35);
  }
LABEL_93:
  if (v4) {
    CFRelease(v4);
  }
  return this;
}

void sub_19949EB28(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a11) {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (*(unsigned char *)(v13 + 72)) {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, a2);
  }
  uint64_t v17 = *(const void **)(v13 + 48);
  *(void *)(v13 + 48) = 0;
  if (v17) {
    CFRelease(v17);
  }
  int v18 = *(const void **)(v13 + 40);
  *(void *)(v13 + 40) = 0;
  if (v18) {
    CFRelease(v18);
  }
  unint64_t v19 = *(const void **)(v13 + 32);
  *(void *)(v13 + 32) = 0;
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = *(const void **)(v13 + 24);
  *(void *)(v13 + 24) = 0;
  if (v20) {
    CFRelease(v20);
  }
  char v21 = *(const void **)(v13 + 16);
  *(void *)(v13 + 16) = 0;
  if (v21) {
    CFRelease(v21);
  }
  uint64_t v22 = *(const void **)(v13 + 8);
  *(void *)(v13 + 8) = 0;
  if (v22) {
    CFRelease(v22);
  }
  uint64_t v23 = *(const void **)v13;
  *(void *)uint64_t v13 = 0;
  if (v23) {
    CFRelease(v23);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCNSURLProtectionSpace::toID(WebKit::CoreIPCNSURLProtectionSpace *this@<X0>, void *a2@<X8>)
{
  id v4 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:8];
  uint64_t v5 = v4;
  if (*(void *)this) {
    [v4 setObject:*(void *)this forKeyedSubscript:@"__nsurlprotectionspace_proto_plist"];
  }
  uint64_t v6 = *((void *)this + 1);
  if (v6) {
    [v5 setObject:v6 forKeyedSubscript:@"host"];
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7) {
    [v5 setObject:v7 forKeyedSubscript:@"port"];
  }
  uint64_t v8 = *((void *)this + 3);
  if (v8) {
    [v5 setObject:v8 forKeyedSubscript:@"type"];
  }
  uint64_t v9 = *((void *)this + 4);
  if (v9) {
    [v5 setObject:v9 forKeyedSubscript:@"realm"];
  }
  uint64_t v10 = *((void *)this + 5);
  if (v10) {
    [v5 setObject:v10 forKeyedSubscript:@"scheme"];
  }
  uint64_t v11 = *((void *)this + 6);
  if (v11) {
    [v5 setObject:v11 forKeyedSubscript:@"trust"];
  }
  if (*((unsigned char *)this + 72))
  {
    uint64_t v12 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)this + 17)];
    uint64_t v13 = *((unsigned int *)this + 17);
    if (v13)
    {
      uint64_t v14 = (void *)*((void *)this + 7);
      uint64_t v15 = 8 * v13;
      do
      {
        if (*v14) {
          objc_msgSend(v12, "addObject:");
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
    if (v12)
    {
      [v5 setObject:v12 forKeyedSubscript:@"distnames"];
      CFRelease(v12);
    }
  }
  if ([(id)objc_opt_class() instancesRespondToSelector:sel__initWithWebKitPropertyListData_])
  {
    *a2 = [objc_alloc((Class)objc_opt_class()) _initWithWebKitPropertyListData:v5];
  }
  else
  {
    uint64_t v16 = [[WKKeyedCoder alloc] initWithDictionary:v5];
    *a2 = [objc_alloc((Class)objc_opt_class()) initWithCoder:v16];
    if (v16)
    {
      CFRelease(v16);
    }
  }
}

void sub_19949EDFC(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::CoreIPCPKPaymentMerchantSession::CoreIPCPKPaymentMerchantSession(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15)
{
  uint64_t v15 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v15;
  uint64_t v16 = *a3;
  *a3 = 0;
  *(void *)(result + 8) = v16;
  uint64_t v17 = *a4;
  *a4 = 0;
  *(void *)(result + 16) = v17;
  uint64_t v18 = *a5;
  *a5 = 0;
  *(void *)(result + 24) = v18;
  uint64_t v19 = *a6;
  *a6 = 0;
  *(void *)(result + 32) = v19;
  uint64_t v20 = *a7;
  *a7 = 0;
  *(void *)(result + 40) = v20;
  uint64_t v21 = *a8;
  *a8 = 0;
  *(void *)(result + 48) = v21;
  uint64_t v22 = *a9;
  *a9 = 0;
  *(void *)(result + 56) = v22;
  uint64_t v23 = *a10;
  *a10 = 0;
  *(void *)(result + 64) = v23;
  uint64_t v24 = *a11;
  *a11 = 0;
  *(void *)(result + 72) = v24;
  uint64_t v25 = *a12;
  *a12 = 0;
  *(void *)(result + 80) = v25;
  uint64_t v26 = *a13;
  *a13 = 0;
  *(void *)(result + 88) = v26;
  uint64_t v27 = *a14;
  *a14 = 0;
  *(unsigned char *)(result + 104) = 0;
  *(void *)(result + 96) = v27;
  *(unsigned char *)(result + 120) = 0;
  if (*((unsigned char *)a15 + 16))
  {
    *(void *)(result + 104) = 0;
    *(void *)(result + 112) = 0;
    uint64_t v28 = *a15;
    *a15 = 0;
    *(void *)(result + 104) = v28;
    LODWORD(v28) = *((_DWORD *)a15 + 2);
    *((_DWORD *)a15 + 2) = 0;
    *(_DWORD *)(result + 112) = v28;
    LODWORD(v28) = *((_DWORD *)a15 + 3);
    *((_DWORD *)a15 + 3) = 0;
    *(_DWORD *)(result + 116) = v28;
    *(unsigned char *)(result + 120) = 1;
  }
  return result;
}

WebKit::CoreIPCPKPaymentMerchantSession *WebKit::CoreIPCPKPaymentMerchantSession::CoreIPCPKPaymentMerchantSession(WebKit::CoreIPCPKPaymentMerchantSession *this, objc_object *a2)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 120) = 0;
  id v3 = (const void ***)((char *)this + 104);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 89) = 0u;
  WebKit::dictionaryForWebKitSecureCodingType((WebKit *)&v83, a2);
  id v4 = v83;
  uint64_t v5 = (const void *)[v83 objectForKey:@"merchantIdentifier"];
  uint64_t v6 = v5;
  if (v5) {
    CFRetain(v5);
  }
  uint64_t v7 = *(const void **)this;
  *(void *)this = v6;
  if (v7) {
    CFRelease(v7);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v8 = *(const void **)this;
    *(void *)this = 0;
    if (v8) {
      CFRelease(v8);
    }
  }
  uint64_t v9 = (const void *)[v4 objectForKey:@"merchantSessionIdentifier"];
  uint64_t v10 = v9;
  if (v9) {
    CFRetain(v9);
  }
  uint64_t v11 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = v10;
  if (v11) {
    CFRelease(v11);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v12 = (const void *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v12) {
      CFRelease(v12);
    }
  }
  uint64_t v13 = (const void *)[v4 objectForKey:@"nonce"];
  uint64_t v14 = v13;
  if (v13) {
    CFRetain(v13);
  }
  uint64_t v15 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = v14;
  if (v15) {
    CFRelease(v15);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v16 = (const void *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v16) {
      CFRelease(v16);
    }
  }
  uint64_t v17 = (const void *)[v4 objectForKey:@"epochTimestamp"];
  uint64_t v18 = v17;
  if (v17) {
    CFRetain(v17);
  }
  uint64_t v19 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = v18;
  if (v19) {
    CFRelease(v19);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v20 = (const void *)*((void *)this + 3);
    *((void *)this + 3) = 0;
    if (v20) {
      CFRelease(v20);
    }
  }
  uint64_t v21 = (const void *)[v4 objectForKey:@"expiresAt"];
  uint64_t v22 = v21;
  if (v21) {
    CFRetain(v21);
  }
  uint64_t v23 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = v22;
  if (v23) {
    CFRelease(v23);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v24 = (const void *)*((void *)this + 4);
    *((void *)this + 4) = 0;
    if (v24) {
      CFRelease(v24);
    }
  }
  uint64_t v25 = (const void *)[v4 objectForKey:@"domainName"];
  uint64_t v26 = v25;
  if (v25) {
    CFRetain(v25);
  }
  uint64_t v27 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = v26;
  if (v27) {
    CFRelease(v27);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v28 = (const void *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (v28) {
      CFRelease(v28);
    }
  }
  uint64_t v29 = (const void *)[v4 objectForKey:@"displayName"];
  uint64_t v30 = v29;
  if (v29) {
    CFRetain(v29);
  }
  long long v31 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = v30;
  if (v31) {
    CFRelease(v31);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    CFTypeID v32 = (const void *)*((void *)this + 6);
    *((void *)this + 6) = 0;
    if (v32) {
      CFRelease(v32);
    }
  }
  uint64_t v33 = (const void *)[v4 objectForKey:@"signature"];
  int v34 = v33;
  if (v33) {
    CFRetain(v33);
  }
  unint64_t v35 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = v34;
  if (v35) {
    CFRelease(v35);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v36 = (const void *)*((void *)this + 7);
    *((void *)this + 7) = 0;
    if (v36) {
      CFRelease(v36);
    }
  }
  unint64_t v37 = (const void *)[v4 objectForKey:@"retryNonce"];
  uint64_t v38 = v37;
  if (v37) {
    CFRetain(v37);
  }
  uint64_t v39 = (const void *)*((void *)this + 8);
  *((void *)this + 8) = v38;
  if (v39) {
    CFRelease(v39);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v40 = (const void *)*((void *)this + 8);
    *((void *)this + 8) = 0;
    if (v40) {
      CFRelease(v40);
    }
  }
  uint64_t v41 = (const void *)[v4 objectForKey:@"initiativeContext"];
  int v42 = v41;
  if (v41) {
    CFRetain(v41);
  }
  unint64_t v43 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = v42;
  if (v43) {
    CFRelease(v43);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v44 = (const void *)*((void *)this + 9);
    *((void *)this + 9) = 0;
    if (v44) {
      CFRelease(v44);
    }
  }
  unint64_t v45 = (const void *)[v4 objectForKey:@"initiative"];
  uint64_t v46 = v45;
  if (v45) {
    CFRetain(v45);
  }
  uint64_t v47 = (const void *)*((void *)this + 10);
  *((void *)this + 10) = v46;
  if (v47) {
    CFRelease(v47);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    int v48 = (const void *)*((void *)this + 10);
    *((void *)this + 10) = 0;
    if (v48) {
      CFRelease(v48);
    }
  }
  uint64_t v49 = (const void *)[v4 objectForKey:@"ampEnrollmentPinning"];
  uint64_t v50 = v49;
  if (v49) {
    CFRetain(v49);
  }
  uint64_t v51 = (const void *)*((void *)this + 11);
  *((void *)this + 11) = v50;
  if (v51) {
    CFRelease(v51);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v52 = (const void *)*((void *)this + 11);
    *((void *)this + 11) = 0;
    if (v52) {
      CFRelease(v52);
    }
  }
  int v53 = (const void *)[v4 objectForKey:@"operationalAnalyticsIdentifier"];
  uint64_t v54 = v53;
  if (v53) {
    CFRetain(v53);
  }
  uint64_t v55 = (const void *)*((void *)this + 12);
  *((void *)this + 12) = v54;
  if (v55) {
    CFRelease(v55);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v56 = (const void *)*((void *)this + 12);
    *((void *)this + 12) = 0;
    if (v56) {
      CFRelease(v56);
    }
  }
  uint64_t v57 = (void *)[v4 objectForKey:@"signedFields"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    if (isKindOfClass)
    {
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      uint64_t v61 = [v57 countByEnumeratingWithState:&v86 objects:v90 count:16];
      if (v61)
      {
        uint64_t v62 = *(void *)v87;
        do
        {
          uint64_t v63 = 0;
          do
          {
            if (*(void *)v87 != v62) {
              objc_enumerationMutation(v57);
            }
            long long v64 = *(const void **)(*((void *)&v86 + 1) + 8 * v63);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              int v65 = HIDWORD(v85);
              if (HIDWORD(v85) == v85)
              {
                unint64_t v66 = HIDWORD(v85) + ((unint64_t)HIDWORD(v85) >> 2);
                if (v66 >= 0x10) {
                  unint64_t v67 = v66 + 1;
                }
                else {
                  unint64_t v67 = 16;
                }
                if (v67 <= (unint64_t)HIDWORD(v85) + 1) {
                  unint64_t v68 = HIDWORD(v85) + 1;
                }
                else {
                  unint64_t v68 = v67;
                }
                WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v84, v68);
                int v65 = HIDWORD(v85);
                *(void *)(v84 + 8 * HIDWORD(v85)) = v64;
                if (v64)
                {
LABEL_110:
                  CFRetain(v64);
                  int v65 = HIDWORD(v85);
                }
              }
              else
              {
                *(void *)(v84 + 8 * HIDWORD(v85)) = v64;
                if (v64) {
                  goto LABEL_110;
                }
              }
              HIDWORD(v85) = v65 + 1;
            }
            ++v63;
          }
          while (v61 != v63);
          uint64_t v69 = [v57 countByEnumeratingWithState:&v86 objects:v90 count:16];
          uint64_t v61 = v69;
        }
        while (v69);
      }
    }
    uint64_t v80 = v84;
    uint64_t v70 = v85;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    uint64_t v81 = v70;
    char v82 = 1;
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v84, v60);
    int v71 = 1;
  }
  else
  {
    int v71 = 0;
    LOBYTE(v80) = 0;
    char v82 = 0;
  }
  if (*((unsigned __int8 *)this + 120) == v71)
  {
    if (!*((unsigned char *)this + 120)) {
      goto LABEL_133;
    }
    uint64_t v72 = *((unsigned int *)this + 29);
    if (v72)
    {
      int v73 = *v3;
      uint64_t v74 = 8 * v72;
      do
      {
        v75 = *v73;
        void *v73 = 0;
        if (v75) {
          CFRelease(v75);
        }
        ++v73;
        v74 -= 8;
      }
      while (v74);
    }
    v76 = (WTF *)*v3;
    if (*v3)
    {
      *((void *)this + 13) = 0;
      *((_DWORD *)this + 28) = 0;
      WTF::fastFree(v76, v58);
    }
    *((void *)this + 13) = v80;
    uint64_t v77 = v81;
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    *((void *)this + 14) = v77;
  }
  else if (*((unsigned char *)this + 120))
  {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v58);
    *((unsigned char *)this + 120) = 0;
  }
  else
  {
    *((void *)this + 13) = v80;
    uint64_t v78 = v81;
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    *((void *)this + 14) = v78;
    *((unsigned char *)this + 120) = 1;
  }
  if (v82) {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v80, v58);
  }
LABEL_133:
  if (v4) {
    CFRelease(v4);
  }
  return this;
}

void sub_19949F6BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a11) {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (*(unsigned char *)(v13 + 120)) {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, a2);
  }
  uint64_t v17 = *(const void **)(v13 + 96);
  *(void *)(v13 + 96) = 0;
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = *(const void **)(v13 + 88);
  *(void *)(v13 + 88) = 0;
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v19 = *(const void **)(v13 + 80);
  *(void *)(v13 + 80) = 0;
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = *(const void **)(v13 + 72);
  *(void *)(v13 + 72) = 0;
  if (v20) {
    CFRelease(v20);
  }
  uint64_t v21 = *(const void **)(v13 + 64);
  *(void *)(v13 + 64) = 0;
  if (v21) {
    CFRelease(v21);
  }
  uint64_t v22 = *(const void **)(v13 + 56);
  *(void *)(v13 + 56) = 0;
  if (v22) {
    CFRelease(v22);
  }
  uint64_t v23 = *(const void **)(v13 + 48);
  *(void *)(v13 + 48) = 0;
  if (v23) {
    CFRelease(v23);
  }
  uint64_t v24 = *(const void **)(v13 + 40);
  *(void *)(v13 + 40) = 0;
  if (v24) {
    CFRelease(v24);
  }
  uint64_t v25 = *(const void **)(v13 + 32);
  *(void *)(v13 + 32) = 0;
  if (v25) {
    CFRelease(v25);
  }
  uint64_t v26 = *(const void **)(v13 + 24);
  *(void *)(v13 + 24) = 0;
  if (v26) {
    CFRelease(v26);
  }
  uint64_t v27 = *(const void **)(v13 + 16);
  *(void *)(v13 + 16) = 0;
  if (v27) {
    CFRelease(v27);
  }
  uint64_t v28 = *(const void **)(v13 + 8);
  *(void *)(v13 + 8) = 0;
  if (v28) {
    CFRelease(v28);
  }
  uint64_t v29 = *(const void **)v13;
  *(void *)uint64_t v13 = 0;
  if (v29) {
    CFRelease(v29);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCPKPaymentMerchantSession::toID(WebKit::CoreIPCPKPaymentMerchantSession *this@<X0>, void *a2@<X8>)
{
  id v4 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:14];
  uint64_t v5 = v4;
  if (*(void *)this) {
    [v4 setObject:*(void *)this forKeyedSubscript:@"merchantIdentifier"];
  }
  uint64_t v6 = *((void *)this + 1);
  if (v6) {
    [v5 setObject:v6 forKeyedSubscript:@"merchantSessionIdentifier"];
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7) {
    [v5 setObject:v7 forKeyedSubscript:@"nonce"];
  }
  uint64_t v8 = *((void *)this + 3);
  if (v8) {
    [v5 setObject:v8 forKeyedSubscript:@"epochTimestamp"];
  }
  uint64_t v9 = *((void *)this + 4);
  if (v9) {
    [v5 setObject:v9 forKeyedSubscript:@"expiresAt"];
  }
  uint64_t v10 = *((void *)this + 5);
  if (v10) {
    [v5 setObject:v10 forKeyedSubscript:@"domainName"];
  }
  uint64_t v11 = *((void *)this + 6);
  if (v11) {
    [v5 setObject:v11 forKeyedSubscript:@"displayName"];
  }
  uint64_t v12 = *((void *)this + 7);
  if (v12) {
    [v5 setObject:v12 forKeyedSubscript:@"signature"];
  }
  uint64_t v13 = *((void *)this + 8);
  if (v13) {
    [v5 setObject:v13 forKeyedSubscript:@"retryNonce"];
  }
  uint64_t v14 = *((void *)this + 9);
  if (v14) {
    [v5 setObject:v14 forKeyedSubscript:@"initiativeContext"];
  }
  uint64_t v15 = *((void *)this + 10);
  if (v15) {
    [v5 setObject:v15 forKeyedSubscript:@"initiative"];
  }
  uint64_t v16 = *((void *)this + 11);
  if (v16) {
    [v5 setObject:v16 forKeyedSubscript:@"ampEnrollmentPinning"];
  }
  uint64_t v17 = *((void *)this + 12);
  if (v17) {
    [v5 setObject:v17 forKeyedSubscript:@"operationalAnalyticsIdentifier"];
  }
  if (*((unsigned char *)this + 120))
  {
    uint64_t v18 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*((unsigned int *)this + 29)];
    uint64_t v19 = *((unsigned int *)this + 29);
    if (v19)
    {
      uint64_t v20 = (void *)*((void *)this + 13);
      uint64_t v21 = 8 * v19;
      do
      {
        if (*v20) {
          objc_msgSend(v18, "addObject:");
        }
        ++v20;
        v21 -= 8;
      }
      while (v21);
    }
    if (v18)
    {
      [v5 setObject:v18 forKeyedSubscript:@"signedFields"];
      CFRelease(v18);
    }
  }
  uint64_t v22 = (uint64_t (**)(void))MEMORY[0x1E4FB63C0];
  if ([(id)((uint64_t (*)(void))*MEMORY[0x1E4FB63C0])() instancesRespondToSelector:sel__initWithWebKitPropertyListData_])
  {
    *a2 = [objc_alloc((Class)(*v22)()) _initWithWebKitPropertyListData:v5];
  }
  else
  {
    uint64_t v23 = [[WKKeyedCoder alloc] initWithDictionary:v5];
    *a2 = [objc_alloc((Class)(*v22)()) initWithCoder:v23];
    if (v23)
    {
      CFRelease(v23);
    }
  }
}

void sub_19949FA7C(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

WebKit::CoreIPCPKPayment *WebKit::CoreIPCPKPayment::CoreIPCPKPayment(WebKit::CoreIPCPKPayment *this, objc_object *a2)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  WebKit::dictionaryForWebKitSecureCodingType((WebKit *)&v38, a2);
  id v3 = v38;
  id v4 = (const void *)[v38 objectForKey:@"token"];
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v6 = *(const void **)this;
  *(void *)this = v5;
  if (v6) {
    CFRelease(v6);
  }
  ((void (*)(void))*MEMORY[0x1E4FB62D0])();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v7 = *(const void **)this;
    *(void *)this = 0;
    if (v7) {
      CFRelease(v7);
    }
  }
  uint64_t v8 = (const void *)[v3 objectForKey:@"shippingContact"];
  uint64_t v9 = v8;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v10 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = v9;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = (void (**)(void))MEMORY[0x1E4FB6280];
  ((void (*)(void))*MEMORY[0x1E4FB6280])();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v12 = (const void *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v12) {
      CFRelease(v12);
    }
  }
  uint64_t v13 = (const void *)[v3 objectForKey:@"billingContact"];
  uint64_t v14 = v13;
  if (v13) {
    CFRetain(v13);
  }
  uint64_t v15 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = v14;
  if (v15) {
    CFRelease(v15);
  }
  (*v11)();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v16 = (const void *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v16) {
      CFRelease(v16);
    }
  }
  uint64_t v17 = (const void *)[v3 objectForKey:@"shippingMethod"];
  uint64_t v18 = v17;
  if (v17) {
    CFRetain(v17);
  }
  uint64_t v19 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = v18;
  if (v19) {
    CFRelease(v19);
  }
  ((void (*)(void))*MEMORY[0x1E4FB6310])();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v20 = (const void *)*((void *)this + 3);
    *((void *)this + 3) = 0;
    if (v20) {
      CFRelease(v20);
    }
  }
  uint64_t v21 = (const void *)[v3 objectForKey:@"credential"];
  uint64_t v22 = v21;
  if (v21) {
    CFRetain(v21);
  }
  uint64_t v23 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = v22;
  if (v23) {
    CFRelease(v23);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v24 = (const void *)*((void *)this + 4);
    *((void *)this + 4) = 0;
    if (v24) {
      CFRelease(v24);
    }
  }
  uint64_t v25 = (const void *)[v3 objectForKey:@"authKitAuthenticationResults"];
  uint64_t v26 = v25;
  if (v25) {
    CFRetain(v25);
  }
  uint64_t v27 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = v26;
  if (v27) {
    CFRelease(v27);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v28 = (const void *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (v28) {
      CFRelease(v28);
    }
  }
  uint64_t v29 = (const void *)[v3 objectForKey:@"biometryAttempts"];
  uint64_t v30 = v29;
  if (v29) {
    CFRetain(v29);
  }
  long long v31 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = v30;
  if (v31) {
    CFRelease(v31);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    CFTypeID v32 = (const void *)*((void *)this + 6);
    *((void *)this + 6) = 0;
    if (v32) {
      CFRelease(v32);
    }
  }
  uint64_t v33 = (const void *)[v3 objectForKey:@"installmentAuthorizationToken"];
  int v34 = v33;
  if (v33) {
    CFRetain(v33);
  }
  unint64_t v35 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = v34;
  if (v35) {
    CFRelease(v35);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v36 = (const void *)*((void *)this + 7);
    *((void *)this + 7) = 0;
    if (v36) {
      CFRelease(v36);
    }
  }
  if (v3) {
    CFRelease(v3);
  }
  return this;
}

void sub_19949FE0C(_Unwind_Exception *exception_object)
{
  id v3 = *(const void **)(v1 + 56);
  *(void *)(v1 + 56) = 0;
  if (v3) {
    CFRelease(v3);
  }
  id v4 = *(const void **)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(const void **)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *(const void **)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *(const void **)v1;
  *(void *)uint64_t v1 = 0;
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCPKPayment::toID(WebKit::CoreIPCPKPayment *this@<X0>, void *a2@<X8>)
{
  id v4 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:8];
  uint64_t v5 = v4;
  if (*(void *)this) {
    [v4 setObject:*(void *)this forKeyedSubscript:@"token"];
  }
  uint64_t v6 = *((void *)this + 1);
  if (v6) {
    [v5 setObject:v6 forKeyedSubscript:@"shippingContact"];
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7) {
    [v5 setObject:v7 forKeyedSubscript:@"billingContact"];
  }
  uint64_t v8 = *((void *)this + 3);
  if (v8) {
    [v5 setObject:v8 forKeyedSubscript:@"shippingMethod"];
  }
  uint64_t v9 = *((void *)this + 4);
  if (v9) {
    [v5 setObject:v9 forKeyedSubscript:@"credential"];
  }
  uint64_t v10 = *((void *)this + 5);
  if (v10) {
    [v5 setObject:v10 forKeyedSubscript:@"authKitAuthenticationResults"];
  }
  uint64_t v11 = *((void *)this + 6);
  if (v11) {
    [v5 setObject:v11 forKeyedSubscript:@"biometryAttempts"];
  }
  uint64_t v12 = *((void *)this + 7);
  if (v12) {
    [v5 setObject:v12 forKeyedSubscript:@"installmentAuthorizationToken"];
  }
  uint64_t v13 = (uint64_t (**)(void))MEMORY[0x1E4FB6288];
  if ([(id)((uint64_t (*)(void))*MEMORY[0x1E4FB6288])() instancesRespondToSelector:sel__initWithWebKitPropertyListData_])
  {
    *a2 = [objc_alloc((Class)(*v13)()) _initWithWebKitPropertyListData:v5];
  }
  else
  {
    uint64_t v14 = [[WKKeyedCoder alloc] initWithDictionary:v5];
    *a2 = [objc_alloc((Class)(*v13)()) initWithCoder:v14];
    if (v14)
    {
      CFRelease(v14);
    }
  }
}

void sub_1994A0044(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCPKPaymentToken *WebKit::CoreIPCPKPaymentToken::CoreIPCPKPaymentToken(WebKit::CoreIPCPKPaymentToken *this, objc_object *a2)
{
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  WebKit::dictionaryForWebKitSecureCodingType((WebKit *)&v33, a2);
  id v3 = v33;
  id v4 = (const void *)[v33 objectForKey:@"paymentInstrumentName"];
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v6 = *(const void **)this;
  *(void *)this = v5;
  if (v6) {
    CFRelease(v6);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v7 = *(const void **)this;
    *(void *)this = 0;
    if (v7) {
      CFRelease(v7);
    }
  }
  uint64_t v8 = (const void *)[v3 objectForKey:@"paymentNetwork"];
  uint64_t v9 = v8;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v10 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = v9;
  if (v10) {
    CFRelease(v10);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v11 = (const void *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v11) {
      CFRelease(v11);
    }
  }
  uint64_t v12 = (const void *)[v3 objectForKey:@"transactionIdentifier"];
  uint64_t v13 = v12;
  if (v12) {
    CFRetain(v12);
  }
  uint64_t v14 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = v13;
  if (v14) {
    CFRelease(v14);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v15 = (const void *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v15) {
      CFRelease(v15);
    }
  }
  uint64_t v16 = (const void *)[v3 objectForKey:@"paymentData"];
  uint64_t v17 = v16;
  if (v16) {
    CFRetain(v16);
  }
  uint64_t v18 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = v17;
  if (v18) {
    CFRelease(v18);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v19 = (const void *)*((void *)this + 3);
    *((void *)this + 3) = 0;
    if (v19) {
      CFRelease(v19);
    }
  }
  uint64_t v20 = (const void *)[v3 objectForKey:@"paymentMethod"];
  uint64_t v21 = v20;
  if (v20) {
    CFRetain(v20);
  }
  uint64_t v22 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = v21;
  if (v22) {
    CFRelease(v22);
  }
  ((void (*)(void))*MEMORY[0x1E4FB62F0])();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v23 = (const void *)*((void *)this + 4);
    *((void *)this + 4) = 0;
    if (v23) {
      CFRelease(v23);
    }
  }
  uint64_t v24 = (const void *)[v3 objectForKey:@"redeemURL"];
  uint64_t v25 = v24;
  if (v24) {
    CFRetain(v24);
  }
  uint64_t v26 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = v25;
  if (v26) {
    CFRelease(v26);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v27 = (const void *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (v27) {
      CFRelease(v27);
    }
  }
  uint64_t v28 = (const void *)[v3 objectForKey:@"retryNonce"];
  uint64_t v29 = v28;
  if (v28) {
    CFRetain(v28);
  }
  uint64_t v30 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = v29;
  if (v30) {
    CFRelease(v30);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    long long v31 = (const void *)*((void *)this + 6);
    *((void *)this + 6) = 0;
    if (v31) {
      CFRelease(v31);
    }
  }
  if (v3) {
    CFRelease(v3);
  }
  return this;
}

void sub_1994A0350(_Unwind_Exception *exception_object)
{
  id v3 = *(const void **)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v3) {
    CFRelease(v3);
  }
  id v4 = *(const void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(const void **)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *(const void **)v1;
  *(void *)uint64_t v1 = 0;
  if (v9) {
    CFRelease(v9);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCPKPaymentToken::toID(WebKit::CoreIPCPKPaymentToken *this@<X0>, void *a2@<X8>)
{
  id v4 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:7];
  uint64_t v5 = v4;
  if (*(void *)this) {
    [v4 setObject:*(void *)this forKeyedSubscript:@"paymentInstrumentName"];
  }
  uint64_t v6 = *((void *)this + 1);
  if (v6) {
    [v5 setObject:v6 forKeyedSubscript:@"paymentNetwork"];
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7) {
    [v5 setObject:v7 forKeyedSubscript:@"transactionIdentifier"];
  }
  uint64_t v8 = *((void *)this + 3);
  if (v8) {
    [v5 setObject:v8 forKeyedSubscript:@"paymentData"];
  }
  uint64_t v9 = *((void *)this + 4);
  if (v9) {
    [v5 setObject:v9 forKeyedSubscript:@"paymentMethod"];
  }
  uint64_t v10 = *((void *)this + 5);
  if (v10) {
    [v5 setObject:v10 forKeyedSubscript:@"redeemURL"];
  }
  uint64_t v11 = *((void *)this + 6);
  if (v11) {
    [v5 setObject:v11 forKeyedSubscript:@"retryNonce"];
  }
  uint64_t v12 = (uint64_t (**)(void))MEMORY[0x1E4FB62D0];
  if ([(id)((uint64_t (*)(void))*MEMORY[0x1E4FB62D0])() instancesRespondToSelector:sel__initWithWebKitPropertyListData_])
  {
    *a2 = [objc_alloc((Class)(*v12)()) _initWithWebKitPropertyListData:v5];
  }
  else
  {
    uint64_t v13 = [[WKKeyedCoder alloc] initWithDictionary:v5];
    *a2 = [objc_alloc((Class)(*v12)()) initWithCoder:v13];
    if (v13)
    {
      CFRelease(v13);
    }
  }
}

void sub_1994A055C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCPKShippingMethod *WebKit::CoreIPCPKShippingMethod::CoreIPCPKShippingMethod(WebKit::CoreIPCPKShippingMethod *this, objc_object *a2)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  WebKit::dictionaryForWebKitSecureCodingType((WebKit *)&v45, a2);
  id v3 = v45;
  id v4 = (const void *)[v45 objectForKey:@"label"];
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v6 = *(const void **)this;
  *(void *)this = v5;
  if (v6) {
    CFRelease(v6);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v7 = *(const void **)this;
    *(void *)this = 0;
    if (v7) {
      CFRelease(v7);
    }
  }
  uint64_t v8 = (const void *)[v3 objectForKey:@"amount"];
  uint64_t v9 = v8;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v10 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = v9;
  if (v10) {
    CFRelease(v10);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v11 = (const void *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v11) {
      CFRelease(v11);
    }
  }
  uint64_t v12 = (const void *)[v3 objectForKey:@"type"];
  uint64_t v13 = v12;
  if (v12) {
    CFRetain(v12);
  }
  uint64_t v14 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = v13;
  if (v14) {
    CFRelease(v14);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v15 = (const void *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v15) {
      CFRelease(v15);
    }
  }
  uint64_t v16 = (const void *)[v3 objectForKey:@"localizedTitle"];
  uint64_t v17 = v16;
  if (v16) {
    CFRetain(v16);
  }
  uint64_t v18 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = v17;
  if (v18) {
    CFRelease(v18);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v19 = (const void *)*((void *)this + 3);
    *((void *)this + 3) = 0;
    if (v19) {
      CFRelease(v19);
    }
  }
  uint64_t v20 = (const void *)[v3 objectForKey:@"localizedAmount"];
  uint64_t v21 = v20;
  if (v20) {
    CFRetain(v20);
  }
  uint64_t v22 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = v21;
  if (v22) {
    CFRelease(v22);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v23 = (const void *)*((void *)this + 4);
    *((void *)this + 4) = 0;
    if (v23) {
      CFRelease(v23);
    }
  }
  uint64_t v24 = (const void *)[v3 objectForKey:@"useDarkColor"];
  uint64_t v25 = v24;
  if (v24) {
    CFRetain(v24);
  }
  uint64_t v26 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = v25;
  if (v26) {
    CFRelease(v26);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v27 = (const void *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (v27) {
      CFRelease(v27);
    }
  }
  uint64_t v28 = (const void *)[v3 objectForKey:@"useLargeFont"];
  uint64_t v29 = v28;
  if (v28) {
    CFRetain(v28);
  }
  uint64_t v30 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = v29;
  if (v30) {
    CFRelease(v30);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    long long v31 = (const void *)*((void *)this + 6);
    *((void *)this + 6) = 0;
    if (v31) {
      CFRelease(v31);
    }
  }
  CFTypeID v32 = (const void *)[v3 objectForKey:@"identifier"];
  id v33 = v32;
  if (v32) {
    CFRetain(v32);
  }
  int v34 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = v33;
  if (v34) {
    CFRelease(v34);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v35 = (const void *)*((void *)this + 7);
    *((void *)this + 7) = 0;
    if (v35) {
      CFRelease(v35);
    }
  }
  unint64_t v36 = (const void *)[v3 objectForKey:@"detail"];
  unint64_t v37 = v36;
  if (v36) {
    CFRetain(v36);
  }
  id v38 = (const void *)*((void *)this + 8);
  *((void *)this + 8) = v37;
  if (v38) {
    CFRelease(v38);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v39 = (const void *)*((void *)this + 8);
    *((void *)this + 8) = 0;
    if (v39) {
      CFRelease(v39);
    }
  }
  uint64_t v40 = (const void *)[v3 objectForKey:@"dateComponentsRange"];
  uint64_t v41 = v40;
  if (v40) {
    CFRetain(v40);
  }
  int v42 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = v41;
  if (v42) {
    CFRelease(v42);
  }
  ((void (*)(void))*MEMORY[0x1E4FB6378])();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v43 = (const void *)*((void *)this + 9);
    *((void *)this + 9) = 0;
    if (v43) {
      CFRelease(v43);
    }
  }
  if (v3) {
    CFRelease(v3);
  }
  return this;
}

void sub_1994A09A0(_Unwind_Exception *exception_object)
{
  id v3 = *(const void **)(v1 + 72);
  *(void *)(v1 + 72) = 0;
  if (v3) {
    CFRelease(v3);
  }
  id v4 = *(const void **)(v1 + 64);
  *(void *)(v1 + 64) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(v1 + 56);
  *(void *)(v1 + 56) = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *(const void **)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *(const void **)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = *(const void **)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = *(const void **)v1;
  *(void *)uint64_t v1 = 0;
  if (v12) {
    CFRelease(v12);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCPKShippingMethod::toID(WebKit::CoreIPCPKShippingMethod *this@<X0>, void *a2@<X8>)
{
  id v4 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:10];
  uint64_t v5 = v4;
  if (*(void *)this) {
    [v4 setObject:*(void *)this forKeyedSubscript:@"label"];
  }
  uint64_t v6 = *((void *)this + 1);
  if (v6) {
    [v5 setObject:v6 forKeyedSubscript:@"amount"];
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7) {
    [v5 setObject:v7 forKeyedSubscript:@"type"];
  }
  uint64_t v8 = *((void *)this + 3);
  if (v8) {
    [v5 setObject:v8 forKeyedSubscript:@"localizedTitle"];
  }
  uint64_t v9 = *((void *)this + 4);
  if (v9) {
    [v5 setObject:v9 forKeyedSubscript:@"localizedAmount"];
  }
  uint64_t v10 = *((void *)this + 5);
  if (v10) {
    [v5 setObject:v10 forKeyedSubscript:@"useDarkColor"];
  }
  uint64_t v11 = *((void *)this + 6);
  if (v11) {
    [v5 setObject:v11 forKeyedSubscript:@"useLargeFont"];
  }
  uint64_t v12 = *((void *)this + 7);
  if (v12) {
    [v5 setObject:v12 forKeyedSubscript:@"identifier"];
  }
  uint64_t v13 = *((void *)this + 8);
  if (v13) {
    [v5 setObject:v13 forKeyedSubscript:@"detail"];
  }
  uint64_t v14 = *((void *)this + 9);
  if (v14) {
    [v5 setObject:v14 forKeyedSubscript:@"dateComponentsRange"];
  }
  uint64_t v15 = (uint64_t (**)(void))MEMORY[0x1E4FB6310];
  if ([(id)((uint64_t (*)(void))*MEMORY[0x1E4FB6310])() instancesRespondToSelector:sel__initWithWebKitPropertyListData_])
  {
    *a2 = [objc_alloc((Class)(*v15)()) _initWithWebKitPropertyListData:v5];
  }
  else
  {
    uint64_t v16 = [[WKKeyedCoder alloc] initWithDictionary:v5];
    *a2 = [objc_alloc((Class)(*v15)()) initWithCoder:v16];
    if (v16)
    {
      CFRelease(v16);
    }
  }
}

void sub_1994A0C34(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCPKDateComponentsRange *WebKit::CoreIPCPKDateComponentsRange::CoreIPCPKDateComponentsRange(WebKit::CoreIPCPKDateComponentsRange *this, objc_object *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  WebKit::dictionaryForWebKitSecureCodingType((WebKit *)&v13, a2);
  id v3 = v13;
  id v4 = (const void *)[v13 objectForKey:@"startDateComponents"];
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v6 = *(const void **)this;
  *(void *)this = v5;
  if (v6) {
    CFRelease(v6);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v7 = *(const void **)this;
    *(void *)this = 0;
    if (v7) {
      CFRelease(v7);
    }
  }
  uint64_t v8 = (const void *)[v3 objectForKey:@"endDateComponents"];
  uint64_t v9 = v8;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v10 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = v9;
  if (v10) {
    CFRelease(v10);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v11 = (const void *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v11) {
      CFRelease(v11);
    }
  }
  if (v3) {
    CFRelease(v3);
  }
  return this;
}

void sub_1994A0D58(_Unwind_Exception *exception_object)
{
  id v3 = *(const void **)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  id v4 = *(const void **)v1;
  *(void *)uint64_t v1 = 0;
  if (v4) {
    CFRelease(v4);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCPKDateComponentsRange::toID(WebKit::CoreIPCPKDateComponentsRange *this@<X0>, void *a2@<X8>)
{
  id v4 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:2];
  uint64_t v5 = v4;
  if (*(void *)this) {
    [v4 setObject:*(void *)this forKeyedSubscript:@"startDateComponents"];
  }
  uint64_t v6 = *((void *)this + 1);
  if (v6) {
    [v5 setObject:v6 forKeyedSubscript:@"endDateComponents"];
  }
  uint64_t v7 = (uint64_t (**)(void))MEMORY[0x1E4FB6378];
  if ([(id)((uint64_t (*)(void))*MEMORY[0x1E4FB6378])() instancesRespondToSelector:sel__initWithWebKitPropertyListData_])
  {
    *a2 = [objc_alloc((Class)(*v7)()) _initWithWebKitPropertyListData:v5];
  }
  else
  {
    uint64_t v8 = [[WKKeyedCoder alloc] initWithDictionary:v5];
    *a2 = [objc_alloc((Class)(*v7)()) initWithCoder:v8];
    if (v8)
    {
      CFRelease(v8);
    }
  }
}

void sub_1994A0E9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

WebKit::CoreIPCPKPaymentMethod *WebKit::CoreIPCPKPaymentMethod::CoreIPCPKPaymentMethod(WebKit::CoreIPCPKPaymentMethod *this, objc_object *a2)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  WebKit::dictionaryForWebKitSecureCodingType((WebKit *)&v37, a2);
  id v3 = v37;
  id v4 = (const void *)[v37 objectForKey:@"type"];
  uint64_t v5 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v6 = *(const void **)this;
  *(void *)this = v5;
  if (v6) {
    CFRelease(v6);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v7 = *(const void **)this;
    *(void *)this = 0;
    if (v7) {
      CFRelease(v7);
    }
  }
  uint64_t v8 = (const void *)[v3 objectForKey:@"displayName"];
  uint64_t v9 = v8;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v10 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = v9;
  if (v10) {
    CFRelease(v10);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v11 = (const void *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v11) {
      CFRelease(v11);
    }
  }
  uint64_t v12 = (const void *)[v3 objectForKey:@"network"];
  id v13 = v12;
  if (v12) {
    CFRetain(v12);
  }
  uint64_t v14 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = v13;
  if (v14) {
    CFRelease(v14);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v15 = (const void *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v15) {
      CFRelease(v15);
    }
  }
  uint64_t v16 = (const void *)[v3 objectForKey:@"paymentPass"];
  uint64_t v17 = v16;
  if (v16) {
    CFRetain(v16);
  }
  uint64_t v18 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = v17;
  if (v18) {
    CFRelease(v18);
  }
  ((void (*)(void))*MEMORY[0x1E4FB6350])();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v19 = (const void *)*((void *)this + 3);
    *((void *)this + 3) = 0;
    if (v19) {
      CFRelease(v19);
    }
  }
  uint64_t v20 = (const void *)[v3 objectForKey:@"peerPaymentQuoteIdentifier"];
  uint64_t v21 = v20;
  if (v20) {
    CFRetain(v20);
  }
  uint64_t v22 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = v21;
  if (v22) {
    CFRelease(v22);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v23 = (const void *)*((void *)this + 4);
    *((void *)this + 4) = 0;
    if (v23) {
      CFRelease(v23);
    }
  }
  uint64_t v24 = (const void *)[v3 objectForKey:@"billingAddress"];
  uint64_t v25 = v24;
  if (v24) {
    CFRetain(v24);
  }
  uint64_t v26 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = v25;
  if (v26) {
    CFRelease(v26);
  }
  ((void (*)(void))*MEMORY[0x1E4FB6278])();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v27 = (const void *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (v27) {
      CFRelease(v27);
    }
  }
  uint64_t v28 = (const void *)[v3 objectForKey:@"installmentBindToken"];
  uint64_t v29 = v28;
  if (v28) {
    CFRetain(v28);
  }
  uint64_t v30 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = v29;
  if (v30) {
    CFRelease(v30);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    long long v31 = (const void *)*((void *)this + 6);
    *((void *)this + 6) = 0;
    if (v31) {
      CFRelease(v31);
    }
  }
  CFTypeID v32 = (const void *)[v3 objectForKey:@"usePeerPaymentBalance"];
  id v33 = v32;
  if (v32) {
    CFRetain(v32);
  }
  int v34 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = v33;
  if (v34) {
    CFRelease(v34);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v35 = (const void *)*((void *)this + 7);
    *((void *)this + 7) = 0;
    if (v35)
    {
      CFRelease(v35);
      if (!v3) {
        return this;
      }
      goto LABEL_57;
    }
  }
  if (v3) {
LABEL_57:
  }
    CFRelease(v3);
  return this;
}

void sub_1994A1220(_Unwind_Exception *exception_object)
{
  id v3 = *(const void **)(v1 + 56);
  *(void *)(v1 + 56) = 0;
  if (v3) {
    CFRelease(v3);
  }
  id v4 = *(const void **)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(const void **)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *(const void **)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *(const void **)v1;
  *(void *)uint64_t v1 = 0;
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::CoreIPCPKPaymentMethod::toID(WebKit::CoreIPCPKPaymentMethod *this@<X0>, void *a2@<X8>)
{
  id v4 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:8];
  uint64_t v5 = v4;
  if (*(void *)this) {
    [v4 setObject:*(void *)this forKeyedSubscript:@"type"];
  }
  uint64_t v6 = *((void *)this + 1);
  if (v6) {
    [v5 setObject:v6 forKeyedSubscript:@"displayName"];
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7) {
    [v5 setObject:v7 forKeyedSubscript:@"network"];
  }
  uint64_t v8 = *((void *)this + 3);
  if (v8) {
    [v5 setObject:v8 forKeyedSubscript:@"paymentPass"];
  }
  uint64_t v9 = *((void *)this + 4);
  if (v9) {
    [v5 setObject:v9 forKeyedSubscript:@"peerPaymentQuoteIdentifier"];
  }
  uint64_t v10 = *((void *)this + 5);
  if (v10) {
    [v5 setObject:v10 forKeyedSubscript:@"billingAddress"];
  }
  uint64_t v11 = *((void *)this + 6);
  if (v11) {
    [v5 setObject:v11 forKeyedSubscript:@"installmentBindToken"];
  }
  uint64_t v12 = *((void *)this + 7);
  if (v12) {
    [v5 setObject:v12 forKeyedSubscript:@"usePeerPaymentBalance"];
  }
  id v13 = (uint64_t (**)(void))MEMORY[0x1E4FB62F0];
  if ([(id)((uint64_t (*)(void))*MEMORY[0x1E4FB62F0])() instancesRespondToSelector:sel__initWithWebKitPropertyListData_])
  {
    *a2 = [objc_alloc((Class)(*v13)()) _initWithWebKitPropertyListData:v5];
  }
  else
  {
    uint64_t v14 = [[WKKeyedCoder alloc] initWithDictionary:v5];
    *a2 = [objc_alloc((Class)(*v13)()) initWithCoder:v14];
    if (v14)
    {
      CFRelease(v14);
    }
  }
}

void sub_1994A145C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::platformInvalidate(IPC::Connection *this)
{
  if (*((unsigned char *)this + 72))
  {
    std::unique_ptr<IPC::MachMessage>::reset[abi:sn180100]((uint64_t *)this + 43, 0);
    *((unsigned char *)this + 72) = 0;
    IPC::Connection::cancelSendSource(this);
    IPC::Connection::cancelReceiveSource((dispatch_source_t *)this);
  }
  else
  {
    char v2 = (WTF *)*((unsigned int *)this + 78);
    if ((v2 + 1) >= 2)
    {
      WTF::deallocateSendRightSafely(v2);
      *((_DWORD *)this + 78) = 0;
    }
    if (*((void *)this + 42)) {
      IPC::Connection::cancelReceiveSource((dispatch_source_t *)this);
    }
    mach_port_name_t v3 = *((_DWORD *)this + 82);
    if (v3)
    {
      id v4 = (ipc_space_t *)MEMORY[0x1E4F14960];
      mach_port_unguard(*MEMORY[0x1E4F14960], v3, (mach_port_context_t)this);
      IPC::requestNoSenderNotifications(*((_DWORD *)this + 82), 0);
      mach_port_mod_refs(*v4, *((_DWORD *)this + 82), 1u, -1);
      *((_DWORD *)this + 82) = 0;
    }
  }
}

void IPC::Connection::cancelReceiveSource(dispatch_source_t *this)
{
  dispatch_source_cancel(this[42]);
  dispatch_source_t v2 = this[42];
  if (v2) {

  }
  this[42] = 0;
  *((_DWORD *)this + 82) = 0;
}

void IPC::Connection::cancelSendSource(IPC::Connection *this)
{
  *((_DWORD *)this + 78) = 0;
  dispatch_source_t v2 = *((void *)this + 40);
  if (v2)
  {
    dispatch_source_cancel(v2);
    mach_port_name_t v3 = (void *)*((void *)this + 40);
    if (v3) {

    }
    *((void *)this + 40) = 0;
  }
}

atomic_uchar *__destroy_helper_block_e8_32c44_ZTSKZN3IPC10Connection12platformOpenEvE3__0(atomic_uchar *result)
{
  uint64_t v1 = (atomic_uchar **)*((void *)result + 5);
  *((void *)result + 5) = 0;
  if (v1) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v1);
  }
  return result;
}

uint64_t ___ZN3IPC10Connection12platformOpenEv_block_invoke_2(uint64_t a1)
{
  dispatch_source_t v2 = (ipc_space_t *)MEMORY[0x1E4F14960];
  mach_port_unguard(*MEMORY[0x1E4F14960], *(_DWORD *)(a1 + 40), *(void *)(a1 + 32));
  IPC::requestNoSenderNotifications(*(_DWORD *)(a1 + 40), 0);
  ipc_space_t v3 = *v2;
  mach_port_name_t v4 = *(_DWORD *)(a1 + 40);

  return mach_port_mod_refs(v3, v4, 1u, -1);
}

atomic_uchar *__destroy_helper_block_e8_32c44_ZTSKZN3IPC10Connection12platformOpenEvE3__1(atomic_uchar *result)
{
  uint64_t v1 = (atomic_uchar **)*((void *)result + 4);
  *((void *)result + 4) = 0;
  if (v1) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v1);
  }
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::HexNumberBuffer,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,IPC::MessageName,char>(void *a1, uint64_t a2, unsigned char *a3, uint64_t a4, unsigned __int16 a5)
{
  if (a4) {
    size_t v6 = a4 - 1;
  }
  else {
    size_t v6 = 0;
  }
  if (v6 >> 31)
  {
    uint64_t result = 124;
    __break(0xC471u);
    goto LABEL_27;
  }
  unsigned __int16 v7 = a5;
  uint64_t v5 = a1;
  int v9 = 0;
  uint64_t v11 = (unsigned int *)(a2 + 16);
  int v10 = *(_DWORD *)(a2 + 16);
  unsigned __int16 v12 = a5;
  do
  {
    ++v9;
    unsigned int v13 = v12;
    v12 /= 0xAu;
  }
  while (v13 > 9);
  uint64_t result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(23, v10, 11, v6, 3, v9, 1, (uint64_t)v30);
  if (v30[0]) {
    goto LABEL_31;
  }
  unsigned int v15 = v31;
  if (!v31)
  {
LABEL_28:
    uint64_t v29 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    void *v5 = v29;
    return result;
  }
  if ((v31 & 0x80000000) != 0 || (result = WTF::tryFastCompactMalloc((WTF *)(v31 + 20)), (uint64_t v16 = v32) == 0))
  {
LABEL_31:
    void *v5 = 0;
    __break(0xC471u);
    return result;
  }
  *CFTypeID v32 = 2;
  v16[1] = v15;
  *((void *)v16 + 1) = v16 + 5;
  v16[4] = 4;
  qmemcpy(v16 + 5, "Unhandled error code 0x", 23);
  size_t v17 = *v11;
  if (v17 >= 0x11)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v18 = (char *)v16 + 43;
  if (v17)
  {
    uint64_t v19 = (char *)v11 - v17;
    if (v17 == 1) {
      *uint64_t v18 = *v19;
    }
    else {
      uint64_t result = (uint64_t)memcpy((char *)v16 + 43, v19, v17);
    }
  }
  uint64_t v20 = &v18[*v11];
  *(void *)uint64_t v20 = *(void *)", message '";
  *(_DWORD *)(v20 + 7) = 656434535;
  uint64_t v21 = v20 + 11;
  if (v6)
  {
    if (v6 == 1) {
      *uint64_t v21 = *a3;
    }
    else {
      uint64_t result = (uint64_t)memcpy(v20 + 11, a3, v6);
    }
  }
  uint64_t v22 = 0;
  uint64_t v23 = &v21[v6];
  v23[2] = 40;
  *(_WORD *)uint64_t v23 = 8231;
  unsigned __int16 v24 = v7;
  do
  {
    unsigned int v25 = v24;
    *((unsigned char *)&v32 + v22-- + 6) = (v24 % 0xAu) | 0x30;
    v24 /= 0xAu;
  }
  while (v25 > 9);
  uint64_t v26 = v23 + 3;
  if (v22 + 8 <= 7) {
    uint64_t result = (uint64_t)memcpy(v26, (char *)&v32 + v22 + 7, -v22);
  }
  unsigned int v27 = 0;
  do
  {
    ++v27;
    unsigned int v28 = v7;
    v7 /= 0xAu;
  }
  while (v28 >= 0xA);
  *((unsigned char *)v26 + v27) = 41;
  void *v5 = v16;
  return result;
}

uint64_t WebKit::logAndSetCrashLogMessage(WebKit *this, const char *a2)
{
  WTFLogAlways();

  return WTF::setCrashLogMessage(this, v3);
}

uintptr_t ___ZN3IPC10Connection20initializeSendSourceEv_block_invoke_8(uint64_t a1)
{
  return IPC::Connection::initializeSendSource(void)::$_1::operator()(*(IPC::Connection **)(a1 + 32));
}

uintptr_t IPC::Connection::initializeSendSource(void)::$_1::operator()(IPC::Connection *a1)
{
  uintptr_t result = *((void *)a1 + 40);
  if (result)
  {
    uintptr_t result = dispatch_source_get_data((dispatch_source_t)result);
    if ((result & 8) != 0)
    {
      return (uintptr_t)IPC::Connection::resumeSendSource(a1, v3);
    }
  }
  return result;
}

atomic_uchar *__destroy_helper_block_e8_32c52_ZTSKZN3IPC10Connection20initializeSendSourceEvE3__1(atomic_uchar *result)
{
  uint64_t v1 = (atomic_uchar **)*((void *)result + 5);
  *((void *)result + 5) = 0;
  if (v1) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v1);
  }
  return result;
}

uint64_t ___ZN3IPC10Connection20initializeSendSourceEv_block_invoke_10(uint64_t a1)
{
  return WTF::deallocateSendRightSafely((WTF *)*(unsigned int *)(a1 + 32));
}

_xpc_connection_s *IPC::Connection::remoteProcessID(IPC::Connection *this)
{
  uintptr_t result = (_xpc_connection_s *)*((void *)this + 44);
  if (result) {
    return (_xpc_connection_s *)xpc_connection_get_pid(result);
  }
  return result;
}

void WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send(xpc_connection_t *a1, uint64_t a2, uint64_t a3)
{
  (*((void (**)(xpc_connection_t *))*a1 + 2))(a1);
  (*((void (**)(id *__return_ptr, xpc_connection_t *, uint64_t, uint64_t))*a1 + 4))(&v7, a1, a2, a3);
  id v6 = v7;
  (*((void (**)(xpc_connection_t *))*a1 + 2))(a1);
  xpc_connection_send_message(a1[2], v6);
  if (v7) {
}
  }

void sub_1994A1A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {

  }
  _Unwind_Resume(exception_object);
}

void WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  (*(void (**)(void *))(*a1 + 16))(a1);
  (*(void (**)(id *__return_ptr, void *, uint64_t, uint64_t))(*a1 + 32))(&v12, a1, a2, a3);
  id v8 = v12;
  uint64_t v9 = *a4;
  *a4 = 0;
  int v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v10 = &unk_1EEA0FFE8;
  v10[1] = v9;
  uint64_t v11 = v10;
  WebKit::Daemon::Connection::sendWithReply(a1, v8, (uint64_t *)&v11);
  if (v11) {
    (*(void (**)(void *))(*v11 + 8))(v11);
  }
  if (v12) {
}
  }

void sub_1994A1B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a10) {

  }
  _Unwind_Resume(exception_object);
}

void WebKit::Daemon::Connection::sendWithReply(void *a1, void *a2, uint64_t *a3)
{
  (*(void (**)(void *))(*a1 + 16))(a1);
  id v6 = (_xpc_connection_s *)a1[2];
  uint64_t v7 = *a3;
  *a3 = 0;
  id v8 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  void *v8 = MEMORY[0x1E4F14398];
  v8[1] = 50331650;
  v8[2] = WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WebKit::Daemon::Connection::sendWithReply(NSObject  {objcproto13OS_xpc_object}*,WTF::CompletionHandler<void ()(NSObject  {objcproto13OS_xpc_object}*)> &&)::$_0>(WebKit::Daemon::Connection::sendWithReply(NSObject  {objcproto13OS_xpc_object}*,WTF::CompletionHandler<void ()(NSObject  {objcproto13OS_xpc_object}*)> &&)::$_0)::{lambda(void *,NSObject  {objcproto13OS_xpc_object}*)#1}::__invoke;
  v8[3] = &WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WebKit::Daemon::Connection::sendWithReply(NSObject  {objcproto13OS_xpc_object}*,WTF::CompletionHandler<void ()(NSObject  {objcproto13OS_xpc_object}*)> &&)::$_0>(WebKit::Daemon::Connection::sendWithReply(NSObject  {objcproto13OS_xpc_object}*,WTF::CompletionHandler<void ()(NSObject  {objcproto13OS_xpc_object}*)> &&)::$_0)::descriptor;
  v8[4] = v7;
  xpc_connection_send_message_with_reply(v6, a2, MEMORY[0x1E4F14428], v8);

  _Block_release(v8);
}

void sub_1994A1CF8(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

WTF *WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::initializeConnectionIfNeeded(WTF *result)
{
  if (!*((void *)result + 2))
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t v2 = *((void *)result + 3);
    if (v2) {
      ipc_space_t v3 = (const char *)(v2 + 16);
    }
    else {
      ipc_space_t v3 = 0;
    }
    mach_service = xpc_connection_create_mach_service(v3, MEMORY[0x1E4F14428], 0);
    uint64_t v5 = *(void **)(v1 + 16);
    *(void *)(v1 + 16) = mach_service;
    if (v5)
    {

      mach_service = *(_xpc_connection_s **)(v1 + 16);
    }
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 3321888768;
    handler[2] = ___ZNK6WebKit6Daemon23ConnectionToMachServiceINS_3PCM16ConnectionTraitsEE28initializeConnectionIfNeededEv_block_invoke;
    handler[3] = &__block_descriptor_40_e8_32c149_ZTSKZNK6WebKit6Daemon23ConnectionToMachServiceINS_3PCM16ConnectionTraitsEE28initializeConnectionIfNeededEvEUlPU24objcproto13OS_xpc_object8NSObjectE__e33_v16__0__NSObject_OS_xpc_object__8l;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v1 + 8), v1);
    id v6 = *(atomic_uint **)(v1 + 8);
    if (v6)
    {
      atomic_fetch_add(v6, 1u);
      atomic_fetch_add(v6, 1u);
    }
    int v10 = (WTF *)v6;
    xpc_connection_set_event_handler(mach_service, handler);
    if (v6 && atomic_fetch_add(v6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v6);
      WTF::fastFree((WTF *)v6, v7);
    }
    xpc_connection_activate(*(xpc_connection_t *)(v1 + 16));
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
    uintptr_t result = v10;
    int v10 = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)result);
        return (WTF *)WTF::fastFree(result, v8);
      }
    }
  }
  return result;
}

void sub_1994A1EA0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  if (a14 && atomic_fetch_add((atomic_uint *volatile)a14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a14);
    WTF::fastFree(a14, a2);
  }
  if (v14)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZNK6WebKit6Daemon23ConnectionToMachServiceINS_3PCM16ConnectionTraitsEE28initializeConnectionIfNeededEv_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v4 = result;
    if (a2 == MEMORY[0x1E4F14528])
    {
      uint64_t v5 = xpc_connection_copy_invalidation_reason();
      WTFLogAlways();
      if (v5) {
        MEMORY[0x199740BF0](v5, 0x1000C8077774924);
      }
    }
    uint64_t v6 = *(void *)(v4 + 32);
    if (a2 == MEMORY[0x1E4F14520])
    {
      if (v6) {
        uint64_t v7 = *(void *)(v6 + 8);
      }
      else {
        uint64_t v7 = 0;
      }
      id v8 = *(void **)(v7 + 16);
      if (v8)
      {

        uint64_t v6 = *(void *)(v4 + 32);
      }
      *(void *)(v7 + 16) = 0;
    }
    uint64_t v9 = *(uint64_t (**)(void))(**(void **)(v6 + 8) + 40);
    return v9();
  }
  return result;
}

void sub_1994A2030(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x199740BF0](v1, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c149_ZTSKZNK6WebKit6Daemon23ConnectionToMachServiceINS_3PCM16ConnectionTraitsEE28initializeConnectionIfNeededEvEUlPU24objcproto13OS_xpc_object8NSObjectE_(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(atomic_uint **)(a2 + 32);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  *(void *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c149_ZTSKZNK6WebKit6Daemon23ConnectionToMachServiceINS_3PCM16ConnectionTraitsEE28initializeConnectionIfNeededEvEUlPU24objcproto13OS_xpc_object8NSObjectE_(uint64_t a1, void *a2)
{
  uintptr_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

WTF *WebKit::Daemon::ConnectionToMachService<WebKit::WebPushD::ConnectionTraits>::initializeConnectionIfNeeded(WTF *result)
{
  if (!*((void *)result + 2))
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t v2 = *((void *)result + 3);
    if (v2) {
      ipc_space_t v3 = (const char *)(v2 + 16);
    }
    else {
      ipc_space_t v3 = 0;
    }
    mach_service = xpc_connection_create_mach_service(v3, MEMORY[0x1E4F14428], 0);
    uint64_t v5 = *(void **)(v1 + 16);
    *(void *)(v1 + 16) = mach_service;
    if (v5)
    {

      mach_service = *(_xpc_connection_s **)(v1 + 16);
    }
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 3321888768;
    handler[2] = ___ZNK6WebKit6Daemon23ConnectionToMachServiceINS_8WebPushD16ConnectionTraitsEE28initializeConnectionIfNeededEv_block_invoke;
    handler[3] = &__block_descriptor_40_e8_32c154_ZTSKZNK6WebKit6Daemon23ConnectionToMachServiceINS_8WebPushD16ConnectionTraitsEE28initializeConnectionIfNeededEvEUlPU24objcproto13OS_xpc_object8NSObjectE__e33_v16__0__NSObject_OS_xpc_object__8l;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v1 + 8), v1);
    uint64_t v6 = *(atomic_uint **)(v1 + 8);
    if (v6)
    {
      atomic_fetch_add(v6, 1u);
      atomic_fetch_add(v6, 1u);
    }
    int v10 = (WTF *)v6;
    xpc_connection_set_event_handler(mach_service, handler);
    if (v6 && atomic_fetch_add(v6, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v6);
      WTF::fastFree((WTF *)v6, v7);
    }
    xpc_connection_activate(*(xpc_connection_t *)(v1 + 16));
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
    uintptr_t result = v10;
    int v10 = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)result);
        return (WTF *)WTF::fastFree(result, v8);
      }
    }
  }
  return result;
}

void sub_1994A21FC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14)
{
  if (a14 && atomic_fetch_add((atomic_uint *volatile)a14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)a14);
    WTF::fastFree(a14, a2);
  }
  if (v14)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZNK6WebKit6Daemon23ConnectionToMachServiceINS_8WebPushD16ConnectionTraitsEE28initializeConnectionIfNeededEv_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  if (v2 && *(void *)(v2 + 8))
  {
    uint64_t v4 = result;
    if (a2 == MEMORY[0x1E4F14528])
    {
      uint64_t v5 = xpc_connection_copy_invalidation_reason();
      WTFLogAlways();
      if (v5) {
        MEMORY[0x199740BF0](v5, 0x1000C8077774924);
      }
    }
    uint64_t v6 = *(void *)(v4 + 32);
    if (a2 == MEMORY[0x1E4F14520])
    {
      if (v6) {
        uint64_t v7 = *(void *)(v6 + 8);
      }
      else {
        uint64_t v7 = 0;
      }
      id v8 = *(void **)(v7 + 16);
      if (v8)
      {

        uint64_t v6 = *(void *)(v4 + 32);
      }
      *(void *)(v7 + 16) = 0;
    }
    uint64_t v9 = *(uint64_t (**)(void))(**(void **)(v6 + 8) + 40);
    return v9();
  }
  return result;
}

void sub_1994A238C(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x199740BF0](v1, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c154_ZTSKZNK6WebKit6Daemon23ConnectionToMachServiceINS_8WebPushD16ConnectionTraitsEE28initializeConnectionIfNeededEvEUlPU24objcproto13OS_xpc_object8NSObjectE_(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(atomic_uint **)(a2 + 32);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  *(void *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c154_ZTSKZNK6WebKit6Daemon23ConnectionToMachServiceINS_8WebPushD16ConnectionTraitsEE28initializeConnectionIfNeededEvEUlPU24objcproto13OS_xpc_object8NSObjectE_(uint64_t a1, void *a2)
{
  uintptr_t result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void WebKit::transcode(WebKit *this@<X0>, const __CFString *a2@<X1>, __CFData **a3@<X8>)
{
  if (this)
  {
    uint64_t v7 = (__CFData *)objc_alloc_init(MEMORY[0x1E4F1CA58]);
    id v8 = CGImageDestinationCreateWithData(v7, a2, 1uLL, 0);
    CGImageDestinationAddImage(v8, this, 0);
    BOOL v9 = CGImageDestinationFinalize(v8);
    if (v9) {
      int v10 = v7;
    }
    else {
      int v10 = 0;
    }
    if (v9) {
      uint64_t v7 = 0;
    }
    *a3 = v10;
    if (v8) {
      CFRelease(v8);
    }
    if (v7)
    {
      CFRelease(v7);
    }
  }
  else
  {
    *a3 = 0;
  }
}

void sub_1994A24AC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::transcodeWithPreferredMIMEType(WebKit *this, CGImage *a2, const __CFString *a3)
{
  CFStringRef v5 = (const __CFString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F442D8], "typeWithMIMEType:conformingToType:", a3, *MEMORY[0x1E4F44400]), "identifier");
  CFStringRef v6 = v5;
  if (v5) {
    CFRetain(v5);
  }
  MEMORY[0x19972EAD0](&v12, v6);
  isSupportedImageCFNumberType Type = WebCore::isSupportedImageType((WebCore *)&v12, v7);
  int v10 = v12;
  id v12 = 0;
  if (!v10)
  {
LABEL_6:
    if (!isSupportedImageType) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_6;
  }
  WTF::StringImpl::destroy(v10, v8);
  if (!isSupportedImageType) {
    goto LABEL_13;
  }
LABEL_9:
  WebKit::transcode(a2, v6, &v12);
  uint64_t v11 = v12;
  if ([(WTF::StringImpl *)v12 length])
  {
    *(void *)this = v11;
    *((void *)this + 1) = v6;
    return;
  }
  if (v11) {
    CFRelease(v11);
  }
LABEL_13:
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1994A25C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::makeTextRecognitionResult(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  ipc_space_t v3 = (void *)[a1 allLines];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  uint64_t v89 = a2;
  *(void *)(a2 + 48) = 0;
  unint64_t v4 = [v3 count];
  if (v4)
  {
    if (v4 >= 0x4924925)
    {
      __break(0xC471u);
      JUMPOUT(0x1994A2F34);
    }
    unsigned int v5 = 56 * v4;
    uint64_t v6 = WTF::fastMalloc((WTF *)(56 * v4));
    *(_DWORD *)(a2 + 8) = v5 / 0x38;
    *(void *)a2 = v6;
  }
  long long v112 = 0u;
  long long v113 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  uint64_t v7 = [v3 countByEnumeratingWithState:&v110 objects:v116 count:16];
  if (v7)
  {
    char v8 = 0;
    long long v86 = v3;
    uint64_t v87 = *(void *)v111;
    uint64_t v9 = 1;
    do
    {
      uint64_t v10 = 0;
      uint64_t v88 = v7;
      do
      {
        if (*(void *)v111 != v87) {
          objc_enumerationMutation(v3);
        }
        uint64_t v11 = *(void **)(*((void *)&v110 + 1) + 8 * v10);
        uint64_t v108 = 0;
        uint64_t v109 = 0;
        uint64_t v91 = v10;
        CFNumberRef v92 = v11;
        id v12 = (void *)[v11 children];
        unint64_t v13 = [v12 count];
        if (v13)
        {
          if (v13 >= 0x5555556) {
            goto LABEL_120;
          }
          unsigned int v14 = 48 * v13;
          uint64_t v15 = WTF::fastMalloc((WTF *)(48 * v13));
          LODWORD(v109) = v14 / 0x30;
          uint64_t v108 = v15;
        }
        MEMORY[0x19972EAD0](&v107, [v92 string]);
        long long v105 = 0u;
        long long v106 = 0u;
        long long v103 = 0u;
        long long v104 = 0u;
        uint64_t v16 = [v12 countByEnumeratingWithState:&v103 objects:v115 count:16];
        unint64_t v90 = v9;
        if (!v16) {
          goto LABEL_59;
        }
        unsigned int v17 = 0;
        uint64_t v18 = *(void *)v104;
        do
        {
          uint64_t v19 = 0;
          do
          {
            if (*(void *)v104 != v18) {
              objc_enumerationMutation(v12);
            }
            unsigned int v20 = v107;
            if (v107) {
              unsigned int v20 = *((_DWORD *)v107 + 1);
            }
            if (v17 < v20)
            {
              uint64_t v21 = *(void **)(*((void *)&v103 + 1) + 8 * v19);
              MEMORY[0x19972EAD0](&v102, [v21 string]);
              if (v102) {
                uint64_t v22 = (WTF::StringImpl *)*((void *)v102 + 1);
              }
              else {
                uint64_t v22 = 0;
              }
              if (v107)
              {
                uint64_t v23 = WTF::StringImpl::find();
                int v24 = v23;
                if (v23 != -1)
                {
                  if (v23 == v17)
                  {
                    char v25 = v8 & (v17 == 0);
                    goto LABEL_36;
                  }
                  *(void *)v97 = 0;
                  int v26 = (int)v107;
                  if (v107)
                  {
                    unsigned int v27 = *((unsigned __int8 *)v107 + 16);
                    int v26 = *((_DWORD *)v107 + 1);
                    *(void *)v97 = *((void *)v107 + 1);
                    int v28 = (v27 >> 2) & 1;
                  }
                  else
                  {
                    LOBYTE(v28) = 1;
                  }
                  *(_DWORD *)&v97[8] = v26;
                  v97[12] = v28;
                  uint64_t v29 = WTF::StringView::substring(v97, v17, v23 - v17);
                  if (v30)
                  {
                    if ((v30 & 0xFF00000000) != 0)
                    {
                      unsigned int v31 = *(unsigned __int8 *)v29;
                      goto LABEL_33;
                    }
                    unsigned int v31 = *(unsigned __int16 *)v29;
                    if (v31 <= 0xFF)
                    {
LABEL_33:
                      if (v31 == 11) {
                        char v25 = 1;
                      }
                      else {
                        char v25 = (v31 < 0x21u) & (0x100003600uLL >> v31);
                      }
                      goto LABEL_36;
                    }
                    char v25 = MEMORY[0x1997423A0]() == 9;
                  }
                  else
                  {
                    char v25 = 0;
                  }
LABEL_36:
                  if (v102) {
                    int v32 = *((_DWORD *)v102 + 1);
                  }
                  else {
                    int v32 = 0;
                  }
                  WebKit::floatQuad(cf, (void *)[v21 quad]);
                  id v33 = v102;
                  if (v102) {
                    *(_DWORD *)v102 += 2;
                  }
                  *(void *)v97 = v33;
                  *(_OWORD *)&v97[8] = *(_OWORD *)cf;
                  *(_OWORD *)&v97[24] = v101;
                  LOBYTE(v98) = v25;
                  int v34 = HIDWORD(v109);
                  if (HIDWORD(v109) == v109)
                  {
                    unint64_t v35 = WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v108, HIDWORD(v109) + 1, (unint64_t)v97);
                    int v34 = HIDWORD(v109);
                    uint64_t v36 = v108 + 48 * HIDWORD(v109);
                    uint64_t v37 = *(void *)v35;
                    *(void *)unint64_t v35 = 0;
                    *(void *)uint64_t v36 = v37;
                    long long v38 = *(_OWORD *)(v35 + 8);
                    long long v39 = *(_OWORD *)(v35 + 24);
                    *(unsigned char *)(v36 + 40) = *(unsigned char *)(v35 + 40);
                    *(_OWORD *)(v36 + 24) = v39;
                    *(_OWORD *)(v36 + 8) = v38;
                  }
                  else
                  {
                    uint64_t v40 = v108 + 48 * HIDWORD(v109);
                    *(void *)v97 = 0;
                    *(void *)uint64_t v40 = v33;
                    long long v41 = *(_OWORD *)&v97[8];
                    long long v42 = *(_OWORD *)&v97[24];
                    *(unsigned char *)(v40 + 40) = v98;
                    *(_OWORD *)(v40 + 24) = v42;
                    *(_OWORD *)(v40 + 8) = v41;
                  }
                  HIDWORD(v109) = v34 + 1;
                  unint64_t v43 = *(WTF::StringImpl **)v97;
                  *(void *)v97 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2) {
                      WTF::StringImpl::destroy(v43, v22);
                    }
                    else {
                      *(_DWORD *)v43 -= 2;
                    }
                  }
                  unsigned int v17 = v32 + v24;
                }
              }
              unint64_t v44 = v102;
              v102 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2) {
                  WTF::StringImpl::destroy(v44, v22);
                }
                else {
                  *(_DWORD *)v44 -= 2;
                }
              }
            }
            ++v19;
          }
          while (v16 != v19);
          uint64_t v45 = [v12 countByEnumeratingWithState:&v103 objects:v115 count:16];
          uint64_t v16 = v45;
        }
        while (v45);
LABEL_59:
        ipc_space_t v3 = v86;
        if (v90 < [v86 count]
          && (uint64_t v46 = (void *)[v86 objectAtIndexedSubscript:v90]) != 0)
        {
          uint64_t v47 = v88;
          if (objc_opt_respondsToSelector()) {
            char v48 = [v46 shouldWrap] ^ 1;
          }
          else {
            char v48 = 1;
          }
        }
        else
        {
          char v48 = 0;
          uint64_t v47 = v88;
        }
        BOOL v49 = (objc_opt_respondsToSelector() & 1) != 0 && [v92 layoutDirection] == 3;
        WebKit::floatQuad(cf, (void *)[v92 quad]);
        *(_OWORD *)v97 = *(_OWORD *)cf;
        *(_OWORD *)&v97[16] = v101;
        *(void *)&v97[32] = v108;
        uint64_t v51 = v109;
        uint64_t v108 = 0;
        uint64_t v109 = 0;
        uint64_t v98 = v51;
        LOBYTE(v99) = v48;
        HIBYTE(v99) = v49;
        unsigned int v52 = *(_DWORD *)(v89 + 12);
        if (v52 == *(_DWORD *)(v89 + 8))
        {
          WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextRecognitionLineData>(v89, (unint64_t)v97);
        }
        else
        {
          uint64_t v53 = *(void *)v89 + 56 * v52;
          *(_OWORD *)uint64_t v53 = *(_OWORD *)cf;
          *(_OWORD *)(v53 + 16) = v101;
          *(void *)(v53 + 32) = 0;
          *(void *)(v53 + 40) = 0;
          uint64_t v54 = *(void *)&v97[32];
          *(void *)&v97[32] = 0;
          *(void *)(v53 + 32) = v54;
          LODWORD(v54) = v98;
          LODWORD(v98) = 0;
          *(_DWORD *)(v53 + 40) = v54;
          LODWORD(v54) = HIDWORD(v98);
          HIDWORD(v98) = 0;
          *(_DWORD *)(v53 + 44) = v54;
          *(_WORD *)(v53 + 48) = v99;
          ++*(_DWORD *)(v89 + 12);
        }
        WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v97[32], v50);
        uint64_t v56 = v107;
        uint64_t v107 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2) {
            WTF::StringImpl::destroy(v56, v55);
          }
          else {
            *(_DWORD *)v56 -= 2;
          }
        }
        uint64_t v9 = v90 + 1;
        WTF::Vector<WebCore::TextRecognitionWordData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v108, v55);
        uint64_t v10 = v91 + 1;
        char v8 = 1;
      }
      while (v91 + 1 != v47);
      uint64_t v57 = [v86 countByEnumeratingWithState:&v110 objects:v116 count:16];
      uint64_t v7 = v57;
    }
    while (v57);
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v58 = (void *)[a1 textDataDetectors];
    char v59 = v58;
    if (v58) {
      CFRetain(v58);
    }
    unint64_t v60 = [v59 count];
    if (v60)
    {
      if (v60 >= 0xAAAAAAB)
      {
LABEL_120:
        __break(0xC471u);
        JUMPOUT(0x1994A2F24);
      }
      unsigned int v61 = 24 * v60;
      uint64_t v62 = WTF::fastMalloc((WTF *)(24 * v60));
      *(_DWORD *)(v89 + 24) = v61 / 0x18;
      *(void *)(v89 + 16) = v62;
    }
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    uint64_t v63 = [v59 countByEnumeratingWithState:&v93 objects:v114 count:16];
    if (v63)
    {
      uint64_t v64 = *(void *)v94;
      do
      {
        for (uint64_t i = 0; i != v63; ++i)
        {
          if (*(void *)v94 != v64) {
            objc_enumerationMutation(v59);
          }
          unint64_t v66 = v59;
          unint64_t v67 = *(void **)(*((void *)&v93 + 1) + 8 * i);
          unint64_t v68 = (const void *)[v67 result];
          uint64_t v69 = v68;
          if (v68) {
            CFRetain(v68);
          }
          uint64_t v70 = (void *)[v67 boundingQuads];
          unint64_t v71 = [v70 count];
          unint64_t v73 = v71;
          if (v71)
          {
            if (v71 >> 27)
            {
              __break(0xC471u);
              JUMPOUT(0x1994A2F2CLL);
            }
            uint64_t v74 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v71));
            uint64_t v75 = 0;
            v76 = v74;
            do
            {
              WebKit::floatQuad(v97, (void *)[v70 objectAtIndexedSubscript:v75]);
              _OWORD *v76 = *(_OWORD *)v97;
              v76[1] = *(_OWORD *)&v97[16];
              ++v75;
              v76 += 2;
            }
            while (v73 != v75);
          }
          else
          {
            uint64_t v74 = 0;
          }
          cf[0] = v69;
          cf[1] = v74;
          LODWORD(v101) = v73;
          DWORD1(v101) = v73;
          unsigned int v77 = *(_DWORD *)(v89 + 28);
          if (v77 == *(_DWORD *)(v89 + 24))
          {
            char v59 = v66;
            WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextRecognitionDataDetector>(v89 + 16, (unint64_t)cf);
          }
          else
          {
            uint64_t v78 = *(void *)(v89 + 16) + 24 * v77;
            cf[0] = 0;
            *(void *)(v78 + 8) = 0;
            *(void *)(v78 + 16) = 0;
            *(void *)uint64_t v78 = v69;
            CFTypeRef v79 = cf[1];
            cf[1] = 0;
            *(void *)(v78 + 8) = v79;
            LODWORD(v79) = v101;
            LODWORD(v101) = 0;
            *(_DWORD *)(v78 + 16) = v79;
            LODWORD(v79) = DWORD1(v101);
            DWORD1(v101) = 0;
            *(_DWORD *)(v78 + 20) = v79;
            ++*(_DWORD *)(v89 + 28);
            char v59 = v66;
          }
          uint64_t v80 = (WTF *)cf[1];
          if (cf[1])
          {
            cf[1] = 0;
            LODWORD(v101) = 0;
            WTF::fastFree(v80, v72);
          }
          CFTypeRef v81 = cf[0];
          cf[0] = 0;
          if (v81) {
            CFRelease(v81);
          }
        }
        uint64_t v63 = [v59 countByEnumeratingWithState:&v93 objects:v114 count:16];
      }
      while (v63);
    }
    if (v59) {
      CFRelease(v59);
    }
  }
  ((void (*)(void))*MEMORY[0x1E4FB6318])();
  if (objc_opt_isKindOfClass())
  {
    if (a1) {
      CFRetain(a1);
    }
    WebCore::TextRecognitionResult::encodeVKCImageAnalysis();
    uint64_t v82 = *(void *)v97;
    *(void *)v97 = 0;
    id v83 = *(const void **)(v89 + 48);
    *(void *)(v89 + 48) = v82;
    if (v83)
    {
      CFRelease(v83);
      uint64_t v84 = *(const void **)v97;
      *(void *)v97 = 0;
      if (v84) {
        CFRelease(v84);
      }
    }
    if (a1) {
      CFRelease(a1);
    }
  }
}

void sub_1994A2F40(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,CFTypeRef a36,WTF *a37,int a38,uint64_t a39,WTF::StringImpl *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,WTF::StringImpl *a50,char a51)
{
  unsigned int v52 = *(const void **)(a16 + 48);
  *(void *)(a16 + 48) = 0;
  if (v52) {
    CFRelease(v52);
  }
  WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a16 + 32, a2);
  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a16 + 16, v53);
  WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a16, v54);
  _Unwind_Resume(a1);
}

uint64_t WebKit::floatQuad(void *a1, void *a2)
{
  [a2 topLeft];
  v21.x = v4;
  v21.CGFloat y = v5;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v22, &v21);
  [a2 topRight];
  v19.x = v6;
  v19.CGFloat y = v7;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v20, &v19);
  [a2 bottomRight];
  v17.x = v8;
  v17.CGFloat y = v9;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v18, &v17);
  [a2 bottomLeft];
  v15.x = v10;
  v15.CGFloat y = v11;
  uint64_t result = WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v16, &v15);
  uint64_t v13 = v20;
  *a1 = v22;
  a1[1] = v13;
  uint64_t v14 = v16;
  a1[2] = v18;
  a1[3] = v14;
  return result;
}

uint64_t WebKit::languageIdentifierSupportsLiveText(WebKit *this, NSString *a2)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  MEMORY[0x19972EAD0](&v75, objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CA20], "localeWithLocaleIdentifier:", this), "languageCode"));
  CGFloat v4 = v75;
  if (!v75) {
    return 1;
  }
  if (!*((_DWORD *)v75 + 1))
  {
    uint64_t v75 = 0;
    uint64_t v6 = 1;
LABEL_21:
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
    return v6;
  }
  CGFloat v5 = &qword_1EB35A000;
  if (_MergedGlobals_140 != 1)
  {
    long long v77 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    uint64_t v70 = (void *)[(id)((uint64_t (*)(void))*MEMORY[0x1E4FB6320])() supportedRecognitionLanguages];
    uint64_t v73 = [v70 countByEnumeratingWithState:&v77 objects:v81 count:16];
    if (!v73)
    {
      unsigned int v19 = 0;
      int v21 = 0;
      uint64_t v6 = 0;
      goto LABEL_106;
    }
    unsigned int v19 = 0;
    unsigned int v20 = 0;
    int v21 = 0;
    uint64_t v6 = 0;
    char v22 = 0;
    uint64_t v69 = *(void *)v78;
    while (1)
    {
      uint64_t v23 = 0;
      unint64_t v24 = 0x1E4F1C000uLL;
      uint64_t v25 = v69;
      int v26 = v70;
      do
      {
        if (*(void *)v78 != v25) {
          objc_enumerationMutation(v26);
        }
        MEMORY[0x19972EAD0](&v76, objc_msgSend((id)objc_msgSend(*(id *)(v24 + 2592), "localeWithLocaleIdentifier:", *(void *)(*((void *)&v77 + 1) + 8 * v23), v69), "languageCode"));
        uint64_t v29 = v76;
        if (!v76) {
          goto LABEL_102;
        }
        if (!*((_DWORD *)v76 + 1))
        {
          v76 = 0;
LABEL_99:
          if (*(_DWORD *)v29 == 2) {
            WTF::StringImpl::destroy(v29, v27);
          }
          else {
            *(_DWORD *)v29 -= 2;
          }
          goto LABEL_102;
        }
        unsigned int v72 = v20;
        uint64_t v71 = v23;
        if (10 * (unint64_t)v20 >= 9 * (unint64_t)v19 || v19 <= 2 * v20 && v22)
        {
          if (v19) {
            unsigned int v30 = 2 * v19;
          }
          else {
            unsigned int v30 = 8;
          }
          uint64_t v31 = WTF::fastZeroedMalloc((WTF *)(8 * v30));
          unint64_t v32 = (~(v31 << 32) + v31) ^ ((unint64_t)(~(v31 << 32) + v31) >> 22);
          unint64_t v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
          unint64_t v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
          int v21 = (v34 >> 31) ^ v34;
          if (v19)
          {
            uint64_t v35 = 0;
            uint64_t v74 = v19;
            int v36 = 2 * v19 - 1;
            do
            {
              uint64_t v37 = (WTF::StringImpl **)(v6 + 8 * v35);
              long long v38 = *v37;
              if (*v37)
              {
                unsigned int v39 = *((_DWORD *)v38 + 4);
                if (v39 >= 0x100) {
                  unsigned int v40 = v39 >> 8;
                }
                else {
                  unsigned int v40 = WTF::StringImpl::hashSlowCase(v38);
                }
                unsigned int v41 = (v40 ^ v21) & v36;
                long long v42 = (uint64_t *)(v31 + 8 * v41);
                unint64_t v43 = (WTF::StringImpl *)*v42;
                if (*v42)
                {
                  unsigned int v44 = 0;
                  do
                  {
                    unsigned int v45 = *((_DWORD *)v43 + 4);
                    if (v45 >= 0x100) {
                      unsigned int v46 = v45 >> 8;
                    }
                    else {
                      unsigned int v46 = WTF::StringImpl::hashSlowCase(v43);
                    }
                    if (v44 > ((v41 + v30 - ((v46 ^ v21) & v36)) & v36))
                    {
                      uint64_t v47 = *v37;
                      *uint64_t v37 = (WTF::StringImpl *)*v42;
                      *long long v42 = (uint64_t)v47;
                      unsigned int v44 = (v41 + v30 - ((v46 ^ v21) & v36)) & v36;
                    }
                    unsigned int v41 = (v41 + 1) & v36;
                    ++v44;
                    long long v42 = (uint64_t *)(v31 + 8 * v41);
                    unint64_t v43 = (WTF::StringImpl *)*v42;
                  }
                  while (*v42);
                }
                WTF::String::operator=(v42, (uint64_t *)(v6 + 8 * v35));
                char v48 = *v37;
                *uint64_t v37 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2) {
                    WTF::StringImpl::destroy(v48, v27);
                  }
                  else {
                    *(_DWORD *)v48 -= 2;
                  }
                }
              }
              else
              {
                *uint64_t v37 = 0;
              }
              ++v35;
            }
            while (v35 != v74);
LABEL_62:
            WTF::fastFree((WTF *)v6, v27);
            char v22 = 0;
            unsigned int v19 = v30;
          }
          else
          {
            if (v6) {
              goto LABEL_62;
            }
            char v22 = 0;
            unsigned int v19 = 8;
          }
          uint64_t v6 = v31;
        }
        unsigned int v49 = *((_DWORD *)v76 + 4);
        if (v49 >= 0x100) {
          unsigned int v50 = v49 >> 8;
        }
        else {
          unsigned int v50 = WTF::StringImpl::hashSlowCase(v76);
        }
        unsigned int v51 = v19 - 1;
        unsigned int v52 = (v50 ^ v21) & (v19 - 1);
        uint64_t v53 = (WTF **)(v6 + 8 * v52);
        uint64_t v54 = *v53;
        if (*v53)
        {
          unsigned int v55 = 0;
          while (1)
          {
            unsigned int v56 = *((_DWORD *)v54 + 4);
            int v57 = v56 >= 0x100 ? v56 >> 8 : WTF::StringImpl::hashSlowCase(v54);
            unsigned int v58 = (v52 + v19 - ((v57 ^ v21) & v51)) & v51;
            if (v55 > v58) {
              break;
            }
            if (v57 == v50 && (WTF::equal(*v53, v76, v28) & 1) != 0)
            {
              unint64_t v24 = 0x1E4F1C000;
              uint64_t v25 = v69;
              int v26 = v70;
              unsigned int v20 = v72;
              goto LABEL_98;
            }
            unsigned int v52 = (v52 + 1) & v51;
            ++v55;
            uint64_t v53 = (WTF **)(v6 + 8 * v52);
            uint64_t v54 = *v53;
            if (!*v53)
            {
              if (v55 > 0x7F) {
                char v22 = 1;
              }
              goto LABEL_78;
            }
          }
          if (v55 > 0x7F) {
            char v22 = 1;
          }
          unsigned int v61 = *v53;
          void *v53 = 0;
          uint64_t v62 = v76;
          v76 = 0;
          uint64_t v63 = *v53;
          void *v53 = v62;
          if (v63)
          {
            if (*(_DWORD *)v63 == 2) {
              WTF::StringImpl::destroy(v63, v27);
            }
            else {
              *(_DWORD *)v63 -= 2;
            }
          }
          while (1)
          {
            unsigned int v52 = (v52 + 1) & v51;
            unint64_t v67 = (WTF **)(v6 + 8 * v52);
            unint64_t v68 = *v67;
            if (!*v67) {
              break;
            }
            unsigned int v64 = *((_DWORD *)v68 + 4);
            if (v64 >= 0x100) {
              unsigned int v65 = v64 >> 8;
            }
            else {
              unsigned int v65 = WTF::StringImpl::hashSlowCase(v68);
            }
            if (++v58 > ((v52 + v19 - ((v65 ^ v21) & v51)) & v51))
            {
              unint64_t v66 = *v67;
              void *v67 = v61;
              unsigned int v61 = v66;
              unsigned int v58 = (v52 + v19 - ((v65 ^ v21) & v51)) & v51;
            }
          }
          void *v67 = v61;
        }
        else
        {
LABEL_78:
          char v59 = v76;
          v76 = 0;
          unint64_t v60 = *v53;
          void *v53 = v59;
          if (v60)
          {
            if (*(_DWORD *)v60 == 2) {
              WTF::StringImpl::destroy(v60, v27);
            }
            else {
              *(_DWORD *)v60 -= 2;
            }
          }
        }
        unsigned int v20 = v72 + 1;
        unint64_t v24 = 0x1E4F1C000;
        uint64_t v25 = v69;
        int v26 = v70;
LABEL_98:
        uint64_t v23 = v71;
        uint64_t v29 = v76;
        v76 = 0;
        if (v29) {
          goto LABEL_99;
        }
LABEL_102:
        ++v23;
      }
      while (v23 != v73);
      uint64_t v73 = [v26 countByEnumeratingWithState:&v77 objects:v81 count:16];
      if (!v73)
      {
LABEL_106:
        qword_1EB35A430 = v6;
        dword_1EB35A410 = v19;
        dword_1EB35A418 = v21;
        _MergedGlobals_140 = 1;
        CGFloat v5 = &qword_1EB35A000;
        if (!v6) {
          goto LABEL_20;
        }
        goto LABEL_5;
      }
    }
  }
  uint64_t v6 = qword_1EB35A430;
  if (!qword_1EB35A430) {
    goto LABEL_20;
  }
LABEL_5:
  int v7 = dword_1EB35A410;
  int v8 = dword_1EB35A418;
  unsigned int v9 = *((_DWORD *)v75 + 4);
  if (v9 >= 0x100)
  {
    unsigned int v10 = v9 >> 8;
  }
  else
  {
    unsigned int v10 = WTF::StringImpl::hashSlowCase(v75);
    uint64_t v6 = v5[134];
  }
  int v11 = v7 - 1;
  unsigned int v12 = (v10 ^ v8) & (v7 - 1);
  uint64_t v13 = (WTF **)(v6 + 8 * v12);
  uint64_t v14 = *v13;
  if (*v13)
  {
    int v15 = -1;
    do
    {
      unsigned int v16 = *((_DWORD *)v14 + 4);
      int v17 = v16 >= 0x100 ? v16 >> 8 : WTF::StringImpl::hashSlowCase(v14);
      if (++v15 > ((v12 + v7 - ((v17 ^ v8) & v11)) & v11)) {
        break;
      }
      if (v17 == v10 && (WTF::equal(*v13, v75, v3) & 1) != 0)
      {
        uint64_t v6 = 1;
        goto LABEL_20;
      }
      unsigned int v12 = (v12 + 1) & v11;
      uint64_t v13 = (WTF **)(v5[134] + 8 * v12);
      uint64_t v14 = *v13;
    }
    while (*v13);
  }
  uint64_t v6 = 0;
LABEL_20:
  CGFloat v4 = v75;
  uint64_t v75 = 0;
  if (v4) {
    goto LABEL_21;
  }
  return v6;
}

void sub_1994A37DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16)
{
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::requestVisualTranslation(WTF::MonotonicTime *a1, uint64_t a2, WTF::StringImpl **a3, WTF::StringImpl **a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unsigned int v12 = (WebKit *)WTF::MonotonicTime::now(a1);
  uint64_t v14 = v13;
  int v15 = (WTF::String *)++WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::imageAnalysisRequestID;
  int shouldLogFullImageTranslationResults = WebKit::shouldLogFullImageTranslationResults(v12);
  uint64_t v17 = qword_1EB3588E8;
  uint64_t v18 = (WTF::StringImpl *)os_log_type_enabled((os_log_t)qword_1EB3588E8, OS_LOG_TYPE_DEFAULT);
  if (shouldLogFullImageTranslationResults)
  {
    if (!v18) {
      goto LABEL_20;
    }
    WTF::String::number(v15);
    WTF::String::utf8();
    if (v35) {
      unsigned int v19 = (char *)v35 + 16;
    }
    else {
      unsigned int v19 = 0;
    }
    *(_DWORD *)buf = 136446467;
    *(void *)&uint8_t buf[4] = v19;
    *(_WORD *)&buf[12] = 2113;
    *(void *)&buf[14] = a2;
    unsigned int v20 = "[#%{public}s] Image translation started for %{private}@";
    int v21 = v17;
    uint32_t v22 = 22;
  }
  else
  {
    if (!v18) {
      goto LABEL_20;
    }
    WTF::String::number(v15);
    WTF::String::utf8();
    if (v35) {
      uint64_t v23 = (char *)v35 + 16;
    }
    else {
      uint64_t v23 = 0;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v23;
    unsigned int v20 = "[#%{public}s] Image translation started";
    int v21 = v17;
    uint32_t v22 = 12;
  }
  _os_log_impl(&dword_1985F2000, v21, OS_LOG_TYPE_DEFAULT, v20, buf, v22);
  uint64_t v25 = v35;
  uint64_t v35 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1) {
      WTF::fastFree(v25, v24);
    }
    else {
      --*(_DWORD *)v25;
    }
  }
  uint64_t v18 = v34;
  unint64_t v34 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      uint64_t v18 = (WTF::StringImpl *)WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v24);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
LABEL_20:
  int v26 = (const void *)[objc_alloc((Class)((uint64_t (*)(WTF::StringImpl *))*MEMORY[0x1E4FB63B0])(v18)) initWithCGImage:a5 orientation:0 requestType:1];
  uint64_t v27 = *a6;
  *a6 = 0;
  int v28 = *a3;
  if (*a3) {
    *(_DWORD *)v28 += 2;
  }
  uint64_t v29 = *a4;
  if (v29) {
    *(_DWORD *)v29 += 2;
  }
  if (v28) {
    *(_DWORD *)v28 += 2;
  }
  if (v29) {
    *(_DWORD *)v29 += 2;
  }
  unsigned int v30 = malloc_type_malloc(0x48uLL, 0x10E0040E536EAA8uLL);
  unint64_t v32 = v30;
  *unsigned int v30 = MEMORY[0x1E4F14398];
  v30[1] = 50331650;
  v30[2] = WTF::BlockPtr<void ()(VKCImageAnalysis *,NSError *)>::fromCallable<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0>(WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0)::{lambda(void *,VKCImageAnalysis *,NSError *)#1}::__invoke;
  v30[3] = &WTF::BlockPtr<void ()(VKCImageAnalysis *,NSError *)>::fromCallable<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0>(WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0)::descriptor;
  unsigned char v30[4] = v27;
  if (v28) {
    *(_DWORD *)v28 += 2;
  }
  v30[5] = v28;
  if (v29)
  {
    *(_DWORD *)v29 += 2;
    v30[6] = v29;
    v30[7] = v15;
    char v30[8] = v14;
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::destroy(v29, v31);
      if (!v28) {
        goto LABEL_38;
      }
    }
    else
    {
      *(_DWORD *)v29 -= 2;
      if (!v28) {
        goto LABEL_38;
      }
    }
  }
  else
  {
    v30[6] = 0;
    v30[7] = v15;
    char v30[8] = v14;
    if (!v28) {
      goto LABEL_38;
    }
  }
  if (*(_DWORD *)v28 == 2) {
    WTF::StringImpl::destroy(v28, v31);
  }
  else {
    *(_DWORD *)v28 -= 2;
  }
LABEL_38:
  -[WTF::MonotonicTime processRequest:progressHandler:completionHandler:](a1, "processRequest:progressHandler:completionHandler:", v26, 0, v32, v34, v35, *(_OWORD *)buf, *(void *)&buf[16], v37);
  _Block_release(v32);
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::destroy(v29, v33);
      if (!v28) {
        goto LABEL_46;
      }
      goto LABEL_44;
    }
    *(_DWORD *)v29 -= 2;
  }
  if (!v28)
  {
LABEL_46:
    if (!v26) {
      return;
    }
    goto LABEL_47;
  }
LABEL_44:
  if (*(_DWORD *)v28 != 2)
  {
    *(_DWORD *)v28 -= 2;
    goto LABEL_46;
  }
  WTF::StringImpl::destroy(v28, v33);
  if (v26) {
LABEL_47:
  }
    CFRelease(v26);
}

void sub_1994A3C50(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::shouldLogFullImageTranslationResults(WebKit *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EB35A448, memory_order_acquire) != -1)
  {
    CGFloat v4 = &v2;
    ipc_space_t v3 = &v4;
    std::__call_once(&qword_1EB35A448, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::shouldLogFullImageTranslationResults(void)::$_0 &&>>);
  }
  return byte_1EB35A40B;
}

void WebKit::requestBackgroundRemoval(WebKit *a1, uint64_t *a2)
{
  if (PAL::canLoad_VisionKitCore_vk_cgImageRemoveBackground(a1))
  {
    WebKit::transcode(a1, (const __CFString *)[(id)*MEMORY[0x1E4F444E0] identifier], &v17);
    CFDataRef v4 = v17;
    if (![(__CFData *)v17 length])
    {
      WTF::CompletionHandler<void ()(CGImage *)>::operator()(a2);
      goto LABEL_14;
    }
    CGFloat v5 = CGImageSourceCreateWithData(v4, 0);
    ImageAtIndex = CGImageSourceCreateImageAtIndex(v5, 0, 0);
    int v7 = ImageAtIndex;
    if (ImageAtIndex)
    {
      size_t Width = CGImageGetWidth(ImageAtIndex);
      Height = (WTF::MonotonicTime *)CGImageGetHeight(v7);
      if (Width && Height)
      {
        WTF::MonotonicTime::now(Height);
        uint64_t v11 = v10;
        uint64_t v12 = *a2;
        *a2 = 0;
        uint64_t v13 = malloc_type_malloc(0x30uLL, 0x10E0040AA5B57ACuLL);
        void *v13 = MEMORY[0x1E4F14398];
        v13[1] = 50331650;
        v13[2] = WTF::BlockPtr<void ()(CGImage *,NSError *)>::fromCallable<WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0>(WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0)::{lambda(void *,CGImage *,NSError *)#1}::__invoke;
        v13[3] = &WTF::BlockPtr<void ()(CGImage *,NSError *)>::fromCallable<WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0>(WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0)::descriptor;
        v13[4] = v12;
        v13[5] = v11;
        if (PAL::canLoad_VisionKitCore_vk_cgImageRemoveBackgroundWithDownsizing((PAL *)v13))
        {
          ((void (*)(CGImage *, uint64_t, uint64_t, void *))*MEMORY[0x1E4FB6480])(v7, 1, 1, v13);
        }
        else
        {
          uint64_t v14 = (void (*)(CGImage *, uint64_t, void *))*MEMORY[0x1E4FB6470];
          v15[0] = MEMORY[0x1E4F143A8];
          v15[1] = 3321888768;
          v15[2] = ___ZN6WebKit24requestBackgroundRemovalEP7CGImageON3WTF17CompletionHandlerIFvS1_EEE_block_invoke;
          v15[3] = &__block_descriptor_40_e8_32c89_ZTSKZN6WebKit24requestBackgroundRemovalEP7CGImageON3WTF17CompletionHandlerIFvS1_EEEE3__1_e64_v56__0__CGImage__8_CGRect__CGPoint_dd__CGSize_dd__16__NSError_48l;
          aBlock = _Block_copy(v13);
          v14(v7, 1, v15);
          _Block_release(v13);
          _Block_release(aBlock);
          uint64_t v13 = 0;
        }
        _Block_release(v13);
      }
      else
      {
        WTF::CompletionHandler<void ()(CGImage *)>::operator()(a2);
      }
      CFRelease(v7);
      if (!v5) {
        goto LABEL_14;
      }
    }
    else
    {
      WTF::CompletionHandler<void ()(CGImage *)>::operator()(a2);
      if (!v5) {
        goto LABEL_14;
      }
    }
    CFRelease(v5);
LABEL_14:
    if (v4) {
      CFRelease(v4);
    }
    return;
  }

  WTF::CompletionHandler<void ()(CGImage *)>::operator()(a2);
}

void sub_1994A4030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock)
{
  _Block_release(aBlock);
  _Block_release(v16);
  _Block_release(0);
  CFRelease(v15);
  if (v14) {
    CFRelease(v14);
  }
  if (v13) {
    CFRelease(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(CGImage *)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  char v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1994A4164(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit24requestBackgroundRemovalEP7CGImageON3WTF17CompletionHandlerIFvS1_EEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c89_ZTSKZN6WebKit24requestBackgroundRemovalEP7CGImageON3WTF17CompletionHandlerIFvS1_EEEE3__1(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 32));
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c89_ZTSKZN6WebKit24requestBackgroundRemovalEP7CGImageON3WTF17CompletionHandlerIFvS1_EEEE3__1(uint64_t a1)
{
}

void WebKit::imageDataForRemoveBackground(WebKit *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, WebKit *a4@<X8>)
{
  if ((byte_1EB35A409 & 1) == 0)
  {
    uint64_t v30 = WTF::fastZeroedMalloc((WTF *)0x40);
    uint64_t v31 = 8;
    unint64_t v20 = (~(v30 << 32) + v30) ^ ((unint64_t)(~(v30 << 32) + v30) >> 22);
    unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    int v32 = (v22 >> 31) ^ v22;
    char v33 = 0;
    uint64_t v23 = &WebKit::imageDataForRemoveBackground(CGImage *,WTF::String const&)::$_0::operator() const(void)::types;
    unint64_t v24 = (WTF::StringImpl *)MEMORY[0x1E4F30960];
    do
    {
      uint64_t v25 = v23[1];
      if (v25)
      {
        if (v25 == (char *)1)
        {
          *(_DWORD *)v24 += 2;
          int v26 = v24;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          int v26 = (WTF::StringImpl *)cf[0];
        }
        uint64_t v35 = v26;
      }
      else
      {
        uint64_t v35 = 0;
      }
      WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&v30, &v35, a3, (uint64_t)cf);
      int v28 = v35;
      uint64_t v35 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2) {
          WTF::StringImpl::destroy(v28, v27);
        }
        else {
          *(_DWORD *)v28 -= 2;
        }
      }
      v23 += 2;
    }
    while (v23 != &IPC::Detail::messageDescriptions);
    qword_1EB35A438 = v30;
    dword_1EB35A420 = v31;
    dword_1EB35A428 = v32;
    byte_1EB35A409 = 1;
  }
  uint64_t v6 = *a2;
  if (*a2)
  {
    if (*((_DWORD *)v6 + 1))
    {
      uint64_t v7 = qword_1EB35A438;
      if (qword_1EB35A438)
      {
        int v8 = dword_1EB35A420;
        int v9 = dword_1EB35A420 - 1;
        int v10 = dword_1EB35A428;
        unsigned int v11 = *((_DWORD *)v6 + 4);
        if (v11 >= 0x100)
        {
          unsigned int v12 = v11 >> 8;
        }
        else
        {
          unsigned int v12 = WTF::StringImpl::hashSlowCase(v6);
          uint64_t v7 = qword_1EB35A438;
        }
        unsigned int v13 = (v12 ^ v10) & v9;
        uint64_t v14 = (WTF **)(v7 + 8 * v13);
        int v15 = *v14;
        if (*v14)
        {
          int v16 = -1;
          do
          {
            unsigned int v17 = *((_DWORD *)v15 + 4);
            int v18 = v17 >= 0x100 ? v17 >> 8 : WTF::StringImpl::hashSlowCase(v15);
            if (++v16 > ((v13 + v8 - ((v18 ^ v10) & v9)) & v9)) {
              break;
            }
            if (v18 == v12 && (WTF::equal(*v14, *a2, a3) & 1) != 0)
            {
              WTF::String::createCFString((uint64_t *)cf, (WTF::String *)a2);
              WebKit::transcodeWithPreferredMIMEType(a4, this, (const __CFString *)cf[0]);
              CFTypeRef v19 = cf[0];
              cf[0] = 0;
              if (v19) {
                CFRelease(v19);
              }
              return;
            }
            unsigned int v13 = (v13 + 1) & v9;
            uint64_t v14 = (WTF **)(qword_1EB35A438 + 8 * v13);
            int v15 = *v14;
          }
          while (*v14);
        }
      }
    }
  }
  WebKit::transcodeWithPreferredMIMEType(a4, this, @"image/png");
}

void sub_1994A4470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl **a10, unsigned int a11, uint64_t a12, CFTypeRef cf, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  if (a10) {
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::deallocateTable(a10, (WTF::StringImpl *)a11);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef WebKit::LayerHostingContext::createPlatformLayerForHostingContext@<X0>(WebKit::LayerHostingContext *this@<X0>, void *a2@<X8>)
{
  CFTypeRef result = (CFTypeRef)objc_msgSend(MEMORY[0x1E4F39BE8], "_web_renderLayerWithContextID:shouldPreserveFlip:", this, 0);
  *a2 = result;
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

void WebKit::LayerHostingContext::~LayerHostingContext(id *this)
{
  [this[2] invalidate];
  id v2 = this[2];
  this[2] = 0;
  if (v2) {
    CFRelease(v2);
  }
  id v3 = this[1];
  this[1] = 0;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1994A4578(_Unwind_Exception *exception_object)
{
  id v3 = *(const void **)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v3) {
    CFRelease(v3);
  }
  CFDataRef v4 = *(const void **)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v4) {
    CFRelease(v4);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::LayerHostingContext::createHostingUpdateCoordinator(void *a1@<X8>)
{
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_mach_send();
  uint64_t v5 = 0;
  CFDataRef v4 = (const void *)[(id)getBELayerHierarchyHostingTransactionCoordinatorClass() coordinatorWithXPCRepresentation:v3 error:&v5];
  if (v5) {
    NSLog(&cfstr_CouldNotCreate_3.isa, v5);
  }
  *a1 = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (v3) {
}
  }

void sub_1994A464C(_Unwind_Exception *exception_object)
{
  if (v1) {

  }
  _Unwind_Resume(exception_object);
}

void WebKit::LayerHostingContext::createHostingHandle(WebKit::LayerHostingContext *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_uint64(v6, "pid", (uint64_t)this);
  xpc_dictionary_set_uint64(v6, "cid", a2);
  uint64_t v8 = 0;
  uint64_t v7 = (const void *)[(id)getBELayerHierarchyHandleClass() handleWithXPCRepresentation:v6 error:&v8];
  if (v8) {
    NSLog(&cfstr_CouldNotCreate_4.isa, v8);
  }
  *a3 = v7;
  if (v7) {
    CFRetain(v7);
  }
  if (v6) {
}
  }

void sub_1994A4724(_Unwind_Exception *exception_object)
{
  if (v1) {

  }
  _Unwind_Resume(exception_object);
}

void *WebKit::NetworkIssueReporter::isEnabled(WebKit::NetworkIssueReporter *this)
{
  {
    CFTypeRef result = ne_tracker_should_save_stacktracePtr(void)::ptr;
  }
  else
  {
    {
      id v2 = (void *)libsystem_networkextensionLibrary(void)::dylib;
    }
    else
    {
      id v2 = (void *)___ZL33libsystem_networkextensionLibraryv_block_invoke();
      libsystem_networkextensionLibrary(void)::dylib = (uint64_t)v2;
    }
    CFTypeRef result = dlsym(v2, "ne_tracker_should_save_stacktrace");
    ne_tracker_should_save_stacktracePtr(void)::ptr = result;
  }
  if (result)
  {
    return (void *)((uint64_t (*)(void))result)();
  }
  return result;
}

uint64_t WebKit::NetworkIssueReporter::shouldReport(WebKit::NetworkIssueReporter *this, NSURLSessionTaskMetrics *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)WebKit::NetworkIssueReporter::isEnabled(this);
  if (result)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    CFDataRef v4 = (void *)[(WebKit::NetworkIssueReporter *)this transactionMetrics];
    uint64_t result = [v4 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (result)
    {
      uint64_t v5 = result;
      uint64_t v6 = *(void *)v9;
      while (2)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v9 != v6) {
            objc_enumerationMutation(v4);
          }
          if ([*(id *)(*((void *)&v8 + 1) + 8 * i) _isUnlistedTracker]) {
            return 1;
          }
        }
        uint64_t v5 = [v4 countByEnumeratingWithState:&v8 objects:v12 count:16];
        uint64_t result = 0;
        if (v5) {
          continue;
        }
        break;
      }
    }
  }
  return result;
}

WebKit::NetworkIssueReporter *WebKit::NetworkIssueReporter::NetworkIssueReporter(WebKit::NetworkIssueReporter *this)
{
  *((void *)this + 2) = 0;
  id v2 = (char *)this + 16;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  {
    xpc_object_t v3 = (uint64_t (*)(char *))ne_tracker_copy_current_stacktracePtr(void)::ptr;
    if (ne_tracker_copy_current_stacktracePtr(void)::ptr) {
LABEL_3:
    }
      *((void *)this + 1) = v3(v2);
  }
  else
  {
    uint64_t v6 = v2;
    {
      uint64_t v5 = (void *)libsystem_networkextensionLibrary(void)::dylib;
    }
    else
    {
      uint64_t v5 = (void *)___ZL33libsystem_networkextensionLibraryv_block_invoke();
      libsystem_networkextensionLibrary(void)::dylib = (uint64_t)v5;
    }
    xpc_object_t v3 = (uint64_t (*)(char *))dlsym(v5, "ne_tracker_copy_current_stacktrace");
    ne_tracker_copy_current_stacktracePtr(void)::ptr = v3;
    id v2 = v6;
    if (v3) {
      goto LABEL_3;
    }
  }
  return this;
}

void sub_1994A49AC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*v2) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkIssueReporter::~NetworkIssueReporter(WebKit::NetworkIssueReporter *this, WTF::StringImpl *a2)
{
  xpc_object_t v3 = (void *)*((void *)this + 1);
  if (v3) {
    free(v3);
  }
  if (*(void *)this) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)this, a2);
  }
}

WTF::StringImpl *WebKit::NetworkIssueReporter::report(WTF::StringImpl *this, const WTF::URL *a2)
{
  if (!*((void *)this + 1)) {
    return this;
  }
  id v2 = (uint64_t *)this;
  WTF::URL::host(a2);
  if ((v3 & 0xFF00000000) != 0) {
    WTF::String::String();
  }
  else {
    WTF::String::String();
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v2, &v12, v4, (uint64_t)&v10);
  if (v11)
  {
    if (byte_1EB35A40D == 1)
    {
      uint64_t v6 = off_1EB35A470;
      if (off_1EB35A470) {
        goto LABEL_7;
      }
    }
    else
    {
      {
        long long v9 = (void *)libsystem_networkextensionLibrary(void)::dylib;
      }
      else
      {
        long long v9 = (void *)___ZL33libsystem_networkextensionLibraryv_block_invoke();
        libsystem_networkextensionLibrary(void)::dylib = (uint64_t)v9;
      }
      uint64_t v6 = dlsym(v9, "ne_tracker_create_xcode_issue");
      off_1EB35A470 = v6;
      byte_1EB35A40D = 1;
      if (v6)
      {
LABEL_7:
        WTF::String::utf8();
        if (v10) {
          uint64_t v7 = (char *)v10 + 16;
        }
        else {
          uint64_t v7 = 0;
        }
        ((void (*)(char *, uint64_t, uint64_t))v6)(v7, v2[1], v2[2]);
        long long v8 = v10;
        long long v10 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 1) {
            WTF::fastFree(v8, v5);
          }
          else {
            --*(_DWORD *)v8;
          }
        }
      }
    }
  }
  this = v12;
  unsigned int v12 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v5);
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
  return this;
}

void sub_1994A4B68(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unique_ptr<IPC::MachMessage>::reset[abi:sn180100](uint64_t *a1, void *a2)
{
  uint64_t result = *a1;
  *a1 = (uint64_t)a2;
  if (result)
  {
    if (*(unsigned char *)(result + 16))
    {
      uint64_t v4 = result;
      mach_msg_destroy((mach_msg_header_t *)(result + 20));
      uint64_t result = v4;
    }
    return WTF::fastFree((WTF *)result, a2);
  }
  return result;
}

uint64_t WTF::Vector<char,4164ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 12) < a2)
  {
    unint64_t v2 = *(unsigned int *)(result + 8);
    if (v2 < a2)
    {
      unint64_t v3 = v2 + (v2 >> 2);
      if (v3 >= 0x10) {
        unint64_t v4 = v3 + 1;
      }
      else {
        unint64_t v4 = 16;
      }
      if (v4 <= a2) {
        unint64_t v4 = a2;
      }
      int v5 = a2;
      uint64_t v6 = result;
      WTF::Vector<char,4164ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)result, (WTF *)v4);
      LODWORD(a2) = v5;
      uint64_t result = v6;
    }
  }
  *(_DWORD *)(result + 12) = a2;
  return result;
}

void **WTF::Vector<char,4164ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(void **result, WTF *this)
{
  if (*((unsigned int *)result + 2) < (unint64_t)this)
  {
    int v2 = (int)this;
    uint64_t v3 = (uint64_t)result;
    unint64_t v4 = *result;
    size_t v5 = *((unsigned int *)result + 3);
    if ((unint64_t)this < 0x1045)
    {
      uint64_t v6 = result + 2;
      *(void *)uint64_t v3 = v3 + 16;
      *(_DWORD *)(v3 + 8) = 4164;
    }
    else
    {
      if ((unint64_t)this >> 32)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v6 = (void *)WTF::fastMalloc(this);
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = v6;
    }
    uint64_t result = (void **)memcpy(v6, v4, v5);
    if ((void *)(v3 + 16) != v4 && v4 != 0)
    {
      if (*(void **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v4, v7);
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WebKit::Daemon::Connection::sendWithReply(NSObject  {objcproto13OS_xpc_object}*,WTF::CompletionHandler<void ()(NSObject  {objcproto13OS_xpc_object}*)> &&)::$_0>(WebKit::Daemon::Connection::sendWithReply(NSObject  {objcproto13OS_xpc_object}*,WTF::CompletionHandler<void ()(NSObject  {objcproto13OS_xpc_object}*)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSObject  {objcproto13OS_xpc_object}*)>::fromCallable<WebKit::Daemon::Connection::sendWithReply(NSObject  {objcproto13OS_xpc_object}*,WTF::CompletionHandler<void ()(NSObject  {objcproto13OS_xpc_object}*)> &&)::$_0>(WebKit::Daemon::Connection::sendWithReply(NSObject  {objcproto13OS_xpc_object}*,WTF::CompletionHandler<void ()(NSObject  {objcproto13OS_xpc_object}*)> &&)::$_0)::{lambda(void *,NSObject  {objcproto13OS_xpc_object}*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  int v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1994A4E2C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::shouldLogFullImageTranslationResults(void)::$_0 &&>>()
{
  uint64_t result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "BOOLForKey:", @"WebKitLogFullImageTranslationResults");
  byte_1EB35A40B = result;
  return result;
}

uint64_t WTF::BlockPtr<void ()(VKCImageAnalysis *,NSError *)>::fromCallable<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0>(WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unint64_t v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t result = a1[4];
  a1[4] = 0;
  if (result)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v6();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(VKCImageAnalysis *,NSError *)>::fromCallable<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0>(WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0)::{lambda(void *,VKCImageAnalysis *,NSError *)#1}::__invoke(void *a1, CFTypeRef cf, CFTypeRef a3)
{
  uint64_t v6 = a1[4];
  a1[4] = 0;
  if (cf) {
    CFRetain(cf);
  }
  if (a3) {
    CFRetain(a3);
  }
  uint64_t v7 = (WTF::StringImpl *)a1[5];
  if (v7) {
    *(_DWORD *)v7 += 2;
  }
  long long v8 = (WTF::StringImpl *)a1[6];
  if (v8) {
    *(_DWORD *)v8 += 2;
  }
  uint64_t v10 = a1[7];
  uint64_t v9 = a1[8];
  char v11 = (void *)WTF::fastMalloc((WTF *)0x40);
  *char v11 = &unk_1EEA0FF30;
  v11[1] = v6;
  v11[2] = cf;
  v11[3] = a3;
  if (v7) {
    *(_DWORD *)v7 += 2;
  }
  v11[4] = v7;
  if (v8) {
    *(_DWORD *)v8 += 2;
  }
  v11[5] = v8;
  v11[6] = v10;
  v11[7] = v9;
  uint64_t v14 = (uint64_t)v11;
  WTF::callOnMainRunLoop();
  uint64_t result = v14;
  if (v14)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
    if (!v8) {
      goto LABEL_18;
    }
  }
  else if (!v8)
  {
    goto LABEL_18;
  }
  if (*(_DWORD *)v8 == 2) {
    uint64_t result = WTF::StringImpl::destroy(v8, v12);
  }
  else {
    *(_DWORD *)v8 -= 2;
  }
LABEL_18:
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      return WTF::StringImpl::destroy(v7, v12);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  return result;
}

void sub_1994A50B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EEA0FF30;
  uint64_t v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unint64_t v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  size_t v5 = (const void *)a1[3];
  a1[3] = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)a1[2];
  a1[2] = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = a1[1];
  a1[1] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EEA0FF30;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  unint64_t v4 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  size_t v5 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  int v2 = (uint64_t *)(a1 + 8);
  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  double v4 = v3 - *(double *)(a1 + 56);
  size_t v5 = *(void **)(a1 + 16);
  if (v5)
  {
    if ([v5 hasResultsForAnalysisTypes:1])
    {
      uint64_t v6 = (void *)[*(id *)(a1 + 16) allLines];
      if (WebKit::shouldLogFullImageTranslationResults((WebKit *)v6))
      {
        unint64_t v68 = 0;
        uint64_t v69 = 0;
        int v70 = 0;
        char v71 = 1;
        *(_OWORD *)unsigned int v64 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        uint64_t v7 = [v6 countByEnumeratingWithState:v64 objects:v79 count:16];
        if (v7)
        {
          uint64_t v8 = *(void *)v65;
          char v9 = 1;
          do
          {
            uint64_t v10 = 0;
            do
            {
              if (*(void *)v65 != v8) {
                objc_enumerationMutation(v6);
              }
              char v11 = (void *)*((void *)v64[1] + v10);
              if ((v9 & 1) == 0) {
                WTF::StringBuilder::append();
              }
              MEMORY[0x19972EAD0](buf, [v11 string]);
              if (v70 || v69)
              {
                if (*(void *)buf)
                {
                  uint64_t v15 = *(void *)(*(void *)buf + 8);
                  unint64_t v16 = *(unsigned int *)(*(void *)buf + 4) | ((unint64_t)((*(_DWORD *)(*(void *)buf + 16) >> 2) & 1) << 32);
                }
                else
                {
                  uint64_t v15 = 0;
                  unint64_t v16 = 0x100000000;
                }
                WTF::StringBuilder::append((uint64_t)&v68, v15, v16);
                uint64_t v13 = *(WTF::StringImpl **)buf;
              }
              else
              {
                WTF::String::operator=((uint64_t *)&v68, (WTF::StringImpl **)buf);
                uint64_t v13 = *(WTF::StringImpl **)buf;
                if (*(void *)buf) {
                  int v14 = *(_DWORD *)(*(void *)buf + 4);
                }
                else {
                  int v14 = 0;
                }
                int v70 = v14;
              }
              *(void *)buf = 0;
              if (v13)
              {
                if (*(_DWORD *)v13 == 2) {
                  WTF::StringImpl::destroy(v13, v12);
                }
                else {
                  *(_DWORD *)v13 -= 2;
                }
              }
              char v9 = 0;
              ++v10;
            }
            while (v7 != v10);
            uint64_t v17 = [v6 countByEnumeratingWithState:v64 objects:v79 count:16];
            uint64_t v7 = v17;
            char v9 = 0;
          }
          while (v17);
        }
        int v18 = qword_1EB3588E8;
        if (os_log_type_enabled((os_log_t)qword_1EB3588E8, OS_LOG_TYPE_DEFAULT))
        {
          WTF::String::number(*(WTF::String **)(a1 + 48));
          WTF::String::utf8();
          if (v63) {
            unint64_t v20 = (char *)v63 + 16;
          }
          else {
            unint64_t v20 = 0;
          }
          uint64_t v21 = [v6 count];
          unint64_t v22 = v68;
          if (v68
            || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v68),
                WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v68),
                (unint64_t v22 = v68) != 0))
          {
            *(_DWORD *)v22 += 2;
          }
          unint64_t v60 = v22;
          WTF::String::utf8();
          if (v61) {
            uint64_t v23 = (char *)v61 + 16;
          }
          else {
            uint64_t v23 = 0;
          }
          *(_DWORD *)buf = 136446979;
          *(void *)&uint8_t buf[4] = v20;
          __int16 v73 = 2048;
          double v74 = v4;
          __int16 v75 = 2048;
          uint64_t v76 = v21;
          __int16 v77 = 2081;
          long long v78 = v23;
          _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "[#%{public}s] Image translation recognized text in %.3f sec. (line count: %zu): \"%{private}s\"", buf, 0x2Au);
          unint64_t v24 = v61;
          unsigned int v61 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1) {
              WTF::fastFree(v24, v19);
            }
            else {
              --*(_DWORD *)v24;
            }
          }
          unsigned int v45 = v60;
          char v59 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2) {
              WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v19);
            }
            else {
              *(_DWORD *)v45 -= 2;
            }
          }
          unsigned int v46 = v63;
          uint64_t v63 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 1) {
              WTF::fastFree(v46, v19);
            }
            else {
              --*(_DWORD *)v46;
            }
          }
          uint64_t v47 = v62;
          uint64_t v62 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2) {
              WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v19);
            }
            else {
              *(_DWORD *)v47 -= 2;
            }
          }
        }
        char v48 = v69;
        uint64_t v69 = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2) {
            WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v19);
          }
          else {
            *(_DWORD *)v48 -= 2;
          }
        }
        uint64_t v35 = v68;
        unint64_t v68 = 0;
        if (!v35) {
          goto LABEL_99;
        }
      }
      else
      {
        unint64_t v34 = qword_1EB3588E8;
        uint64_t v35 = (WTF::StringImpl *)os_log_type_enabled((os_log_t)qword_1EB3588E8, OS_LOG_TYPE_DEFAULT);
        if (!v35) {
          goto LABEL_99;
        }
        WTF::String::number(*(WTF::String **)(a1 + 48));
        WTF::String::utf8();
        uint64_t v36 = [v6 count];
        uint64_t v37 = (char *)v64[0] + 16;
        *(_DWORD *)long long v79 = 136446722;
        if (!v64[0]) {
          uint64_t v37 = 0;
        }
        *(void *)&v79[4] = v37;
        *(_WORD *)&v79[12] = 2048;
        *(double *)&v79[14] = v4;
        *(_WORD *)&v79[22] = 2048;
        *(void *)&v79[24] = v36;
        _os_log_impl(&dword_1985F2000, v34, OS_LOG_TYPE_DEFAULT, "[#%{public}s] Image translation recognized text in %.3f sec. (line count: %zu)", v79, 0x20u);
        long long v38 = v64[0];
        v64[0] = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 1) {
            WTF::fastFree(v38, v19);
          }
          else {
            --*(_DWORD *)v38;
          }
        }
        uint64_t v35 = *(WTF::StringImpl **)buf;
        *(void *)buf = 0;
        if (!v35) {
          goto LABEL_99;
        }
      }
      if (*(_DWORD *)v35 == 2) {
        uint64_t v35 = (WTF::StringImpl *)WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v19);
      }
      else {
        *(_DWORD *)v35 -= 2;
      }
LABEL_99:
      WTF::MonotonicTime::now(v35);
      uint64_t v50 = v49;
      uint64_t v51 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      uint64_t v52 = *(void *)(a1 + 48);
      uint64_t v53 = malloc_type_malloc(0x38uLL, 0x10E004053C9E706uLL);
      void *v53 = MEMORY[0x1E4F14398];
      v53[1] = 50331650;
      v53[2] = WTF::BlockPtr<void ()(VKCImageAnalysisTranslation *,NSError *)>::fromCallable<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1}::operator()(void)::{lambda(VKCImageAnalysisTranslation *,NSError *)#1}>(WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1}::operator()(void)::{lambda(VKCImageAnalysisTranslation *,NSError *)#1})::{lambda(void *,VKCImageAnalysisTranslation *,NSError *)#1}::__invoke;
      v53[3] = &WTF::BlockPtr<void ()(VKCImageAnalysisTranslation *,NSError *)>::fromCallable<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1}::operator()(void)::{lambda(VKCImageAnalysisTranslation *,NSError *)#1}>(WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1}::operator()(void)::{lambda(VKCImageAnalysisTranslation *,NSError *)#1})::descriptor;
      v53[4] = v51;
      v53[5] = v52;
      v53[6] = v50;
      char v54 = objc_opt_respondsToSelector();
      unsigned int v55 = *(void **)(a1 + 16);
      if (v54)
      {
        if (*(void *)(a1 + 32)) {
          unsigned int v56 = (__CFString *)WTF::StringImpl::operator NSString *();
        }
        else {
          unsigned int v56 = &stru_1EEA10550;
        }
        if (*(void *)(a1 + 40)) {
          int v57 = (__CFString *)WTF::StringImpl::operator NSString *();
        }
        else {
          int v57 = &stru_1EEA10550;
        }
        objc_msgSend(v55, "translateFrom:to:withCompletion:", v56, v57, v53, v59, v61, v62, v63, v64[0]);
      }
      else
      {
        if (*(void *)(a1 + 40)) {
          unsigned int v58 = (__CFString *)WTF::StringImpl::operator NSString *();
        }
        else {
          unsigned int v58 = &stru_1EEA10550;
        }
        objc_msgSend(v55, "translateTo:withCompletion:", v58, v53, v59, v61, v62, v63, v64[0]);
      }
      _Block_release(v53);
      return;
    }
    uint64_t v30 = qword_1EB3588E8;
    if (os_log_type_enabled((os_log_t)qword_1EB3588E8, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::number(*(WTF::String **)(a1 + 48));
      WTF::String::utf8();
      if (v64[0]) {
        uint64_t v31 = (char *)v64[0] + 16;
      }
      else {
        uint64_t v31 = 0;
      }
      *(_DWORD *)long long v79 = 136446466;
      *(void *)&v79[4] = v31;
      *(_WORD *)&v79[12] = 2048;
      *(double *)&v79[14] = v4;
      _os_log_impl(&dword_1985F2000, v30, OS_LOG_TYPE_DEFAULT, "[#%{public}s] Image translation completed in %.3f sec. (no text)", v79, 0x16u);
      char v33 = v64[0];
      v64[0] = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 1) {
          WTF::fastFree(v33, v32);
        }
        else {
          --*(_DWORD *)v33;
        }
      }
      unsigned int v40 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2) {
          WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v32);
        }
        else {
          *(_DWORD *)v40 -= 2;
        }
      }
    }
  }
  else
  {
    uint64_t v25 = qword_1EB3588E8;
    if (os_log_type_enabled((os_log_t)qword_1EB3588E8, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::number(*(WTF::String **)(a1 + 48));
      WTF::String::utf8();
      if (v64[0]) {
        int v26 = (char *)v64[0] + 16;
      }
      else {
        int v26 = 0;
      }
      uint64_t v27 = *(void *)(a1 + 24);
      *(_DWORD *)long long v79 = 136446722;
      *(void *)&v79[4] = v26;
      *(_WORD *)&v79[12] = 2048;
      *(double *)&v79[14] = v4;
      *(_WORD *)&v79[22] = 2114;
      *(void *)&v79[24] = v27;
      _os_log_impl(&dword_1985F2000, v25, OS_LOG_TYPE_DEFAULT, "[#%{public}s] Image translation failed in %.3f sec. (error: %{public}@)", v79, 0x20u);
      uint64_t v29 = v64[0];
      v64[0] = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 1) {
          WTF::fastFree(v29, v28);
        }
        else {
          --*(_DWORD *)v29;
        }
      }
      unsigned int v39 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2) {
          WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v28);
        }
        else {
          *(_DWORD *)v39 -= 2;
        }
      }
    }
  }
  CFTypeRef cf = 0;
  long long v80 = 0u;
  memset(v79, 0, sizeof(v79));
  WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)>::operator()(v2);
  CFTypeRef v42 = cf;
  CFTypeRef cf = 0;
  if (v42) {
    CFRelease(v42);
  }
  WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v80, v41);
  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79[16], v43);
  WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v79, v44);
}

void sub_1994A5B44(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, WTF *a12, WTF *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,CFTypeRef cf)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 1) {
      WTF::fastFree(a13, a2);
    }
    else {
      --*(_DWORD *)a13;
    }
  }
  if (a25)
  {
    if (*(_DWORD *)a25 == 2) {
      WTF::StringImpl::destroy(a25, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a25 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(VKCImageAnalysisTranslation *,NSError *)>::fromCallable<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1}::operator()(void)::{lambda(VKCImageAnalysisTranslation *,NSError *)#1}>(WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1}::operator()(void)::{lambda(VKCImageAnalysisTranslation *,NSError *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

unint64_t WTF::BlockPtr<void ()(VKCImageAnalysisTranslation *,NSError *)>::fromCallable<WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1}::operator()(void)::{lambda(VKCImageAnalysisTranslation *,NSError *)#1}>(WebKit::requestVisualTranslation(VKCImageAnalyzer *,NSURL *,WTF::String const&,WTF::String const&,CGImage *,WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)> &&)::$_0::operator()(VKCImageAnalysis *,NSError *)::{lambda(void)#1}::operator()(void)::{lambda(VKCImageAnalysisTranslation *,NSError *)#1})::{lambda(void *,VKCImageAnalysisTranslation *,NSError *)#1}::__invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (uint64_t *)(a1 + 32);
  uint64_t v7 = (WebKit *)WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  double v9 = v8 - *(double *)(a1 + 48);
  if (a3)
  {
    uint64_t v10 = qword_1EB3588E8;
    if (os_log_type_enabled((os_log_t)qword_1EB3588E8, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::number(*(WTF::String **)(a1 + 40));
      WTF::String::utf8();
      if (v88[0]) {
        char v11 = (char *)v88[0] + 16;
      }
      else {
        char v11 = 0;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v9;
      *(_WORD *)&unsigned char buf[22] = 2114;
      *(void *)&unsigned char buf[24] = a3;
      _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "[#%{public}s] Image translation failed in %.3f sec. (error: %{public}@)", buf, 0x20u);
      uint64_t v13 = v88[0];
      v88[0] = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1) {
          WTF::fastFree(v13, v12);
        }
        else {
          --*(_DWORD *)v13;
        }
      }
      uint64_t v37 = v84[0];
      v84[0] = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2) {
          WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v12);
        }
        else {
          *(_DWORD *)v37 -= 2;
        }
      }
    }
    long long v93 = 0;
    long long v92 = 0u;
    memset(buf, 0, sizeof(buf));
    WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)>::operator()(v6);
    unsigned int v39 = v93;
    long long v93 = 0;
    if (v39) {
      CFRelease(v39);
    }
    WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v92, v38);
    WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf[16], v40);
    CFTypeRef v42 = buf;
    return WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v41);
  }
  char v71 = v6;
  if (WebKit::shouldLogFullImageTranslationResults(v7))
  {
    v84[0] = 0;
    v84[1] = 0;
    LODWORD(v85) = 0;
    BYTE4(v85) = 1;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    int v14 = objc_msgSend(a2, "paragraphs", v6);
    uint64_t v15 = [v14 countByEnumeratingWithState:&v77 objects:v88 count:16];
    if (v15)
    {
      uint64_t v16 = *(void *)v78;
      char v17 = 1;
      do
      {
        uint64_t v18 = 0;
        do
        {
          if (*(void *)v78 != v16) {
            objc_enumerationMutation(v14);
          }
          CFTypeRef v19 = *(void **)(*((void *)&v77 + 1) + 8 * v18);
          if ((v17 & 1) == 0) {
            WTF::StringBuilder::append();
          }
          MEMORY[0x19972EAD0](buf, [v19 text]);
          if (v85 || v84[1])
          {
            if (*(void *)buf)
            {
              uint64_t v23 = *(void *)(*(void *)buf + 8);
              unint64_t v24 = *(unsigned int *)(*(void *)buf + 4) | ((unint64_t)((*(_DWORD *)(*(void *)buf + 16) >> 2) & 1) << 32);
            }
            else
            {
              uint64_t v23 = 0;
              unint64_t v24 = 0x100000000;
            }
            WTF::StringBuilder::append((uint64_t)v84, v23, v24);
            uint64_t v21 = *(WTF::StringImpl **)buf;
          }
          else
          {
            WTF::String::operator=((uint64_t *)v84, (WTF::StringImpl **)buf);
            uint64_t v21 = *(WTF::StringImpl **)buf;
            if (*(void *)buf) {
              int v22 = *(_DWORD *)(*(void *)buf + 4);
            }
            else {
              int v22 = 0;
            }
            LODWORD(v85) = v22;
          }
          *(void *)buf = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2) {
              WTF::StringImpl::destroy(v21, v20);
            }
            else {
              *(_DWORD *)v21 -= 2;
            }
          }
          char v17 = 0;
          ++v18;
        }
        while (v15 != v18);
        uint64_t v25 = [v14 countByEnumeratingWithState:&v77 objects:v88 count:16];
        uint64_t v15 = v25;
        char v17 = 0;
      }
      while (v25);
    }
    int v26 = qword_1EB3588E8;
    if (os_log_type_enabled((os_log_t)qword_1EB3588E8, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::number(*(WTF::String **)(a1 + 40));
      WTF::String::utf8();
      if (v73[0]) {
        int v28 = (char *)v73[0] + 16;
      }
      else {
        int v28 = 0;
      }
      uint64_t v29 = objc_msgSend((id)objc_msgSend(a2, "paragraphs"), "count");
      uint64_t v30 = v84[0];
      if (v84[0]
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)v84),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)v84),
            (uint64_t v30 = v84[0]) != 0))
      {
        *(_DWORD *)v30 += 2;
      }
      id v83 = v30;
      WTF::String::utf8();
      if ((void)v81) {
        uint64_t v31 = v81 + 16;
      }
      else {
        uint64_t v31 = 0;
      }
      *(_DWORD *)buf = 136446979;
      *(void *)&uint8_t buf[4] = v28;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v9;
      *(_WORD *)&unsigned char buf[22] = 2048;
      *(void *)&unsigned char buf[24] = v29;
      LOWORD(v92) = 2081;
      *(void *)((char *)&v92 + 2) = v31;
      _os_log_impl(&dword_1985F2000, v26, OS_LOG_TYPE_DEFAULT, "[#%{public}s] Image translation completed in %.3f sec. (paragraph count: %zu): \"%{private}s\"", buf, 0x2Au);
      int v32 = (WTF *)v81;
      *(void *)&long long v81 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 1) {
          WTF::fastFree(v32, v27);
        }
        else {
          --*(_DWORD *)v32;
        }
      }
      unint64_t v43 = v83;
      id v83 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2) {
          WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v27);
        }
        else {
          *(_DWORD *)v43 -= 2;
        }
      }
      unsigned int v44 = v73[0];
      v73[0] = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 1) {
          WTF::fastFree(v44, v27);
        }
        else {
          --*(_DWORD *)v44;
        }
      }
      unsigned int v45 = (WTF::StringImpl *)v89[0];
      v89[0] = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2) {
          WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v27);
        }
        else {
          *(_DWORD *)v45 -= 2;
        }
      }
    }
    uint64_t v35 = v84[1];
    v84[1] = 0;
    if (!v35) {
      goto LABEL_79;
    }
    int v36 = *(_DWORD *)v35 - 2;
    if (*(_DWORD *)v35 != 2)
    {
LABEL_77:
      *(_DWORD *)uint64_t v35 = v36;
      goto LABEL_79;
    }
    WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v27);
    goto LABEL_79;
  }
  char v33 = qword_1EB3588E8;
  if (os_log_type_enabled((os_log_t)qword_1EB3588E8, OS_LOG_TYPE_DEFAULT))
  {
    WTF::String::number(*(WTF::String **)(a1 + 40));
    WTF::String::utf8();
    if (v88[0]) {
      unint64_t v34 = (char *)v88[0] + 16;
    }
    else {
      unint64_t v34 = 0;
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = v34;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = v9;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&unsigned char buf[24] = objc_msgSend((id)objc_msgSend(a2, "paragraphs", v6), "count");
    _os_log_impl(&dword_1985F2000, v33, OS_LOG_TYPE_DEFAULT, "[#%{public}s] Image translation completed in %.3f sec. (paragraph count: %zu)", buf, 0x20u);
    uint64_t v35 = v88[0];
    v88[0] = 0;
    if (v35)
    {
      int v36 = *(_DWORD *)v35 - 1;
      if (*(_DWORD *)v35 == 1)
      {
        WTF::fastFree(v35, v27);
        goto LABEL_79;
      }
      goto LABEL_77;
    }
LABEL_79:
    unsigned int v46 = v84[0];
    v84[0] = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2) {
        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v27);
      }
      else {
        *(_DWORD *)v46 -= 2;
      }
    }
  }
  uint64_t v47 = *(WTF::String **)(a1 + 40);
  *(_OWORD *)__int16 v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  CFTypeRef cf = 0;
  char v48 = objc_msgSend(a2, "paragraphs", v71);
  unint64_t result = [v48 count];
  if (result)
  {
    if (result >= 0x6666667)
    {
      __break(0xC471u);
      return result;
    }
    DWORD2(v75) = 40 * (int)result / 0x28u;
    *(void *)&long long v75 = WTF::fastMalloc((WTF *)(40 * result));
  }
  long long v86 = 0u;
  long long v87 = 0u;
  *(_OWORD *)uint64_t v84 = 0u;
  long long v85 = 0u;
  uint64_t v50 = [v48 countByEnumeratingWithState:v84 objects:buf count:16];
  if (!v50) {
    goto LABEL_121;
  }
  uint64_t v51 = *(void *)v85;
  do
  {
    uint64_t v52 = 0;
    do
    {
      if (*(void *)v85 != v51) {
        objc_enumerationMutation(v48);
      }
      uint64_t v53 = (void *)*((void *)v84[1] + v52);
      if (objc_msgSend((id)objc_msgSend(v53, "text"), "length"))
      {
        if ([v53 isPassthrough]) {
          goto LABEL_117;
        }
        WebKit::floatQuad(&v81, (void *)[v53 quad]);
        if (*((float *)&v81 + 2) > *((float *)&v82 + 2)
          && *((float *)&v81 + 3) > *((float *)&v82 + 3)
          && *(float *)&v81 < *(float *)&v82
          && *((float *)&v81 + 1) > *((float *)&v82 + 1))
        {
          *((float *)&v81 + 1) = 1.0 - *((float *)&v81 + 1);
          *((float *)&v81 + 3) = 1.0 - *((float *)&v81 + 3);
          *((float *)&v82 + 1) = 1.0 - *((float *)&v82 + 1);
          *((float *)&v82 + 3) = 1.0 - *((float *)&v82 + 3);
        }
        MEMORY[0x19972EAD0](&v83, [v53 text]);
        unsigned int v55 = v83;
        if (v83) {
          *(_DWORD *)v83 += 2;
        }
        v89[0] = v55;
        *(_OWORD *)&v89[1] = v81;
        long long v90 = v82;
        if (HIDWORD(v75) == DWORD2(v75))
        {
          unint64_t v56 = WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v75, HIDWORD(v75) + 1, (unint64_t)v89);
          uint64_t v57 = v75 + 40 * HIDWORD(v75);
          uint64_t v58 = *(void *)v56;
          *(void *)unint64_t v56 = 0;
          *(void *)uint64_t v57 = v58;
          long long v59 = *(_OWORD *)(v56 + 8);
          *(_OWORD *)(v57 + 24) = *(_OWORD *)(v56 + 24);
          *(_OWORD *)(v57 + 8) = v59;
        }
        else
        {
          uint64_t v64 = v75 + 40 * HIDWORD(v75);
          v89[0] = 0;
          *(void *)uint64_t v64 = v55;
          long long v65 = *(_OWORD *)&v89[1];
          *(_OWORD *)(v64 + 24) = v90;
          *(_OWORD *)(v64 + 8) = v65;
        }
        ++HIDWORD(v75);
        uint64_t v62 = (WTF::StringImpl *)v89[0];
        v89[0] = 0;
        if (!v62) {
          goto LABEL_113;
        }
        int v63 = *(_DWORD *)v62 - 2;
        if (*(_DWORD *)v62 != 2) {
          goto LABEL_112;
        }
        WTF::StringImpl::destroy(v62, v54);
      }
      else
      {
        unint64_t v60 = qword_1EB3588E8;
        if (!os_log_type_enabled((os_log_t)qword_1EB3588E8, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_117;
        }
        WTF::String::number(v47);
        WTF::String::utf8();
        if ((void)v81) {
          uint64_t v61 = v81 + 16;
        }
        else {
          uint64_t v61 = 0;
        }
        LODWORD(v89[0]) = 136446210;
        *(void *)((char *)v89 + 4) = v61;
        _os_log_impl(&dword_1985F2000, v60, OS_LOG_TYPE_DEFAULT, "[#%{public}s] Skipping empty translation paragraph", (uint8_t *)v89, 0xCu);
        uint64_t v62 = (WTF::StringImpl *)v81;
        *(void *)&long long v81 = 0;
        if (v62)
        {
          int v63 = *(_DWORD *)v62 - 1;
          if (*(_DWORD *)v62 == 1)
          {
            WTF::fastFree(v62, v54);
            goto LABEL_113;
          }
LABEL_112:
          *(_DWORD *)uint64_t v62 = v63;
        }
      }
LABEL_113:
      long long v66 = v83;
      id v83 = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2) {
          WTF::StringImpl::destroy(v66, v54);
        }
        else {
          *(_DWORD *)v66 -= 2;
        }
      }
LABEL_117:
      ++v52;
    }
    while (v50 != v52);
    uint64_t v67 = [v48 countByEnumeratingWithState:v84 objects:buf count:16];
    uint64_t v50 = v67;
  }
  while (v67);
LABEL_121:
  WTF::CompletionHandler<void ()(WebCore::TextRecognitionResult &&)>::operator()(v72);
  CFTypeRef v69 = cf;
  CFTypeRef cf = 0;
  if (v69) {
    CFRelease(v69);
  }
  WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, v68);
  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v70);
  CFTypeRef v42 = v73;
  return WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v41);
}

void sub_1994A665C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,WTF::StringImpl *a34,WTF::StringImpl *a35,WTF::StringImpl *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,WTF *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,WTF::StringImpl *a59)
{
  if (a34)
  {
    if (*(_DWORD *)a34 == 2) {
      WTF::StringImpl::destroy(a34, a2);
    }
    else {
      *(_DWORD *)a34 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 1) {
      WTF::fastFree(a13, a2);
    }
    else {
      --*(_DWORD *)a13;
    }
  }
  if (a59)
  {
    if (*(_DWORD *)a59 == 2) {
      WTF::StringImpl::destroy(a59, a2);
    }
    else {
      *(_DWORD *)a59 -= 2;
    }
  }
  if (a36)
  {
    if (*(_DWORD *)a36 == 2) {
      WTF::StringImpl::destroy(a36, a2);
    }
    else {
      *(_DWORD *)a36 -= 2;
    }
  }
  if (a35)
  {
    if (*(_DWORD *)a35 == 2) {
      WTF::StringImpl::destroy(a35, a2);
    }
    else {
      *(_DWORD *)a35 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(CGImage *,NSError *)>::fromCallable<WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0>(WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(CGImage *,NSError *)>::fromCallable<WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0>(WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0)::{lambda(void *,CGImage *,NSError *)#1}::__invoke(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  v11[3] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v6 = qword_1EB358910;
    if (os_log_type_enabled((os_log_t)qword_1EB358910, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v11[0]) = 138412290;
      *(void *)((char *)v11 + 4) = a3;
      _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "Remove background failed with error: %@", (uint8_t *)v11, 0xCu);
    }
  }
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = 0;
  double v9 = (void *)WTF::fastMalloc((WTF *)0x20);
  *double v9 = &unk_1EEA0FF98;
  v9[1] = cf;
  void v9[2] = v7;
  v9[3] = v8;
  v11[0] = v9;
  WTF::callOnMainRunLoop();
  uint64_t result = v11[0];
  v11[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1994A69F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

void *WTF::Detail::CallableWrapper<WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0::operator()(CGImage *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EEA0FF98;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  double v3 = (const void *)a1[1];
  a1[1] = 0;
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0::operator()(CGImage *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EEA0FF98;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  double v4 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    CFRelease(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::requestBackgroundRemoval(CGImage *,WTF::CompletionHandler<void ()(CGImage *)> &&)::$_0::operator()(CGImage *,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358910;
  BOOL v3 = os_log_type_enabled((os_log_t)qword_1EB358910, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v3);
    double v5 = (v4 - *(double *)(a1 + 24)) * 1000.0;
    BOOL v6 = *(void *)(a1 + 8) != 0;
    int v8 = 134218240;
    double v9 = v5;
    __int16 v10 = 1024;
    BOOL v11 = v6;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "Remove background finished in %.0f ms (found subject? %d)", (uint8_t *)&v8, 0x12u);
  }
  return WTF::CompletionHandler<void ()(CGImage *)>::operator()((uint64_t *)(a1 + 16));
}

Class initBELayerHierarchy(void)
{
  if ((byte_1EB35A40C & 1) == 0)
  {
    *(void *)algn_1EB35A458 = dlopen("/System/Library/Frameworks/BrowserEngineKit.framework/BrowserEngineKit", 2);
    byte_1EB35A40C = 1;
  }
  Class result = objc_getClass("BELayerHierarchy");
  qword_1EB35A450 = (uint64_t)result;
  getBELayerHierarchyClass = BELayerHierarchyFunction;
  return result;
}

uint64_t BELayerHierarchyFunction(void)
{
  return qword_1EB35A450;
}

Class initBELayerHierarchyHostingTransactionCoordinator(void)
{
  if ((byte_1EB35A40C & 1) == 0)
  {
    *(void *)algn_1EB35A458 = dlopen("/System/Library/Frameworks/BrowserEngineKit.framework/BrowserEngineKit", 2);
    byte_1EB35A40C = 1;
  }
  Class result = objc_getClass("BELayerHierarchyHostingTransactionCoordinator");
  qword_1EB35A460 = (uint64_t)result;
  getBELayerHierarchyHostingTransactionCoordinatorClass = BELayerHierarchyHostingTransactionCoordinatorFunction;
  return result;
}

uint64_t BELayerHierarchyHostingTransactionCoordinatorFunction(void)
{
  return qword_1EB35A460;
}

Class initBELayerHierarchyHandle(void)
{
  if ((byte_1EB35A40C & 1) == 0)
  {
    *(void *)algn_1EB35A458 = dlopen("/System/Library/Frameworks/BrowserEngineKit.framework/BrowserEngineKit", 2);
    byte_1EB35A40C = 1;
  }
  Class result = objc_getClass("BELayerHierarchyHandle");
  qword_1EB35A468 = (uint64_t)result;
  getBELayerHierarchyHandleClass = BELayerHierarchyHandleFunction;
  return result;
}

uint64_t BELayerHierarchyHandleFunction(void)
{
  return qword_1EB35A468;
}

uint64_t ___ZL33libsystem_networkextensionLibraryv_block_invoke()
{
  uint64_t result = (uint64_t)dlopen("/usr/lib/system/libsystem_networkextension.dylib", 2);
  if (!result)
  {
    uint64_t result = 35;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::platformOpen(void)::$_2,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (atomic_uchar **)a1[1];
  *a1 = &unk_1EEA0FFC0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply(WebKit::PCM::MessageType,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::{lambda(NSObject  {objcproto13OS_xpc_object}*)#1},void,NSObject>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA0FFE8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply(WebKit::PCM::MessageType,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::{lambda(NSObject  {objcproto13OS_xpc_object}*)#1},void,NSObject>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA0FFE8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::sendWithReply(WebKit::PCM::MessageType,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::{lambda(NSObject  {objcproto13OS_xpc_object}*)#1},void,NSObject>::call(uint64_t a1, id a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  if (object_getClass(a2) == (Class)MEMORY[0x1E4F14590] && xpc_dictionary_get_uint64(a2, "version") == 1)
  {
    size_t length = 0;
    uint64_t result = (WTF *)xpc_dictionary_get_data(a2, "encoded message", &length);
    size_t v5 = length;
    BOOL v11 = 0;
    LODWORD(v12) = 0;
    HIDWORD(v12) = length;
    if (length)
    {
      if (HIDWORD(length))
      {
        __break(0xC471u);
        return result;
      }
      BOOL v6 = result;
      uint64_t v7 = (WTF *)WTF::fastMalloc((WTF *)length);
      LODWORD(v12) = v5;
      BOOL v11 = v7;
      do
      {
        char v8 = *(unsigned char *)v6;
        BOOL v6 = (WTF *)((char *)v6 + 1);
        *(unsigned char *)uint64_t v7 = v8;
        uint64_t v7 = (WTF *)((char *)v7 + 1);
        --v5;
      }
      while (v5);
    }
    WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(v3);
  }
  else
  {
    BOOL v11 = 0;
    uint64_t v12 = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(v3);
  }
  uint64_t result = v11;
  if (v11)
  {
    BOOL v11 = 0;
    LODWORD(v12) = 0;
    return (WTF *)WTF::fastFree(result, v9);
  }
  return result;
}

void sub_1994A7060(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_1994A7108(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::getLogChannel(WebKit *this, const WTF::String *a2)
{
  uint64_t v2 = this;
  {
    WebKit::LogChannels::LogChannels((WebKit::LogChannels *)&WebKit::logChannels(void)::logChannels);
    uint64_t v2 = this;
  }

  return MEMORY[0x1F40EADF0](&WebKit::logChannels(void)::logChannels, v2);
}

void *IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(void *result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *a2;
  if (!*a2)
  {
    uint64_t v22 = result[2];
    unint64_t v23 = *result + v22;
    unint64_t v24 = (v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    BOOL v8 = v24 >= v23;
    unint64_t v25 = v24 - v23;
    if (!v8) {
      return result;
    }
    unint64_t v26 = v25 + v22;
    unint64_t v27 = v26 + 4;
    if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v27 <= result[1])
    {
      *(_DWORD *)(*result + v26) = -1;
      result[2] = v27;
      return result;
    }
LABEL_33:
    result[1] = 0;
    return result;
  }
  unsigned int v4 = *(_DWORD *)(v3 + 16);
  unint64_t v5 = result[2];
  unint64_t v6 = *result + v5;
  unint64_t v7 = (v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (v8)
  {
    unint64_t v10 = v9 + v5;
    unint64_t v11 = v9 + v5 + 4;
    if (v10 > 0xFFFFFFFFFFFFFFFBLL || v11 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(*result + v10) = *(_DWORD *)(v3 + 4);
      result[2] = v11;
      unint64_t v5 = v11;
    }
  }
  int v13 = (v4 >> 2) & 1;
  if (v5 >= result[1])
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v5++) = v13;
    result[2] = v5;
  }
  uint64_t v14 = *a2;
  if (v13)
  {
    if (v14)
    {
      uint64_t v15 = *(const void **)(v14 + 8);
      size_t v16 = *(unsigned int *)(v14 + 4);
    }
    else
    {
      uint64_t v15 = 0;
      size_t v16 = 0;
    }
    unint64_t v21 = v16 + v5;
    if (__CFADD__(v16, v5) || v21 > result[1]) {
      goto LABEL_33;
    }
    uint64_t v17 = *result;
    goto LABEL_31;
  }
  if (v14)
  {
    uint64_t v15 = *(const void **)(v14 + 8);
    size_t v16 = 2 * *(unsigned int *)(v14 + 4);
  }
  else
  {
    uint64_t v15 = 0;
    size_t v16 = 0;
  }
  uint64_t v17 = *result;
  unint64_t v18 = *result + v5;
  unint64_t v19 = (v18 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v8 = v19 >= v18;
  unint64_t v20 = v19 - v18;
  if (v8)
  {
    v5 += v20;
    unint64_t v21 = v5 + v16;
    if (__CFADD__(v5, v16) || v21 > result[1]) {
      goto LABEL_33;
    }
LABEL_31:
    uint64_t result = memcpy((void *)(v17 + v5), v15, v16);
    v2[2] = v21;
  }
  return result;
}

_OWORD *IPC::Connection::SyncMessageStateRelease::operator()(int a1, IPC::Connection::SyncMessageState *this)
{
  if (this)
  {
    char v3 = 0;
    atomic_compare_exchange_strong_explicit(_MergedGlobals_141, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
    if (v3) {
      uint64_t result = (_OWORD *)MEMORY[0x19972E8D0](_MergedGlobals_141);
    }
    int v4 = *((_DWORD *)this + 22);
    int v5 = v4 - 1;
    *((_DWORD *)this + 22) = v4 - 1;
    if (v4 == 1)
    {
      if ((byte_1EB35A488 & 1) == 0)
      {
        qword_1EB35A480 = 0;
        byte_1EB35A488 = 1;
      }
      uint64_t result = WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::remove(*((_OWORD **)this + 10));
    }
    int v6 = 1;
    atomic_compare_exchange_strong_explicit(_MergedGlobals_141, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1) {
      uint64_t result = (_OWORD *)WTF::Lock::unlockSlow((WTF::Lock *)_MergedGlobals_141);
    }
    if (!v5)
    {
      IPC::Connection::SyncMessageState::~SyncMessageState(this);
      JUMPOUT(0x199740C10);
    }
  }
  return result;
}

_OWORD *WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::remove(_OWORD *result)
{
  uint64_t v1 = qword_1EB35A480;
  if (qword_1EB35A480)
  {
    uint64_t result = (_OWORD *)WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>>,WTF::SerialFunctionDispatcher *>((uint64_t)result);
    if (!result) {
      uint64_t result = (_OWORD *)(v1 + 16 * *(unsigned int *)(v1 - 4));
    }
    if ((_OWORD *)(v1 + 16 * *(unsigned int *)(v1 - 4)) != result)
    {
      return WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::remove(result);
    }
  }
  return result;
}

uint64_t IPC::Connection::SyncMessageState::dispatchMessagesUntil(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  char v4 = 0;
  int v5 = (atomic_uchar *)(result + 3);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 3), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = MEMORY[0x19972E8D0](result + 3);
  }
  unint64_t v6 = *(void *)(v3 + 48);
  uint64_t v7 = *(void *)(v3 + 56);
  if (v6 != v7)
  {
    while (*(void *)(*(void *)(v3 + 64) + 24 * v6 + 16) != a2)
    {
      unint64_t v17 = *(unsigned int *)(v3 + 72);
      v6 += v17 + 1;
      do
        v6 -= v17;
      while (v6 >= v17);
      if (v7 == v6) {
        goto LABEL_17;
      }
    }
  }
  if (v6 == v7)
  {
LABEL_17:
    int v18 = 0;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(v3 + 48);
      if (v8 == *(void *)(v3 + 56)) {
        break;
      }
      uint64_t v9 = 3 * v8;
      uint64_t v10 = *(void *)(v3 + 64) + 8 * v9;
      long long v11 = *(_OWORD *)v10;
      *(void *)uint64_t v10 = 0;
      *(void *)(v10 + 8) = 0;
      *(_OWORD *)uint64_t v29 = v11;
      uint64_t v30 = *(void *)(v10 + 16);
      WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct((atomic_uchar *volatile **)(*(void *)(v3 + 64) + 8 * v9), (atomic_uchar *volatile **)(*(void *)(v3 + 64) + 8 * v9 + 24));
      uint64_t v12 = *(void *)(v3 + 48);
      if (v12 == *(unsigned int *)(v3 + 72) - 1) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = v12 + 1;
      }
      *(void *)(v3 + 48) = v13;
      WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::append((atomic_uchar *volatile **)(v3 + 16), (atomic_uchar *volatile *)v29);
      uint64_t v14 = v29[1];
      v29[1] = 0;
      if (v14)
      {
        IPC::Decoder::~Decoder(v14);
        WTF::fastFree(v15, v16);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v29);
      uint64_t result = WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::last(v3 + 16);
    }
    while (*(void *)(result + 16) != a2);
    int v18 = 1;
  }
  int v19 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
  if (v19 == 1)
  {
    if (!v18) {
      return result;
    }
  }
  else
  {
    uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (!v18) {
      return result;
    }
  }
  while (1)
  {
    uint64_t v20 = *(void *)(v3 + 16);
    if (v20 == *(void *)(v3 + 24)) {
      break;
    }
    uint64_t v21 = 3 * v20;
    uint64_t v22 = *(void *)(v3 + 32) + 8 * v21;
    long long v23 = *(_OWORD *)v22;
    *(void *)uint64_t v22 = 0;
    *(void *)(v22 + 8) = 0;
    *(_OWORD *)uint64_t v29 = v23;
    uint64_t v30 = *(void *)(v22 + 16);
    WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct((atomic_uchar *volatile **)(*(void *)(v3 + 32) + 8 * v21), (atomic_uchar *volatile **)(*(void *)(v3 + 32) + 8 * v21 + 24));
    uint64_t v24 = *(void *)(v3 + 16);
    if (v24 == *(unsigned int *)(v3 + 40) - 1) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v24 + 1;
    }
    *(void *)(v3 + 16) = v25;
    IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage::dispatch((uint64_t **)v29);
    unint64_t v26 = v29[1];
    v29[1] = 0;
    if (v26)
    {
      IPC::Decoder::~Decoder(v26);
      WTF::fastFree(v27, v28);
    }
    uint64_t result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v29);
  }
  return result;
}

uint64_t WTF::Deque<IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage,0ul>::last(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(void *)a1 == v1)
  {
    uint64_t result = 84;
    __break(0xC471u);
  }
  else
  {
    if (!v1) {
      uint64_t v1 = *(unsigned int *)(a1 + 24);
    }
    return *(void *)(a1 + 16) + 24 * v1 - 24;
  }
  return result;
}

void IPC::Connection::~Connection(IPC::Connection *this)
{
  os_unfair_lock_lock((os_unfair_lock_t)&IPC::s_connectionMapLock);
  {
    IPC::connectionMap(void)::map = 0;
  }
  uint64_t v2 = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((void *)this + 3);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::remove(v2, v3);
  os_unfair_lock_unlock((os_unfair_lock_t)&IPC::s_connectionMapLock);
  IPC::Connection::cancelAsyncReplyHandlers((os_unfair_lock_s *)this);
  char v4 = (void *)*((void *)this + 44);
  if (v4) {
    os_release(v4);
  }
  std::unique_ptr<IPC::MachMessage>::reset[abi:sn180100]((uint64_t *)this + 43, 0);
  unint64_t v6 = (void *)*((void *)this + 42);
  if (v6) {
    os_release(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 40);
  if (v7) {
    os_release(v7);
  }
  uint64_t v8 = *((void *)this + 38);
  if (v8) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::deallocateTable(v8, v5);
  }
  uint64_t v9 = *((void *)this + 37);
  if (v9) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v9, v5);
  }
  uint64_t v10 = *((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 56))(v10);
  }
  uint64_t v11 = *((void *)this + 34);
  if (v11) {
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v11, v5);
  }
  WTF::Vector<IPC::Connection::PendingSyncReply,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 62, v5);
  WTF::Deque<WTF::UniqueRef<IPC::Encoder>,0ul>::~Deque((uint64_t)this + 192, v12);
  IPC::MessageReceiveQueueMap::~MessageReceiveQueueMap((IPC::Connection *)((char *)this + 144), v13);
  WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::~Deque((unint64_t *)this + 14, v14);
  uint64_t v15 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 56))(v15);
  }
  uint64_t v16 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v16) {
    LODWORD(v16) = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  unint64_t v17 = (IPC::Connection::SyncMessageState *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v17) {
    IPC::Connection::SyncMessageStateRelease::operator()(v16, v17);
  }
  uint64_t v18 = *((void *)this + 1);
  if (v18)
  {
    int v19 = (unsigned int *)(v18 + 16);
    if (!atomic_load(v19))
    {
      __break(0xC471u);
      JUMPOUT(0x1994A7874);
    }
    atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF);
  }
}

void IPC::Connection::cancelAsyncReplyHandlers(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 26;
  os_unfair_lock_lock(this + 26);
  uint64_t v3 = *(void *)&this[74]._os_unfair_lock_opaque;
  uint64_t v4 = *(void *)&this[76]._os_unfair_lock_opaque;
  *(void *)&this[74]._os_unfair_lock_opaque = 0;
  *(void *)&this[76]._os_unfair_lock_opaque = 0;
  os_unfair_lock_unlock(v2);
  if (!v3)
  {
    uint64_t v8 = 0;
    uint64_t v6 = 0;
    goto LABEL_47;
  }
  uint64_t v6 = *(unsigned int *)(v3 - 4);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  if (!*(_DWORD *)(v3 - 12))
  {
    uint64_t v8 = (void *)(v3 + 16 * v6);
LABEL_47:
    uint64_t v7 = (void *)(v3 + 16 * v6);
    goto LABEL_8;
  }
  uint64_t v8 = (void *)v3;
  if (v6)
  {
    uint64_t v9 = 16 * v6;
    uint64_t v8 = (void *)v3;
    while ((unint64_t)(*v8 + 1) <= 1)
    {
      v8 += 2;
      v9 -= 16;
      if (!v9)
      {
        uint64_t v8 = v7;
        break;
      }
    }
  }
LABEL_8:
  if (v3) {
    uint64_t v10 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  }
  else {
    uint64_t v10 = 0;
  }
  while (v8 != v10)
  {
    uint64_t v15 = v8[1];
    if (v15)
    {
      v8[1] = 0;
      (*(void (**)(uint64_t, void))(*(void *)v15 + 16))(v15, 0);
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t v16 = v8 + 2;
    uint64_t v8 = v7;
    if (v16 != v7)
    {
      uint64_t v8 = v16;
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        v8 += 2;
        if (v8 == v7)
        {
          uint64_t v8 = v7;
          break;
        }
      }
    }
  }
  if (!v4)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
LABEL_13:
    uint64_t v13 = (void *)(v4 + 16 * v12);
    goto LABEL_14;
  }
  uint64_t v12 = *(unsigned int *)(v4 - 4);
  uint64_t v13 = (void *)(v4 + 16 * v12);
  if (!*(_DWORD *)(v4 - 12))
  {
    uint64_t v11 = (void *)(v4 + 16 * v12);
    goto LABEL_13;
  }
  uint64_t v11 = (void *)v4;
  if (v12)
  {
    uint64_t v19 = 16 * v12;
    uint64_t v11 = (void *)v4;
    while ((unint64_t)(*v11 + 1) <= 1)
    {
      v11 += 2;
      v19 -= 16;
      if (!v19)
      {
        uint64_t v11 = v13;
        break;
      }
    }
  }
LABEL_14:
  if (v4) {
    uint64_t v14 = (void *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  }
  else {
    uint64_t v14 = 0;
  }
  while (v11 != v14)
  {
    uint64_t v17 = v11[1];
    if (v17)
    {
      uint64_t v20 = 0;
      v11[1] = 0;
      (*(void (**)(uint64_t, IPC::Decoder **))(*(void *)v17 + 16))(v17, &v20);
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](&v20);
    }
    uint64_t v18 = v11 + 2;
    uint64_t v11 = v13;
    if (v18 != v13)
    {
      uint64_t v11 = v18;
      while ((unint64_t)(*v11 + 1) <= 1)
      {
        v11 += 2;
        if (v11 == v13)
        {
          uint64_t v11 = v13;
          break;
        }
      }
    }
  }
  if (v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::deallocateTable(v4, v5);
  }
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, v5);
  }
}

unint64_t *WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::~Deque(unint64_t *a1, void *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  int v5 = (IPC::Decoder **)a1[2];
  if (v3 > v4)
  {
    if (v4)
    {
      uint64_t v9 = 8 * v4;
      do
      {
        int v5 = std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](v5) + 1;
        v9 -= 8;
      }
      while (v9);
      int v5 = (IPC::Decoder **)a1[2];
      unint64_t v3 = *a1;
    }
    uint64_t v10 = *((unsigned int *)a1 + 6);
    if (v3 != v10)
    {
      uint64_t v11 = &v5[v3];
      uint64_t v12 = 8 * v10 - 8 * v3;
      do
      {
        uint64_t v11 = std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](v11) + 1;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    if (v3 == v4) {
      goto LABEL_6;
    }
    uint64_t v6 = &v5[v3];
    uint64_t v7 = 8 * v4 - 8 * v3;
    do
    {
      uint64_t v6 = std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](v6) + 1;
      v7 -= 8;
    }
    while (v7);
  }
  int v5 = (IPC::Decoder **)a1[2];
LABEL_6:
  if (v5)
  {
    a1[2] = 0;
    *((_DWORD *)a1 + 6) = 0;
    WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

void IPC::Connection::connection(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&IPC::s_connectionMapLock);
  {
    IPC::connectionMap(void)::map = 0;
  }
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((atomic_uchar *)&IPC::connectionMap(void)::map, &v6, (atomic_uchar **)v5);
  if (v5[0])
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>((atomic_uchar *)v5[0], (uint64_t)v5[1], a2);
    unint64_t v4 = (atomic_uchar *)v5[0];
    v5[0] = 0;
    if (v4) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v3);
    }
  }
  else
  {
    *a2 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&IPC::s_connectionMapLock);
}

void IPC::Connection::removeMessageReceiveQueue(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  IPC::MessageReceiveQueueMap::remove((uint64_t *)(a1 + 144), a2);

  os_unfair_lock_unlock(v4);
}

void IPC::Connection::removeWorkQueueMessageReceiver(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v6 = a3;
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
    LOBYTE(v6) = 0;
  }
  v5[0] = a2;
  v5[1] = 1;
  char v7 = v4;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  IPC::MessageReceiveQueueMap::remove((uint64_t *)(a1 + 144), v5);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
}

void IPC::Connection::removeMessageReceiver(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = a3;
    char v3 = 1;
  }
  else
  {
    char v3 = 0;
    LOBYTE(v5) = 0;
  }
  v4[0] = a2;
  v4[1] = 1;
  char v6 = v3;
  IPC::Connection::removeMessageReceiveQueue(a1, v4);
}

uint64_t IPC::Connection::sendSyncReply(uint64_t a1, uint64_t *a2)
{
  return IPC::Connection::sendMessageImpl(a1, a2, 0, 0);
}

uint64_t IPC::Connection::invalidate(uint64_t this)
{
  atomic_store(0, (unsigned __int8 *)(this + 33));
  uint64_t v1 = *(void *)(this + 8);
  if (v1)
  {
    uint64_t v2 = this;
    if (!*(void *)(this + 16) || (v3 = (unsigned int *)(v1 + 16), (unsigned int v4 = atomic_load(v3)) == 0))
    {
      __break(0xC471u);
      JUMPOUT(0x1994A7FA0);
    }
    atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF);
    *(void *)(this + 8) = 0;
    uint64_t v5 = *(void *)(this + 48);
    *(void *)(v2 + 48) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 104));
    char v6 = *(IPC::Connection::SyncMessageState **)(v2 + 16);
    *(void *)(v2 + 16) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 104));
    if (v6) {
      IPC::Connection::SyncMessageStateRelease::operator()(v7, v6);
    }
    IPC::Connection::cancelAsyncReplyHandlers((os_unfair_lock_s *)v2);
    uint64_t v8 = *(void *)(v2 + 64);
    (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, (atomic_uchar *volatile *)v2);
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v9 = &unk_1EEA10148;
    uint64_t v10 = v12;
    uint64_t v12 = 0;
    uint64_t v13 = v9;
    v9[1] = v10;
    (*(void (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, &v13);
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11) {
      (*(void (**)(void *))(*v11 + 8))(v11);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
    return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 56))(v8);
  }
  return this;
}

uint64_t IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(os_unfair_lock_s *a1, IPC::Encoder **a2, uint64_t *a3, char a4, uint64_t a5)
{
  uint64_t v10 = a3[1];
  uint64_t v20 = v10;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(*a2, &v20);
  IPC::Connection::addAsyncReplyHandlerWithDispatcher((uint64_t)a1, a3);
  uint64_t v11 = IPC::Connection::sendMessageImpl((uint64_t)a1, (uint64_t *)a2, a4, a5);
  if (v11)
  {
    os_unfair_lock_lock(a1 + 26);
    IPC::Connection::takeAsyncReplyHandlerWithDispatcherWithLockHeld((uint64_t)a1, v10, &v19);
    os_unfair_lock_unlock(a1 + 26);
    uint64_t v12 = v19;
    if (v19)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      (*(void (**)(uint64_t, IPC::Decoder **))(*(void *)v12 + 16))(v12, &v18);
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      uint64_t v13 = v18;
      uint64_t v18 = 0;
      if (v13)
      {
        IPC::Decoder::~Decoder(v13);
        WTF::fastFree(v16, v17);
      }
      uint64_t v14 = v19;
      uint64_t v19 = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
  }
  return v11;
}

void IPC::Connection::addAsyncReplyHandlerWithDispatcher(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = (os_unfair_lock_s *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>><void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::add<void ()(std::unique_ptr<IPC::Decoder> &&)>((uint64_t *)(a1 + 304), a2 + 1, a2, (uint64_t)v5);
  os_unfair_lock_unlock(v4);
}

uint64_t std::experimental::fundamentals_v3::expected<WTF::UniqueRef<IPC::Decoder>,IPC::Error>::operator=(uint64_t a1, char *a2)
{
  char v3 = *a2;
  v9[0] = *a2;
  int v10 = 1;
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 1)
  {
    v9[0] = *(unsigned char *)a1;
    *(unsigned char *)a1 = v3;
    int v5 = 1;
LABEL_12:
    ((void (*)(unsigned char *, unsigned char *))off_1EEA100B0[v5])(v11, v9);
    return a1;
  }
  if ((v4 + 1) >= 3) {
    char v6 = (unsigned char *)a1;
  }
  else {
    char v6 = v9;
  }
  if ((v4 + 1) >= 3) {
    int v7 = v9;
  }
  else {
    int v7 = (unsigned char *)a1;
  }
  v11[0] = 0;
  int v12 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v11, (uint64_t)v7);
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>((uint64_t)v7, (uint64_t)v6);
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>((uint64_t)v6, (uint64_t)v11);
  if (v12 != -1) {
    ((void (*)(char *, unsigned char *))off_1EEA100B0[v12])(&v13, v11);
  }
  int v5 = v10;
  if (v10 != -1) {
    goto LABEL_12;
  }
  return a1;
}

atomic_uchar *volatile **IPC::Connection::dispatchDidReceiveInvalidMessage(uint64_t a1, __int16 a2, int a3)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, (atomic_uchar *volatile *)a1);
  LOWORD(v13) = a2;
  HIDWORD(v13) = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 80);
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v8 = &unk_1EEA101F8;
    uint64_t v9 = v12;
    int v12 = 0;
    v8[1] = v9;
    v8[2] = v13;
    uint64_t v14 = v8;
    (*(void (**)(uint64_t, void **))(*(void *)v7 + 16))(v7, &v14);
    int v10 = v14;
    uint64_t v14 = 0;
    if (v10) {
      (*(void (**)(void *))(*v10 + 8))(v10);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
}

atomic_uchar *volatile **IPC::Connection::connectionDidClose(IPC::Connection *this)
{
  atomic_store(0, (unsigned __int8 *)this + 33);
  IPC::Connection::platformInvalidate(this);
  char v3 = 0;
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 240, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    MEMORY[0x19972E8D0]((char *)this + 240);
  }
  *((unsigned char *)this + 241) = 0;
  int v5 = *((_DWORD *)this + 65);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 240, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((IPC::Connection *)((char *)this + 240));
  }
  if (v5)
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 26);
    int v28 = (WTF::BinarySemaphore *)*((void *)this + 2);
    if (v28) {
      WTF::BinarySemaphore::signal(v28);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)this + 26);
  }
  char v6 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 226, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x19972E8D0]((char *)this + 226);
  }
  *((unsigned char *)this + 242) = 0;
  uint64_t v7 = *((void *)this + 29);
  if (v7) {
    *(unsigned char *)(v7 + 20) = 1;
  }
  int v8 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 226, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    WTF::Lock::unlockSlow((IPC::Connection *)((char *)this + 226));
  }
  uint64_t v9 = (unsigned __int8 *)this + 225;
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)this + 225);
  if (v10)
  {
    atomic_store(0, v9);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v9, v2);
  }
  char v11 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 184, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
  if (v11) {
    MEMORY[0x19972E8D0]((char *)this + 184);
  }
  unint64_t v12 = *((void *)this + 24);
  unint64_t v13 = *((void *)this + 25);
  uint64_t v14 = (IPC::Encoder **)*((void *)this + 26);
  if (v12 > v13)
  {
    if (v13)
    {
      uint64_t v29 = 8 * v13;
      do
      {
        uint64_t v14 = std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](v14, v2) + 1;
        v29 -= 8;
      }
      while (v29);
      uint64_t v14 = (IPC::Encoder **)*((void *)this + 26);
      unint64_t v12 = *((void *)this + 24);
    }
    uint64_t v30 = *((unsigned int *)this + 54);
    if (v12 != v30)
    {
      uint64_t v31 = &v14[v12];
      uint64_t v32 = 8 * v30 - 8 * v12;
      do
      {
        uint64_t v31 = std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](v31, v2) + 1;
        v32 -= 8;
      }
      while (v32);
    }
  }
  else
  {
    if (v12 == v13) {
      goto LABEL_21;
    }
    uint64_t v15 = &v14[v12];
    uint64_t v16 = 8 * v13 - 8 * v12;
    do
    {
      uint64_t v15 = std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](v15, v2) + 1;
      v16 -= 8;
    }
    while (v16);
  }
  uint64_t v14 = (IPC::Encoder **)*((void *)this + 26);
LABEL_21:
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  if (v14)
  {
    *((void *)this + 26) = 0;
    *((_DWORD *)this + 54) = 0;
    WTF::fastFree((WTF *)v14, v2);
  }
  uint64_t v17 = (unsigned __int8 *)this + 224;
  unsigned __int8 v18 = atomic_load((unsigned __int8 *)this + 224);
  if (v18)
  {
    atomic_store(0, v17);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v17, v2);
  }
  int v19 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 184, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
  if (v19 != 1) {
    WTF::Lock::unlockSlow((IPC::Connection *)((char *)this + 184));
  }
  uint64_t v20 = (void (*)(IPC::Connection *))*((void *)this + 5);
  if (v20) {
    v20(this);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v33, (atomic_uchar *volatile *)this);
  uint64_t v21 = (os_unfair_lock_s *)((char *)this + 104);
  os_unfair_lock_lock((os_unfair_lock_t)this + 26);
  uint64_t v22 = *((void *)this + 2);
  if (v22)
  {
    uint64_t v23 = *(void *)(v22 + 80);
    uint64_t v24 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v24 = &unk_1EEA10220;
    uint64_t v25 = v33;
    char v33 = 0;
    unint64_t v34 = v24;
    v24[1] = v25;
    (*(void (**)(uint64_t, void **))(*(void *)v23 + 16))(v23, &v34);
    unint64_t v26 = v34;
    unint64_t v34 = 0;
    if (v26) {
      (*(void (**)(void *))(*v26 + 8))(v26);
    }
  }
  os_unfair_lock_unlock(v21);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v33);
}

void *IPC::Connection::dispatchToClientWithIncomingMessagesLock<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_0>(void *result, uint64_t *a2)
{
  if (result)
  {
    uint64_t v3 = result[10];
    int v4 = (void *)WTF::fastMalloc((WTF *)0x10);
    uint64_t v5 = *a2;
    *a2 = 0;
    *int v4 = &unk_1EEA10248;
    v4[1] = v5;
    char v6 = v4;
    (*(void (**)(uint64_t, void **))(*(void *)v3 + 16))(v3, &v6);
    uint64_t result = v6;
    char v6 = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>><void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::add<void ()(std::unique_ptr<IPC::Decoder> &&)>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    unsigned __int8 v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v29 = 0;
        }
        else {
          uint64_t v29 = *(unsigned int *)(v8 - 4);
        }
        char v28 = 0;
        uint64_t v27 = v8 + 16 * v29;
        goto LABEL_26;
      }
      if (v17 == -1) {
        unsigned __int8 v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *unsigned __int8 v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  uint64_t v20 = *a3;
  *a3 = 0;
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  uint64_t v21 = *v6;
  if (*v6) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 12) = v22;
  uint64_t v23 = *v6;
  if (*v6) {
    int v24 = *(_DWORD *)(v23 - 12);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
  unint64_t v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_20:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(v6, v16);
      uint64_t v16 = result;
      uint64_t v23 = *v6;
      if (*v6) {
        unint64_t v26 = *(unsigned int *)(v23 - 4);
      }
      else {
        unint64_t v26 = 0;
      }
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_20;
  }
  uint64_t v27 = v23 + 16 * v26;
  char v28 = 1;
LABEL_26:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v27;
  *(unsigned char *)(a4 + 16) = v28;
  return result;
}

unsigned int *IPC::Connection::wakeUpRunLoop(unsigned int *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 33);
  if (v1)
  {
    uint64_t v2 = *((void *)this + 2);
    if (!v2)
    {
      __break(0xC471u);
      JUMPOUT(0x1994A8990);
    }
    uint64_t v3 = *(unsigned int **)(v2 + 80);
    this = (unsigned int *)WTF::RunLoop::main((WTF::RunLoop *)this);
    if (v3 == this)
    {
      int v4 = (atomic_uint *)WTF::RunLoop::main((WTF::RunLoop *)this);
      uint64_t v5 = (unsigned int *)(v4 + 2);
      atomic_fetch_add(v4 + 2, 1u);
      WTF::RunLoop::wakeUp((WTF::RunLoop *)v4);
      return WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v5);
    }
  }
  return this;
}

const char *IPC::errorAsString()
{
  uint64_t result = "NoError";
  switch("NoError")
  {
    case 0u:
      return result;
    case 1u:
      uint64_t result = "InvalidConnection";
      break;
    case 2u:
      uint64_t result = "NoConnectionForIdentifier";
      break;
    case 3u:
      uint64_t result = "NoMessageSenderConnection";
      break;
    case 4u:
      uint64_t result = "Timeout";
      break;
    case 5u:
      uint64_t result = "Unspecified";
      break;
    case 6u:
      uint64_t result = "MultipleWaitingClients";
      break;
    case 7u:
      uint64_t result = "AttemptingToWaitOnClosedConnection";
      break;
    case 8u:
      uint64_t result = "WaitingOnAlreadyDispatchedMessage";
      break;
    case 9u:
      uint64_t result = "AttemptingToWaitInsideSyncMessageHandling";
      break;
    case 0xAu:
      uint64_t result = "SyncMessageInterruptedWait";
      break;
    case 0xBu:
      uint64_t result = "CantWaitForSyncReplies";
      break;
    case 0xCu:
      uint64_t result = "FailedToEncodeMessageArguments";
      break;
    case 0xDu:
      uint64_t result = "FailedToDecodeReplyArguments";
      break;
    case 0xEu:
      uint64_t result = "FailedToFindReplyHandler";
      break;
    case 0xFu:
      uint64_t result = "FailedToAcquireBufferSpan";
      break;
    case 0x10u:
      uint64_t result = "FailedToAcquireReplyBufferSpan";
      break;
    case 0x11u:
      uint64_t result = "StreamConnectionEncodingError";
      break;
    default:
      uint64_t result = "";
      break;
  }
  return result;
}

unsigned int *WebKit::Daemon::Encoder::encodeFixedLengthData(unsigned int *result, void *__src, size_t __n)
{
  if (__n)
  {
    uint64_t v5 = result;
    size_t v7 = result[2];
    char v6 = (WTF::FastMalloc *)result[3];
    uint64_t v8 = (WTF::FastMalloc *)((char *)v6 + __n);
    if ((unint64_t)v6 + __n > v7)
    {
      unint64_t v9 = v7 + (v7 >> 2);
      if (v9 >= 0x10) {
        unint64_t v10 = v9 + 1;
      }
      else {
        unint64_t v10 = 16;
      }
      if (v10 <= (unint64_t)v8) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = (WTF::FastMalloc *)v10;
      }
      uint64_t result = (unsigned int *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)result, v11);
      char v6 = (WTF::FastMalloc *)v5[3];
    }
    if (v8 < v6)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t result = (unsigned int *)memcpy((char *)v6 + *(void *)v5, __src, __n);
      v5[3] = v8;
    }
  }
  return result;
}

void IPC::Connection::SyncMessageState::~SyncMessageState(IPC::Connection::SyncMessageState *this)
{
  unint64_t v2 = *((void *)this + 6);
  unint64_t v3 = *((void *)this + 7);
  int v4 = (atomic_uchar *volatile **)*((void *)this + 8);
  if (v2 > v3)
  {
    WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct(v4, &v4[3 * v3]);
    uint64_t v17 = *((void *)this + 8);
    char v6 = (atomic_uchar *volatile **)(v17 + 24 * *((void *)this + 6));
    uint64_t v5 = (atomic_uchar *volatile **)(v17 + 24 * *((unsigned int *)this + 18));
  }
  else
  {
    uint64_t v5 = &v4[3 * v3];
    char v6 = &v4[3 * v2];
  }
  WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct(v6, v5);
  uint64_t v8 = (WTF *)*((void *)this + 8);
  if (v8)
  {
    *((void *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v8, v7);
  }
  unint64_t v9 = *((void *)this + 2);
  unint64_t v10 = *((void *)this + 3);
  uint64_t v11 = (atomic_uchar *volatile **)*((void *)this + 4);
  if (v9 > v10)
  {
    WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct(v11, &v11[3 * v10]);
    uint64_t v18 = *((void *)this + 4);
    unint64_t v13 = (atomic_uchar *volatile **)(v18 + 24 * *((void *)this + 2));
    unint64_t v12 = (atomic_uchar *volatile **)(v18 + 24 * *((unsigned int *)this + 10));
  }
  else
  {
    unint64_t v12 = &v11[3 * v10];
    unint64_t v13 = &v11[3 * v9];
  }
  WTF::VectorDestructor<true,IPC::Connection::SyncMessageState::ConnectionAndIncomingMessage>::destruct(v13, v12);
  unsigned int v15 = (WTF *)*((void *)this + 4);
  if (v15)
  {
    *((void *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v15, v14);
  }
  uint64_t v16 = (atomic_uchar *volatile **)*((void *)this + 1);
  if (v16) {
    WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::deallocateTable(v16, v14);
  }
}

uint64_t WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::deallocateTable(atomic_uchar *volatile **a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    int v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != (atomic_uchar *volatile *)-1)
      {
        *int v4 = 0;
        if (v5)
        {
          char v6 = 0;
          atomic_uchar *volatile v7 = *v5;
          atomic_compare_exchange_strong_explicit(*v5, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
          if (v6) {
            MEMORY[0x19972E8D0](v7);
          }
          uint64_t v8 = *((void *)v7 + 1);
          uint64_t v9 = v8 - 1;
          *((void *)v7 + 1) = v8 - 1;
          if (v8 == 1)
          {
            uint64_t v15 = *((void *)v7 + 2);
            uint64_t v11 = *((void *)v7 + 3);
            *((void *)v7 + 3) = 0;
            BOOL v10 = v15 == 0;
          }
          else
          {
            BOOL v10 = 0;
            uint64_t v11 = 0;
          }
          int v12 = 1;
          atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
          if (v12 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v7);
          }
          if (!v9)
          {
            uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
            *(void *)uint64_t v13 = &unk_1EE9B37E8;
            *(void *)(v13 + 8) = v7;
            *(void *)(v13 + 16) = v11;
            *(unsigned char *)(v13 + 24) = v10;
            uint64_t v16 = v13;
            WTF::ensureOnMainRunLoop();
            if (v16) {
              (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
            }
          }
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    int v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        *int v4 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(IPC::Decoder *)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::CompletionHandler<void ()(IPC::Decoder *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    int v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        *int v4 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void IPC::MessageReceiveQueueMap::~MessageReceiveQueueMap(IPC::MessageReceiveQueueMap *this, void *a2)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v4 = *((unsigned int *)this + 6);
    if (v4 != -1) {
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v4])(&v5, (char *)this + 16);
    }
    *((_DWORD *)this + 6) = -1;
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::deallocateTable(v3, a2);
  }
  if (*(void *)this) {
    WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::deallocateTable(*(void *)this, a2);
  }
}

uint64_t WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 8;
    do
    {
      if (*(unsigned __int8 *)(v4 - 8) != 255)
      {
        uint64_t v5 = *(unsigned int *)(v4 + 8);
        if (v5 != -1) {
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v5])(&v7, v4);
        }
        *(_DWORD *)(v4 + 8) = -1;
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 16;
    do
    {
      if (*(unsigned __int8 *)(v4 - 16) != 255)
      {
        uint64_t v5 = *(unsigned int *)(v4 + 8);
        if (v5 != -1) {
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v5])(&v7, v4);
        }
        *(_DWORD *)(v4 + 8) = -1;
      }
      v4 += 32;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void IPC::WorkQueueMessageReceiverQueue::~WorkQueueMessageReceiverQueue(IPC::WorkQueueMessageReceiverQueue *this, void *a2)
{
  IPC::WorkQueueMessageReceiverQueue::~WorkQueueMessageReceiverQueue(this, a2);

  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
}

void WebKit::LogChannels::~LogChannels(WebKit::LogChannels *this, void *a2)
{
  *(void *)this = &unk_1EEA100F8;
  uint64_t v3 = (WTF *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EEA100F8;
  uint64_t v3 = (WTF *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }

  JUMPOUT(0x199740C10);
}

uint64_t WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::lookupForReinsert(uint64_t a1)
{
  if (qword_1EB35A480) {
    int v1 = *(_DWORD *)(qword_1EB35A480 - 8);
  }
  else {
    int v1 = 0;
  }
  unint64_t v2 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  unint64_t v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
  unint64_t v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
  unsigned int v5 = v1 & ((v4 >> 31) ^ v4);
  int v6 = 1;
  do
  {
    unsigned int v7 = v5;
    uint64_t v8 = *(void *)(qword_1EB35A480 + 16 * v5);
    unsigned int v5 = (v5 + v6++) & v1;
  }
  while (v8);
  return qword_1EB35A480 + 16 * v7;
}

_OWORD *WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::remove(_OWORD *result)
{
  *(void *)uint64_t result = -1;
  uint64_t v1 = qword_1EB35A480;
  ++*(_DWORD *)(qword_1EB35A480 - 16);
  if (v1) {
    int v2 = *(_DWORD *)(v1 - 12) - 1;
  }
  else {
    int v2 = -1;
  }
  *(_DWORD *)(v1 - 12) = v2;
  if (qword_1EB35A480)
  {
    unsigned int v3 = *(_DWORD *)(qword_1EB35A480 - 4);
    if (6 * *(_DWORD *)(qword_1EB35A480 - 12) < v3 && v3 >= 9) {
      return WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::rehash(v3 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::SerialFunctionDispatcher *,WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *>>,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::SerialFunctionDispatcher *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::SerialFunctionDispatcher *,IPC::Connection::SyncMessageState *,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<WTF::SerialFunctionDispatcher *>,WTF::HashTraits<IPC::Connection::SyncMessageState *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::SerialFunctionDispatcher *>>,WTF::SerialFunctionDispatcher *>(uint64_t a1)
{
  if (qword_1EB35A480)
  {
    unsigned int v1 = *(_DWORD *)(qword_1EB35A480 - 8);
    unint64_t v2 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
    unint64_t v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
    unint64_t v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
    uint64_t v5 = v1 & ((v4 >> 31) ^ v4);
    uint64_t v6 = *(void *)(qword_1EB35A480 + 16 * v5);
    if (v6 == a1) {
      return qword_1EB35A480 + 16 * v5;
    }
    int v8 = 1;
    while (v6)
    {
      uint64_t v5 = (v5 + v8) & v1;
      uint64_t v6 = *(void *)(qword_1EB35A480 + 16 * v5);
      ++v8;
      if (v6 == a1) {
        return qword_1EB35A480 + 16 * v5;
      }
    }
  }
  return 0;
}

void *WTF::HashTable<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>,WTF::HashTraits<WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  if (a1) {
    int v2 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v2 = 0;
  }
  unint64_t v3 = (~(*a2 << 32) + *a2) ^ ((unint64_t)(~(*a2 << 32) + *a2) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
  int v7 = 1;
  do
  {
    unsigned int v8 = v6;
    uint64_t v9 = *(void *)(a1 + 8 * v6);
    unsigned int v6 = (v6 + v7++) & v2;
  }
  while (v9);
  uint64_t result = (void *)(a1 + 8 * v8);
  void *result = 0;
  uint64_t v11 = *a2;
  *a2 = 0;
  void *result = v11;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::SyncMessageState::processIncomingMessage(IPC::Connection&,WTF::UniqueRef<IPC::Decoder> &)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA10120;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 8));
  return a1;
}

IPC::Decoder **WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::destroyAll(unint64_t *a1)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t result = (IPC::Decoder **)a1[2];
  if (v2 > v3)
  {
    if (v3)
    {
      uint64_t v6 = 8 * v3;
      do
      {
        uint64_t result = std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](result) + 1;
        v6 -= 8;
      }
      while (v6);
      uint64_t result = (IPC::Decoder **)a1[2];
      unint64_t v2 = *a1;
    }
    uint64_t v7 = *((unsigned int *)a1 + 6);
    if (v2 != v7)
    {
      result += v2;
      uint64_t v8 = 8 * v7 - 8 * v2;
      do
      {
        uint64_t result = std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](result) + 1;
        v8 -= 8;
      }
      while (v8);
    }
  }
  else if (v2 != v3)
  {
    result += v2;
    uint64_t v5 = 8 * v3 - 8 * v2;
    do
    {
      uint64_t result = std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](result) + 1;
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t WTF::Deque<WTF::UniqueRef<IPC::Encoder>,0ul>::~Deque(uint64_t a1, void *a2)
{
  WTF::Deque<WTF::UniqueRef<IPC::Encoder>,0ul>::destroyAll((unint64_t *)a1, a2);
  unint64_t v4 = *(WTF **)(a1 + 16);
  if (v4)
  {
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v4, v3);
  }
  return a1;
}

IPC::Encoder **WTF::Deque<WTF::UniqueRef<IPC::Encoder>,0ul>::destroyAll(unint64_t *a1, void *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t result = (IPC::Encoder **)a1[2];
  if (v3 > v4)
  {
    if (v4)
    {
      uint64_t v7 = 8 * v4;
      do
      {
        uint64_t result = std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](result, a2) + 1;
        v7 -= 8;
      }
      while (v7);
      uint64_t result = (IPC::Encoder **)a1[2];
      unint64_t v3 = *a1;
    }
    uint64_t v8 = *((unsigned int *)a1 + 6);
    if (v3 != v8)
    {
      result += v3;
      uint64_t v9 = 8 * v8 - 8 * v3;
      do
      {
        uint64_t result = std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](result, a2) + 1;
        v9 -= 8;
      }
      while (v9);
    }
  }
  else if (v3 != v4)
  {
    result += v3;
    uint64_t v6 = 8 * v4 - 8 * v3;
    do
    {
      uint64_t result = std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](result, a2) + 1;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

unsigned int *WTF::Vector<IPC::Connection::PendingSyncReply,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, void *a2)
{
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v6 = 32 * v3;
    uint64_t v7 = (IPC::Decoder **)(*(void *)a1 + 8);
    do
    {
      uint64_t v7 = std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](v7) + 4;
      v6 -= 32;
    }
    while (v6);
  }
  unint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reinsert(void *a1, void *a2)
{
  uint64_t v3 = IPC::connectionMap(void)::map;
  if (IPC::connectionMap(void)::map) {
    int v4 = *(_DWORD *)(IPC::connectionMap(void)::map - 8);
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = (*a1 + ~(*a1 << 32)) ^ ((*a1 + ~(*a1 << 32)) >> 22);
  unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((unint64_t)(v5 + ~(v5 << 13)) >> 8));
  unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  unsigned int v8 = v4 & ((v7 >> 31) ^ v7);
  int v9 = 1;
  do
  {
    unsigned int v10 = v8;
    uint64_t v11 = (void *)(IPC::connectionMap(void)::map + 24 * v8);
    unsigned int v8 = (v8 + v9++) & v4;
  }
  while (*v11);
  unsigned int v12 = v10;
  uint64_t v13 = IPC::connectionMap(void)::map + 24 * v10;
  uint64_t v16 = *(atomic_uchar **)(v13 + 8);
  uint64_t v15 = (void *)(v13 + 8);
  unint64_t v14 = v16;
  void *v15 = 0;
  if (v16) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v14, a2);
  }
  *uint64_t v11 = *a1;
  void *v15 = a1[1];
  uint64_t v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *(void *)(v3 + 24 * v12 + 16) = v17;
  return v11;
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::remove(void *a1, void *a2)
{
  if (IPC::connectionMap(void)::map)
  {
    unint64_t v2 = (void *)(IPC::connectionMap(void)::map + 24 * *(unsigned int *)(IPC::connectionMap(void)::map - 4));
    if (v2 == a1) {
      return;
    }
  }
  else
  {
    if (!a1) {
      return;
    }
    unint64_t v2 = 0;
  }
  if (v2 != a1) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1, a2);
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(void *a1, void *a2)
{
  uint64_t v3 = (atomic_uchar *)a1[1];
  *a1 = -1;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  ++*(_DWORD *)(IPC::connectionMap(void)::map - 16);
  if (IPC::connectionMap(void)::map) {
    int v4 = *(_DWORD *)(IPC::connectionMap(void)::map - 12) - 1;
  }
  else {
    int v4 = -1;
  }
  *(_DWORD *)(IPC::connectionMap(void)::map - 12) = v4;
  if (IPC::connectionMap(void)::map)
  {
    unsigned int v5 = *(_DWORD *)(IPC::connectionMap(void)::map - 4);
    if (6 * *(_DWORD *)(IPC::connectionMap(void)::map - 12) < v5 && v5 >= 9)
    {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v5 >> 1);
    }
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(void *a1)
{
  if (!IPC::connectionMap(void)::map) {
    return 0;
  }
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1);
  if (!result)
  {
    if (IPC::connectionMap(void)::map) {
      return (uint64_t *)(IPC::connectionMap(void)::map + 24 * *(unsigned int *)(IPC::connectionMap(void)::map - 4));
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<IPC::Connection>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<IPC::Connection>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(void *a1)
{
  uint64_t v1 = IPC::connectionMap(void)::map;
  if (!IPC::connectionMap(void)::map) {
    return 0;
  }
  int v3 = *(_DWORD *)(IPC::connectionMap(void)::map - 8);
  unsigned int v4 = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a1) & v3;
  uint64_t result = (uint64_t *)(v1 + 24 * v4);
  uint64_t v6 = *result;
  if (*result != *a1)
  {
    int v7 = 1;
    while (v6)
    {
      unsigned int v4 = (v4 + v7) & v3;
      uint64_t result = (uint64_t *)(v1 + 24 * v4);
      uint64_t v6 = *result;
      ++v7;
      if (*result == *a1) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::invalidate(void)::$_1,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA10148;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::invalidate(void)::$_1,void>::~CallableWrapper(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA10148;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::Detail::CallableWrapper<IPC::Connection::invalidate(void)::$_1,void>::call(uint64_t a1)
{
}

uint64_t WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,unsigned int>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,unsigned int,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(uint64_t *a1, long long *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= 2 * v5);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(24 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v5;
    do
    {
      uint64_t v13 = (long long *)(v4 + 24 * v10);
      if ((unint64_t)(*(void *)v13 + 1) >= 2)
      {
        uint64_t v14 = *a1;
        if (*a1) {
          unsigned int v15 = *(_DWORD *)(v14 - 8);
        }
        else {
          unsigned int v15 = 0;
        }
        int v16 = WTF::ASCIILiteralHash::hash((WTF::ASCIILiteralHash *)(v4 + 24 * v10), v9);
        int v17 = 0;
        do
        {
          unsigned int v18 = v16 & v15;
          int v19 = (void *)(v14 + 24 * (v16 & v15));
          int v16 = ++v17 + (v16 & v15);
        }
        while (*v19);
        long long v20 = *v13;
        v19[2] = *((void *)v13 + 2);
        *(_OWORD *)int v19 = v20;
        if (v13 == a2) {
          uint64_t v11 = v14 + 24 * v18;
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::sendMessageImpl(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<WTF::Thread::QOS>)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA10170;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 8));
  return a1;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::sendMessageWithAsyncReply(WTF::UniqueRef<IPC::Encoder> &&,IPC::ConnectionAsyncReplyHandler,WTF::OptionSet<IPC::SendOption>,std::optional<WTF::Thread::QOS>)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EEA10198;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::sendMessageWithAsyncReply(WTF::UniqueRef<IPC::Encoder> &&,IPC::ConnectionAsyncReplyHandler,WTF::OptionSet<IPC::SendOption>,std::optional<WTF::Thread::QOS>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EEA10198;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::sendMessageWithAsyncReply(WTF::UniqueRef<IPC::Encoder> &&,IPC::ConnectionAsyncReplyHandler,WTF::OptionSet<IPC::SendOption>,std::optional<WTF::Thread::QOS>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v1 + 16))(v1, 0);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

unint64_t *WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::remove(unint64_t *result, unint64_t a2)
{
  if (result[1] != a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = result[2];
    unsigned int v5 = std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(v4 + 8 * a2));
    if (*v3 > a2)
    {
      uint64_t result = (unint64_t *)memmove(v5, v5 + 1, v4 + 8 * v3[1] - (void)(v5 + 1));
      v3[1] = (v3[1] + *((unsigned int *)v3 + 6) - 1) % *((unsigned int *)v3 + 6);
    }
    else
    {
      uint64_t result = (unint64_t *)memmove((void *)(v4 + 8 * *v3 + 8), (const void *)(v4 + 8 * *v3), (size_t)v5 - v4 + -8 * *v3);
      unint64_t *v3 = (*v3 + 1) % *((unsigned int *)v3 + 6);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::waitForMessage(IPC::MessageName,unsigned long long,IPC::Timeout,WTF::OptionSet<IPC::WaitForOption>)::$_0,void,IPC::MessageName,unsigned long long>::call(uint64_t result, int a2, uint64_t a3)
{
  BOOL v3 = **(unsigned __int16 **)(result + 16) == a2 && **(void **)(result + 24) == a3;
  **(unsigned char **)(result + 8) |= v3;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EEA100B0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EEA101D8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9UniqueRefIN3IPC7DecoderEEENSA_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSC_SD_EEEEEvRSF_OT_EUlRSK_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEOST_EEEDcSK_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9UniqueRefIN3IPC7DecoderEEENSA_5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSC_SD_EEEEEvRSF_OT_EUlRSK_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SD_EEEOST_EEEDcSK_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::dispatchDidReceiveInvalidMessage(IPC::MessageName,int)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA101F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::dispatchDidReceiveInvalidMessage(IPC::MessageName,int)::$_0,void>::~CallableWrapper(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA101F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::dispatchDidReceiveInvalidMessage(IPC::MessageName,int)::$_0,void>::call(uint64_t result)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*(void *)(result + 8) + 33));
  if (v1) {
    return (*(uint64_t (**)(void))(**(void **)(*(void *)(result + 8) + 8) + 48))(*(void *)(*(void *)(result + 8) + 8));
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::dispatchDidCloseAndInvalidate(void)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA10220;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::dispatchDidCloseAndInvalidate(void)::$_0,void>::~CallableWrapper(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA10220;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::dispatchDidCloseAndInvalidate(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 8);
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 40))(result);
    uint64_t v3 = *(void *)(a1 + 8);
    return IPC::Connection::invalidate(v3);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA10248;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_0,void>::~CallableWrapper(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EEA10248;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

void WTF::Detail::CallableWrapper<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 56))(v2);
    uint64_t v3 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      uint64_t v5 = *(void *)(a1 + 8);
      int v6 = 134218240;
      uint64_t v7 = v5;
      __int16 v8 = 2048;
      uint64_t v9 = 50000;
      _os_log_fault_impl(&dword_1985F2000, v3, OS_LOG_TYPE_FAULT, "%p - Connection::enqueueIncomingMessage: Over %zu incoming messages have been queued without the main thread processing them, terminating the remote process as it seems to be misbehaving", (uint8_t *)&v6, 0x16u);
    }
    uint64_t v4 = (os_unfair_lock_s *)(*(void *)(a1 + 8) + 104);
    os_unfair_lock_lock(v4);
    WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::clear(*(void *)(a1 + 8) + 112);
    os_unfair_lock_unlock(v4);
  }
}

WTF *WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::clear(uint64_t a1)
{
  WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::destroyAll((unint64_t *)a1);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t result = *(WTF **)(a1 + 16);
  if (result)
  {
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_1,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA10270;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::enqueueIncomingMessage(WTF::UniqueRef<IPC::Decoder>)::$_2,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA10298;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::dispatchIncomingMessages(void)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EEA102C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 8));
  return a1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1, v4, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v7;
    do
    {
      int v16 = (uint64_t *)(v6 + 16 * v13);
      uint64_t v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          uint64_t v20 = *a1;
          if (*a1) {
            int v21 = *(_DWORD *)(v20 - 8);
          }
          else {
            int v21 = 0;
          }
          unint64_t v22 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          unsigned int v25 = v21 & ((v24 >> 31) ^ v24);
          int v26 = 1;
          do
          {
            unsigned int v27 = v25;
            uint64_t v28 = *(void *)(v20 + 16 * v25);
            unsigned int v25 = (v25 + v26++) & v21;
          }
          while (v28);
          uint64_t v29 = (uint64_t *)(v20 + 16 * v27);
          uint64_t v30 = v29[1];
          v29[1] = 0;
          if (v30) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
          *uint64_t v29 = *v16;
          uint64_t v31 = v6 + 16 * v13;
          uint64_t v32 = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = 0;
          v29[1] = v32;
          uint64_t v33 = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = 0;
          if (v33) {
            (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
          }
          if (v16 == a3) {
            uint64_t v14 = v29;
          }
        }
        else
        {
          uint64_t v18 = v6 + 16 * v13;
          uint64_t v19 = *(void *)(v18 + 8);
          *(void *)(v18 + 8) = 0;
          if (v19) {
            (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>><void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::remove(uint64_t *a1, void *a2)
{
  if (*a1)
  {
    uint64_t v2 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
    if ((void *)v2 != a2) {
      goto LABEL_4;
    }
    return 0;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v2 = 0;
LABEL_4:
  if ((void *)v2 != a2)
  {
    uint64_t v3 = a2[1];
    *a2 = -1;
    a2[1] = 0;
    if (v3)
    {
      uint64_t v11 = a1;
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      a1 = v11;
    }
    ++*(_DWORD *)(*a1 - 16);
    uint64_t v4 = *a1;
    if (*a1) {
      int v5 = *(_DWORD *)(v4 - 12) - 1;
    }
    else {
      int v5 = -1;
    }
    *(_DWORD *)(v4 - 12) = v5;
    uint64_t v6 = *a1;
    if (*a1)
    {
      unsigned int v8 = 6 * *(_DWORD *)(v6 - 12);
      unsigned int v9 = *(_DWORD *)(v6 - 4);
      if (v8 < v9 && v9 >= 9) {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(std::unique_ptr<IPC::Decoder> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::unique_ptr<IPC::Decoder> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::unique_ptr<IPC::Decoder> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1, v9 >> 1, 0);
      }
    }
  }
  return 1;
}

uint64_t IPC::Decoder::Decoder(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 250937344;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = a4;
  *(_DWORD *)(result + 72) = -1;
  if (a4 == -1)
  {
    uint64_t v7 = result;
    IPC::Decoder::markInvalid((IPC::Decoder *)result);
    return v7;
  }
  else
  {
    unint64_t v4 = ((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) - a2;
    if (a3 >= v4
      && a3 - v4 >= 2
      && (int v5 = (unsigned __int16 *)((a2 + 1) & 0xFFFFFFFFFFFFFFFELL), *(void *)(result + 16) = v5 + 1, a2)
      && (unsigned int v6 = *v5, v6 < 0xEF5))
    {
      *(_WORD *)(result + 50) = v6;
    }
    else
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
    }
  }
  return result;
}

uint64_t IPC::Decoder::unwrapForTesting@<X0>(IPC::Decoder *this@<X0>, IPC::Decoder *a2@<X1>, IPC::Decoder **a3@<X8>)
{
  v10[0] = *((void *)this + 4);
  v10[1] = *((void *)this + 5);
  uint64_t v7 = 0;
  *((void *)this + 4) = 0;
  unsigned int v8 = 0;
  *((void *)this + 5) = 0;
  WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, a2);
  IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(this, (uint64_t)&v7);
  if (v9)
  {
    IPC::Decoder::create(v8, v7, v10, a3);
    *((unsigned char *)*a3 + 49) = 1;
  }
  else
  {
    *a3 = 0;
  }
  return WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v5);
}

uint64_t IPC::Encoder::setFullySynchronousModeForTesting(uint64_t this)
{
  **(unsigned char **)(this + 528) |= 4u;
  return this;
}

IPC::Encoder *IPC::Encoder::wrapForTesting(IPC::Encoder *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *(unsigned char **)(*a2 + 528);
  *unint64_t v4 = *v4 & 0xFC | 1;
  size_t v5 = *(void *)(v3 + 544);
  if (*(void *)(v3 + 536) < v5)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = (uint64_t)result;
    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(result, v4, v5);
    uint64_t v7 = *a2;
    unint64_t v8 = *(void *)(*a2 + 552);
    unint64_t v13 = v8;
    size_t v9 = *(unsigned int *)(v7 + 564);
    int v14 = *(_DWORD *)(v7 + 560);
    int v15 = v9;
    v16[0] = 0;
    *(void *)(v7 + 552) = 0;
    v16[1] = 0;
    *(void *)(v7 + 560) = 0;
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v10);
    IPC::Encoder::reserve(v6, v9);
    if (v9)
    {
      uint64_t v12 = 4 * v9;
      do
      {
        IPC::Encoder::addAttachment(v6, v8);
        v8 += 4;
        v12 -= 4;
      }
      while (v12);
    }
    return (IPC::Encoder *)WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v11);
  }
  return result;
}

uint64_t IPC::Encoder::reserve(uint64_t this, size_t a2)
{
  size_t v2 = *(void *)(this + 536);
  if (v2 >= a2) {
    return this;
  }
  uint64_t v3 = this;
  uint64_t v4 = (2 * v2 + 4095) & 0x7FFFFFFFFFFFF000;
  do
  {
    size_t v5 = v4;
    v4 *= 2;
  }
  while (v5 < a2);
  uint64_t v6 = mmap(0, v5, 3, 4098, -1, 0);
  if (v6 == (void *)-1)
  {
    __break(0xC471u);
    goto LABEL_11;
  }
  size_t v7 = *(void *)(v3 + 544);
  if (*(void *)(v3 + 536) < v7)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v5 < v7)
  {
LABEL_12:
    this = 831;
    __break(0xC471u);
    return this;
  }
  unint64_t v8 = v6;
  memcpy(v6, *(const void **)(v3 + 528), v7);
  this = *(void *)(v3 + 528);
  if (this != v3 + 16) {
    this = munmap((void *)this, *(void *)(v3 + 536));
  }
  *(void *)(v3 + 528) = v8;
  *(void *)(v3 + 536) = v5;
  return this;
}

uint64_t IPC::Encoder::operator<<<unsigned long long &>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v5 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *uint64_t v4 = v3;
    return (uint64_t)a1;
  }
  return result;
}

uint64_t *IPC::MessageReceiveQueueMap::remove(uint64_t *a1, unsigned __int8 *a2)
{
  if (!a2[1]) {
    return (uint64_t *)std::optional<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::operator=[abi:sn180100]<decltype(nullptr),void>((uint64_t)(a1 + 2));
  }
  uint64_t v3 = *a2;
  unsigned __int8 v10 = *a2;
  if (a2[16])
  {
    uint64_t v4 = *((void *)a2 + 1);
    v9[0] = v3;
    v9[1] = v4;
    uint64_t result = (uint64_t *)WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>>,std::pair<unsigned char,unsigned long long>>(a1, (unsigned __int8 *)v9);
    if (*a1)
    {
      uint64_t v6 = *a1 + 32 * *(unsigned int *)(*a1 - 4);
      if ((uint64_t *)v6 == result) {
        return result;
      }
    }
    else
    {
      if (!result) {
        return result;
      }
      uint64_t v6 = 0;
    }
    if ((uint64_t *)v6 != result) {
      return (uint64_t *)WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::remove((uint64_t)a1, (uint64_t)result);
    }
  }
  else
  {
    uint64_t result = (uint64_t *)WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned char>>,unsigned char>(a1 + 1, &v10);
    uint64_t v7 = a1[1];
    if (v7)
    {
      unint64_t v8 = (uint64_t *)(v7 + 24 * *(unsigned int *)(v7 - 4));
      if (v8 == result) {
        return result;
      }
    }
    else
    {
      if (!result) {
        return result;
      }
      unint64_t v8 = 0;
    }
    if (v8 != result) {
      return WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::remove(a1 + 1, (uint64_t)result);
    }
  }
  return result;
}

uint64_t std::optional<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::operator=[abi:sn180100]<decltype(nullptr),void>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      if (v2 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v2])(&v4, a1);
      }
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      *(void *)a1 = 0;
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void IPC::MessageReceiverMap::~MessageReceiverMap(IPC::MessageReceiverMap *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::deallocateTable(v3, a2);
  }
  if (*(void *)this) {
    WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::deallocateTable(*(void *)this, a2);
  }
}

unsigned int *IPC::MessageReceiverMap::removeMessageReceiver(uint64_t *a1, unsigned __int8 a2)
{
  unsigned __int8 v5 = a2;
  uint64_t result = (unsigned int *)WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<IPC::ReceiverName>>,IPC::ReceiverName>(a1, &v5);
  if (*a1)
  {
    uint64_t v4 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
    if ((unsigned int *)v4 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v4 = 0;
  }
  if ((unsigned int *)v4 != result) {
    return WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::remove(a1, result);
  }
  return result;
}

unsigned __int8 *IPC::MessageReceiverMap::removeMessageReceiver(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  v8[0] = a2;
  v8[1] = a3;
  uint64_t result = WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>>,std::pair<IPC::ReceiverName,unsigned long long>>((uint64_t *)(a1 + 8), (unsigned __int8 *)v8);
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = (unsigned __int8 *)(v6 + 24 * *(unsigned int *)(v6 - 4));
    if (v7 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v7 = 0;
  }
  if (v7 != result) {
    return WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::remove(v4, result);
  }
  return result;
}

WTF *IPC::MessageReceiverMap::removeMessageReceiver(IPC::MessageReceiverMap *this, IPC::MessageReceiver *a2)
{
  unsigned int v40 = 0;
  uint64_t v41 = 0;
  uint64_t v4 = *(void *)this;
  if (!*(void *)this)
  {
    uint64_t v7 = 0;
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = *(unsigned int *)(v4 - 4);
  uint64_t v6 = (unsigned __int8 *)(v4 + 16 * v5);
  if (!*(_DWORD *)(v4 - 12))
  {
    uint64_t v7 = (unsigned __int8 *)(v4 + 16 * v5);
LABEL_10:
    uint64_t v6 = (unsigned __int8 *)(v4 + 16 * v5);
    goto LABEL_11;
  }
  uint64_t v7 = *(unsigned __int8 **)this;
  if (v5)
  {
    uint64_t v8 = 16 * v5;
    uint64_t v7 = *(unsigned __int8 **)this;
    while (*v7 >= 0xFEu)
    {
      v7 += 16;
      v8 -= 16;
      if (!v8)
      {
        uint64_t v7 = v6;
        break;
      }
    }
  }
LABEL_11:
  if (v4) {
    size_t v9 = (unsigned __int8 *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  }
  else {
    size_t v9 = 0;
  }
  if (v9 != v7)
  {
    unsigned __int8 v10 = 0;
    unsigned int v11 = 0;
    do
    {
      uint64_t v12 = *((void *)v7 + 1);
      if (v12 && *(IPC::MessageReceiver **)(v12 + 8) == a2)
      {
        if (v11 == v41)
        {
          unint64_t v13 = (unsigned __int8 *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, (WTF *)(v11 + 1), (unint64_t)v7);
          unsigned int v11 = HIDWORD(v41);
          unsigned __int8 v10 = (unsigned __int8 *)v40;
          int v14 = (unsigned __int8 *)v40 + HIDWORD(v41);
        }
        else
        {
          int v14 = &v10[v11];
          unint64_t v13 = v7;
        }
        ++v11;
        *int v14 = *v13;
        HIDWORD(v41) = v11;
      }
      int v15 = v7 + 16;
      uint64_t v7 = v6;
      if (v15 != v6)
      {
        uint64_t v7 = v15;
        while (*v7 >= 0xFEu)
        {
          v7 += 16;
          if (v7 == v6)
          {
            uint64_t v7 = v6;
            break;
          }
        }
      }
    }
    while (v7 != v9);
    if (v11)
    {
      uint64_t v16 = v11;
      do
      {
        unsigned __int8 v17 = *v10++;
        IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)this, v17);
        --v16;
      }
      while (v16);
    }
  }
  long long v38 = 0;
  uint64_t v39 = 0;
  uint64_t v18 = (unsigned __int8 *)*((void *)this + 1);
  uint64_t v19 = WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::begin(v18);
  int v21 = v19;
  unint64_t v22 = v20;
  if (v18) {
    unint64_t v23 = &v18[24 * *((unsigned int *)v18 - 1)];
  }
  else {
    unint64_t v23 = 0;
  }
  if (v23 != v19)
  {
    unint64_t v24 = 0;
    unsigned int v25 = 0;
    do
    {
      uint64_t v26 = *((void *)v21 + 2);
      if (v26 && *(IPC::MessageReceiver **)(v26 + 8) == a2)
      {
        uint64_t v27 = *((void *)v21 + 1);
        *(void *)&long long v37 = *v21;
        *((void *)&v37 + 1) = v27;
        if (v25 == v39)
        {
          uint64_t v28 = (_OWORD *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v38, v25 + 1, (unint64_t)&v37);
          int v29 = HIDWORD(v39);
          unint64_t v24 = v38;
          *((_OWORD *)v38 + HIDWORD(v39)) = *v28;
        }
        else
        {
          *((_OWORD *)v24 + v25) = v37;
          int v29 = HIDWORD(v39);
        }
        unsigned int v25 = v29 + 1;
        HIDWORD(v39) = v25;
      }
      while (1)
      {
        v21 += 24;
        if (v21 == v22) {
          break;
        }
        int v30 = *v21;
        BOOL v32 = v30 == 255 && *((void *)v21 + 1) == 0;
        if (v30 != 254 && !v32) {
          goto LABEL_54;
        }
      }
      int v21 = v22;
LABEL_54:
      ;
    }
    while (v21 != v23);
    if (v25)
    {
      unint64_t v34 = (unsigned __int8 *)v24 + 16 * v25;
      uint64_t v35 = v24;
      do
      {
        IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)this, *(unsigned __int8 *)v35, *((void *)v35 + 1));
        uint64_t v35 = (WTF *)((char *)v35 + 16);
      }
      while (v35 != (WTF *)v34);
    }
    if (v24)
    {
      long long v38 = 0;
      LODWORD(v39) = 0;
      WTF::fastFree(v24, v20);
    }
  }
  uint64_t result = v40;
  if (v40) {
    return (WTF *)WTF::fastFree(v40, v20);
  }
  return result;
}

unsigned __int8 *IPC::MessageReceiverMap::invalidate(IPC::MessageReceiverMap *this, void *a2)
{
  uint64_t v3 = *(void *)this;
  if (!v3)
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
    goto LABEL_10;
  }
  uint64_t v4 = *(unsigned int *)(v3 - 4);
  uint64_t v5 = (unsigned __int8 *)(v3 + 16 * v4);
  if (!*(_DWORD *)(v3 - 12))
  {
    uint64_t v6 = (unsigned __int8 *)(v3 + 16 * v4);
LABEL_10:
    uint64_t v5 = (unsigned __int8 *)(v3 + 16 * v4);
    goto LABEL_11;
  }
  uint64_t v6 = (unsigned __int8 *)v3;
  if (v4)
  {
    uint64_t v7 = 16 * v4;
    uint64_t v6 = (unsigned __int8 *)v3;
    while (*v6 >= 0xFEu)
    {
      v6 += 16;
      v7 -= 16;
      if (!v7)
      {
        uint64_t v6 = v5;
        break;
      }
    }
  }
LABEL_11:
  if (v3) {
    uint64_t v8 = (unsigned __int8 *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  }
  else {
    uint64_t v8 = 0;
  }
  while (v6 != v8)
  {
    size_t v9 = v6 + 16;
    uint64_t v6 = v5;
    if (v9 != v5)
    {
      uint64_t v6 = v9;
      while (*v6 >= 0xFEu)
      {
        v6 += 16;
        if (v6 == v5)
        {
          uint64_t v6 = v5;
          break;
        }
      }
    }
  }
  if (v3)
  {
    *(void *)this = 0;
    WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::deallocateTable(v3, a2);
  }
  unsigned __int8 v10 = (unsigned __int8 *)*((void *)this + 1);
  uint64_t result = WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::begin(v10);
  if (v10) {
    unint64_t v13 = &v10[24 * *((unsigned int *)v10 - 1)];
  }
  else {
    unint64_t v13 = 0;
  }
  if (v13 != result)
  {
    while (1)
    {
      result += 24;
      if (result == v12)
      {
        uint64_t result = v12;
LABEL_39:
        if (result == v13) {
          break;
        }
      }
      else
      {
        int v14 = *result;
        BOOL v16 = v14 == 255 && *((void *)result + 1) == 0;
        if (v14 != 254 && !v16) {
          goto LABEL_39;
        }
      }
    }
  }
  if (v10)
  {
    *((void *)this + 1) = 0;
    return (unsigned __int8 *)WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::deallocateTable((uint64_t)v10, v12);
  }
  return result;
}

BOOL IPC::MessageSender::sendMessageWithAsyncReply(uint64_t a1, IPC::Encoder **a2, uint64_t *a3, char a4)
{
  uint64_t v7 = (atomic_uchar *volatile *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  uint64_t v8 = (os_unfair_lock_s *)v7;
  if (v7)
  {
    char v9 = 0;
    atomic_uchar *volatile v10 = *v7;
    int v11 = 1;
    atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
    if (v9) {
      MEMORY[0x19972E8D0](v10);
    }
    ++*((void *)v10 + 1);
    atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
    if (v11 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
    }
  }
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  *a3 = 0;
  v27[0] = v12;
  v27[1] = v13;
  int v14 = IPC::Connection::sendMessageWithAsyncReply(v8, a2, v27, a4, 0);
  uint64_t v15 = v27[0];
  v27[0] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  if (v8)
  {
    char v16 = 0;
    uint64_t v17 = *(void *)&v8->_os_unfair_lock_opaque;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v16, 1u, memory_order_acquire, memory_order_acquire);
    if (v16) {
      MEMORY[0x19972E8D0](v17);
    }
    uint64_t v18 = *(void *)(v17 + 8);
    uint64_t v19 = v18 - 1;
    *(void *)(v17 + 8) = v18 - 1;
    if (v18 == 1)
    {
      uint64_t v26 = *(void *)(v17 + 16);
      uint64_t v21 = *(void *)(v17 + 24);
      *(void *)(v17 + 24) = 0;
      BOOL v20 = v26 == 0;
    }
    else
    {
      BOOL v20 = 0;
      uint64_t v21 = 0;
    }
    int v22 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
    if (v22 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v17);
    }
    if (!v19)
    {
      uint64_t v23 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v23 = &unk_1EE9B37E8;
      *(void *)(v23 + 8) = v17;
      *(void *)(v23 + 16) = v21;
      *(unsigned char *)(v23 + 24) = v20;
      uint64_t v28 = v23;
      WTF::ensureOnMainRunLoop();
      uint64_t v24 = v28;
      uint64_t v28 = 0;
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      }
    }
  }
  return v14 == 0;
}

void IPC::MessageSender::performSendWithoutUsingIPCConnection()
{
}

void IPC::MessageSender::performSendWithAsyncReplyWithoutUsingIPCConnection()
{
}

void *IPC::SharedBufferReference::SharedBufferReference(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (!*(unsigned char *)(a2 + 32)) {
    return a1;
  }
  if (!*(void *)a2)
  {
    uint64_t v6 = (WebCore::SharedBuffer *)WTF::fastMalloc((WTF *)0x38);
    WebCore::SharedBuffer::SharedBuffer(v6);
    uint64_t v8 = (unsigned int *)a1[1];
    a1[1] = v6;
    if (v8) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v8, v7);
    }
    return a1;
  }
  if (!*(unsigned char *)(a2 + 24)) {
    return a1;
  }
  WebCore::SharedMemory::map();
  uint64_t result = v9;
  if (!v9) {
    return a1;
  }
  if (*(unsigned char *)(a2 + 32))
  {
    if (v9[1] < *(void *)a2)
    {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v9);
    }
    else
    {
      *a1 = *(void *)a2;
      uint64_t v5 = (unsigned int *)a1[2];
      a1[2] = v9;
      if (v5) {
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v5);
      }
    }
    return a1;
  }
  __break(1u);
  return result;
}

void IPC::SharedBufferReference::serializableBuffer(IPC::SharedBufferReference *this@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)this)
  {
    uint64_t v4 = (atomic_uint *)*((void *)this + 2);
    if (v4)
    {
      atomic_fetch_add(v4, 1u);
      uint64_t v7 = (unsigned int *)v4;
    }
    else
    {
      uint64_t v5 = (atomic_uint *)*((void *)this + 1);
      if (v5)
      {
        atomic_fetch_add(v5, 1u);
        WebCore::SharedMemory::copyBuffer();
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v5, v6);
      }
      else
      {
        WebCore::SharedMemory::copyBuffer();
      }
    }
    uint64_t v8 = *(void *)this;
    WebCore::SharedMemory::createHandle();
    std::__optional_destruct_base<IPC::SharedBufferReference::SerializableBuffer,false>::__optional_destruct_base[abi:sn180100]<IPC::SharedBufferReference::SerializableBuffer>((uint64_t)a2, (uint64_t)&v8);
    if (v10) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v9);
    }
    if (v7) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v7);
    }
  }
  else if (*((void *)this + 1))
  {
    uint64_t v8 = 0;
    v9[0] = 0;
    char v10 = 0;
    std::__optional_destruct_base<IPC::SharedBufferReference::SerializableBuffer,false>::__optional_destruct_base[abi:sn180100]<IPC::SharedBufferReference::SerializableBuffer>((uint64_t)a2, (uint64_t)&v8);
    if (v10) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v9);
    }
  }
  else
  {
    *a2 = 0;
    a2[32] = 0;
  }
}

unsigned int *IPC::SharedBufferReference::unsafeBuffer@<X0>(unsigned int *this@<X0>, uint64_t *a2@<X8>)
{
  if (*(void *)this)
  {
    if (*((void *)this + 1) || (uint64_t v2 = (atomic_uint *)*((void *)this + 2)) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1994AB5D4);
    }
    goto LABEL_4;
  }
  uint64_t v2 = (atomic_uint *)*((void *)this + 2);
  if (v2)
  {
LABEL_4:
    atomic_fetch_add(v2, 1u);
    WebCore::SharedMemory::createSharedBuffer((WebCore::SharedMemory *)v2);
    return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)v2);
  }
  uint64_t v3 = (atomic_uint *)*((void *)this + 1);
  if (v3)
  {
    atomic_fetch_add(v3, 1u);
    WebCore::FragmentedSharedBuffer::makeContiguous(a2, (WebCore::FragmentedSharedBuffer *)v3);
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v3, v4);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t IPC::SharedBufferReference::span(IPC::SharedBufferReference *this)
{
  if (*(void *)this)
  {
    if (*((void *)this + 1) || (uint64_t v2 = *((void *)this + 2)) == 0)
    {
      __break(0xC471u);
      goto LABEL_21;
    }
LABEL_6:
    if (*(void *)(v2 + 8) >= *(void *)this) {
      return *(void *)(v2 + 16);
    }
    goto LABEL_18;
  }
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    goto LABEL_6;
  }
  uint64_t v4 = *((void *)this + 1);
  if (!v4) {
    return 0;
  }
  if (!*(unsigned char *)(v4 + 40))
  {
    WebCore::FragmentedSharedBuffer::makeContiguous((uint64_t *)&v9, *((WebCore::FragmentedSharedBuffer **)this + 1));
    uint64_t v4 = (uint64_t)v9;
    char v9 = 0;
    uint64_t v6 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = v4;
    if (v6)
    {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v6, v5);
      uint64_t v8 = v9;
      char v9 = 0;
      if (v8) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v8, v7);
      }
      uint64_t v4 = *((void *)this + 1);
    }
    if (v4 && !*(unsigned char *)(v4 + 40))
    {
      __break(0xC471u);
LABEL_21:
      JUMPOUT(0x1994AB674);
    }
  }
  uint64_t result = WebCore::SharedBuffer::data((WebCore::SharedBuffer *)v4);
  if (*(void *)(v4 + 48) < *(void *)this)
  {
LABEL_18:
    __break(1u);
    return 0;
  }
  return result;
}

unsigned int *IPC::SharedBufferReference::sharedCopy@<X0>(unsigned int *this@<X0>, void *a2@<X8>)
{
  if (*(void *)this)
  {
    IPC::SharedBufferReference::unsafeBuffer(this, (uint64_t *)&v4);
    uint64_t v2 = v4;
    WebCore::SharedMemory::copyBuffer();
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v2, v3);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS9_NS_14default_deleteIS9_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSA_SE_EEEOST_EEEDcSL_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5)
  {
    if (v5 != -1) {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v5])(&v6, v4);
    }
    *(void *)uint64_t v4 = *a3;
    *(_DWORD *)(v4 + 8) = 0;
  }
  else
  {
    *a2 = *a3;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<IPC::MessageReceiveQueueMap::get(IPC::Decoder const&)::$_0,IPC::MessageReceiveQueueMap::get(IPC::Decoder const&)::$_1> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,IPC::MessageReceiveQueue *,std::unique_ptr<std::__variant_detail::_Trait>> const&>(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (unsigned int **)(a1 + 16);
    do
    {
      if (*((unsigned __int8 *)v4 - 16) != 254)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (unsigned int **)(a1 + 8);
    do
    {
      if (*((unsigned __int8 *)v4 - 8) != 254)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::__optional_destruct_base<IPC::SharedBufferReference::SerializableBuffer,false>::__optional_destruct_base[abi:sn180100]<IPC::SharedBufferReference::SerializableBuffer>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    WTF::MachSendRight::MachSendRight();
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(unsigned char *)(a1 + 32) = 1;
  return a1;
}

unsigned char *WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::reinsert(uint64_t a1, unsigned char *a2)
{
  int v4 = *a2;
  if (a1) {
    unsigned int v5 = *(_DWORD *)(a1 - 8);
  }
  else {
    unsigned int v5 = 0;
  }
  int v6 = 0;
  unsigned int v7 = 9 * ((~(v4 << 15) + v4) ^ ((~(v4 << 15) + v4) >> 10));
  unsigned int v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
  int v9 = v8 ^ HIWORD(v8);
  do
  {
    unsigned int v10 = v9 & v5;
    int v11 = (unsigned char *)(a1 + 24 * (v9 & v5));
    int v9 = ++v6 + (v9 & v5);
  }
  while (*v11);
  uint64_t v12 = a1 + 24 * v10;
  unsigned int v15 = *(_DWORD *)(v12 + 16);
  int v14 = (_DWORD *)(v12 + 16);
  uint64_t v13 = v15;
  if (v15 != -1)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v13])(&v18, a1 + 24 * v10 + 8);
    LOBYTE(v4) = *a2;
  }
  *int v11 = v4;
  uint64_t v16 = a1 + 24 * v10;
  *(unsigned char *)(v16 + 8) = 0;
  *int v14 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,(std::__variant_detail::_Trait)1>>(v16 + 8, (uint64_t)(a2 + 8));
  return v11;
}

uint64_t *WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::remove(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  *(unsigned char *)a2 = -1;
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  if (v4 != -1) {
    uint64_t result = (uint64_t *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v4])(&v11, a2 + 8);
  }
  int v5 = -1;
  *(_DWORD *)(a2 + 16) = -1;
  ++*(_DWORD *)(*v3 - 16);
  uint64_t v6 = *v3;
  if (*v3) {
    int v5 = *(_DWORD *)(v6 - 12) - 1;
  }
  *(_DWORD *)(v6 - 12) = v5;
  uint64_t v7 = *v3;
  if (*v3)
  {
    unsigned int v8 = 6 * *(_DWORD *)(v7 - 12);
    unsigned int v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9) {
      return (uint64_t *)WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::rehash(v3, v9 >> 1, 0);
    }
  }
  return result;
}

unsigned __int8 *WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned char>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned char,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<unsigned char>,WTF::HashTraits<unsigned char>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned char>>,unsigned char>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  int v4 = *a2;
  unsigned int v5 = 9 * ((~(v4 << 15) + v4) ^ ((~(v4 << 15) + v4) >> 10));
  unsigned int v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  unsigned int v7 = (v6 ^ HIWORD(v6)) & v3;
  uint64_t result = (unsigned __int8 *)(v2 + 24 * v7);
  int v9 = *result;
  if (v9 != v4)
  {
    int v10 = 1;
    while (v9)
    {
      unsigned int v7 = (v7 + v10) & v3;
      uint64_t result = (unsigned __int8 *)(v2 + 24 * v7);
      int v9 = *result;
      ++v10;
      if (v9 == v4) {
        return result;
      }
    }
    return (unsigned __int8 *)(v2 + 24 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::remove(uint64_t result, uint64_t a2)
{
  int v3 = (uint64_t *)result;
  *(unsigned char *)a2 = -1;
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJPN3IPC19MessageReceiveQueueENS_10unique_ptrIS7_NS_14default_deleteIS7_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_0[v4])(&v11, a2 + 16);
  }
  int v5 = -1;
  *(_DWORD *)(a2 + 24) = -1;
  ++*(_DWORD *)(*v3 - 16);
  uint64_t v6 = *v3;
  if (*v3) {
    int v5 = *(_DWORD *)(v6 - 12) - 1;
  }
  *(_DWORD *)(v6 - 12) = v5;
  uint64_t v7 = *v3;
  if (*v3)
  {
    unsigned int v8 = 6 * *(_DWORD *)(v7 - 12);
    unsigned int v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9) {
      return WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::rehash(v3, v9 >> 1, 0);
    }
  }
  return result;
}

unsigned __int8 *WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned char,unsigned long long>,std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::variant<IPC::MessageReceiveQueue *,std::unique_ptr<IPC::MessageReceiveQueue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>>,std::pair<unsigned char,unsigned long long>>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  int v4 = *a2;
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v6 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash(*a2, v5) & v3;
  uint64_t result = (unsigned __int8 *)(v2 + 32 * v6);
  int v8 = *result;
  uint64_t v9 = *((void *)result + 1);
  if (v8 != v4 || v9 != v5)
  {
    int v11 = 1;
    while ((_BYTE)v8 || v9)
    {
      uint64_t v6 = (v6 + v11) & v3;
      uint64_t result = (unsigned __int8 *)(v2 + 32 * v6);
      int v8 = *result;
      uint64_t v9 = *((void *)result + 1);
      ++v11;
      if (v8 == v4 && v9 == v5) {
        return result;
      }
    }
    return (unsigned __int8 *)(v2 + 32 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

uint64_t WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::reinsert(uint64_t a1, unsigned char *a2)
{
  if (a1) {
    int v3 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v3 = 0;
  }
  int v4 = 0;
  unsigned int v5 = 9
     * ((~(*a2 << 15) + *a2) ^ ((~(*a2 << 15)
                                                                 + *a2) >> 10));
  unsigned int v6 = ((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16);
  do
  {
    uint64_t v7 = v6 & v3;
    unsigned int v6 = ++v4 + v7;
  }
  while (*(unsigned __int8 *)(a1 + 16 * v7) != 255);
  uint64_t v8 = a1 + 16 * v7;
  uint64_t v9 = *(unsigned int **)(v8 + 8);
  *(void *)(v8 + 8) = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, a2);
  }
  *(unsigned char *)uint64_t v8 = *a2;
  uint64_t v10 = *((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  *(void *)(v8 + 8) = v10;
  return v8;
}

uint64_t WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::find<WTF::IdentityHashTranslator<WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<IPC::ReceiverName>>,IPC::ReceiverName>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  int v4 = *a2;
  unsigned int v5 = 9 * ((~(v4 << 15) + v4) ^ ((~(v4 << 15) + v4) >> 10));
  unsigned int v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  uint64_t v7 = (v6 ^ HIWORD(v6)) & v3;
  int v8 = *(unsigned __int8 *)(v2 + 16 * v7);
  if (v8 == v4) {
    return v2 + 16 * v7;
  }
  int v9 = 1;
  while (v8 != 255)
  {
    uint64_t v7 = (v7 + v9) & v3;
    int v8 = *(unsigned __int8 *)(v2 + 16 * v7);
    ++v9;
    if (v8 == v4) {
      return v2 + 16 * v7;
    }
  }
  return v2 + 16 * *(unsigned int *)(v2 - 4);
}

unsigned int *WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::remove(uint64_t *a1, void *a2)
{
  *(unsigned char *)a2 = -2;
  uint64_t result = (unsigned int *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (unsigned int *)WTF::HashTable<IPC::ReceiverName,WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::IntHash<IPC::ReceiverName>,WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<IPC::ReceiverName>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

unsigned __int8 *WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>>,std::pair<IPC::ReceiverName,unsigned long long>>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  int v4 = *a2;
  uint64_t v5 = *((void *)a2 + 1);
  unsigned int v6 = WTF::PairHash<WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>::hash(*a2, v5) & v3;
  uint64_t result = (unsigned __int8 *)(v2 + 24 * v6);
  int v8 = *result;
  uint64_t v9 = *((void *)result + 1);
  if (v8 != v4 || v9 != v5)
  {
    int v11 = 1;
    while ((_BYTE)v8 != 0xFF || v9 != 0)
    {
      unsigned int v6 = (v6 + v11) & v3;
      uint64_t result = (unsigned __int8 *)(v2 + 24 * v6);
      int v8 = *result;
      uint64_t v9 = *((void *)result + 1);
      ++v11;
      if (v8 == v4 && v9 == v5) {
        return result;
      }
    }
    return (unsigned __int8 *)(v2 + 24 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

unsigned __int8 *WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::remove(uint64_t *a1, void *a2)
{
  *(unsigned char *)a2 = -2;
  uint64_t result = (unsigned __int8 *)*((void *)a2 + 2);
  *((void *)a2 + 2) = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    uint64_t result = (unsigned __int8 *)WTF::fastFree((WTF *)result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

unsigned __int8 *WTF::HashTable<std::pair<IPC::ReceiverName,unsigned long long>,WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>>::begin(unsigned __int8 *result)
{
  if (!result) {
    return 0;
  }
  uint64_t v1 = *((unsigned int *)result - 1);
  uint64_t v2 = &result[24 * v1];
  if (!*((_DWORD *)result - 3)) {
    return &result[24 * v1];
  }
  if (v1)
  {
    uint64_t v3 = 24 * v1;
    while (1)
    {
      int v4 = *result;
      BOOL v5 = v4 == 255 && *((void *)result + 1) == 0;
      BOOL v6 = v5;
      if (v4 != 254 && !v6) {
        break;
      }
      result += 24;
      v3 -= 24;
      if (!v3) {
        return v2;
      }
    }
  }
  return result;
}

uint64_t IPC::StreamClientConnection::DedicatedConnectionClient::didReceiveSyncMessage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))();
}

uint64_t IPC::StreamClientConnection::DedicatedConnectionClient::didClose(IPC::StreamClientConnection::DedicatedConnectionClient *this, IPC::Connection *a2)
{
  return (*(uint64_t (**)(void, IPC::Connection *))(**((void **)this + 3) + 40))(*((void *)this + 3), a2);
}

void IPC::StreamClientConnection::~StreamClientConnection(IPC::StreamClientConnection *this, void *a2)
{
  if (*((unsigned char *)this + 104))
  {
    IPC::Semaphore::destroy((IPC::StreamClientConnection *)((char *)this + 96));
    WTF::MachSendRight::~MachSendRight((IPC::StreamClientConnection *)((char *)this + 96));
    IPC::Semaphore::destroy((IPC::StreamClientConnection *)((char *)this + 88));
    WTF::MachSendRight::~MachSendRight((IPC::StreamClientConnection *)((char *)this + 88));
  }
  uint64_t v3 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  }
  if (*((unsigned char *)this + 48))
  {
    *((void *)this + 2) = &unk_1EE9B71B0;
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, a2);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)this + 1);
}

atomic_uchar *volatile **IPC::StreamClientConnection::invalidate(uint64_t **this)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v2, this + 1);
  IPC::Connection::invalidate((uint64_t)v2);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v2);
}

atomic_uchar *volatile **IPC::StreamClientConnection::removeWorkQueueMessageReceiver(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v6, (uint64_t **)(a1 + 8));
  IPC::Connection::removeWorkQueueMessageReceiver((uint64_t)v6, a2, a3);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v6);
}

IPC::Semaphore *IPC::Semaphore::Semaphore(IPC::Semaphore *this)
{
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 1) = 0;
  semaphore_create(*MEMORY[0x1E4F14960], (semaphore_t *)this + 1, 0, 0);
  return this;
}

void IPC::StreamConnectionWorkQueue::~StreamConnectionWorkQueue(IPC::StreamConnectionWorkQueue *this, void *a2)
{
  WTF::Vector<WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 96, a2);
  uint64_t v4 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  WTF::Deque<WTF::Function<void ()(void)>,0ul>::~Deque((unint64_t *)this + 7, v3);
  BOOL v5 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(v5);
  }
  IPC::Semaphore::destroy((IPC::StreamConnectionWorkQueue *)((char *)this + 32));
  WTF::MachSendRight::~MachSendRight((IPC::StreamConnectionWorkQueue *)((char *)this + 32));

  WTF::FunctionDispatcher::~FunctionDispatcher(this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  IPC::StreamConnectionWorkQueue::~StreamConnectionWorkQueue(this, a2);

  WTF::fastFree(v2, v3);
}

unint64_t *WTF::Deque<WTF::Function<void ()(void)>,0ul>::~Deque(unint64_t *result, void *a2)
{
  unint64_t v2 = *result;
  unint64_t v3 = result[1];
  uint64_t v4 = (WTF *)result[2];
  if (*result > v3)
  {
    unsigned int v15 = (uint64_t *)result[2];
    uint64_t v16 = (uint64_t *)result;
    if (v3)
    {
      uint64_t v10 = 8 * v3;
      do
      {
        uint64_t v11 = *v15;
        uint64_t *v15 = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
        ++v15;
        v10 -= 8;
      }
      while (v10);
      unsigned int v15 = (uint64_t *)v16[2];
      unint64_t v2 = *v16;
    }
    uint64_t v8 = *((unsigned int *)v16 + 6);
    if (v2 != v8)
    {
      uint64_t v12 = &v15[v2];
      uint64_t v13 = 8 * v8 - 8 * v2;
      do
      {
        uint64_t v14 = *v12;
        *uint64_t v12 = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
LABEL_12:
    uint64_t result = (unint64_t *)v16;
    uint64_t v4 = (WTF *)v16[2];
    if (v4) {
      goto LABEL_13;
    }
    return result;
  }
  if (*result != v3)
  {
    uint64_t v16 = (uint64_t *)result;
    BOOL v5 = (uint64_t *)((char *)v4 + 8 * v2);
    uint64_t v6 = 8 * v3 - 8 * v2;
    do
    {
      uint64_t v7 = *v5;
      uint64_t *v5 = 0;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
    goto LABEL_12;
  }
  if (v4)
  {
LABEL_13:
    result[2] = 0;
    *((_DWORD *)result + 6) = 0;
    uint64_t v9 = result;
    WTF::fastFree(v4, a2);
    return v9;
  }
  return result;
}

void IPC::StreamConnectionWorkQueue::removeStreamConnection(IPC::StreamConnectionWorkQueue *this, IPC::StreamServerConnection *a2)
{
  char v4 = 0;
  BOOL v5 = (char *)this + 41;
  int v6 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 41, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0]((char *)this + 41);
  }
  WTF::Vector<WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<IPC::StreamConnectionWorkQueue::removeStreamConnection(IPC::StreamServerConnection&)::$_0>((unsigned int *)this + 24, (uint64_t)a2);
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }

  JUMPOUT(0x1997420B0);
}

unsigned int *WTF::Vector<WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeFirstMatching<IPC::StreamConnectionWorkQueue::removeStreamConnection(IPC::StreamServerConnection&)::$_0>(unsigned int *result, uint64_t a2)
{
  uint64_t v2 = result[3];
  if (v2)
  {
    uint64_t v3 = 0;
    while (*(void *)(*(void *)result + 8 * v3) != a2)
    {
      if (v2 == ++v3) {
        return result;
      }
    }
    return (unsigned int *)WTF::Vector<WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove((uint64_t)result, v3);
  }
  return result;
}

unsigned int *IPC::StreamConnectionWorkQueue::stopAndWaitForCompletion(uint64_t a1, uint64_t *a2)
{
  char v4 = 0;
  BOOL v5 = (WTF::Lock *)(a1 + 41);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 41), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 41);
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t result = *(unsigned int **)(a1 + 88);
  *(void *)(a1 + 88) = v6;
  if (result) {
    uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
  }
  uint64_t v8 = *(atomic_uint **)(a1 + 48);
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  int v9 = 1;
  atomic_store(1u, (unsigned __int8 *)(a1 + 40));
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 41), (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    uint64_t result = (unsigned int *)WTF::Lock::unlockSlow(v5);
  }
  if (v8)
  {
    MEMORY[0x1997420B0](*(unsigned int *)(a1 + 36));
    WTF::Thread::waitForCompletion((WTF::Thread *)v8);
    char v10 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 41), (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
    if (v10) {
      MEMORY[0x19972E8D0](v5);
    }
    uint64_t v11 = *(unsigned int **)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    if (v11) {
      WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(v11);
    }
    int v12 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 != 1) {
      WTF::Lock::unlockSlow(v5);
    }
    return WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref((unsigned int *)v8);
  }
  return result;
}

void IPC::Semaphore::signal(IPC::Semaphore *this)
{
}

BOOL IPC::StreamConnectionWorkQueue::isCurrent(atomic_uchar *this)
{
  char v2 = 0;
  uint64_t v3 = this + 41;
  atomic_compare_exchange_strong_explicit(this + 41, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this + 41);
  }
  uint64_t v4 = *((void *)this + 6);
  if (v4)
  {
    int v5 = *(_DWORD *)(v4 + 48);
    uint64_t v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v6) {
      uint64_t v6 = WTF::Thread::initializeCurrentTLS(0);
    }
    BOOL v7 = v5 == *(_DWORD *)(v6 + 48);
  }
  else
  {
    BOOL v7 = 0;
  }
  int v8 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v7;
}

void IPC::StreamServerConnection::~StreamServerConnection(IPC::StreamServerConnection *this)
{
  char v2 = (IPC::StreamServerConnection *)((char *)this + 160);
  IPC::Semaphore::destroy((IPC::StreamServerConnection *)((char *)this + 160));
  WTF::MachSendRight::~MachSendRight(v2);
  uint64_t v4 = *((void *)this + 18);
  if (v4) {
    WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::deallocateTable(v4, v3);
  }
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)this + 16, v3);
  WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::~Deque((unint64_t *)this + 11, v5);
  BOOL v7 = (unsigned int *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v7);
  }
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v8) {
    WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref((unsigned int *)(v8 + 8), v6);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)this + 5);
  *((void *)this + 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v9);
}

void non-virtual thunk to'IPC::StreamServerConnection::~StreamServerConnection(IPC::StreamServerConnection *this)
{
}

{
  IPC::StreamServerConnection::operator delete((IPC::StreamServerConnection *)((char *)this - 16));
}

double IPC::StreamServerConnection::operator delete(IPC::StreamServerConnection *a1)
{
  IPC::StreamServerConnection::~StreamServerConnection(a1);
  if (atomic_load((unsigned int *)(v1 + 32)))
  {
    *(void *)(v1 + 160) = 0;
    double result = 0.0;
    *(_OWORD *)(v1 + 128) = 0u;
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)uint64_t v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
  return result;
}

atomic_uchar *volatile **IPC::StreamServerConnection::invalidate(IPC::StreamServerConnection *this)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v11, (uint64_t **)this + 5);
  char v2 = (atomic_uint *)*((void *)this + 6);
  if (v2)
  {
    uint64_t v3 = (unsigned int *)(v2 + 2);
    atomic_fetch_add(v2 + 2, 1u);
    IPC::StreamConnectionWorkQueue::removeStreamConnection((IPC::StreamConnectionWorkQueue *)v2, this);
    WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref(v3, v4);
    IPC::Connection::invalidate((uint64_t)v11);
    memset(v10, 0, sizeof(v10));
    IPC::Connection::removeMessageReceiveQueue((uint64_t)v11, (unsigned __int8 *)v10);
    uint64_t v6 = *((void *)this + 6);
    *((void *)this + 6) = 0;
    if (v6) {
      WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref((unsigned int *)(v6 + 8), v5);
    }
    char v7 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 80, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      MEMORY[0x19972E8D0]((char *)this + 80);
    }
    WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::clear((uint64_t)this + 88);
    int v8 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 80, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 != 1) {
      WTF::Lock::unlockSlow((IPC::StreamServerConnection *)((char *)this + 80));
    }
  }
  else
  {
    IPC::Connection::invalidate((uint64_t)v11);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v11);
}

unsigned int *IPC::StreamServerConnection::enqueueMessage(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v5 = 0;
  uint64_t v6 = (atomic_uchar *)(a1 + 80);
  int v7 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 80), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 80);
  }
  WTF::Deque<WTF::UniqueRef<IPC::Decoder>,0ul>::append((uint64_t *)(a1 + 88), a3);
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
  }
  MEMORY[0x1997420B0](*(unsigned int *)(v8 + 36));

  return WTF::ThreadSafeRefCounted<IPC::StreamConnectionWorkQueue,(WTF::DestructionThread)0>::deref((unsigned int *)(v8 + 8), v9);
}

uint64_t IPC::StreamServerConnection::didReceiveSyncMessage()
{
  return 0;
}

uint64_t non-virtual thunk to'IPC::StreamServerConnection::didReceiveSyncMessage()
{
  return 0;
}

IPC::Semaphore *IPC::Semaphore::operator=(IPC::Semaphore *this, IPC::Semaphore *a2)
{
  if (this != a2)
  {
    IPC::Semaphore::destroy(this);
    WTF::MachSendRight::operator=();
    int v4 = *((_DWORD *)a2 + 1);
    *((_DWORD *)a2 + 1) = 0;
    *((_DWORD *)this + 1) = v4;
  }
  return this;
}

BOOL IPC::Semaphore::waitFor(semaphore_t *a1, double a2)
{
  WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
  double v5 = a2 - v4;
  if (v5 < 0.0) {
    double v5 = 0.0;
  }
  uint64_t v6 = 0xFFFFFFFFLL;
  uint64_t v7 = v5;
  if (v5 <= 0.0) {
    uint64_t v7 = 0;
  }
  if (v5 < 4294967300.0) {
    uint64_t v6 = v7;
  }
  double v8 = v5 * 1000.0 * 1000.0 * 1000.0;
  if (v8 >= 1.84467441e19)
  {
    LODWORD(v9) = -1;
  }
  else if (v8 <= 0.0)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    unint64_t v9 = (unint64_t)v8;
  }
  mach_timespec_t v10 = (mach_timespec_t)(v6 | ((unint64_t)(v9 - 1000000000 * v6) << 32));
  return semaphore_timedwait(a1[1], v10) == 0;
}

void IPC::StreamClientConnection::DedicatedConnectionClient::~DedicatedConnectionClient(unsigned int **this, void *a2)
{
  *this = (unsigned int *)&unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
}

uint64_t WTF::HashTable<std::pair<unsigned char,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashMap<std::pair<unsigned char,unsigned long long>,WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>,WTF::DefaultHash<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>,WTF::HashTraits<WTF::Ref<IPC::StreamMessageReceiver,WTF::RawPtrTraits<IPC::StreamMessageReceiver>,WTF::DefaultRefDerefTraits<IPC::StreamMessageReceiver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned char,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    double v4 = (unsigned int **)(a1 + 16);
    do
    {
      if (*((unsigned __int8 *)v4 - 16) != 255)
      {
        double v5 = *v4;
        *double v4 = 0;
        if (v5)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v5 + 2);
            (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
          }
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void *WTF::Vector<WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (unsigned int **)(*(void *)a1 + 8 * a2);
  double v4 = *v3;
  unsigned int *v3 = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  double result = memmove(v3, v3 + 1, *(void *)a1 + 8 * *(unsigned int *)(a1 + 12) - (void)(v3 + 1));
  --*(_DWORD *)(a1 + 12);
  return result;
}

unsigned int *WTF::Vector<WTF::Ref<IPC::StreamServerConnection,WTF::RawPtrTraits<IPC::StreamServerConnection>,WTF::DefaultRefDerefTraits<IPC::StreamServerConnection>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, uint64_t a2)
{
  unsigned int v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = result[3];
  if (v4 != a2)
  {
    double v5 = (unsigned int **)(*(void *)result + 8 * a2);
    uint64_t v6 = 8 * v4 - 8 * a2;
    do
    {
      double result = *v5;
      unsigned int *v5 = 0;
      if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result + 2);
        double result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

WTF::StringImpl *WebKit::EnvironmentUtilities::stripEntriesEndingWith@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  unsigned int v25 = 0;
  uint64_t v26 = 0;
  unsigned int v27 = 0;
  char v28 = 1;
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  __int16 v23 = 58;
  char v24 = 1;
  uint64_t v17 = (WTF::StringView *)&v21;
  unsigned int v18 = 0;
  char v20 = 0;
  WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v17);
  int v4 = v22;
  LODWORD(v5) = v18;
  if (v18 != v22 || !v20)
  {
    char v6 = 0;
    do
    {
      unsigned int v15 = WTF::StringView::substring((const char *)v17, v5, v19);
      uint64_t v16 = v7;
      if ((WTF::StringView::endsWith() & 1) == 0)
      {
        if (v6)
        {
          char v29 = 58;
          if (v26 && ((v8 = v27, v27 < *((_DWORD *)v26 + 1)) ? (BOOL v9 = v25 == 0) : (BOOL v9 = 0), v9))
          {
            int v10 = *((_DWORD *)v26 + 4);
            uint64_t v11 = *((void *)v26 + 1);
            ++v27;
            if ((v10 & 4) != 0) {
              *(unsigned char *)(v11 + v8) = 58;
            }
            else {
              *(_WORD *)(v11 + 2 * v8) = 58;
            }
          }
          else
          {
            WTF::StringBuilder::append();
          }
        }
        WTF::StringBuilder::append((uint64_t)&v25, (uint64_t)v15, v16);
        char v6 = 1;
      }
      WTF::StringView::SplitResult::Iterator::operator++();
      double v5 = (WTF::StringImpl *)v18;
    }
    while (v18 != v4 || v20 == 0);
    double result = v25;
    if (v25) {
      goto LABEL_24;
    }
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v25);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v25);
  double result = v25;
  if (v25) {
LABEL_24:
  }
    *(_DWORD *)result += 2;
  *a3 = result;
  uint64_t v14 = v26;
  uint64_t v26 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v5);
      double result = v25;
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  unsigned int v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void IPC::encodeObjectDirectly<DDScannerResult>(IPC::Encoder *a1, objc_object *a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    WebKit::CoreIPCDDScannerResult::CoreIPCDDScannerResult((uint64_t)&v24, a2);
    long long v4 = v24;
    long long v5 = v25;
    long long v24 = 0u;
    long long v25 = 0u;
    *(_OWORD *)BOOL v32 = v4;
    *(_OWORD *)uint64_t v33 = v5;
    char v6 = v26;
    uint64_t v26 = 0;
    unint64_t v34 = v6;
    LOBYTE(v35) = 0;
    unsigned __int8 v37 = 0;
    if (v29)
    {
      uint64_t v35 = v27;
      uint64_t v7 = v28;
      unsigned int v27 = 0;
      uint64_t v28 = 0;
      uint64_t v36 = v7;
      unsigned __int8 v37 = 1;
    }
    long long v8 = v30;
    long long v30 = 0uLL;
    *(_OWORD *)long long v38 = v8;
    BOOL v9 = v31;
    uint64_t v31 = 0;
    uint64_t v39 = v9;
    char v40 = 1;
    int v10 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
    if (!v11)
    {
      __break(0xC471u);
      goto LABEL_43;
    }
    *int v10 = 1;
    if (v40)
    {
      int v12 = v32[0];
      if (!v32[0])
      {
        v45[0] = 0;
        char v48 = 0;
        uint64_t v17 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
        if (!v18)
        {
          __break(0xC471u);
          JUMPOUT(0x1994AD3F0);
        }
        unsigned char *v17 = 0;
        goto LABEL_14;
      }
      WebKit::CoreIPCNSValue::valueFromNSValue(v32[0], (uint64_t)v42);
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v46, (uint64_t)v43);
      char v48 = 1;
      uint64_t v13 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
      if (!v14)
      {
        __break(0xC471u);
        JUMPOUT(0x1994AD390);
      }
      unsigned char *v13 = 1;
      if (v48)
      {
        unsigned __int8 v41 = v47;
        IPC::Encoder::operator<<<BOOL>(a1, (char *)&v41);
        IPC::ArgumentCoder<std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,void>::encode<IPC::Encoder,std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding> const&>(a1, (uint64_t)v45, v41);
LABEL_14:
        if (v48)
        {
          if (v47 != -1) {
            ((void (*)(unsigned __int8 *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v47])(&v41, v46);
          }
          int v47 = -1;
        }
        if (v12 && v44 != -1) {
          ((void (*)(unsigned __int8 *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v44])(&v41, v43);
        }
        IPC::encodeObjectDirectly<NSString>(a1, (uint64_t)v32[1]);
        IPC::encodeObjectDirectly<NSString>(a1, (uint64_t)v33[0]);
        IPC::encodeObjectDirectly<NSNumber>(a1, v33[1]);
        IPC::encodeObjectDirectly<NSNumber>(a1, v34);
        int v19 = v37;
        char v20 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
        if (!v19)
        {
          if (!v21)
          {
            __break(0xC471u);
            JUMPOUT(0x1994AD410);
          }
          *char v20 = 0;
          goto LABEL_30;
        }
        if (!v21)
        {
          __break(0xC471u);
          JUMPOUT(0x1994AD3B0);
        }
        *char v20 = 1;
        if (v37)
        {
          IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, HIDWORD(v36));
          if (HIDWORD(v36))
          {
            uint64_t v22 = v35;
            uint64_t v23 = 8 * HIDWORD(v36);
            do
            {
              IPC::encodeObjectDirectly<DDScannerResult>(a1, *v22++);
              v23 -= 8;
            }
            while (v23);
          }
LABEL_30:
          IPC::encodeObjectDirectly<NSString>(a1, (uint64_t)v38[0]);
          IPC::encodeObjectDirectly<NSDictionary>(a1, v38[1]);
          IPC::encodeObjectDirectly<NSNumber>(a1, v39);
          goto LABEL_31;
        }
      }
    }
    std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
LABEL_43:
    JUMPOUT(0x1994AD370);
  }
  LOBYTE(v32[0]) = 0;
  char v40 = 0;
  unsigned int v15 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v16)
  {
    __break(0xC471u);
    JUMPOUT(0x1994AD3D0);
  }
  unsigned char *v15 = 0;
LABEL_31:
  if (v40) {
    WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult((WebKit::CoreIPCDDScannerResult *)v32, v16);
  }
  if (a2) {
    WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult((WebKit::CoreIPCDDScannerResult *)&v24, v16);
  }
}

void sub_1994AD428(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v35 = *(unsigned int *)(v33 - 128);
  if (v35 != -1) {
    ((void (*)(uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v35])(v33 - 162, v32);
  }
  if (a32) {
    WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult((WebKit::CoreIPCDDScannerResult *)&a21, a2);
  }
  WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult((WebKit::CoreIPCDDScannerResult *)&a9, a2);
  _Unwind_Resume(a1);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<DDScannerResult>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCDDScannerResult>>(a1, (uint64_t)v7);
  if (v9)
  {
    if (v8)
    {
      WebKit::CoreIPCDDScannerResult::toID((WebKit::CoreIPCDDScannerResult *)v7, &v6);
      int v4 = v9;
      int v5 = v8;
      *(void *)a2 = v6;
      *(unsigned char *)(a2 + 8) = 1;
      if (v4)
      {
        if (v5) {
          WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult((WebKit::CoreIPCDDScannerResult *)v7, v3);
        }
      }
    }
    else
    {
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1994AD550(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if ((_BYTE)a23)
  {
    if (a21) {
      WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult((WebKit::CoreIPCDDScannerResult *)&a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebKit::CoreIPCDDScannerResult>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCDDScannerResult>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!*(unsigned char *)(a2 + 96))
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_1994AD5E4(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 96))
  {
    if (*((unsigned char *)v2 + 88)) {
      WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult(v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::encodeObjectDirectly<NSURLRequest>(IPC::Encoder *a1, NSURLRequest *a2)
{
  if (a2)
  {
    WebKit::CoreIPCNSURLRequest::CoreIPCNSURLRequest((WebKit::CoreIPCNSURLRequest *)v6, a2);
    WebKit::CoreIPCNSURLRequestData::CoreIPCNSURLRequestData((uint64_t)v7, v6);
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
    v7[0] = 0;
  }
  char v8 = v4;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLRequest>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCNSURLRequest>>(a1, (uint64_t)v7);
  if (v8) {
    WebKit::CoreIPCNSURLRequestData::~CoreIPCNSURLRequestData((WebKit::CoreIPCNSURLRequestData *)v7, v5);
  }
  if (a2) {
    WebKit::CoreIPCNSURLRequestData::~CoreIPCNSURLRequestData((WebKit::CoreIPCNSURLRequestData *)v6, v5);
  }
}

void sub_1994AD694(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  WebKit::CoreIPCNSURLRequestData::~CoreIPCNSURLRequestData((WebKit::CoreIPCNSURLRequestData *)va, a2);
  _Unwind_Resume(a1);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSURLRequest>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCNSURLRequest>>(a1, v7);
  if (v9)
  {
    if (v8)
    {
      WebKit::CoreIPCNSURLRequest::toID((WebKit::CoreIPCNSURLRequest *)v7, &v6);
      int v4 = v9;
      int v5 = v8;
      *(void *)a2 = v6;
      *(unsigned char *)(a2 + 8) = 1;
      if (v4)
      {
        if (v5) {
          WebKit::CoreIPCNSURLRequestData::~CoreIPCNSURLRequestData((WebKit::CoreIPCNSURLRequestData *)v7, v3);
        }
      }
    }
    else
    {
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1994AD754(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,int a58,__int16 a59,char a60,char a61)
{
  if ((_BYTE)a59)
  {
    if (a57) {
      WebKit::CoreIPCNSURLRequestData::~CoreIPCNSURLRequestData((WebKit::CoreIPCNSURLRequestData *)&a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebKit::CoreIPCNSURLRequest>>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  if (!a2[384]) {
    IPC::Decoder::markInvalid(a1);
  }
}

void sub_1994AD7B4(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 384))
  {
    if (*((unsigned char *)v2 + 376)) {
      WebKit::CoreIPCNSURLRequestData::~CoreIPCNSURLRequestData(v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::encodeObjectDirectly<PKPaymentMethod>(IPC::Encoder *a1, objc_object *a2)
{
  if (a2)
  {
    WebKit::CoreIPCPKPaymentMethod::CoreIPCPKPaymentMethod((WebKit::CoreIPCPKPaymentMethod *)&v9, a2);
    long long v4 = v9;
    long long v5 = v10;
    long long v9 = 0u;
    long long v10 = 0u;
    v13[0] = v4;
    v13[1] = v5;
    long long v6 = v11;
    long long v7 = v12;
    long long v11 = 0u;
    long long v12 = 0u;
    char v8 = 1;
    v13[2] = v6;
    v13[3] = v7;
  }
  else
  {
    char v8 = 0;
    LOBYTE(v13[0]) = 0;
  }
  char v14 = v8;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPaymentMethod>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCPKPaymentMethod>>(a1, (uint64_t)v13);
  if (v14) {
    WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod((WebKit::CoreIPCPKPaymentMethod *)v13);
  }
  if (a2) {
    WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod((WebKit::CoreIPCPKPaymentMethod *)&v9);
  }
}

void sub_1994AD86C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a25) {
    WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod((WebKit::CoreIPCPKPaymentMethod *)&a17);
  }
  if (v25) {
    WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod((WebKit::CoreIPCPKPaymentMethod *)&a9);
  }
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<PKPaymentMethod>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCPKPaymentMethod>>(a1, (uint64_t)v6);
  if (v8)
  {
    if (v7)
    {
      WebKit::CoreIPCPKPaymentMethod::toID((WebKit::CoreIPCPKPaymentMethod *)v6, &v5);
      int v3 = v8;
      int v4 = v7;
      *(void *)a2 = v5;
      *(unsigned char *)(a2 + 8) = 1;
      if (v3)
      {
        if (v4) {
          WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod((WebKit::CoreIPCPKPaymentMethod *)v6);
        }
      }
    }
    else
    {
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1994AD924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if ((_BYTE)a21)
  {
    if (a19) {
      WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod((WebKit::CoreIPCPKPaymentMethod *)&a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebKit::CoreIPCPKPaymentMethod>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPaymentMethod>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!*(unsigned char *)(a2 + 72))
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_1994AD9B8(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 72))
  {
    if (*((unsigned char *)v1 + 64)) {
      WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::encodeObjectDirectly<PKPaymentMerchantSession>(IPC::Encoder *this, objc_object *a2)
{
  if (!a2)
  {
    LOBYTE(v29) = 0;
    char v39 = 0;
    unsigned int v15 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
    if (!v16)
    {
      __break(0xC471u);
      goto LABEL_26;
    }
LABEL_16:
    unsigned char *v15 = 0;
    goto LABEL_17;
  }
  WebKit::CoreIPCPKPaymentMerchantSession::CoreIPCPKPaymentMerchantSession((WebKit::CoreIPCPKPaymentMerchantSession *)&v19, a2);
  long long v4 = v19;
  long long v5 = v20;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v29 = v4;
  *(_OWORD *)long long v30 = v5;
  long long v6 = v21;
  long long v7 = v22;
  long long v21 = 0u;
  long long v22 = 0u;
  *(_OWORD *)uint64_t v31 = v6;
  *(_OWORD *)CFTypeRef cf = v7;
  long long v8 = v23;
  long long v9 = v24;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v33 = v8;
  *(_OWORD *)unint64_t v34 = v9;
  uint64_t v10 = v25;
  uint64_t v25 = 0;
  uint64_t v35 = v10;
  LOBYTE(v36) = 0;
  unsigned __int8 v38 = 0;
  if (v28)
  {
    uint64_t v36 = v26;
    uint64_t v11 = v27;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v37 = v11;
    unsigned __int8 v38 = 1;
  }
  char v39 = 1;
  long long v12 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1994ADC2CLL);
  }
  *long long v12 = 1;
  if (!v39) {
    goto LABEL_25;
  }
  IPC::encodeObjectDirectly<NSString>(this, v29);
  IPC::encodeObjectDirectly<NSString>(this, *((uint64_t *)&v29 + 1));
  IPC::encodeObjectDirectly<NSString>(this, (uint64_t)v30[0]);
  IPC::encodeObjectDirectly<NSNumber>(this, v30[1]);
  IPC::encodeObjectDirectly<NSNumber>(this, v31[0]);
  IPC::encodeObjectDirectly<NSString>(this, (uint64_t)v31[1]);
  IPC::encodeObjectDirectly<NSString>(this, (uint64_t)cf[0]);
  IPC::encodeObjectDirectly<NSData>(this, cf[1]);
  IPC::encodeObjectDirectly<NSString>(this, v33);
  IPC::encodeObjectDirectly<NSString>(this, *((uint64_t *)&v33 + 1));
  IPC::encodeObjectDirectly<NSString>(this, (uint64_t)v34[0]);
  IPC::encodeObjectDirectly<NSData>(this, v34[1]);
  IPC::encodeObjectDirectly<NSString>(this, v35);
  int v14 = v38;
  unsigned int v15 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v14)
  {
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x1994ADC6CLL);
    }
    goto LABEL_16;
  }
  if (!v16)
  {
    __break(0xC471u);
    JUMPOUT(0x1994ADC4CLL);
  }
  unsigned char *v15 = 1;
  if (!v38)
  {
LABEL_25:
    std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
LABEL_26:
    JUMPOUT(0x1994ADBD0);
  }
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(this, HIDWORD(v37));
  if (HIDWORD(v37))
  {
    uint64_t v17 = v36;
    uint64_t v18 = 8 * HIDWORD(v37);
    do
    {
      IPC::encodeObjectDirectly<NSString>(this, *v17++);
      v18 -= 8;
    }
    while (v18);
  }
LABEL_17:
  if (v39) {
    WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession((WebKit::CoreIPCPKPaymentMerchantSession *)&v29, v16);
  }
  if (a2) {
    WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession((WebKit::CoreIPCPKPaymentMerchantSession *)&v19, v16);
  }
}

void sub_1994ADC78(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (a41) {
    WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession((WebKit::CoreIPCPKPaymentMerchantSession *)&a25, a2);
  }
  WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession((WebKit::CoreIPCPKPaymentMerchantSession *)&a9, a2);
  _Unwind_Resume(a1);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<PKPaymentMerchantSession>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCPKPaymentMerchantSession>>(a1, v7);
  if (v9)
  {
    if (v8)
    {
      WebKit::CoreIPCPKPaymentMerchantSession::toID((WebKit::CoreIPCPKPaymentMerchantSession *)v7, &v6);
      int v4 = v9;
      int v5 = v8;
      *(void *)a2 = v6;
      *(unsigned char *)(a2 + 8) = 1;
      if (v4)
      {
        if (v5) {
          WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession((WebKit::CoreIPCPKPaymentMerchantSession *)v7, v3);
        }
      }
    }
    else
    {
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1994ADD30(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31)
{
  if ((_BYTE)a29)
  {
    if (a27) {
      WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession((WebKit::CoreIPCPKPaymentMerchantSession *)&a11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebKit::CoreIPCPKPaymentMerchantSession>>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPaymentMerchantSession>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[136])
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_1994ADDC4(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 136))
  {
    if (*((unsigned char *)v2 + 128)) {
      WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession(v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::encodeObjectDirectly<PKContact>(IPC::Encoder *this, PKContact *a2)
{
  if (!a2)
  {
    v33[0] = 0;
    unsigned __int8 v46 = 0;
    uint64_t v5 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
    if (!v6)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x1994ADF7CLL);
    }
LABEL_13:
    unsigned char *v5 = 0;
    goto LABEL_32;
  }
  WebKit::CoreIPCPKContact::CoreIPCPKContact((WebKit::CoreIPCPKContact *)v27, a2);
  std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::__optional_destruct_base[abi:sn180100]<WebKit::CoreIPCPKContact>((uint64_t)v33, (uint64_t)v27);
  int v4 = v46;
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v4)
  {
    if (!v6) {
      goto LABEL_17;
    }
    goto LABEL_13;
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1994AE124);
  }
  unsigned char *v5 = 1;
  if (!v46) {
    goto LABEL_54;
  }
  int v7 = v38;
  unsigned __int8 v8 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (v7)
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1994AE144);
    }
    unsigned char *v8 = 1;
    if (!v38) {
      goto LABEL_54;
    }
    uint64_t v10 = &v37;
    uint64_t v11 = &v36;
    long long v12 = &v35;
    uint64_t v13 = &v34;
    for (uint64_t i = (uint64_t *)v33; ; v13 = i + 1)
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, i);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, v13);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, v12);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, v11);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, v10);
      uint64_t v15 = i[5];
      unsigned __int8 v8 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
      if (!v15) {
        break;
      }
      if (!v16)
      {
        __break(0xC471u);
        JUMPOUT(0x1994AE104);
      }
      unsigned char *v8 = 1;
      uint64_t i = (uint64_t *)i[5];
      uint64_t v10 = i + 4;
      uint64_t v11 = i + 3;
      long long v12 = i + 2;
    }
    if (!v16)
    {
      __break(0xC471u);
      goto LABEL_55;
    }
  }
  else if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1994AE1A4);
  }
  unsigned char *v8 = 0;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, &v39);
  int v17 = v42;
  uint64_t v18 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (v17)
  {
    if (!v19)
    {
      __break(0xC471u);
      JUMPOUT(0x1994AE164);
    }
    *uint64_t v18 = 1;
    if (!v42) {
      goto LABEL_54;
    }
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, &v40);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, &v41);
  }
  else
  {
    if (!v19)
    {
      __break(0xC471u);
      JUMPOUT(0x1994AE1C4);
    }
    *uint64_t v18 = 0;
  }
  int v20 = v44;
  long long v21 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v20)
  {
    if (!v22)
    {
      __break(0xC471u);
      JUMPOUT(0x1994AE1E4);
    }
    *long long v21 = 0;
    goto LABEL_31;
  }
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x1994AE184);
  }
  *long long v21 = 1;
  if (!v44)
  {
LABEL_54:
    std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
LABEL_55:
    JUMPOUT(0x1994ADF58);
  }
  IPC::ArgumentCoder<WebKit::CoreIPCCNPostalAddress,void>::encode(this, v43);
LABEL_31:
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, &v45);
LABEL_32:
  std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v33, v6);
  if (a2)
  {
    long long v24 = v32;
    uint64_t v32 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, v23);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    if (v31[72]) {
      WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)v31, v23);
    }
    std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30, v23);
    uint64_t v26 = v29;
    long long v29 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v25);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v28) {
      WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents(v27);
    }
  }
}

void sub_1994AE1F8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebKit::CoreIPCPersonNameComponents *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,WTF::StringImpl *a31,char a32)
{
  std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a32, a2);
  uint64_t v34 = a31;
  a31 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, v33);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  if (a30) {
    WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)&a21, v33);
  }
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a18, v33);
  uint64_t v36 = a17;
  a17 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, v35);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
  if (a16) {
    WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents(&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::decodeObjectDirectlyRequiringAllowedClasses<PKContact>@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WebKit::CoreIPCPKContact>>(a1, v7);
  if (!v8)
  {
    *a2 = 0;
    a2[8] = 0;
    return result;
  }
  if (!v7[176])
  {
    *(void *)a2 = 0;
    a2[8] = 1;
    return std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v4);
  }
  uint64_t result = WebKit::CoreIPCPKContact::toID((WebKit::CoreIPCPKContact *)v7, &v6);
  int v5 = v8;
  *(void *)a2 = v6;
  a2[8] = 1;
  if (v5) {
    return std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v4);
  }
  return result;
}

void sub_1994AE310(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a34) {
    std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a11, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::CoreIPCPKContact>>@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKContact>,void>::decode<IPC::Decoder>((WTF::StringImpl **)a1, a2);
  if (!a2[184])
  {
    int v5 = *(WTF::StringImpl **)a1;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t result = *(void *)(a1 + 24);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1994AE39C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 184)) {
    std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::encodeObjectDirectly<PKPayment>(IPC::Encoder *a1, objc_object *a2)
{
  if (a2)
  {
    WebKit::CoreIPCPKPayment::CoreIPCPKPayment((WebKit::CoreIPCPKPayment *)&v9, a2);
    long long v4 = v9;
    long long v5 = v10;
    long long v9 = 0u;
    long long v10 = 0u;
    v13[0] = v4;
    v13[1] = v5;
    long long v6 = v11;
    long long v7 = v12;
    long long v11 = 0u;
    long long v12 = 0u;
    char v8 = 1;
    v13[2] = v6;
    v13[3] = v7;
  }
  else
  {
    char v8 = 0;
    LOBYTE(v13[0]) = 0;
  }
  char v14 = v8;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPayment>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCPKPayment>>(a1, (uint64_t)v13);
  if (v14) {
    WebKit::CoreIPCPKPayment::~CoreIPCPKPayment((WebKit::CoreIPCPKPayment *)v13);
  }
  if (a2) {
    WebKit::CoreIPCPKPayment::~CoreIPCPKPayment((WebKit::CoreIPCPKPayment *)&v9);
  }
}

void sub_1994AE44C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a25) {
    WebKit::CoreIPCPKPayment::~CoreIPCPKPayment((WebKit::CoreIPCPKPayment *)&a17);
  }
  if (v25) {
    WebKit::CoreIPCPKPayment::~CoreIPCPKPayment((WebKit::CoreIPCPKPayment *)&a9);
  }
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<PKPayment>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCPKPayment>>(a1, (uint64_t)v6);
  if (v8)
  {
    if (v7)
    {
      WebKit::CoreIPCPKPayment::toID((WebKit::CoreIPCPKPayment *)v6, &v5);
      int v3 = v8;
      int v4 = v7;
      *(void *)a2 = v5;
      *(unsigned char *)(a2 + 8) = 1;
      if (v3)
      {
        if (v4) {
          WebKit::CoreIPCPKPayment::~CoreIPCPKPayment((WebKit::CoreIPCPKPayment *)v6);
        }
      }
    }
    else
    {
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1994AE504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if ((_BYTE)a21)
  {
    if (a19) {
      WebKit::CoreIPCPKPayment::~CoreIPCPKPayment((WebKit::CoreIPCPKPayment *)&a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebKit::CoreIPCPKPayment>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPayment>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!*(unsigned char *)(a2 + 72))
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_1994AE598(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 72))
  {
    if (*((unsigned char *)v1 + 64)) {
      WebKit::CoreIPCPKPayment::~CoreIPCPKPayment(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::encodeObjectDirectly<NSURLProtectionSpace>(IPC::Encoder *a1, objc_object *a2)
{
  if (a2)
  {
    WebKit::CoreIPCNSURLProtectionSpace::CoreIPCNSURLProtectionSpace((WebKit::CoreIPCNSURLProtectionSpace *)&v11, a2);
    long long v4 = v11;
    long long v5 = v12;
    long long v11 = 0u;
    long long v12 = 0u;
    v18[0] = v4;
    v18[1] = v5;
    long long v6 = v13;
    long long v13 = 0u;
    v18[2] = v6;
    uint64_t v7 = v14;
    uint64_t v14 = 0;
    uint64_t v19 = v7;
    LOBYTE(v20) = 0;
    char v22 = 0;
    char v8 = 1;
    if (v17)
    {
      uint64_t v20 = v15;
      uint64_t v9 = v16;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v21 = v9;
      char v22 = 1;
    }
  }
  else
  {
    char v8 = 0;
    LOBYTE(v18[0]) = 0;
  }
  char v23 = v8;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLProtectionSpace>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCNSURLProtectionSpace>>(a1, (uint64_t)v18);
  if (v23) {
    WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace((WebKit::CoreIPCNSURLProtectionSpace *)v18, v10);
  }
  if (a2) {
    WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace((WebKit::CoreIPCNSURLProtectionSpace *)&v11, v10);
  }
}

void sub_1994AE684(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a29) {
    WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace((WebKit::CoreIPCNSURLProtectionSpace *)&a19, a2);
  }
  if (v29) {
    WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace((WebKit::CoreIPCNSURLProtectionSpace *)&a9, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSURLProtectionSpace>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCNSURLProtectionSpace>>(a1, (uint64_t)v7);
  if (v9)
  {
    if (v8)
    {
      WebKit::CoreIPCNSURLProtectionSpace::toID((WebKit::CoreIPCNSURLProtectionSpace *)v7, &v6);
      int v4 = v9;
      int v5 = v8;
      *(void *)a2 = v6;
      *(unsigned char *)(a2 + 8) = 1;
      if (v4)
      {
        if (v5) {
          WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace((WebKit::CoreIPCNSURLProtectionSpace *)v7, v3);
        }
      }
    }
    else
    {
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1994AE73C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if ((_BYTE)a23)
  {
    if (a21) {
      WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace((WebKit::CoreIPCNSURLProtectionSpace *)&a11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebKit::CoreIPCNSURLProtectionSpace>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLProtectionSpace>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!*(unsigned char *)(a2 + 88))
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_1994AE7D0(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 88))
  {
    if (*((unsigned char *)v2 + 80)) {
      WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace(v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::encodeObjectDirectly<NSShadow>(IPC::Encoder *a1, NSShadow *a2)
{
  if (a2)
  {
    WebKit::CoreIPCNSShadow::CoreIPCNSShadow((WebKit::CoreIPCNSShadow *)&v8, a2);
    long long v11 = v8;
    CFTypeRef v4 = v10;
    CFTypeRef v10 = 0;
    uint64_t v12 = v9;
    CFTypeRef cf = v4;
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    LOBYTE(v11) = 0;
  }
  char v14 = v5;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSShadow>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCNSShadow>>(a1, (uint64_t)&v11);
  if (v14)
  {
    CFTypeRef v6 = cf;
    CFTypeRef cf = 0;
    if (v6) {
      CFRelease(v6);
    }
  }
  if (a2)
  {
    CFTypeRef v7 = v10;
    CFTypeRef v10 = 0;
    if (v7) {
      CFRelease(v7);
    }
  }
}

void sub_1994AE890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf, char a17)
{
  if (a17 && cf) {
    CFRelease(cf);
  }
  if (v17)
  {
    if (a12) {
      CFRelease(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSShadow>(uint64_t *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCNSShadow>>(a1, (uint64_t)v8, a3);
  if (v11)
  {
    if (v10)
    {
      WebKit::CoreIPCNSShadow::toID((WebKit::CoreIPCNSShadow *)v8, &v7);
      int v4 = v11;
      int v5 = v10;
      *(void *)a2 = v7;
      *(unsigned char *)(a2 + 8) = 1;
      if (v4 && v5)
      {
        CFTypeRef v6 = cf;
        CFTypeRef cf = 0;
        if (v6) {
          CFRelease(v6);
        }
      }
    }
    else
    {
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1994AE960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, char a15, int a16, __int16 a17, char a18, char a19)
{
  if ((_BYTE)a17 && a15)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::optional<WebKit::CoreIPCNSShadow>>(uint64_t *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSShadow>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a2 + 40))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
    }
  }
}

void sub_1994AE9FC(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<std::optional<WebKit::CoreIPCNSShadow>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

void IPC::encodeObjectDirectly<NSURLCredential>(IPC::Encoder *a1, objc_object *a2)
{
  if (a2)
  {
    WebKit::CoreIPCNSURLCredential::CoreIPCNSURLCredential((WebKit::CoreIPCNSURLCredential *)&v8, a2);
    CFTypeRef v4 = v8;
    CFTypeRef v8 = 0;
    CFTypeRef cf = v4;
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    LOBYTE(cf) = 0;
  }
  char v10 = v5;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLCredential>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCNSURLCredential>>(a1, (uint64_t)&cf);
  if (v10)
  {
    CFTypeRef v6 = cf;
    CFTypeRef cf = 0;
    if (v6) {
      CFRelease(v6);
    }
  }
  if (a2)
  {
    CFTypeRef v7 = v8;
    CFTypeRef v8 = 0;
    if (v7) {
      CFRelease(v7);
    }
  }
}

void sub_1994AEAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef cf, char a12)
{
  if (a12 && cf) {
    CFRelease(cf);
  }
  if (v12)
  {
    if (a10) {
      CFRelease(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSURLCredential>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCNSURLCredential>>(a1, &cf);
  if (v9)
  {
    if (v8)
    {
      WebKit::CoreIPCNSURLCredential::toID((WebKit::CoreIPCNSURLCredential *)&cf, &v6);
      int v3 = v9;
      int v4 = v8;
      *(void *)a2 = v6;
      *(unsigned char *)(a2 + 8) = 1;
      if (v3 && v4)
      {
        CFTypeRef v5 = cf;
        CFTypeRef cf = 0;
        if (v5) {
          CFRelease(v5);
        }
      }
    }
    else
    {
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1994AEB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

const void ***IPC::Decoder::decode<std::optional<WebKit::CoreIPCNSURLCredential>>@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLCredential>,void>::decode<IPC::Decoder>((const void ***)a1, a2);
  if (!a2[16])
  {
    CFTypeRef v5 = *(const void ***)a1;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t result = *(const void ****)(a1 + 24);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (const void ***)((uint64_t (*)(const void ***, const void **))(*result)[2])(result, v5);
    }
  }
  return result;
}

void sub_1994AEC0C(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<std::optional<WebKit::CoreIPCSecureCoding>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::encodeObjectDirectly<NSDateComponents>(IPC::Encoder *this, NSDateComponents *a2)
{
  if (a2)
  {
    WebKit::CoreIPCDateComponents::CoreIPCDateComponents((WebKit::CoreIPCDateComponents *)v13, a2);
    long long v3 = *(_OWORD *)v13;
    v13[0] = 0;
    v13[1] = 0;
    long long v16 = v3;
    uint64_t v17 = v14;
    *(void *)&long long v3 = v15;
    char v14 = 0;
    uint64_t v15 = 0;
    uint64_t v18 = v3;
    char v19 = 1;
    int v4 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
    if (v5)
    {
      *int v4 = 1;
      if (v19)
      {
        IPC::ArgumentCoder<WebKit::CoreIPCDateComponents,void>::encode(this, (uint64_t)&v16);
        std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v16, v6);
        unsigned __int8 v8 = v14;
        if (v14)
        {
          char v14 = 0;
          LODWORD(v15) = 0;
          WTF::fastFree(v8, v7);
        }
        unsigned __int8 v9 = v13[1];
        v13[1] = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2) {
            WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v7);
          }
          else {
            *(_DWORD *)v9 -= 2;
          }
        }
        uint64_t result = v13[0];
        v13[0] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v7);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        return result;
      }
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x1994AED54);
  }
  LOBYTE(v16) = 0;
  char v19 = 0;
  char v10 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1994AED74);
  }
  *char v10 = 0;
  return (WTF::StringImpl *)std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v16, v11);
}

void sub_1994AED80(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF *a11, int a12, int a13, char a14)
{
  std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a14, a2);
  if (a11) {
    WTF::fastFree(a11, v15);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)v15);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, (WTF::StringImpl *)v15);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::CoreIPCDateComponents>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(char **)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - (void)v5;
  if (v6 <= v7)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v16 = *((void *)a2 + 3);
    if (v16)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
        uint64_t v15 = *(char **)a2;
        unint64_t v14 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_15;
  }
  unsigned __int8 v8 = &v5[v7];
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v14 = v6;
    uint64_t v15 = 0;
LABEL_15:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v17 = *((void *)a2 + 3);
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v17 + 16))(v17, v15, v14);
        uint64_t v5 = *(char **)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_16;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_16:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v18 = *((void *)a2 + 3);
    if (v18 && v6) {
      (*(void (**)(uint64_t, char *))(*(void *)v18 + 16))(v18, v5);
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 40) = 0;
    goto LABEL_10;
  }
  if (!v9)
  {
    LOBYTE(v19) = 0;
    char v22 = 0;
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
    goto LABEL_8;
  }
  IPC::Decoder::decode<WebKit::CoreIPCDateComponents>((uint64_t)&v19, a2);
  if (v22)
  {
    long long v10 = v19;
    long long v19 = 0uLL;
    *(_OWORD *)a1 = v10;
    *(void *)(a1 + 16) = v20;
    *(void *)&long long v10 = v21;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    *(void *)(a1 + 24) = v10;
    *(unsigned char *)(a1 + 32) = 1;
LABEL_8:
    *(unsigned char *)(a1 + 40) = 1;
    return std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v5);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 40) = 0;
  std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v5);
LABEL_10:
  uint64_t v12 = *(char **)a2;
  uint64_t v13 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result)
  {
    if (v13) {
      return (*(uint64_t (**)(uint64_t, char *))(*(void *)result + 16))(result, v12);
    }
  }
  return result;
}

void IPC::encodeObjectDirectly<NSData>(IPC::Encoder *a1, CFTypeRef cf)
{
  if (cf)
  {
    CFRetain(cf);
    CFTypeRef cfa = cf;
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
    LOBYTE(cfa) = 0;
  }
  char v7 = v4;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCData>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCData>>(a1, (unsigned __int8 *)&cfa);
  if (v7)
  {
    CFTypeRef v5 = cfa;
    CFTypeRef cfa = 0;
    if (v5) {
      CFRelease(v5);
    }
  }
}

void sub_1994AF070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  if (a10)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSData>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCData>>(a1, (uint64_t)&cf);
  if (!v9)
  {
    *a2 = 0;
    a2[8] = 0;
    return;
  }
  if (!v8)
  {
    *(void *)a2 = 0;
    a2[8] = 1;
    return;
  }
  CFTypeRef v3 = cf;
  if (!cf)
  {
    *(void *)a2 = 0;
    a2[8] = 1;
LABEL_6:
    CFTypeRef v6 = cf;
    CFTypeRef cf = 0;
    if (v6) {
      CFRelease(v6);
    }
    return;
  }
  CFRetain(cf);
  int v4 = v9;
  int v5 = v8;
  *(void *)a2 = v3;
  a2[8] = 1;
  if (v4 && v5) {
    goto LABEL_6;
  }
}

void sub_1994AF13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

void *IPC::Decoder::decode<std::optional<WebKit::CoreIPCData>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16)) {
    return (void *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_1994AF1A4(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<std::optional<WebKit::CoreIPCData>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<std::optional<WebKit::CoreIPCURL>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        uint64_t v14 = *(void *)a2;
        unint64_t v13 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_16;
  }
  unsigned __int8 v8 = (unsigned __int8 *)(v5 + v7);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v13 = v6;
    uint64_t v14 = 0;
LABEL_16:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v16 = *((void *)a2 + 3);
    if (v16)
    {
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14, v13);
        uint64_t v5 = *(void *)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_17;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_17:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v17 = *((void *)a2 + 3);
    if (v17 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v5);
    }
LABEL_18:
    *a1 = 0;
    a1[48] = 0;
    goto LABEL_10;
  }
  if (!v9)
  {
    LOBYTE(v18[0]) = 0;
    char v19 = 0;
    std::__optional_move_base<WebKit::CoreIPCURL,false>::__optional_move_base[abi:sn180100](a1, (uint64_t)v18);
    a1[48] = 1;
    std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v12);
    goto LABEL_10;
  }
  IPC::Decoder::decode<WebKit::CoreIPCURL>(a2, v18);
  if (!v19) {
    goto LABEL_18;
  }
  WTF::URL::URL((uint64_t)a1, (uint64_t *)v18);
  a1[40] = 1;
  a1[48] = 1;
  if (v19)
  {
    unsigned __int8 v11 = v18[0];
    v18[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
LABEL_10:
  if (!a1[48]) {
    IPC::Decoder::markInvalid(a2);
  }
}

void sub_1994AF3A8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 48)) {
    std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::encodeObjectDirectly<NSDate>(IPC::Encoder *a1, uint64_t a2)
{
  if (a2)
  {
    double v5 = MEMORY[0x19972B790](a2);
    char v3 = 1;
  }
  else
  {
    char v3 = 0;
    LOBYTE(v5) = 0;
  }
  char v6 = v3;
  return IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, (uint64_t)&v5);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSDate>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WTF::WallTime>>(a1, &v5);
  if (v7)
  {
    if (v6)
    {
      WebKit::CoreIPCDate::toID(&v5, &v4);
      CFDateRef v3 = v4;
    }
    else
    {
      CFDateRef v3 = 0;
    }
    *(void *)a2 = v3;
    *(unsigned char *)(a2 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void IPC::encodeObjectDirectly<NSArray>(IPC::Encoder *a1, NSArray *a2)
{
  if (a2)
  {
    WebKit::CoreIPCArray::CoreIPCArray((WebKit::CoreIPCArray *)&v7, a2);
    v9[0] = v7;
    uint64_t v4 = v8;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    v9[1] = v4;
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    LOBYTE(v9[0]) = 0;
  }
  char v10 = v5;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCArray>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCArray>>(a1, (uint64_t)v9);
  if (v10) {
    WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v6);
  }
  if (a2) {
    WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v6);
  }
}

void sub_1994AF528(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  if (a14) {
    WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
  }
  if (v14) {
    WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSArray>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCArray>>(a1, (uint64_t)v7);
  if (v9)
  {
    if (v8)
    {
      WebKit::CoreIPCArray::toID(v7, &v6);
      int v4 = v9;
      int v5 = v8;
      *(void *)a2 = v6;
      *(unsigned char *)(a2 + 8) = 1;
      if (v4)
      {
        if (v5) {
          WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v3);
        }
      }
    }
    else
    {
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1994AF5E0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
  if ((_BYTE)a15)
  {
    if (a13) {
      WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::Decoder::decode<std::optional<WebKit::CoreIPCArray>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCArray>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1994AF674(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 24))
  {
    if (*(unsigned char *)(v2 + 16)) {
      WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::encodeObjectDirectly<NSError>(IPC::Encoder *a1, NSError *a2)
{
  if (a2)
  {
    WebKit::CoreIPCError::CoreIPCError((WebKit::CoreIPCError *)v6, a2);
    v8[0] = v6[0];
    v8[1] = v6[1];
    long long v5 = v7;
    v6[0] = 0;
    long long v7 = 0uLL;
    long long v9 = v5;
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
    LOBYTE(v8[0]) = 0;
  }
  char v10 = v4;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCError>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCError>>(a1, (uint64_t)v8);
  std::__optional_destruct_base<WebKit::CoreIPCError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8);
  if (a2) {
    WebKit::CoreIPCError::~CoreIPCError(v6);
  }
}

void sub_1994AF720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  char v4 = va_arg(va1, WTF::StringImpl **);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__optional_destruct_base<WebKit::CoreIPCError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va1);
  if (v2) {
    WebKit::CoreIPCError::~CoreIPCError((WTF::StringImpl ***)va);
  }
  _Unwind_Resume(a1);
}

void WebKit::CoreIPCError::~CoreIPCError(WTF::StringImpl ***this)
{
  std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100](this + 3, 0);
  CFDateRef v3 = this[2];
  this[2] = 0;
  if (v3) {
    CFRelease(v3);
  }
  char v4 = *this;
  *this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSError>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCError>>((uint64_t)v5, a1);
  if (v6)
  {
    if (!v5[32])
    {
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 1;
LABEL_4:
      std::__optional_destruct_base<WebKit::CoreIPCError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5);
      return;
    }
    WebKit::CoreIPCError::toID((WebKit::CoreIPCError *)v5, &v4);
    int v3 = v6;
    *(void *)a2 = v4;
    *(unsigned char *)(a2 + 8) = 1;
    if (v3) {
      goto LABEL_4;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1994AF830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16) {
    std::__optional_destruct_base<WebKit::CoreIPCError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::CoreIPCError>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCError>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 40))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

WTF::StringImpl *IPC::encodeObjectDirectly<NSLocale>(IPC::Encoder *a1, void *a2)
{
  if (a2)
  {
    MEMORY[0x19972EAD0](&v8, [a2 localeIdentifier]);
    uint64_t v4 = v8;
    uint64_t v8 = 0;
    long long v9 = v4;
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    LOBYTE(v9) = 0;
  }
  char v10 = v5;
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCLocale>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCLocale>>(a1, (uint64_t)&v9);
  if (v10)
  {
    uint64_t result = v9;
    long long v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        if (!a2) {
          return result;
        }
        goto LABEL_9;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!a2) {
    return result;
  }
LABEL_9:
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1994AF960(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (v12 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::decodeObjectDirectlyRequiringAllowedClasses<NSLocale>@<X0>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WebKit::CoreIPCLocale>>(a1, (uint64_t)&v8);
  if (v10)
  {
    if (v9)
    {
      uint64_t result = (WTF::StringImpl *)WebKit::CoreIPCLocale::toID((WebKit::CoreIPCLocale *)&v8, &v7);
      int v5 = v10;
      int v6 = v9;
      *(void *)a2 = v7;
      *(unsigned char *)(a2 + 8) = 1;
      if (v5)
      {
        if (v6)
        {
          uint64_t result = v8;
          uint64_t v8 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
      }
    }
    else
    {
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
  return result;
}

void sub_1994AFA6C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<std::optional<WebKit::CoreIPCLocale>>@<X0>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCLocale>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1994AFB1C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    std::optional<WebCore::PublicSuffix>::~optional(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::encodeObjectDirectly<NSNumber>(IPC::Encoder *a1, WebKit::CoreIPCNumber *this)
{
  if (this)
  {
    v6[0] = WebKit::CoreIPCNumber::numberHolderForNumber(this, this);
    v6[1] = v3;
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
    LOBYTE(v6[0]) = 0;
  }
  char v7 = v4;
  return IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNumber>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCNumber>>(a1, (uint64_t)v6);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSNumber>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCNumber>>(a1, (uint64_t)v5);
  if (v5[24])
  {
    if (v5[16])
    {
      WebKit::CoreIPCNumber::toID((WebKit::CoreIPCNumber *)v5, &v4);
      uint64_t v3 = v4;
    }
    else
    {
      uint64_t v3 = 0;
    }
    *(void *)a2 = v3;
    *(unsigned char *)(a2 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
}

uint64_t *IPC::Decoder::decode<std::optional<WebKit::CoreIPCNumber>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNumber>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t *)a1[3];
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v7();
    }
  }
  return result;
}

WTF::StringImpl *IPC::encodeObjectDirectly<NSString>(IPC::Encoder *a1, uint64_t a2)
{
  if (a2)
  {
    MEMORY[0x19972EAD0](&v8, a2);
    uint64_t v4 = v8;
    uint64_t v8 = 0;
    unsigned __int8 v9 = v4;
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    LOBYTE(v9) = 0;
  }
  char v10 = v5;
  uint64_t result = (WTF::StringImpl *)IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, (uint64_t)&v9);
  if (v10)
  {
    uint64_t result = v9;
    unsigned __int8 v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        if (!a2) {
          return result;
        }
        goto LABEL_9;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (!a2) {
    return result;
  }
LABEL_9:
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1994AFD40(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (v12 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::decodeObjectDirectlyRequiringAllowedClasses<NSString>@<X0>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WebKit::CoreIPCString>>(a1, (uint64_t)&v8);
  if (v10)
  {
    if (v9)
    {
      uint64_t result = (WTF::StringImpl *)WebKit::CoreIPCString::toID((WebKit::CoreIPCString *)&v8, &v7);
      int v5 = v10;
      int v6 = v9;
      *(void *)a2 = v7;
      *(unsigned char *)(a2 + 8) = 1;
      if (v5)
      {
        if (v6)
        {
          uint64_t result = v8;
          uint64_t v8 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
      }
    }
    else
    {
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
  return result;
}

void sub_1994AFE4C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<std::optional<WebKit::CoreIPCString>>@<X0>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCString>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16)) {
    return (WTF::StringImpl *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_1994AFEC8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    std::__optional_destruct_base<std::tuple<WTF::String>,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *IPC::encodeObjectDirectly<NSDictionary>(IPC::Encoder *this, NSDictionary *a2)
{
  if (a2)
  {
    WebKit::CoreIPCDictionary::CoreIPCDictionary((WebKit::CoreIPCDictionary *)&v9, a2);
    v11[0] = v9;
    uint64_t v4 = v10;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    v11[1] = v4;
    char v12 = 1;
    int v5 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
    if (v6)
    {
      unsigned char *v5 = 1;
      if (v12)
      {
        uint64_t result = (unsigned char *)IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(this, (uint64_t)v11);
        goto LABEL_7;
      }
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x1994AFFCCLL);
  }
  LOBYTE(v11[0]) = 0;
  char v12 = 0;
  uint64_t result = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x1994AFFECLL);
  }
  unsigned char *result = 0;
LABEL_7:
  if (v12) {
    uint64_t result = (unsigned char *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v8);
  }
  if (a2) {
    return (unsigned char *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v8);
  }
  return result;
}

void sub_1994AFFF8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  if (a14) {
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
  }
  WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl **IPC::encodeObjectDirectly<NSPresentationIntent>(IPC::Encoder *this, NSPresentationIntent *a2)
{
  if (a2)
  {
    WebKit::CoreIPCPresentationIntent::CoreIPCPresentationIntent((WebKit::CoreIPCPresentationIntent *)&v14, a2);
    v21[0] = v14;
    v21[1] = v15;
    *(void *)&long long v15 = 0;
    char v22 = v16;
    uint64_t v3 = v17;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v23 = v3;
    long long v24 = v18;
    uint64_t v4 = v19;
    char v19 = 0;
    uint64_t v25 = v4;
    long long v26 = v20;
    char v27 = 1;
    int v5 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
    if (v6)
    {
      unsigned char *v5 = 1;
      if (v27)
      {
        IPC::ArgumentCoder<WebKit::CoreIPCPresentationIntent,void>::encode(this, (uint64_t)v21);
        std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v21, v7);
        uint64_t v9 = v19;
        char v19 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2) {
            WTF::StringImpl::destroy(v9, v8);
          }
          else {
            *(_DWORD *)v9 -= 2;
          }
        }
        unint64_t v13 = v16;
        if (v16)
        {
          uint64_t v16 = 0;
          LODWORD(v17) = 0;
          WTF::fastFree(v13, v8);
        }
        return std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100]((WTF::StringImpl **)&v15, 0);
      }
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x1994B016CLL);
  }
  LOBYTE(v21[0]) = 0;
  char v27 = 0;
  uint64_t v10 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1994B018CLL);
  }
  *uint64_t v10 = 0;
  return (WTF::StringImpl **)std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v21, v11);
}

void sub_1994B0198(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a21, a2);
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, v23);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  if (a14) {
    WTF::fastFree(a14, v23);
  }
  std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100](v21, 0);
  _Unwind_Resume(a1);
}

void IPC::decodeObjectDirectlyRequiringAllowedClasses<NSPresentationIntent>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCPresentationIntent>>(a1, (uint64_t)v6);
  if (!v7)
  {
    *a2 = 0;
    a2[8] = 0;
    return;
  }
  if (!v6[88])
  {
    *(void *)a2 = 0;
    a2[8] = 1;
    goto LABEL_7;
  }
  WebKit::CoreIPCPresentationIntent::toID((WebKit::CoreIPCPresentationIntent *)v6, &v5);
  int v4 = v7;
  *(void *)a2 = v5;
  a2[8] = 1;
  if (v4) {
LABEL_7:
  }
    std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v3);
}

void sub_1994B0278(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a22) {
    std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::optional<WebKit::CoreIPCPresentationIntent>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPresentationIntent>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 96))
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void sub_1994B0304(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(v2 + 96)) {
    std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *IPC::encodeObjectDirectly<UIColor>(IPC::Encoder *a1, WebCore *this)
{
  if (this)
  {
    WebCore::colorFromCocoaColor(&v8, this, (UIColor *)this);
    WebCore::Color::Color();
    unsigned __int8 v4 = 1;
  }
  else
  {
    unsigned __int8 v4 = 0;
    v9[0] = 0;
  }
  unsigned char v9[8] = v4;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCColor>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCColor>>(a1, v9);
  uint64_t result = (unsigned int *)std::optional<WebCore::Color>::~optional((uint64_t)v9, v5);
  if (this && (v8 & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

void sub_1994B03BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    char v12 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::CoreIPCArray,void>::decode@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v10);
  if (*a1)
  {
    if (!v12)
    {
      __break(1u);
      return result;
    }
    uint64_t v7 = v10;
    uint64_t v10 = 0;
    v9[0] = 0;
    *(void *)a3 = v7;
    v9[1] = 0;
    uint64_t v8 = v11;
    uint64_t v11 = 0;
    *(void *)(a3 + 8) = v8;
    *(unsigned char *)(a3 + 16) = 1;
    uint64_t result = WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v6);
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
  if (v12) {
    return WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v6);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  return result;
}

void sub_1994B0510(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::CoreIPCCFType,void>::decode(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  IPC::Decoder::decode<WTF::UniqueRef<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>>(a1, a2, &v6);
  if (*a1)
  {
    if (v7)
    {
      *(void *)a3 = v6;
      *(unsigned char *)(a3 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 0;
    if (v7)
    {
      uint64_t v5 = v6;
      uint64_t v6 = 0;
      if (v5) {
        std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v6, v5);
      }
    }
  }
}

void IPC::Decoder::decode<WTF::UniqueRef<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>>(uint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  IPC::ArgumentCoder<WTF::UniqueRef<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>,void>::decode(a1, a2, a3);
  if (!a3[8])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6 && v5 != 0)
    {
      BOOL v8 = *(void (**)(void))(*(void *)v6 + 16);
      v8();
    }
  }
}

WTF *IPC::ArgumentCoder<WebKit::CoreIPCCFURL,void>::encode(IPC::Encoder *a1, CFURLRef *this)
{
  WebKit::CoreIPCCFURL::baseURL(this, (uint64_t)&cf);
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCCFURL>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCCFURL>>(a1, (WebKit::CoreIPCCFURL *)&cf);
  if ((_BYTE)v8)
  {
    CFTypeRef v6 = cf;
    CFTypeRef cf = 0;
    if (v6) {
      CFRelease(v6);
    }
  }
  WebKit::CoreIPCCFURL::toVector(this, (uint64_t)&cf);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, cf, v9);
  uint64_t result = (WTF *)cf;
  if (cf)
  {
    CFTypeRef cf = 0;
    int v8 = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

void sub_1994B06C0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *cf, int a10)
{
  if (cf) {
    WTF::fastFree(cf, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::ArgumentCoder<WebKit::CoreIPCCFURL,void>::encode(void *a1, CFURLRef *this)
{
  WebKit::CoreIPCCFURL::baseURL(this, (uint64_t)&cf);
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCCFURL>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::CoreIPCCFURL>>(a1, (WebKit::CoreIPCCFURL *)&cf);
  if ((_BYTE)v8)
  {
    CFTypeRef v4 = cf;
    CFTypeRef cf = 0;
    if (v4) {
      CFRelease(v4);
    }
  }
  WebKit::CoreIPCCFURL::toVector(this, (uint64_t)&cf);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, cf, v9);
  uint64_t result = (WTF *)cf;
  if (cf)
  {
    CFTypeRef cf = 0;
    int v8 = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

void sub_1994B0790(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *cf, int a10)
{
  if (cf) {
    WTF::fastFree(cf, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::CoreIPCCFURL,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCCFURL>>(&cf, a1);
  IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, &v7);
  if (!*(void *)a1) {
    goto LABEL_14;
  }
  if (!v12 || !v9)
  {
    __break(1u);
LABEL_14:
    *a2 = 0;
    a2[8] = 0;
    goto LABEL_5;
  }
  WebKit::CoreIPCCFURL::createWithBaseURLAndBytes((uint64_t)&cf, (uint64_t)&v7, (uint64_t)a2);
LABEL_5:
  if (v9)
  {
    CFTypeRef v6 = v7;
    if (v7)
    {
      char v7 = 0;
      int v8 = 0;
      WTF::fastFree(v6, v4);
    }
  }
  if (v12 && v11)
  {
    CFTypeRef v5 = cf;
    CFTypeRef cf = 0;
    if (v5) {
      CFRelease(v5);
    }
  }
}

void sub_1994B0890(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11, char a12, CFTypeRef cf, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12 && a9) {
    WTF::fastFree(a9, a2);
  }
  if ((_BYTE)a16) {
    BOOL v19 = a14 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

void *IPC::Decoder::decode<std::optional<WebKit::CoreIPCCFURL>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebKit::CoreIPCCFURL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[16]) {
    return (void *)IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void sub_1994B0924(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<std::optional<WebKit::CoreIPCCFURL>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

unsigned int *IPC::ArgumentCoder<WebKit::CoreIPCColor,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, &v9);
  if (!v10)
  {
    CFTypeRef v5 = (void *)*a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unsigned int *)a1[3];
    if (result && v6 != 0) {
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, void *))(*(void *)result + 16))(result, v5);
    }
  }
  if (*a1)
  {
    if (!v10)
    {
      __break(1u);
      return result;
    }
    WebCore::Color::Color();
    uint64_t result = (unsigned int *)WebCore::Color::Color();
    a2[8] = 1;
    if ((*(void *)v8 & 0x8000000000000) != 0)
    {
      uint64_t result = (unsigned int *)(*(void *)v8 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v8 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v5);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
  if (v10 && (v9 & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

void sub_1994B0A4C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12 && (a11 & 0x8000000000000) != 0)
  {
    unint64_t v13 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *IPC::ArgumentCoder<WebKit::CoreIPCCNPostalAddress,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 7);

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 8);
}

uint64_t IPC::Decoder::decode<long>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    uint64_t v5 = v2 + v3;
    a1[2] = v5 + 8;
    if (v2) {
      return *(void *)v5;
    }
    unint64_t v7 = v1;
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      char v10 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v2, v1);
        a1 = v10;
        uint64_t v8 = *v10;
        unint64_t v7 = v10[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v8);
    }
    return 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v21 = *((void *)a2 + 3);
    if (v21)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v21 + 16))(v21, v5, v4);
        uint64_t v20 = *(void *)a2;
        unint64_t v19 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v19 = 0;
        uint64_t v20 = 0;
      }
    }
    goto LABEL_20;
  }
  uint64_t v8 = (unint64_t *)(v5 + v6);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v19 = v4;
    uint64_t v20 = 0;
LABEL_20:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v22 = *((void *)a2 + 3);
    if (v22 && v19) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
LABEL_37:
    uint64_t v32 = *(void *)a2;
    uint64_t v33 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result)
    {
      if (v33) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v32);
      }
    }
    return result;
  }
  unint64_t v9 = *v8;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  if (v9 >= 0x2AAA)
  {
    do
    {
      IPC::Decoder::decode<WebKit::CoreIPCContactLabeledValue>(&v34, a2);
      if (!v37) {
        goto LABEL_36;
      }
      if (HIDWORD(v39) == v39)
      {
        WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCContactLabeledValue>((uint64_t)&v38, (unint64_t)&v34);
      }
      else
      {
        long long v24 = (void *)(v38 + 96 * HIDWORD(v39));
        uint64_t v25 = v34;
        uint64_t v34 = 0;
        *long long v24 = v25;
        uint64_t v26 = v35;
        uint64_t v35 = 0;
        v24[1] = v26;
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v24 + 2), (uint64_t)v36);
        ++HIDWORD(v39);
      }
      uint64_t result = std::__optional_destruct_base<WebKit::CoreIPCContactLabeledValue,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v34, v23);
      --v9;
    }
    while (v9);
    unsigned int v27 = HIDWORD(v39);
    char v28 = (WTF::StringImpl *)v38;
    if (v39 > HIDWORD(v39))
    {
      uint64_t v29 = (WTF::StringImpl *)v38;
      if (HIDWORD(v39))
      {
        if (HIDWORD(v39) >= 0x2AAAAAB)
        {
          __break(0xC471u);
          return result;
        }
        uint64_t v30 = WTF::fastMalloc((WTF *)(96 * HIDWORD(v39)));
        LODWORD(v39) = 96 * v27 / 0x60;
        uint64_t v38 = v30;
        uint64_t v29 = v28;
        if ((WTF::StringImpl *)v30 != v28)
        {
          WTF::VectorMover<false,WebKit::CoreIPCContactLabeledValue>::move(v28, (WTF::StringImpl **)v28 + 12 * v27, v30);
          uint64_t v29 = (WTF::StringImpl *)v38;
        }
      }
      if (v28)
      {
        if (v29 == v28)
        {
          uint64_t v38 = 0;
          LODWORD(v39) = 0;
        }
        WTF::fastFree(v28, a2);
        char v28 = (WTF::StringImpl *)v38;
      }
      else
      {
        char v28 = v29;
      }
    }
    uint64_t v38 = 0;
    *(void *)a1 = v28;
    int v17 = v39;
    int v16 = HIDWORD(v39);
    goto LABEL_18;
  }
  if (v9)
  {
    LODWORD(v39) = 96 * (int)v9 / 0x60u;
    uint64_t v38 = WTF::fastMalloc((WTF *)(96 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebKit::CoreIPCContactLabeledValue>(&v34, a2);
      if (!v37) {
        break;
      }
      if (HIDWORD(v39) == v39)
      {
        WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCContactLabeledValue>((uint64_t)&v38, (unint64_t)&v34);
      }
      else
      {
        char v12 = (void *)(v38 + 96 * HIDWORD(v39));
        uint64_t v13 = v34;
        uint64_t v34 = 0;
        *char v12 = v13;
        uint64_t v14 = v35;
        uint64_t v35 = 0;
        v12[1] = v14;
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(v12 + 2), (uint64_t)v36);
        ++HIDWORD(v39);
      }
      std::__optional_destruct_base<WebKit::CoreIPCContactLabeledValue,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v34, v11);
      if (!--v9)
      {
        uint64_t v15 = v38;
        int v17 = v39;
        int v16 = HIDWORD(v39);
        goto LABEL_17;
      }
    }
LABEL_36:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    std::__optional_destruct_base<WebKit::CoreIPCContactLabeledValue,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v34, v10);
    WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v31);
    goto LABEL_37;
  }
  int v16 = 0;
  int v17 = 0;
  uint64_t v15 = 0;
LABEL_17:
  uint64_t v38 = 0;
  *(void *)a1 = v15;
LABEL_18:
  uint64_t v39 = 0;
  *(_DWORD *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 12) = v16;
  *(unsigned char *)(a1 + 16) = 1;
  return WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, a2);
}

void sub_1994B100C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WebKit::CoreIPCContactLabeledValue,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 - 80, v5);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::RetainPtr<NSDictionary>>(uint64_t a1, const void ***a2)
{
  v33[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  unint64_t v4 = (const void *)objc_opt_class();
  v33[0] = v4;
  if (v4) {
    CFRetain(v4);
  }
  WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v26, v33, 1);
  WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=(a2 + 7, &v26);
  unint64_t v6 = (char *)a2[1];
  unint64_t v7 = (char *)*a2;
  unint64_t v8 = (char *)a2[2] - (char *)*a2;
  if ((unint64_t)v6 <= v8)
  {
    uint64_t v15 = 0;
    int v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    int v17 = (char *)a2[3];
    if (v17)
    {
      if (v6)
      {
        (*(void (**)(char *))(*(void *)v17 + 16))(v17);
        int v16 = (char *)*a2;
        uint64_t v15 = (char *)a2[1];
      }
      else
      {
        uint64_t v15 = 0;
        int v16 = 0;
      }
    }
    goto LABEL_16;
  }
  unint64_t v9 = &v7[v8];
  a2[2] = (const void **)(v9 + 1);
  if (!v7)
  {
    uint64_t v15 = v6;
    int v16 = 0;
LABEL_16:
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    *a2 = 0;
    a2[1] = 0;
    long long v18 = (char *)a2[3];
    if (v18)
    {
      if (v15)
      {
        (*(void (**)(char *, char *, char *))(*(void *)v18 + 16))(v18, v16, v15);
        unint64_t v7 = (char *)*a2;
        unint64_t v6 = (char *)a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        unint64_t v7 = 0;
      }
    }
    goto LABEL_17;
  }
  unsigned int v10 = *v9;
  if (v10 >= 2)
  {
LABEL_17:
    *a2 = 0;
    a2[1] = 0;
    unint64_t v19 = (char *)a2[3];
    if (v19 && v6) {
      (*(void (**)(char *, char *))(*(void *)v19 + 16))(v19, v7);
    }
    goto LABEL_18;
  }
  if (!v10)
  {
    *(void *)a1 = 0;
LABEL_14:
    int v14 = 0;
    *(unsigned char *)(a1 + 8) = 1;
    goto LABEL_20;
  }
  IPC::Decoder::decode<WebKit::CoreIPCDictionary>((uint64_t *)a2, v7, (uint64_t)&cf, v5);
  if (v32)
  {
    v27[0] = cf;
    uint64_t v12 = v31;
    CFTypeRef cf = 0;
    uint64_t v31 = 0;
    v27[1] = v12;
    char v28 = 1;
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&cf, v11);
    char v29 = 1;
    WebKit::CoreIPCDictionary::toID((uint64_t *)&cf, (WebKit::CoreIPCDictionary *)v27);
    CFTypeRef v13 = cf;
    if (v29 && v28) {
      WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v7);
    }
    *(void *)a1 = v13;
    if (v13)
    {
      CFRetain(v13);
      *(unsigned char *)(a1 + 8) = 1;
      CFRelease(v13);
      int v14 = 0;
      goto LABEL_20;
    }
    goto LABEL_14;
  }
LABEL_18:
  unint64_t v7 = (char *)*a2;
  uint64_t v20 = (char *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v21 = (char *)a2[3];
  if (v21 && v20) {
    (*(void (**)(char *, char *))(*(void *)v21 + 16))(v21, v7);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  int v14 = 1;
LABEL_20:
  if (v26) {
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(v26, v7);
  }
  CFTypeRef v22 = v33[0];
  v33[0] = 0;
  if (v22)
  {
    CFRelease(v22);
    if (!v14) {
      return;
    }
  }
  else if (!v14)
  {
    return;
  }
  uint64_t v23 = (uint64_t)*a2;
  long long v24 = (char *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v25 = (char *)a2[3];
  if (v25)
  {
    if (v24) {
      (*(void (**)(char *, uint64_t))(*(void *)v25 + 16))(v25, v23);
    }
  }
}

void sub_1994B1390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
}

void *IPC::ArgumentCoder<WebKit::CoreIPCDate,void>::encode(void *result, void *a2)
{
  uint64_t v2 = result[2];
  unint64_t v3 = *result + v2;
  unint64_t v4 = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (v5)
  {
    unint64_t v7 = v6 + v2;
    unint64_t v8 = v7 + 8;
    if (v7 > 0xFFFFFFFFFFFFFFF7 || v8 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(void *)(*result + v7) = *a2;
      result[2] = v8;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebKit::CoreIPCDateComponents,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  unint64_t v4 = *(const void **)(a2 + 16);
  uint64_t v5 = *(unsigned int *)(a2 + 28);
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, v5);
  if (v5)
  {
    unint64_t v7 = (void *)IPC::Encoder::grow(a1, 8uLL, 8 * v5);
    if (v8 < 8 * v5)
    {
      unint64_t result = 831;
      __break(0xC471u);
    }
    else
    {
      return (unint64_t)memcpy(v7, v4, 8 * v5);
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::CoreIPCDictionary,void>::decode@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v11, a4);
  if (*a1)
  {
    if (!v13)
    {
      __break(1u);
      return result;
    }
    uint64_t v8 = v11;
    uint64_t v11 = 0;
    v10[0] = 0;
    *(void *)a3 = v8;
    v10[1] = 0;
    uint64_t v9 = v12;
    uint64_t v12 = 0;
    *(void *)(a3 + 8) = v9;
    *(unsigned char *)(a3 + 16) = 1;
    uint64_t result = WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v7);
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
  if (v13) {
    return WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3, a4);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v7);
    }
  }
  return result;
}

void sub_1994B160C(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::CoreIPCError,void>::encode(IPC::Encoder *this, uint64_t a2)
{
  unint64_t v4 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v4 += 2;
  }
  BOOL v9 = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, (uint64_t *)&v9);
  unint64_t v6 = v9;
  BOOL v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(this, *(void *)(a2 + 8));
  CFDictionaryRef v7 = *(const __CFDictionary **)(a2 + 16);
  if (v7) {
    CFRetain(*(CFTypeRef *)(a2 + 16));
  }
  IPC::ArgumentCoder<__CFDictionary const*,void>::encode(this, v7);
  if (v7) {
    CFRelease(v7);
  }
  return IPC::ArgumentCoder<std::unique_ptr<WebKit::CoreIPCError>,void>::encode<IPC::Encoder,std::unique_ptr<WebKit::CoreIPCError> const&>(this, (void *)(a2 + 24));
}

void sub_1994B16E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::CoreIPCError,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v32);
  unint64_t v4 = IPC::Decoder::decode<long long>(a1);
  char v6 = v5;
  IPC::Decoder::decode<WTF::RetainPtr<__CFDictionary const*>>((uint64_t *)a1, (uint64_t)&v30);
  if (!*(void *)a1) {
    goto LABEL_34;
  }
  if (!v31) {
    goto LABEL_36;
  }
  if (WebKit::CoreIPCError::hasValidUserInfo((id *)&v30))
  {
    unint64_t v8 = *((void *)a1 + 1);
    CFDictionaryRef v7 = *(WTF::StringImpl **)a1;
    unint64_t v9 = *((void *)a1 + 2) - *(void *)a1;
    if (v8 <= v9) {
      goto LABEL_37;
    }
    unsigned int v10 = (unsigned __int8 *)v7 + v9;
    *((void *)a1 + 2) = v10 + 1;
    if (!v7)
    {
      unint64_t v23 = v8;
      long long v24 = 0;
      goto LABEL_38;
    }
    unsigned int v11 = *v10;
    if (v11 >= 2) {
      goto LABEL_39;
    }
    if (v11)
    {
      IPC::Decoder::decode<WebKit::CoreIPCError>(&v35, a1);
      if (v39)
      {
        uint64_t v12 = WTF::fastMalloc((WTF *)0x20);
        char v13 = v35;
        uint64_t v35 = 0;
        *(void *)uint64_t v12 = v13;
        *(void *)(v12 + 8) = v36;
        CFTypeRef v14 = cf;
        CFTypeRef cf = 0;
        *(void *)(v12 + 16) = v14;
        uint64_t v15 = v38;
        uint64_t v38 = 0;
        *(void *)(v12 + 24) = v15;
        uint64_t v34 = 0;
        char v28 = (WTF::StringImpl **)v12;
        char v29 = 1;
        std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100](&v34, 0);
      }
      else
      {
        LOBYTE(v28) = 0;
        char v29 = 0;
      }
      std::__optional_destruct_base<WebKit::CoreIPCError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v35);
      if (!v29) {
        goto LABEL_41;
      }
    }
    else
    {
      char v28 = 0;
      char v29 = 1;
    }
    while (1)
    {
      if (!*(void *)a1)
      {
        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 32) = 0;
        goto LABEL_22;
      }
      if (v33 && v6 && v31 && v29) {
        break;
      }
LABEL_36:
      __break(1u);
LABEL_37:
      unint64_t v23 = 0;
      long long v24 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v25 = *((void *)a1 + 3);
      if (v25)
      {
        if (v8)
        {
          (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
          long long v24 = *(WTF::StringImpl **)a1;
          unint64_t v23 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v23 = 0;
          long long v24 = 0;
        }
      }
LABEL_38:
      unint64_t v8 = 0;
      CFDictionaryRef v7 = 0;
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v26 = *((void *)a1 + 3);
      if (v26)
      {
        if (v23)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v26 + 16))(v26, v24, v23);
          CFDictionaryRef v7 = *(WTF::StringImpl **)a1;
          unint64_t v8 = *((void *)a1 + 1);
        }
        else
        {
          unint64_t v8 = 0;
          CFDictionaryRef v7 = 0;
        }
      }
LABEL_39:
      *(void *)a1 = 0;
      *((void *)a1 + 1) = 0;
      uint64_t v27 = *((void *)a1 + 3);
      if (v27 && v8) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v27 + 16))(v27, v7);
      }
      LOBYTE(v28) = 0;
      char v29 = 0;
LABEL_41:
      IPC::Decoder::markInvalid(a1);
    }
    int v16 = v32;
    char v32 = 0;
    CFTypeRef v17 = v30;
    CFTypeRef v30 = 0;
    long long v18 = v28;
    char v28 = 0;
    uint64_t v35 = 0;
    unint64_t v36 = v4;
    *(void *)a2 = v16;
    *(void *)(a2 + 8) = v4;
    CFTypeRef cf = 0;
    uint64_t v38 = 0;
    *(void *)(a2 + 16) = v17;
    *(void *)(a2 + 24) = v18;
    *(unsigned char *)(a2 + 32) = 1;
    std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100](&v38, 0);
    CFTypeRef v19 = cf;
    CFTypeRef cf = 0;
    if (v19) {
      CFRelease(v19);
    }
    uint64_t v20 = v35;
    uint64_t v35 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v7);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
LABEL_22:
    if (v29) {
      std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100](&v28, 0);
    }
  }
  else
  {
LABEL_34:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 32) = 0;
  }
  if (v31)
  {
    CFTypeRef v21 = v30;
    CFTypeRef v30 = 0;
    if (v21) {
      CFRelease(v21);
    }
  }
  if (v33)
  {
    CFTypeRef v22 = v32;
    char v32 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v7);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
}

void sub_1994B1A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, CFTypeRef cf, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a10) {
    std::unique_ptr<WebKit::CoreIPCError>::reset[abi:sn180100]((WTF::StringImpl ***)&a9, 0);
  }
  if (a12)
  {
    CFTypeRef v20 = cf;
    CFTypeRef cf = 0;
    if (v20) {
      CFRelease(v20);
    }
  }
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<WebKit::CoreIPCCVPixelBufferRef,void>::decode(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::takeLastAttachment(a1, v5);
  if (*(void *)a1)
  {
    if (!v6)
    {
      __break(1u);
      return;
    }
    WTF::MachSendRight::MachSendRight();
    WTF::MachSendRight::MachSendRight();
    a2[4] = 1;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
  }
  else
  {
    *a2 = 0;
    a2[4] = 0;
  }
  if (v6) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
  }
}

void sub_1994B1B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, __int16 a11, char a12, __int16 a13, char a14)
{
  if (a14) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a12);
  }
  _Unwind_Resume(a1);
}

void *IPC::ArgumentCoder<WebKit::CoreIPCFont,void>::decode@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebKit::CoreIPCDictionary>(&v9);
  if (*a1)
  {
    if (!v11)
    {
      __break(1u);
      return result;
    }
    uint64_t v6 = v9;
    uint64_t v9 = 0;
    v8[0] = 0;
    *(void *)a2 = v6;
    v8[1] = 0;
    uint64_t v7 = v10;
    uint64_t v10 = 0;
    *(void *)(a2 + 8) = v7;
    *(unsigned char *)(a2 + 16) = 1;
    uint64_t result = (void *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v5);
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
  if (v11) {
    return (void *)WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::CoreIPCLocale,void>::encode(IPC::Encoder *a1, WTF::StringImpl **a2)
{
  uint64_t v2 = *a2;
  if (*a2) {
    *(_DWORD *)v2 += 2;
  }
  char v5 = v2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)&v5);
  uint64_t result = v5;
  char v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::CoreIPCLocale,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v7);
  if (!*(void *)a1) {
    goto LABEL_7;
  }
  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t result = (WTF::StringImpl *)WebKit::CoreIPCLocale::isValidIdentifier((WebKit::CoreIPCLocale *)&v7, v5);
  if ((result & 1) == 0 || !*(void *)a1)
  {
LABEL_7:
    *a2 = 0;
    a2[8] = 0;
    goto LABEL_8;
  }
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t result = (WTF::StringImpl *)WebKit::CoreIPCLocale::CoreIPCLocale(&v6, &v7);
  *(void *)a2 = v6;
  a2[8] = 1;
LABEL_8:
  if (v8)
  {
    uint64_t result = v7;
    uint64_t v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1994B1D14(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *IPC::ArgumentCoder<WebKit::CoreIPCNSShadow,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)a2);
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 8));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *(double *)(a2 + 16));
  unint64_t v4 = *(WebCore **)(a2 + 24);

  return IPC::encodeObjectDirectly<UIColor>(a1, v4);
}

void IPC::ArgumentCoder<WebKit::CoreIPCNSShadow,void>::decode(const void ***a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  v48[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  char v5 = (const void **)IPC::ArgumentCoder<CGSize,void>::decode(a1, (uint64_t)&v40, a3);
  int v6 = v41;
  if (!v41) {
    goto LABEL_43;
  }
  while (1)
  {
    unint64_t v7 = (unint64_t)a1[1];
    char v8 = *a1;
    unint64_t v9 = (((unint64_t)a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*a1;
    if (v7 >= v9 && v7 - v9 > 7)
    {
      char v11 = (uint64_t *)((char *)v8 + v9);
      a1[2] = (const void **)(v11 + 1);
      if (v8)
      {
        int v12 = 0;
        uint64_t v13 = *v11;
        goto LABEL_9;
      }
      unint64_t v30 = v7;
      char v31 = 0;
    }
    else
    {
      unint64_t v30 = 0;
      char v31 = 0;
      *a1 = 0;
      a1[1] = 0;
      char v32 = a1[3];
      if (v32)
      {
        if (v7)
        {
          (*((void (**)(const void **, const void **, unint64_t))*v32 + 2))(v32, v8, v7);
          char v31 = *a1;
          unint64_t v30 = (unint64_t)a1[1];
        }
        else
        {
          unint64_t v30 = 0;
          char v31 = 0;
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = 0;
    char v5 = a1[3];
    if (v5 && v30) {
      char v5 = (const void **)(*((uint64_t (**)(const void **, const void **))*v5 + 2))(v5, v31);
    }
    int v12 = 1;
LABEL_9:
    CFTypeRef v14 = (const void *)((uint64_t (*)(const void **))*MEMORY[0x1E4FB6260])(v5);
    v48[0] = v14;
    if (v14) {
      CFRetain(v14);
    }
    WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v42, v48, 1);
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=(a1 + 7, &v42);
    unint64_t v15 = (unint64_t)a1[1];
    int v16 = (Color *)*a1;
    unint64_t v17 = (char *)a1[2] - (char *)*a1;
    if (v15 <= v17)
    {
      unint64_t v33 = 0;
      uint64_t v34 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v35 = a1[3];
      if (v35)
      {
        if (v15)
        {
          (*((void (**)(const void **))*v35 + 2))(v35);
          uint64_t v34 = *a1;
          unint64_t v33 = (unint64_t)a1[1];
        }
        else
        {
          unint64_t v33 = 0;
          uint64_t v34 = 0;
        }
      }
      goto LABEL_52;
    }
    long long v18 = (unsigned __int8 *)v16 + v17;
    a1[2] = (const void **)(v18 + 1);
    if (!v16)
    {
      unint64_t v33 = v15;
      uint64_t v34 = 0;
LABEL_52:
      unint64_t v15 = 0;
      int v16 = 0;
      *a1 = 0;
      a1[1] = 0;
      unint64_t v36 = a1[3];
      if (v36)
      {
        if (v33)
        {
          (*((void (**)(const void **, const void **, unint64_t))*v36 + 2))(v36, v34, v33);
          int v16 = (Color *)*a1;
          unint64_t v15 = (unint64_t)a1[1];
        }
        else
        {
          unint64_t v15 = 0;
          int v16 = 0;
        }
      }
      goto LABEL_53;
    }
    unsigned int v19 = *v18;
    if (v19 < 2)
    {
      if (v19)
      {
        IPC::Decoder::decode<WebKit::CoreIPCColor>((uint64_t *)a1, &cf);
        char v20 = v47;
        if (v47)
        {
          WebCore::Color::Color();
          char v20 = 1;
          char v44 = 1;
        }
        else
        {
          v43[0] = 0;
        }
      }
      else
      {
        LOBYTE(cf) = 0;
        char v47 = 0;
        v43[0] = 0;
        char v44 = 0;
        char v20 = 1;
      }
      char v45 = v20;
      std::optional<WebCore::Color>::~optional((uint64_t)&cf, v16);
      goto LABEL_20;
    }
LABEL_53:
    *a1 = 0;
    a1[1] = 0;
    char v37 = a1[3];
    if (v37 && v15) {
      (*((void (**)(const void **, Color *))*v37 + 2))(v37, v16);
    }
    v43[0] = 0;
    char v45 = 0;
LABEL_20:
    if (v45
      || (int v16 = (Color *)*a1, v38 = a1[1], *a1 = 0, a1[1] = 0, (v39 = a1[3]) != 0)
      && v38
      && ((*((void (**)(const void **, Color *))*v39 + 2))(v39, v16), v45))
    {
      if (v44)
      {
        WebCore::cocoaColor((uint64_t *)&cf, (WebCore *)v43, v16);
        CFTypeRef v21 = cf;
        if (!v45)
        {
          if (!cf) {
            goto LABEL_28;
          }
          goto LABEL_27;
        }
      }
      else
      {
        CFTypeRef v21 = 0;
      }
      std::optional<WebCore::Color>::~optional((uint64_t)v43, v16);
      if (!v21)
      {
LABEL_28:
        int v22 = 0;
        goto LABEL_29;
      }
LABEL_27:
      CFRetain(v21);
      CFRelease(v21);
      goto LABEL_28;
    }
    CFTypeRef v21 = 0;
    int v22 = 1;
LABEL_29:
    if (v42) {
      WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(v42, v16);
    }
    CFTypeRef v23 = v48[0];
    v48[0] = 0;
    if (v23) {
      break;
    }
    if (!v22) {
      goto LABEL_33;
    }
LABEL_40:
    long long v24 = *a1;
    uint64_t v25 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v26 = a1[3];
    if (!v26 || !v25 || ((*((void (**)(const void **, const void **))*v26 + 2))(v26, v24), !*a1))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 32) = 0;
      return;
    }
LABEL_34:
    if (v6 && !v12 && !v22)
    {
      *(_OWORD *)a2 = v40;
      *(void *)(a2 + 16) = v13;
      *(void *)(a2 + 24) = v21;
      *(unsigned char *)(a2 + 32) = 1;
      return;
    }
    __break(1u);
LABEL_43:
    uint64_t v27 = *a1;
    char v28 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    char v5 = a1[3];
    if (v5) {
      BOOL v29 = v28 == 0;
    }
    else {
      BOOL v29 = 1;
    }
    if (!v29) {
      char v5 = (const void **)(*((uint64_t (**)(const void **, const void **))*v5 + 2))(v5, v27);
    }
  }
  CFRelease(v23);
  if (v22) {
    goto LABEL_40;
  }
LABEL_33:
  if (*a1) {
    goto LABEL_34;
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  if (v21) {
    CFRelease(v21);
  }
}

void sub_1994B2268(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void **a13, char a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,CFTypeRef cf)
{
  if (a16) {
    std::optional<WebCore::Color>::~optional((uint64_t)&a14, a2);
  }
  if (a13) {
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(a13, a2);
  }
  CFTypeRef v23 = cf;
  CFTypeRef cf = 0;
  if (v23) {
    CFRelease(v23);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WebKit::CoreIPCNSURLRequestData,void>::decode(unsigned char *a1, IPC::Decoder *a2)
{
  unint64_t v3 = (unint64_t)a2;
  uint64_t v4 = *((void *)a2 + 2);
  char v5 = *(char **)a2;
  unint64_t v6 = *(void *)(v3 + 8);
  unint64_t v7 = v4 - (void)v5;
  if (v6 <= v7)
  {
    unint64_t v190 = 0;
    long long v191 = 0;
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v192 = *(void *)(v3 + 24);
    if (v192)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v192 + 16))(v192);
        long long v191 = *(char **)v3;
        unint64_t v190 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v190 = 0;
        long long v191 = 0;
      }
    }
    goto LABEL_337;
  }
  char v8 = &v5[v7];
  *(void *)(v3 + 16) = v8 + 1;
  if (!v5)
  {
    unint64_t v190 = v6;
    long long v191 = 0;
LABEL_337:
    unint64_t v6 = 0;
    char v5 = 0;
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v193 = *(void *)(v3 + 24);
    if (v193)
    {
      if (v190)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v193 + 16))(v193, v191, v190);
        char v5 = *(char **)v3;
        unint64_t v6 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v6 = 0;
        char v5 = 0;
      }
    }
    goto LABEL_338;
  }
  unsigned int v9 = *v8;
  if (v9 < 2)
  {
    if (!v9) {
      goto LABEL_304;
    }
    IPC::Decoder::decode<WebKit::CoreIPCPlistDictionary>((IPC::Decoder *)v3, v5, (uint64_t)&v388);
    if (v389)
    {
      uint64_t v11 = *((void *)&v388 + 1);
      uint64_t v470 = v388;
      long long v388 = 0uLL;
      uint64_t v471 = v11;
      char v472 = 1;
      WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v388, v10);
      char v473 = 1;
      goto LABEL_7;
    }
    goto LABEL_339;
  }
LABEL_338:
  *(void *)unint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t v194 = *(void *)(v3 + 24);
  if (v194 && v6) {
    (*(void (**)(uint64_t, char *))(*(void *)v194 + 16))(v194, v5);
  }
LABEL_339:
  LOBYTE(v470) = 0;
  char v473 = 0;
  IPC::Decoder::markInvalid((IPC::Decoder *)v3);
  while (1)
  {
LABEL_7:
    unint64_t v12 = *(void *)(v3 + 8);
    uint64_t v13 = *(char **)v3;
    unint64_t v14 = *(void *)(v3 + 16) - *(void *)v3;
    if (v12 <= v14)
    {
      unint64_t v195 = 0;
      long long v196 = 0;
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v197 = *(void *)(v3 + 24);
      if (v197)
      {
        if (v12)
        {
          (*(void (**)(uint64_t))(*(void *)v197 + 16))(v197);
          long long v196 = *(char **)v3;
          unint64_t v195 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v195 = 0;
          long long v196 = 0;
        }
      }
      goto LABEL_341;
    }
    unint64_t v15 = &v13[v14];
    *(void *)(v3 + 16) = v15 + 1;
    if (!v13)
    {
      unint64_t v195 = v12;
      long long v196 = 0;
LABEL_341:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v198 = *(void *)(v3 + 24);
      if (v198 && v195)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v198 + 16))(v198, v196, v195);
        unsigned int v16 = 0;
        uint64_t v13 = *(char **)v3;
        unint64_t v12 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
        unsigned int v16 = 0;
      }
      goto LABEL_343;
    }
    unsigned int v16 = *v15;
    if (v16 < 2)
    {
      int v387 = 0;
      char v17 = 1;
      goto LABEL_11;
    }
LABEL_343:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v199 = *(void *)(v3 + 24);
    if (v199 && v12) {
      (*(void (**)(uint64_t, char *))(*(void *)v199 + 16))(v199, v13);
    }
    char v17 = 0;
    int v387 = 1;
LABEL_11:
    if (!v16) {
      char v17 = 0;
    }
    char v385 = v17;
    IPC::Decoder::decode<WebKit::CoreIPCURL>((IPC::Decoder *)v3, &v466);
    unint64_t v18 = *(void *)(v3 + 8);
    unsigned int v19 = *(char **)v3;
    unint64_t v20 = ((*(void *)(v3 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v3;
    if (v18 < v20 || v18 - v20 <= 7)
    {
      unint64_t v205 = 0;
      v206 = 0;
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v207 = *(void *)(v3 + 24);
      if (v207)
      {
        if (v18)
        {
          (*(void (**)(uint64_t))(*(void *)v207 + 16))(v207);
          v206 = *(char **)v3;
          unint64_t v205 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v205 = 0;
          v206 = 0;
        }
      }
    }
    else
    {
      CFTypeRef v21 = (uint64_t *)&v19[v20];
      *(void *)(v3 + 16) = v21 + 1;
      if (v19)
      {
        int v384 = 0;
        uint64_t v383 = *v21;
        goto LABEL_17;
      }
      unint64_t v205 = v18;
      v206 = 0;
    }
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v208 = *(void *)(v3 + 24);
    if (!v208 || !v205)
    {
      unsigned int v19 = 0;
      uint64_t v383 = 0;
      unint64_t v18 = 0;
      int v384 = 1;
LABEL_355:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v209 = *(void *)(v3 + 24);
      if (v209)
      {
        if (v18)
        {
          (*(void (**)(uint64_t, char *))(*(void *)v209 + 16))(v209, v19);
          v210 = *(char **)v3;
          unint64_t v18 = *(void *)(v3 + 8);
        }
        else
        {
          v210 = 0;
        }
      }
      else
      {
        v210 = 0;
        unint64_t v18 = 0;
      }
LABEL_357:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v211 = *(void *)(v3 + 24);
      if (v211 && v18) {
        (*(void (**)(uint64_t, char *))(*(void *)v211 + 16))(v211, v210);
      }
      goto LABEL_358;
    }
    (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v208 + 16))(v208, v206, v205);
    uint64_t v383 = 0;
    unsigned int v19 = *(char **)v3;
    unint64_t v18 = *(void *)(v3 + 8);
    int v384 = 1;
LABEL_17:
    if (v18 <= *(void *)(v3 + 16) - (void)v19) {
      goto LABEL_355;
    }
    int v22 = *(unsigned __int8 **)(v3 + 16);
    *(void *)(v3 + 16) = v22 + 1;
    if (!v19)
    {
      v210 = 0;
      goto LABEL_357;
    }
    unsigned int v23 = *v22;
    if (v23 < 6)
    {
      int v382 = 0;
      goto LABEL_21;
    }
LABEL_358:
    IPC::Decoder::markInvalid((IPC::Decoder *)v3);
    LOBYTE(v23) = 0;
    int v382 = 1;
LABEL_21:
    IPC::Decoder::decode<std::optional<WebKit::CoreIPCURL>>(v463, (IPC::Decoder *)v3);
    unint64_t v24 = *(void *)(v3 + 8);
    uint64_t v25 = *(char **)v3;
    unint64_t v26 = *(void *)(v3 + 16) - *(void *)v3;
    char v381 = v23;
    if (v24 <= v26)
    {
      unint64_t v200 = 0;
      long long v201 = 0;
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v202 = *(void *)(v3 + 24);
      if (v202)
      {
        if (v24)
        {
          (*(void (**)(uint64_t))(*(void *)v202 + 16))(v202);
          long long v201 = *(char **)v3;
          unint64_t v200 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v200 = 0;
          long long v201 = 0;
        }
      }
      goto LABEL_346;
    }
    uint64_t v27 = &v25[v26];
    *(void *)(v3 + 16) = v27 + 1;
    if (!v25)
    {
      unint64_t v200 = v24;
      long long v201 = 0;
LABEL_346:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v203 = *(void *)(v3 + 24);
      if (v203 && v200)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v203 + 16))(v203, v201, v200);
        unsigned int v28 = 0;
        uint64_t v25 = *(char **)v3;
        unint64_t v24 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = 0;
        unsigned int v28 = 0;
      }
      goto LABEL_348;
    }
    unsigned int v28 = *v27;
    if (v28 < 2)
    {
      int v379 = 0;
      char v29 = 1;
      goto LABEL_25;
    }
LABEL_348:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v204 = *(void *)(v3 + 24);
    if (v204)
    {
      if (v24)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v204 + 16))(v204, v25);
        char v29 = 0;
        uint64_t v25 = *(char **)v3;
        unint64_t v24 = *(void *)(v3 + 8);
        goto LABEL_351;
      }
      uint64_t v25 = 0;
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v24 = 0;
    }
    char v29 = 0;
LABEL_351:
    int v379 = 1;
LABEL_25:
    if (!v28) {
      char v29 = 0;
    }
    char v378 = v29;
    unint64_t v30 = ((*(void *)(v3 + 16) + 1) & 0xFFFFFFFFFFFFFFFELL) - (void)v25;
    if (v24 < v30 || v24 - v30 <= 1)
    {
      unint64_t v212 = 0;
      v213 = 0;
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v214 = *(void *)(v3 + 24);
      if (v214)
      {
        if (v24)
        {
          (*(void (**)(uint64_t))(*(void *)v214 + 16))(v214);
          v213 = *(char **)v3;
          unint64_t v212 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v212 = 0;
          v213 = 0;
        }
      }
      goto LABEL_360;
    }
    char v31 = (unsigned __int16 *)((*(void *)(v3 + 16) + 1) & 0xFFFFFFFFFFFFFFFELL);
    *(void *)(v3 + 16) = v31 + 1;
    if (!v25)
    {
      unint64_t v212 = v24;
      v213 = 0;
LABEL_360:
      unint64_t v24 = 0;
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v215 = *(void *)(v3 + 24);
      if (v215)
      {
        if (v212)
        {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v215 + 16))(v215, v213, v212);
          unint64_t v24 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v24 = 0;
        }
      }
      goto LABEL_31;
    }
    int v32 = *v31;
    if ((v32 & 0xE821) == 0)
    {
      unsigned int v380 = v32 | 0x10000;
      goto LABEL_312;
    }
LABEL_31:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v33 = *(void *)(v3 + 24);
    if (!v33)
    {
      uint64_t v25 = 0;
      unsigned int v380 = 0;
      unint64_t v24 = 0;
      goto LABEL_33;
    }
    if (!v24)
    {
      uint64_t v25 = 0;
      unsigned int v380 = 0;
LABEL_33:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v34 = *(void *)(v3 + 24);
      if (v34)
      {
        if (v24)
        {
          (*(void (**)(uint64_t, char *))(*(void *)v34 + 16))(v34, v25);
          uint64_t v35 = *(char **)v3;
          unint64_t v24 = *(void *)(v3 + 8);
        }
        else
        {
          uint64_t v35 = 0;
        }
      }
      else
      {
        uint64_t v35 = 0;
        unint64_t v24 = 0;
      }
      goto LABEL_35;
    }
    (*(void (**)(uint64_t))(*(void *)v33 + 16))(v33);
    unsigned int v380 = 0;
    uint64_t v25 = *(char **)v3;
    unint64_t v24 = *(void *)(v3 + 8);
LABEL_312:
    if (v24 <= *(void *)(v3 + 16) - (void)v25) {
      goto LABEL_33;
    }
    uint64_t v183 = *(unsigned __int8 **)(v3 + 16);
    long long v184 = v183 + 1;
    *(void *)(v3 + 16) = v183 + 1;
    if (v25)
    {
      unsigned int v37 = *v183;
      if (v37 < 2)
      {
        int v377 = 0;
        char v185 = 1;
        goto LABEL_316;
      }
      goto LABEL_38;
    }
    uint64_t v35 = 0;
LABEL_35:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v36 = *(void *)(v3 + 24);
    if (!v36)
    {
      unint64_t v24 = 0;
LABEL_37:
      uint64_t v25 = 0;
      unsigned int v37 = 0;
      goto LABEL_38;
    }
    if (!v24) {
      goto LABEL_37;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v36 + 16))(v36, v35);
    unsigned int v37 = 0;
    uint64_t v25 = *(char **)v3;
    unint64_t v24 = *(void *)(v3 + 8);
LABEL_38:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v38 = *(void *)(v3 + 24);
    if (!v38 || !v24)
    {
      unint64_t v39 = 0;
      uint64_t v25 = 0;
      char v376 = 0;
      int v377 = 1;
LABEL_40:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v40 = *(void *)(v3 + 24);
      if (v40 && v39)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v40 + 16))(v40, v25, v39);
        unsigned int v41 = 0;
        uint64_t v25 = *(char **)v3;
        unint64_t v24 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = 0;
        unsigned int v41 = 0;
      }
LABEL_42:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v42 = *(void *)(v3 + 24);
      if (v42)
      {
        if (v24)
        {
          (*(void (**)(uint64_t, char *))(*(void *)v42 + 16))(v42, v25);
          char v43 = 0;
          uint64_t v25 = *(char **)v3;
          unint64_t v24 = *(void *)(v3 + 8);
          goto LABEL_45;
        }
      }
      else
      {
        unint64_t v24 = 0;
      }
      uint64_t v25 = 0;
      char v43 = 0;
LABEL_45:
      int v375 = 1;
      goto LABEL_46;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v38 + 16))(v38, v25);
    char v185 = 0;
    uint64_t v25 = *(char **)v3;
    unint64_t v24 = *(void *)(v3 + 8);
    int v377 = 1;
    long long v184 = *(unsigned __int8 **)(v3 + 16);
LABEL_316:
    if (!v37) {
      char v185 = 0;
    }
    char v376 = v185;
    long long v186 = (unsigned __int8 *)(v184 - (unsigned __int8 *)v25);
    if (v24 <= (unint64_t)v186)
    {
      unint64_t v39 = 0;
      uint64_t v326 = *(void *)(v3 + 24);
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if (v326 && v24)
      {
        (*(void (**)(uint64_t))(*(void *)v326 + 16))(v326);
        uint64_t v25 = *(char **)v3;
        unint64_t v39 = *(void *)(v3 + 8);
      }
      else
      {
        uint64_t v25 = 0;
      }
      goto LABEL_40;
    }
    long long v187 = &v186[(void)v25];
    *(void *)(v3 + 16) = v187 + 1;
    if (!v25)
    {
      unint64_t v39 = v24;
      goto LABEL_40;
    }
    unsigned int v41 = *v187;
    if (v41 >= 2) {
      goto LABEL_42;
    }
    int v375 = 0;
    char v43 = 1;
LABEL_46:
    if (!v41) {
      char v43 = 0;
    }
    char v374 = v43;
    unint64_t v44 = ((*(void *)(v3 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v25;
    if (v24 < v44 || v24 - v44 <= 7)
    {
      unint64_t v216 = 0;
      v217 = 0;
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v218 = *(void *)(v3 + 24);
      if (v218)
      {
        if (v24)
        {
          (*(void (**)(uint64_t))(*(void *)v218 + 16))(v218);
          v217 = *(char **)v3;
          unint64_t v216 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v216 = 0;
          v217 = 0;
        }
      }
    }
    else
    {
      char v45 = (uint64_t *)((*(void *)(v3 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v3 + 16) = v45 + 1;
      if (v25)
      {
        int v373 = 0;
        uint64_t v372 = *v45;
        goto LABEL_52;
      }
      unint64_t v216 = v24;
      v217 = 0;
    }
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v219 = *(void *)(v3 + 24);
    if (v219 && v216)
    {
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v219 + 16))(v219, v217, v216);
      uint64_t v372 = 0;
      uint64_t v25 = *(char **)v3;
      unint64_t v24 = *(void *)(v3 + 8);
    }
    else
    {
      unint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v372 = 0;
    }
    int v373 = 1;
LABEL_52:
    unint64_t v46 = ((*(void *)(v3 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v25;
    if (v24 < v46 || v24 - v46 <= 7)
    {
      unint64_t v220 = 0;
      v221 = 0;
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v222 = *(void *)(v3 + 24);
      if (v222)
      {
        if (v24)
        {
          (*(void (**)(uint64_t))(*(void *)v222 + 16))(v222);
          v221 = *(char **)v3;
          unint64_t v220 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v220 = 0;
          v221 = 0;
        }
      }
    }
    else
    {
      char v47 = (uint64_t *)((*(void *)(v3 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v3 + 16) = v47 + 1;
      if (v25)
      {
        int v371 = 0;
        uint64_t v370 = *v47;
        goto LABEL_56;
      }
      unint64_t v220 = v24;
      v221 = 0;
    }
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v223 = *(void *)(v3 + 24);
    if (!v223 || !v220)
    {
      uint64_t v25 = 0;
      uint64_t v370 = 0;
      unint64_t v24 = 0;
      int v371 = 1;
LABEL_370:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v224 = *(void *)(v3 + 24);
      if (v224)
      {
        if (v24)
        {
          (*(void (**)(uint64_t, char *))(*(void *)v224 + 16))(v224, v25);
          v225 = *(char **)v3;
          unint64_t v24 = *(void *)(v3 + 8);
        }
        else
        {
          v225 = 0;
        }
      }
      else
      {
        v225 = 0;
        unint64_t v24 = 0;
      }
      goto LABEL_372;
    }
    (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v223 + 16))(v223, v221, v220);
    uint64_t v370 = 0;
    uint64_t v25 = *(char **)v3;
    unint64_t v24 = *(void *)(v3 + 8);
    int v371 = 1;
LABEL_56:
    if (v24 <= *(void *)(v3 + 16) - (void)v25) {
      goto LABEL_370;
    }
    char v48 = *(unsigned __int8 **)(v3 + 16);
    *(void *)(v3 + 16) = v48 + 1;
    if (!v25)
    {
      v225 = 0;
LABEL_372:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v226 = *(void *)(v3 + 24);
      if (v226 && v24) {
        (*(void (**)(uint64_t, char *))(*(void *)v226 + 16))(v226, v225);
      }
LABEL_373:
      IPC::Decoder::markInvalid((IPC::Decoder *)v3);
      char v368 = 0;
      int v369 = 1;
      goto LABEL_60;
    }
    unsigned int v49 = *v48;
    if (v49 >= 0xC) {
      goto LABEL_373;
    }
    char v368 = v49;
    int v369 = 0;
LABEL_60:
    uint64_t v50 = *(char **)v3;
    unint64_t v51 = *(void *)(v3 + 8);
    unint64_t v52 = ((*(void *)(v3 + 16) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v3;
    if (v51 < v52 || v51 - v52 <= 3)
    {
      unint64_t v227 = 0;
      v228 = 0;
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v229 = *(void *)(v3 + 24);
      if (v229)
      {
        if (v51)
        {
          (*(void (**)(uint64_t))(*(void *)v229 + 16))(v229);
          v228 = *(char **)v3;
          unint64_t v227 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v227 = 0;
          v228 = 0;
        }
      }
    }
    else
    {
      uint64_t v53 = &v50[v52];
      *(void *)(v3 + 16) = v53 + 4;
      if (v50)
      {
        unsigned int v366 = *(_DWORD *)v53 & 0xFFFFFF00;
        int v367 = 0;
        int v365 = *(_DWORD *)v53;
        goto LABEL_64;
      }
      unint64_t v227 = v51;
      v228 = 0;
    }
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v230 = *(void *)(v3 + 24);
    if (v230 && v227) {
      (*(void (**)(uint64_t, char *))(*(void *)v230 + 16))(v230, v228);
    }
    int v365 = 0;
    unsigned int v366 = 0;
    int v367 = 1;
LABEL_64:
    unsigned int v386 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)v3);
    IPC::Decoder::decode<std::optional<WebKit::CoreIPCString>>((WTF::StringImpl *)v3, (uint64_t)&v460);
    unint64_t v54 = *(void *)(v3 + 8);
    unsigned int v55 = *(char **)v3;
    unint64_t v56 = *(void *)(v3 + 16) - *(void *)v3;
    if (v54 <= v56)
    {
      unint64_t v231 = 0;
      v232 = 0;
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v233 = *(void *)(v3 + 24);
      if (v233)
      {
        if (v54)
        {
          (*(void (**)(uint64_t))(*(void *)v233 + 16))(v233);
          v232 = *(char **)v3;
          unint64_t v231 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v231 = 0;
          v232 = 0;
        }
      }
LABEL_378:
      unint64_t v54 = 0;
      unsigned int v55 = 0;
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v234 = *(void *)(v3 + 24);
      if (v234)
      {
        if (v231)
        {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v234 + 16))(v234, v232, v231);
          unsigned int v55 = *(char **)v3;
          unint64_t v54 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v54 = 0;
          unsigned int v55 = 0;
        }
      }
LABEL_379:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v235 = *(void *)(v3 + 24);
      if (v235 && v54) {
        (*(void (**)(uint64_t, char *))(*(void *)v235 + 16))(v235, v55);
      }
      goto LABEL_721;
    }
    uint64_t v57 = &v55[v56];
    uint64_t v58 = (uint64_t)&v55[v56 + 1];
    *(void *)(v3 + 16) = v58;
    if (!v55)
    {
      unint64_t v231 = v54;
      v232 = 0;
      goto LABEL_378;
    }
    unsigned int v59 = *v57;
    if (v59 >= 2) {
      goto LABEL_379;
    }
    if (!v59)
    {
      LOBYTE(v456) = 0;
      char v458 = 0;
      char v459 = 1;
      goto LABEL_80;
    }
    unint64_t v60 = ((v58 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v55;
    if (v54 < v60 || v54 - v60 <= 7)
    {
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v306 = *(void *)(v3 + 24);
      if (v306)
      {
        (*(void (**)(uint64_t))(*(void *)v306 + 16))(v306);
        v307 = *(char **)v3;
        uint64_t v308 = *(void *)(v3 + 8);
        uint64_t v309 = *(void *)(v3 + 24);
        *(void *)unint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
        if (v309)
        {
          if (v308) {
            (*(void (**)(uint64_t, char *))(*(void *)v309 + 16))(v309, v307);
          }
        }
      }
LABEL_730:
      IPC::Decoder::markInvalid((IPC::Decoder *)v3);
LABEL_721:
      LOBYTE(v456) = 0;
      char v459 = 0;
      IPC::Decoder::markInvalid((IPC::Decoder *)v3);
      goto LABEL_80;
    }
    uint64_t v61 = (unint64_t *)&v55[v60];
    unint64_t v62 = *v61;
    *(void *)(v3 + 16) = v61 + 1;
    uint64_t v454 = 0;
    CFTypeRef cf = 0;
    if (v62 >= 0x8000)
    {
      while (1)
      {
        IPC::Decoder::decode<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>((uint64_t)&v388, (IPC::Decoder *)v3);
        if (!(_BYTE)v391) {
          goto LABEL_729;
        }
        if (HIDWORD(v454) == v454)
        {
          WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>((uint64_t)&cf, (unint64_t)&v388);
        }
        else
        {
          std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::pair[abi:sn180100]((void *)cf + 4 * HIDWORD(v454), (uint64_t *)&v388);
          ++HIDWORD(v454);
        }
        std::__optional_destruct_base<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v388, v327);
        if (!--v62)
        {
          WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&cf, HIDWORD(v454));
          unint64_t v62 = (unint64_t)cf;
          CFTypeRef cf = 0;
          uint64_t v363 = v454;
          goto LABEL_79;
        }
      }
    }
    if (v62)
    {
      int v63 = (const void *)WTF::fastMalloc((WTF *)(32 * v62));
      LODWORD(v454) = v62;
      CFTypeRef cf = v63;
      while (1)
      {
        IPC::Decoder::decode<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>((uint64_t)&v388, (IPC::Decoder *)v3);
        if (!(_BYTE)v391) {
          break;
        }
        if (HIDWORD(v454) == v454)
        {
          WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>((uint64_t)&cf, (unint64_t)&v388);
        }
        else
        {
          std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::pair[abi:sn180100]((void *)cf + 4 * HIDWORD(v454), (uint64_t *)&v388);
          ++HIDWORD(v454);
        }
        std::__optional_destruct_base<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v388, v65);
        if (!--v62)
        {
          unint64_t v62 = (unint64_t)cf;
          uint64_t v66 = v454;
          goto LABEL_78;
        }
      }
LABEL_729:
      std::__optional_destruct_base<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v388, v64);
      WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&cf, v328);
      goto LABEL_730;
    }
    uint64_t v66 = 0;
LABEL_78:
    uint64_t v363 = v66;
    CFTypeRef cf = 0;
LABEL_79:
    uint64_t v454 = 0;
    char v451 = 1;
    WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&cf, v55);
    uint64_t v449 = 0;
    unint64_t v456 = v62;
    uint64_t v450 = 0;
    uint64_t v457 = v363;
    char v458 = 1;
    WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v449, v67);
    char v459 = 1;
LABEL_80:
    IPC::Decoder::decode<std::optional<WebKit::CoreIPCData>>((IPC::Decoder *)v3, (uint64_t)&cf);
    unint64_t v68 = *(void *)(v3 + 8);
    CFTypeRef v69 = *(char **)v3;
    unint64_t v70 = *(void *)(v3 + 16) - *(void *)v3;
    if (v68 <= v70)
    {
      unint64_t v236 = 0;
      v237 = 0;
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v238 = *(void *)(v3 + 24);
      if (v238)
      {
        if (v68)
        {
          (*(void (**)(uint64_t))(*(void *)v238 + 16))(v238);
          v237 = *(char **)v3;
          unint64_t v236 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v236 = 0;
          v237 = 0;
        }
      }
LABEL_383:
      unint64_t v68 = 0;
      CFTypeRef v69 = 0;
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v239 = *(void *)(v3 + 24);
      if (v239)
      {
        if (v236)
        {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v239 + 16))(v239, v237, v236);
          CFTypeRef v69 = *(char **)v3;
          unint64_t v68 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v68 = 0;
          CFTypeRef v69 = 0;
        }
      }
LABEL_384:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v240 = *(void *)(v3 + 24);
      if (v240 && v68) {
        (*(void (**)(uint64_t, char *))(*(void *)v240 + 16))(v240, v69);
      }
LABEL_385:
      LOBYTE(v449) = 0;
      char v452 = 0;
      IPC::Decoder::markInvalid((IPC::Decoder *)v3);
      goto LABEL_85;
    }
    char v71 = &v69[v70];
    *(void *)(v3 + 16) = v71 + 1;
    if (!v69)
    {
      unint64_t v236 = v68;
      v237 = 0;
      goto LABEL_383;
    }
    unsigned int v72 = *v71;
    if (v72 >= 2) {
      goto LABEL_384;
    }
    if (v72)
    {
      IPC::Decoder::decode<WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v388, (IPC::Decoder *)v3);
      if (!v389) {
        goto LABEL_385;
      }
      uint64_t v189 = *((void *)&v388 + 1);
      uint64_t v449 = v388;
      long long v388 = 0uLL;
      uint64_t v450 = v189;
      char v451 = 1;
      WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v388, v188);
      char v452 = 1;
    }
    else
    {
      LOBYTE(v449) = 0;
      char v451 = 0;
      char v452 = 1;
    }
LABEL_85:
    unint64_t v73 = *(void *)(v3 + 8);
    long long v74 = *(char **)v3;
    unint64_t v75 = ((*(void *)(v3 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v3;
    if (v73 < v75 || v73 - v75 <= 7)
    {
      unint64_t v241 = 0;
      v242 = 0;
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v243 = *(void *)(v3 + 24);
      if (v243)
      {
        if (v73)
        {
          (*(void (**)(uint64_t))(*(void *)v243 + 16))(v243);
          v242 = *(char **)v3;
          unint64_t v241 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v241 = 0;
          v242 = 0;
        }
      }
    }
    else
    {
      uint64_t v76 = (uint64_t *)&v74[v75];
      uint64_t v77 = (uint64_t)&v74[v75 + 8];
      *(void *)(v3 + 16) = v77;
      if (v74)
      {
        int v361 = 0;
        uint64_t v360 = *v76;
        goto LABEL_89;
      }
      unint64_t v241 = v73;
      v242 = 0;
    }
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v244 = *(void *)(v3 + 24);
    if (!v244)
    {
      uint64_t v360 = 0;
      unint64_t v241 = 0;
LABEL_389:
      long long v74 = 0;
      int v361 = 1;
LABEL_390:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v245 = *(void *)(v3 + 24);
      if (v245 && v241)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v245 + 16))(v245, v74, v241);
        unsigned int v80 = 0;
        long long v74 = *(char **)v3;
        unint64_t v73 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v73 = 0;
        long long v74 = 0;
        unsigned int v80 = 0;
      }
      goto LABEL_392;
    }
    if (!v241)
    {
      uint64_t v360 = 0;
      goto LABEL_389;
    }
    (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v244 + 16))(v244, v242, v241);
    uint64_t v360 = 0;
    long long v74 = *(char **)v3;
    unint64_t v73 = *(void *)(v3 + 8);
    int v361 = 1;
    uint64_t v77 = *(void *)(v3 + 16);
LABEL_89:
    unint64_t v78 = v77 - (void)v74;
    if (v73 <= v78)
    {
      unint64_t v241 = 0;
      uint64_t v317 = *(void *)(v3 + 24);
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if (v317 && v73)
      {
        (*(void (**)(uint64_t))(*(void *)v317 + 16))(v317);
        long long v74 = *(char **)v3;
        unint64_t v241 = *(void *)(v3 + 8);
      }
      else
      {
        long long v74 = 0;
      }
      goto LABEL_390;
    }
    long long v79 = &v74[v78];
    *(void *)(v3 + 16) = v79 + 1;
    if (!v74)
    {
      unint64_t v241 = v73;
      goto LABEL_390;
    }
    unsigned int v80 = *v79;
    if (v80 < 2)
    {
      int v359 = 0;
      char v81 = 1;
      goto LABEL_93;
    }
LABEL_392:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v246 = *(void *)(v3 + 24);
    if (v246)
    {
      if (v73)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v246 + 16))(v246, v74);
        char v81 = 0;
        long long v74 = *(char **)v3;
        unint64_t v73 = *(void *)(v3 + 8);
        goto LABEL_395;
      }
    }
    else
    {
      unint64_t v73 = 0;
    }
    long long v74 = 0;
    char v81 = 0;
LABEL_395:
    int v359 = 1;
LABEL_93:
    if (!v80) {
      char v81 = 0;
    }
    char v358 = v81;
    unint64_t v82 = ((*(void *)(v3 + 16) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v74;
    if (v73 < v82 || v73 - v82 <= 7)
    {
      unint64_t v247 = 0;
      v248 = 0;
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v249 = *(void *)(v3 + 24);
      if (v249)
      {
        if (v73)
        {
          (*(void (**)(uint64_t))(*(void *)v249 + 16))(v249);
          v248 = *(char **)v3;
          unint64_t v247 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v247 = 0;
          v248 = 0;
        }
      }
    }
    else
    {
      id v83 = (uint64_t *)((*(void *)(v3 + 16) + 7) & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v3 + 16) = v83 + 1;
      if (v74)
      {
        int v357 = 0;
        uint64_t v356 = *v83;
        goto LABEL_99;
      }
      unint64_t v247 = v73;
      v248 = 0;
    }
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v250 = *(void *)(v3 + 24);
    if (!v250 || !v247)
    {
      long long v74 = 0;
      uint64_t v356 = 0;
      unint64_t v73 = 0;
      int v357 = 1;
LABEL_399:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v251 = *(void *)(v3 + 24);
      if (v251)
      {
        if (v73)
        {
          (*(void (**)(uint64_t, char *))(*(void *)v251 + 16))(v251, v74);
          v252 = *(char **)v3;
          unint64_t v73 = *(void *)(v3 + 8);
        }
        else
        {
          v252 = 0;
        }
      }
      else
      {
        v252 = 0;
        unint64_t v73 = 0;
      }
      goto LABEL_401;
    }
    (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v250 + 16))(v250, v248, v247);
    uint64_t v356 = 0;
    long long v74 = *(char **)v3;
    unint64_t v73 = *(void *)(v3 + 8);
    int v357 = 1;
LABEL_99:
    if (v73 <= *(void *)(v3 + 16) - (void)v74) {
      goto LABEL_399;
    }
    uint64_t v84 = *(char **)(v3 + 16);
    *(void *)(v3 + 16) = v84 + 1;
    if (v74)
    {
      int v355 = 0;
      char v85 = *v84;
      goto LABEL_102;
    }
    v252 = 0;
LABEL_401:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v253 = *(void *)(v3 + 24);
    if (v253 && v73) {
      (*(void (**)(uint64_t, char *))(*(void *)v253 + 16))(v253, v252);
    }
    IPC::Decoder::markInvalid((IPC::Decoder *)v3);
    char v85 = 0;
    int v355 = 1;
LABEL_102:
    IPC::Decoder::decode<std::optional<WebKit::CoreIPCString>>((WTF::StringImpl *)v3, (uint64_t)&v446);
    int v364 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)v3);
    int v362 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)v3);
    int v353 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)v3);
    char v354 = v85;
    unint64_t v86 = *(void *)(v3 + 8);
    long long v87 = *(char **)v3;
    unint64_t v88 = *(void *)(v3 + 16) - *(void *)v3;
    if (v86 <= v88)
    {
      unint64_t v254 = 0;
      v255 = 0;
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v256 = *(void *)(v3 + 24);
      if (v256)
      {
        if (v86)
        {
          (*(void (**)(uint64_t))(*(void *)v256 + 16))(v256);
          v255 = *(char **)v3;
          unint64_t v254 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v254 = 0;
          v255 = 0;
        }
      }
      goto LABEL_404;
    }
    uint64_t v89 = &v87[v88];
    *(void *)(v3 + 16) = v89 + 1;
    if (!v87)
    {
      unint64_t v254 = v86;
      v255 = 0;
LABEL_404:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v257 = *(void *)(v3 + 24);
      if (v257 && v254)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v257 + 16))(v257, v255, v254);
        unsigned int v90 = 0;
        long long v87 = *(char **)v3;
        unint64_t v86 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v86 = 0;
        long long v87 = 0;
        unsigned int v90 = 0;
      }
      goto LABEL_406;
    }
    unsigned int v90 = *v89;
    if (v90 < 2)
    {
      int v352 = 0;
      char v91 = 1;
      goto LABEL_106;
    }
LABEL_406:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v258 = *(void *)(v3 + 24);
    if (!v258)
    {
      long long v87 = 0;
      char v351 = 0;
      unint64_t v86 = 0;
      goto LABEL_408;
    }
    if (!v86)
    {
      long long v87 = 0;
      char v351 = 0;
LABEL_408:
      int v352 = 1;
LABEL_409:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v259 = *(void *)(v3 + 24);
      if (v259)
      {
        if (v86)
        {
          (*(void (**)(uint64_t, char *))(*(void *)v259 + 16))(v259, v87);
          v260 = *(char **)v3;
          unint64_t v86 = *(void *)(v3 + 8);
        }
        else
        {
          v260 = 0;
        }
      }
      else
      {
        v260 = 0;
        unint64_t v86 = 0;
      }
LABEL_411:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v261 = *(void *)(v3 + 24);
      if (v261)
      {
        if (v86)
        {
          (*(void (**)(uint64_t, char *))(*(void *)v261 + 16))(v261, v260);
          long long v87 = *(char **)v3;
          unint64_t v86 = *(void *)(v3 + 8);
        }
        else
        {
          long long v87 = 0;
        }
      }
      else
      {
        long long v87 = 0;
        unint64_t v86 = 0;
      }
      goto LABEL_413;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v258 + 16))(v258, v87);
    char v91 = 0;
    long long v87 = *(char **)v3;
    unint64_t v86 = *(void *)(v3 + 8);
    int v352 = 1;
LABEL_106:
    if (!v90) {
      char v91 = 0;
    }
    char v351 = v91;
    if (v86 <= *(void *)(v3 + 16) - (void)v87) {
      goto LABEL_409;
    }
    long long v92 = *(unsigned __int8 **)(v3 + 16);
    *(void *)(v3 + 16) = v92 + 1;
    if (!v87)
    {
      v260 = 0;
      goto LABEL_411;
    }
    unsigned int v93 = *v92;
    if (v93 < 2)
    {
      BOOL v349 = v93 != 0;
      int v350 = 0;
      goto LABEL_112;
    }
LABEL_413:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v262 = *(void *)(v3 + 24);
    if (v262 && v86) {
      (*(void (**)(uint64_t, char *))(*(void *)v262 + 16))(v262, v87);
    }
    IPC::Decoder::markInvalid((IPC::Decoder *)v3);
    BOOL v349 = 0;
    int v350 = 1;
LABEL_112:
    unint64_t v94 = *(void *)(v3 + 8);
    long long v95 = *(char **)v3;
    unint64_t v96 = *(void *)(v3 + 16) - *(void *)v3;
    if (v94 <= v96)
    {
      unint64_t v263 = 0;
      v264 = 0;
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v265 = *(void *)(v3 + 24);
      if (v265)
      {
        if (v94)
        {
          (*(void (**)(uint64_t))(*(void *)v265 + 16))(v265);
          v264 = *(char **)v3;
          unint64_t v263 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v263 = 0;
          v264 = 0;
        }
      }
      goto LABEL_416;
    }
    v97 = &v95[v96];
    *(void *)(v3 + 16) = v97 + 1;
    if (!v95)
    {
      unint64_t v263 = v94;
      v264 = 0;
LABEL_416:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v266 = *(void *)(v3 + 24);
      if (v266 && v263)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v266 + 16))(v266, v264, v263);
        unsigned int v98 = 0;
        long long v95 = *(char **)v3;
        unint64_t v94 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v94 = 0;
        long long v95 = 0;
        unsigned int v98 = 0;
      }
      goto LABEL_418;
    }
    unsigned int v98 = *v97;
    if (v98 < 2)
    {
      int v348 = 0;
      char v99 = 1;
      goto LABEL_116;
    }
LABEL_418:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v267 = *(void *)(v3 + 24);
    if (v267 && v94) {
      (*(void (**)(uint64_t, char *))(*(void *)v267 + 16))(v267, v95);
    }
    char v99 = 0;
    int v348 = 1;
LABEL_116:
    if (!v98) {
      char v99 = 0;
    }
    char v347 = v99;
    IPC::Decoder::decode<std::optional<WebKit::CoreIPCString>>((WTF::StringImpl *)v3, (uint64_t)&v443);
    unint64_t v100 = *(void *)(v3 + 8);
    long long v101 = *(char **)v3;
    unint64_t v102 = *(void *)(v3 + 16) - *(void *)v3;
    if (v100 <= v102)
    {
      unint64_t v268 = 0;
      v269 = 0;
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v270 = *(void *)(v3 + 24);
      if (v270)
      {
        if (v100)
        {
          (*(void (**)(uint64_t))(*(void *)v270 + 16))(v270);
          v269 = *(char **)v3;
          unint64_t v268 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v268 = 0;
          v269 = 0;
        }
      }
      goto LABEL_421;
    }
    long long v103 = &v101[v102];
    uint64_t v104 = (uint64_t)&v101[v102 + 1];
    *(void *)(v3 + 16) = v104;
    if (!v101)
    {
      unint64_t v268 = v100;
      v269 = 0;
LABEL_421:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v271 = *(void *)(v3 + 24);
      if (v271 && v268)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v271 + 16))(v271, v269, v268);
        unsigned int v105 = 0;
        long long v101 = *(char **)v3;
        unint64_t v100 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v100 = 0;
        long long v101 = 0;
        unsigned int v105 = 0;
      }
      goto LABEL_423;
    }
    unsigned int v105 = *v103;
    if (v105 < 2)
    {
      int v346 = 0;
      char v106 = 1;
      goto LABEL_122;
    }
LABEL_423:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v272 = *(void *)(v3 + 24);
    if (!v272 || !v100)
    {
      char v344 = 0;
      unint64_t v273 = 0;
      long long v101 = 0;
      int v346 = 1;
LABEL_425:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v274 = *(void *)(v3 + 24);
      if (v274 && v273)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v274 + 16))(v274, v101, v273);
        unsigned int v110 = 0;
        long long v101 = *(char **)v3;
        unint64_t v100 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v100 = 0;
        long long v101 = 0;
        unsigned int v110 = 0;
      }
      goto LABEL_427;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v272 + 16))(v272, v101);
    char v106 = 0;
    long long v101 = *(char **)v3;
    unint64_t v100 = *(void *)(v3 + 8);
    int v346 = 1;
    uint64_t v104 = *(void *)(v3 + 16);
LABEL_122:
    if (!v105) {
      char v106 = 0;
    }
    char v344 = v106;
    unint64_t v107 = v104 - (void)v101;
    if (v100 <= v107)
    {
      unint64_t v273 = 0;
      uint64_t v319 = *(void *)(v3 + 24);
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if (v319 && v100)
      {
        (*(void (**)(uint64_t))(*(void *)v319 + 16))(v319);
        long long v101 = *(char **)v3;
        unint64_t v273 = *(void *)(v3 + 8);
      }
      else
      {
        long long v101 = 0;
      }
      goto LABEL_425;
    }
    uint64_t v108 = &v101[v107];
    uint64_t v109 = (uint64_t)&v101[v107 + 1];
    *(void *)(v3 + 16) = v109;
    if (!v101)
    {
      unint64_t v273 = v100;
      goto LABEL_425;
    }
    unsigned int v110 = *v108;
    if (v110 < 2)
    {
      int v343 = 0;
      char v111 = 1;
      goto LABEL_128;
    }
LABEL_427:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v275 = *(void *)(v3 + 24);
    if (!v275 || !v100)
    {
      unint64_t v276 = 0;
      long long v101 = 0;
      char v342 = 0;
      int v343 = 1;
LABEL_429:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v277 = *(void *)(v3 + 24);
      if (v277 && v276)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v277 + 16))(v277, v101, v276);
        unsigned int v114 = 0;
        long long v101 = *(char **)v3;
        unint64_t v100 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v100 = 0;
        long long v101 = 0;
        unsigned int v114 = 0;
      }
      goto LABEL_431;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v275 + 16))(v275, v101);
    char v111 = 0;
    long long v101 = *(char **)v3;
    unint64_t v100 = *(void *)(v3 + 8);
    int v343 = 1;
    uint64_t v109 = *(void *)(v3 + 16);
LABEL_128:
    if (!v110) {
      char v111 = 0;
    }
    char v342 = v111;
    unint64_t v112 = v109 - (void)v101;
    if (v100 <= v112)
    {
      unint64_t v276 = 0;
      uint64_t v318 = *(void *)(v3 + 24);
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if (v318 && v100)
      {
        (*(void (**)(uint64_t))(*(void *)v318 + 16))(v318);
        long long v101 = *(char **)v3;
        unint64_t v276 = *(void *)(v3 + 8);
      }
      else
      {
        long long v101 = 0;
      }
      goto LABEL_429;
    }
    long long v113 = &v101[v112];
    *(void *)(v3 + 16) = v113 + 1;
    if (!v101)
    {
      unint64_t v276 = v100;
      goto LABEL_429;
    }
    unsigned int v114 = *v113;
    if (v114 < 2)
    {
      int v341 = 0;
      char v115 = 1;
      goto LABEL_134;
    }
LABEL_431:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v278 = *(void *)(v3 + 24);
    if (v278 && v100) {
      (*(void (**)(uint64_t, char *))(*(void *)v278 + 16))(v278, v101);
    }
    char v115 = 0;
    int v341 = 1;
LABEL_134:
    if (!v114) {
      char v115 = 0;
    }
    char v340 = v115;
    int v345 = IPC::Decoder::decode<std::optional<BOOL>>((IPC::Decoder *)v3);
    unint64_t v117 = *(void *)(v3 + 8);
    unint64_t v118 = *(char **)v3;
    unint64_t v119 = *(void *)(v3 + 16) - *(void *)v3;
    if (v117 <= v119)
    {
      unint64_t v279 = 0;
      v280 = 0;
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v281 = *(void *)(v3 + 24);
      if (v281)
      {
        if (v117)
        {
          (*(void (**)(uint64_t))(*(void *)v281 + 16))(v281);
          v280 = *(char **)v3;
          unint64_t v279 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v279 = 0;
          v280 = 0;
        }
      }
      goto LABEL_434;
    }
    v120 = &v118[v119];
    uint64_t v121 = (uint64_t)&v118[v119 + 1];
    *(void *)(v3 + 16) = v121;
    if (!v118)
    {
      unint64_t v279 = v117;
      v280 = 0;
LABEL_434:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v282 = *(void *)(v3 + 24);
      if (v282 && v279)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v282 + 16))(v282, v280, v279);
        unsigned int v122 = 0;
        unint64_t v118 = *(char **)v3;
        unint64_t v117 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v117 = 0;
        unint64_t v118 = 0;
        unsigned int v122 = 0;
      }
      goto LABEL_436;
    }
    unsigned int v122 = *v120;
    if (v122 < 2)
    {
      int v339 = 0;
      char v123 = 1;
      goto LABEL_140;
    }
LABEL_436:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v283 = *(void *)(v3 + 24);
    if (!v283 || !v117)
    {
      unint64_t v284 = 0;
      unint64_t v118 = 0;
      char v338 = 0;
      int v339 = 1;
LABEL_438:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v285 = *(void *)(v3 + 24);
      if (v285 && v284)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v285 + 16))(v285, v118, v284);
        unsigned int v127 = 0;
        unint64_t v118 = *(char **)v3;
        unint64_t v117 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v117 = 0;
        unint64_t v118 = 0;
        unsigned int v127 = 0;
      }
      goto LABEL_440;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v283 + 16))(v283, v118);
    char v123 = 0;
    unint64_t v118 = *(char **)v3;
    unint64_t v117 = *(void *)(v3 + 8);
    int v339 = 1;
    uint64_t v121 = *(void *)(v3 + 16);
LABEL_140:
    if (!v122) {
      char v123 = 0;
    }
    char v338 = v123;
    unint64_t v124 = v121 - (void)v118;
    if (v117 <= v124)
    {
      unint64_t v284 = 0;
      uint64_t v325 = *(void *)(v3 + 24);
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if (v325 && v117)
      {
        (*(void (**)(uint64_t))(*(void *)v325 + 16))(v325);
        unint64_t v118 = *(char **)v3;
        unint64_t v284 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v118 = 0;
      }
      goto LABEL_438;
    }
    unint64_t v125 = &v118[v124];
    uint64_t v126 = (uint64_t)&v118[v124 + 1];
    *(void *)(v3 + 16) = v126;
    if (!v118)
    {
      unint64_t v284 = v117;
      goto LABEL_438;
    }
    unsigned int v127 = *v125;
    if (v127 < 2)
    {
      int v337 = 0;
      char v128 = 1;
      goto LABEL_146;
    }
LABEL_440:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v286 = *(void *)(v3 + 24);
    if (!v286 || !v117)
    {
      unint64_t v287 = 0;
      unint64_t v118 = 0;
      char v336 = 0;
      int v337 = 1;
LABEL_442:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v288 = *(void *)(v3 + 24);
      if (v288 && v287)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v288 + 16))(v288, v118, v287);
        unsigned int v132 = 0;
        unint64_t v118 = *(char **)v3;
        unint64_t v117 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v117 = 0;
        unint64_t v118 = 0;
        unsigned int v132 = 0;
      }
      goto LABEL_444;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v286 + 16))(v286, v118);
    char v128 = 0;
    unint64_t v118 = *(char **)v3;
    unint64_t v117 = *(void *)(v3 + 8);
    int v337 = 1;
    uint64_t v126 = *(void *)(v3 + 16);
LABEL_146:
    if (!v127) {
      char v128 = 0;
    }
    char v336 = v128;
    unint64_t v129 = v126 - (void)v118;
    if (v117 <= v129)
    {
      unint64_t v287 = 0;
      uint64_t v324 = *(void *)(v3 + 24);
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if (v324 && v117)
      {
        (*(void (**)(uint64_t))(*(void *)v324 + 16))(v324);
        unint64_t v118 = *(char **)v3;
        unint64_t v287 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v118 = 0;
      }
      goto LABEL_442;
    }
    uint64_t v130 = &v118[v129];
    uint64_t v131 = (uint64_t)&v118[v129 + 1];
    *(void *)(v3 + 16) = v131;
    if (!v118)
    {
      unint64_t v287 = v117;
      goto LABEL_442;
    }
    unsigned int v132 = *v130;
    if (v132 < 2)
    {
      int v335 = 0;
      char v133 = 1;
      goto LABEL_152;
    }
LABEL_444:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v289 = *(void *)(v3 + 24);
    if (!v289 || !v117)
    {
      unint64_t v290 = 0;
      unint64_t v118 = 0;
      char v334 = 0;
      int v335 = 1;
LABEL_446:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v291 = *(void *)(v3 + 24);
      if (v291 && v290)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v291 + 16))(v291, v118, v290);
        unsigned int v137 = 0;
        unint64_t v118 = *(char **)v3;
        unint64_t v117 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v117 = 0;
        unint64_t v118 = 0;
        unsigned int v137 = 0;
      }
      goto LABEL_448;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v289 + 16))(v289, v118);
    char v133 = 0;
    unint64_t v118 = *(char **)v3;
    unint64_t v117 = *(void *)(v3 + 8);
    int v335 = 1;
    uint64_t v131 = *(void *)(v3 + 16);
LABEL_152:
    if (!v132) {
      char v133 = 0;
    }
    char v334 = v133;
    unint64_t v134 = v131 - (void)v118;
    if (v117 <= v134)
    {
      unint64_t v290 = 0;
      uint64_t v323 = *(void *)(v3 + 24);
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if (v323 && v117)
      {
        (*(void (**)(uint64_t))(*(void *)v323 + 16))(v323);
        unint64_t v118 = *(char **)v3;
        unint64_t v290 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v118 = 0;
      }
      goto LABEL_446;
    }
    v135 = &v118[v134];
    uint64_t v136 = (uint64_t)&v118[v134 + 1];
    *(void *)(v3 + 16) = v136;
    if (!v118)
    {
      unint64_t v290 = v117;
      goto LABEL_446;
    }
    unsigned int v137 = *v135;
    if (v137 < 2)
    {
      int v333 = 0;
      char v138 = 1;
      goto LABEL_158;
    }
LABEL_448:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v292 = *(void *)(v3 + 24);
    if (!v292 || !v117)
    {
      unint64_t v293 = 0;
      unint64_t v118 = 0;
      char v332 = 0;
      int v333 = 1;
LABEL_450:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v294 = *(void *)(v3 + 24);
      if (v294 && v293)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v294 + 16))(v294, v118, v293);
        unsigned int v142 = 0;
        unint64_t v118 = *(char **)v3;
        unint64_t v117 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v117 = 0;
        unint64_t v118 = 0;
        unsigned int v142 = 0;
      }
      goto LABEL_452;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v292 + 16))(v292, v118);
    char v138 = 0;
    unint64_t v118 = *(char **)v3;
    unint64_t v117 = *(void *)(v3 + 8);
    int v333 = 1;
    uint64_t v136 = *(void *)(v3 + 16);
LABEL_158:
    if (!v137) {
      char v138 = 0;
    }
    char v332 = v138;
    unint64_t v139 = v136 - (void)v118;
    if (v117 <= v139)
    {
      unint64_t v293 = 0;
      uint64_t v322 = *(void *)(v3 + 24);
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if (v322 && v117)
      {
        (*(void (**)(uint64_t))(*(void *)v322 + 16))(v322);
        unint64_t v118 = *(char **)v3;
        unint64_t v293 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v118 = 0;
      }
      goto LABEL_450;
    }
    long long v140 = &v118[v139];
    uint64_t v141 = (uint64_t)&v118[v139 + 1];
    *(void *)(v3 + 16) = v141;
    if (!v118)
    {
      unint64_t v293 = v117;
      goto LABEL_450;
    }
    unsigned int v142 = *v140;
    if (v142 < 2)
    {
      int v143 = 0;
      char v144 = 1;
      goto LABEL_164;
    }
LABEL_452:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v295 = *(void *)(v3 + 24);
    if (!v295 || !v117)
    {
      char v145 = 0;
      unint64_t v296 = 0;
      unint64_t v118 = 0;
      int v143 = 1;
LABEL_454:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v297 = *(void *)(v3 + 24);
      if (v297 && v296)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v297 + 16))(v297, v118, v296);
        unsigned int v149 = 0;
        unint64_t v118 = *(char **)v3;
        unint64_t v117 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v117 = 0;
        unint64_t v118 = 0;
        unsigned int v149 = 0;
      }
      goto LABEL_456;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v295 + 16))(v295, v118);
    char v144 = 0;
    unint64_t v118 = *(char **)v3;
    unint64_t v117 = *(void *)(v3 + 8);
    int v143 = 1;
    uint64_t v141 = *(void *)(v3 + 16);
LABEL_164:
    if (v142) {
      char v145 = v144;
    }
    else {
      char v145 = 0;
    }
    unint64_t v146 = v141 - (void)v118;
    if (v117 <= v146)
    {
      unint64_t v296 = 0;
      uint64_t v321 = *(void *)(v3 + 24);
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if (v321 && v117)
      {
        (*(void (**)(uint64_t))(*(void *)v321 + 16))(v321);
        unint64_t v118 = *(char **)v3;
        unint64_t v296 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v118 = 0;
      }
      goto LABEL_454;
    }
    v147 = &v118[v146];
    uint64_t v148 = (uint64_t)&v118[v146 + 1];
    *(void *)(v3 + 16) = v148;
    if (!v118)
    {
      unint64_t v296 = v117;
      goto LABEL_454;
    }
    unsigned int v149 = *v147;
    if (v149 < 2)
    {
      int v150 = 0;
      char v151 = 1;
      goto LABEL_171;
    }
LABEL_456:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v298 = *(void *)(v3 + 24);
    if (!v298 || !v117)
    {
      char v152 = 0;
      unint64_t v299 = 0;
      unint64_t v118 = 0;
      int v150 = 1;
LABEL_458:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v300 = *(void *)(v3 + 24);
      if (v300 && v299)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v300 + 16))(v300, v118, v299);
        unsigned int v155 = 0;
        unint64_t v118 = *(char **)v3;
        unint64_t v117 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v117 = 0;
        unint64_t v118 = 0;
        unsigned int v155 = 0;
      }
      goto LABEL_460;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v298 + 16))(v298, v118);
    char v151 = 0;
    unint64_t v118 = *(char **)v3;
    unint64_t v117 = *(void *)(v3 + 8);
    int v150 = 1;
    uint64_t v148 = *(void *)(v3 + 16);
LABEL_171:
    if (v149) {
      char v152 = v151;
    }
    else {
      char v152 = 0;
    }
    unint64_t v153 = v148 - (void)v118;
    if (v117 <= v153)
    {
      unint64_t v299 = 0;
      uint64_t v320 = *(void *)(v3 + 24);
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if (v320 && v117)
      {
        (*(void (**)(uint64_t))(*(void *)v320 + 16))(v320);
        unint64_t v118 = *(char **)v3;
        unint64_t v299 = *(void *)(v3 + 8);
      }
      else
      {
        unint64_t v118 = 0;
      }
      goto LABEL_458;
    }
    v154 = &v118[v153];
    *(void *)(v3 + 16) = v154 + 1;
    if (!v118)
    {
      unint64_t v299 = v117;
      goto LABEL_458;
    }
    unsigned int v155 = *v154;
    if (v155 < 2)
    {
      int v156 = 0;
      char v157 = 1;
      goto LABEL_178;
    }
LABEL_460:
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    uint64_t v301 = *(void *)(v3 + 24);
    if (!v301)
    {
      unint64_t v118 = 0;
      char v158 = 0;
      unint64_t v117 = 0;
LABEL_462:
      int v156 = 1;
LABEL_463:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v302 = *(void *)(v3 + 24);
      if (v302)
      {
        if (v117)
        {
          (*(void (**)(uint64_t, char *))(*(void *)v302 + 16))(v302, v118);
          v303 = *(char **)v3;
          unint64_t v117 = *(void *)(v3 + 8);
        }
        else
        {
          v303 = 0;
        }
      }
      else
      {
        v303 = 0;
        unint64_t v117 = 0;
      }
LABEL_465:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v304 = *(void *)(v3 + 24);
      if (v304)
      {
        if (v117)
        {
          (*(void (**)(uint64_t, char *))(*(void *)v304 + 16))(v304, v303);
          unint64_t v118 = *(char **)v3;
          unint64_t v117 = *(void *)(v3 + 8);
        }
        else
        {
          unint64_t v118 = 0;
        }
      }
      else
      {
        unint64_t v118 = 0;
        unint64_t v117 = 0;
      }
LABEL_467:
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v305 = *(void *)(v3 + 24);
      if (v305 && v117) {
        (*(void (**)(uint64_t, char *))(*(void *)v305 + 16))(v305, v118);
      }
      goto LABEL_723;
    }
    if (!v117)
    {
      unint64_t v118 = 0;
      char v158 = 0;
      goto LABEL_462;
    }
    (*(void (**)(uint64_t, char *))(*(void *)v301 + 16))(v301, v118);
    char v157 = 0;
    unint64_t v118 = *(char **)v3;
    unint64_t v117 = *(void *)(v3 + 8);
    int v156 = 1;
LABEL_178:
    if (v155) {
      char v158 = v157;
    }
    else {
      char v158 = 0;
    }
    if (v117 <= *(void *)(v3 + 16) - (void)v118) {
      goto LABEL_463;
    }
    long long v159 = *(unsigned __int8 **)(v3 + 16);
    long long v160 = v159 + 1;
    *(void *)(v3 + 16) = v159 + 1;
    if (!v118)
    {
      v303 = 0;
      goto LABEL_465;
    }
    unsigned int v161 = *v159;
    if (v161 >= 2) {
      goto LABEL_467;
    }
    if (!v161)
    {
      int v168 = 0;
      long long v166 = 0;
      int v2 = 1;
LABEL_307:
      uint64_t v330 = v116;
      goto LABEL_196;
    }
    unint64_t v162 = ((unint64_t)(v160 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v118;
    if (v117 < v162 || v117 - v162 <= 7)
    {
      *(void *)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      uint64_t v310 = *(void *)(v3 + 24);
      if (v310)
      {
        (*(void (**)(uint64_t))(*(void *)v310 + 16))(v310);
        v311 = *(char **)v3;
        uint64_t v312 = *(void *)(v3 + 8);
        uint64_t v313 = *(void *)(v3 + 24);
        *(void *)unint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
        if (v313)
        {
          if (v312) {
            (*(void (**)(uint64_t, char *))(*(void *)v313 + 16))(v313, v311);
          }
        }
      }
LABEL_722:
      IPC::Decoder::markInvalid((IPC::Decoder *)v3);
LABEL_723:
      IPC::Decoder::markInvalid((IPC::Decoder *)v3);
      long long v166 = 0;
      int v168 = 1;
      goto LABEL_307;
    }
    long long v163 = (unint64_t *)&v118[v162];
    unint64_t v164 = *v163;
    *(void *)(v3 + 16) = v163 + 1;
    v474 = 0;
    uint64_t v475 = 0;
    if (v164 >= 0x10000)
    {
      while (1)
      {
        IPC::Decoder::decode<WebKit::CoreIPCNumber>((uint64_t *)v3, &v388);
        if (!v389) {
          goto LABEL_737;
        }
        if (HIDWORD(v475) == v475)
        {
          WTF::Vector<WebKit::CoreIPCNumber,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCNumber>((uint64_t)&v474, (unint64_t)&v388);
        }
        else
        {
          *((_OWORD *)v474 + HIDWORD(v475)) = v388;
          ++HIDWORD(v475);
        }
        if (!--v164)
        {
          WTF::Vector<WebKit::CoreIPCNumber,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v474, HIDWORD(v475));
LABEL_194:
          long long v166 = v474;
          uint64_t v167 = v475;
          goto LABEL_195;
        }
      }
    }
    if (v164)
    {
      uint64_t v165 = WTF::fastMalloc((WTF *)(16 * v164));
      LODWORD(v475) = v164;
      v474 = (WTF *)v165;
      while (1)
      {
        IPC::Decoder::decode<WebKit::CoreIPCNumber>((uint64_t *)v3, &v388);
        if (!v389) {
          break;
        }
        if (HIDWORD(v475) == v475)
        {
          WTF::Vector<WebKit::CoreIPCNumber,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCNumber>((uint64_t)&v474, (unint64_t)&v388);
        }
        else
        {
          *((_OWORD *)v474 + HIDWORD(v475)) = v388;
          ++HIDWORD(v475);
        }
        if (!--v164) {
          goto LABEL_194;
        }
      }
LABEL_737:
      v329 = v474;
      if (v474)
      {
        v474 = 0;
        LODWORD(v475) = 0;
        WTF::fastFree(v329, v118);
      }
      goto LABEL_722;
    }
    long long v166 = 0;
    uint64_t v167 = 0;
LABEL_195:
    uint64_t v330 = v167;
    int v168 = 0;
    int v2 = 0;
LABEL_196:
    if (!*(void *)v3)
    {
      *a1 = 0;
      a1[376] = 0;
      goto LABEL_257;
    }
    if (v473)
    {
      LOBYTE(v388) = 0;
      char v389 = 0;
      if (v472)
      {
        *(void *)&long long v388 = v470;
        uint64_t v169 = v471;
        uint64_t v470 = 0;
        uint64_t v471 = 0;
        *((void *)&v388 + 1) = v169;
        char v389 = 1;
      }
      unint64_t v3 = v386;
      if (!v387)
      {
        char v390 = v385;
        if (v469)
        {
          long long v170 = v466;
          v466 = 0;
          v391 = v170;
          long long v392 = v467;
          long long v393 = v468;
          LODWORD(v467) = v467 & 0xFFFFFFFE;
          if (!v384)
          {
            uint64_t v394 = v383;
            if (!v382)
            {
              char v395 = v381;
              if (v465)
              {
                std::__optional_move_base<WebKit::CoreIPCURL,false>::__optional_move_base[abi:sn180100](v396, (uint64_t)v463);
                if (!v379)
                {
                  v396[48] = v378;
                  if (HIWORD(v380))
                  {
                    __int16 v397 = v380;
                    if (!v377)
                    {
                      char v398 = v376;
                      if (!v375)
                      {
                        char v399 = v374;
                        if (!v373)
                        {
                          uint64_t v400 = v372;
                          if (!v371)
                          {
                            uint64_t v401 = v370;
                            if (!v369)
                            {
                              char v402 = v368;
                              if (!v367)
                              {
                                int v403 = v365 | v366;
                                if ((v386 & 0xFF0000) != 0)
                                {
                                  __int16 v404 = v386;
                                  if (v462)
                                  {
                                    LOBYTE(v405) = 0;
                                    char v406 = 0;
                                    if (v461)
                                    {
                                      uint64_t v180 = v460;
                                      v460 = 0;
                                      v405 = v180;
                                      char v406 = 1;
                                    }
                                    if (v459)
                                    {
                                      LOBYTE(v407) = 0;
                                      char v409 = 0;
                                      if (v458)
                                      {
                                        unint64_t v171 = v456;
                                        unint64_t v456 = 0;
                                        unint64_t v407 = v171;
                                        uint64_t v172 = v457;
                                        uint64_t v457 = 0;
                                        uint64_t v408 = v172;
                                        char v409 = 1;
                                      }
                                      if (v455)
                                      {
                                        LOBYTE(v410) = 0;
                                        char v411 = 0;
                                        if ((_BYTE)v454)
                                        {
                                          CFTypeRef v314 = cf;
                                          CFTypeRef cf = 0;
                                          CFTypeRef v410 = v314;
                                          char v411 = 1;
                                        }
                                        if (v452)
                                        {
                                          LOBYTE(v412) = 0;
                                          char v414 = 0;
                                          if (v451)
                                          {
                                            uint64_t v315 = v449;
                                            uint64_t v449 = 0;
                                            uint64_t v412 = v315;
                                            uint64_t v316 = v450;
                                            uint64_t v450 = 0;
                                            uint64_t v413 = v316;
                                            char v414 = 1;
                                          }
                                          if (!v361)
                                          {
                                            uint64_t v415 = v360;
                                            if (!v359)
                                            {
                                              char v416 = v358;
                                              if (!v357)
                                              {
                                                uint64_t v417 = v356;
                                                if (!v355)
                                                {
                                                  char v418 = v354;
                                                  if (v448)
                                                  {
                                                    LOBYTE(v419) = 0;
                                                    char v420 = 0;
                                                    if (v447)
                                                    {
                                                      long long v181 = v446;
                                                      v446 = 0;
                                                      v419 = v181;
                                                      char v420 = 1;
                                                    }
                                                    if ((v364 & 0xFF0000) != 0)
                                                    {
                                                      __int16 v421 = v364;
                                                      if ((v362 & 0xFF0000) != 0)
                                                      {
                                                        __int16 v422 = v362;
                                                        if ((v353 & 0xFF0000) != 0)
                                                        {
                                                          __int16 v423 = v353;
                                                          if (!v352)
                                                          {
                                                            char v424 = v351;
                                                            if (!v350)
                                                            {
                                                              BOOL v425 = v349;
                                                              if (!v348)
                                                              {
                                                                char v426 = v347;
                                                                if (v445)
                                                                {
                                                                  LOBYTE(v427) = 0;
                                                                  char v428 = 0;
                                                                  if (v444)
                                                                  {
                                                                    uint64_t v182 = v443;
                                                                    v443 = 0;
                                                                    v427 = v182;
                                                                    char v428 = 1;
                                                                  }
                                                                  if (!v346)
                                                                  {
                                                                    char v429 = v344;
                                                                    if (!v343)
                                                                    {
                                                                      char v430 = v342;
                                                                      if (!v341)
                                                                      {
                                                                        char v431 = v340;
                                                                        if ((v345 & 0xFF0000) != 0)
                                                                        {
                                                                          __int16 v432 = v345;
                                                                          if (!v339)
                                                                          {
                                                                            char v433 = v338;
                                                                            if (!v337)
                                                                            {
                                                                              char v434 = v336;
                                                                              if (!v335)
                                                                              {
                                                                                char v435 = v334;
                                                                                if (!v333)
                                                                                {
                                                                                  char v436 = v332;
                                                                                  if (!v143)
                                                                                  {
                                                                                    char v437 = v145;
                                                                                    if (!v150)
                                                                                    {
                                                                                      char v438 = v152;
                                                                                      if (!v156)
                                                                                      {
                                                                                        char v439 = v158;
                                                                                        if (!v168) {
                                                                                          break;
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_304:
    LOBYTE(v470) = 0;
    char v472 = 0;
    char v473 = 1;
  }
  LOBYTE(v440) = 0;
  char v442 = 0;
  if ((v2 & 1) == 0)
  {
    v440 = v166;
    uint64_t v441 = v330;
    char v442 = 1;
    long long v166 = 0;
  }
  *(unsigned char *)(WebKit::CoreIPCNSURLRequestData::CoreIPCNSURLRequestData((uint64_t)a1, (uint64_t *)&v388) + 376) = 1;
  WebKit::CoreIPCNSURLRequestData::~CoreIPCNSURLRequestData((WebKit::CoreIPCNSURLRequestData *)&v388, v173);
LABEL_257:
  if (((v168 | v2) & 1) == 0 && v166) {
    WTF::fastFree(v166, v118);
  }
  if (v445)
  {
    if (v444)
    {
      long long v174 = v443;
      v443 = 0;
      if (v174)
      {
        if (*(_DWORD *)v174 == 2) {
          WTF::StringImpl::destroy(v174, (WTF::StringImpl *)v118);
        }
        else {
          *(_DWORD *)v174 -= 2;
        }
      }
    }
  }
  if (v448)
  {
    if (v447)
    {
      long long v175 = v446;
      v446 = 0;
      if (v175)
      {
        if (*(_DWORD *)v175 == 2) {
          WTF::StringImpl::destroy(v175, (WTF::StringImpl *)v118);
        }
        else {
          *(_DWORD *)v175 -= 2;
        }
      }
    }
  }
  if (v452 && v451) {
    WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v449, v118);
  }
  if (v455)
  {
    if ((_BYTE)v454)
    {
      CFTypeRef v176 = cf;
      CFTypeRef cf = 0;
      if (v176) {
        CFRelease(v176);
      }
    }
  }
  if (v459 && v458) {
    WTF::Vector<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v456, v118);
  }
  if (v462)
  {
    if (v461)
    {
      v177 = v460;
      v460 = 0;
      if (v177)
      {
        if (*(_DWORD *)v177 == 2) {
          WTF::StringImpl::destroy(v177, (WTF::StringImpl *)v118);
        }
        else {
          *(_DWORD *)v177 -= 2;
        }
      }
    }
  }
  if (v465)
  {
    if (v464)
    {
      long long v178 = (WTF::StringImpl *)v463[0];
      v463[0] = 0;
      if (v178)
      {
        if (*(_DWORD *)v178 == 2) {
          WTF::StringImpl::destroy(v178, (WTF::StringImpl *)v118);
        }
        else {
          *(_DWORD *)v178 -= 2;
        }
      }
    }
  }
  if (v469)
  {
    int v179 = v466;
    v466 = 0;
    if (v179)
    {
      if (*(_DWORD *)v179 == 2) {
        WTF::StringImpl::destroy(v179, (WTF::StringImpl *)v118);
      }
      else {
        *(_DWORD *)v179 -= 2;
      }
    }
  }
  if (v473)
  {
    if (v472) {
      WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v470, v118);
    }
  }
}

void IPC::ArgumentCoder<WebKit::CoreIPCNSValue,void>::decode(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>>(a1, (uint64_t)v8);
  if (*a1)
  {
    if (!v11) {
      __break(1u);
    }
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v6, (uint64_t)v9);
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a2 + 8), (uint64_t)v6);
    a2[40] = 1;
    if (v7 != -1) {
      ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v7])(&v4, v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[40] = 0;
  }
  if (v11)
  {
    if (v10 != -1) {
      ((void (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v10])(v5, v9);
    }
  }
}

void sub_1994B55C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,int a24,char a25)
{
  if (a18 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[a18])(&a13, v26);
  }
  if (a25)
  {
    if (a23 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[a23])(&a14, v25);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 40))
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_1994B56A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (*(unsigned char *)(v13 + 40))
  {
    uint64_t v15 = *(unsigned int *)(v13 + 32);
    if (v15 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v15])(&a13, v13 + 8);
    }
    *(_DWORD *)(v13 + 32) = -1;
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::RetainPtr<PKContact>>(uint64_t a1, uint64_t a2)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v4 = (const void *)((uint64_t (*)(void))*MEMORY[0x1E4FB6280])();
  cf[0] = v4;
  if (v4) {
    CFRetain(v4);
  }
  WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v10, cf, 1);
  WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)(a2 + 56), &v10);
  IPC::decodeRequiringAllowedClasses<PKContact,PKContact*>(a2, a1);
  if (v10) {
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(v10, v5);
  }
  CFTypeRef v6 = cf[0];
  cf[0] = 0;
  if (v6) {
    CFRelease(v6);
  }
  if (!*(unsigned char *)(a1 + 8))
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v9 = *(void *)(a2 + 24);
    if (v9)
    {
      if (v8) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
      }
    }
  }
}

void sub_1994B57E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (*(unsigned char *)(v11 + 8))
  {
    uint64_t v13 = *(const void **)v11;
    *(void *)uint64_t v11 = 0;
    if (v13) {
      CFRelease(v13);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WTF::RetainPtr<NSDateComponents>>(unsigned char *a1, const void ***a2)
{
  v15[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v4 = (const void *)objc_opt_class();
  v15[0] = v4;
  if (v4) {
    CFRetain(v4);
  }
  WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v11, v15, 1);
  WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=(a2 + 7, &v11);
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCDateComponents>>((uint64_t)v13, (IPC::Decoder *)a2);
  if (!v14)
  {
    *a1 = 0;
    a1[8] = 0;
    goto LABEL_13;
  }
  if (!v13[32])
  {
    CFTypeRef v6 = 0;
    goto LABEL_9;
  }
  WebKit::CoreIPCDateComponents::toID((WebKit::CoreIPCDateComponents *)v13, &cf);
  CFTypeRef v6 = cf;
  if (v14) {
LABEL_9:
  }
    std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v5);
  *(void *)a1 = v6;
  if (v6)
  {
    CFRetain(v6);
    a1[8] = 1;
    CFRelease(v6);
  }
  else
  {
    a1[8] = 1;
  }
LABEL_13:
  if (v11) {
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(v11, v5);
  }
  CFTypeRef v7 = v15[0];
  v15[0] = 0;
  if (v7) {
    CFRelease(v7);
  }
  if (!a1[8])
  {
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    int v10 = a2[3];
    if (v10)
    {
      if (v9) {
        (*((void (**)(const void **, const void **))*v10 + 2))(v10, v8);
      }
    }
  }
}

void sub_1994B59B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

unint64_t IPC::ArgumentCoder<WebKit::CoreIPCPlistArray,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    CFTypeRef v6 = *(uint64_t **)a2;
    uint64_t v7 = 8 * v5;
    do
    {
      uint64_t v8 = *v6++;
      unint64_t result = IPC::ArgumentCoder<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>,void>::encode<IPC::Encoder,std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData> const&>(a1, v8);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::CoreIPCPlistArray,void>::decode@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v10);
  if (*a1)
  {
    if (!v12)
    {
      __break(1u);
      return result;
    }
    uint64_t v7 = v10;
    uint64_t v10 = 0;
    v9[0] = 0;
    *(void *)a3 = v7;
    v9[1] = 0;
    uint64_t v8 = v11;
    uint64_t v11 = 0;
    *(void *)(a3 + 8) = v8;
    *(unsigned char *)(a3 + 16) = 1;
    uint64_t result = WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v6);
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
  if (v12) {
    return WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v6);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v6);
    }
  }
  return result;
}

void sub_1994B5B78(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<WebKit::CoreIPCPlistDictionary,void>::decode@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v10);
  if (*(void *)a1)
  {
    if (!v12)
    {
      __break(1u);
      return result;
    }
    uint64_t v7 = v10;
    uint64_t v10 = 0;
    v9[0] = 0;
    *(void *)a3 = v7;
    v9[1] = 0;
    uint64_t v8 = v11;
    uint64_t v11 = 0;
    *(void *)(a3 + 8) = v8;
    *(unsigned char *)(a3 + 16) = 1;
    uint64_t result = WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v6);
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
  if (v12) {
    return WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v6);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16)) {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

void sub_1994B5C6C(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<WebKit::CoreIPCPresentationIntent,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)a2);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (v6)
    {
      unsigned char *v5 = 1;
      IPC::ArgumentCoder<WebKit::CoreIPCPresentationIntent,void>::encode(a1, *(void *)(a2 + 16));
      goto LABEL_6;
    }
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x1994B5D9CLL);
  }
  if (!v6) {
    goto LABEL_11;
  }
  unsigned char *v5 = 0;
LABEL_6:
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 24));
  uint64_t v7 = *(const void **)(a2 + 32);
  uint64_t v8 = *(unsigned int *)(a2 + 44);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, v8);
  if (v8) {
    IPC::Encoder::encodeSpan<unsigned long const,18446744073709551615ul>(a1, v7, v8);
  }
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 48));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 56));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 64));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(void *)(a2 + 72));
  uint64_t v9 = *(void *)(a2 + 80);

  return IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, v9);
}

void IPC::ArgumentCoder<WebKit::CoreIPCSecureCoding,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<IPC::CoreIPCRetainPtr<NSObject  {objcproto14NSSecureCoding}>>(a1, (uint64_t)&cf);
  if (*a1)
  {
    if (!v7)
    {
      __break(1u);
      return;
    }
    WebKit::CoreIPCSecureCoding::CoreIPCSecureCoding((WebKit::CoreIPCSecureCoding *)&v5, (void *)cf);
    *(void *)a2 = v5;
    *(unsigned char *)(a2 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
  if (v7)
  {
    CFTypeRef v4 = cf;
    CFTypeRef cf = 0;
    if (v4) {
      CFRelease(v4);
    }
  }
}

void sub_1994B5E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, char a12)
{
  if (a12)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<IPC::CoreIPCRetainPtr<NSObject  {objcproto14NSSecureCoding}>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::decodeObjectDirectlyRequiringAllowedClasses<NSObject  {objcproto14NSSecureCoding}>(a1, &v8);
  if (v9)
  {
    *(void *)a2 = v8;
    *(unsigned char *)(a2 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::CoreIPCURL,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::URL>(a1, &v10);
  if (*(void *)a1)
  {
    if (!v13)
    {
      __break(1u);
      return result;
    }
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    BOOL v7 = v6;
    long long v8 = v11;
    long long v9 = v12;
    LODWORD(v11) = v11 & 0xFFFFFFFE;
    WTF::URL::URL((uint64_t)a2, (uint64_t *)&v7);
    a2[40] = 1;
    uint64_t result = v7;
    BOOL v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[40] = 0;
  }
  if (v13)
  {
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1994B5FE0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  std::__optional_destruct_base<WTF::URL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a15, a2);
  _Unwind_Resume(a1);
}

unint64_t IPC::ArgumentCoder<WebKit::CoreIPCCFCharacterSet,void>::encode(IPC::Encoder *a1, CFDataRef *a2)
{
  CFDataRef v3 = *a2;
  BytePtr = CFDataGetBytePtr(*a2);
  size_t Length = CFDataGetLength(v3);

  return IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, BytePtr, Length);
}

void *IPC::ArgumentCoder<WebKit::CoreIPCCFCharacterSet,void>::encode(void *a1, CFDataRef *a2)
{
  CFDataRef v3 = *a2;
  BytePtr = CFDataGetBytePtr(*a2);
  size_t Length = CFDataGetLength(v3);

  return IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(a1, BytePtr, Length);
}

void *IPC::ArgumentCoder<WebKit::CoreIPCCFCharacterSet,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)v6);
  uint64_t v5 = *a1;
  if (!*a1)
  {
    *a2 = 0;
    goto LABEL_4;
  }
  if (v7)
  {
    uint64_t result = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6[0], (CFIndex)v6[1]);
    *(void *)a2 = result;
    LOBYTE(v5) = 1;
LABEL_4:
    a2[8] = v5;
    return result;
  }
  __break(1u);
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebPushD::PushMessageForTesting,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 56));
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, *(unsigned char *)(a2 + 64));

  return IPC::ArgumentCoder<std::optional<WebCore::NotificationPayload>,void>::encode<IPC::Encoder,std::optional<WebCore::NotificationPayload> const&>(a1, a2 + 72);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebPushD::PushMessageForTesting,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v47);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v45);
  IPC::Decoder::decode<WTF::URL>(a1, &v41);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v39);
  unint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v6) {
    goto LABEL_52;
  }
  char v7 = (unsigned __int8 *)(v5 + v6);
  *((void *)a1 + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v21 = v4;
    uint64_t v22 = 0;
    goto LABEL_53;
  }
  unsigned int v8 = *v7;
  if (v8 >= 2) {
    goto LABEL_54;
  }
  int v9 = 0;
  for (BOOL i = v8 != 0; ; BOOL i = 0)
  {
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WebCore::NotificationPayload>>(a1, v37);
    if (!*(void *)a1)
    {
      *a2 = 0;
      a2[216] = 0;
      goto LABEL_28;
    }
    if (v48)
    {
      char v13 = v47;
      char v47 = 0;
      char v29 = v13;
      if (v46)
      {
        char v14 = v45;
        char v45 = 0;
        unint64_t v30 = v14;
        if (v44)
        {
          uint64_t v15 = v41;
          unsigned int v41 = 0;
          char v31 = v15;
          long long v32 = v42;
          long long v33 = v43;
          LODWORD(v42) = v42 & 0xFFFFFFFE;
          if (v40)
          {
            unsigned int v16 = v39;
            unint64_t v39 = 0;
            uint64_t v34 = v16;
            if (!v9)
            {
              BOOL v35 = i;
              if (v38) {
                break;
              }
            }
          }
        }
      }
    }
    __break(1u);
LABEL_52:
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v23 = *((void *)a1 + 3);
    if (v23)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
        uint64_t v22 = *(void *)a1;
        unint64_t v21 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v22 = 0;
      }
    }
LABEL_53:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v24 = *((void *)a1 + 3);
    if (v24)
    {
      if (v21)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v24 + 16))(v24, v22, v21);
        uint64_t v5 = *(void *)a1;
        unint64_t v4 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_54:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v25 = *((void *)a1 + 3);
    if (v25 && v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v5);
    }
    uint64_t v26 = *(void *)a1;
    uint64_t v27 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v28 = *((void *)a1 + 3);
    if (v28 && v27) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v26);
    }
    int v9 = 1;
  }
  std::__optional_move_base<WebCore::NotificationPayload,false>::__optional_move_base[abi:sn180100](v36, (uint64_t)v37);
  WebKit::WebPushD::PushMessageForTesting::PushMessageForTesting((uint64_t)a2, (uint64_t *)&v29);
  a2[216] = 1;
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36, v17);
  unint64_t v18 = v34;
  uint64_t v34 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v12);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  unsigned int v19 = v31;
  char v31 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v12);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  unint64_t v20 = v30;
  unint64_t v30 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v12);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t result = v29;
  char v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
LABEL_28:
  if (v38) {
    uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v37, v12);
  }
  if (v40)
  {
    uint64_t result = v39;
    unint64_t v39 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v44)
  {
    uint64_t result = v41;
    unsigned int v41 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v46)
  {
    uint64_t result = v45;
    char v45 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v48)
  {
    uint64_t result = v47;
    char v47 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1994B65AC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (*(unsigned char *)(v54 - 136))
  {
    unint64_t v56 = *(WTF::StringImpl **)(v54 - 144);
    *(void *)(v54 - 144) = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2) {
        WTF::StringImpl::destroy(v56, a2);
      }
      else {
        *(_DWORD *)v56 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v54 - 88))
  {
    uint64_t v57 = *(WTF::StringImpl **)(v54 - 128);
    *(void *)(v54 - 128) = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2) {
        WTF::StringImpl::destroy(v57, a2);
      }
      else {
        *(_DWORD *)v57 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v54 - 72))
  {
    uint64_t v58 = *(WTF::StringImpl **)(v54 - 80);
    *(void *)(v54 - 80) = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2) {
        WTF::StringImpl::destroy(v58, a2);
      }
      else {
        *(_DWORD *)v58 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v54 - 56))
  {
    unsigned int v59 = *(WTF::StringImpl **)(v54 - 64);
    *(void *)(v54 - 64) = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2) {
        WTF::StringImpl::destroy(v59, a2);
      }
      else {
        *(_DWORD *)v59 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

void *IPC::ArgumentCoder<WTF::UUID,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7 || (void *v5 = v4, v7 = *a2, result = (void *)IPC::Encoder::grow(a1, 8uLL, 8), v9 <= 7))
  {
    __break(0xC471u);
    JUMPOUT(0x1994B67C0);
  }
  void *result = v7;
  return result;
}

void *IPC::ArgumentCoder<WTF::UUID,void>::decode@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = result[1];
  uint64_t v3 = *result;
  unint64_t v4 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v2 >= v4 && v2 - v4 > 7)
  {
    unint64_t v6 = (unint64_t *)(v3 + v4);
    result[2] = v6 + 1;
    if (v3)
    {
      int v7 = 0;
      unint64_t v8 = *v6;
      goto LABEL_8;
    }
    unint64_t v8 = v2;
    uint64_t v14 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v14 = 0;
    void *result = 0;
    result[1] = 0;
    long long v12 = (void *)result[3];
    if (v12) {
      goto LABEL_29;
    }
  }
  while (1)
  {
    void *result = 0;
    result[1] = 0;
    uint64_t v15 = result[3];
    if (!v15)
    {
      unint64_t v2 = 0;
      uint64_t v3 = 0;
      unint64_t v8 = 0;
LABEL_20:
      int v7 = 1;
      goto LABEL_8;
    }
    unint64_t v21 = result;
    uint64_t v24 = a2;
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v15 + 16))(v15, v14, v8);
      unint64_t v8 = 0;
      uint64_t result = v21;
      a2 = v24;
      uint64_t v3 = *v21;
      unint64_t v2 = v21[1];
      goto LABEL_20;
    }
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    int v7 = 1;
LABEL_8:
    unint64_t v9 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 >= v9 && v2 - v9 > 7) {
      break;
    }
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v18 = result[3];
    if (v18)
    {
      uint64_t v23 = result;
      uint64_t v27 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
        uint64_t result = v23;
        a2 = v27;
        uint64_t v17 = *v23;
        unint64_t v16 = v23[1];
      }
      else
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
      }
    }
LABEL_22:
    void *result = 0;
    result[1] = 0;
    uint64_t v19 = result[3];
    if (!v19) {
      goto LABEL_23;
    }
    if (!v16) {
      goto LABEL_23;
    }
    unint64_t v20 = result;
    uint64_t v25 = a2;
    uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, unint64_t))(*(void *)v19 + 16))(result[3], v17, v16);
    a2 = v25;
    if (!*v20) {
      goto LABEL_23;
    }
LABEL_28:
    __break(1u);
LABEL_29:
    uint64_t v22 = result;
    uint64_t v26 = a2;
    if (v2)
    {
      (*(void (**)(void *))(*v12 + 16))(v12);
      uint64_t result = v22;
      a2 = v26;
      uint64_t v14 = *v22;
      unint64_t v8 = v22[1];
    }
    else
    {
      unint64_t v8 = 0;
      uint64_t v14 = 0;
    }
  }
  long long v11 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v12 = v11 + 1;
  result[2] = v11 + 1;
  if (!v3)
  {
    unint64_t v16 = v2;
    uint64_t v17 = 0;
    goto LABEL_22;
  }
  if (v7) {
    goto LABEL_28;
  }
  uint64_t v13 = *v11;
  if (v13 ^ 1 | v8)
  {
    *(void *)a2 = v13;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = 1;
    return result;
  }
LABEL_23:
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebCore::MediaUniqueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::decode(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    uint64_t v5 = (void *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      if ((unint64_t)(*v5 - 1) > 0xFFFFFFFFFFFFFFFDLL)
      {
LABEL_14:
        uint64_t v7 = 0;
        goto LABEL_15;
      }
      unint64_t v6 = *v5 & 0xFFFFFFFFFFFFFF00;
      uint64_t v7 = *v5;
      return v6 | v7;
    }
    unint64_t v8 = v1;
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      uint64_t v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v2, v1);
        a1 = v14;
        uint64_t v9 = *v14;
        unint64_t v8 = v14[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  uint64_t v7 = 0;
  unint64_t v6 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v11 = a1[3];
  if (!v11) {
    return v6 | v7;
  }
  uint64_t v13 = a1;
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
  if (!*v13)
  {
    uint64_t v7 = 0;
LABEL_15:
    unint64_t v6 = 0;
    return v6 | v7;
  }
  __break(1u);
  return result;
}

uint64_t IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return IPC::Encoder::operator<<<unsigned long long>(a1, &v3);
}

unint64_t IPC::ArgumentCoder<CGSize,void>::encode(IPC::Encoder *a1, double *a2)
{
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, *a2);
  double v4 = a2[1];

  return IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v4);
}

void *IPC::ArgumentCoder<CGSize,void>::decode@<X0>(void *result@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  unint64_t v4 = result[1];
  uint64_t v5 = *result;
  unint64_t v6 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    unint64_t v8 = (unint64_t *)(v5 + v6);
    result[2] = v8 + 1;
    if (v5)
    {
      int v9 = 0;
      a3.n128_u64[0] = *v8;
      goto LABEL_8;
    }
    unint64_t v15 = v4;
    uint64_t v16 = 0;
  }
  else
  {
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v3 = result[3];
    if (v3) {
      goto LABEL_28;
    }
  }
  while (1)
  {
    void *result = 0;
    result[1] = 0;
    a3.n128_u64[0] = 0;
    uint64_t v3 = result[3];
    if (v3)
    {
      uint64_t v22 = result;
      uint64_t v25 = a2;
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, double))(*(void *)v3 + 16))(v3, v16, v15, 0.0);
        uint64_t result = v22;
        a2 = v25;
        uint64_t v5 = *v22;
        unint64_t v4 = v22[1];
        int v9 = 1;
        a3.n128_u64[0] = 0;
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
        int v9 = 1;
      }
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0;
      int v9 = 1;
    }
LABEL_8:
    unint64_t v10 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v5;
    if (v4 < v10 || v4 - v10 <= 7) {
      break;
    }
    long long v12 = (uint64_t *)((result[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    result[2] = v12 + 1;
    if (!v5)
    {
      unint64_t v17 = v4;
      uint64_t v18 = 0;
      goto LABEL_21;
    }
    if (!v9)
    {
      uint64_t v13 = *v12;
      *(void *)a2 = a3.n128_u64[0];
      *(void *)(a2 + 8) = v13;
      char v14 = 1;
      goto LABEL_16;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    uint64_t v23 = result;
    uint64_t v27 = a2;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
      uint64_t result = v23;
      a2 = v27;
      uint64_t v16 = *v23;
      unint64_t v15 = v23[1];
    }
    else
    {
      unint64_t v15 = 0;
      uint64_t v16 = 0;
    }
  }
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  void *result = 0;
  result[1] = 0;
  uint64_t v19 = result[3];
  if (v19)
  {
    uint64_t v24 = result;
    uint64_t v28 = a2;
    if (v4)
    {
      (*(void (**)(uint64_t, __n128))(*(void *)v19 + 16))(v19, a3);
      uint64_t result = v24;
      a2 = v28;
      uint64_t v18 = *v24;
      unint64_t v17 = v24[1];
    }
    else
    {
      unint64_t v17 = 0;
      uint64_t v18 = 0;
    }
  }
LABEL_21:
  void *result = 0;
  result[1] = 0;
  uint64_t v20 = result[3];
  if (v20)
  {
    if (v17)
    {
      unint64_t v21 = result;
      uint64_t v26 = a2;
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, unint64_t, __n128))(*(void *)v20 + 16))(result[3], v18, v17, a3);
      a2 = v26;
      if (*v21) {
        goto LABEL_27;
      }
    }
  }
  char v14 = 0;
  *(unsigned char *)a2 = 0;
LABEL_16:
  *(unsigned char *)(a2 + 16) = v14;
  return result;
}

void *IPC::ArgumentCoder<CGRect,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  IPC::Decoder::decode<CGPoint>(a1, (uint64_t)&v15, a3);
  uint64_t result = IPC::ArgumentCoder<CGSize,void>::decode(a1, (uint64_t)&v13, v5);
  int v7 = v14;
  if (!v14) {
    goto LABEL_8;
  }
  while (*a1)
  {
    if (v16 && v7)
    {
      long long v8 = v13;
      *(_OWORD *)a2 = v15;
      *(_OWORD *)(a2 + 16) = v8;
      *(unsigned char *)(a2 + 32) = 1;
      return result;
    }
    __break(1u);
LABEL_8:
    uint64_t v9 = *a1;
    uint64_t v10 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      int v12 = v7;
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v9);
      int v7 = v12;
    }
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  return result;
}

void *IPC::Decoder::decode<CGPoint>@<X0>(void *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t result = IPC::ArgumentCoder<CGSize,void>::decode(a1, a2, a3);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v6 != 0)
    {
      long long v8 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v8();
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::NotificationPayload,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 40));
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(a1, a2 + 48);
  int v4 = *(unsigned __int8 *)(a2 + 120);
  __n128 v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1994B7110);
    }
    unsigned char *v5 = 1;
    if (!*(unsigned char *)(a2 + 120))
    {
      uint64_t v10 = (IPC::Decoder *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<WebCore::NotificationPayload,void>::decode(v10, v11);
    }
    char v12 = *(unsigned char *)(a2 + 64);
    IPC::Encoder::operator<<<BOOL>(a1, &v12);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 72));
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 80));
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 88));
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 96));
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 104));
    IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)(a2 + 112));
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1994B7130);
    }
    unsigned char *v5 = 0;
  }
  char v7 = *(unsigned char *)(a2 + 128);
  uint64_t result = (WTF::StringImpl *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1994B70F0);
  }
  *(unsigned char *)uint64_t result = v7;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<WebCore::NotificationPayload,void>::decode@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WTF::URL>(a1, &v71);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v69);
  IPC::Decoder::decode<std::optional<unsigned long long>>(a1, (uint64_t)&v66);
  unint64_t v10 = *((void *)a1 + 1);
  BOOL v11 = *(WTF::StringImpl **)a1;
  unint64_t v12 = *((void *)a1 + 2) - *(void *)a1;
  if (v10 <= v12) {
    goto LABEL_114;
  }
  long long v13 = (unsigned __int8 *)v11 + v12;
  *((void *)a1 + 2) = v13 + 1;
  if (!v11)
  {
    unint64_t v38 = v10;
    unint64_t v39 = 0;
    goto LABEL_115;
  }
  unsigned int v14 = *v13;
  if (v14 >= 2) {
    goto LABEL_121;
  }
  if (!v14)
  {
    int v19 = 0;
    LOBYTE(v15) = 0;
    char v8 = 1;
    goto LABEL_36;
  }
  unsigned __int16 v15 = IPC::Decoder::decode<WebCore::NotificationDirection>((uint64_t *)a1);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v51);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v81);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v79);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v77);
  IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v75);
  int v7 = IPC::Decoder::decode<std::optional<BOOL>>(a1);
  unint64_t v17 = *(WTF::StringImpl **)a1;
  if (*(void *)a1)
  {
    if (v15 <= 0xFFu) {
      goto LABEL_113;
    }
    if (!(_BYTE)v52) {
      goto LABEL_113;
    }
    uint64_t v2 = v51;
    unint64_t v51 = 0;
    if (!v82) {
      goto LABEL_113;
    }
    uint64_t v3 = v81;
    char v81 = 0;
    if (!v80) {
      goto LABEL_113;
    }
    int v4 = v79;
    long long v79 = 0;
    if (!v78) {
      goto LABEL_113;
    }
    __n128 v5 = v77;
    uint64_t v77 = 0;
    if (!v76) {
      goto LABEL_113;
    }
    uint64_t v6 = v75;
    unint64_t v75 = 0;
    if ((v7 & 0xFF0000) == 0) {
      goto LABEL_113;
    }
  }
  else
  {
    if (v76)
    {
      unsigned int v49 = v75;
      unint64_t v75 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 != 2)
        {
          LOBYTE(v15) = 0;
          *(_DWORD *)v49 -= 2;
          goto LABEL_13;
        }
        WTF::StringImpl::destroy(v49, v16);
      }
    }
    LOBYTE(v15) = 0;
  }
LABEL_13:
  if (v78)
  {
    uint64_t v18 = v77;
    uint64_t v77 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v16);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  if (v80)
  {
    uint64_t v20 = v79;
    long long v79 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v16);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
  }
  if (v82)
  {
    unint64_t v21 = v81;
    char v81 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v16);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
  }
  if ((_BYTE)v52)
  {
    uint64_t v22 = v51;
    unint64_t v51 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v16);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  unint64_t v10 = *((void *)a1 + 1);
  if (!v17)
  {
    BOOL v11 = *(WTF::StringImpl **)a1;
    goto LABEL_121;
  }
  char v8 = 0;
  int v19 = 0;
LABEL_36:
  uint64_t v23 = *(WTF::StringImpl **)a1;
  unint64_t v24 = *((void *)a1 + 2) - *(void *)a1;
  if (v10 > v24)
  {
    uint64_t v25 = (unsigned __int8 *)v23 + v24;
    *((void *)a1 + 2) = v25 + 1;
    if (v23)
    {
      unsigned int v26 = *v25;
      if (v26 <= 1)
      {
        int v27 = 0;
        BOOL v28 = v26 != 0;
        goto LABEL_40;
      }
      goto LABEL_128;
    }
    char v47 = 0;
    goto LABEL_126;
  }
  while (1)
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v46 = *((void *)a1 + 3);
    if (v46)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v46 + 16))(v46, v23);
        char v47 = *(WTF::StringImpl **)a1;
        unint64_t v10 = *((void *)a1 + 1);
      }
      else
      {
        char v47 = 0;
      }
    }
    else
    {
      char v47 = 0;
      unint64_t v10 = 0;
    }
LABEL_126:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v48 = *((void *)a1 + 3);
    if (v48)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v48 + 16))(v48, v47);
        uint64_t v23 = *(WTF::StringImpl **)a1;
        unint64_t v10 = *((void *)a1 + 1);
      }
      else
      {
        uint64_t v23 = 0;
      }
    }
    else
    {
      uint64_t v23 = 0;
      unint64_t v10 = 0;
    }
LABEL_128:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (!result
      || !v10
      || (uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v23), !*(void *)a1))
    {
      *a2 = 0;
      a2[136] = 0;
      if (v8) {
        goto LABEL_102;
      }
LABEL_77:
      if (v19) {
        goto LABEL_102;
      }
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
        {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v23);
          if (!v5) {
            goto LABEL_86;
          }
LABEL_84:
          if (*(_DWORD *)v5 == 2)
          {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v23);
            if (!v4) {
              goto LABEL_91;
            }
LABEL_89:
            if (*(_DWORD *)v4 == 2)
            {
              uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v23);
              if (!v3) {
                goto LABEL_96;
              }
LABEL_94:
              if (*(_DWORD *)v3 == 2)
              {
                uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v23);
                if (!v2) {
                  goto LABEL_102;
                }
                goto LABEL_99;
              }
              *(_DWORD *)v3 -= 2;
LABEL_96:
              if (!v2) {
                goto LABEL_102;
              }
LABEL_99:
              if (*(_DWORD *)v2 == 2) {
                uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v2, v23);
              }
              else {
                *(_DWORD *)v2 -= 2;
              }
              goto LABEL_102;
            }
            *(_DWORD *)v4 -= 2;
LABEL_91:
            if (!v3) {
              goto LABEL_96;
            }
            goto LABEL_94;
          }
          *(_DWORD *)v5 -= 2;
LABEL_86:
          if (!v4) {
            goto LABEL_91;
          }
          goto LABEL_89;
        }
        *(_DWORD *)v6 -= 2;
      }
      if (!v5) {
        goto LABEL_86;
      }
      goto LABEL_84;
    }
    BOOL v28 = 0;
    int v27 = 1;
LABEL_40:
    if (v74)
    {
      char v29 = v71;
      char v71 = 0;
      unint64_t v51 = v29;
      long long v52 = v72;
      long long v53 = v73;
      LODWORD(v72) = v72 & 0xFFFFFFFE;
      if (v70)
      {
        unint64_t v30 = v69;
        CFTypeRef v69 = 0;
        uint64_t v54 = v30;
        if (v68)
        {
          uint64_t v55 = v66;
          char v56 = v67;
          if (!v19)
          {
            char v57 = 0;
            char v64 = 0;
            if ((v8 & 1) == 0)
            {
              char v57 = v15;
              uint64_t v58 = v2;
              unsigned int v59 = v3;
              unint64_t v60 = v4;
              uint64_t v61 = v5;
              unint64_t v62 = v6;
              __int16 v63 = v7;
              char v64 = 1;
              uint64_t v6 = 0;
              __n128 v5 = 0;
              int v4 = 0;
              uint64_t v3 = 0;
              uint64_t v2 = 0;
            }
            if (!v27) {
              break;
            }
          }
        }
      }
    }
LABEL_113:
    __break(1u);
LABEL_114:
    unint64_t v38 = 0;
    unint64_t v39 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v40 = *((void *)a1 + 3);
    if (v40)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v40 + 16))(v40);
        unint64_t v39 = *(WTF::StringImpl **)a1;
        unint64_t v38 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v38 = 0;
        unint64_t v39 = 0;
      }
    }
LABEL_115:
    unint64_t v10 = 0;
    BOOL v11 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v41 = *((void *)a1 + 3);
    if (v41)
    {
      if (v38)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v41 + 16))(v41, v39, v38);
        BOOL v11 = *(WTF::StringImpl **)a1;
        unint64_t v10 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v10 = 0;
        BOOL v11 = 0;
      }
    }
LABEL_121:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v42 = *((void *)a1 + 3);
    if (v42 && v10) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v42 + 16))(v42, v11);
    }
    long long v43 = *(WTF::StringImpl **)a1;
    uint64_t v44 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v45 = *((void *)a1 + 3);
    if (v45 && v44)
    {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v45 + 16))(v45, v43);
      LOBYTE(v15) = 0;
      unint64_t v10 = *((void *)a1 + 1);
      int v19 = 1;
      goto LABEL_36;
    }
    LOBYTE(v15) = 0;
    unint64_t v10 = 0;
    uint64_t v23 = *(WTF::StringImpl **)a1;
    int v19 = 1;
  }
  BOOL v65 = v28;
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::__optional_destruct_base[abi:sn180100]<WebCore::NotificationPayload>((uint64_t)a2, (uint64_t)&v51);
  if (v64)
  {
    char v31 = v62;
    unint64_t v62 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v23);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
    long long v32 = v61;
    uint64_t v61 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, v23);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
    long long v33 = v60;
    unint64_t v60 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, v23);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
    uint64_t v34 = v59;
    unsigned int v59 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, v23);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
    BOOL v35 = v58;
    uint64_t v58 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2) {
        WTF::StringImpl::destroy(v35, v23);
      }
      else {
        *(_DWORD *)v35 -= 2;
      }
    }
  }
  uint64_t v36 = v54;
  uint64_t v54 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, v23);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
  uint64_t result = v51;
  unint64_t v51 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  LOBYTE(v19) = 0;
  if ((v8 & 1) == 0) {
    goto LABEL_77;
  }
LABEL_102:
  if (v70)
  {
    uint64_t result = v69;
    CFTypeRef v69 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v74)
  {
    uint64_t result = v71;
    char v71 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1994B78F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,WTF::StringImpl *a21,WTF::StringImpl *a22,WTF::StringImpl *a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF::StringImpl *a30,char a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if ((v43 & 1) == 0 && (v41 & 1) == 0)
  {
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, a2);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
    if (v40)
    {
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, a2);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
    }
    if (v39)
    {
      if (*(_DWORD *)v39 == 2) {
        WTF::StringImpl::destroy(v39, a2);
      }
      else {
        *(_DWORD *)v39 -= 2;
      }
    }
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        WTF::StringImpl::destroy(v38, a2);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, a2);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
  }
  if (a31 && a30)
  {
    if (*(_DWORD *)a30 == 2) {
      WTF::StringImpl::destroy(a30, a2);
    }
    else {
      *(_DWORD *)a30 -= 2;
    }
  }
  if (a37 && a32)
  {
    if (*(_DWORD *)a32 == 2) {
      WTF::StringImpl::destroy(a32, a2);
    }
    else {
      *(_DWORD *)a32 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebPushMessage,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 24));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)(a2 + 32));

  return IPC::ArgumentCoder<std::optional<WebCore::NotificationPayload>,void>::encode<IPC::Encoder,std::optional<WebCore::NotificationPayload> const&>(a1, a2 + 72);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::WebPushMessage,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, (uint64_t)&v27);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v25);
  IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)a1, &v21);
  uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<std::optional<WebCore::NotificationPayload>>(a1, v19);
  if (!*a1) {
    goto LABEL_37;
  }
  if (!v30) {
    goto LABEL_36;
  }
  LOBYTE(v11) = 0;
  char v13 = 0;
  if (v29)
  {
    BOOL v11 = v27;
    uint64_t v6 = v28;
    int v27 = 0;
    uint64_t v28 = 0;
    uint64_t v12 = v6;
    char v13 = 1;
  }
  if (!v26) {
    goto LABEL_36;
  }
  int v7 = v25;
  uint64_t v25 = 0;
  unsigned int v14 = v7;
  if (!v24 || (v8 = v21, unint64_t v21 = 0, v15 = v8, v16 = v22, v17 = v23, LODWORD(v22) = v22 & 0xFFFFFFFE, !v20))
  {
LABEL_36:
    __break(1u);
LABEL_37:
    *a2 = 0;
    a2[216] = 0;
    goto LABEL_17;
  }
  std::__optional_move_base<WebCore::NotificationPayload,false>::__optional_move_base[abi:sn180100](v18, (uint64_t)v19);
  WebKit::WebPushMessage::WebPushMessage((uint64_t)a2, (uint64_t *)&v11);
  a2[216] = 1;
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v9);
  unint64_t v10 = v15;
  unsigned __int16 v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v5);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t result = v14;
  unsigned int v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v13)
  {
    uint64_t result = v11;
    if (v11)
    {
      BOOL v11 = 0;
      LODWORD(v12) = 0;
      uint64_t result = (WTF::StringImpl *)WTF::fastFree(result, v5);
    }
  }
LABEL_17:
  if (v20) {
    uint64_t result = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v19, v5);
  }
  if (v24)
  {
    uint64_t result = v21;
    unint64_t v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v26)
  {
    uint64_t result = v25;
    uint64_t v25 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v30 && v29)
  {
    uint64_t result = v27;
    if (v27)
    {
      int v27 = 0;
      LODWORD(v28) = 0;
      return (WTF::StringImpl *)WTF::fastFree(result, v5);
    }
  }
  return result;
}

void sub_1994B7E9C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11, char a12, WTF::StringImpl *a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](v55, a2);
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, v58);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, v58);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a12 && a9) {
    WTF::fastFree(a9, v58);
  }
  if (a55) {
    std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a37, v58);
  }
  if (*(unsigned char *)(v56 - 88))
  {
    unsigned int v59 = *(WTF::StringImpl **)(v56 - 128);
    *(void *)(v56 - 128) = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2) {
        WTF::StringImpl::destroy(v59, v58);
      }
      else {
        *(_DWORD *)v59 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v56 - 72))
  {
    unint64_t v60 = *(WTF::StringImpl **)(v56 - 80);
    *(void *)(v56 - 80) = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2) {
        WTF::StringImpl::destroy(v60, v58);
      }
      else {
        *(_DWORD *)v60 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v56 - 40)) {
    BOOL v61 = *(unsigned char *)(v56 - 48) == 0;
  }
  else {
    BOOL v61 = 1;
  }
  if (!v61)
  {
    unint64_t v62 = *(WTF **)(v56 - 64);
    if (v62)
    {
      *(void *)(v56 - 64) = 0;
      *(_DWORD *)(v56 - 56) = 0;
      WTF::fastFree(v62, v58);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<void const*,void>::encode(uint64_t a1, IPC *a2)
{
  WebKit::CoreIPCCFType::CoreIPCCFType((WebKit::CoreIPCCFType *)&v5, a2);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>)(a1, v5);
  uint64_t v4 = v5;
  uint64_t v5 = 0;
  if (v4) {
    return std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v5, v4);
  }
  return result;
}

void sub_1994B8020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void *IPC::ArgumentCoder<void const*,void>::encode(void *a1, IPC *a2)
{
  WebKit::CoreIPCCFType::CoreIPCCFType((WebKit::CoreIPCCFType *)&v5, a2);
  uint64_t result = IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(a1, v5);
  uint64_t v4 = v5;
  uint64_t v5 = 0;
  if (v4) {
    return (void *)std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v5, (uint64_t)v4);
  }
  return result;
}

void sub_1994B8098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WTF::RetainPtr<void const*>,void>::decode(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  IPC::Decoder::decode<WebKit::CoreIPCCFType>(a1, a2, (uint64_t)&v8);
  if (*a1)
  {
    if (!v9)
    {
      __break(1u);
      return;
    }
    WebKit::CoreIPCCFType::toCFType(&v7, (WebKit::CoreIPCCFType *)&v8, v5);
    *(void *)a3 = v7;
    *(unsigned char *)(a3 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 0;
  }
  if (v9)
  {
    uint64_t v6 = v8;
    uint64_t v8 = 0;
    if (v6) {
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v8, v6);
    }
  }
}

void sub_1994B814C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12)
  {
    uint64_t v13 = a11;
    a11 = 0;
    if (v13) {
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&a11, v13);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<__CFString const*,void>::encode(IPC::Encoder *a1)
{
  MEMORY[0x19972EAD0](&v4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)&v4);
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<__CFString const*,void>::encode(void *a1)
{
  MEMORY[0x19972EAD0](&v4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, (uint64_t *)&v4);
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_1994B8238(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WTF::RetainPtr<__CFString const*>,void>::decode@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v7);
  if (*(void *)a1)
  {
    if (!v8)
    {
      __break(1u);
      return result;
    }
    uint64_t result = (WTF::StringImpl *)WTF::String::createCFString(&v6, (WTF::String *)&v7);
    *(void *)a2 = v6;
    *(unsigned char *)(a2 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
  if (v8)
  {
    uint64_t result = v7;
    CFTypeRef v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_1994B8304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t IPC::ArgumentCoder<__CFArray const*,void>::encode(IPC::Encoder *a1, const __CFArray *a2)
{
  WebKit::CoreIPCCFArray::CoreIPCCFArray((WebKit::CoreIPCCFArray *)v5, a2);
  IPC::VectorArgumentCoder<false,WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)v5);
  return WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v3);
}

void sub_1994B835C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void IPC::ArgumentCoder<WTF::RetainPtr<__CFArray const*>,void>::decode(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  IPC::Decoder::decode<WebKit::CoreIPCCFArray>(a1, a2, (uint64_t)v7);
  if (*a1)
  {
    if (!v8)
    {
      __break(1u);
      return;
    }
    WebKit::CoreIPCCFArray::createCFArray(v7, &v6);
    *(void *)a3 = v6;
    *(unsigned char *)(a3 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 0;
  }
  if (v8) {
    WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  }
}

void sub_1994B83F0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a12) {
    WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  }
  _Unwind_Resume(exception_object);
}

unint64_t IPC::ArgumentCoder<__CFBoolean const*,void>::encode(IPC::Encoder *a1, CFBooleanRef BOOLean)
{
  BOOL v4 = CFBooleanGetValue(BOOLean) != 0;
  return IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebEventModifier>,void>::encode<IPC::Encoder>(a1, (char *)&v4);
}

uint64_t IPC::ArgumentCoder<WTF::RetainPtr<__CFBoolean const*>,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebKit::CoreIPCBoolean>(a1);
  uint64_t v5 = *a1;
  if (!*a1)
  {
    *a2 = 0;
LABEL_8:
    a2[8] = v5;
    return result;
  }
  if ((unsigned __int16)result > 0xFFu)
  {
    uint64_t v6 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (!(_BYTE)result) {
      uint64_t v6 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    CFTypeRef v7 = *v6;
    if (*v6) {
      uint64_t result = (uint64_t)CFRetain(*v6);
    }
    *(void *)a2 = v7;
    LOBYTE(v5) = 1;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<__CFNumber const*,void>::encode(IPC::Encoder *a1, WebKit::CoreIPCNumber *this)
{
  v5[0] = WebKit::CoreIPCNumber::numberHolderForNumber(this, this);
  v5[1] = v3;
  return IPC::ArgumentCoder<WebKit::CoreIPCNumber,void>::encode(a1, v5);
}

uint64_t IPC::ArgumentCoder<WTF::RetainPtr<__CFNumber const*>,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebKit::CoreIPCNumber>(a1, v6);
  if (*a1)
  {
    if (v6[16])
    {
      uint64_t result = WebKit::CoreIPCNumber::createCFNumber((WebKit::CoreIPCNumber *)v6);
      *(void *)a2 = v5;
      *(unsigned char *)(a2 + 8) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
  return result;
}

void IPC::ArgumentCoder<__SecCertificate *,void>::encode(IPC::Encoder *a1, SecCertificateRef certificate)
{
  CFTypeRef cf = SecCertificateCopyData(certificate);
  uint64_t v3 = (const void *)WebKit::CoreIPCSecCertificate::dataReference((CFDataRef *)&cf);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v3, v4);
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1994B85E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WTF::RetainPtr<__SecCertificate *>,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebKit::CoreIPCCFCharacterSet>(a1, &data);
  uint64_t v4 = *a1;
  if (*a1)
  {
    if (!v7)
    {
      __break(1u);
      return;
    }
    *(void *)a2 = SecCertificateCreateWithData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], data);
    LOBYTE(v4) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = v4;
  if (v7)
  {
    CFDataRef v5 = data;
    CFDataRef data = 0;
    if (v5) {
      CFRelease(v5);
    }
  }
}

void sub_1994B8688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  if (a10)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<__CVBuffer *,void>::encode(uint64_t a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v4 = (__IOSurface *)((uint64_t (*)(CFTypeRef))*MEMORY[0x1E4FB6510])(cf);
  MachPort = (WTF::MachSendRight *)IOSurfaceCreateMachPort(v4);
  WTF::MachSendRight::adopt(MachPort);
  IPC::Encoder::addAttachment(a1, (unint64_t)v6);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v6);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1994B8728(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WTF::RetainPtr<__CVBuffer *>,void>::decode(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebKit::CoreIPCCVPixelBufferRef>(a1, &v5);
  if (*(void *)a1)
  {
    if (!v6)
    {
      __break(1u);
      return;
    }
    WebKit::CoreIPCCVPixelBufferRef::toCF(&v5, &v4);
    *(void *)a2 = v4;
    *(unsigned char *)(a2 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
  if (v6) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v5);
  }
}

void sub_1994B87C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, __int16 a11, char a12, char a13)
{
  if (a12) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a10);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebKit::CoreIPCCVPixelBufferRef>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<WebKit::CoreIPCCVPixelBufferRef,void>::decode(a1, a2);
  if (!a2[4])
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v6 = *((void *)a1 + 3);
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

void sub_1994B8850(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 4)) {
    WTF::MachSendRight::~MachSendRight(v1);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<__SecTrust *,void>::encode(IPC::Encoder *a1)
{
  CFTypeRef cf = (CFTypeRef)SecTrustSerialize();
  uint64_t v2 = WebKit::CoreIPCSecTrust::dataReference((CFDataRef *)&cf);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v2, v3);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1994B88D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<WTF::RetainPtr<__SecTrust *>,void>::decode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebKit::CoreIPCSecTrust>(a1, &cf);
  uint64_t v4 = *a1;
  if (*a1)
  {
    if (!v8)
    {
      __break(1u);
      return;
    }
    uint64_t v5 = (uint64_t)cf;
    if (cf) {
      uint64_t v5 = SecTrustDeserialize();
    }
    *(void *)a2 = v5;
    LOBYTE(v4) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = v4;
  if (v8)
  {
    CFTypeRef v6 = cf;
    CFTypeRef cf = 0;
    if (v6) {
      CFRelease(v6);
    }
  }
}

void sub_1994B8984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  if (a10)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *IPC::ArgumentCoder<CGColor *,void>::encode(IPC::Encoder *a1)
{
  WebCore::Color::createAndPreserveColorSpace();
  uint64_t result = (unsigned int *)IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)&v4);
  if ((v4 & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v3);
    }
  }
  return result;
}

void sub_1994B8A18(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 0x8000000000000) != 0)
  {
    uint64_t v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *IPC::ArgumentCoder<WTF::RetainPtr<CGColor *>,void>::decode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::Color,void>::decode(a1, &v9);
  if (!v10)
  {
    uint64_t v5 = (Color *)*a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unsigned int *)a1[3];
    if (result && v6 != 0) {
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, Color *))(*(void *)result + 16))(result, v5);
    }
  }
  if (*a1)
  {
    if (!v10)
    {
      __break(1u);
      return result;
    }
    uint64_t result = (unsigned int *)WebCore::cachedCGColor(&v8, (WebCore *)&v9, v5);
    *(void *)a2 = v8;
    *(unsigned char *)(a2 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
  if (v10 && (v9 & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

void sub_1994B8B34(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12 && (a11 & 0x8000000000000) != 0)
  {
    uint64_t v13 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void *IPC::ArgumentCoder<WebKit::CoreIPCBoolean,void>::encode(void *result, unsigned char *a2)
{
  unint64_t v2 = result[2];
  if (v2 >= result[1])
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2) = *a2;
    result[2] = v2 + 1;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<WebKit::CoreIPCBoolean,void>::decode(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v6 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      unsigned int v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
        a1 = v14;
        uint64_t v9 = *v14;
        unint64_t v6 = v14[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  else
  {
    uint64_t v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      unsigned int v5 = *v4;
      if (v5 >= 2) {
        goto LABEL_8;
      }
      LODWORD(v6) = v5 != 0;
      int v7 = 1;
      return v6 | (v7 << 8);
    }
    unint64_t v6 = v1;
    uint64_t v9 = 0;
  }
  unint64_t v1 = 0;
  uint64_t v2 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v11 = a1[3];
  if (v11) {
    goto LABEL_13;
  }
LABEL_8:
  while (1)
  {
    *a1 = 0;
    a1[1] = 0;
    unint64_t v6 = a1[3];
    if (!v6) {
      break;
    }
    uint64_t v12 = a1;
    if (!v1)
    {
      LODWORD(v6) = 0;
      break;
    }
    a1 = (void *)(*(uint64_t (**)(unint64_t, uint64_t))(*(void *)v6 + 16))(v6, v2);
    unint64_t v6 = *v12;
    if (!*v12) {
      break;
    }
    __break(1u);
LABEL_13:
    uint64_t v13 = a1;
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v9, v6);
      a1 = v13;
      uint64_t v2 = *v13;
      unint64_t v1 = v13[1];
    }
    else
    {
      unint64_t v1 = 0;
      uint64_t v2 = 0;
    }
  }
  int v7 = 0;
  return v6 | (v7 << 8);
}

uint64_t IPC::ArgumentCoder<WebKit::CoreIPCCFArray,void>::decode@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v10);
  if (*a1)
  {
    if (!v12)
    {
      __break(1u);
      return result;
    }
    uint64_t v7 = v10;
    uint64_t v10 = 0;
    v9[0] = 0;
    *(void *)a3 = v7;
    v9[1] = 0;
    uint64_t v8 = v11;
    uint64_t v11 = 0;
    *(void *)(a3 + 8) = v8;
    *(unsigned char *)(a3 + 16) = 1;
    uint64_t result = WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v6);
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
  }
  if (v12) {
    return WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v6);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16)) {
    return IPC::Decoder::markInvalid((IPC::Decoder *)a1);
  }
  return result;
}

void sub_1994B8E04(_Unwind_Exception *exception_object, void *a2)
{
  if (*(unsigned char *)(v2 + 16)) {
    WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::ArgumentCoder<WebKit::CoreIPCCGColorSpace,void>::encode(IPC::Encoder *a1, uint64_t a2)
{
  unsigned __int8 v5 = *(_DWORD *)(a2 + 8);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  return IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&>(a1, a2, v5);
}

IPC::Encoder *IPC::ArgumentCoder<WebKit::CoreIPCNumber,void>::encode(IPC::Encoder *a1, void *a2)
{
  uint64_t v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  unsigned __int8 v6 = v3;
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v6);
  return IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>>(a1, (int *)v5, v6);
}

uint64_t IPC::ArgumentCoder<WebKit::CoreIPCNumber,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>>(a1, (uint64_t)&v6);
  uint64_t v5 = *a1;
  if (!*a1)
  {
    *a2 = 0;
    goto LABEL_4;
  }
  if (v7)
  {
    *(_OWORD *)a2 = v6;
    LOBYTE(v5) = 1;
LABEL_4:
    a2[16] = v5;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t IPC::Decoder::decode<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      char v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

const UInt8 *WebKit::CoreIPCSecAccessControl::dataReference(CFDataRef *this)
{
  CFDataRef v1 = *this;
  if (!*this) {
    return 0;
  }
  BytePtr = CFDataGetBytePtr(*this);
  CFDataGetLength(v1);
  return BytePtr;
}

uint64_t WebKit::CoreIPCSecCertificate::dataReference(CFDataRef *this)
{
  CFDataRef v1 = *this;
  if (*this)
  {
    BytePtr = CFDataGetBytePtr(*this);
    CFDataGetLength(v1);
    return (uint64_t)BytePtr;
  }
  else
  {
    uint64_t result = 61;
    __break(0xC471u);
  }
  return result;
}

const UInt8 *WebKit::CoreIPCSecTrust::dataReference(CFDataRef *this)
{
  CFDataRef v1 = *this;
  if (!*this) {
    return 0;
  }
  BytePtr = CFDataGetBytePtr(*this);
  CFDataGetLength(v1);
  return BytePtr;
}

void *IPC::ArgumentCoder<WebKit::CoreIPCSecTrust,void>::decode@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)&bytes);
  uint64_t v5 = *a1;
  if (!*a1)
  {
    *a2 = 0;
LABEL_6:
    a2[8] = v5;
    return result;
  }
  if (v8)
  {
    if (length) {
      uint64_t result = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, length);
    }
    else {
      uint64_t result = 0;
    }
    *(void *)a2 = result;
    LOBYTE(v5) = 1;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult(WebKit::CoreIPCDDScannerResult *this, void *a2)
{
  uint64_t v3 = (const void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v5) {
    CFRelease(v5);
  }
  if (*((unsigned char *)this + 56)) {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, a2);
  }
  long long v6 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6) {
    CFRelease(v6);
  }
  char v7 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7) {
    CFRelease(v7);
  }
  char v8 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *(const void **)this;
  *(void *)this = 0;
  if (v10) {
    CFRelease(v10);
  }
}

void WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod(WebKit::CoreIPCPKPaymentMethod *this)
{
  uint64_t v2 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5) {
    CFRelease(v5);
  }
  long long v6 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6) {
    CFRelease(v6);
  }
  char v7 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7) {
    CFRelease(v7);
  }
  char v8 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *(const void **)this;
  *(void *)this = 0;
  if (v9) {
    CFRelease(v9);
  }
}

uint64_t std::__optional_destruct_base<WebKit::CoreIPCPKPaymentMerchantSession,false>::__optional_destruct_base[abi:sn180100]<WebKit::CoreIPCPKPaymentMerchantSession>(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v2;
  uint64_t v3 = a2[1];
  a2[1] = 0;
  *(void *)(result + 8) = v3;
  uint64_t v4 = a2[2];
  a2[2] = 0;
  *(void *)(result + 16) = v4;
  uint64_t v5 = a2[3];
  a2[3] = 0;
  *(void *)(result + 24) = v5;
  uint64_t v6 = a2[4];
  a2[4] = 0;
  *(void *)(result + 32) = v6;
  uint64_t v7 = a2[5];
  a2[5] = 0;
  *(void *)(result + 40) = v7;
  uint64_t v8 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v8;
  uint64_t v9 = a2[7];
  a2[7] = 0;
  *(void *)(result + 56) = v9;
  uint64_t v10 = a2[8];
  a2[8] = 0;
  *(void *)(result + 64) = v10;
  uint64_t v11 = a2[9];
  a2[9] = 0;
  *(void *)(result + 72) = v11;
  uint64_t v12 = a2[10];
  a2[10] = 0;
  *(void *)(result + 80) = v12;
  uint64_t v13 = a2[11];
  a2[11] = 0;
  *(void *)(result + 88) = v13;
  uint64_t v14 = a2[12];
  a2[12] = 0;
  *(unsigned char *)(result + 104) = 0;
  *(void *)(result + 96) = v14;
  *(unsigned char *)(result + 120) = 0;
  if (*((unsigned char *)a2 + 120))
  {
    *(void *)(result + 104) = 0;
    *(void *)(result + 112) = 0;
    uint64_t v15 = a2[13];
    a2[13] = 0;
    *(void *)(result + 104) = v15;
    LODWORD(v15) = *((_DWORD *)a2 + 28);
    *((_DWORD *)a2 + 28) = 0;
    *(_DWORD *)(result + 112) = v15;
    LODWORD(v15) = *((_DWORD *)a2 + 29);
    *((_DWORD *)a2 + 29) = 0;
    *(_DWORD *)(result + 116) = v15;
    *(unsigned char *)(result + 120) = 1;
  }
  *(unsigned char *)(result + 128) = 1;
  return result;
}

void WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession(WebKit::CoreIPCPKPaymentMerchantSession *this, void *a2)
{
  if (*((unsigned char *)this + 120)) {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 104, a2);
  }
  uint64_t v3 = (const void *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v15 = *(const void **)this;
  *(void *)this = 0;
  if (v15) {
    CFRelease(v15);
  }
}

uint64_t std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::__optional_destruct_base[abi:sn180100]<WebKit::CoreIPCPKContact>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::__optional_move_base<WebKit::CoreIPCPersonNameComponents,false>::__optional_move_base[abi:sn180100](a1, (uint64_t *)a2);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(v4 + 56) = v5;
  *(unsigned char *)(v4 + 64) = 0;
  *(unsigned char *)(v4 + 80) = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    uint64_t v6 = *(void *)(a2 + 64);
    *(void *)(a2 + 64) = 0;
    *(void *)(a1 + 64) = v6;
    uint64_t v7 = *(void *)(a2 + 72);
    *(void *)(a2 + 72) = 0;
    *(void *)(a1 + 72) = v7;
    *(unsigned char *)(a1 + 80) = 1;
  }
  std::__optional_move_base<WebKit::CoreIPCCNPostalAddress,false>::__optional_move_base[abi:sn180100](a1 + 88, (uint64_t *)(a2 + 88));
  uint64_t v8 = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  *(void *)(a1 + 168) = v8;
  *(unsigned char *)(a1 + 176) = 1;
  return a1;
}

uint64_t std::__optional_move_base<WebKit::CoreIPCPersonNameComponents,false>::__optional_move_base[abi:sn180100](uint64_t result, uint64_t *a2)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 48) = 0;
  if (*((unsigned char *)a2 + 48))
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    *(void *)uint64_t result = v2;
    uint64_t v3 = a2[1];
    a2[1] = 0;
    *(void *)(result + 8) = v3;
    uint64_t v4 = a2[2];
    a2[2] = 0;
    *(void *)(result + 16) = v4;
    uint64_t v5 = a2[3];
    a2[3] = 0;
    *(void *)(result + 24) = v5;
    uint64_t v6 = a2[4];
    a2[4] = 0;
    *(void *)(result + 32) = v6;
    uint64_t v7 = a2[5];
    a2[5] = 0;
    *(void *)(result + 40) = v7;
    *(unsigned char *)(result + 48) = 1;
  }
  return result;
}

uint64_t std::__optional_move_base<WebKit::CoreIPCCNPostalAddress,false>::__optional_move_base[abi:sn180100](uint64_t result, uint64_t *a2)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 72) = 0;
  if (*((unsigned char *)a2 + 72))
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    *(void *)uint64_t result = v2;
    uint64_t v3 = a2[1];
    a2[1] = 0;
    *(void *)(result + 8) = v3;
    uint64_t v4 = a2[2];
    a2[2] = 0;
    *(void *)(result + 16) = v4;
    uint64_t v5 = a2[3];
    a2[3] = 0;
    *(void *)(result + 24) = v5;
    uint64_t v6 = a2[4];
    a2[4] = 0;
    *(void *)(result + 32) = v6;
    uint64_t v7 = a2[5];
    a2[5] = 0;
    *(void *)(result + 40) = v7;
    uint64_t v8 = a2[6];
    a2[6] = 0;
    *(void *)(result + 48) = v8;
    uint64_t v9 = a2[7];
    a2[7] = 0;
    *(void *)(result + 56) = v9;
    uint64_t v10 = a2[8];
    a2[8] = 0;
    *(void *)(result + 64) = v10;
    *(unsigned char *)(result + 72) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 176))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 168);
    *(void *)(a1 + 168) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    if (*(unsigned char *)(a1 + 160)) {
      WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)(a1 + 88), a2);
    }
    std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100](a1 + 64, a2);
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    if (*(unsigned char *)(a1 + 48)) {
      WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents((WebKit::CoreIPCPersonNameComponents **)a1);
    }
  }
  return a1;
}

void WebKit::CoreIPCPKPayment::~CoreIPCPKPayment(WebKit::CoreIPCPKPayment *this)
{
  uint64_t v2 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *(const void **)this;
  *(void *)this = 0;
  if (v9) {
    CFRelease(v9);
  }
}

void WebKit::CoreIPCPKShippingMethod::~CoreIPCPKShippingMethod(WebKit::CoreIPCPKShippingMethod *this)
{
  uint64_t v2 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = *(const void **)this;
  *(void *)this = 0;
  if (v11) {
    CFRelease(v11);
  }
}

uint64_t std::__optional_destruct_base<WebKit::CoreIPCPKDateComponentsRange,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v2 = *(const void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = *(const void **)a1;
    *(void *)a1 = 0;
    if (v3) {
      CFRelease(v3);
    }
  }
  return a1;
}

uint64_t WebKit::CoreIPCCNContact::CoreIPCCNContact(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *a2 = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  a2[2] = 0;
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a2[3];
  a2[3] = 0;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = a2[4];
  a2[4] = 0;
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = a2[5];
  a2[5] = 0;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = a2[6];
  a2[6] = 0;
  *(void *)(a1 + 48) = v10;
  uint64_t v11 = a2[7];
  a2[7] = 0;
  *(void *)(a1 + 56) = v11;
  uint64_t v12 = a2[8];
  a2[8] = 0;
  *(void *)(a1 + 64) = v12;
  uint64_t v13 = a2[9];
  a2[9] = 0;
  *(void *)(a1 + 72) = v13;
  uint64_t v14 = a2[10];
  a2[10] = 0;
  *(void *)(a1 + 80) = v14;
  uint64_t v15 = a2[11];
  a2[11] = 0;
  *(void *)(a1 + 88) = v15;
  uint64_t v16 = a2[12];
  a2[12] = 0;
  *(void *)(a1 + 96) = v16;
  uint64_t v17 = a2[13];
  a2[13] = 0;
  *(void *)(a1 + 104) = v17;
  uint64_t v18 = a2[14];
  a2[14] = 0;
  *(void *)(a1 + 112) = v18;
  uint64_t v19 = a2[15];
  a2[15] = 0;
  *(void *)(a1 + 120) = v19;
  uint64_t v20 = a2[16];
  a2[16] = 0;
  *(void *)(a1 + 128) = v20;
  std::__optional_move_base<WebKit::CoreIPCDateComponents,false>::__optional_move_base[abi:sn180100](a1 + 136, a2 + 17);
  std::__optional_move_base<WebKit::CoreIPCDateComponents,false>::__optional_move_base[abi:sn180100](a1 + 176, a2 + 22);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  uint64_t v21 = a2[27];
  a2[27] = 0;
  *(void *)(a1 + 216) = v21;
  LODWORD(v21) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = 0;
  *(_DWORD *)(a1 + 224) = v21;
  LODWORD(v21) = *((_DWORD *)a2 + 57);
  *((_DWORD *)a2 + 57) = 0;
  *(_DWORD *)(a1 + 228) = v21;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  uint64_t v22 = a2[29];
  a2[29] = 0;
  *(void *)(a1 + 232) = v22;
  LODWORD(v22) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = 0;
  *(_DWORD *)(a1 + 240) = v22;
  LODWORD(v22) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = 0;
  *(_DWORD *)(a1 + 244) = v22;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  uint64_t v23 = a2[31];
  a2[31] = 0;
  *(void *)(a1 + 248) = v23;
  LODWORD(v23) = *((_DWORD *)a2 + 64);
  *((_DWORD *)a2 + 64) = 0;
  *(_DWORD *)(a1 + 256) = v23;
  LODWORD(v23) = *((_DWORD *)a2 + 65);
  *((_DWORD *)a2 + 65) = 0;
  *(_DWORD *)(a1 + 260) = v23;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  uint64_t v24 = a2[33];
  a2[33] = 0;
  *(void *)(a1 + 264) = v24;
  LODWORD(v24) = *((_DWORD *)a2 + 68);
  *((_DWORD *)a2 + 68) = 0;
  *(_DWORD *)(a1 + 272) = v24;
  LODWORD(v24) = *((_DWORD *)a2 + 69);
  *((_DWORD *)a2 + 69) = 0;
  *(_DWORD *)(a1 + 276) = v24;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  uint64_t v25 = a2[35];
  a2[35] = 0;
  *(void *)(a1 + 280) = v25;
  LODWORD(v25) = *((_DWORD *)a2 + 72);
  *((_DWORD *)a2 + 72) = 0;
  *(_DWORD *)(a1 + 288) = v25;
  LODWORD(v25) = *((_DWORD *)a2 + 73);
  *((_DWORD *)a2 + 73) = 0;
  *(_DWORD *)(a1 + 292) = v25;
  return a1;
}

uint64_t std::__optional_move_base<WebKit::CoreIPCDateComponents,false>::__optional_move_base[abi:sn180100](uint64_t result, uint64_t *a2)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 32) = 0;
  if (*((unsigned char *)a2 + 32))
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    *(void *)uint64_t result = v2;
    uint64_t v3 = a2[1];
    a2[1] = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 8) = v3;
    uint64_t v4 = a2[2];
    a2[2] = 0;
    *(void *)(result + 16) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = 0;
    *(_DWORD *)(result + 24) = v4;
    LODWORD(v4) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = 0;
    *(_DWORD *)(result + 28) = v4;
    *(unsigned char *)(result + 32) = 1;
  }
  return result;
}

void WebKit::CoreIPCCNContact::~CoreIPCCNContact(WebKit::CoreIPCCNContact *this, void *a2)
{
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 280, a2);
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 264, v3);
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 248, v4);
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 232, v5);
  WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 216, v6);
  std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 176, v7);
  std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 136, v8);
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = (WTF::StringImpl *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = (WTF::StringImpl *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v9);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = (WTF::StringImpl *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v9);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = (WTF::StringImpl *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v9);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v15 = (WTF::StringImpl *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v9);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = (WTF::StringImpl *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v9);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v9);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t v18 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v9);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  uint64_t v19 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v9);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t v20 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v9);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t v21 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v9);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  uint64_t v22 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v9);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  uint64_t v23 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v9);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  uint64_t v24 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v9);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  uint64_t v25 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v9);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
}

void WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace(WebKit::CoreIPCNSURLProtectionSpace *this, void *a2)
{
  if (*((unsigned char *)this + 72)) {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  }
  uint64_t v3 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *(const void **)this;
  *(void *)this = 0;
  if (v9) {
    CFRelease(v9);
  }
}

uint64_t std::__optional_destruct_base<std::optional<WebKit::CoreIPCNSShadow>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      uint64_t v2 = *(const void **)(a1 + 24);
      *(void *)(a1 + 24) = 0;
      if (v2) {
        CFRelease(v2);
      }
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::optional<WebKit::CoreIPCData>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 8))
    {
      uint64_t v2 = *(const void **)a1;
      *(void *)a1 = 0;
      if (v2) {
        CFRelease(v2);
      }
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 64);
    *(void *)(a1 + 64) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF **)(a1 + 32);
    if (v4)
    {
      *(void *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v4, a2);
    }
    std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100]((WTF::StringImpl **)(a1 + 16), 0);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::optional<WebKit::CoreIPCCFURL>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 8))
    {
      uint64_t v3 = *(const void **)a1;
      *(void *)a1 = 0;
      if (v3) {
        CFRelease(v3);
      }
    }
  }
  return a1;
}

uint64_t std::__optional_storage_base<WebKit::CoreIPCDateComponents,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::CoreIPCDateComponents,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned __int8 *)(result + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(unsigned char *)(result + 32))
    {
      WTF::String::operator=((uint64_t *)result, (uint64_t *)a2);
      WTF::String::operator=((uint64_t *)(v3 + 8), (uint64_t *)(a2 + 8));
      uint64_t result = *(void *)(v3 + 16);
      if (result)
      {
        *(void *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        uint64_t result = WTF::fastFree((WTF *)result, v4);
      }
      uint64_t v5 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = 0;
      *(void *)(v3 + 16) = v5;
      LODWORD(v5) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = 0;
      *(_DWORD *)(v3 + 24) = v5;
      LODWORD(v5) = *(_DWORD *)(a2 + 28);
      *(_DWORD *)(a2 + 28) = 0;
      *(_DWORD *)(v3 + 28) = v5;
    }
  }
  else if (*(unsigned char *)(result + 32))
  {
    uint64_t v6 = *(WTF **)(result + 16);
    if (v6)
    {
      *(void *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      WTF::fastFree(v6, (void *)a2);
    }
    uint64_t v7 = *(WTF::StringImpl **)(v3 + 8);
    *(void *)(v3 + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t result = *(void *)v3;
    *(void *)uint64_t v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    *(unsigned char *)(v3 + 32) = 0;
  }
  else
  {
    uint64_t v8 = *(void *)a2;
    *(void *)a2 = 0;
    *(void *)uint64_t result = v8;
    uint64_t v9 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 8) = v9;
    uint64_t v10 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    *(void *)(result + 16) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    *(_DWORD *)(result + 24) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    *(_DWORD *)(result + 28) = v10;
    *(unsigned char *)(result + 32) = 1;
  }
  return result;
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENSB_IPKvEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJS9_SF_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef result = *a3;
  *a2 = *a3;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

CFTypeRef _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10ColorSpaceEN3WTF9RetainPtrIPK10__CFStringEENSB_IPKvEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJS9_SF_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef result = *a3;
  *a2 = *a3;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCDDScannerResult>,void>::decode<IPC::Decoder>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v149 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 16) - *(void *)a1;
  if (v4 <= v6)
  {
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v19 = *(void *)(a1 + 24);
    if (v19)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        uint64_t v18 = *(void *)a1;
        unint64_t v17 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
    goto LABEL_28;
  }
  uint64_t v7 = (unsigned __int8 *)(v5 + v6);
  *(void *)(a1 + 16) = v7 + 1;
  if (!v5)
  {
    unint64_t v17 = v4;
    uint64_t v18 = 0;
LABEL_28:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v20 = *(void *)(a1 + 24);
    if (v20)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
        uint64_t v5 = *(void *)a1;
        unint64_t v4 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_29;
  }
  unsigned int v8 = *v7;
  if (v8 >= 2)
  {
LABEL_29:
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v21 = *(void *)(a1 + 24);
    if (v21 && v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v5);
    }
LABEL_71:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 96) = 0;
    return;
  }
  if (!v8)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 88) = 0;
    *(unsigned char *)(a2 + 96) = 1;
    return;
  }
  uint64_t v9 = (const void *)objc_opt_class();
  CFTypeRef v147 = v9;
  if (v9) {
    CFRetain(v9);
  }
  WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v118, &v147, 1);
  WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)(a1 + 56), &v118);
  unint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(char **)a1;
  unint64_t v12 = *(void *)(a1 + 16) - *(void *)a1;
  if (v10 <= v12)
  {
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v24 = *(void *)(a1 + 24);
    if (v24)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
        uint64_t v23 = *(void *)a1;
        unint64_t v22 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v22 = 0;
        uint64_t v23 = 0;
      }
    }
    goto LABEL_33;
  }
  uint64_t v13 = &v11[v12];
  *(void *)(a1 + 16) = v13 + 1;
  if (!v11)
  {
    unint64_t v22 = v10;
    uint64_t v23 = 0;
LABEL_33:
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v25 = *(void *)(a1 + 24);
    if (v25)
    {
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v25 + 16))(v25, v23, v22);
        uint64_t v11 = *(char **)a1;
        unint64_t v10 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_34;
  }
  unsigned int v14 = *v13;
  if (v14 >= 2)
  {
LABEL_34:
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v26 = *(void *)(a1 + 24);
    if (v26 && v10) {
      (*(void (**)(uint64_t, char *))(*(void *)v26 + 16))(v26, v11);
    }
    goto LABEL_35;
  }
  if (!v14)
  {
    LOBYTE(v130) = 0;
    LOBYTE(v133) = 0;
    LOBYTE(v134) = 1;
    goto LABEL_18;
  }
  IPC::Decoder::decode<WebKit::CoreIPCNSValue>((uint64_t *)a1, v139);
  if ((_BYTE)v141)
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v130 + 8, (uint64_t)v139 + 8);
    LOBYTE(v133) = 1;
    LOBYTE(v134) = 1;
    if (!(_BYTE)v141) {
      goto LABEL_18;
    }
    if (v140 == -1) {
      goto LABEL_18;
    }
    ((void (*)(CFTypeRef *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v140])(&v128, (char *)v139 + 8);
    if ((_BYTE)v134) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }
LABEL_35:
  LOBYTE(v130) = 0;
  LOBYTE(v134) = 0;
LABEL_36:
  uint64_t v11 = *(char **)a1;
  uint64_t v27 = *(void *)(a1 + 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v28 = *(void *)(a1 + 24);
  if (!v28 || !v27 || ((*(void (**)(uint64_t, char *))(*(void *)v28 + 16))(v28, v11), !(_BYTE)v134))
  {
    uint64_t v15 = 0;
    int v16 = 1;
    goto LABEL_38;
  }
LABEL_18:
  if ((_BYTE)v133)
  {
    WebKit::CoreIPCNSValue::toID((uint64_t)&v130, (uint64_t *)v139);
    uint64_t v15 = *(const void **)&v139[0];
    if ((_BYTE)v134 && (_BYTE)v133 && v132 != -1) {
      ((void (*)(_OWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_7variantIJ8_NSRangeEEEN6WebKit19CoreIPCSecureCodingEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v132])(v139, (char *)&v130 + 8);
    }
    if (v15)
    {
      CFRetain(v15);
      CFRelease(v15);
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  int v16 = 0;
LABEL_38:
  if (v118) {
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(v118, v11);
  }
  CFTypeRef v29 = v147;
  CFTypeRef v147 = 0;
  if (!v29)
  {
    if (!v16) {
      goto LABEL_42;
    }
LABEL_68:
    uint64_t v52 = *(void *)a1;
    uint64_t v53 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v54 = *(void *)(a1 + 24);
    if (v54 && v53) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v54 + 16))(v54, v52);
    }
    LOBYTE(v130) = 0;
    unsigned __int8 v138 = 0;
    goto LABEL_70;
  }
  CFRelease(v29);
  if (v16) {
    goto LABEL_68;
  }
LABEL_42:
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v128);
  if (!v129)
  {
    int v51 = 0;
    LOBYTE(v130) = 0;
    unsigned __int8 v138 = 0;
    goto LABEL_128;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v126);
  if (!v127)
  {
    int v51 = 0;
    LOBYTE(v130) = 0;
    unsigned __int8 v138 = 0;
    goto LABEL_125;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>((uint64_t *)a1, (uint64_t)&v124);
  if (!v125)
  {
    int v51 = 0;
    LOBYTE(v130) = 0;
    unsigned __int8 v138 = 0;
    goto LABEL_122;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>((uint64_t *)a1, (uint64_t)&v122);
  if (!v123)
  {
    int v51 = 0;
    LOBYTE(v130) = 0;
    unsigned __int8 v138 = 0;
    goto LABEL_119;
  }
  unint64_t v31 = *(void *)(a1 + 8);
  long long v32 = *(char **)a1;
  unint64_t v33 = *(void *)(a1 + 16) - *(void *)a1;
  if (v31 <= v33)
  {
    unint64_t v89 = 0;
    uint64_t v90 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v91 = *(void *)(a1 + 24);
    if (v91)
    {
      if (v31)
      {
        (*(void (**)(uint64_t))(*(void *)v91 + 16))(v91);
        uint64_t v90 = *(void *)a1;
        unint64_t v89 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v89 = 0;
        uint64_t v90 = 0;
      }
    }
    goto LABEL_140;
  }
  uint64_t v34 = &v32[v33];
  uint64_t v35 = (uint64_t)&v32[v33 + 1];
  *(void *)(a1 + 16) = v35;
  if (!v32)
  {
    unint64_t v89 = v31;
    uint64_t v90 = 0;
LABEL_140:
    unint64_t v31 = 0;
    long long v32 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v92 = *(void *)(a1 + 24);
    if (v92)
    {
      if (v89)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v92 + 16))(v92, v90, v89);
        long long v32 = *(char **)a1;
        unint64_t v31 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v31 = 0;
        long long v32 = 0;
      }
    }
    goto LABEL_141;
  }
  unsigned int v36 = *v34;
  if (v36 >= 2)
  {
LABEL_141:
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v93 = *(void *)(a1 + 24);
    if (v93 && v31) {
      (*(void (**)(uint64_t, char *))(*(void *)v93 + 16))(v93, v32);
    }
    goto LABEL_147;
  }
  if (!v36)
  {
    LOBYTE(v118) = 0;
    char v120 = 0;
    char v121 = 1;
    goto LABEL_88;
  }
  unint64_t v37 = ((v35 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v32;
  if (v31 < v37 || v31 - v37 <= 7)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v94 = *(void *)(a1 + 24);
    if (v94)
    {
      (*(void (**)(uint64_t))(*(void *)v94 + 16))(v94);
      uint64_t v111 = *(void *)a1;
      uint64_t v112 = *(void *)(a1 + 8);
      uint64_t v113 = *(void *)(a1 + 24);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      if (v113)
      {
        if (v112) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v113 + 16))(v113, v111);
        }
      }
    }
    LOBYTE(v130) = 0;
    LOBYTE(v131) = 0;
    goto LABEL_146;
  }
  unint64_t v38 = (unint64_t *)&v32[v37];
  unint64_t v39 = *v38;
  *(void *)(a1 + 16) = v38 + 1;
  v139[0] = 0uLL;
  if (v39 < 0x20000)
  {
    if (!v39)
    {
      uint64_t v49 = 0;
      uint64_t v50 = 0;
LABEL_75:
      v139[0] = 0uLL;
      *(void *)&long long v130 = v49;
      *((void *)&v130 + 1) = v50;
      goto LABEL_76;
    }
    uint64_t v40 = WTF::fastMalloc((WTF *)(8 * v39));
    DWORD2(v139[0]) = v39;
    *(void *)&v139[0] = v40;
    while (1)
    {
      IPC::Decoder::decode<WTF::RetainPtr<DDScannerResult>>(&v147, a1);
      if (!v148) {
        goto LABEL_85;
      }
      int v41 = HIDWORD(v139[0]);
      if (HIDWORD(v139[0]) != DWORD2(v139[0])) {
        break;
      }
      uint64_t v42 = (uint64_t *)WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v139, HIDWORD(v139[0]) + 1, (unint64_t)&v147);
      uint64_t v43 = HIDWORD(v139[0]);
      int v44 = HIDWORD(v139[0]) + 1;
      uint64_t v45 = *(void *)&v139[0];
      uint64_t v46 = *v42;
      *uint64_t v42 = 0;
      *(void *)(v45 + 8 * v43) = v46;
      HIDWORD(v139[0]) = v44;
      if (v148) {
        goto LABEL_60;
      }
LABEL_62:
      if (!--v39)
      {
        uint64_t v50 = *((void *)&v139[0] + 1);
        uint64_t v49 = *(void *)&v139[0];
        goto LABEL_75;
      }
    }
    CFTypeRef v47 = v147;
    CFTypeRef v147 = 0;
    *(void *)(*(void *)&v139[0] + 8 * HIDWORD(v139[0])) = v47;
    HIDWORD(v139[0]) = v41 + 1;
LABEL_60:
    CFTypeRef v48 = v147;
    CFTypeRef v147 = 0;
    if (v48) {
      CFRelease(v48);
    }
    goto LABEL_62;
  }
  do
  {
    IPC::Decoder::decode<WTF::RetainPtr<DDScannerResult>>(&v147, a1);
    if (!v148)
    {
LABEL_85:
      LOBYTE(v130) = 0;
      LOBYTE(v131) = 0;
      goto LABEL_86;
    }
    int v58 = HIDWORD(v139[0]);
    if (HIDWORD(v139[0]) == DWORD2(v139[0]))
    {
      unsigned int v59 = (uint64_t *)WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v139, HIDWORD(v139[0]) + 1, (unint64_t)&v147);
      uint64_t v60 = HIDWORD(v139[0]);
      int v61 = HIDWORD(v139[0]) + 1;
      uint64_t v62 = *(void *)&v139[0];
      uint64_t v63 = *v59;
      uint64_t *v59 = 0;
      *(void *)(v62 + 8 * v60) = v63;
      HIDWORD(v139[0]) = v61;
      if (!v148) {
        goto LABEL_83;
      }
    }
    else
    {
      CFTypeRef v64 = v147;
      CFTypeRef v147 = 0;
      *(void *)(*(void *)&v139[0] + 8 * HIDWORD(v139[0])) = v64;
      HIDWORD(v139[0]) = v58 + 1;
    }
    CFTypeRef v65 = v147;
    CFTypeRef v147 = 0;
    if (v65) {
      CFRelease(v65);
    }
LABEL_83:
    --v39;
  }
  while (v39);
  int v100 = HIDWORD(v139[0]);
  long long v101 = *(WTF **)&v139[0];
  if (DWORD2(v139[0]) <= HIDWORD(v139[0])) {
    goto LABEL_164;
  }
  unint64_t v102 = *(WTF **)&v139[0];
  if (!HIDWORD(v139[0])) {
    goto LABEL_158;
  }
  if (HIDWORD(v139[0]) >> 29)
  {
    __break(0xC471u);
LABEL_203:
    __break(1u);
    return;
  }
  long long v103 = (WTF *)(8 * HIDWORD(v139[0]));
  uint64_t v104 = (WTF *)WTF::fastMalloc(v103);
  DWORD2(v139[0]) = v100;
  *(void *)&v139[0] = v104;
  unint64_t v102 = v101;
  if (v104 != v101)
  {
    unsigned int v105 = v101;
    do
    {
      char v106 = *(const void **)v105;
      *(void *)unsigned int v105 = 0;
      unint64_t v107 = v104;
      *(void *)uint64_t v104 = v106;
      uint64_t v108 = *(const void **)v105;
      uint64_t v109 = v105;
      *(void *)unsigned int v105 = 0;
      if (v108) {
        CFRelease(v108);
      }
      uint64_t v104 = (WTF *)((char *)v107 + 8);
      unsigned int v105 = (WTF *)((char *)v109 + 8);
      long long v103 = (WTF *)((char *)v103 - 8);
    }
    while (v103);
    unint64_t v102 = *(WTF **)&v139[0];
  }
LABEL_158:
  if (v101)
  {
    if (v102 == v101)
    {
      *(void *)&v139[0] = 0;
      DWORD2(v139[0]) = 0;
    }
    WTF::fastFree(v101, v32);
    long long v101 = *(WTF **)&v139[0];
  }
  else
  {
    long long v101 = v102;
  }
LABEL_164:
  *(void *)&long long v130 = v101;
  uint64_t v110 = *((void *)&v139[0] + 1);
  v139[0] = 0uLL;
  *((void *)&v130 + 1) = v110;
LABEL_76:
  LOBYTE(v131) = 1;
LABEL_86:
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v139, v32);
  if ((_BYTE)v131)
  {
LABEL_87:
    uint64_t v67 = *((void *)&v130 + 1);
    unint64_t v118 = (const void **)v130;
    long long v130 = 0uLL;
    uint64_t v119 = v67;
    char v120 = 1;
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v130, v66);
    char v121 = 1;
    goto LABEL_88;
  }
LABEL_146:
  uint64_t v95 = *(void *)a1;
  uint64_t v96 = *(void *)(a1 + 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v97 = *(void *)(a1 + 24);
  if (v97)
  {
    if (v96)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v97 + 16))(v97, v95);
      if ((_BYTE)v131) {
        goto LABEL_87;
      }
    }
  }
LABEL_147:
  LOBYTE(v118) = 0;
  char v121 = 0;
  char v30 = *(void **)a1;
  uint64_t v98 = *(void *)(a1 + 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v99 = *(void *)(a1 + 24);
  if (!v99 || !v98 || ((*(void (**)(uint64_t, void *))(*(void *)v99 + 16))(v99, v30), !v121))
  {
    int v51 = 0;
    LOBYTE(v130) = 0;
    unsigned __int8 v138 = 0;
    goto LABEL_116;
  }
LABEL_88:
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v147);
  if (!v148)
  {
    int v51 = 0;
    LOBYTE(v130) = 0;
    unsigned __int8 v138 = 0;
    goto LABEL_113;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSDictionary>>((uint64_t)&v116, (const void ***)a1);
  if (!v117)
  {
    int v51 = 0;
    LOBYTE(v130) = 0;
    unsigned __int8 v138 = 0;
    goto LABEL_110;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>((uint64_t *)a1, (uint64_t)&cf);
  if (!v115)
  {
    int v51 = 0;
    LOBYTE(v130) = 0;
    unsigned __int8 v138 = 0;
    goto LABEL_108;
  }
  if (!*(void *)a1)
  {
    int v51 = 0;
    LOBYTE(v130) = 0;
    unsigned __int8 v138 = 0;
    goto LABEL_103;
  }
  if (!v129 || !v127 || !v125 || !v123 || !v121 || !v148) {
    goto LABEL_203;
  }
  CFTypeRef v68 = v128;
  CFTypeRef v128 = 0;
  CFTypeRef v69 = v126;
  CFTypeRef v126 = 0;
  CFTypeRef v70 = v124;
  CFTypeRef v124 = 0;
  CFTypeRef v71 = v122;
  CFTypeRef v122 = 0;
  LOBYTE(v141) = 0;
  char v143 = 0;
  if (v120)
  {
    uint64_t v141 = v118;
    uint64_t v72 = v119;
    unint64_t v118 = 0;
    uint64_t v119 = 0;
    uint64_t v142 = v72;
    char v143 = 1;
  }
  CFTypeRef v73 = v147;
  CFTypeRef v147 = 0;
  CFTypeRef v74 = v116;
  CFTypeRef v116 = 0;
  CFTypeRef v75 = cf;
  CFTypeRef cf = 0;
  *(void *)&long long v130 = v15;
  *((void *)&v130 + 1) = v68;
  memset(v139, 0, sizeof(v139));
  *(void *)&long long v131 = v69;
  *((void *)&v131 + 1) = v70;
  uint64_t v140 = 0;
  CFTypeRef v132 = v71;
  LOBYTE(v133) = 0;
  char v135 = 0;
  if (v120)
  {
    char v133 = v141;
    uint64_t v76 = v142;
    uint64_t v141 = 0;
    uint64_t v142 = 0;
    uint64_t v134 = v76;
    char v135 = 1;
  }
  uint64_t v144 = 0;
  uint64_t v145 = 0;
  *(void *)&long long v136 = v73;
  *((void *)&v136 + 1) = v74;
  uint64_t v146 = 0;
  CFTypeRef v137 = v75;
  int v51 = 1;
  unsigned __int8 v138 = 1;
  WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult((WebKit::CoreIPCDDScannerResult *)v139, v30);
  uint64_t v15 = 0;
  if (v115)
  {
LABEL_103:
    CFTypeRef v77 = cf;
    CFTypeRef cf = 0;
    if (v77) {
      CFRelease(v77);
    }
  }
LABEL_108:
  if (v116) {
    CFRelease(v116);
  }
LABEL_110:
  if (v148)
  {
    CFTypeRef v78 = v147;
    CFTypeRef v147 = 0;
    if (v78) {
      CFRelease(v78);
    }
  }
LABEL_113:
  if (v121 && v120) {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v118, v30);
  }
LABEL_116:
  if (v123)
  {
    CFTypeRef v79 = v122;
    CFTypeRef v122 = 0;
    if (v79) {
      CFRelease(v79);
    }
  }
LABEL_119:
  if (v125)
  {
    CFTypeRef v80 = v124;
    CFTypeRef v124 = 0;
    if (v80) {
      CFRelease(v80);
    }
  }
LABEL_122:
  if (v127)
  {
    CFTypeRef v81 = v126;
    CFTypeRef v126 = 0;
    if (v81) {
      CFRelease(v81);
    }
  }
LABEL_125:
  if (v129)
  {
    CFTypeRef v82 = v128;
    CFTypeRef v128 = 0;
    if (v82) {
      CFRelease(v82);
    }
  }
LABEL_128:
  if (v15)
  {
    CFRelease(v15);
    int v51 = v138;
  }
  if (!v51)
  {
LABEL_70:
    uint64_t v55 = *(void *)a1;
    uint64_t v56 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v57 = *(void *)(a1 + 24);
    if (v57)
    {
      if (v56)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v57 + 16))(v57, v55);
        if (v138) {
          goto LABEL_131;
        }
      }
    }
    goto LABEL_71;
  }
LABEL_131:
  long long v83 = v130;
  long long v84 = v131;
  long long v130 = 0u;
  long long v131 = 0u;
  *(_OWORD *)a2 = v83;
  *(_OWORD *)(a2 + 16) = v84;
  CFTypeRef v85 = v132;
  CFTypeRef v132 = 0;
  *(void *)(a2 + 32) = v85;
  *(unsigned char *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  if (v135)
  {
    *(void *)(a2 + 40) = v133;
    uint64_t v86 = v134;
    char v133 = 0;
    uint64_t v134 = 0;
    *(void *)(a2 + 48) = v86;
    *(unsigned char *)(a2 + 56) = 1;
  }
  long long v87 = v136;
  long long v136 = 0uLL;
  *(_OWORD *)(a2 + 64) = v87;
  CFTypeRef v88 = v137;
  CFTypeRef v137 = 0;
  *(void *)(a2 + 80) = v88;
  *(unsigned char *)(a2 + 88) = 1;
  *(unsigned char *)(a2 + 96) = 1;
  if (v138) {
    WebKit::CoreIPCDDScannerResult::~CoreIPCDDScannerResult((WebKit::CoreIPCDDScannerResult *)&v130, v30);
  }
}

void sub_1994BAD98(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, CFTypeRef a20,char a21,CFTypeRef a22,char a23,CFTypeRef cf,char a25,CFTypeRef a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,int a35,int a36,char a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  if (a33) {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a29, a2);
  }
  if (a21 && a20) {
    CFRelease(a20);
  }
  if (a23 && a22) {
    CFRelease(a22);
  }
  if (a25 && cf) {
    CFRelease(cf);
  }
  if (a27 && a26) {
    CFRelease(a26);
  }
  if (v46) {
    CFRelease(v46);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLRequest>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCNSURLRequest>>(IPC::Encoder *this, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 376))
  {
    char v90 = 0;
    unint64_t v89 = &v90;
    return IPC::Encoder::operator<<<BOOL>(this, v89);
  }
  unint64_t v4 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v5) {
    goto LABEL_92;
  }
  *unint64_t v4 = 1;
  if (!*(unsigned char *)(a2 + 376)) {
    goto LABEL_63;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    unint64_t v6 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1994BB5F8);
    }
    *unint64_t v6 = 1;
    if (!*(unsigned char *)(a2 + 16)) {
      goto LABEL_63;
    }
    IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(this, a2);
  }
  else
  {
    char v91 = 0;
    IPC::Encoder::operator<<<BOOL>(this, &v91);
  }
  char v8 = *(unsigned char *)(a2 + 24);
  uint64_t v9 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB598);
  }
  *uint64_t v9 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, (uint64_t *)(a2 + 32));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(this, *(double *)(a2 + 72));
  char v11 = *(unsigned char *)(a2 + 80);
  unint64_t v12 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB5B8);
  }
  *unint64_t v12 = v11;
  int v14 = *(unsigned __int8 *)(a2 + 128);
  uint64_t v15 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v14)
  {
    if (v16)
    {
      unsigned char *v15 = 0;
      goto LABEL_14;
    }
LABEL_92:
    __break(0xC471u);
    JUMPOUT(0x1994BB578);
  }
  if (!v16)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB7F8);
  }
  unsigned char *v15 = 1;
  if (!*(unsigned char *)(a2 + 128)) {
    goto LABEL_63;
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, (uint64_t *)(a2 + 88));
LABEL_14:
  char v17 = *(unsigned char *)(a2 + 136);
  uint64_t v18 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v19)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB5D8);
  }
  *uint64_t v18 = v17;
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(this, *(_WORD *)(a2 + 138));
  char v20 = *(unsigned char *)(a2 + 140);
  uint64_t v21 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB618);
  }
  *uint64_t v21 = v20;
  char v23 = *(unsigned char *)(a2 + 141);
  uint64_t v24 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v25)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB638);
  }
  *uint64_t v24 = v23;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(this, *(double *)(a2 + 144));
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(this, *(double *)(a2 + 152));
  char v26 = *(unsigned char *)(a2 + 160);
  uint64_t v27 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v28)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB658);
  }
  *uint64_t v27 = v26;
  IPC::ArgumentCoder<int,void>::encode<IPC::Encoder>(this, *(_DWORD *)(a2 + 164));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(this, (char *)(a2 + 168));
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCString>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCString> const&>(this, a2 + 176);
  if (*(unsigned char *)(a2 + 208))
  {
    CFTypeRef v29 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
    if (!v30)
    {
      __break(0xC471u);
      JUMPOUT(0x1994BB738);
    }
    *CFTypeRef v29 = 1;
    if (!*(unsigned char *)(a2 + 208)) {
      goto LABEL_63;
    }
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(this, *(unsigned int *)(a2 + 204));
    uint64_t v31 = *(unsigned int *)(a2 + 204);
    if (v31)
    {
      uint64_t v32 = *(void *)(a2 + 192);
      uint64_t v33 = v32 + 32 * v31;
      do
      {
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(this, (uint64_t *)v32);
        unsigned __int8 v93 = *(_DWORD *)(v32 + 24);
        IPC::Encoder::operator<<<BOOL>(this, (char *)&v93);
        IPC::ArgumentCoder<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(this, v32 + 8, v93);
        v32 += 32;
      }
      while (v32 != v33);
    }
  }
  else
  {
    char v92 = 0;
    IPC::Encoder::operator<<<BOOL>(this, &v92);
  }
  if (*(unsigned char *)(a2 + 224))
  {
    char v94 = 1;
    IPC::Encoder::operator<<<BOOL>(this, &v94);
    if (!*(unsigned char *)(a2 + 224)) {
      goto LABEL_63;
    }
    IPC::Encoder::operator<<<WebKit::CoreIPCData const&>(this, (WebKit::CoreIPCData *)(a2 + 216));
  }
  else
  {
    uint64_t v34 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
    if (!v35)
    {
      __break(0xC471u);
      JUMPOUT(0x1994BB678);
    }
    *uint64_t v34 = 0;
  }
  if (*(unsigned char *)(a2 + 248))
  {
    char v95 = 1;
    IPC::Encoder::operator<<<BOOL>(this, &v95);
    if (*(unsigned char *)(a2 + 248))
    {
      IPC::VectorArgumentCoder<false,std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(this, a2 + 232);
      goto LABEL_30;
    }
LABEL_63:
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_92;
  }
  unsigned int v36 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v37)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB698);
  }
  *unsigned int v36 = 0;
LABEL_30:
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(this, *(double *)(a2 + 256));
  char v38 = *(unsigned char *)(a2 + 264);
  unint64_t v39 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v40)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB6B8);
  }
  *unint64_t v39 = v38;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(this, *(double *)(a2 + 272));
  char v41 = *(unsigned char *)(a2 + 280);
  uint64_t v42 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v43)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB6D8);
  }
  *uint64_t v42 = v41;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCString>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCString> const&>(this, a2 + 288);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(this, (char *)(a2 + 304));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(this, (char *)(a2 + 306));
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(this, (char *)(a2 + 308));
  char v44 = *(unsigned char *)(a2 + 310);
  uint64_t v45 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v46)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB6F8);
  }
  unsigned char *v45 = v44;
  char v47 = *(unsigned char *)(a2 + 311);
  CFTypeRef v48 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v49)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB718);
  }
  unsigned char *v48 = v47;
  char v50 = *(unsigned char *)(a2 + 312);
  int v51 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v52)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB758);
  }
  unsigned char *v51 = v50;
  IPC::ArgumentCoder<std::optional<WebKit::CoreIPCString>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCString> const&>(this, a2 + 320);
  char v53 = *(unsigned char *)(a2 + 336);
  uint64_t v54 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v55)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB778);
  }
  unsigned char *v54 = v53;
  char v56 = *(unsigned char *)(a2 + 337);
  uint64_t v57 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v58)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB798);
  }
  unsigned char *v57 = v56;
  char v59 = *(unsigned char *)(a2 + 338);
  uint64_t v60 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v61)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB7B8);
  }
  unsigned char *v60 = v59;
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(this, (char *)(a2 + 339));
  char v62 = *(unsigned char *)(a2 + 341);
  uint64_t v63 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v64)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB7D8);
  }
  *uint64_t v63 = v62;
  char v65 = *(unsigned char *)(a2 + 342);
  uint64_t v66 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v67)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB818);
  }
  unsigned char *v66 = v65;
  char v68 = *(unsigned char *)(a2 + 343);
  CFTypeRef v69 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v70)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB838);
  }
  *CFTypeRef v69 = v68;
  char v71 = *(unsigned char *)(a2 + 344);
  uint64_t v72 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v73)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB858);
  }
  *uint64_t v72 = v71;
  char v74 = *(unsigned char *)(a2 + 345);
  CFTypeRef v75 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v76)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB878);
  }
  unsigned char *v75 = v74;
  char v77 = *(unsigned char *)(a2 + 346);
  CFTypeRef v78 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v79)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB898);
  }
  *CFTypeRef v78 = v77;
  char v80 = *(unsigned char *)(a2 + 347);
  CFTypeRef v81 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v82)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB8B8);
  }
  unsigned char *v81 = v80;
  if (!*(unsigned char *)(a2 + 368))
  {
    char v96 = 0;
    unint64_t v89 = &v96;
    return IPC::Encoder::operator<<<BOOL>(this, v89);
  }
  long long v83 = (unsigned char *)IPC::Encoder::grow(this, 1uLL, 1);
  if (!v84)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BB8D8);
  }
  *long long v83 = 1;
  if (!*(unsigned char *)(a2 + 368)) {
    goto LABEL_63;
  }
  uint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(this, *(unsigned int *)(a2 + 364));
  uint64_t v86 = *(unsigned int *)(a2 + 364);
  if (v86)
  {
    long long v87 = *(void **)(a2 + 352);
    uint64_t v88 = 16 * v86;
    do
    {
      uint64_t result = (uint64_t)IPC::ArgumentCoder<WebKit::CoreIPCNumber,void>::encode(this, v87);
      v87 += 2;
      v88 -= 16;
    }
    while (v88);
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLRequest>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v6)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v15 = *((void *)a1 + 3);
    if (v15)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        uint64_t v14 = *(void *)a1;
        unint64_t v13 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_20;
  }
  uint64_t v7 = (unsigned __int8 *)(v5 + v6);
  *((void *)a1 + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v13 = v4;
    uint64_t v14 = 0;
LABEL_20:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v16 = *((void *)a1 + 3);
    if (v16)
    {
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14, v13);
        uint64_t v5 = *(void *)a1;
        unint64_t v4 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_21;
  }
  unsigned int v8 = *v7;
  if (v8 >= 2)
  {
LABEL_21:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v17 = *((void *)a1 + 3);
    if (v17 && v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v5);
    }
    goto LABEL_27;
  }
  if (v8)
  {
    IPC::ArgumentCoder<WebKit::CoreIPCNSURLRequestData,void>::decode(v21, a1);
    if (!v22) {
      IPC::Decoder::markInvalid(a1);
    }
    if (*(void *)a1)
    {
      if (!v22)
      {
        __break(1u);
        goto LABEL_26;
      }
      WebKit::CoreIPCNSURLRequestData::CoreIPCNSURLRequestData((uint64_t)v20, v21);
      WebKit::CoreIPCNSURLRequestData::CoreIPCNSURLRequestData((uint64_t)v18, v20);
      char v19 = 1;
      WebKit::CoreIPCNSURLRequestData::~CoreIPCNSURLRequestData((WebKit::CoreIPCNSURLRequestData *)v20, v10);
    }
    else
    {
      LOBYTE(v18[0]) = 0;
      char v19 = 0;
    }
    if (v22) {
      WebKit::CoreIPCNSURLRequestData::~CoreIPCNSURLRequestData((WebKit::CoreIPCNSURLRequestData *)v21, v9);
    }
    if (v19) {
      goto LABEL_13;
    }
LABEL_26:
    IPC::Decoder::markInvalid(a1);
    if (v19)
    {
LABEL_13:
      WebKit::CoreIPCNSURLRequestData::CoreIPCNSURLRequestData((uint64_t)a2, v18);
      a2[376] = 1;
      a2[384] = 1;
      if (!v19) {
        return;
      }
      unint64_t v12 = v18;
      goto LABEL_15;
    }
LABEL_27:
    *a2 = 0;
    a2[384] = 0;
    return;
  }
  LOBYTE(v21[0]) = 0;
  char v22 = 0;
  std::__optional_move_base<WebKit::CoreIPCNSURLRequest,false>::__optional_move_base[abi:sn180100](a2, (uint64_t)v21);
  a2[384] = 1;
  if (v22)
  {
    unint64_t v12 = v21;
LABEL_15:
    WebKit::CoreIPCNSURLRequestData::~CoreIPCNSURLRequestData((WebKit::CoreIPCNSURLRequestData *)v12, v11);
  }
}

void sub_1994BBB40(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a57) {
    WebKit::CoreIPCNSURLRequestData::~CoreIPCNSURLRequestData((WebKit::CoreIPCNSURLRequestData *)&a10, a2);
  }
  _Unwind_Resume(a1);
}

unsigned char *std::__optional_move_base<WebKit::CoreIPCNSURLRequest,false>::__optional_move_base[abi:sn180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[376] = 0;
  if (*(unsigned char *)(a2 + 376))
  {
    WebKit::CoreIPCNSURLRequestData::CoreIPCNSURLRequestData((uint64_t)a1, (uint64_t *)a2);
    a1[376] = 1;
  }
  return a1;
}

void sub_1994BBBD0(_Unwind_Exception *exception_object, void *a2)
{
  if (*((unsigned char *)v2 + 376)) {
    WebKit::CoreIPCNSURLRequestData::~CoreIPCNSURLRequestData(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPaymentMethod>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCPKPaymentMethod>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 64);
  uint64_t result = (uint64_t *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (v6)
    {
      *(unsigned char *)uint64_t result = 1;
      if (*(unsigned char *)(a2 + 64))
      {
        IPC::encodeObjectDirectly<NSNumber>(a1, *(WebKit::CoreIPCNumber **)a2);
        IPC::encodeObjectDirectly<NSString>(a1, *(void *)(a2 + 8));
        IPC::encodeObjectDirectly<NSString>(a1, *(void *)(a2 + 16));
        IPC::encodeObjectDirectly<PKSecureElementPass>(a1, *(void **)(a2 + 24));
        IPC::encodeObjectDirectly<NSString>(a1, *(void *)(a2 + 32));
        uint64_t v7 = *(void *)(a2 + 40);
        if (!v7)
        {
          LOBYTE(v14[0]) = 0;
          char v37 = 0;
          char v11 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
          if (!v10)
          {
            __break(0xC471u);
            JUMPOUT(0x1994BBF04);
          }
          *char v11 = 0;
          goto LABEL_12;
        }
        WebKit::CoreIPCCNContact::CoreIPCCNContact((WebKit::CoreIPCCNContact *)v13, *(CNContact **)(a2 + 40));
        WebKit::CoreIPCCNContact::CoreIPCCNContact((uint64_t)v14, v13);
        char v37 = 1;
        unsigned int v8 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
        if (!v9)
        {
          __break(0xC471u);
          JUMPOUT(0x1994BBEC4);
        }
        unsigned char *v8 = 1;
        if (v37)
        {
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v14);
          IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, v14[1]);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, &v15);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, &v16);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, &v17);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, &v18);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, &v19);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, &v20);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, &v21);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, &v22);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, &v23);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, &v24);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, &v25);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, &v26);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, &v27);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, &v28);
          IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, &v29);
          IPC::ArgumentCoder<std::optional<WebKit::CoreIPCDateComponents>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCDateComponents> const&>(a1, (uint64_t)&v30);
          IPC::ArgumentCoder<std::optional<WebKit::CoreIPCDateComponents>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCDateComponents> const&>(a1, (uint64_t)&v31);
          ((void (*)(IPC::Encoder *, uint64_t *))IPC::VectorArgumentCoder<false,WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>)(a1, &v32);
          ((void (*)(IPC::Encoder *, uint64_t *))IPC::VectorArgumentCoder<false,WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>)(a1, &v33);
          ((void (*)(IPC::Encoder *, uint64_t *))IPC::VectorArgumentCoder<false,WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>)(a1, &v34);
          ((void (*)(IPC::Encoder *, uint64_t *))IPC::VectorArgumentCoder<false,WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>)(a1, &v35);
          ((void (*)(IPC::Encoder *, uint64_t *))IPC::VectorArgumentCoder<false,WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>)(a1, &v36);
LABEL_12:
          if (v37) {
            WebKit::CoreIPCCNContact::~CoreIPCCNContact((WebKit::CoreIPCCNContact *)v14, v10);
          }
          if (v7) {
            WebKit::CoreIPCCNContact::~CoreIPCCNContact((WebKit::CoreIPCCNContact *)v13, v10);
          }
          IPC::encodeObjectDirectly<NSString>(a1, *(void *)(a2 + 48));
          unint64_t v12 = *(WebKit::CoreIPCNumber **)(a2 + 56);
          return IPC::encodeObjectDirectly<NSNumber>(a1, v12);
        }
      }
      else
      {
        std::__throw_bad_optional_access[abi:sn180100]();
      }
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x1994BBEA4);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BBEE4);
  }
  *(unsigned char *)uint64_t result = 0;
  return result;
}

void sub_1994BBF14(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (LOBYTE(STACK[0x258])) {
    WebKit::CoreIPCCNContact::~CoreIPCCNContact((WebKit::CoreIPCCNContact *)&a47, a2);
  }
  WebKit::CoreIPCCNContact::~CoreIPCCNContact((WebKit::CoreIPCCNContact *)&a10, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPaymentMethod>,void>::decode<IPC::Decoder>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v220 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 16) - *(void *)a1;
  if (v4 <= v6)
  {
    unint64_t v112 = 0;
    uint64_t v113 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v114 = *(void *)(a1 + 24);
    if (v114)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v114 + 16))(v114);
        uint64_t v113 = *(void *)a1;
        unint64_t v112 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v112 = 0;
        uint64_t v113 = 0;
      }
    }
    goto LABEL_264;
  }
  uint64_t v7 = (unsigned __int8 *)(v5 + v6);
  *(void *)(a1 + 16) = v7 + 1;
  if (!v5)
  {
    unint64_t v112 = v4;
    uint64_t v113 = 0;
LABEL_264:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v115 = *(void *)(a1 + 24);
    if (v115)
    {
      if (v112)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v115 + 16))(v115, v113, v112);
        uint64_t v5 = *(void *)a1;
        unint64_t v4 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_265;
  }
  unsigned int v8 = *v7;
  if (v8 >= 2)
  {
LABEL_265:
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v116 = *(void *)(a1 + 24);
    if (v116 && v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v116 + 16))(v116, v5);
    }
    goto LABEL_269;
  }
  if (!v8)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 64) = 0;
    *(unsigned char *)(a2 + 72) = 1;
    return;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>((uint64_t *)a1, (uint64_t)&v141);
  if (!v142)
  {
    LOBYTE(v130) = 0;
    char v134 = 0;
    goto LABEL_258;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v139);
  if (!v140)
  {
    LOBYTE(v130) = 0;
    char v134 = 0;
    goto LABEL_255;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v137);
  if (!v138)
  {
    LOBYTE(v130) = 0;
    char v134 = 0;
    goto LABEL_252;
  }
  uint64_t v9 = (const void *)((uint64_t (*)(void))*MEMORY[0x1E4FB6350])();
  v205[0] = v9;
  if (v9) {
    CFRetain(v9);
  }
  WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v150, v205, 1);
  WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)(a1 + 56), (void **)&v150);
  IPC::decodeObjectDirectlyRequiringAllowedClasses<PKSecureElementPass>((uint64_t *)a1, cf);
  int v11 = LOBYTE(cf[1]);
  if (LOBYTE(cf[1]))
  {
    CFTypeRef v12 = cf[0];
    if (cf[0])
    {
      CFRetain(cf[0]);
      CFRelease(v12);
    }
  }
  else
  {
    CFTypeRef v12 = 0;
  }
  if (v150) {
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable((const void **)v150, v10);
  }
  CFTypeRef v13 = v205[0];
  v205[0] = 0;
  if (!v13)
  {
    if (v11) {
      goto LABEL_22;
    }
LABEL_110:
    uint64_t v71 = *(void *)a1;
    uint64_t v72 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v73 = *(void *)(a1 + 24);
    if (v73 && v72) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v73 + 16))(v73, v71);
    }
    LOBYTE(v130) = 0;
    char v134 = 0;
    goto LABEL_249;
  }
  CFRelease(v13);
  if (!v11) {
    goto LABEL_110;
  }
LABEL_22:
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v135);
  if (!v136)
  {
    LOBYTE(v130) = 0;
    char v134 = 0;
    goto LABEL_247;
  }
  uint64_t v14 = (const void *)((uint64_t (*)(void))*MEMORY[0x1E4FB6278])();
  CFTypeRef v204 = v14;
  if (v14) {
    CFRetain(v14);
  }
  WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v143, &v204, 1);
  WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)(a1 + 56), &v143);
  unint64_t v15 = *(void *)(a1 + 8);
  uint64_t v16 = *(char **)a1;
  unint64_t v17 = *(void *)(a1 + 16) - *(void *)a1;
  if (v15 <= v17) {
    goto LABEL_271;
  }
  uint64_t v18 = &v16[v17];
  *(void *)(a1 + 16) = v18 + 1;
  if (!v16)
  {
    unint64_t v120 = v15;
    uint64_t v121 = 0;
    goto LABEL_272;
  }
  unsigned int v19 = *v18;
  if (v19 >= 2) {
    goto LABEL_273;
  }
  if (!v19)
  {
    LOBYTE(cf[0]) = 0;
    char v148 = 0;
    char v149 = 1;
    goto LABEL_214;
  }
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v202);
  unint64_t v20 = IPC::Decoder::decode<long>((void *)a1);
  if (!*(void *)a1) {
    goto LABEL_108;
  }
  if (!(_BYTE)v21) {
    goto LABEL_270;
  }
  uint64_t v22 = (const void *)v20;
  if (v20 >= 2)
  {
LABEL_108:
    LOBYTE(v150) = 0;
    char v152 = 0;
    goto LABEL_206;
  }
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v200);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v198);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v196);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v194);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v192);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v190);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v188);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v186);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v184);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v182);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v180);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v178);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v176);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v174);
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v172);
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCDateComponents>>((uint64_t)v170, (IPC::Decoder *)a1);
  IPC::Decoder::decode<std::optional<WebKit::CoreIPCDateComponents>>((uint64_t)v168, (IPC::Decoder *)a1);
  IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v165, (IPC::Decoder *)a1);
  if (!*(void *)a1) {
    goto LABEL_112;
  }
  if (!v167) {
    goto LABEL_270;
  }
  if (!HIDWORD(v166))
  {
LABEL_38:
    IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v162, (IPC::Decoder *)a1);
    if (!*(void *)a1)
    {
LABEL_113:
      LOBYTE(v150) = 0;
      char v152 = 0;
LABEL_123:
      if (v164) {
        WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v162, v21);
      }
      goto LABEL_125;
    }
    if (!v164) {
      goto LABEL_270;
    }
    if (HIDWORD(v163))
    {
      uint64_t v26 = 96 * HIDWORD(v163);
      uint64_t v27 = (int *)(v162 + 88);
      do
      {
        int v28 = *v27;
        v27 += 24;
        if (v28 != 1) {
          goto LABEL_113;
        }
        v26 -= 96;
      }
      while (v26);
    }
    IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v159, (IPC::Decoder *)a1);
    if (!*(void *)a1) {
      goto LABEL_114;
    }
    if (!v161) {
      goto LABEL_270;
    }
    if (HIDWORD(v160))
    {
      uint64_t v29 = 96 * HIDWORD(v160);
      uint64_t v30 = (int *)(v159 + 88);
      while (1)
      {
        int v31 = *v30;
        v30 += 24;
        if (v31 != 3) {
          break;
        }
        v29 -= 96;
        if (!v29) {
          goto LABEL_50;
        }
      }
LABEL_114:
      LOBYTE(v150) = 0;
      char v152 = 0;
LABEL_121:
      if (v161) {
        WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v159, v21);
      }
      goto LABEL_123;
    }
LABEL_50:
    IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v156, (IPC::Decoder *)a1);
    if (!*(void *)a1) {
      goto LABEL_115;
    }
    if (!v158) {
      goto LABEL_270;
    }
    if (HIDWORD(v157))
    {
      uint64_t v32 = 96 * HIDWORD(v157);
      uint64_t v33 = (int *)(v156 + 88);
      while (1)
      {
        int v34 = *v33;
        v33 += 24;
        if (v34 != 2) {
          break;
        }
        v32 -= 96;
        if (!v32) {
          goto LABEL_56;
        }
      }
LABEL_115:
      LOBYTE(v150) = 0;
      char v152 = 0;
LABEL_119:
      if (v158) {
        WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v156, v21);
      }
      goto LABEL_121;
    }
LABEL_56:
    IPC::Decoder::decode<WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v153, (IPC::Decoder *)a1);
    if (*(void *)a1)
    {
      if (!v155) {
        goto LABEL_270;
      }
      if (!HIDWORD(v154))
      {
LABEL_62:
        char v213 = 0;
        v214[0] = 0;
        v214[32] = 0;
        *(_OWORD *)unint64_t v205 = 0u;
        long long v206 = 0u;
        long long v207 = 0u;
        long long v208 = 0u;
        long long v209 = 0u;
        long long v210 = 0u;
        long long v211 = 0u;
        memset(v212, 0, 25);
        long long v218 = 0u;
        long long v219 = 0u;
        long long v215 = 0u;
        long long v216 = 0u;
        long long v217 = 0u;
        if (!v203) {
          goto LABEL_270;
        }
        char v38 = v202;
        uint64_t v202 = 0;
        v205[0] = v38;
        v205[1] = v22;
        if (!v201) {
          goto LABEL_270;
        }
        unint64_t v39 = v200;
        unint64_t v200 = 0;
        *(void *)&long long v206 = v39;
        if (!v199) {
          goto LABEL_270;
        }
        uint64_t v40 = v198;
        uint64_t v198 = 0;
        *((void *)&v206 + 1) = v40;
        if (!v197) {
          goto LABEL_270;
        }
        char v41 = v196;
        long long v196 = 0;
        *(void *)&long long v207 = v41;
        if (!v195) {
          goto LABEL_270;
        }
        uint64_t v42 = v194;
        uint64_t v194 = 0;
        *((void *)&v207 + 1) = v42;
        if (!v193) {
          goto LABEL_270;
        }
        uint64_t v43 = v192;
        uint64_t v192 = 0;
        *(void *)&long long v208 = v43;
        if (!v191) {
          goto LABEL_270;
        }
        char v44 = v190;
        unint64_t v190 = 0;
        *((void *)&v208 + 1) = v44;
        if (!v189) {
          goto LABEL_270;
        }
        uint64_t v45 = v188;
        long long v188 = 0;
        *(void *)&long long v209 = v45;
        if (!v187) {
          goto LABEL_270;
        }
        uint64_t v46 = v186;
        long long v186 = 0;
        *((void *)&v209 + 1) = v46;
        if (!v185) {
          goto LABEL_270;
        }
        char v47 = v184;
        long long v184 = 0;
        *(void *)&long long v210 = v47;
        if (!v183) {
          goto LABEL_270;
        }
        CFTypeRef v48 = v182;
        uint64_t v182 = 0;
        *((void *)&v210 + 1) = v48;
        if (!v181) {
          goto LABEL_270;
        }
        uint64_t v49 = v180;
        uint64_t v180 = 0;
        *(void *)&long long v211 = v49;
        if (!v179) {
          goto LABEL_270;
        }
        char v50 = v178;
        long long v178 = 0;
        *((void *)&v211 + 1) = v50;
        if (!v177) {
          goto LABEL_270;
        }
        int v51 = v176;
        CFTypeRef v176 = 0;
        *(void *)&v212[0] = v51;
        if (!v175) {
          goto LABEL_270;
        }
        uint64_t v52 = v174;
        long long v174 = 0;
        *((void *)&v212[0] + 1) = v52;
        if (!v173) {
          goto LABEL_270;
        }
        char v53 = v172;
        uint64_t v172 = 0;
        *(void *)&v212[1] = v53;
        if (!v171) {
          goto LABEL_270;
        }
        std::__optional_storage_base<WebKit::CoreIPCDateComponents,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::CoreIPCDateComponents,false>>((uint64_t)&v212[1] + 8, (uint64_t)v170);
        if (!v169) {
          goto LABEL_270;
        }
        std::__optional_storage_base<WebKit::CoreIPCDateComponents,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::CoreIPCDateComponents,false>>((uint64_t)v214, (uint64_t)v168);
        if (!v167) {
          goto LABEL_270;
        }
        if (HIDWORD(v215)) {
          WTF::VectorDestructor<true,WebKit::CoreIPCContactLabeledValue>::destruct((WTF::StringImpl *)v215, (WTF::StringImpl *)(v215 + 96 * HIDWORD(v215)));
        }
        uint64_t v55 = (WTF *)v215;
        if ((void)v215)
        {
          *(void *)&long long v215 = 0;
          DWORD2(v215) = 0;
          WTF::fastFree(v55, v54);
        }
        uint64_t v56 = v165;
        uint64_t v165 = 0;
        *(void *)&long long v215 = v56;
        uint64_t v57 = v166;
        uint64_t v166 = 0;
        *((void *)&v215 + 1) = v57;
        if (!v164) {
          goto LABEL_270;
        }
        if (HIDWORD(v216)) {
          WTF::VectorDestructor<true,WebKit::CoreIPCContactLabeledValue>::destruct((WTF::StringImpl *)v216, (WTF::StringImpl *)(v216 + 96 * HIDWORD(v216)));
        }
        uint64_t v58 = (WTF *)v216;
        if ((void)v216)
        {
          *(void *)&long long v216 = 0;
          DWORD2(v216) = 0;
          WTF::fastFree(v58, v54);
        }
        uint64_t v59 = v162;
        uint64_t v162 = 0;
        *(void *)&long long v216 = v59;
        uint64_t v60 = v163;
        uint64_t v163 = 0;
        *((void *)&v216 + 1) = v60;
        if (!v161) {
          goto LABEL_270;
        }
        if (HIDWORD(v217)) {
          WTF::VectorDestructor<true,WebKit::CoreIPCContactLabeledValue>::destruct((WTF::StringImpl *)v217, (WTF::StringImpl *)(v217 + 96 * HIDWORD(v217)));
        }
        uint64_t v61 = (WTF *)v217;
        if ((void)v217)
        {
          *(void *)&long long v217 = 0;
          DWORD2(v217) = 0;
          WTF::fastFree(v61, v54);
        }
        uint64_t v62 = v159;
        uint64_t v159 = 0;
        *(void *)&long long v217 = v62;
        uint64_t v63 = v160;
        uint64_t v160 = 0;
        *((void *)&v217 + 1) = v63;
        if (!v158) {
          goto LABEL_270;
        }
        if (HIDWORD(v218)) {
          WTF::VectorDestructor<true,WebKit::CoreIPCContactLabeledValue>::destruct((WTF::StringImpl *)v218, (WTF::StringImpl *)(v218 + 96 * HIDWORD(v218)));
        }
        uint64_t v64 = (WTF *)v218;
        if ((void)v218)
        {
          *(void *)&long long v218 = 0;
          DWORD2(v218) = 0;
          WTF::fastFree(v64, v54);
        }
        uint64_t v65 = v156;
        uint64_t v156 = 0;
        *(void *)&long long v218 = v65;
        uint64_t v66 = v157;
        uint64_t v157 = 0;
        *((void *)&v218 + 1) = v66;
        if (!v155) {
          goto LABEL_270;
        }
        if (HIDWORD(v219)) {
          WTF::VectorDestructor<true,WebKit::CoreIPCContactLabeledValue>::destruct((WTF::StringImpl *)v219, (WTF::StringImpl *)(v219 + 96 * HIDWORD(v219)));
        }
        uint64_t v67 = (WTF *)v219;
        if ((void)v219)
        {
          *(void *)&long long v219 = 0;
          DWORD2(v219) = 0;
          WTF::fastFree(v67, v54);
        }
        uint64_t v68 = v153;
        uint64_t v153 = 0;
        *(void *)&long long v219 = v68;
        uint64_t v69 = v154;
        uint64_t v154 = 0;
        *((void *)&v219 + 1) = v69;
        WebKit::CoreIPCCNContact::CoreIPCCNContact((uint64_t)&v150, (uint64_t *)v205);
        char v152 = 1;
        WebKit::CoreIPCCNContact::~CoreIPCCNContact((WebKit::CoreIPCCNContact *)v205, v70);
        goto LABEL_117;
      }
      uint64_t v35 = 96 * HIDWORD(v154);
      uint64_t v36 = (int *)(v153 + 88);
      while (1)
      {
        int v37 = *v36;
        v36 += 24;
        if (v37 != 3) {
          break;
        }
        v35 -= 96;
        if (!v35) {
          goto LABEL_62;
        }
      }
    }
    LOBYTE(v150) = 0;
    char v152 = 0;
LABEL_117:
    if (v155) {
      WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v153, v21);
    }
    goto LABEL_119;
  }
  uint64_t v23 = 96 * HIDWORD(v166);
  uint64_t v24 = (int *)(v165 + 88);
  while (1)
  {
    int v25 = *v24;
    v24 += 24;
    if (v25) {
      break;
    }
    v23 -= 96;
    if (!v23) {
      goto LABEL_38;
    }
  }
LABEL_112:
  LOBYTE(v150) = 0;
  char v152 = 0;
LABEL_125:
  if (v167) {
    WTF::Vector<WebKit::CoreIPCContactLabeledValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v165, v21);
  }
  if (v169) {
    std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v168, v21);
  }
  if (v171) {
    std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v170, v21);
  }
  if (v173)
  {
    char v74 = v172;
    uint64_t v172 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2) {
        WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v74 -= 2;
      }
    }
  }
  if (v175)
  {
    CFTypeRef v75 = v174;
    long long v174 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2) {
        WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v75 -= 2;
      }
    }
  }
  if (v177)
  {
    uint64_t v76 = v176;
    CFTypeRef v176 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2) {
        WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v76 -= 2;
      }
    }
  }
  if (v179)
  {
    char v77 = v178;
    long long v178 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2) {
        WTF::StringImpl::destroy(v77, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v77 -= 2;
      }
    }
  }
  if (v181)
  {
    CFTypeRef v78 = v180;
    uint64_t v180 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2) {
        WTF::StringImpl::destroy(v78, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v78 -= 2;
      }
    }
  }
  if (v183)
  {
    uint64_t v79 = v182;
    uint64_t v182 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2) {
        WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v79 -= 2;
      }
    }
  }
  if (v185)
  {
    char v80 = v184;
    long long v184 = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2) {
        WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v80 -= 2;
      }
    }
  }
  if (v187)
  {
    CFTypeRef v81 = v186;
    long long v186 = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2) {
        WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v81 -= 2;
      }
    }
  }
  if (v189)
  {
    uint64_t v82 = v188;
    long long v188 = 0;
    if (v82)
    {
      if (*(_DWORD *)v82 == 2) {
        WTF::StringImpl::destroy(v82, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v82 -= 2;
      }
    }
  }
  if (v191)
  {
    long long v83 = v190;
    unint64_t v190 = 0;
    if (v83)
    {
      if (*(_DWORD *)v83 == 2) {
        WTF::StringImpl::destroy(v83, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v83 -= 2;
      }
    }
  }
  if (v193)
  {
    uint64_t v84 = v192;
    uint64_t v192 = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 2) {
        WTF::StringImpl::destroy(v84, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v84 -= 2;
      }
    }
  }
  if (v195)
  {
    CFTypeRef v85 = v194;
    uint64_t v194 = 0;
    if (v85)
    {
      if (*(_DWORD *)v85 == 2) {
        WTF::StringImpl::destroy(v85, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v85 -= 2;
      }
    }
  }
  if (v197)
  {
    uint64_t v86 = v196;
    long long v196 = 0;
    if (v86)
    {
      if (*(_DWORD *)v86 == 2) {
        WTF::StringImpl::destroy(v86, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v86 -= 2;
      }
    }
  }
  if (v199)
  {
    long long v87 = v198;
    uint64_t v198 = 0;
    if (v87)
    {
      if (*(_DWORD *)v87 == 2) {
        WTF::StringImpl::destroy(v87, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v87 -= 2;
      }
    }
  }
  if (v201)
  {
    uint64_t v88 = v200;
    unint64_t v200 = 0;
    if (v88)
    {
      if (*(_DWORD *)v88 == 2) {
        WTF::StringImpl::destroy(v88, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v88 -= 2;
      }
    }
  }
LABEL_206:
  if (v203)
  {
    unint64_t v89 = v202;
    uint64_t v202 = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 2) {
        WTF::StringImpl::destroy(v89, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v89 -= 2;
      }
    }
  }
  if (v152
    || (uint64_t v125 = *(void *)a1,
        uint64_t v126 = *(void *)(a1 + 8),
        *(void *)a1 = 0,
        *(void *)(a1 + 8) = 0,
        (uint64_t v127 = *(void *)(a1 + 24)) != 0)
    && v126
    && ((*(void (**)(uint64_t, uint64_t))(*(void *)v127 + 16))(v127, v125), v152))
  {
    WebKit::CoreIPCCNContact::CoreIPCCNContact((uint64_t)cf, (uint64_t *)&v150);
    char v148 = 1;
    char v149 = 1;
    if (!v152) {
      goto LABEL_214;
    }
    WebKit::CoreIPCCNContact::~CoreIPCCNContact((WebKit::CoreIPCCNContact *)&v150, v16);
    if (v149) {
      goto LABEL_214;
    }
    goto LABEL_278;
  }
  while (1)
  {
    LOBYTE(cf[0]) = 0;
    char v149 = 0;
LABEL_278:
    uint64_t v16 = *(char **)a1;
    uint64_t v128 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v129 = *(void *)(a1 + 24);
    if (v129 && v128 && ((*(void (**)(uint64_t, char *))(*(void *)v129 + 16))(v129, v16), v149))
    {
LABEL_214:
      if (v148)
      {
        WebKit::CoreIPCCNContact::toID((WebKit::CoreIPCCNContact *)cf, &v150);
        CFTypeRef v90 = v150;
        if (v149 && v148) {
          WebKit::CoreIPCCNContact::~CoreIPCCNContact((WebKit::CoreIPCCNContact *)cf, v16);
        }
        if (v90)
        {
          CFRetain(v90);
          CFRelease(v90);
        }
      }
      else
      {
        CFTypeRef v90 = 0;
      }
      int v91 = 0;
    }
    else
    {
      CFTypeRef v90 = 0;
      int v91 = 1;
    }
    if (v143) {
      WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(v143, v16);
    }
    CFTypeRef v92 = v204;
    CFTypeRef v204 = 0;
    if (v92) {
      break;
    }
    if (v91) {
      goto LABEL_261;
    }
LABEL_226:
    IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v150);
    if (!v151)
    {
      LOBYTE(v130) = 0;
      char v134 = 0;
      goto LABEL_242;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>((uint64_t *)a1, (uint64_t)v205);
    if (!LOBYTE(v205[1]))
    {
      LOBYTE(v130) = 0;
      char v134 = 0;
      goto LABEL_239;
    }
    if (!*(void *)a1)
    {
      LOBYTE(v130) = 0;
      char v134 = 0;
      goto LABEL_235;
    }
    if (v142 && v140 && v138 && v136 && v151)
    {
      CFTypeRef v93 = v141;
      CFTypeRef v141 = 0;
      CFTypeRef v94 = v139;
      CFTypeRef v139 = 0;
      CFTypeRef v95 = v137;
      CFTypeRef v137 = 0;
      CFTypeRef v96 = v135;
      CFTypeRef v135 = 0;
      CFTypeRef v97 = v150;
      CFTypeRef v150 = 0;
      CFTypeRef v98 = v205[0];
      v205[0] = 0;
      *(void *)&long long v130 = v93;
      *((void *)&v130 + 1) = v94;
      *(_OWORD *)CFTypeRef cf = 0u;
      long long v145 = 0u;
      *(void *)&long long v131 = v95;
      *((void *)&v131 + 1) = v12;
      *(void *)&long long v132 = v96;
      *((void *)&v132 + 1) = v90;
      long long v146 = 0u;
      long long v147 = 0u;
      *(void *)&long long v133 = v97;
      *((void *)&v133 + 1) = v98;
      char v134 = 1;
      WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod((WebKit::CoreIPCPKPaymentMethod *)cf);
      CFTypeRef v12 = 0;
      CFTypeRef v90 = 0;
      if (LOBYTE(v205[1]))
      {
LABEL_235:
        CFTypeRef v99 = v205[0];
        v205[0] = 0;
        if (v99) {
          CFRelease(v99);
        }
      }
LABEL_239:
      if (v151)
      {
        CFTypeRef v100 = v150;
        CFTypeRef v150 = 0;
        if (v100) {
          CFRelease(v100);
        }
      }
LABEL_242:
      if (v90) {
        CFRelease(v90);
      }
      goto LABEL_244;
    }
LABEL_270:
    __break(1u);
LABEL_271:
    unint64_t v120 = 0;
    uint64_t v121 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v122 = *(void *)(a1 + 24);
    if (v122)
    {
      if (v15)
      {
        (*(void (**)(uint64_t))(*(void *)v122 + 16))(v122);
        uint64_t v121 = *(void *)a1;
        unint64_t v120 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v120 = 0;
        uint64_t v121 = 0;
      }
    }
LABEL_272:
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v123 = *(void *)(a1 + 24);
    if (v123)
    {
      if (v120)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v123 + 16))(v123, v121, v120);
        uint64_t v16 = *(char **)a1;
        unint64_t v15 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v15 = 0;
        uint64_t v16 = 0;
      }
    }
LABEL_273:
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v124 = *(void *)(a1 + 24);
    if (v124 && v15) {
      (*(void (**)(uint64_t, char *))(*(void *)v124 + 16))(v124, v16);
    }
  }
  CFRelease(v92);
  if (!v91) {
    goto LABEL_226;
  }
LABEL_261:
  uint64_t v109 = *(void *)a1;
  uint64_t v110 = *(void *)(a1 + 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v111 = *(void *)(a1 + 24);
  if (v111 && v110) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v111 + 16))(v111, v109);
  }
  LOBYTE(v130) = 0;
  char v134 = 0;
LABEL_244:
  if (v136)
  {
    CFTypeRef v101 = v135;
    CFTypeRef v135 = 0;
    if (v101) {
      CFRelease(v101);
    }
  }
LABEL_247:
  if (v12) {
    CFRelease(v12);
  }
LABEL_249:
  if (v138)
  {
    CFTypeRef v102 = v137;
    CFTypeRef v137 = 0;
    if (v102) {
      CFRelease(v102);
    }
  }
LABEL_252:
  if (v140)
  {
    CFTypeRef v103 = v139;
    CFTypeRef v139 = 0;
    if (v103) {
      CFRelease(v103);
    }
  }
LABEL_255:
  if (v142)
  {
    CFTypeRef v104 = v141;
    CFTypeRef v141 = 0;
    if (v104) {
      CFRelease(v104);
    }
  }
LABEL_258:
  if (v134)
  {
    long long v105 = v130;
    long long v106 = v131;
    long long v130 = 0u;
    long long v131 = 0u;
    *(_OWORD *)a2 = v105;
    *(_OWORD *)(a2 + 16) = v106;
    long long v107 = v132;
    long long v108 = v133;
    long long v132 = 0u;
    long long v133 = 0u;
    *(_OWORD *)(a2 + 32) = v107;
    *(_OWORD *)(a2 + 48) = v108;
    *(unsigned char *)(a2 + 64) = 1;
    *(unsigned char *)(a2 + 72) = 1;
    WebKit::CoreIPCPKPaymentMethod::~CoreIPCPKPaymentMethod((WebKit::CoreIPCPKPaymentMethod *)&v130);
    return;
  }
  uint64_t v117 = *(void *)a1;
  uint64_t v118 = *(void *)(a1 + 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v119 = *(void *)(a1 + 24);
  if (v119)
  {
    if (v118) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v119 + 16))(v119, v117);
    }
  }
LABEL_269:
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 72) = 0;
}

void sub_1994BD074(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf, char a19, CFTypeRef a20,char a21,CFTypeRef a22,char a23,CFTypeRef a24,char a25,const void **a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (LOBYTE(STACK[0x2F8])) {
    WebKit::CoreIPCCNContact::~CoreIPCCNContact((WebKit::CoreIPCCNContact *)&a67, a2);
  }
  if (a26) {
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(a26, a2);
  }
  uint64_t v69 = (const void *)STACK[0x4D8];
  STACK[0x4D8] = 0;
  if (v69) {
    CFRelease(v69);
  }
  if (a19 && cf) {
    CFRelease(cf);
  }
  if (v67) {
    CFRelease(v67);
  }
  if (a21 && a20) {
    CFRelease(a20);
  }
  if (a23 && a22) {
    CFRelease(a22);
  }
  if (a25)
  {
    if (a24) {
      CFRelease(a24);
    }
  }
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPaymentMerchantSession>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v33 = a1[3];
    if (v33)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v33 + 16))(v33);
        uint64_t v32 = *a1;
        uint64_t v31 = a1[1];
      }
      else
      {
        uint64_t v31 = 0;
        uint64_t v32 = 0;
      }
    }
    goto LABEL_58;
  }
  uint64_t v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    uint64_t v31 = v4;
    uint64_t v32 = 0;
LABEL_58:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v34 = a1[3];
    if (v34)
    {
      if (v31)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32, v31);
        uint64_t v5 = *a1;
        unint64_t v4 = a1[1];
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_59;
  }
  unsigned int v8 = *v7;
  if (v8 >= 2)
  {
LABEL_59:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v35 = a1[3];
    if (v35 && v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v5);
    }
    goto LABEL_40;
  }
  if (!v8)
  {
    *a2 = 0;
    a2[128] = 0;
    a2[136] = 1;
    return;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>((uint64_t)a1, (uint64_t)&v139);
  if (!v140)
  {
    LOBYTE(v91) = 0;
    char v101 = 0;
    goto LABEL_39;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>((uint64_t)a1, (uint64_t)&v137);
  if (!v138)
  {
    int v30 = 0;
    LOBYTE(v91) = 0;
    char v101 = 0;
    goto LABEL_131;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>((uint64_t)a1, (uint64_t)&v135);
  if (!v136)
  {
    int v30 = 0;
    LOBYTE(v91) = 0;
    char v101 = 0;
LABEL_128:
    if (v138)
    {
      uint64_t v71 = v137;
      CFTypeRef v137 = 0;
      if (v71) {
        CFRelease(v71);
      }
    }
LABEL_131:
    if (v140)
    {
      uint64_t v72 = v139;
      CFTypeRef v139 = 0;
      if (v72) {
        CFRelease(v72);
      }
    }
    if (v30) {
      goto LABEL_135;
    }
LABEL_39:
    uint64_t v27 = *a1;
    uint64_t v28 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v29 = a1[3];
    if (v29)
    {
      if (v28)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v27);
        if (v101)
        {
LABEL_135:
          std::__optional_destruct_base<WebKit::CoreIPCPKPaymentMerchantSession,false>::__optional_destruct_base[abi:sn180100]<WebKit::CoreIPCPKPaymentMerchantSession>((uint64_t)a2, (uint64_t *)&v91);
          a2[136] = 1;
          if (v101) {
            WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession((WebKit::CoreIPCPKPaymentMerchantSession *)&v91, v73);
          }
          return;
        }
      }
    }
LABEL_40:
    *a2 = 0;
    a2[136] = 0;
    return;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>(a1, (uint64_t)&v133);
  if (!v134)
  {
    int v30 = 0;
    LOBYTE(v91) = 0;
    char v101 = 0;
LABEL_125:
    if (v136)
    {
      uint64_t v70 = v135;
      CFTypeRef v135 = 0;
      if (v70) {
        CFRelease(v70);
      }
    }
    goto LABEL_128;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>(a1, (uint64_t)&v131);
  if (!v132)
  {
    int v30 = 0;
    LOBYTE(v91) = 0;
    char v101 = 0;
LABEL_122:
    if (v134)
    {
      uint64_t v69 = v133;
      long long v133 = 0;
      if (v69) {
        CFRelease(v69);
      }
    }
    goto LABEL_125;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>((uint64_t)a1, (uint64_t)&v129);
  if (!v130)
  {
    int v30 = 0;
    LOBYTE(v91) = 0;
    char v101 = 0;
LABEL_119:
    if (v132)
    {
      uint64_t v68 = v131;
      long long v131 = 0;
      if (v68) {
        CFRelease(v68);
      }
    }
    goto LABEL_122;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>((uint64_t)a1, (uint64_t)&v127);
  if (!v128)
  {
    int v30 = 0;
    LOBYTE(v91) = 0;
    char v101 = 0;
LABEL_116:
    if (v130)
    {
      uint64_t v67 = v129;
      uint64_t v129 = 0;
      if (v67) {
        CFRelease(v67);
      }
    }
    goto LABEL_119;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSData>>((uint64_t)a1, (uint64_t)&v125);
  if (!v126)
  {
    int v30 = 0;
    LOBYTE(v91) = 0;
    char v101 = 0;
LABEL_113:
    if (v128)
    {
      uint64_t v66 = v127;
      uint64_t v127 = 0;
      if (v66) {
        CFRelease(v66);
      }
    }
    goto LABEL_116;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>((uint64_t)a1, (uint64_t)&v123);
  if (!v124)
  {
    int v30 = 0;
    LOBYTE(v91) = 0;
    char v101 = 0;
LABEL_110:
    if (v126)
    {
      uint64_t v65 = v125;
      uint64_t v125 = 0;
      if (v65) {
        CFRelease(v65);
      }
    }
    goto LABEL_113;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>((uint64_t)a1, (uint64_t)&v121);
  if (!v122)
  {
    int v30 = 0;
    LOBYTE(v91) = 0;
    char v101 = 0;
LABEL_107:
    if (v124)
    {
      uint64_t v64 = v123;
      uint64_t v123 = 0;
      if (v64) {
        CFRelease(v64);
      }
    }
    goto LABEL_110;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>((uint64_t)a1, (uint64_t)&v119);
  if (!v120)
  {
    int v30 = 0;
    LOBYTE(v91) = 0;
    char v101 = 0;
LABEL_104:
    if (v122)
    {
      uint64_t v63 = v121;
      uint64_t v121 = 0;
      if (v63) {
        CFRelease(v63);
      }
    }
    goto LABEL_107;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSData>>((uint64_t)a1, (uint64_t)&v117);
  if (!v118)
  {
    int v30 = 0;
    LOBYTE(v91) = 0;
    char v101 = 0;
LABEL_101:
    if (v120)
    {
      uint64_t v62 = v119;
      uint64_t v119 = 0;
      if (v62) {
        CFRelease(v62);
      }
    }
    goto LABEL_104;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>((uint64_t)a1, (uint64_t)&cf);
  if (!v116)
  {
    int v30 = 0;
    LOBYTE(v91) = 0;
    char v101 = 0;
LABEL_98:
    if (v118)
    {
      CFTypeRef v61 = v117;
      CFTypeRef v117 = 0;
      if (v61) {
        CFRelease(v61);
      }
    }
    goto LABEL_101;
  }
  unint64_t v9 = a1[1];
  uint64_t v10 = (char *)*a1;
  unint64_t v11 = a1[2] - *a1;
  if (v9 <= v11)
  {
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v76 = a1[3];
    if (v76)
    {
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v76 + 16))(v76);
        uint64_t v75 = *a1;
        uint64_t v74 = a1[1];
      }
      else
      {
        uint64_t v74 = 0;
        uint64_t v75 = 0;
      }
    }
    goto LABEL_148;
  }
  CFTypeRef v12 = &v10[v11];
  uint64_t v13 = (uint64_t)&v10[v11 + 1];
  a1[2] = v13;
  if (!v10)
  {
    uint64_t v74 = v9;
    uint64_t v75 = 0;
LABEL_148:
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v77 = a1[3];
    if (v77)
    {
      if (v74)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v77 + 16))(v77, v75, v74);
        uint64_t v10 = (char *)*a1;
        unint64_t v9 = a1[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_149;
  }
  unsigned int v14 = *v12;
  if (v14 >= 2)
  {
LABEL_149:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v78 = a1[3];
    if (v78 && v9) {
      (*(void (**)(uint64_t, char *))(*(void *)v78 + 16))(v78, v10);
    }
LABEL_93:
    LOBYTE(v112[0]) = 0;
    char v114 = 0;
    uint64_t v57 = *a1;
    uint64_t v58 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v59 = a1[3];
    if (!v59 || !v58 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v59 + 16))(v59, v57), !v114))
    {
      int v30 = 0;
      LOBYTE(v91) = 0;
      char v101 = 0;
      goto LABEL_95;
    }
LABEL_64:
    if (*a1)
    {
      if (!v140
        || !v138
        || !v136
        || !v134
        || !v132
        || !v130
        || !v128
        || !v126
        || !v124
        || !v122
        || !v120
        || !v118
        || !v116)
      {
        goto LABEL_182;
      }
      WebKit::CoreIPCPKPaymentMerchantSession::CoreIPCPKPaymentMerchantSession((uint64_t)v102, (uint64_t *)&v139, (uint64_t *)&v137, (uint64_t *)&v135, (uint64_t *)&v133, (uint64_t *)&v131, (uint64_t *)&v129, (uint64_t *)&v127, (uint64_t *)&v125, (uint64_t *)&v123, (uint64_t *)&v121, (uint64_t *)&v119, (uint64_t *)&v117, (uint64_t *)&cf, v112);
      long long v38 = *(_OWORD *)v102;
      long long v39 = v103;
      *(_OWORD *)CFTypeRef v102 = 0u;
      long long v103 = 0u;
      long long v91 = v38;
      long long v92 = v39;
      long long v40 = v104;
      long long v41 = v105;
      long long v104 = 0u;
      long long v105 = 0u;
      long long v93 = v40;
      long long v94 = v41;
      long long v42 = v106;
      long long v43 = v107;
      long long v106 = 0u;
      long long v107 = 0u;
      long long v95 = v42;
      long long v96 = v43;
      uint64_t v44 = v108;
      uint64_t v108 = 0;
      uint64_t v97 = v44;
      LOBYTE(v98) = 0;
      char v100 = 0;
      if (v111)
      {
        uint64_t v98 = v109;
        uint64_t v45 = v110;
        uint64_t v109 = 0;
        uint64_t v110 = 0;
        uint64_t v99 = v45;
        char v100 = 1;
      }
      int v30 = 1;
      char v101 = 1;
      WebKit::CoreIPCPKPaymentMerchantSession::~CoreIPCPKPaymentMerchantSession((WebKit::CoreIPCPKPaymentMerchantSession *)v102, v37);
      if (!v114) {
        goto LABEL_95;
      }
    }
    else
    {
      int v30 = 0;
      LOBYTE(v91) = 0;
      char v101 = 0;
    }
    if (v113) {
      WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v112, v10);
    }
LABEL_95:
    if (v116)
    {
      CFTypeRef v60 = cf;
      CFTypeRef cf = 0;
      if (v60) {
        CFRelease(v60);
      }
    }
    goto LABEL_98;
  }
  if (!v14)
  {
    LOBYTE(v112[0]) = 0;
    char v113 = 0;
    char v114 = 1;
    goto LABEL_64;
  }
  unint64_t v15 = ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v10;
  if (v9 < v15 || v9 - v15 <= 7)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v79 = a1[3];
    if (v79)
    {
      (*(void (**)(uint64_t))(*(void *)v79 + 16))(v79);
      uint64_t v80 = *a1;
      uint64_t v81 = a1[1];
      uint64_t v82 = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (v82)
      {
        if (v81) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v82 + 16))(v82, v80);
        }
      }
    }
    goto LABEL_92;
  }
  uint64_t v16 = (WTF **)&v10[v15];
  unint64_t v17 = *v16;
  a1[2] = (uint64_t)(v16 + 1);
  v102[0] = 0;
  v102[1] = 0;
  if ((unint64_t)v17 < 0x20000)
  {
    if (v17)
    {
      LODWORD(v102[1]) = v17;
      v102[0] = (WTF *)WTF::fastMalloc((WTF *)(8 * (void)v17));
      while (1)
      {
        IPC::Decoder::decode<WTF::RetainPtr<NSString>>((uint64_t)a1, (uint64_t)&v141);
        if (!v142) {
          goto LABEL_91;
        }
        int v18 = HIDWORD(v102[1]);
        if (HIDWORD(v102[1]) != LODWORD(v102[1])) {
          break;
        }
        unsigned int v19 = (uint64_t *)WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v102, HIDWORD(v102[1]) + 1, (unint64_t)&v141);
        uint64_t v20 = HIDWORD(v102[1]);
        int v21 = HIDWORD(v102[1]) + 1;
        uint64_t v22 = v102[0];
        uint64_t v23 = *v19;
        *unsigned int v19 = 0;
        *((void *)v22 + v20) = v23;
        HIDWORD(v102[1]) = v21;
        if (v142) {
          goto LABEL_32;
        }
LABEL_34:
        unint64_t v17 = (WTF *)((char *)v17 - 1);
        if (!v17) {
          goto LABEL_35;
        }
      }
      uint64_t v24 = v141;
      CFTypeRef v141 = 0;
      *((void *)v102[0] + HIDWORD(v102[1])) = v24;
      HIDWORD(v102[1]) = v18 + 1;
LABEL_32:
      int v25 = v141;
      CFTypeRef v141 = 0;
      if (v25) {
        CFRelease(v25);
      }
      goto LABEL_34;
    }
    uint64_t v26 = 0;
LABEL_63:
    uint64_t v90 = (uint64_t)v26;
    v102[0] = 0;
    v102[1] = 0;
    LOBYTE(v92) = 1;
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v102, v10);
    long long v91 = 0uLL;
    v112[0] = (uint64_t)v17;
    v112[1] = v90;
    char v113 = 1;
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v91, v36);
    char v114 = 1;
    goto LABEL_64;
  }
  do
  {
    IPC::Decoder::decode<WTF::RetainPtr<NSString>>((uint64_t)a1, (uint64_t)&v141);
    if (!v142)
    {
LABEL_91:
      WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v102, v10);
LABEL_92:
      uint64_t v54 = *a1;
      uint64_t v55 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v56 = a1[3];
      if (v56 && v55) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v56 + 16))(v56, v54);
      }
      goto LABEL_93;
    }
    int v46 = HIDWORD(v102[1]);
    if (HIDWORD(v102[1]) == LODWORD(v102[1]))
    {
      char v47 = (uint64_t *)WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v102, HIDWORD(v102[1]) + 1, (unint64_t)&v141);
      uint64_t v48 = HIDWORD(v102[1]);
      int v49 = HIDWORD(v102[1]) + 1;
      char v50 = v102[0];
      uint64_t v51 = *v47;
      *char v47 = 0;
      *((void *)v50 + v48) = v51;
      HIDWORD(v102[1]) = v49;
      if (!v142) {
        goto LABEL_89;
      }
    }
    else
    {
      uint64_t v52 = v141;
      CFTypeRef v141 = 0;
      *((void *)v102[0] + HIDWORD(v102[1])) = v52;
      HIDWORD(v102[1]) = v46 + 1;
    }
    char v53 = v141;
    CFTypeRef v141 = 0;
    if (v53) {
      CFRelease(v53);
    }
LABEL_89:
    unint64_t v17 = (WTF *)((char *)v17 - 1);
  }
  while (v17);
  int v83 = HIDWORD(v102[1]);
  unint64_t v17 = v102[0];
  if (LODWORD(v102[1]) <= HIDWORD(v102[1]))
  {
LABEL_36:
    uint64_t v26 = v102[1];
    goto LABEL_63;
  }
  uint64_t v84 = v102[0];
  if (!HIDWORD(v102[1]))
  {
LABEL_166:
    if (v17)
    {
      if (v84 == v17)
      {
        v102[0] = 0;
        LODWORD(v102[1]) = 0;
      }
      WTF::fastFree(v17, v10);
LABEL_35:
      unint64_t v17 = v102[0];
    }
    else
    {
      unint64_t v17 = v84;
    }
    goto LABEL_36;
  }
  if (!(HIDWORD(v102[1]) >> 29))
  {
    CFTypeRef v85 = (WTF *)(8 * HIDWORD(v102[1]));
    uint64_t v86 = (WTF *)WTF::fastMalloc(v85);
    LODWORD(v102[1]) = v83;
    v102[0] = v86;
    uint64_t v84 = v17;
    if (v86 != v17)
    {
      long long v87 = (const void **)v17;
      do
      {
        uint64_t v88 = *v87;
        *long long v87 = 0;
        *(void *)uint64_t v86 = v88;
        unint64_t v89 = *v87;
        *long long v87 = 0;
        if (v89) {
          CFRelease(v89);
        }
        uint64_t v86 = (WTF *)((char *)v86 + 8);
        ++v87;
        CFTypeRef v85 = (WTF *)((char *)v85 - 8);
      }
      while (v85);
      uint64_t v84 = v102[0];
    }
    goto LABEL_166;
  }
  __break(0xC471u);
LABEL_182:
  __break(1u);
}

void sub_1994BE0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,CFTypeRef cf,char a58,CFTypeRef a59,char a60)
{
  if (a58 && cf) {
    CFRelease(cf);
  }
  if (a60 && a59) {
    CFRelease(a59);
  }
  if (*(unsigned char *)(v60 - 248))
  {
    uint64_t v62 = *(const void **)(v60 - 256);
    *(void *)(v60 - 256) = 0;
    if (v62) {
      CFRelease(v62);
    }
  }
  if (*(unsigned char *)(v60 - 232))
  {
    uint64_t v63 = *(const void **)(v60 - 240);
    *(void *)(v60 - 240) = 0;
    if (v63) {
      CFRelease(v63);
    }
  }
  if (*(unsigned char *)(v60 - 216))
  {
    uint64_t v64 = *(const void **)(v60 - 224);
    *(void *)(v60 - 224) = 0;
    if (v64) {
      CFRelease(v64);
    }
  }
  if (*(unsigned char *)(v60 - 200))
  {
    uint64_t v65 = *(const void **)(v60 - 208);
    *(void *)(v60 - 208) = 0;
    if (v65) {
      CFRelease(v65);
    }
  }
  if (*(unsigned char *)(v60 - 184))
  {
    uint64_t v66 = *(const void **)(v60 - 192);
    *(void *)(v60 - 192) = 0;
    if (v66) {
      CFRelease(v66);
    }
  }
  if (*(unsigned char *)(v60 - 168))
  {
    uint64_t v67 = *(const void **)(v60 - 176);
    *(void *)(v60 - 176) = 0;
    if (v67) {
      CFRelease(v67);
    }
  }
  if (*(unsigned char *)(v60 - 152))
  {
    uint64_t v68 = *(const void **)(v60 - 160);
    *(void *)(v60 - 160) = 0;
    if (v68) {
      CFRelease(v68);
    }
  }
  if (*(unsigned char *)(v60 - 136))
  {
    uint64_t v69 = *(const void **)(v60 - 144);
    *(void *)(v60 - 144) = 0;
    if (v69) {
      CFRelease(v69);
    }
  }
  if (*(unsigned char *)(v60 - 120))
  {
    uint64_t v70 = *(const void **)(v60 - 128);
    *(void *)(v60 - 128) = 0;
    if (v70) {
      CFRelease(v70);
    }
  }
  if (*(unsigned char *)(v60 - 104))
  {
    uint64_t v71 = *(const void **)(v60 - 112);
    *(void *)(v60 - 112) = 0;
    if (v71) {
      CFRelease(v71);
    }
  }
  if (*(unsigned char *)(v60 - 88))
  {
    uint64_t v72 = *(const void **)(v60 - 96);
    *(void *)(v60 - 96) = 0;
    if (v72) {
      CFRelease(v72);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKContact>,void>::decode<IPC::Decoder>@<X0>(WTF::StringImpl **a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v4 = (unint64_t)a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    unsigned int v14 = a1[3];
    if (v14)
    {
      if (v4)
      {
        (*(void (**)(WTF::StringImpl *))(*(void *)v14 + 16))(v14);
        uint64_t v13 = *a1;
        unint64_t v12 = (unint64_t)a1[1];
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_13;
  }
  uint64_t v7 = (unsigned __int8 *)v5 + v6;
  a1[2] = (WTF::StringImpl *)(v7 + 1);
  if (!v5)
  {
    unint64_t v12 = v4;
    uint64_t v13 = 0;
LABEL_13:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v15 = a1[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        uint64_t v5 = *a1;
        unint64_t v4 = (unint64_t)a1[1];
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_14;
  }
  if (*v7 < 2u)
  {
    if (!*v7)
    {
      LOBYTE(v75) = 0;
      char v81 = 0;
      *a2 = 0;
      a2[176] = 0;
      goto LABEL_92;
    }
    if (v4 <= v7 + 1 - (unsigned __int8 *)v5)
    {
      unint64_t v17 = 0;
      int v18 = 0;
      *a1 = 0;
      a1[1] = 0;
      unsigned int v19 = a1[3];
      if (v19)
      {
        (*(void (**)(WTF::StringImpl *))(*(void *)v19 + 16))(v19);
        unint64_t v17 = 0;
        uint64_t v72 = *a1;
        uint64_t v73 = a1[1];
        uint64_t v74 = a1[3];
        *a1 = 0;
        a1[1] = 0;
        int v18 = 0;
        if (v74)
        {
          if (v73)
          {
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v74 + 16))(v74, v72);
            int v18 = *a1;
            unint64_t v17 = (unint64_t)a1[1];
          }
        }
      }
    }
    else
    {
      a1[2] = (WTF::StringImpl *)(v7 + 2);
      unsigned int v8 = v7[1];
      if (v8 < 2)
      {
        if (!v8)
        {
          LOBYTE(v105) = 0;
          char v108 = 0;
          char v109 = 1;
          goto LABEL_19;
        }
        IPC::Decoder::decode<WebKit::CoreIPCPersonNameComponents>((uint64_t)&v75, (IPC::Decoder *)a1);
        if ((_BYTE)v78)
        {
          long long v9 = v75;
          long long v10 = v76;
          long long v75 = 0u;
          long long v76 = 0u;
          long long v105 = v9;
          long long v106 = v10;
          long long v11 = v77;
          long long v77 = 0u;
          long long v107 = v11;
          char v108 = 1;
          WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents((WebKit::CoreIPCPersonNameComponents **)&v75);
          char v109 = 1;
          goto LABEL_19;
        }
LABEL_18:
        LOBYTE(v105) = 0;
        char v109 = 0;
        int v21 = *a1;
        uint64_t v22 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        uint64_t v23 = a1[3];
        if (v23 && v22) {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v23 + 16))(v23, v21);
        }
LABEL_19:
        IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v103);
        uint64_t v24 = a1[1];
        int v25 = *a1;
        unint64_t v26 = a1[2] - *a1;
        if ((unint64_t)v24 <= v26)
        {
          uint64_t v44 = 0;
          uint64_t v45 = 0;
          *a1 = 0;
          a1[1] = 0;
          int v46 = a1[3];
          if (v46)
          {
            if (v24)
            {
              (*(void (**)(WTF::StringImpl *))(*(void *)v46 + 16))(v46);
              uint64_t v45 = *a1;
              uint64_t v44 = a1[1];
            }
            else
            {
              uint64_t v44 = 0;
              uint64_t v45 = 0;
            }
          }
        }
        else
        {
          uint64_t v27 = (unsigned __int8 *)v25 + v26;
          a1[2] = (WTF::StringImpl *)(v27 + 1);
          if (v25)
          {
            unsigned int v28 = *v27;
            if (v28 < 2)
            {
              if (!v28)
              {
                LOBYTE(v75) = 0;
                LOBYTE(v76) = 0;
                LOBYTE(v100) = 0;
                char v101 = 0;
                goto LABEL_26;
              }
              IPC::Decoder::decode<WebKit::CoreIPCCNPhoneNumber>((uint64_t)&v75, (IPC::Decoder *)a1);
              if ((_BYTE)v76)
              {
                long long v29 = v75;
                long long v75 = 0uLL;
                long long v100 = v29;
                char v101 = 1;
LABEL_26:
                char v102 = 1;
                std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v75, v25);
                goto LABEL_29;
              }
              LOBYTE(v100) = 0;
              char v102 = 0;
              std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v75, v25);
LABEL_28:
              int v30 = *a1;
              uint64_t v31 = a1[1];
              *a1 = 0;
              a1[1] = 0;
              uint64_t v32 = a1[3];
              if (v32 && v31) {
                (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v32 + 16))(v32, v30);
              }
LABEL_29:
              uint64_t v33 = a1[1];
              uint64_t v34 = *a1;
              unint64_t v35 = a1[2] - *a1;
              if ((unint64_t)v33 <= v35)
              {
                int v49 = 0;
                char v50 = 0;
                *a1 = 0;
                a1[1] = 0;
                uint64_t v51 = a1[3];
                if (v51)
                {
                  if (v33)
                  {
                    (*(void (**)(WTF::StringImpl *))(*(void *)v51 + 16))(v51);
                    char v50 = *a1;
                    int v49 = a1[1];
                  }
                  else
                  {
                    int v49 = 0;
                    char v50 = 0;
                  }
                }
              }
              else
              {
                uint64_t v36 = (unsigned __int8 *)v34 + v35;
                a1[2] = (WTF::StringImpl *)(v36 + 1);
                if (v34)
                {
                  unsigned int v37 = *v36;
                  if (v37 < 2)
                  {
                    if (!v37)
                    {
                      LOBYTE(v93) = 0;
                      char v98 = 0;
                      char v99 = 1;
                      goto LABEL_48;
                    }
                    IPC::Decoder::decode<WebKit::CoreIPCCNPostalAddress>((uint64_t)&v75, (IPC::Decoder *)a1);
                    if (v80)
                    {
                      long long v39 = v75;
                      long long v40 = v76;
                      long long v75 = 0u;
                      long long v76 = 0u;
                      long long v93 = v39;
                      long long v94 = v40;
                      long long v41 = v77;
                      long long v42 = v78;
                      long long v77 = 0u;
                      long long v78 = 0u;
                      long long v95 = v41;
                      long long v96 = v42;
                      uint64_t v43 = v79;
                      uint64_t v79 = 0;
                      uint64_t v97 = v43;
                      char v98 = 1;
                      WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)&v75, v38);
                      char v99 = 1;
                      goto LABEL_48;
                    }
LABEL_47:
                    LOBYTE(v93) = 0;
                    char v99 = 0;
                    uint64_t v54 = *a1;
                    uint64_t v55 = a1[1];
                    *a1 = 0;
                    a1[1] = 0;
                    uint64_t v56 = a1[3];
                    if (v56) {
                      goto LABEL_95;
                    }
                    while (1)
                    {
LABEL_48:
                      uint64_t v56 = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a1, (uint64_t)&v91);
                      if (!*a1)
                      {
                        LOBYTE(v75) = 0;
                        char v81 = 0;
                        goto LABEL_72;
                      }
                      if (v109 && v104 && v102 && v99 && v92) {
                        break;
                      }
                      __break(1u);
LABEL_95:
                      if (v55) {
                        (*(void (**)(IPC::Decoder *, WTF::StringImpl *))(*(void *)v56 + 16))(v56, v54);
                      }
                    }
                    LOBYTE(v82[0]) = 0;
                    char v83 = 0;
                    if (v108)
                    {
                      long long v57 = v105;
                      long long v58 = v106;
                      long long v105 = 0u;
                      long long v106 = 0u;
                      v82[0] = v57;
                      v82[1] = v58;
                      long long v59 = v107;
                      long long v107 = 0u;
                      v82[2] = v59;
                      char v83 = 1;
                    }
                    uint64_t v60 = v103;
                    long long v103 = 0;
                    uint64_t v84 = v60;
                    LOBYTE(v85) = 0;
                    char v86 = 0;
                    if (v101)
                    {
                      long long v61 = v100;
                      long long v100 = 0uLL;
                      long long v85 = v61;
                      char v86 = 1;
                    }
                    LOBYTE(v87[0]) = 0;
                    char v89 = 0;
                    if (v98)
                    {
                      v87[0] = v93;
                      v87[1] = v94;
                      long long v62 = v96;
                      v87[2] = v95;
                      long long v93 = 0u;
                      long long v94 = 0u;
                      long long v95 = 0u;
                      long long v96 = 0u;
                      v87[3] = v62;
                      uint64_t v63 = v97;
                      uint64_t v97 = 0;
                      uint64_t v88 = v63;
                      char v89 = 1;
                    }
                    uint64_t v90 = v91;
                    long long v91 = 0;
                    std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::__optional_destruct_base[abi:sn180100]<WebKit::CoreIPCPKContact>((uint64_t)&v75, (uint64_t)v82);
                    uint64_t v65 = v90;
                    uint64_t v90 = 0;
                    if (v65)
                    {
                      if (*(_DWORD *)v65 == 2) {
                        WTF::StringImpl::destroy(v65, v64);
                      }
                      else {
                        *(_DWORD *)v65 -= 2;
                      }
                    }
                    if (v89) {
                      WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)v87, v64);
                    }
                    std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v85, v64);
                    uint64_t v66 = v84;
                    uint64_t v84 = 0;
                    if (v66)
                    {
                      if (*(_DWORD *)v66 == 2) {
                        WTF::StringImpl::destroy(v66, v54);
                      }
                      else {
                        *(_DWORD *)v66 -= 2;
                      }
                    }
                    if (v83) {
                      WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents((WebKit::CoreIPCPersonNameComponents **)v82);
                    }
LABEL_72:
                    if (v92)
                    {
                      uint64_t v67 = v91;
                      long long v91 = 0;
                      if (v67)
                      {
                        if (*(_DWORD *)v67 == 2) {
                          WTF::StringImpl::destroy(v67, v54);
                        }
                        else {
                          *(_DWORD *)v67 -= 2;
                        }
                      }
                    }
                    if (v99 && v98) {
                      WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)&v93, v54);
                    }
                    if (v102) {
                      std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v100, v54);
                    }
                    if (v104)
                    {
                      uint64_t v68 = v103;
                      long long v103 = 0;
                      if (v68)
                      {
                        if (*(_DWORD *)v68 == 2) {
                          WTF::StringImpl::destroy(v68, v54);
                        }
                        else {
                          *(_DWORD *)v68 -= 2;
                        }
                      }
                    }
                    if (v109 && v108) {
                      WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents((WebKit::CoreIPCPersonNameComponents **)&v105);
                    }
                    if (!v81)
                    {
                      uint64_t v5 = *a1;
                      uint64_t v70 = a1[1];
                      *a1 = 0;
                      a1[1] = 0;
                      uint64_t v71 = a1[3];
                      if (!v71
                        || !v70
                        || ((*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v71 + 16))(v71, v5), !v81))
                      {
                        char v69 = 0;
                        *a2 = 0;
                        goto LABEL_93;
                      }
                    }
                    std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::__optional_destruct_base[abi:sn180100]<WebKit::CoreIPCPKContact>((uint64_t)a2, (uint64_t)&v75);
LABEL_92:
                    char v69 = 1;
LABEL_93:
                    a2[184] = v69;
                    return std::__optional_destruct_base<WebKit::CoreIPCPKContact,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v75, v5);
                  }
LABEL_46:
                  *a1 = 0;
                  a1[1] = 0;
                  char v53 = a1[3];
                  if (v53 && v33) {
                    (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v53 + 16))(v53, v34);
                  }
                  goto LABEL_47;
                }
                int v49 = v33;
                char v50 = 0;
              }
              uint64_t v33 = 0;
              uint64_t v34 = 0;
              *a1 = 0;
              a1[1] = 0;
              uint64_t v52 = a1[3];
              if (v52)
              {
                if (v49)
                {
                  (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v52 + 16))(v52, v50, v49);
                  uint64_t v34 = *a1;
                  uint64_t v33 = a1[1];
                }
                else
                {
                  uint64_t v33 = 0;
                  uint64_t v34 = 0;
                }
              }
              goto LABEL_46;
            }
LABEL_42:
            *a1 = 0;
            a1[1] = 0;
            uint64_t v48 = a1[3];
            if (v48 && v24) {
              (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v48 + 16))(v48, v25);
            }
            LOBYTE(v100) = 0;
            char v102 = 0;
            goto LABEL_28;
          }
          uint64_t v44 = v24;
          uint64_t v45 = 0;
        }
        uint64_t v24 = 0;
        int v25 = 0;
        *a1 = 0;
        a1[1] = 0;
        char v47 = a1[3];
        if (v47)
        {
          if (v44)
          {
            (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(void *)v47 + 16))(v47, v45, v44);
            int v25 = *a1;
            uint64_t v24 = a1[1];
          }
          else
          {
            uint64_t v24 = 0;
            int v25 = 0;
          }
        }
        goto LABEL_42;
      }
      unint64_t v17 = v4;
      int v18 = v5;
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v20 = a1[3];
    if (v20 && v17) {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
    }
    goto LABEL_18;
  }
LABEL_14:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (uint64_t)a1[3];
  if (result && v4) {
    uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v5);
  }
  *a2 = 0;
  a2[184] = 0;
  return result;
}

void sub_1994BEC0C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

WTF::StringImpl *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPayment>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCPKPayment>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 64);
  uint64_t result = (WTF::StringImpl *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (v6)
    {
      *(unsigned char *)uint64_t result = 1;
      if (*(unsigned char *)(a2 + 64))
      {
        if (*(void *)a2)
        {
          WebKit::CoreIPCPKPaymentToken::CoreIPCPKPaymentToken((WebKit::CoreIPCPKPaymentToken *)v55, *(objc_object **)a2);
          CFTypeRef v7 = v55[0];
          CFTypeRef v8 = v55[1];
          CFTypeRef v9 = v56[0];
          CFTypeRef v10 = v56[1];
          *(_OWORD *)uint64_t v55 = 0u;
          *(_OWORD *)uint64_t v56 = 0u;
          long long v11 = (objc_object *)v57[0];
          CFTypeRef v12 = v57[1];
          *(_OWORD *)long long v57 = 0u;
          CFTypeRef v13 = cf[0];
          cf[0] = 0;
          unsigned int v14 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
          if (!v15)
          {
            __break(0xC471u);
            JUMPOUT(0x1994BF1DCLL);
          }
          *unsigned int v14 = 1;
          IPC::encodeObjectDirectly<NSString>(a1, (uint64_t)v7);
          IPC::encodeObjectDirectly<NSString>(a1, (uint64_t)v8);
          IPC::encodeObjectDirectly<NSString>(a1, (uint64_t)v9);
          IPC::encodeObjectDirectly<NSData>(a1, v10);
          IPC::encodeObjectDirectly<PKPaymentMethod>(a1, v11);
          if (v12)
          {
            MEMORY[0x19972E8A0](v50, v12);
            uint64_t v16 = *(WTF::StringImpl **)v50;
            *(void *)char v50 = 0;
            v52[0] = v16;
            *(_OWORD *)&v52[1] = *(_OWORD *)&v50[8];
            *(_OWORD *)&v52[3] = v51;
            *(_DWORD *)&v50[8] &= ~1u;
            LOBYTE(v52[5]) = 1;
            unint64_t v17 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
            if (!v18)
            {
              __break(0xC471u);
              JUMPOUT(0x1994BF23CLL);
            }
            unsigned char *v17 = 1;
            IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v52);
            if (LOBYTE(v52[5]))
            {
              uint64_t v20 = v52[0];
              v52[0] = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 2) {
                  WTF::StringImpl::destroy(v20, v19);
                }
                else {
                  *(_DWORD *)v20 -= 2;
                }
              }
            }
            int v25 = *(WTF::StringImpl **)v50;
            *(void *)char v50 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2) {
                WTF::StringImpl::destroy(v25, v19);
              }
              else {
                *(_DWORD *)v25 -= 2;
              }
            }
          }
          else
          {
            uint64_t v23 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
            if (!v24)
            {
              __break(0xC471u);
              JUMPOUT(0x1994BF2BCLL);
            }
            *uint64_t v23 = 0;
          }
          IPC::encodeObjectDirectly<NSString>(a1, (uint64_t)v13);
          if (v13) {
            CFRelease(v13);
          }
          if (v12) {
            CFRelease(v12);
          }
          if (v11) {
            CFRelease(v11);
          }
          if (v10) {
            CFRelease(v10);
          }
          if (v9) {
            CFRelease(v9);
          }
          if (v8) {
            CFRelease(v8);
          }
          if (v7) {
            CFRelease(v7);
          }
          CFTypeRef v26 = cf[0];
          cf[0] = 0;
          if (v26) {
            CFRelease(v26);
          }
          CFTypeRef v27 = v57[1];
          v57[1] = 0;
          if (v27) {
            CFRelease(v27);
          }
          CFTypeRef v28 = v57[0];
          v57[0] = 0;
          if (v28) {
            CFRelease(v28);
          }
          CFTypeRef v29 = v56[1];
          v56[1] = 0;
          if (v29) {
            CFRelease(v29);
          }
          CFTypeRef v30 = v56[0];
          v56[0] = 0;
          if (v30) {
            CFRelease(v30);
          }
          CFTypeRef v31 = v55[1];
          v55[1] = 0;
          if (v31) {
            CFRelease(v31);
          }
          CFTypeRef v32 = v55[0];
          v55[0] = 0;
          if (v32) {
            CFRelease(v32);
          }
        }
        else
        {
          int v21 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
          if (!v22)
          {
            __break(0xC471u);
            JUMPOUT(0x1994BF27CLL);
          }
          *int v21 = 0;
        }
        IPC::encodeObjectDirectly<PKContact>(a1, *(PKContact **)(a2 + 8));
        IPC::encodeObjectDirectly<PKContact>(a1, *(PKContact **)(a2 + 16));
        uint64_t v33 = *(void *)(a2 + 24);
        if (!v33)
        {
          LOBYTE(v55[0]) = 0;
          char v60 = 0;
          uint64_t v45 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
          if (!v46)
          {
            __break(0xC471u);
            JUMPOUT(0x1994BF29CLL);
          }
          unsigned char *v45 = 0;
          goto LABEL_65;
        }
        WebKit::CoreIPCPKShippingMethod::CoreIPCPKShippingMethod((WebKit::CoreIPCPKShippingMethod *)v52, *(objc_object **)(a2 + 24));
        long long v34 = *(_OWORD *)v52;
        long long v35 = *(_OWORD *)&v52[2];
        memset(v52, 0, sizeof(v52));
        *(_OWORD *)uint64_t v55 = v34;
        *(_OWORD *)uint64_t v56 = v35;
        long long v36 = v53;
        long long v53 = 0u;
        *(_OWORD *)long long v57 = *(_OWORD *)&v52[4];
        *(_OWORD *)CFTypeRef cf = v36;
        long long v37 = v54;
        long long v54 = 0u;
        *(_OWORD *)long long v59 = v37;
        char v60 = 1;
        long long v38 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
        if (!v39)
        {
          __break(0xC471u);
          JUMPOUT(0x1994BF1FCLL);
        }
        *long long v38 = 1;
        if (v60)
        {
          IPC::encodeObjectDirectly<NSString>(a1, (uint64_t)v55[0]);
          IPC::encodeObjectDirectly<NSNumber>(a1, (WebKit::CoreIPCNumber *)v55[1]);
          IPC::encodeObjectDirectly<NSNumber>(a1, (WebKit::CoreIPCNumber *)v56[0]);
          IPC::encodeObjectDirectly<NSString>(a1, (uint64_t)v56[1]);
          IPC::encodeObjectDirectly<NSString>(a1, (uint64_t)v57[0]);
          IPC::encodeObjectDirectly<NSNumber>(a1, (WebKit::CoreIPCNumber *)v57[1]);
          IPC::encodeObjectDirectly<NSNumber>(a1, (WebKit::CoreIPCNumber *)cf[0]);
          IPC::encodeObjectDirectly<NSString>(a1, (uint64_t)cf[1]);
          IPC::encodeObjectDirectly<NSString>(a1, (uint64_t)v59[0]);
          if (!v59[1])
          {
            v50[0] = 0;
            v50[16] = 0;
            char v47 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
            if (!v48)
            {
              __break(0xC471u);
              JUMPOUT(0x1994BF2DCLL);
            }
            *char v47 = 0;
            std::__optional_destruct_base<WebKit::CoreIPCPKDateComponentsRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v50);
            goto LABEL_65;
          }
          WebKit::CoreIPCPKDateComponentsRange::CoreIPCPKDateComponentsRange((WebKit::CoreIPCPKDateComponentsRange *)&v61, (objc_object *)v59[1]);
          long long v40 = v61;
          long long v61 = 0uLL;
          *(_OWORD *)char v50 = v40;
          v50[16] = 1;
          long long v41 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
          if (!v42)
          {
            __break(0xC471u);
            JUMPOUT(0x1994BF25CLL);
          }
          *long long v41 = 1;
          if (v50[16])
          {
            IPC::encodeObjectDirectly<NSDateComponents>(a1, *(NSDateComponents **)v50);
            IPC::encodeObjectDirectly<NSDateComponents>(a1, *(NSDateComponents **)&v50[8]);
            std::__optional_destruct_base<WebKit::CoreIPCPKDateComponentsRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v50);
            uint64_t v43 = (const void *)*((void *)&v61 + 1);
            *((void *)&v61 + 1) = 0;
            if (v43) {
              CFRelease(v43);
            }
            uint64_t v44 = (const void *)v61;
            *(void *)&long long v61 = 0;
            if (v44) {
              CFRelease(v44);
            }
LABEL_65:
            if (v60) {
              WebKit::CoreIPCPKShippingMethod::~CoreIPCPKShippingMethod((WebKit::CoreIPCPKShippingMethod *)v55);
            }
            if (v33) {
              WebKit::CoreIPCPKShippingMethod::~CoreIPCPKShippingMethod((WebKit::CoreIPCPKShippingMethod *)v52);
            }
            IPC::encodeObjectDirectly<NSData>(a1, *(CFTypeRef *)(a2 + 32));
            IPC::encodeObjectDirectly<NSDictionary>(a1, *(NSDictionary **)(a2 + 40));
            IPC::encodeObjectDirectly<NSNumber>(a1, *(WebKit::CoreIPCNumber **)(a2 + 48));
            uint64_t v49 = *(void *)(a2 + 56);
            return IPC::encodeObjectDirectly<NSString>(a1, v49);
          }
        }
      }
      else
      {
        std::__throw_bad_optional_access[abi:sn180100]();
      }
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x1994BF1BCLL);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1994BF21CLL);
  }
  *(unsigned char *)uint64_t result = 0;
  return result;
}

void sub_1994BF2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,CFTypeRef a25,CFTypeRef a26,CFTypeRef a27,CFTypeRef a28,CFTypeRef a29,CFTypeRef a30,CFTypeRef cf,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::__optional_destruct_base<WebKit::CoreIPCPKDateComponentsRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9);
  long long v37 = *(const void **)(v35 - 104);
  *(void *)(v35 - 104) = 0;
  if (v37) {
    CFRelease(v37);
  }
  long long v38 = *(const void **)(v35 - 112);
  *(void *)(v35 - 112) = 0;
  if (v38) {
    CFRelease(v38);
  }
  if (a35) {
    WebKit::CoreIPCPKShippingMethod::~CoreIPCPKShippingMethod((WebKit::CoreIPCPKShippingMethod *)&a25);
  }
  WebKit::CoreIPCPKShippingMethod::~CoreIPCPKShippingMethod((WebKit::CoreIPCPKShippingMethod *)&a15);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPKPayment>,void>::decode<IPC::Decoder>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v205[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  unint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)a1;
  unint64_t v11 = *(void *)(a1 + 16) - *(void *)a1;
  if (v9 <= v11)
  {
    unint64_t v32 = 0;
    uint64_t v33 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v34 = *(void *)(a1 + 24);
    if (v34)
    {
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v34 + 16))(v34);
        uint64_t v33 = *(void *)a1;
        unint64_t v32 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v32 = 0;
        uint64_t v33 = 0;
      }
    }
    goto LABEL_58;
  }
  CFTypeRef v12 = (unsigned __int8 *)(v10 + v11);
  *(void *)(a1 + 16) = v12 + 1;
  if (!v10)
  {
    unint64_t v32 = v9;
    uint64_t v33 = 0;
LABEL_58:
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v35 = *(void *)(a1 + 24);
    if (v35)
    {
      if (v32)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v35 + 16))(v35, v33, v32);
        uint64_t v10 = *(void *)a1;
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_59;
  }
  unsigned int v13 = *v12;
  if (v13 >= 2)
  {
LABEL_59:
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v36 = *(void *)(a1 + 24);
    if (v36 && v9) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 16))(v36, v10);
    }
    goto LABEL_283;
  }
  if (!v13)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 64) = 0;
    *(unsigned char *)(a2 + 72) = 1;
    return;
  }
  unsigned int v14 = (const void *)((uint64_t (*)(void))*MEMORY[0x1E4FB62D0])();
  CFTypeRef v199 = v14;
  if (v14) {
    CFRetain(v14);
  }
  WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v187, &v199, 1);
  WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)(a1 + 56), (void **)&v187);
  unint64_t v15 = *(void *)(a1 + 8);
  uint64_t v16 = *(char **)a1;
  unint64_t v17 = *(void *)(a1 + 16) - *(void *)a1;
  if (v15 <= v17)
  {
    unint64_t v37 = 0;
    uint64_t v38 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v39 = *(void *)(a1 + 24);
    if (v39)
    {
      if (v15)
      {
        (*(void (**)(uint64_t))(*(void *)v39 + 16))(v39);
        uint64_t v38 = *(void *)a1;
        unint64_t v37 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v37 = 0;
        uint64_t v38 = 0;
      }
    }
    goto LABEL_63;
  }
  uint64_t v18 = &v16[v17];
  *(void *)(a1 + 16) = v18 + 1;
  if (!v16)
  {
    unint64_t v37 = v15;
    uint64_t v38 = 0;
LABEL_63:
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v40 = *(void *)(a1 + 24);
    if (!v40) {
      goto LABEL_67;
    }
    if (!v37)
    {
      unint64_t v15 = 0;
      uint64_t v16 = 0;
LABEL_67:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v41 = *(void *)(a1 + 24);
      if (v41)
      {
        if (v15)
        {
          (*(void (**)(uint64_t, char *))(*(void *)v41 + 16))(v41, v16);
          uint64_t v16 = *(char **)a1;
          unint64_t v15 = *(void *)(a1 + 8);
          uint64_t v41 = *(void *)(a1 + 24);
          goto LABEL_70;
        }
      }
      else
      {
        unint64_t v15 = 0;
      }
      uint64_t v16 = 0;
LABEL_70:
      LOBYTE(v161[0]) = 0;
      LOBYTE(v165) = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      if (!v41 || !v15 || ((*(void (**)(uint64_t, char *))(*(void *)v41 + 16))(v41, v16), !(_BYTE)v165))
      {
        CFTypeRef v2 = 0;
        int v42 = 1;
        goto LABEL_125;
      }
      if (LOBYTE(v164[1])) {
        goto LABEL_106;
      }
      goto LABEL_77;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v40 + 16))(v40, v38, v37);
LABEL_66:
    uint64_t v16 = *(char **)a1;
    unint64_t v15 = *(void *)(a1 + 8);
    goto LABEL_67;
  }
  unsigned int v19 = *v18;
  if (v19 >= 2) {
    goto LABEL_67;
  }
  if (!v19)
  {
    LOBYTE(v161[0]) = 0;
    goto LABEL_105;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)v174);
  if (!LOBYTE(v174[1])) {
    goto LABEL_66;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v192);
  if (!BYTE8(v192))
  {
    CFTypeRef v27 = 0;
    int v28 = 0;
    goto LABEL_100;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v196);
  if (v197)
  {
    IPC::Decoder::decode<WTF::RetainPtr<NSData>>(a1, (uint64_t)&v194);
    if (!v195)
    {
      CFTypeRef v27 = 0;
      int v28 = 0;
LABEL_94:
      if (v197)
      {
        CFTypeRef v50 = v196;
        CFTypeRef v196 = 0;
        if (v50) {
          CFRelease(v50);
        }
      }
      goto LABEL_97;
    }
    uint64_t v20 = (const void **)((uint64_t (*)(void))*MEMORY[0x1E4FB62F0])();
    char v203 = v20;
    if (v20) {
      CFRetain(v20);
    }
    WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)cf, (CFTypeRef *)&v203, 1);
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)(a1 + 56), (void **)cf);
    IPC::decodeRequiringAllowedClasses<PKPaymentMethod,PKPaymentMethod*>((uint64_t *)a1, (uint64_t)&v189);
    if (cf[0]) {
      WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable((const void **)cf[0], v21);
    }
    uint64_t v22 = v203;
    char v203 = 0;
    if (v22) {
      CFRelease(v22);
    }
    if (!v190)
    {
      uint64_t v16 = *(char **)a1;
      uint64_t v43 = *(void *)(a1 + 8);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v44 = *(void *)(a1 + 24);
      if (!v44 || !v43 || ((*(void (**)(uint64_t, char *))(*(void *)v44 + 16))(v44, v16), !v190))
      {
        CFTypeRef v27 = 0;
        int v28 = 0;
LABEL_91:
        if (v195)
        {
          CFTypeRef v49 = v194;
          CFTypeRef v194 = 0;
          if (v49) {
            CFRelease(v49);
          }
        }
        goto LABEL_94;
      }
    }
    uint64_t v23 = (const void *)objc_opt_class();
    CFTypeRef v201 = v23;
    if (v23) {
      CFRetain(v23);
    }
    WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v203, &v201, 1);
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)(a1 + 56), &v203);
    IPC::Decoder::decode<std::optional<WebKit::CoreIPCURL>>(cf, (IPC::Decoder *)a1);
    int v25 = v171;
    if (!(_BYTE)v171)
    {
      CFTypeRef v2 = 0;
      goto LABEL_44;
    }
    if (BYTE8(v170))
    {
      CFTypeRef v26 = (const void *)WTF::URL::operator NSURL *();
      CFTypeRef v2 = v26;
      if (v26) {
        CFRetain(v26);
      }
    }
    else
    {
      CFTypeRef v2 = 0;
    }
    if ((_BYTE)v171)
    {
      if (BYTE8(v170))
      {
        CFTypeRef v29 = (WTF::StringImpl *)cf[0];
        cf[0] = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
          {
            WTF::StringImpl::destroy(v29, v24);
            if (!v2) {
              goto LABEL_44;
            }
            goto LABEL_43;
          }
          *(_DWORD *)v29 -= 2;
        }
      }
    }
    if (!v2)
    {
LABEL_44:
      if (v203) {
        WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(v203, v24);
      }
      CFTypeRef v30 = v201;
      CFTypeRef v201 = 0;
      if (v30) {
        CFRelease(v30);
      }
      CFTypeRef v150 = v2;
      if (v25)
      {
        IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)cf);
        if (LOBYTE(cf[1]))
        {
          if (*(void *)a1)
          {
            if (!LOBYTE(v174[1]) || !BYTE8(v192) || !v197 || !v195 || !v190) {
              goto LABEL_287;
            }
            CFTypeRef v27 = v174[0];
            v174[0] = 0;
            uint64_t v6 = (const void *)v192;
            *(void *)&long long v192 = 0;
            CFTypeRef v5 = v196;
            CFTypeRef v196 = 0;
            CFTypeRef v2 = v194;
            CFTypeRef v194 = 0;
            int v4 = v189;
            char v189 = 0;
            int v28 = 1;
            CFTypeRef v3 = cf[0];
            goto LABEL_88;
          }
          CFTypeRef v47 = cf[0];
          cf[0] = 0;
          if (v47) {
            CFRelease(v47);
          }
        }
        if (v2) {
          CFRelease(v2);
        }
      }
      else
      {
        uint64_t v16 = *(char **)a1;
        uint64_t v45 = *(void *)(a1 + 8);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        uint64_t v46 = *(void *)(a1 + 24);
        if (v46 && v45) {
          (*(void (**)(uint64_t, char *))(*(void *)v46 + 16))(v46, v16);
        }
      }
      CFTypeRef v27 = 0;
      int v28 = 0;
LABEL_88:
      if (v190)
      {
        uint64_t v48 = v189;
        char v189 = 0;
        if (v48) {
          CFRelease(v48);
        }
      }
      goto LABEL_91;
    }
LABEL_43:
    CFRetain(v2);
    CFRelease(v2);
    goto LABEL_44;
  }
  CFTypeRef v27 = 0;
  int v28 = 0;
LABEL_97:
  if (BYTE8(v192))
  {
    long long v51 = (const void *)v192;
    *(void *)&long long v192 = 0;
    if (v51) {
      CFRelease(v51);
    }
  }
LABEL_100:
  if (LOBYTE(v174[1]))
  {
    CFTypeRef v52 = v174[0];
    v174[0] = 0;
    if (v52) {
      CFRelease(v52);
    }
  }
  if (!v28) {
    goto LABEL_66;
  }
  v161[0] = v27;
  v161[1] = v6;
  v162[0] = v5;
  v162[1] = v2;
  v163[0] = v4;
  v163[1] = v150;
  unsigned int v19 = 1;
  v164[0] = v3;
LABEL_105:
  LOBYTE(v164[1]) = v19;
  LOBYTE(v165) = 1;
  if (v19)
  {
LABEL_106:
    WebKit::CoreIPCPKPaymentToken::toID((WebKit::CoreIPCPKPaymentToken *)v161, cf);
    CFTypeRef v2 = cf[0];
    if ((_BYTE)v165 && LOBYTE(v164[1]))
    {
      CFTypeRef v53 = v164[0];
      v164[0] = 0;
      if (v53) {
        CFRelease(v53);
      }
      CFTypeRef v54 = v163[1];
      v163[1] = 0;
      if (v54) {
        CFRelease(v54);
      }
      CFTypeRef v55 = v163[0];
      v163[0] = 0;
      if (v55) {
        CFRelease(v55);
      }
      CFTypeRef v56 = v162[1];
      v162[1] = 0;
      if (v56) {
        CFRelease(v56);
      }
      CFTypeRef v57 = v162[0];
      v162[0] = 0;
      if (v57) {
        CFRelease(v57);
      }
      CFTypeRef v58 = v161[1];
      v161[1] = 0;
      if (v58) {
        CFRelease(v58);
      }
      CFTypeRef v59 = v161[0];
      v161[0] = 0;
      if (v59) {
        CFRelease(v59);
      }
    }
    if (v2)
    {
      CFRetain(v2);
      CFRelease(v2);
    }
    goto LABEL_124;
  }
LABEL_77:
  CFTypeRef v2 = 0;
LABEL_124:
  int v42 = 0;
LABEL_125:
  if (v187) {
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable((const void **)v187, v16);
  }
  CFTypeRef v60 = v199;
  CFTypeRef v199 = 0;
  if (!v60)
  {
    if (!v42) {
      goto LABEL_129;
    }
LABEL_160:
    uint64_t v76 = *(void *)a1;
    uint64_t v77 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v78 = *(void *)(a1 + 24);
    if (v78 && v77) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v78 + 16))(v78, v76);
    }
    LOBYTE(v151) = 0;
    char v155 = 0;
    goto LABEL_280;
  }
  CFRelease(v60);
  if (v42) {
    goto LABEL_160;
  }
LABEL_129:
  IPC::Decoder::decode<WTF::RetainPtr<PKContact>>((uint64_t)&v158, a1);
  if (!v159)
  {
    LOBYTE(v151) = 0;
    char v155 = 0;
    goto LABEL_278;
  }
  IPC::Decoder::decode<WTF::RetainPtr<PKContact>>((uint64_t)&v156, a1);
  if (!v157)
  {
    LOBYTE(v151) = 0;
    char v155 = 0;
    goto LABEL_275;
  }
  long long v61 = (const void *)((uint64_t (*)(void))*MEMORY[0x1E4FB6310])();
  CFTypeRef v198 = v61;
  if (v61) {
    CFRetain(v61);
  }
  WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v160, &v198, 1);
  WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)(a1 + 56), &v160);
  unint64_t v31 = *(void *)(a1 + 8);
  long long v62 = *(char **)a1;
  unint64_t v63 = *(void *)(a1 + 16) - *(void *)a1;
  if (v31 <= v63) {
    goto LABEL_288;
  }
  uint64_t v64 = &v62[v63];
  *(void *)(a1 + 16) = v64 + 1;
  if (!v62)
  {
    unint64_t v137 = v31;
    uint64_t v138 = 0;
    goto LABEL_289;
  }
  unsigned int v65 = *v64;
  if (v65 >= 2) {
    goto LABEL_290;
  }
  if (v65)
  {
    IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v189);
    if (!v190)
    {
      LOBYTE(cf[0]) = 0;
      char v173 = 0;
LABEL_232:
      if (!v173)
      {
        long long v62 = *(char **)a1;
        uint64_t v142 = *(void *)(a1 + 8);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        uint64_t v141 = *(void *)(a1 + 24);
        if (!v141 || !v142) {
          goto LABEL_294;
        }
        goto LABEL_292;
      }
      long long v106 = *(_OWORD *)cf;
      long long v107 = v169;
      *(_OWORD *)CFTypeRef cf = 0u;
      long long v169 = 0u;
      *(_OWORD *)char v161 = v106;
      *(_OWORD *)uint64_t v162 = v107;
      long long v108 = v170;
      long long v109 = v171;
      long long v170 = 0u;
      long long v171 = 0u;
      *(_OWORD *)uint64_t v163 = v108;
      *(_OWORD *)char v164 = v109;
      long long v110 = v172;
      long long v172 = 0u;
      long long v165 = v110;
      char v166 = 1;
      char v167 = 1;
      WebKit::CoreIPCPKShippingMethod::~CoreIPCPKShippingMethod((WebKit::CoreIPCPKShippingMethod *)cf);
      WebKit::CoreIPCPKShippingMethod::toID((WebKit::CoreIPCPKShippingMethod *)v161, cf);
      CFTypeRef v75 = cf[0];
      if (v167 && v166) {
        WebKit::CoreIPCPKShippingMethod::~CoreIPCPKShippingMethod((WebKit::CoreIPCPKShippingMethod *)v161);
      }
      if (v75)
      {
        CFRetain(v75);
        CFRelease(v75);
      }
      goto LABEL_238;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>((uint64_t *)a1, (uint64_t)&v203);
    if (!v204)
    {
      LOBYTE(cf[0]) = 0;
      char v173 = 0;
LABEL_229:
      if (v190)
      {
        long long v105 = v189;
        char v189 = 0;
        if (v105) {
          CFRelease(v105);
        }
      }
      goto LABEL_232;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>((uint64_t *)a1, (uint64_t)&v201);
    if (!v202)
    {
      LOBYTE(cf[0]) = 0;
      char v173 = 0;
LABEL_226:
      if (v204)
      {
        char v104 = v203;
        char v203 = 0;
        if (v104) {
          CFRelease(v104);
        }
      }
      goto LABEL_229;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v187);
    if (!v188)
    {
      LOBYTE(cf[0]) = 0;
      char v173 = 0;
LABEL_223:
      if (v202)
      {
        CFTypeRef v103 = v201;
        CFTypeRef v201 = 0;
        if (v103) {
          CFRelease(v103);
        }
      }
      goto LABEL_226;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v199);
    if (!v200)
    {
      LOBYTE(cf[0]) = 0;
      char v173 = 0;
LABEL_220:
      if (v188)
      {
        CFTypeRef v102 = v187;
        CFTypeRef v187 = 0;
        if (v102) {
          CFRelease(v102);
        }
      }
      goto LABEL_223;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>((uint64_t *)a1, (uint64_t)&v185);
    if (!v186)
    {
      LOBYTE(cf[0]) = 0;
      char v173 = 0;
LABEL_217:
      if (v200)
      {
        CFTypeRef v101 = v199;
        CFTypeRef v199 = 0;
        if (v101) {
          CFRelease(v101);
        }
      }
      goto LABEL_220;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>((uint64_t *)a1, (uint64_t)&v183);
    if (!v184)
    {
      LOBYTE(cf[0]) = 0;
      char v173 = 0;
LABEL_214:
      if (v186)
      {
        CFTypeRef v100 = v185;
        CFTypeRef v185 = 0;
        if (v100) {
          CFRelease(v100);
        }
      }
      goto LABEL_217;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v181);
    if (!v182)
    {
      LOBYTE(cf[0]) = 0;
      char v173 = 0;
LABEL_211:
      if (v184)
      {
        CFTypeRef v99 = v183;
        CFTypeRef v183 = 0;
        if (v99) {
          CFRelease(v99);
        }
      }
      goto LABEL_214;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v179);
    if (!v180)
    {
      LOBYTE(cf[0]) = 0;
      char v173 = 0;
LABEL_208:
      if (v182)
      {
        CFTypeRef v98 = v181;
        CFTypeRef v181 = 0;
        if (v98) {
          CFRelease(v98);
        }
      }
      goto LABEL_211;
    }
    uint64_t v66 = (const void *)((uint64_t (*)(void))*MEMORY[0x1E4FB6378])();
    v205[0] = v66;
    if (v66) {
      CFRetain(v66);
    }
    WTF::HashSet<WTF::RetainPtr<objc_class *>,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTableTraits>::HashSet((uint64_t *)&v191, v205, 1);
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::operator=((const void ***)(a1 + 56), &v191);
    unint64_t v67 = *(void *)(a1 + 8);
    uint64_t v68 = *(void *)a1;
    unint64_t v69 = *(void *)(a1 + 16) - *(void *)a1;
    if (v67 <= v69)
    {
      unint64_t v145 = 0;
      uint64_t v146 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v147 = *(void *)(a1 + 24);
      if (v147)
      {
        if (v67)
        {
          (*(void (**)(uint64_t))(*(void *)v147 + 16))(v147);
          uint64_t v146 = *(void *)a1;
          unint64_t v145 = *(void *)(a1 + 8);
        }
        else
        {
          unint64_t v145 = 0;
          uint64_t v146 = 0;
        }
      }
    }
    else
    {
      uint64_t v70 = (unsigned __int8 *)(v68 + v69);
      *(void *)(a1 + 16) = v70 + 1;
      if (v68)
      {
        unsigned int v71 = *v70;
        if (v71 < 2)
        {
          if (!v71)
          {
            LOBYTE(v192) = 0;
            unsigned __int8 v193 = 0;
            LOBYTE(v174[0]) = 0;
            LOBYTE(v175) = 0;
            BYTE8(v175) = 1;
            std::__optional_destruct_base<WebKit::CoreIPCPKDateComponentsRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v192);
            uint64_t v79 = 0;
            goto LABEL_183;
          }
          IPC::Decoder::decode<WTF::RetainPtr<NSDateComponents>>(&v196, (const void ***)a1);
          if (!v197)
          {
            int v74 = 0;
            LOBYTE(v192) = 0;
            unsigned __int8 v193 = 0;
LABEL_173:
            uint64_t v80 = *(void *)a1;
            uint64_t v81 = *(void *)(a1 + 8);
            *(void *)a1 = 0;
            *(void *)(a1 + 8) = 0;
            uint64_t v82 = *(void *)(a1 + 24);
            if (v82 && v81)
            {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v82 + 16))(v82, v80);
              int v74 = v193;
            }
LABEL_181:
            if (v74)
            {
              long long v83 = v192;
              long long v192 = 0uLL;
              *(_OWORD *)long long v174 = v83;
              LOBYTE(v175) = 1;
              BYTE8(v175) = 1;
              std::__optional_destruct_base<WebKit::CoreIPCPKDateComponentsRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v192);
              WebKit::CoreIPCPKDateComponentsRange::toID((WebKit::CoreIPCPKDateComponentsRange *)v174, &v192);
              uint64_t v79 = (const void *)v192;
              if (!BYTE8(v175))
              {
LABEL_184:
                if (v79)
                {
                  CFRetain(v79);
                  CFRelease(v79);
                }
                int v85 = 0;
                goto LABEL_190;
              }
LABEL_183:
              std::__optional_destruct_base<WebKit::CoreIPCPKDateComponentsRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v174);
              goto LABEL_184;
            }
            std::__optional_destruct_base<WebKit::CoreIPCPKDateComponentsRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v192);
LABEL_188:
            uint64_t v84 = *(void **)a1;
            unint64_t v31 = *(void *)(a1 + 8);
            *(void *)a1 = 0;
            *(void *)(a1 + 8) = 0;
            uint64_t v86 = *(void *)(a1 + 24);
            if (v86 && v31) {
              (*(void (**)(uint64_t, void *))(*(void *)v86 + 16))(v86, v84);
            }
            uint64_t v79 = 0;
            int v85 = 1;
LABEL_190:
            if (v191) {
              WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(v191, v84);
            }
            CFTypeRef v87 = v205[0];
            v205[0] = 0;
            if (v87)
            {
              CFRelease(v87);
              if (!v85)
              {
LABEL_194:
                if (*(void *)a1)
                {
                  if (!v190 || !v204 || !v202 || !v188 || !v200 || !v186 || !v184 || !v182 || !v180) {
                    goto LABEL_287;
                  }
                  uint64_t v88 = v189;
                  char v189 = 0;
                  char v89 = v203;
                  char v203 = 0;
                  CFTypeRef v90 = v201;
                  CFTypeRef v201 = 0;
                  CFTypeRef v91 = v187;
                  CFTypeRef v187 = 0;
                  CFTypeRef v92 = v199;
                  CFTypeRef v199 = 0;
                  CFTypeRef v93 = v185;
                  CFTypeRef v185 = 0;
                  CFTypeRef v94 = v183;
                  CFTypeRef v183 = 0;
                  CFTypeRef v95 = v181;
                  CFTypeRef v181 = 0;
                  CFTypeRef v96 = v179;
                  CFTypeRef v179 = 0;
                  cf[0] = v88;
                  cf[1] = v89;
                  *(_OWORD *)long long v174 = 0u;
                  long long v175 = 0u;
                  *(void *)&long long v169 = v90;
                  *((void *)&v169 + 1) = v91;
                  *(void *)&long long v170 = v92;
                  *((void *)&v170 + 1) = v93;
                  long long v176 = 0u;
                  long long v177 = 0u;
                  *(void *)&long long v171 = v94;
                  *((void *)&v171 + 1) = v95;
                  long long v178 = 0u;
                  *(void *)&long long v172 = v96;
                  *((void *)&v172 + 1) = v79;
                  char v173 = 1;
                  WebKit::CoreIPCPKShippingMethod::~CoreIPCPKShippingMethod((WebKit::CoreIPCPKShippingMethod *)v174);
                }
                else
                {
                  LOBYTE(cf[0]) = 0;
                  char v173 = 0;
                  if (v79) {
                    CFRelease(v79);
                  }
                }
                goto LABEL_205;
              }
            }
            else if (!v85)
            {
              goto LABEL_194;
            }
            uint64_t v134 = *(void *)a1;
            uint64_t v135 = *(void *)(a1 + 8);
            *(void *)a1 = 0;
            *(void *)(a1 + 8) = 0;
            uint64_t v136 = *(void *)(a1 + 24);
            if (v136 && v135) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v136 + 16))(v136, v134);
            }
            LOBYTE(cf[0]) = 0;
            char v173 = 0;
LABEL_205:
            if (v180)
            {
              CFTypeRef v97 = v179;
              CFTypeRef v179 = 0;
              if (v97) {
                CFRelease(v97);
              }
            }
            goto LABEL_208;
          }
          IPC::Decoder::decode<WTF::RetainPtr<NSDateComponents>>(&v194, (const void ***)a1);
          if (v195)
          {
            if (*(void *)a1)
            {
              int v72 = 0;
              CFTypeRef v73 = v196;
              CFTypeRef v196 = 0;
              *(void *)&long long v192 = v73;
              *((void *)&v192 + 1) = v194;
              int v74 = 1;
              unsigned __int8 v193 = 1;
              goto LABEL_178;
            }
            LOBYTE(v192) = 0;
            unsigned __int8 v193 = 0;
            if (v194) {
              CFRelease(v194);
            }
            int v74 = 0;
          }
          else
          {
            int v74 = 0;
            LOBYTE(v192) = 0;
            unsigned __int8 v193 = 0;
          }
          int v72 = 1;
LABEL_178:
          if (v196) {
            CFRelease(v196);
          }
          if (!v72) {
            goto LABEL_181;
          }
          goto LABEL_173;
        }
LABEL_305:
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        uint64_t v149 = *(void *)(a1 + 24);
        if (v149 && v67) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v149 + 16))(v149, v68);
        }
        goto LABEL_188;
      }
      unint64_t v145 = v67;
      uint64_t v146 = 0;
    }
    unint64_t v67 = 0;
    uint64_t v68 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v148 = *(void *)(a1 + 24);
    if (v148)
    {
      if (v145)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v148 + 16))(v148, v146, v145);
        uint64_t v68 = *(void *)a1;
        unint64_t v67 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v67 = 0;
        uint64_t v68 = 0;
      }
    }
    goto LABEL_305;
  }
  CFTypeRef v75 = 0;
LABEL_238:
  for (int i = 0; ; int i = 1)
  {
    if (v160) {
      WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(v160, v62);
    }
    CFTypeRef v112 = v198;
    CFTypeRef v198 = 0;
    if (v112) {
      break;
    }
    if (i) {
      goto LABEL_259;
    }
LABEL_243:
    IPC::Decoder::decode<WTF::RetainPtr<NSData>>(a1, (uint64_t)cf);
    if (!LOBYTE(cf[1]))
    {
      LOBYTE(v151) = 0;
      char v155 = 0;
      goto LABEL_270;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSDictionary>>((uint64_t)v174, (const void ***)a1);
    if (!LOBYTE(v174[1]))
    {
      LOBYTE(v151) = 0;
      char v155 = 0;
      goto LABEL_267;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>((uint64_t *)a1, (uint64_t)&v192);
    if (!BYTE8(v192))
    {
      LOBYTE(v151) = 0;
      char v155 = 0;
      goto LABEL_265;
    }
    IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v196);
    if (!v197)
    {
      LOBYTE(v151) = 0;
      char v155 = 0;
      goto LABEL_262;
    }
    if (!*(void *)a1)
    {
      LOBYTE(v151) = 0;
      char v155 = 0;
      goto LABEL_253;
    }
    if (v159 && v157 && LOBYTE(cf[1]) && BYTE8(v192))
    {
      CFTypeRef v113 = v158;
      CFTypeRef v158 = 0;
      CFTypeRef v114 = v156;
      CFTypeRef v156 = 0;
      CFTypeRef v115 = cf[0];
      cf[0] = 0;
      CFTypeRef v116 = v174[0];
      v174[0] = 0;
      uint64_t v117 = v192;
      *(void *)&long long v192 = 0;
      CFTypeRef v118 = v196;
      CFTypeRef v196 = 0;
      *(void *)&long long v151 = v2;
      *((void *)&v151 + 1) = v113;
      *(_OWORD *)char v161 = 0u;
      *(_OWORD *)uint64_t v162 = 0u;
      *(void *)&long long v152 = v114;
      *((void *)&v152 + 1) = v75;
      *(void *)&long long v153 = v115;
      *((void *)&v153 + 1) = v116;
      *(_OWORD *)uint64_t v163 = 0u;
      *(_OWORD *)char v164 = 0u;
      *(void *)&long long v154 = v117;
      *((void *)&v154 + 1) = v118;
      char v155 = 1;
      WebKit::CoreIPCPKPayment::~CoreIPCPKPayment((WebKit::CoreIPCPKPayment *)v161);
      CFTypeRef v2 = 0;
      CFTypeRef v75 = 0;
      if (v197)
      {
LABEL_253:
        CFTypeRef v119 = v196;
        CFTypeRef v196 = 0;
        if (v119) {
          CFRelease(v119);
        }
      }
LABEL_262:
      if (BYTE8(v192))
      {
        uint64_t v123 = (const void *)v192;
        *(void *)&long long v192 = 0;
        if (v123) {
          CFRelease(v123);
        }
      }
LABEL_265:
      if (v174[0]) {
        CFRelease(v174[0]);
      }
LABEL_267:
      if (LOBYTE(cf[1]))
      {
        CFTypeRef v124 = cf[0];
        cf[0] = 0;
        if (v124) {
          CFRelease(v124);
        }
      }
LABEL_270:
      if (v75) {
        CFRelease(v75);
      }
      goto LABEL_272;
    }
LABEL_287:
    __break(1u);
LABEL_288:
    unint64_t v137 = 0;
    uint64_t v138 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v139 = *(void *)(a1 + 24);
    if (v139)
    {
      if (v31)
      {
        (*(void (**)(uint64_t))(*(void *)v139 + 16))(v139);
        uint64_t v138 = *(void *)a1;
        unint64_t v137 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v137 = 0;
        uint64_t v138 = 0;
      }
    }
LABEL_289:
    unint64_t v31 = 0;
    long long v62 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v140 = *(void *)(a1 + 24);
    if (v140)
    {
      if (v137)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v140 + 16))(v140, v138, v137);
        long long v62 = *(char **)a1;
        unint64_t v31 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v31 = 0;
        long long v62 = 0;
      }
    }
LABEL_290:
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v141 = *(void *)(a1 + 24);
    if (v141 && v31) {
LABEL_292:
    }
      (*(void (**)(uint64_t, char *))(*(void *)v141 + 16))(v141, v62);
LABEL_294:
    long long v62 = *(char **)a1;
    uint64_t v143 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v144 = *(void *)(a1 + 24);
    if (v144 && v143) {
      (*(void (**)(uint64_t, char *))(*(void *)v144 + 16))(v144, v62);
    }
    CFTypeRef v75 = 0;
  }
  CFRelease(v112);
  if (!i) {
    goto LABEL_243;
  }
LABEL_259:
  uint64_t v120 = *(void *)a1;
  uint64_t v121 = *(void *)(a1 + 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v122 = *(void *)(a1 + 24);
  if (v122 && v121) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v122 + 16))(v122, v120);
  }
  LOBYTE(v151) = 0;
  char v155 = 0;
LABEL_272:
  if (v157)
  {
    CFTypeRef v125 = v156;
    CFTypeRef v156 = 0;
    if (v125) {
      CFRelease(v125);
    }
  }
LABEL_275:
  if (v159)
  {
    CFTypeRef v126 = v158;
    CFTypeRef v158 = 0;
    if (v126) {
      CFRelease(v126);
    }
  }
LABEL_278:
  if (v2) {
    CFRelease(v2);
  }
LABEL_280:
  if (v155)
  {
    long long v127 = v151;
    long long v128 = v152;
    long long v151 = 0u;
    long long v152 = 0u;
    *(_OWORD *)a2 = v127;
    *(_OWORD *)(a2 + 16) = v128;
    long long v129 = v153;
    long long v130 = v154;
    long long v153 = 0u;
    long long v154 = 0u;
    *(_OWORD *)(a2 + 32) = v129;
    *(_OWORD *)(a2 + 48) = v130;
    *(unsigned char *)(a2 + 64) = 1;
    *(unsigned char *)(a2 + 72) = 1;
    WebKit::CoreIPCPKPayment::~CoreIPCPKPayment((WebKit::CoreIPCPKPayment *)&v151);
    return;
  }
  uint64_t v131 = *(void *)a1;
  uint64_t v132 = *(void *)(a1 + 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v133 = *(void *)(a1 + 24);
  if (v133)
  {
    if (v132) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v133 + 16))(v133, v131);
    }
  }
LABEL_283:
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 72) = 0;
}

void sub_1994C0804(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef a20,uint64_t a21,CFTypeRef a22,uint64_t a23,uint64_t a24,uint64_t a25,CFTypeRef a26,CFTypeRef a27,CFTypeRef a28,CFTypeRef a29,CFTypeRef a30,CFTypeRef a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,CFTypeRef a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,CFTypeRef cf,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,CFTypeRef a60,uint64_t a61,CFTypeRef a62,uint64_t a63)
{
  if (*(unsigned char *)(v68 - 240))
  {
    uint64_t v70 = *(const void **)(v68 - 248);
    *(void *)(v68 - 248) = 0;
    if (v70) {
      CFRelease(v70);
    }
  }
  if (*(unsigned char *)(v68 - 184))
  {
    unsigned int v71 = *(const void **)(v68 - 192);
    *(void *)(v68 - 192) = 0;
    if (v71) {
      CFRelease(v71);
    }
  }
  if (*(unsigned char *)(v68 - 168))
  {
    int v72 = *(const void **)(v68 - 176);
    *(void *)(v68 - 176) = 0;
    if (v72) {
      CFRelease(v72);
    }
  }
  if (*(unsigned char *)(v68 - 216))
  {
    CFTypeRef v73 = *(const void **)(v68 - 224);
    *(void *)(v68 - 224) = 0;
    if (v73) {
      CFRelease(v73);
    }
  }
  if (a50 && cf) {
    CFRelease(cf);
  }
  if (a68) {
    WTF::HashTable<WTF::RetainPtr<objc_class *>,WTF::RetainPtr<objc_class *>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>,WTF::HashTraits<WTF::RetainPtr<objc_class *>>>::deallocateTable(a68, a2);
  }
  int v74 = *(const void **)(v68 - 152);
  *(void *)(v68 - 152) = 0;
  if (v74) {
    CFRelease(v74);
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::CoreIPCCNPhoneNumber>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v13);
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v11);
  uint64_t v6 = *(void *)a2;
  if (*(void *)a2)
  {
    if (v14 && v12)
    {
      CFTypeRef v7 = v13;
      unsigned int v13 = 0;
      CFTypeRef v8 = v11;
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
      *(unsigned char *)(a1 + 16) = 1;
      goto LABEL_5;
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (v12)
  {
    uint64_t result = v11;
    unint64_t v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_5:
  if (v14)
  {
    uint64_t result = v13;
    unsigned int v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        if (v6) {
          return result;
        }
        goto LABEL_18;
      }
      *(_DWORD *)result -= 2;
    }
  }
  if (v6) {
    return result;
  }
LABEL_18:
  uint64_t v9 = *(void *)a2;
  uint64_t v10 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
  if (result)
  {
    if (v10) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v9);
    }
  }
  return result;
}

void sub_1994C0DFC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12)
{
  std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100](v12, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebKit::CoreIPCCNPostalAddress>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v45);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v43);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v41);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v39);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v37);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v35);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v33);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v31);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v29);
  uint64_t v5 = *(void *)a2;
  if (!*(void *)a2) {
    goto LABEL_61;
  }
  if (!v46 || !v44 || !v42 || !v40 || !v38 || !v36 || !v34 || !v32 || !v30)
  {
    __break(1u);
LABEL_61:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 72) = 0;
    goto LABEL_12;
  }
  uint64_t v6 = v45;
  uint64_t v45 = 0;
  CFTypeRef v7 = v43;
  uint64_t v43 = 0;
  CFTypeRef v8 = v41;
  uint64_t v41 = 0;
  uint64_t v9 = v39;
  uint64_t v39 = 0;
  uint64_t v10 = v37;
  unint64_t v37 = 0;
  unint64_t v11 = v35;
  uint64_t v35 = 0;
  uint64_t v12 = v33;
  uint64_t v33 = 0;
  unsigned int v13 = v31;
  unint64_t v31 = 0;
  char v14 = v29;
  CFTypeRef v29 = 0;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  memset(v27, 0, 32);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  memset(&v27[2], 0, 32);
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v13;
  uint64_t v28 = 0;
  *(void *)(a1 + 64) = v14;
  *(unsigned char *)(a1 + 72) = 1;
  WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)v27, v4);
LABEL_12:
  if (v30)
  {
    unint64_t v15 = v29;
    CFTypeRef v29 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v4);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
  }
  if (v32)
  {
    uint64_t v16 = v31;
    unint64_t v31 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v4);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
  }
  if (v34)
  {
    unint64_t v17 = v33;
    uint64_t v33 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v4);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
  }
  if (v36)
  {
    uint64_t v18 = v35;
    uint64_t v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v4);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  if (v38)
  {
    unsigned int v19 = v37;
    unint64_t v37 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v4);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
  if (v40)
  {
    uint64_t v20 = v39;
    uint64_t v39 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v4);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
  }
  if (v42)
  {
    int v21 = v41;
    uint64_t v41 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v4);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
  }
  if (v44)
  {
    uint64_t v22 = v43;
    uint64_t v43 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v4);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  if (v46)
  {
    uint64_t v23 = v45;
    uint64_t v45 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::destroy(v23, v4);
        if (v5) {
          return;
        }
        goto LABEL_62;
      }
      *(_DWORD *)v23 -= 2;
    }
  }
  if (v5) {
    return;
  }
LABEL_62:
  uint64_t v24 = *(void *)a2;
  uint64_t v25 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v26 = *((void *)a2 + 3);
  if (v26)
  {
    if (v25) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24);
    }
  }
}

void sub_1994C1190(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,char a24,WTF::StringImpl *a25,char a26)
{
  if (a22 && a21)
  {
    if (*(_DWORD *)a21 == 2) {
      WTF::StringImpl::destroy(a21, a2);
    }
    else {
      *(_DWORD *)a21 -= 2;
    }
  }
  if (a24 && a23)
  {
    if (*(_DWORD *)a23 == 2) {
      WTF::StringImpl::destroy(a23, a2);
    }
    else {
      *(_DWORD *)a23 -= 2;
    }
  }
  if (a26 && a25)
  {
    if (*(_DWORD *)a25 == 2) {
      WTF::StringImpl::destroy(a25, a2);
    }
    else {
      *(_DWORD *)a25 -= 2;
    }
  }
  if (*(unsigned char *)(v26 - 104))
  {
    uint64_t v28 = *(WTF::StringImpl **)(v26 - 112);
    *(void *)(v26 - 112) = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, a2);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v26 - 88))
  {
    CFTypeRef v29 = *(WTF::StringImpl **)(v26 - 96);
    *(void *)(v26 - 96) = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, a2);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v26 - 72))
  {
    char v30 = *(WTF::StringImpl **)(v26 - 80);
    *(void *)(v26 - 80) = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, a2);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v26 - 56))
  {
    unint64_t v31 = *(WTF::StringImpl **)(v26 - 64);
    *(void *)(v26 - 64) = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, a2);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
  if (*(unsigned char *)(v26 - 40))
  {
    char v32 = *(WTF::StringImpl **)(v26 - 48);
    *(void *)(v26 - 48) = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, a2);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLProtectionSpace>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCNSURLProtectionSpace>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 80);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1994C144CLL);
    }
    goto LABEL_14;
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1994C1484);
  }
  unsigned char *v5 = 1;
  if (!*(unsigned char *)(a2 + 80)) {
    goto LABEL_19;
  }
  IPC::encodeObjectDirectly<NSDictionary>(a1, *(NSDictionary **)a2);
  IPC::encodeObjectDirectly<NSString>(a1, *(void *)(a2 + 8));
  IPC::encodeObjectDirectly<NSNumber>(a1, *(WebKit::CoreIPCNumber **)(a2 + 16));
  IPC::encodeObjectDirectly<NSNumber>(a1, *(WebKit::CoreIPCNumber **)(a2 + 24));
  IPC::encodeObjectDirectly<NSString>(a1, *(void *)(a2 + 32));
  IPC::encodeObjectDirectly<NSNumber>(a1, *(WebKit::CoreIPCNumber **)(a2 + 40));
  IPC::ArgumentCoder<__SecTrust *,void>::encode(a1);
  int v7 = *(unsigned __int8 *)(a2 + 72);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v7)
  {
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1994C14C4);
    }
LABEL_14:
    unsigned char *v5 = 0;
    return;
  }
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x1994C14A4);
  }
  unsigned char *v5 = 1;
  if (!*(unsigned char *)(a2 + 72))
  {
LABEL_19:
    uint64_t v13 = std::__throw_bad_optional_access[abi:sn180100]();
    IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLProtectionSpace>,void>::decode<IPC::Decoder>(v13, v14);
    return;
  }
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 68));
  uint64_t v9 = *(unsigned int *)(a2 + 68);
  if (v9)
  {
    uint64_t v10 = *(const void ***)(a2 + 56);
    uint64_t v11 = 8 * v9;
    do
    {
      uint64_t v12 = *v10++;
      IPC::encodeObjectDirectly<NSData>(a1, v12);
      v11 -= 8;
    }
    while (v11);
  }
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLProtectionSpace>,void>::decode<IPC::Decoder>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(const void ***)a1;
  unint64_t v12 = *(void *)(a1 + 16) - *(void *)a1;
  if (v10 <= v12)
  {
    unint64_t v41 = 0;
    char v42 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v43 = *(void *)(a1 + 24);
    if (v43)
    {
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v43 + 16))(v43);
        char v42 = *(const void ***)a1;
        unint64_t v41 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v41 = 0;
        char v42 = 0;
      }
    }
LABEL_54:
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v44 = *(void *)(a1 + 24);
    if (v44)
    {
      if (v41)
      {
        (*(void (**)(uint64_t, const void **, unint64_t))(*(void *)v44 + 16))(v44, v42, v41);
        goto LABEL_57;
      }
      unint64_t v10 = 0;
      uint64_t v11 = 0;
    }
    goto LABEL_58;
  }
  uint64_t v13 = (unsigned __int8 *)v11 + v12;
  *(void *)(a1 + 16) = v13 + 1;
  if (!v11)
  {
    unint64_t v41 = v10;
    char v42 = 0;
    goto LABEL_54;
  }
  unsigned int v14 = *v13;
  if (v14 >= 2) {
    goto LABEL_58;
  }
  if (!v14)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 80) = 0;
    *(unsigned char *)(a2 + 88) = 1;
    return;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSDictionary>>((uint64_t)&v111, (const void ***)a1);
  if (!v112) {
    goto LABEL_57;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v109);
  if (!v110)
  {
    int v35 = 0;
    int v36 = 0;
    LOBYTE(v80) = 0;
    char v87 = 0;
    goto LABEL_92;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>((uint64_t *)a1, (uint64_t)&v107);
  if (!v108)
  {
    int v35 = 0;
    int v36 = 0;
    LOBYTE(v80) = 0;
    char v87 = 0;
    goto LABEL_89;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>((uint64_t *)a1, (uint64_t)&v105);
  if (!v106)
  {
    int v35 = 0;
    int v36 = 0;
    LOBYTE(v80) = 0;
    char v87 = 0;
    goto LABEL_86;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSString>>(a1, (uint64_t)&v103);
  if (!v104)
  {
    int v35 = 0;
    int v36 = 0;
    LOBYTE(v80) = 0;
    char v87 = 0;
    goto LABEL_83;
  }
  IPC::Decoder::decode<WTF::RetainPtr<NSNumber>>((uint64_t *)a1, (uint64_t)&v101);
  if (!v102)
  {
    int v35 = 0;
    int v36 = 0;
    LOBYTE(v80) = 0;
    char v87 = 0;
    goto LABEL_80;
  }
  IPC::Decoder::decode<WTF::RetainPtr<__SecTrust *>>((uint64_t *)a1, (uint64_t)&cf);
  if (!v100)
  {
    int v35 = 0;
    int v36 = 0;
    LOBYTE(v80) = 0;
    char v87 = 0;
    goto LABEL_77;
  }
  unint64_t v16 = *(void *)(a1 + 8);
  unint64_t v15 = *(const void ***)a1;
  unint64_t v17 = *(void *)(a1 + 16) - *(void *)a1;
  if (v16 <= v17)
  {
    unint64_t v65 = 0;
    uint64_t v66 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v67 = *(void *)(a1 + 24);
    if (v67)
    {
      if (v16)
      {
        (*(void (**)(uint64_t))(*(void *)v67 + 16))(v67);
        uint64_t v66 = *(const void ***)a1;
        unint64_t v65 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v65 = 0;
        uint64_t v66 = 0;
      }
    }
    goto LABEL_104;
  }
  uint64_t v18 = (char *)v15 + v17;
  uint64_t v19 = (uint64_t)v15 + v17 + 1;
  *(void *)(a1 + 16) = v19;
  if (!v15)
  {
    unint64_t v65 = v16;
    uint64_t v66 = 0;
LABEL_104:
    unint64_t v16 = 0;
    unint64_t v15 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v68 = *(void *)(a1 + 24);
    if (v68)
    {
      if (v65)
      {
        (*(void (**)(uint64_t, const void **, unint64_t))(*(void *)v68 + 16))(v68, v66, v65);
        unint64_t v15 = *(const void ***)a1;
        unint64_t v16 = *(void *)(a1 + 8);
      }
      else
      {
        unint64_t v16 = 0;
        unint64_t v15 = 0;
      }
    }
LABEL_105:
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v55 = *(void *)(a1 + 24);
    if (!v55 || !v16) {
      goto LABEL_72;
    }
    goto LABEL_102;
  }
  unsigned int v20 = *v18;
  if (v20 >= 2) {
    goto LABEL_105;
  }
  if (!*v18)
  {
    LOBYTE(v95) = 0;
    char v97 = 0;
    char v98 = 1;
    goto LABEL_39;
  }
  unint64_t v21 = ((v19 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v15;
  if (v16 < v21 || v16 - v21 <= 7)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v69 = *(void *)(a1 + 24);
    if (v69)
    {
      (*(void (**)(uint64_t))(*(void *)v69 + 16))(v69);
      uint64_t v70 = *(const void ***)a1;
      uint64_t v71 = *(void *)(a1 + 8);
      uint64_t v72 = *(void *)(a1 + 24);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      if (v72)
      {
        if (v71) {
          (*(void (**)(uint64_t, const void **))(*(void *)v72 + 16))(v72, v70);
        }
      }
    }
LABEL_71:
    unint64_t v15 = *(const void ***)a1;
    uint64_t v54 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v55 = *(void *)(a1 + 24);
    if (!v55 || !v54) {
      goto LABEL_72;
    }
LABEL_102:
    (*(void (**)(uint64_t, const void **))(*(void *)v55 + 16))(v55, v15);
LABEL_72:
    LOBYTE(v95) = 0;
    char v98 = 0;
    unint64_t v15 = *(const void ***)a1;
    uint64_t v56 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v57 = *(void *)(a1 + 24);
    if (v57 && v56) {
      (*(void (**)(uint64_t, const void **))(*(void *)v57 + 16))(v57, v15);
    }
    int v35 = 0;
    int v36 = 0;
    LOBYTE(v80) = 0;
    char v87 = 0;
    goto LABEL_74;
  }
  uint64_t v22 = (WTF **)((char *)v15 + v21);
  uint64_t v23 = *v22;
  *(void *)(a1 + 16) = v22 + 1;
  CFTypeRef v115 = 0;
  uint64_t v116 = 0;
  if ((unint64_t)v23 < 0x20000)
  {
    if (!v23)
    {
      unsigned int v33 = 0;
      unsigned int v34 = 0;
      goto LABEL_38;
    }
    uint64_t v24 = WTF::fastMalloc((WTF *)(8 * (void)v23));
    LODWORD(v116) = v23;
    CFTypeRef v115 = (WTF *)v24;
    while (1)
    {
      IPC::Decoder::decode<WTF::RetainPtr<NSData>>(a1, (uint64_t)&v113);
      if (!v114) {
        goto LABEL_70;
      }
      int v25 = HIDWORD(v116);
      if (HIDWORD(v116) != v116) {
        break;
      }
      uint64_t v26 = (uint64_t *)WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v115, HIDWORD(v116) + 1, (unint64_t)&v113);
      uint64_t v27 = HIDWORD(v116);
      int v28 = HIDWORD(v116) + 1;
      CFTypeRef v29 = v115;
      uint64_t v30 = *v26;
      *uint64_t v26 = 0;
      *((void *)v29 + v27) = v30;
      HIDWORD(v116) = v28;
      if (v114) {
        goto LABEL_26;
      }
LABEL_28:
      uint64_t v23 = (WTF *)((char *)v23 - 1);
      if (!v23)
      {
        uint64_t v23 = v115;
        unsigned int v34 = v116;
        unsigned int v33 = HIDWORD(v116);
        goto LABEL_38;
      }
    }
    unint64_t v31 = v113;
    CFTypeRef v113 = 0;
    *((void *)v115 + HIDWORD(v1IPC::StreamServerConnection::~StreamServerConnection((IPC::StreamServerConnection *)((char *)this - 16)) = v31;
    HIDWORD(v116) = v25 + 1;
LABEL_26:
    char v32 = v113;
    CFTypeRef v113 = 0;
    if (v32) {
      CFRelease(v32);
    }
    goto LABEL_28;
  }
  do
  {
    IPC::Decoder::decode<WTF::RetainPtr<NSData>>(a1, (uint64_t)&v113);
    if (!v114)
    {
LABEL_70:
      WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v115, v15);
      goto LABEL_71;
    }
    int v46 = HIDWORD(v116);
    if (HIDWORD(v116) == v116)
    {
      CFTypeRef v47 = (uint64_t *)WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v115, HIDWORD(v116) + 1, (unint64_t)&v113);
      uint64_t v48 = HIDWORD(v116);
      int v49 = HIDWORD(v116) + 1;
      CFTypeRef v50 = v115;
      uint64_t v51 = *v47;
      *CFTypeRef v47 = 0;
      *((void *)v50 + v48) = v51;
      HIDWORD(v116) = v49;
      if (!v114) {
        goto LABEL_68;
      }
    }
    else
    {
      CFTypeRef v52 = v113;
      CFTypeRef v113 = 0;
      *((void *)v115 + HIDWORD(v1IPC::StreamServerConnection::~StreamServerConnection((IPC::StreamServerConnection *)((char *)this - 16)) = v52;
      HIDWORD(v116) = v46 + 1;
    }
    CFTypeRef v53 = v113;
    CFTypeRef v113 = 0;
    if (v53) {
      CFRelease(v53);
    }
LABEL_68:
    uint64_t v23 = (WTF *)((char *)v23 - 1);
  }
  while (v23);
  int v4 = (void *)HIDWORD(v116);
  uint64_t v23 = v115;
  if (v116 <= HIDWORD(v116)) {
    goto LABEL_129;
  }
  CFTypeRef v73 = v115;
  if (!HIDWORD(v116)) {
    goto LABEL_122;
  }
  if (HIDWORD(v116) >> 29)
  {
    __break(0xC471u);
LABEL_141:
    __break(1u);
    return;
  }
  int v74 = (WTF *)(8 * HIDWORD(v116));
  CFTypeRef v3 = (WTF *)WTF::fastMalloc(v74);
  LODWORD(v116) = v4;
  CFTypeRef v115 = v3;
  CFTypeRef v73 = v23;
  if (v3 != v23)
  {
    int v4 = v23;
    do
    {
      CFTypeRef v75 = (const void *)*v4;
      *int v4 = 0;
      *(void *)CFTypeRef v3 = v75;
      uint64_t v76 = (const void *)*v4;
      *int v4 = 0;
      if (v76) {
        CFRelease(v76);
      }
      CFTypeRef v3 = (WTF *)((char *)v3 + 8);
      ++v4;
      int v74 = (WTF *)((char *)v74 - 8);
    }
    while (v74);
    CFTypeRef v73 = v115;
  }
LABEL_122:
  if (v23)
  {
    if (v73 == v23)
    {
      CFTypeRef v115 = 0;
      LODWORD(v116) = 0;
    }
    WTF::fastFree(v23, v15);
    uint64_t v23 = v115;
  }
  else
  {
    uint64_t v23 = v73;
  }
LABEL_129:
  unsigned int v34 = v116;
  unsigned int v33 = HIDWORD(v116);
LABEL_38:
  unsigned int v78 = v33;
  unsigned int v79 = v34;
  CFTypeRef v115 = 0;
  uint64_t v116 = 0;
  uint64_t v2 = 1;
  LOBYTE(v89) = 1;
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v115, v15);
  long long v88 = 0uLL;
  CFTypeRef v95 = v23;
  unint64_t v96 = __PAIR64__(v78, v79);
  char v97 = 1;
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v88, v37);
  char v98 = 1;
  if (!*(void *)a1)
  {
    unsigned int v77 = v20;
    int v35 = 0;
    int v36 = 0;
    LOBYTE(v80) = 0;
    char v87 = 0;
    goto LABEL_51;
  }
LABEL_39:
  if (!v110 || !v108 || !v106 || !v104 || !v102 || !v100) {
    goto LABEL_141;
  }
  CFTypeRef v38 = v111;
  CFTypeRef v111 = 0;
  CFTypeRef v3 = v109;
  long long v109 = 0;
  uint64_t v2 = (uint64_t)v107;
  long long v107 = 0;
  int v7 = v105;
  long long v105 = 0;
  uint64_t v6 = v103;
  CFTypeRef v103 = 0;
  uint64_t v5 = v101;
  CFTypeRef v101 = 0;
  int v4 = cf;
  CFTypeRef cf = 0;
  LOBYTE(v92) = 0;
  char v94 = 0;
  if (v20)
  {
    uint64_t v39 = v95;
    CFTypeRef v95 = 0;
    unint64_t v96 = 0;
    CFTypeRef v92 = v39;
    unint64_t v93 = __PAIR64__(v78, v79);
    char v94 = 1;
  }
  *(void *)&long long v80 = v38;
  *((void *)&v80 + 1) = v3;
  long long v88 = 0u;
  long long v89 = 0u;
  *(void *)&long long v81 = v2;
  *((void *)&v81 + 1) = v7;
  long long v90 = 0u;
  *(void *)&long long v82 = v6;
  *((void *)&v82 + 1) = v5;
  uint64_t v91 = 0;
  long long v83 = v4;
  LOBYTE(v84) = 0;
  char v86 = 0;
  unsigned int v77 = v20;
  if (v20)
  {
    char v40 = v92;
    CFTypeRef v92 = 0;
    unint64_t v93 = 0;
    uint64_t v84 = v40;
    unint64_t v85 = __PAIR64__(v78, v79);
    int v35 = 1;
    char v86 = 1;
  }
  else
  {
    int v35 = 0;
  }
  int v36 = 1;
  char v87 = 1;
  WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace((WebKit::CoreIPCNSURLProtectionSpace *)&v88, v15);
LABEL_51:
  if (v77) {
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v95, v15);
  }
LABEL_74:
  if (v100)
  {
    CFTypeRef v58 = cf;
    CFTypeRef cf = 0;
    if (v58) {
      CFRelease(v58);
    }
  }
LABEL_77:
  if (v102)
  {
    CFTypeRef v59 = v101;
    CFTypeRef v101 = 0;
    if (v59) {
      CFRelease(v59);
    }
  }
LABEL_80:
  if (v104)
  {
    CFTypeRef v60 = v103;
    CFTypeRef v103 = 0;
    if (v60) {
      CFRelease(v60);
    }
  }
LABEL_83:
  if (v106)
  {
    long long v61 = v105;
    long long v105 = 0;
    if (v61) {
      CFRelease(v61);
    }
  }
LABEL_86:
  if (v108)
  {
    long long v62 = v107;
    long long v107 = 0;
    if (v62) {
      CFRelease(v62);
    }
  }
LABEL_89:
  if (v110)
  {
    unint64_t v63 = v109;
    long long v109 = 0;
    if (v63) {
      CFRelease(v63);
    }
  }
LABEL_92:
  if (v111) {
    CFRelease(v111);
  }
  if (v36)
  {
    *(void *)a2 = v80;
    *(void *)(a2 + 8) = v3;
    long long v80 = 0u;
    long long v81 = 0u;
    *(void *)(a2 + 16) = v2;
    *(void *)(a2 + 24) = v7;
    long long v82 = 0u;
    *(void *)(a2 + 32) = v6;
    *(void *)(a2 + 40) = v5;
    long long v83 = 0;
    *(void *)(a2 + 48) = v4;
    *(unsigned char *)(a2 + 56) = 0;
    *(unsigned char *)(a2 + 72) = 0;
    if (v35)
    {
      uint64_t v64 = v84;
      uint64_t v84 = 0;
      unint64_t v85 = 0;
      *(void *)(a2 + 56) = v64;
      *(_DWORD *)(a2 + 64) = v79;
      *(_DWORD *)(a2 + 68) = v78;
      *(unsigned char *)(a2 + 72) = 1;
    }
    *(unsigned char *)(a2 + 80) = 1;
    *(unsigned char *)(a2 + 88) = 1;
    WebKit::CoreIPCNSURLProtectionSpace::~CoreIPCNSURLProtectionSpace((WebKit::CoreIPCNSURLProtectionSpace *)&v80, v15);
    return;
  }
LABEL_57:
  uint64_t v11 = *(const void ***)a1;
  unint64_t v10 = *(void *)(a1 + 8);
LABEL_58:
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v45 = *(void *)(a1 + 24);
  if (v45 && v10) {
    (*(void (**)(uint64_t, const void **))(*(void *)v45 + 16))(v45, v11);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 88) = 0;
}

void sub_1994C1E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,CFTypeRef cf,char a39)
{
  if (a39 && cf) {
    CFRelease(cf);
  }
  if (*(unsigned char *)(v39 - 208))
  {
    unint64_t v41 = *(const void **)(v39 - 216);
    *(void *)(v39 - 216) = 0;
    if (v41) {
      CFRelease(v41);
    }
  }
  if (*(unsigned char *)(v39 - 192))
  {
    char v42 = *(const void **)(v39 - 200);
    *(void *)(v39 - 200) = 0;
    if (v42) {
      CFRelease(v42);
    }
  }
  if (*(unsigned char *)(v39 - 176))
  {
    uint64_t v43 = *(const void **)(v39 - 184);
    *(void *)(v39 - 184) = 0;
    if (v43) {
      CFRelease(v43);
    }
  }
  if (*(unsigned char *)(v39 - 160))
  {
    uint64_t v44 = *(const void **)(v39 - 168);
    *(void *)(v39 - 168) = 0;
    if (v44) {
      CFRelease(v44);
    }
  }
  if (*(unsigned char *)(v39 - 144))
  {
    uint64_t v45 = *(const void **)(v39 - 152);
    *(void *)(v39 - 152) = 0;
    if (v45) {
      CFRelease(v45);
    }
  }
  int v46 = *(const void **)(v39 - 136);
  if (v46) {
    CFRelease(v46);
  }
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSShadow>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCNSShadow>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 32);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1994C1FE4);
    }
    unsigned char *v5 = 1;
    if (*(unsigned char *)(a2 + 32))
    {
      IPC::ArgumentCoder<WebKit::CoreIPCNSShadow,void>::encode(a1, a2);
    }
    else
    {
      int v7 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
      IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSShadow>,void>::decode<IPC::Decoder>(v7, v8, v9);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1994C2004);
    }
    unsigned char *v5 = 0;
  }
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSShadow>,void>::decode<IPC::Decoder>(void *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      unint64_t v17 = a1;
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        a1 = v17;
        uint64_t v12 = *v17;
        unint64_t v11 = v17[1];
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_12;
  }
  int v7 = (unsigned __int8 *)(v5 + v6);
  a1[2] = v7 + 1;
  if (!v5)
  {
    unint64_t v11 = v4;
    uint64_t v12 = 0;
LABEL_12:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v14 = a1[3];
    if (v14)
    {
      unint64_t v16 = a1;
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        a1 = v16;
        uint64_t v5 = *v16;
        unint64_t v4 = v16[1];
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v8 = *v7;
  if (v8 < 2)
  {
    if (v8)
    {
      IPC::Decoder::decode<WebKit::CoreIPCNSShadow>((uint64_t)a1, (uint64_t)&v18, a3);
      char v9 = v21;
      if (v21)
      {
        *(_OWORD *)a2 = v18;
        uint64_t v10 = v20;
        *(void *)(a2 + 16) = v19;
        *(void *)(a2 + 24) = v10;
        char v9 = 1;
        *(unsigned char *)(a2 + 32) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 32) = 0;
      char v9 = 1;
    }
    *(unsigned char *)(a2 + 40) = v9;
    return;
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v15 = a1[3];
  if (v15 && v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v5);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 40) = 0;
}

const void ***IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLCredential>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCNSURLCredential>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  uint64_t result = (const void ***)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1994C2264);
    }
    *(unsigned char *)uint64_t result = 1;
    if (*(unsigned char *)(a2 + 8))
    {
      int v7 = *(NSDictionary **)a2;
      return (const void ***)IPC::encodeObjectDirectly<NSDictionary>(a1, v7);
    }
    else
    {
      unsigned int v8 = (const void ***)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLCredential>,void>::decode<IPC::Decoder>(v8, v9);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1994C2284);
    }
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

const void ***IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNSURLCredential>,void>::decode<IPC::Decoder>@<X0>(const void ***result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = result;
  int v4 = result[1];
  uint64_t v5 = *result;
  unint64_t v6 = (char *)result[2] - (char *)*result;
  if ((unint64_t)v4 <= v6)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    WTF::StringImpl *result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      if (v4)
      {
        (*((void (**)(const void **))*v12 + 2))(v12);
        unint64_t v11 = *v2;
        uint64_t v10 = v2[1];
      }
      else
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
      }
    }
  }
  else
  {
    int v7 = (unsigned __int8 *)v5 + v6;
    result[2] = (const void **)(v7 + 1);
    if (v5)
    {
      unsigned int v8 = *v7;
      if (v8 >= 2) {
        goto LABEL_17;
      }
      if (!v8)
      {
        *a2 = 0;
        a2[8] = 0;
        char v9 = 1;
        goto LABEL_9;
      }
      IPC::Decoder::decode<WTF::RetainPtr<NSDictionary>>((uint64_t)&cf, result);
      if (v15)
      {
        uint64_t result = (const void ***)cf;
        if (*v2)
        {
          *(void *)a2 = cf;
          char v9 = 1;
          a2[8] = 1;
          goto LABEL_9;
        }
        if (cf) {
          CFRelease(cf);
        }
      }
      goto LABEL_16;
    }
    uint64_t v10 = v4;
    unint64_t v11 = 0;
  }
  int v4 = 0;
  uint64_t v5 = 0;
  WebKit::CoreIPCNSURLRequestData *v2 = 0;
  v2[1] = 0;
  uint64_t v13 = v2[3];
  if (!v13) {
    goto LABEL_17;
  }
  if (v10)
  {
    (*((void (**)(const void **, const void **, const void **))*v13 + 2))(v13, v11, v10);
LABEL_16:
    uint64_t v5 = *v2;
    int v4 = v2[1];
    goto LABEL_17;
  }
  int v4 = 0;
  uint64_t v5 = 0;
LABEL_17:
  WebKit::CoreIPCNSURLRequestData *v2 = 0;
  v2[1] = 0;
  uint64_t result = (const void ***)v2[3];
  if (result && v4) {
    uint64_t result = (const void ***)((uint64_t (*)(const void ***, const void **))(*result)[2])(result, v5);
  }
  char v9 = 0;
  *a2 = 0;
LABEL_9:
  a2[16] = v9;
  return result;
}

void IPC::Decoder::decode<WebKit::CoreIPCPersonNameComponents>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v46);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v44);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v42);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v40);
  int v4 = (WebKit::CoreIPCPersonNameComponents **)IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v38);
  unint64_t v5 = *((void *)a2 + 1);
  unint64_t v6 = *(WTF::StringImpl **)a2;
  unint64_t v7 = *((void *)a2 + 2) - *(void *)a2;
  if (v5 <= v7)
  {
    unint64_t v17 = 0;
    long long v18 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v19 = *((void *)a2 + 3);
    if (v19)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        long long v18 = *(WTF::StringImpl **)a2;
        unint64_t v17 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v17 = 0;
        long long v18 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned int v8 = (unsigned __int8 *)v6 + v7;
  *((void *)a2 + 2) = v8 + 1;
  if (!v6)
  {
    unint64_t v17 = v5;
    long long v18 = 0;
LABEL_11:
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v20 = *((void *)a2 + 3);
    if (v20)
    {
      if (v17)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
        unint64_t v6 = *(WTF::StringImpl **)a2;
        unint64_t v5 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        unint64_t v6 = 0;
      }
    }
    goto LABEL_12;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_12:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v21 = *((void *)a2 + 3);
    if (v21 && v5) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v21 + 16))(v21, v6);
    }
    goto LABEL_13;
  }
  if (!v9)
  {
    uint64_t v10 = 0;
    goto LABEL_15;
  }
  IPC::Decoder::decode<WebKit::CoreIPCPersonNameComponents>(&v48, a2);
  if (!v51)
  {
LABEL_13:
    unint64_t v6 = *(WTF::StringImpl **)a2;
    unint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    int v4 = (WebKit::CoreIPCPersonNameComponents **)*((void *)a2 + 3);
    if (v4) {
      goto LABEL_62;
    }
    goto LABEL_14;
  }
  int v4 = (WebKit::CoreIPCPersonNameComponents **)WTF::fastMalloc((WTF *)0x30);
  uint64_t v10 = v4;
  unint64_t v11 = (WebKit::CoreIPCPersonNameComponents *)v48;
  *(void *)&long long v48 = 0;
  *int v4 = v11;
  uint64_t v12 = (WebKit::CoreIPCPersonNameComponents *)*((void *)&v48 + 1);
  *((void *)&v48 + 1) = 0;
  v4[1] = v12;
  uint64_t v13 = (WebKit::CoreIPCPersonNameComponents *)v49;
  *(void *)&long long v49 = 0;
  v4[2] = v13;
  uint64_t v14 = (WebKit::CoreIPCPersonNameComponents *)*((void *)&v49 + 1);
  *((void *)&v49 + 1) = 0;
  v4[3] = v14;
  char v15 = (WebKit::CoreIPCPersonNameComponents *)v50;
  *(void *)&long long v50 = 0;
  unsigned char v4[4] = v15;
  unint64_t v16 = (WebKit::CoreIPCPersonNameComponents *)*((void *)&v50 + 1);
  *((void *)&v50 + 1) = 0;
  v4[5] = v16;
  if (v51) {
    WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents((WebKit::CoreIPCPersonNameComponents **)&v48);
  }
  unsigned int v9 = 0;
LABEL_15:
  while (1)
  {
    uint64_t v22 = *(WTF::StringImpl **)a2;
    if (!*(void *)a2) {
      break;
    }
    if (v47 && v45 && v43 && v41 && v39 && !v9)
    {
      uint64_t v23 = v46;
      if (v46) {
        *(_DWORD *)v46 += 2;
      }
      uint64_t v24 = v44;
      if (v44) {
        *(_DWORD *)v44 += 2;
      }
      int v25 = v42;
      if (v42) {
        *(_DWORD *)v42 += 2;
      }
      uint64_t v26 = v40;
      if (v40) {
        *(_DWORD *)v40 += 2;
      }
      uint64_t v27 = v38;
      if (v38) {
        *(_DWORD *)v38 += 2;
      }
      *(void *)a1 = v23;
      *(void *)(a1 + 8) = v24;
      long long v48 = 0u;
      long long v49 = 0u;
      *(void *)(a1 + 16) = v25;
      *(void *)(a1 + 24) = v26;
      long long v50 = 0u;
      *(void *)(a1 + 32) = v27;
      *(void *)(a1 + 40) = v10;
      *(unsigned char *)(a1 + 48) = 1;
      WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents((WebKit::CoreIPCPersonNameComponents **)&v48);
      goto LABEL_33;
    }
    __break(1u);
LABEL_62:
    if (v5) {
      int v4 = (WebKit::CoreIPCPersonNameComponents **)(*((uint64_t (**)(WebKit::CoreIPCPersonNameComponents **, WTF::StringImpl *))*v4
    }
                                                    + 2))(v4, v6);
LABEL_14:
    uint64_t v10 = 0;
    unsigned int v9 = 1;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (!v10) {
    LOBYTE(v9) = 1;
  }
  if ((v9 & 1) == 0)
  {
    WebKit::CoreIPCPersonNameComponents::~CoreIPCPersonNameComponents(v10);
    WTF::fastFree(v33, v34);
  }
LABEL_33:
  if (v39)
  {
    int v28 = v38;
    CFTypeRef v38 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, v6);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
  }
  if (v41)
  {
    CFTypeRef v29 = v40;
    char v40 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v6);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
  }
  if (v43)
  {
    uint64_t v30 = v42;
    char v42 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v6);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
  }
  if (v45)
  {
    unint64_t v31 = v44;
    uint64_t v44 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, v6);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
  if (v47)
  {
    char v32 = v46;
    int v46 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::destroy(v32, v6);
        if (v22) {
          return;
        }
        goto LABEL_68;
      }
      *(_DWORD *)v32 -= 2;
    }
  }
  if (v22) {
    return;
  }
LABEL_68:
  int v35 = *(WTF::StringImpl **)a2;
  uint64_t v36 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v37 = *((void *)a2 + 3);
  if (v37)
  {
    if (v36) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v37 + 16))(v37, v35);
    }
  }
}

void sub_1994C2890(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14, WTF::StringImpl *a15, char a16, WTF::StringImpl *a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a10 && a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a18 && a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::Decoder::decode<WebKit::CoreIPCDateComponents>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v31);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v29);
  unint64_t v5 = *((void *)a2 + 1);
  unint64_t v6 = *(char **)a2;
  unint64_t v7 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
  if (v5 >= v7 && v5 - v7 > 7)
  {
    unsigned int v9 = &v6[v7];
    uint64_t v10 = (uint64_t)&v6[v7 + 8];
    *((void *)a2 + 2) = v10;
    if (!v6)
    {
      unint64_t v23 = v5;
      uint64_t v24 = 0;
      goto LABEL_51;
    }
    unint64_t v2 = *(void *)v9;
    if (*(void *)v9)
    {
      if (v2 >> 61)
      {
        unint64_t v11 = v5;
        uint64_t v12 = v6;
        goto LABEL_10;
      }
      unint64_t v14 = ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v6;
      unint64_t v15 = 8 * v2;
      if (v5 < v14 || v5 - v14 < v15)
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v26 = *((void *)a2 + 3);
        if (!v26) {
          goto LABEL_10;
        }
        if (!v5) {
          goto LABEL_67;
        }
        uint64_t v24 = v6;
        unint64_t v23 = v5;
        goto LABEL_60;
      }
      unint64_t v17 = &v6[v14];
      *((void *)a2 + 2) = &v6[v14 + v15];
      if (v2 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1994C2D10);
      }
      uint64_t result = (WTF *)WTF::fastMalloc((WTF *)(8 * v2));
      uint64_t v18 = 0;
      do
      {
        *(void *)((char *)result + v18) = *(void *)&v17[v18];
        v18 += 8;
      }
      while (v15 != v18);
    }
    else
    {
      uint64_t result = 0;
    }
    int v19 = 0;
    goto LABEL_22;
  }
  while (1)
  {
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v25 = *((void *)a2 + 3);
    if (v25)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
        uint64_t v24 = *(char **)a2;
        unint64_t v23 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v24 = 0;
      }
    }
LABEL_51:
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v26 = *((void *)a2 + 3);
    if (v26)
    {
      if (v23)
      {
LABEL_60:
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v26 + 16))(v26, v24, v23);
        uint64_t v12 = *(char **)a2;
        unint64_t v11 = *((void *)a2 + 1);
      }
      else
      {
LABEL_67:
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
LABEL_10:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF *)*((void *)a2 + 3);
    if (!result
      || !v11
      || ((*(void (**)(WTF *, char *, unint64_t))(*(void *)result + 16))(result, v12, v11),
          unint64_t v6 = *(char **)a2,
          unint64_t v5 = *((void *)a2 + 1),
          uint64_t result = (WTF *)*((void *)a2 + 3),
          *(void *)a2 = 0,
          *((void *)a2 + 1) = 0,
          !result))
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 32) = 0;
      goto LABEL_32;
    }
    if (v5) {
      (*(void (**)(WTF *, char *))(*(void *)result + 16))(result, v6);
    }
    uint64_t result = 0;
    int v19 = 1;
LABEL_22:
    if (!*(void *)a2) {
      break;
    }
    if (!v19)
    {
      if (v2 != 14)
      {
        char v22 = 0;
        *(unsigned char *)a1 = 0;
        goto LABEL_29;
      }
      if (v32)
      {
        uint64_t v20 = v31;
        unint64_t v31 = 0;
        if (v30)
        {
          uint64_t v21 = v29;
          CFTypeRef v29 = 0;
          *(void *)a1 = v20;
          *(void *)(a1 + 8) = v21;
          *(void *)(a1 + 16) = result;
          *(void *)(a1 + 24) = 0xE0000000ELL;
          char v22 = 1;
          uint64_t result = 0;
LABEL_29:
          *(unsigned char *)(a1 + 32) = v22;
          goto LABEL_30;
        }
      }
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (v19) {
    goto LABEL_32;
  }
LABEL_30:
  if (result) {
    uint64_t result = (WTF *)WTF::fastFree(result, v6);
  }
LABEL_32:
  if (v30)
  {
    uint64_t result = v29;
    CFTypeRef v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (v32)
  {
    uint64_t result = v31;
    unint64_t v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v27 = *(char **)a2;
    uint64_t v28 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF *)*((void *)a2 + 3);
    if (result)
    {
      if (v28) {
        return (WTF *)(*(uint64_t (**)(WTF *, char *))(*(void *)result + 16))(result, v27);
      }
    }
  }
  return result;
}

void sub_1994C2D2C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, WTF::StringImpl *a11, char a12)
{
  std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100](v12, a2);
  _Unwind_Resume(a1);
}

void *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCData>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCData>>(IPC::Encoder *a1, unsigned __int8 *a2)
{
  int v4 = a2[8];
  uint64_t result = (void *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1994C2E48);
    }
    *(unsigned char *)uint64_t result = 1;
    if (a2[8])
    {
      return (void *)IPC::ArgumentCoder<WebKit::CoreIPCData,void>::encode(a1, (WebKit::CoreIPCData *)a2);
    }
    else
    {
      unint64_t v7 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::CoreIPCData>,void>::decode<IPC::Decoder>(v7, v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1994C2E68);
    }
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

void *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCData>,void>::decode<IPC::Decoder>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v11 = result[3];
    if (v11)
    {
      unint64_t v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        uint64_t result = v14;
        uint64_t v10 = *v14;
        unint64_t v9 = v14[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v9 = v3;
    uint64_t v10 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      uint64_t v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        uint64_t result = v13;
        uint64_t v4 = *v13;
        unint64_t v3 = v13[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      uint64_t result = IPC::Decoder::decode<WebKit::CoreIPCData>((IPC::Decoder *)result, &v15);
      char v8 = v16;
      if (v16)
      {
        *(void *)a2 = v15;
        char v8 = 1;
        *(unsigned char *)(a2 + 8) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 16) = v8;
    return result;
  }
LABEL_13:
  void *result = 0;
  result[1] = 0;
  uint64_t result = (void *)result[3];
  if (result && v3) {
    uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

void IPC::ArgumentCoder<std::optional<WebKit::CoreIPCArray>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCArray>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  unint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1994C30C0);
    }
    unsigned char *v5 = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      IPC::VectorArgumentCoder<false,WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      IPC::ArgumentCoder<std::optional<WebKit::CoreIPCArray>,void>::decode<IPC::Decoder>(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1994C30E0);
    }
    unsigned char *v5 = 0;
  }
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCArray>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = result[1];
  int v4 = (char *)*result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v13 = result[3];
    if (v13)
    {
      char v16 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        uint64_t result = v16;
        uint64_t v12 = *v16;
        unint64_t v11 = v16[1];
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v6 = &v4[v5];
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v11 = v3;
    uint64_t v12 = 0;
LABEL_12:
    unint64_t v3 = 0;
    int v4 = 0;
    void *result = 0;
    result[1] = 0;
    uint64_t v14 = result[3];
    if (v14)
    {
      uint64_t v15 = result;
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        uint64_t result = v15;
        int v4 = (char *)*v15;
        unint64_t v3 = v15[1];
      }
      else
      {
        unint64_t v3 = 0;
        int v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      uint64_t result = (uint64_t *)IPC::Decoder::decode<WebKit::CoreIPCArray>(result, v4, (uint64_t)&v17);
      if (v19)
      {
        *(void *)a2 = v17;
        uint64_t v9 = v18;
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        *(void *)(a2 + 8) = v9;
        char v10 = 1;
        *(unsigned char *)(a2 + 16) = 1;
        uint64_t result = (uint64_t *)WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v8);
      }
      else
      {
        char v10 = 0;
        *(unsigned char *)a2 = 0;
      }
      *(unsigned char *)(a2 + 24) = v10;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 16) = 0;
      *(unsigned char *)(a2 + 24) = 1;
    }
    return result;
  }
LABEL_13:
  void *result = 0;
  result[1] = 0;
  uint64_t result = (uint64_t *)result[3];
  if (result && v3) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, char *))(*result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::CoreIPCError>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCError>>(IPC::Encoder *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 32))
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (*(unsigned char *)(a2 + 32))
    {
      return IPC::ArgumentCoder<WebKit::CoreIPCError,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::CoreIPCError>,void>::decode<IPC::Decoder>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::CoreIPCError>,void>::decode<IPC::Decoder>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<BOOL>(a2);
  if ((unsigned __int16)result <= 0xFFu)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 40) = 0;
  }
  else
  {
    if ((_BYTE)result)
    {
      IPC::Decoder::decode<WebKit::CoreIPCError>(a2, (uint64_t)v8);
      char v5 = v10;
      if (v10)
      {
        uint64_t v6 = v8[1];
        *(void *)a1 = v8[0];
        *(void *)(a1 + 8) = v6;
        long long v7 = v9;
        v8[0] = 0;
        long long v9 = 0uLL;
        *(_OWORD *)(a1 + 16) = v7;
        char v5 = 1;
        *(unsigned char *)(a1 + 32) = 1;
      }
      else
      {
        *(unsigned char *)a1 = 0;
      }
    }
    else
    {
      LOBYTE(v8[0]) = 0;
      char v10 = 0;
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 32) = 0;
      char v5 = 1;
    }
    *(unsigned char *)(a1 + 40) = v5;
    return std::__optional_destruct_base<WebKit::CoreIPCError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCLocale>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCLocale>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  uint64_t result = (WTF::StringImpl *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1994C347CLL);
    }
    *(unsigned char *)uint64_t result = 1;
    if (*(unsigned char *)(a2 + 8))
    {
      return IPC::ArgumentCoder<WebKit::CoreIPCLocale,void>::encode(a1, (WTF::StringImpl **)a2);
    }
    else
    {
      long long v7 = (WTF::StringImpl *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::CoreIPCLocale>,void>::decode<IPC::Decoder>(v7, v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1994C349CLL);
    }
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCLocale>,void>::decode<IPC::Decoder>@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *((void *)result + 1);
  uint64_t v4 = *(void *)result;
  unint64_t v5 = *((void *)result + 2) - *(void *)result;
  if (v3 <= v5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v11 = *((void *)result + 3);
    if (v11)
    {
      uint64_t v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        uint64_t result = v14;
        uint64_t v10 = *(void *)v14;
        unint64_t v9 = *((void *)v14 + 1);
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  *((void *)result + 2) = v6 + 1;
  if (!v4)
  {
    unint64_t v9 = v3;
    uint64_t v10 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v12 = *((void *)result + 3);
    if (v12)
    {
      uint64_t v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        uint64_t result = v13;
        uint64_t v4 = *(void *)v13;
        unint64_t v3 = *((void *)v13 + 1);
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      uint64_t result = IPC::Decoder::decode<WebKit::CoreIPCLocale>(result, &v15);
      char v8 = v16;
      if (v16)
      {
        *(void *)a2 = v15;
        char v8 = 1;
        *(unsigned char *)(a2 + 8) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 16) = v8;
    return result;
  }
LABEL_13:
  *(void *)uint64_t result = 0;
  *((void *)result + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)result + 3);
  if (result && v3) {
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNumber>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCNumber>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  uint64_t result = (uint64_t *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1994C36F4);
    }
    *(unsigned char *)uint64_t result = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      return (uint64_t *)IPC::ArgumentCoder<WebKit::CoreIPCNumber,void>::encode(a1, (void *)a2);
    }
    else
    {
      unsigned int v7 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNumber>,void>::decode<IPC::Decoder>(v7, v8);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1994C3714);
    }
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCNumber>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t *result = 0;
    result[1] = 0;
    uint64_t v11 = result[3];
    if (v11)
    {
      uint64_t v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        uint64_t result = v14;
        uint64_t v10 = *v14;
        unint64_t v9 = v14[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v9 = v3;
    uint64_t v10 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t *result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      uint64_t v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        uint64_t result = v13;
        uint64_t v4 = *v13;
        unint64_t v3 = v13[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      uint64_t result = (uint64_t *)IPC::Decoder::decode<WebKit::CoreIPCNumber>(result, &v15);
      char v8 = v16;
      if (v16)
      {
        *(_OWORD *)a2 = v15;
        char v8 = 1;
        *(unsigned char *)(a2 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 16) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 24) = v8;
    return result;
  }
LABEL_13:
  uint64_t *result = 0;
  result[1] = 0;
  uint64_t result = (uint64_t *)result[3];
  if (result && v3) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCString>,void>::decode<IPC::Decoder>@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *((void *)result + 1);
  uint64_t v4 = *(void *)result;
  unint64_t v5 = *((void *)result + 2) - *(void *)result;
  if (v3 <= v5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v11 = *((void *)result + 3);
    if (v11)
    {
      uint64_t v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        uint64_t result = v14;
        uint64_t v10 = *(void *)v14;
        unint64_t v9 = *((void *)v14 + 1);
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  *((void *)result + 2) = v6 + 1;
  if (!v4)
  {
    unint64_t v9 = v3;
    uint64_t v10 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v12 = *((void *)result + 3);
    if (v12)
    {
      uint64_t v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        uint64_t result = v13;
        uint64_t v4 = *(void *)v13;
        unint64_t v3 = *((void *)v13 + 1);
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      uint64_t result = IPC::Decoder::decode<WebKit::CoreIPCString>(result, (uint64_t)&v15);
      char v8 = v16;
      if (v16)
      {
        *(void *)a2 = v15;
        char v8 = 1;
        *(unsigned char *)(a2 + 8) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 16) = v8;
    return result;
  }
LABEL_13:
  *(void *)uint64_t result = 0;
  *((void *)result + 1) = 0;
  uint64_t result = (WTF::StringImpl *)*((void *)result + 3);
  if (result && v3) {
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::CoreIPCPresentationIntent>,void>::decode<IPC::Decoder>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = (WTF::StringImpl *)*a1;
  unint64_t v6 = a1[2] - *a1;
  if (v4 <= v6)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v16 = a1[3];
    if (v16)
    {
      char v19 = v2;
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
        unint64_t v2 = v19;
        uint64_t v15 = *v19;
        unint64_t v14 = v19[1];
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_12;
  }
  unsigned int v7 = (unsigned __int8 *)v5 + v6;
  a1[2] = v7 + 1;
  if (!v5)
  {
    unint64_t v14 = v4;
    uint64_t v15 = 0;
LABEL_12:
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    void *v2 = 0;
    v2[1] = 0;
    uint64_t v17 = v2[3];
    if (v17)
    {
      uint64_t v18 = v2;
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v15, v14);
        unint64_t v2 = v18;
        unint64_t v5 = (WTF::StringImpl *)*v18;
        unint64_t v4 = v18[1];
      }
      else
      {
        unint64_t v4 = 0;
        unint64_t v5 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v8 = *v7;
  if (v8 < 2)
  {
    if (v8)
    {
      IPC::Decoder::decode<WebKit::CoreIPCPresentationIntent>((uint64_t)&v20, (IPC::Decoder *)a1);
      char v9 = v27;
      if (v27)
      {
        long long v10 = v21;
        *(_OWORD *)a2 = v20;
        *(_OWORD *)(a2 + 16) = v10;
        *(void *)&long long v21 = 0;
        *(void *)(a2 + 32) = v22;
        uint64_t v11 = v23;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        *(void *)(a2 + 40) = v11;
        *(_OWORD *)(a2 + 48) = v24;
        uint64_t v12 = v25;
        uint64_t v25 = 0;
        *(void *)(a2 + 64) = v12;
        *(_OWORD *)(a2 + 72) = v26;
        char v9 = 1;
        *(unsigned char *)(a2 + 88) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      LOBYTE(v20) = 0;
      char v27 = 0;
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 88) = 0;
      char v9 = 1;
    }
    *(unsigned char *)(a2 + 96) = v9;
    return std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v20, v5);
  }
LABEL_13:
  void *v2 = 0;
  v2[1] = 0;
  uint64_t result = v2[3];
  if (result && v4) {
    uint64_t result = (*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(void *)result + 16))(result, v5);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 96) = 0;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::CoreIPCPresentationIntent>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v67 = IPC::Decoder::decode<long long>(a2);
  char v70 = v5;
  unint64_t v66 = IPC::Decoder::decode<long long>(a2);
  char v69 = v6;
  unint64_t v7 = *((void *)a2 + 1);
  uint64_t v8 = *(void *)a2;
  unint64_t v9 = *((void *)a2 + 2) - *(void *)a2;
  if (v7 <= v9)
  {
    unint64_t v54 = 0;
    uint64_t v55 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v56 = *((void *)a2 + 3);
    if (v56)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v56 + 16))(v56);
        uint64_t v55 = *(void *)a2;
        unint64_t v54 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v54 = 0;
        uint64_t v55 = 0;
      }
    }
    goto LABEL_59;
  }
  long long v10 = (unsigned __int8 *)(v8 + v9);
  *((void *)a2 + 2) = v10 + 1;
  if (!v8)
  {
    unint64_t v54 = v7;
    uint64_t v55 = 0;
LABEL_59:
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v57 = *((void *)a2 + 3);
    if (!v57) {
      goto LABEL_60;
    }
    if (v54)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v57 + 16))(v57, v55, v54);
      uint64_t v8 = *(void *)a2;
      unint64_t v7 = *((void *)a2 + 1);
      goto LABEL_60;
    }
    goto LABEL_86;
  }
  unsigned int v11 = *v10;
  if (v11 >= 2) {
    goto LABEL_60;
  }
  if (v11)
  {
    IPC::Decoder::decode<WebKit::CoreIPCPresentationIntent>(&v76, a2);
    if (!v84)
    {
      LOBYTE(v74) = 0;
      char v75 = 0;
      std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v76, v12);
      goto LABEL_9;
    }
    uint64_t v13 = WTF::fastMalloc((WTF *)0x58);
    *(_OWORD *)uint64_t v13 = v76;
    unint64_t v14 = v77;
    unsigned int v77 = 0;
    *(void *)(v13 + 16) = v14;
    unint64_t v15 = v78;
    *(void *)(v13 + 32) = 0;
    *(void *)(v13 + 40) = 0;
    *(void *)(v13 + 24) = v15;
    uint64_t v16 = v79;
    uint64_t v79 = 0;
    *(void *)(v13 + 32) = v16;
    LODWORD(v16) = v80;
    LODWORD(v80) = 0;
    *(_DWORD *)(v13 + 40) = v16;
    LODWORD(v16) = HIDWORD(v80);
    HIDWORD(v80) = 0;
    *(_DWORD *)(v13 + 44) = v16;
    *(_OWORD *)(v13 + 48) = v81;
    uint64_t v17 = v82;
    uint64_t v82 = 0;
    *(void *)(v13 + 64) = v17;
    *(_OWORD *)(v13 + 72) = v83;
    uint64_t v72 = 0;
    int v74 = (WTF::StringImpl *)v13;
    char v75 = 1;
    std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100](&v72, 0);
    std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v76, v18);
  }
  else
  {
    int v74 = 0;
    char v75 = 1;
  }
  while (1)
  {
    unint64_t v65 = IPC::Decoder::decode<long long>(a2);
    char v68 = v22;
    unint64_t v23 = *((void *)a2 + 1);
    uint64_t v24 = *(void *)a2;
    unint64_t v25 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
    if (v23 < v25 || v23 - v25 <= 7)
    {
      unint64_t v59 = 0;
      uint64_t v60 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v61 = *((void *)a2 + 3);
      if (v61)
      {
        if (v23)
        {
          (*(void (**)(uint64_t))(*(void *)v61 + 16))(v61);
          uint64_t v60 = *(void *)a2;
          unint64_t v59 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v59 = 0;
          uint64_t v60 = 0;
        }
      }
LABEL_63:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v62 = *((void *)a2 + 3);
      if (v62 && v59) {
        goto LABEL_73;
      }
      goto LABEL_15;
    }
    long long v26 = (unint64_t *)(v24 + v25);
    uint64_t v27 = v24 + v25 + 8;
    *((void *)a2 + 2) = v27;
    if (!v24)
    {
      unint64_t v59 = v23;
      uint64_t v60 = 0;
      goto LABEL_63;
    }
    unint64_t v2 = *v26;
    if (!*v26)
    {
      unint64_t v31 = 0;
LABEL_24:
      int v71 = 0;
      goto LABEL_25;
    }
    if (v2 >> 61) {
      goto LABEL_15;
    }
    unint64_t v32 = ((v27 + 7) & 0xFFFFFFFFFFFFFFF8) - v24;
    if (v23 >= v32)
    {
      uint64_t v33 = 8 * v2;
      if (v23 - v32 >= 8 * v2)
      {
        uint64_t v34 = v24 + v32;
        *((void *)a2 + 2) = v24 + v32 + v33;
        if (v2 >> 29)
        {
          __break(0xC471u);
          goto LABEL_85;
        }
        uint64_t v35 = WTF::fastMalloc((WTF *)(8 * v2));
        unint64_t v31 = (WTF *)v35;
        uint64_t v36 = 0;
        do
        {
          *(void *)(v35 + v36) = *(void *)(v34 + v36);
          v36 += 8;
        }
        while (v33 != v36);
        goto LABEL_24;
      }
    }
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v62 = *((void *)a2 + 3);
    if (v62 && v23)
    {
      uint64_t v60 = v24;
      unint64_t v59 = v23;
LABEL_73:
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v62 + 16))(v62, v60, v59);
    }
LABEL_15:
    uint64_t v28 = *(void *)a2;
    uint64_t v29 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v30 = *((void *)a2 + 3);
    if (!v30 || !v29) {
      goto LABEL_16;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v28);
    unint64_t v31 = 0;
    uint64_t v51 = *(void *)a2;
    uint64_t v52 = *((void *)a2 + 1);
    uint64_t v53 = *((void *)a2 + 3);
    int v71 = 1;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    if (v53 && v52)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v53 + 16))(v53, v51);
LABEL_16:
      unint64_t v31 = 0;
      int v71 = 1;
    }
LABEL_25:
    unint64_t v37 = IPC::Decoder::decode<long long>(a2);
    char v39 = v38;
    unint64_t v40 = IPC::Decoder::decode<long long>(a2);
    char v42 = v41;
    IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v72);
    unint64_t v43 = IPC::Decoder::decode<long long>(a2);
    char v45 = v44;
    uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<long long>(a2);
    if (!*(void *)a2)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 88) = 0;
      goto LABEL_39;
    }
    if (v70 && v69 && v75 && v68 && !v71 && v39 && v42 && v73 && v45 && (_BYTE)v47) {
      break;
    }
LABEL_85:
    __break(1u);
LABEL_86:
    unint64_t v7 = 0;
    uint64_t v8 = 0;
LABEL_60:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v58 = *((void *)a2 + 3);
    if (v58 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v58 + 16))(v58, v8);
    }
    LOBYTE(v74) = 0;
    char v75 = 0;
LABEL_9:
    uint64_t v19 = *(void *)a2;
    uint64_t v20 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v21 = *((void *)a2 + 3);
    if (v21 && v20) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19);
    }
  }
  *(void *)&long long v76 = v67;
  *((void *)&v76 + 1) = v66;
  long long v48 = v74;
  int v74 = 0;
  unint64_t v78 = v65;
  *(void *)&long long v81 = v37;
  *((void *)&v81 + 1) = v40;
  long long v49 = v72;
  if (v72) {
    *(_DWORD *)v72 += 2;
  }
  *(void *)&long long v83 = v43;
  *((void *)&v83 + 1) = result;
  *(_OWORD *)a1 = v76;
  *(void *)(a1 + 16) = v48;
  *(void *)(a1 + 24) = v65;
  unsigned int v77 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  *(void *)(a1 + 32) = v31;
  *(_DWORD *)(a1 + 40) = v2;
  *(_DWORD *)(a1 + 44) = v2;
  *(_OWORD *)(a1 + 48) = v81;
  *(void *)(a1 + 64) = v49;
  *(_OWORD *)(a1 + 72) = v83;
  *(unsigned char *)(a1 + 88) = 1;
  uint64_t v82 = 0;
  uint64_t result = (WTF::StringImpl *)std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100](&v77, 0);
  unint64_t v31 = 0;
LABEL_39:
  if (v73)
  {
    uint64_t result = v72;
    uint64_t v72 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v47);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  char v50 = v71;
  if (!v31) {
    char v50 = 1;
  }
  if ((v50 & 1) == 0) {
    uint64_t result = (WTF::StringImpl *)WTF::fastFree(v31, v47);
  }
  if (v75) {
    uint64_t result = (WTF::StringImpl *)std::unique_ptr<WebKit::CoreIPCPresentationIntent>::reset[abi:sn180100](&v74, 0);
  }
  if (!*(unsigned char *)(a1 + 88))
  {
    uint64_t v63 = *(void *)a2;
    uint64_t v64 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a2 + 3);
    if (result)
    {
      if (v64) {
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)result + 16))(result, v63);
      }
    }
  }
  return result;
}

void sub_1994C42EC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, WTF::StringImpl *a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  std::__optional_destruct_base<WebKit::CoreIPCPresentationIntent,false>::~__optional_destruct_base[abi:sn180100](v30, a2);
  _Unwind_Resume(a1);
}

unsigned char *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCColor>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCColor>>(IPC::Encoder *a1, unsigned __int8 *a2)
{
  int v4 = a2[8];
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1994C4428);
    }
    unsigned char *result = 1;
    if (a2[8])
    {
      WebCore::Color::data(v8, (WebCore::Color *)a2);
      return IPC::ArgumentCoder<std::optional<WebCore::ColorDataForIPC>,void>::encode<IPC::Encoder,std::optional<WebCore::ColorDataForIPC>>(a1, (char *)v8);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)IPC::VectorArgumentCoder<false,WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1994C4448);
    }
    unsigned char *result = 0;
  }
  return result;
}

void IPC::VectorArgumentCoder<false,WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  if (v4)
  {
    char v5 = *(WebCore::Color ***)a2;
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5++;
      IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(a1, v7);
      v6 -= 8;
    }
    while (v6);
  }
}

uint64_t IPC::VectorArgumentCoder<false,WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v29 = a1[3];
    if (v29)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v29 + 16))(v29, v6, v5);
        uint64_t v28 = *a1;
        unint64_t v27 = a1[1];
      }
      else
      {
        unint64_t v27 = 0;
        uint64_t v28 = 0;
      }
    }
    goto LABEL_33;
  }
  unint64_t v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v6)
  {
    unint64_t v27 = v5;
    uint64_t v28 = 0;
LABEL_33:
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result)
    {
      if (v27) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v28);
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return result;
  }
  unint64_t v10 = *v9;
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  if (v10 < 0x20000)
  {
    if (!v10)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
LABEL_20:
      unint64_t v37 = 0;
      uint64_t v38 = 0;
      *(void *)a3 = v18;
      *(void *)(a3 + 8) = v19;
      goto LABEL_21;
    }
    LODWORD(v38) = v10;
    unint64_t v37 = (WTF *)WTF::fastMalloc((WTF *)(8 * v10));
    while (1)
    {
      IPC::Decoder::decode<WebKit::CoreIPCNSCFObject>(&v35, a1);
      if (!v36) {
        goto LABEL_30;
      }
      int v11 = HIDWORD(v38);
      if (HIDWORD(v38) != v38) {
        break;
      }
      uint64_t v12 = (uint64_t *)WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, HIDWORD(v38) + 1, (unint64_t)&v35);
      uint64_t v13 = HIDWORD(v38);
      int v14 = HIDWORD(v38) + 1;
      unint64_t v15 = v37;
      uint64_t v16 = *v12;
      *uint64_t v12 = 0;
      *((void *)v15 + v13) = v16;
      HIDWORD(v38) = v14;
      if (v36) {
        goto LABEL_15;
      }
LABEL_17:
      if (!--v10)
      {
        uint64_t v18 = v37;
        uint64_t v19 = v38;
        goto LABEL_20;
      }
    }
    uint64_t v17 = v35;
    uint64_t v35 = 0;
    *((void *)v37 + HIDWORD(v38)) = v17;
    HIDWORD(v38) = v11 + 1;
LABEL_15:
    a2 = v35;
    uint64_t v35 = 0;
    if (a2) {
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&v35, (uint64_t)a2);
    }
    goto LABEL_17;
  }
  do
  {
    uint64_t result = IPC::Decoder::decode<WebKit::CoreIPCNSCFObject>(&v35, a1);
    if (!v36)
    {
LABEL_30:
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 16) = 0;
      return WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, a2);
    }
    int v20 = HIDWORD(v38);
    if (HIDWORD(v38) == v38)
    {
      uint64_t result = WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, HIDWORD(v38) + 1, (unint64_t)&v35);
      uint64_t v22 = HIDWORD(v38);
      int v23 = HIDWORD(v38) + 1;
      uint64_t v24 = v37;
      uint64_t v25 = *(void *)result;
      *(void *)uint64_t result = 0;
      *((void *)v24 + v22) = v25;
      HIDWORD(v38) = v23;
      if (!v36) {
        goto LABEL_28;
      }
    }
    else
    {
      long long v26 = v35;
      uint64_t v35 = 0;
      *((void *)v37 + HIDWORD(v38)) = v26;
      HIDWORD(v38) = v20 + 1;
    }
    a2 = v35;
    uint64_t v35 = 0;
    if (a2) {
      uint64_t result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&v35, (uint64_t)a2);
    }
LABEL_28:
    --v10;
  }
  while (v10);
  uint64_t v30 = HIDWORD(v38);
  unint64_t v31 = v37;
  if (v38 <= HIDWORD(v38)) {
    goto LABEL_45;
  }
  unint64_t v32 = v37;
  if (!HIDWORD(v38)) {
    goto LABEL_40;
  }
  if (HIDWORD(v38) >> 29)
  {
    __break(0xC471u);
  }
  else
  {
    uint64_t v33 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v38)));
    LODWORD(v38) = v30;
    unint64_t v37 = v33;
    unint64_t v32 = v31;
    if (v33 != v31)
    {
      WTF::VectorMover<false,WebKit::CoreIPCNSCFObject>::move((uint64_t)v31, (uint64_t *)v31 + v30, (uint64_t *)v33);
      unint64_t v32 = v37;
    }
LABEL_40:
    if (v31)
    {
      if (v32 == v31)
      {
        unint64_t v37 = 0;
        LODWORD(v38) = 0;
      }
      WTF::fastFree(v31, a2);
      unint64_t v31 = v37;
    }
    else
    {
      unint64_t v31 = v32;
    }
LABEL_45:
    *(void *)a3 = v31;
    uint64_t v34 = v38;
    unint64_t v37 = 0;
    uint64_t v38 = 0;
    *(void *)(a3 + 8) = v34;
LABEL_21:
    *(unsigned char *)(a3 + 16) = 1;
    return WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, a2);
  }
  return result;
}

void sub_1994C47C0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10, int a11, char a12)
{
  if (a10)
  {
    a2 = a9;
    a9 = 0;
    if (a2) {
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&a9, (uint64_t)a2);
    }
  }
  WTF::Vector<WebKit::CoreIPCNSCFObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WebKit::CoreIPCNSCFObject>(uint64_t a1, uint64_t *a2, __n128 a3)
{
  IPC::ArgumentCoder<WTF::UniqueRef<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>,void>::decode(a2, a2, &v15, a3);
  if (!v16)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v9 = a2[3];
    if (v9) {
      BOOL v10 = v8 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
      if (*a2) {
        goto LABEL_23;
      }
    }
    goto LABEL_12;
  }
  if (!*a2
    || (((uint64_t (*)(uint64_t *, uint64_t))WebKit::CoreIPCNSCFObject::valueIsAllowed)(a2, v15) & 1) == 0)
  {
LABEL_12:
    LOBYTE(v5) = 0;
    goto LABEL_13;
  }
  uint64_t v5 = *a2;
  if (*a2)
  {
    if (v16)
    {
      int v6 = 0;
      uint64_t v5 = v15;
      uint64_t v15 = 0;
      *(void *)a1 = v5;
      LOBYTE(v5) = 1;
      goto LABEL_14;
    }
LABEL_23:
    __break(1u);
    return;
  }
LABEL_13:
  *(unsigned char *)a1 = 0;
  int v6 = 1;
LABEL_14:
  *(unsigned char *)(a1 + 8) = v5;
  if (v16)
  {
    uint64_t v11 = v15;
    uint64_t v15 = 0;
    if (v11) {
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&v15, v11);
    }
  }
  if (v6)
  {
    uint64_t v12 = *a2;
    uint64_t v13 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14)
    {
      if (v13) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12);
      }
    }
  }
}

void sub_1994C4940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a10)
  {
    uint64_t v11 = a9;
    a9 = 0;
    if (v11) {
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&a9, v11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::optional<WebKit::CoreIPCCFURL>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCCFURL>>(IPC::Encoder *a1, WebKit::CoreIPCCFURL *a2)
{
  int v2 = (int)a1;
  if (*((unsigned char *)a2 + 8))
  {
    char v6 = 1;
    IPC::Encoder::operator<<<BOOL>(a1, &v6);
    if (*((unsigned char *)a2 + 8))
    {
      return IPC::ArgumentCoder<WebKit::CoreIPCCFURL,void>::encode(v2, a2);
    }
    else
    {
      uint64_t v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::optional<WebKit::CoreIPCCFURL>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::CoreIPCCFURL>>(v5);
    }
  }
  else
  {
    char v7 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v7);
  }
}

void *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCCFURL>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::CoreIPCCFURL>>(void *result, WebKit::CoreIPCCFURL *a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (*((unsigned char *)a2 + 8))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!*((unsigned char *)a2 + 8))
      {
        uint64_t v4 = (unsigned char *)std::__throw_bad_optional_access[abi:sn180100]();
        return IPC::ArgumentCoder<std::optional<WebKit::CoreIPCCFURL>,void>::decode<IPC::Decoder>(v4, v5);
      }
    }
    return (void *)IPC::ArgumentCoder<WebKit::CoreIPCCFURL,void>::encode((int)result, a2);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

void *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCCFURL>,void>::decode<IPC::Decoder>(unsigned char *a1, void *a2)
{
  uint64_t result = (void *)IPC::Decoder::decode<BOOL>(a2);
  if ((unsigned __int16)result <= 0xFFu)
  {
    *a1 = 0;
    a1[16] = 0;
  }
  else
  {
    if ((_BYTE)result)
    {
      uint64_t result = IPC::Decoder::decode<WebKit::CoreIPCCFURL>(&v6, a2);
      char v5 = v7;
      if (v7)
      {
        *(void *)a1 = v6;
        char v5 = 1;
        a1[8] = 1;
      }
      else
      {
        *a1 = 0;
      }
    }
    else
    {
      *a1 = 0;
      a1[8] = 0;
      char v5 = 1;
    }
    a1[16] = v5;
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCDateComponents>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCDateComponents> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 32);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1994C4B94);
    }
    unsigned char *result = 1;
    if (!*(unsigned char *)(a2 + 32))
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      JUMPOUT(0x1994C4BBCLL);
    }
    return (unsigned char *)IPC::ArgumentCoder<WebKit::CoreIPCDateComponents,void>::encode(a1, a2);
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1994C4BB4);
    }
    unsigned char *result = 0;
  }
  return result;
}

void IPC::Decoder::decode<WebKit::CoreIPCContactLabeledValue>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v52);
  IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v50);
  unint64_t v4 = *((void *)a2 + 1);
  char v5 = *(WTF::StringImpl **)a2;
  unint64_t v6 = *((void *)a2 + 2) - *(void *)a2;
  if (v4 <= v6) {
    goto LABEL_57;
  }
  char v7 = (char *)v5 + v6;
  *((void *)a2 + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v29 = v4;
    uint64_t v30 = 0;
    goto LABEL_58;
  }
  unsigned int v8 = *v7;
  if (v8 < 4)
  {
    if (!*v7)
    {
      IPC::Decoder::decode<WebKit::CoreIPCDateComponents>((uint64_t)v36, a2);
      if ((_BYTE)v38)
      {
        long long v16 = *(_OWORD *)v36;
        v36[0] = 0;
        v36[1] = 0;
        long long v43 = v16;
        *(void *)&long long v16 = *((void *)&v37 + 1);
        *(void *)&long long v44 = v37;
        long long v37 = 0uLL;
        *((void *)&v44 + 1) = v16;
        int v14 = 1;
        int v48 = 0;
      }
      else
      {
        int v14 = 0;
        LOBYTE(v43) = 0;
      }
      unsigned __int8 v49 = v14;
      std::__optional_destruct_base<WebKit::CoreIPCDateComponents,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36, v15);
LABEL_26:
      if (!v14) {
        goto LABEL_5;
      }
      goto LABEL_27;
    }
    if (v8 == 1)
    {
      IPC::Decoder::decode<WebKit::CoreIPCCNPhoneNumber>((uint64_t)v36, a2);
      if ((_BYTE)v37)
      {
        long long v13 = *(_OWORD *)v36;
        v36[0] = 0;
        v36[1] = 0;
        long long v43 = v13;
        int v14 = 1;
        int v48 = 1;
      }
      else
      {
        int v14 = 0;
        LOBYTE(v43) = 0;
      }
      unsigned __int8 v49 = v14;
      std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36, v12);
      goto LABEL_26;
    }
    if (v8 == 2)
    {
      IPC::Decoder::decode<WebKit::CoreIPCCNPostalAddress>((uint64_t)v36, a2);
      if (v41)
      {
        long long v17 = *(_OWORD *)v36;
        long long v18 = v37;
        *(_OWORD *)char v36 = 0u;
        long long v37 = 0u;
        long long v43 = v17;
        long long v44 = v18;
        long long v19 = v38;
        long long v20 = v39;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v45 = v19;
        long long v46 = v20;
        uint64_t v21 = v40;
        uint64_t v40 = 0;
        uint64_t v47 = v21;
        int v48 = 2;
        WebKit::CoreIPCCNPostalAddress::~CoreIPCCNPostalAddress((WebKit::CoreIPCCNPostalAddress *)v36, v9);
LABEL_19:
        int v14 = 1;
LABEL_25:
        unsigned __int8 v49 = v14;
        goto LABEL_26;
      }
    }
    else
    {
      IPC::Decoder::decode<WebKit::CoreIPCString>(a2, (uint64_t)v36);
      if (LOBYTE(v36[1]))
      {
        *(WTF::StringImpl **)&long long v43 = v36[0];
        int v48 = 3;
        goto LABEL_19;
      }
    }
    int v14 = 0;
    LOBYTE(v43) = 0;
    goto LABEL_25;
  }
  while (1)
  {
    LOBYTE(v43) = 0;
    unsigned __int8 v49 = 0;
LABEL_5:
    uint64_t v9 = *(WTF::StringImpl **)a2;
    uint64_t v10 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v11 = *((void *)a2 + 3);
    if (v11 && v10) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v11 + 16))(v11, v9);
    }
LABEL_27:
    if (!*(void *)a2)
    {
      *a1 = 0;
      a1[96] = 0;
      goto LABEL_41;
    }
    char v5 = (WTF::StringImpl *)v53;
    if (v53)
    {
      uint64_t v22 = v52;
      uint64_t v52 = 0;
      v36[0] = v22;
      char v5 = (WTF::StringImpl *)v51;
      if (v51)
      {
        int v23 = v50;
        char v50 = 0;
        v36[1] = v23;
        char v5 = (WTF::StringImpl *)v49;
        if (v49) {
          break;
        }
      }
    }
    __break(1u);
LABEL_57:
    unint64_t v29 = 0;
    uint64_t v30 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v31 = *((void *)a2 + 3);
    if (v31)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v31 + 16))(v31, v5, v4);
        uint64_t v30 = *(WTF::StringImpl **)a2;
        unint64_t v29 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v29 = 0;
        uint64_t v30 = 0;
      }
    }
LABEL_58:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v32 = *((void *)a2 + 3);
    if (v32 && v29) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v32 + 16))(v32, v30);
    }
  }
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v37, (uint64_t)&v43);
  long long v24 = *(_OWORD *)v36;
  v36[0] = 0;
  v36[1] = 0;
  *(_OWORD *)a1 = v24;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCDateComponents,WebKit::CoreIPCCNPhoneNumber,WebKit::CoreIPCCNPostalAddress,WebKit::CoreIPCString>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(a1 + 16), (uint64_t)&v37);
  a1[96] = 1;
  if (v42 != -1) {
    ((void (*)(char *, long long *))off_1EEA104E0[v42])(&v54, &v37);
  }
  int v42 = -1;
  uint64_t v25 = v36[1];
  v36[1] = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v9);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  long long v26 = v36[0];
  v36[0] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v9);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
LABEL_41:
  if (v49 && v48 != -1) {
    ((void (*)(WTF::StringImpl **, long long *))off_1EEA104E0[v48])(v36, &v43);
  }
  if (v51)
  {
    unint64_t v27 = v50;
    char v50 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, v9);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }
  if (v53)
  {
    uint64_t v28 = v52;
    uint64_t v52 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, v9);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
  }
  if (!a1[96])
  {
    uint64_t v33 = *(WTF::StringImpl **)a2;
    uint64_t v34 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v35 = *((void *)a2 + 3);
    if (v35)
    {
      if (v34) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v35 + 16))(v35, v33);
      }
    }
  }
}

void sub_1994C5134(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,int a32,char a33)
{
  std::__optional_destruct_base<WebKit::CoreIPCContactLabeledValue,false>::~__optional_destruct_base[abi:sn180100](v33, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebKit::CoreIPCContactLabeledValue,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 88);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_1EEA104E0[v3])(&v7, a1 + 16);
    }
    *(_DWORD *)(a1 + 88) = -1;
    unint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    char v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

void *IPC::ArgumentCoder<std::optional<std::span<unsigned char const,18446744073709551615ul>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<std::span<unsigned char const,18446744073709551615ul>>>(void *result, uint64_t a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (!*(unsigned char *)(a2 + 16))
  {
    if (v2 < v3)
    {
      *(unsigned char *)(*result + v2) = 0;
      result[2] = v2 + 1;
      return result;
    }
LABEL_12:
    result[1] = 0;
    return result;
  }
  if (v2 >= v3)
  {
    result[1] = 0;
    goto LABEL_4;
  }
  *(unsigned char *)(*result + v2) = 1;
  result[2] = v2 + 1;
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t result = (void *)std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_12;
  }
LABEL_4:
  size_t v4 = *(void *)(a2 + 8);
  char v5 = *(const void **)a2;

  return IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(result, v5, v4);
}

unint64_t IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    unint64_t v6 = *(void **)a2;
    char v7 = &v6[2 * v5];
    do
    {
      IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(a1, *v6);
      unint64_t result = IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL> const&>(a1, v6[1]);
      v6 += 2;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  unint64_t v6 = a1[1];
  uint64_t v7 = *a1;
  unint64_t v8 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v6 < v8 || v6 - v8 <= 7)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v26 = a1[3];
    if (v26)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v26 + 16))(v26, v7, v6);
        uint64_t v25 = *a1;
        uint64_t v24 = a1[1];
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
      }
    }
    goto LABEL_28;
  }
  uint64_t v10 = (unint64_t *)(v7 + v8);
  a1[2] = (uint64_t)(v10 + 1);
  if (!v7)
  {
    uint64_t v24 = v6;
    uint64_t v25 = 0;
LABEL_28:
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result)
    {
      if (v24) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v25);
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return result;
  }
  unint64_t v11 = *v10;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  if (v11 >= 0x10000)
  {
    do
    {
      IPC::Decoder::decode<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>((uint64_t)&v32, a1, a4);
      if (!v34) {
        goto LABEL_24;
      }
      if (HIDWORD(v36) == v36)
      {
        WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>((uint64_t)&v35, (unint64_t)&v32);
      }
      else
      {
        int v19 = HIDWORD(v36) + 1;
        long long v20 = (void *)((char *)v35 + 16 * HIDWORD(v36));
        uint64_t v21 = v32;
        uint64_t v32 = 0;
        *long long v20 = v21;
        uint64_t v22 = v33;
        uint64_t v33 = 0;
        v20[1] = v22;
        HIDWORD(v36) = v19;
      }
      uint64_t result = std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v32);
      --v11;
    }
    while (v11);
    uint64_t v27 = HIDWORD(v36);
    uint64_t v28 = v35;
    if (v36 > HIDWORD(v36))
    {
      unint64_t v29 = v35;
      if (HIDWORD(v36))
      {
        if (HIDWORD(v36) >> 28)
        {
          __break(0xC471u);
          return result;
        }
        uint64_t v30 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v36)));
        LODWORD(v36) = v27;
        uint64_t v35 = v30;
        unint64_t v29 = v28;
        if (v30 != v28)
        {
          WTF::VectorMover<false,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>::move((uint64_t)v28, (void *)v28 + 2 * v27, v30);
          unint64_t v29 = v35;
        }
      }
      if (v28)
      {
        if (v29 == v28)
        {
          uint64_t v35 = 0;
          LODWORD(v36) = 0;
        }
        WTF::fastFree(v28, a2);
        uint64_t v28 = v35;
      }
      else
      {
        uint64_t v28 = v29;
      }
    }
    *(void *)a3 = v28;
    uint64_t v31 = v36;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    *(void *)(a3 + 8) = v31;
    goto LABEL_18;
  }
  if (v11)
  {
    LODWORD(v36) = v11;
    uint64_t v35 = (WTF *)WTF::fastMalloc((WTF *)(16 * v11));
    while (1)
    {
      IPC::Decoder::decode<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>((uint64_t)&v32, a1, v12);
      if (!v34) {
        break;
      }
      if (HIDWORD(v36) == v36)
      {
        WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>((uint64_t)&v35, (unint64_t)&v32);
      }
      else
      {
        int v13 = HIDWORD(v36) + 1;
        int v14 = (void *)((char *)v35 + 16 * HIDWORD(v36));
        uint64_t v15 = v32;
        uint64_t v32 = 0;
        *int v14 = v15;
        uint64_t v16 = v33;
        uint64_t v33 = 0;
        v14[1] = v16;
        HIDWORD(v36) = v13;
      }
      std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v32);
      if (!--v11)
      {
        long long v17 = v35;
        uint64_t v18 = v36;
        goto LABEL_17;
      }
    }
LABEL_24:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v32);
  }
  else
  {
    long long v17 = 0;
    uint64_t v18 = 0;
LABEL_17:
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    *(void *)a3 = v17;
    *(void *)(a3 + 8) = v18;
LABEL_18:
    *(unsigned char *)(a3 + 16) = 1;
  }
  return WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, a2);
}

void sub_1994C571C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, v3);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>>(uint64_t a1, uint64_t *a2, __n128 a3)
{
  IPC::Decoder::decode<WebKit::CoreIPCNSCFObject>((uint64_t)&v14, a2, a3);
  if (v15)
  {
    IPC::Decoder::decode<WebKit::CoreIPCNSCFObject>((uint64_t)&v12, a2, v5);
    if (v13)
    {
      if (v15)
      {
        uint64_t v6 = v12;
        *(void *)a1 = v14;
        *(void *)(a1 + 8) = v6;
        *(unsigned char *)(a1 + 16) = 1;
      }
      else
      {
        __break(1u);
      }
      return;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    if (v15)
    {
      uint64_t v7 = v14;
      uint64_t v14 = 0;
      if (v7) {
        std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100]((uint64_t)&v14, v7);
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v10 = a2[3];
  if (v10) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
  }
}

void sub_1994C5830(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCNSCFObject,WebKit::CoreIPCNSCFObject>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v2 = a1 + 8;
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v3) {
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100](v2, v3);
    }
    uint64_t v4 = *(void *)a1;
    *(void *)a1 = 0;
    if (v4) {
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCArray,WebKit::CoreIPCCFType,WebKit::CoreIPCColor,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCDictionary,WebKit::CoreIPCError,WebKit::CoreIPCFont,WebKit::CoreIPCLocale,WebKit::CoreIPCNSShadow,WebKit::CoreIPCNSValue,WebKit::CoreIPCNumber,WebKit::CoreIPCNull,WebKit::CoreIPCSecureCoding,WebKit::CoreIPCString,WebKit::CoreIPCURL>>::operator()[abi:sn180100](a1, v4);
    }
  }
  return a1;
}

uint64_t IPC::ArgumentCoder<std::unique_ptr<WebKit::CoreIPCError>,void>::encode<IPC::Encoder,std::unique_ptr<WebKit::CoreIPCError> const&>(IPC::Encoder *a1, void *a2)
{
  if (*a2)
  {
    char v5 = 1;
    uint64_t v3 = (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(a1, &v5);
    return IPC::ArgumentCoder<WebKit::CoreIPCError,void>::encode(v3);
  }
  else
  {
    char v4 = 0;
    return IPC::Encoder::operator<<<BOOL>(a1, &v4);
  }
}

_DWORD *IPC::ArgumentCoder<std::optional<WebKit::CoreIPCString>,void>::encode<IPC::Encoder,std::optional<WebKit::CoreIPCString> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  uint64_t result = (_DWORD *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (v6)
    {
      *(unsigned char *)uint64_t result = 0;
      return result;
    }
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x1994C59B4);
  }
  if (!v6) {
    goto LABEL_11;
  }
  *(unsigned char *)uint64_t result = 1;
  if (!*(unsigned char *)(a2 + 8))
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_11;
  }

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
}

IPC::Encoder *IPC::Encoder::operator<<<WebKit::CoreIPCData const&>(IPC::Encoder *a1, WebKit::CoreIPCData *this)
{
  WebKit::CoreIPCData::dataReference((CFIndex)this, (uint64_t)v4);
  IPC::ArgumentCoder<std::optional<std::span<unsigned char const,18446744073709551615ul>>,void>::encode<IPC::Encoder,std::optional<std::span<unsigned char const,18446744073709551615ul>>>(a1, (uint64_t)v4);
  return a1;
}

uint64_t IPC::VectorArgumentCoder<false,std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    CFIndex v6 = *(void *)a2;
    for (uint64_t i = 16 * v5; i; i -= 16)
    {
      char v9 = *(_DWORD *)(v6 + 8);
      uint64_t result = IPC::Encoder::operator<<<BOOL>(a1, &v9);
      if (v9 == 1)
      {
        if (*(_DWORD *)(v6 + 8) != 1)
        {
LABEL_11:
          uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
          return IPC::Decoder::decode<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(v8);
        }
        WebKit::CoreIPCData::dataReference(v6, (uint64_t)v10);
        uint64_t result = IPC::ArgumentCoder<std::optional<std::span<unsigned char const,18446744073709551615ul>>,void>::encode<IPC::Encoder,std::optional<std::span<unsigned char const,18446744073709551615ul>>>(a1, (uint64_t)v10);
      }
      else if (!v9)
      {
        if (*(_DWORD *)(v6 + 8)) {
          goto LABEL_11;
        }
        uint64_t result = (uint64_t)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)v6);
      }
      v6 += 16;
    }
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v10);
  if (v11)
  {
    uint64_t result = IPC::Decoder::decode<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, v7);
    if (v9)
    {
      if (!v11)
      {
        __break(1u);
        return (WTF::StringImpl *)IPC::Decoder::markInvalid(a2);
      }
      CFIndex v6 = v10;
      uint64_t v10 = 0;
      *(void *)a1 = v6;
      uint64_t result = (WTF::StringImpl *)std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 8, (uint64_t)v7);
      *(unsigned char *)(a1 + 32) = 1;
      if (v9 && v8 != -1) {
        uint64_t result = (WTF::StringImpl *)((uint64_t (*)(char *, unsigned char *))*(&off_1EEA10500 + v8))(&v12, v7);
      }
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 32) = 0;
    }
    if (v11)
    {
      uint64_t result = v10;
      uint64_t v10 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 32) = 0;
  }
  if (!*(unsigned char *)(a1 + 32)) {
    return (WTF::StringImpl *)IPC::Decoder::markInvalid(a2);
  }
  return result;
}

void sub_1994C5BE0(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<std::pair<WTF::String,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 24);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))*(&off_1EEA10500 + v3))(&v6, a1 + 8);
    }
    *(_DWORD *)(a1 + 24) = -1;
    int v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v16 = *((void *)a2 + 3);
    if (v16)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v5, v4);
        uint64_t v15 = *(void *)a2;
        unint64_t v14 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_23;
  }
  unsigned int v8 = (unint64_t *)(v5 + v6);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v14 = v4;
    uint64_t v15 = 0;
LABEL_23:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v17 = *((void *)a2 + 3);
    if (v17 && v14) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15);
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    goto LABEL_35;
  }
  unint64_t v9 = *v8;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  if (v9 >= 0x10000)
  {
    while (1)
    {
      IPC::Decoder::decode<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>>((uint64_t)&v21, a2);
      if (!v23) {
        goto LABEL_34;
      }
      if (HIDWORD(v25) == v25)
      {
        WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>>((uint64_t)&v24, (unint64_t)&v21);
      }
      else
      {
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCString,WebKit::CoreIPCData>,(std::__variant_detail::_Trait)1>::__move_constructor(v24 + 16 * HIDWORD(v25), (uint64_t)&v21);
        ++HIDWORD(v25);
      }
      if (v23 && v22 != -1) {
        ((void (*)(char *, uint64_t *))*(&off_1EEA10510 + v22))(&v26, &v21);
      }
      if (!--v9)
      {
        WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v24, HIDWORD(v25));
        *(void *)a1 = v24;
        uint64_t v18 = v25;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        *(void *)(a1 + 8) = v18;
        goto LABEL_21;
      }
    }
  }
  if (v9)
  {
    LODWORD(v25) = v9;
    uint64_t v24 = WTF::fastMalloc((WTF *)(16 * v9));
    while (1)
    {
      IPC::Decoder::decode<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>>((uint64_t)&v21, a2);
      if (!v23) {
        break;
      }
      if (HIDWORD(v25) == v25)
      {
        WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>>((uint64_t)&v24, (unint64_t)&v21);
      }
      else
      {
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCString,WebKit::CoreIPCData>,(std::__variant_detail::_Trait)1>::__move_constructor(v24 + 16 * HIDWORD(v25), (uint64_t)&v21);
        ++HIDWORD(v25);
      }
      if (v23 && v22 != -1) {
        ((void (*)(char *, uint64_t *))*(&off_1EEA10510 + v22))(&v26, &v21);
      }
      if (!--v9)
      {
        uint64_t v11 = v24;
        uint64_t v12 = v25;
        goto LABEL_20;
      }
    }
LABEL_34:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v10);
LABEL_35:
    uint64_t v19 = *(void *)a2;
    uint64_t v20 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result)
    {
      if (v20) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v19);
      }
    }
    return result;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
LABEL_20:
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v12;
LABEL_21:
  *(unsigned char *)(a1 + 16) = 1;
  return WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, a2);
}

void sub_1994C5FB4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, int a11, char a12, int a13, char a14)
{
  if (a12)
  {
    if (a10 != -1) {
      (*(void (**)(uint64_t, uint64_t *))(v14 + 8 * a10))(v15 - 33, &a9);
    }
  }
  WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a14, a2);
  _Unwind_Resume(a1);
}

void *IPC::Decoder::decode<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 2) - *(void *)a2;
  if (v4 <= v6)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v5, v4);
        uint64_t v13 = *(void *)a2;
        unint64_t v12 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_17;
  }
  uint64_t v7 = (unsigned char *)(v5 + v6);
  *((void *)a2 + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v12 = v4;
    uint64_t v13 = 0;
LABEL_17:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15 && v12) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
    }
    goto LABEL_4;
  }
  if (*v7 < 2u)
  {
    if (*v7)
    {
      uint64_t result = IPC::Decoder::decode<WebKit::CoreIPCData>(a2, &v16);
      int v11 = v17;
      if (v17)
      {
        *(void *)a1 = v16;
        int v11 = 1;
        *(_DWORD *)(a1 + 8) = 1;
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t result = IPC::Decoder::decode<WebKit::CoreIPCString>(a2, (uint64_t)&v16);
      int v11 = v17;
      if (v17)
      {
        *(void *)a1 = v16;
        *(_DWORD *)(a1 + 8) = 0;
        int v11 = 1;
        goto LABEL_14;
      }
    }
    *(unsigned char *)a1 = 0;
LABEL_14:
    *(unsigned char *)(a1 + 16) = v11;
    if (v11) {
      return result;
    }
    goto LABEL_5;
  }
LABEL_4:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
LABEL_5:
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = (void *)*((void *)a2 + 3);
  if (result)
  {
    if (v9) {
      return (void *)(*(uint64_t (**)(void *, uint64_t))(*(void *)result + 16))(result, v8);
    }
  }
  return result;
}

uint64_t WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::CoreIPCString,WebKit::CoreIPCData>,(std::__variant_detail::_Trait)1>::__move_constructor(*(void *)a1 + 16 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::variant<WebKit::CoreIPCString,WebKit::CoreIPCData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

__n128 WTF::Vector<WebKit::CoreIPCNumber,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCNumber>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = (__n128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  __n128 result = *v3;
  *(__n128 *)(*(void *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

void IPC::ArgumentCoder<std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,void>::encode<IPC::Encoder,std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding> const&>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a1;
  if (a3)
  {
    goto LABEL_4;
  }
  if (*(_DWORD *)(a2 + 32))
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_4:
    IPC::ArgumentCoder<std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,void>::encode<IPC::Encoder,std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding> const&,0ul>(a1, a2, a3);
    return;
  }
  uint64_t v4 = a2 + 8;
  unsigned __int8 v5 = *(_DWORD *)(a2 + 24);
  IPC::Encoder::operator<<<BOOL>(a1, (char *)&v5);
  IPC::ArgumentCoder<std::variant<_NSRange>,void>::encode<IPC::Encoder,std::variant<_NSRange> const&>(v3, v4, v5);
}

void IPC::ArgumentCoder<std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,void>::encode<IPC::Encoder,std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding> const&,0ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 32) == 1)
    {
      uint64_t v3 = *(void *)(a2 + 8);
      IPC::encodeObjectDirectly<NSObject  {objcproto14NSSecureCoding}>(a1, v3);
    }
    else
    {
      uint64_t v4 = std::__throw_bad_variant_access[abi:sn180100]();
      IPC::ArgumentCoder<std::variant<_NSRange>,void>::encode<IPC::Encoder,std::variant<_NSRange> const&>(v4);
    }
  }
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<_NSRange>,void>::encode<IPC::Encoder,std::variant<_NSRange> const&>(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  if (!a3)
  {
    if (*(_DWORD *)(a2 + 16))
    {
      uint64_t v6 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::ArgumentCoder<std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,void>::decode<IPC::Decoder>(v6);
    }
    else
    {
      uint64_t v4 = result;
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(result, *(void *)a2);
      uint64_t v5 = *(void *)(a2 + 8);
      return (IPC::Encoder *)IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v4, v5);
    }
  }
  return result;
}

void IPC::ArgumentCoder<std::variant<std::variant<_NSRange>,WebKit::CoreIPCSecureCoding>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (!v7) {
      goto LABEL_29;
    }
    goto LABEL_50;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v21 = v3;
    uint64_t v22 = 0;
    goto LABEL_29;
  }
  uint64_t v7 = *v6;
  if (v7 >= 2)
  {
LABEL_4:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 40) = 0;
    return;
  }
  if (!*v6)
  {
    if (v3 <= (unint64_t)&v6[-v4 + 1])
    {
      *a1 = 0;
      a1[1] = 0;
      uint64_t v24 = a1[3];
      if (!v24) {
        goto LABEL_10;
      }
      long long v37 = a1;
      (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
      a1 = v37;
      uint64_t v25 = *v37;
      uint64_t v26 = v37[1];
      uint64_t v27 = v37[3];
      *long long v37 = 0;
      v37[1] = 0;
      if (!v27 || !v26) {
        goto LABEL_10;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25);
      goto LABEL_48;
    }
    a1[2] = (uint64_t)(v6 + 2);
    if (v6[1])
    {
LABEL_10:
      uint64_t v10 = *a1;
      uint64_t v11 = a1[1];
      *a1 = 0;
      a1[1] = 0;
      uint64_t v12 = a1[3];
      if (v12)
      {
        if (v11) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
        }
      }
      char v8 = 0;
      goto LABEL_12;
    }
    unint64_t v9 = v6 + 2;
    unint64_t v13 = ((unint64_t)(v6 + 9) & 0xFFFFFFFFFFFFFFF8) - v4;
    BOOL v15 = v3 < v13 || v3 - v13 < 8;
    if (v15)
    {
      *a1 = 0;
      a1[1] = 0;
      long long v38 = a1;
      uint64_t v28 = a1[3];
      if (v28)
      {
        (*(void (**)(uint64_t))(*(void *)v28 + 16))(v28);
        unint64_t v3 = 0;
        uint64_t v35 = *v38;
        uint64_t v36 = v38[1];
        uint64_t v7 = v38[3];
        *long long v38 = 0;
        v38[1] = 0;
        uint64_t v4 = 0;
        uint64_t v17 = 0;
        if (v7)
        {
          a1 = v38;
          BOOL v15 = 1;
          if (v36)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v35, v36);
            BOOL v15 = 1;
            a1 = v38;
            uint64_t v17 = 0;
            uint64_t v4 = *v38;
            unint64_t v3 = v38[1];
          }
          goto LABEL_21;
        }
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
        uint64_t v17 = 0;
      }
      a1 = v38;
      BOOL v15 = 1;
    }
    else
    {
      uint64_t v16 = (uint64_t *)((unint64_t)(v9 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v17 = *v16;
      a1[2] = (uint64_t)(v16 + 1);
    }
LABEL_21:
    unint64_t v18 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 < v18 || v3 - v18 <= 7)
    {
      unint64_t v29 = 0;
      uint64_t v30 = 0;
      *a1 = 0;
      a1[1] = 0;
      long long v37 = a1;
      uint64_t v31 = a1[3];
      if (v31)
      {
        if (v3)
        {
          (*(void (**)(uint64_t))(*(void *)v31 + 16))(v31);
          uint64_t v30 = *v37;
          unint64_t v29 = v37[1];
        }
        else
        {
          unint64_t v29 = 0;
          uint64_t v30 = 0;
        }
      }
    }
    else
    {
      uint64_t v19 = (uint64_t *)((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8);
      a1[2] = (uint64_t)(v19 + 1);
      if (v4)
      {
        if (!v15)
        {
          uint64_t v20 = *v19;
          *(void *)(a2 + 8) = v17;
          *(void *)(a2 + 16) = v20;
          *(_DWORD *)(a2 + 24) = 0;
          *(_DWORD *)(a2 + 32) = 0;
          char v8 = 1;
          goto LABEL_26;
        }
        __break(1u);
LABEL_50:
        long long v39 = a1;
        if (v3)
        {
          (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
          a1 = v39;
          uint64_t v22 = *v39;
          unint64_t v21 = v39[1];
        }
        else
        {
          unint64_t v21 = 0;
          uint64_t v22 = 0;
        }
LABEL_29:
        *a1 = 0;
        a1[1] = 0;
        uint64_t v23 = a1[3];
        if (v23 && v21) {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v23 + 16))(v23, v22, v21);
        }
        goto LABEL_4;
      }
      long long v37 = a1;
      unint64_t v29 = v3;
      uint64_t v30 = 0;
    }
    a1 = v37;
    *long long v37 = 0;
    v37[1] = 0;
    uint64_t v32 = v37[3];
    if (!v32 || !v29) {
      goto LABEL_10;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v32 + 16))(v37[3], v30, v29);
    if (*v37)
    {
      __break(1u);
      return;
    }
    a1 = v37;
    uint64_t v33 = v37[1];
    uint64_t v34 = v37[3];
    *long long v37 = 0;
    v37[1] = 0;
    if (!v34 || !v33) {
      goto LABEL_10;
    }
    (*(void (**)(uint64_t, void))(*(void *)v34 + 16))(v34, 0);
LABEL_48:
    a1 = v37;
    goto LABEL_10;
  }
  IPC::Decoder::decode<WebKit::CoreIPCSecureCoding>(a1, (uint64_t)&v40);
  char v8 = v41;
  if (!v41)
  {
LABEL_12:
    *(unsigned char *)a2 = 0;
    goto LABEL_26;
  }
  *(void *)(a2 + 8) = v40;
  char v8 = 1;
  *(_DWORD *)(a2 + 32) = 1;
LABEL_26:
  *(unsigned char *)(a2 + 40) = v8;
}

uint64_t IPC::VectorArgumentCoder<false,WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v29 = a1[3];
    if (v29)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v29 + 16))(v29, v6, v5);
        uint64_t v28 = *a1;
        unint64_t v27 = a1[1];
      }
      else
      {
        unint64_t v27 = 0;
        uint64_t v28 = 0;
      }
    }
    goto LABEL_33;
  }
  unint64_t v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v6)
  {
    unint64_t v27 = v5;
    uint64_t v28 = 0;
LABEL_33:
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result)
    {
      if (v27) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v28);
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return result;
  }
  unint64_t v10 = *v9;
  long long v37 = 0;
  uint64_t v38 = 0;
  if (v10 < 0x20000)
  {
    if (!v10)
    {
      unint64_t v18 = 0;
      uint64_t v19 = 0;
LABEL_20:
      long long v37 = 0;
      uint64_t v38 = 0;
      *(void *)a3 = v18;
      *(void *)(a3 + 8) = v19;
      goto LABEL_21;
    }
    LODWORD(v38) = v10;
    long long v37 = (WTF *)WTF::fastMalloc((WTF *)(8 * v10));
    while (1)
    {
      IPC::Decoder::decode<WebKit::CoreIPCPlistObject>(&v35, a1);
      if (!v36) {
        goto LABEL_30;
      }
      int v11 = HIDWORD(v38);
      if (HIDWORD(v38) != v38) {
        break;
      }
      uint64_t v12 = (uint64_t *)WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, HIDWORD(v38) + 1, (unint64_t)&v35);
      uint64_t v13 = HIDWORD(v38);
      int v14 = HIDWORD(v38) + 1;
      BOOL v15 = v37;
      uint64_t v16 = *v12;
      *uint64_t v12 = 0;
      *((void *)v15 + v13) = v16;
      HIDWORD(v38) = v14;
      if (v36) {
        goto LABEL_15;
      }
LABEL_17:
      if (!--v10)
      {
        unint64_t v18 = v37;
        uint64_t v19 = v38;
        goto LABEL_20;
      }
    }
    uint64_t v17 = v35;
    uint64_t v35 = 0;
    *((void *)v37 + HIDWORD(v38)) = v17;
    HIDWORD(v38) = v11 + 1;
LABEL_15:
    a2 = v35;
    uint64_t v35 = 0;
    if (a2) {
      std::default_delete<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>::operator()[abi:sn180100]((uint64_t)&v35, (uint64_t)a2);
    }
    goto LABEL_17;
  }
  do
  {
    uint64_t result = IPC::Decoder::decode<WebKit::CoreIPCPlistObject>(&v35, a1);
    if (!v36)
    {
LABEL_30:
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 16) = 0;
      return WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, a2);
    }
    int v20 = HIDWORD(v38);
    if (HIDWORD(v38) == v38)
    {
      uint64_t result = WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, HIDWORD(v38) + 1, (unint64_t)&v35);
      uint64_t v22 = HIDWORD(v38);
      int v23 = HIDWORD(v38) + 1;
      uint64_t v24 = v37;
      uint64_t v25 = *(void *)result;
      *(void *)uint64_t result = 0;
      *((void *)v24 + v22) = v25;
      HIDWORD(v38) = v23;
      if (!v36) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v26 = v35;
      uint64_t v35 = 0;
      *((void *)v37 + HIDWORD(v38)) = v26;
      HIDWORD(v38) = v20 + 1;
    }
    a2 = v35;
    uint64_t v35 = 0;
    if (a2) {
      uint64_t result = std::default_delete<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>::operator()[abi:sn180100]((uint64_t)&v35, (uint64_t)a2);
    }
LABEL_28:
    --v10;
  }
  while (v10);
  uint64_t v30 = HIDWORD(v38);
  uint64_t v31 = v37;
  if (v38 <= HIDWORD(v38)) {
    goto LABEL_45;
  }
  uint64_t v32 = v37;
  if (!HIDWORD(v38)) {
    goto LABEL_40;
  }
  if (HIDWORD(v38) >> 29)
  {
    __break(0xC471u);
  }
  else
  {
    uint64_t v33 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v38)));
    LODWORD(v38) = v30;
    long long v37 = v33;
    uint64_t v32 = v31;
    if (v33 != v31)
    {
      WTF::VectorMover<false,WebKit::CoreIPCPlistObject>::move((uint64_t)v31, (uint64_t *)v31 + v30, (uint64_t *)v33);
      uint64_t v32 = v37;
    }
LABEL_40:
    if (v31)
    {
      if (v32 == v31)
      {
        long long v37 = 0;
        LODWORD(v38) = 0;
      }
      WTF::fastFree(v31, a2);
      uint64_t v31 = v37;
    }
    else
    {
      uint64_t v31 = v32;
    }
LABEL_45:
    *(void *)a3 = v31;
    uint64_t v34 = v38;
    long long v37 = 0;
    uint64_t v38 = 0;
    *(void *)(a3 + 8) = v34;
LABEL_21:
    *(unsigned char *)(a3 + 16) = 1;
    return WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, a2);
  }
  return result;
}

void sub_1994C6B78(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10, int a11, char a12)
{
  if (a10)
  {
    a2 = a9;
    a9 = 0;
    if (a2) {
      std::default_delete<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>::operator()[abi:sn180100]((uint64_t)&a9, (uint64_t)a2);
    }
  }
  WTF::Vector<WebKit::CoreIPCPlistObject,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
  _Unwind_Resume(a1);
}

uint64_t *IPC::Decoder::decode<WebKit::CoreIPCPlistObject>(unsigned char *a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WTF::UniqueRef<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>,void>::decode(a2, &v6);
  if (!v7)
  {
    IPC::Decoder::markInvalid((IPC::Decoder *)a2);
    if (!*a2)
    {
      *a1 = 0;
      a1[8] = 0;
      return (uint64_t *)IPC::Decoder::markInvalid((IPC::Decoder *)a2);
    }
    __break(1u);
LABEL_7:
    *a1 = 0;
    a1[8] = 0;
    uint64_t v5 = v6;
    uint64_t v6 = 0;
    if (v5) {
      std::default_delete<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>::operator()[abi:sn180100]((uint64_t)&v6, v5);
    }
    return (uint64_t *)IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  if (!*a2) {
    goto LABEL_7;
  }
  *(void *)a1 = v6;
  a1[8] = 1;
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    char v7 = &v6[2 * v5];
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v6);
      unint64_t result = IPC::ArgumentCoder<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>,void>::encode<IPC::Encoder,std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData> const&>(a1, v6[1]);
      v6 += 2;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v20 = *((void *)a1 + 3);
    if (v20)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v6, v5);
        uint64_t v19 = *(void *)a1;
        unint64_t v18 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v18 = 0;
        uint64_t v19 = 0;
      }
    }
    goto LABEL_21;
  }
  unint64_t v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (v6)
  {
    unint64_t v10 = *v9;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    if (v10 >= 0x10000)
    {
      while (1)
      {
        IPC::Decoder::decode<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>>((uint64_t)&v26, a1);
        if (!v28) {
          break;
        }
        if (HIDWORD(v30) == v30)
        {
          WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>>((uint64_t)&v29, (unint64_t)&v26);
        }
        else
        {
          int v21 = HIDWORD(v30) + 1;
          uint64_t v22 = (void *)(v29 + 16 * HIDWORD(v30));
          uint64_t v23 = v26;
          uint64_t v26 = 0;
          *uint64_t v22 = v23;
          uint64_t v24 = v27;
          uint64_t v27 = 0;
          v22[1] = v24;
          HIDWORD(v30) = v21;
        }
        std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v26);
        if (!--v10)
        {
          WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v29, HIDWORD(v30));
          *(void *)a3 = v29;
          uint64_t v25 = v30;
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          *(void *)(a3 + 8) = v25;
          goto LABEL_16;
        }
      }
    }
    else
    {
      if (!v10)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
LABEL_15:
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        *(void *)a3 = v15;
        *(void *)(a3 + 8) = v16;
LABEL_16:
        *(unsigned char *)(a3 + 16) = 1;
        return WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, a2);
      }
      LODWORD(v30) = v10;
      uint64_t v29 = WTF::fastMalloc((WTF *)(16 * v10));
      while (1)
      {
        IPC::Decoder::decode<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>>((uint64_t)&v26, a1);
        if (!v28) {
          break;
        }
        if (HIDWORD(v30) == v30)
        {
          WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>>((uint64_t)&v29, (unint64_t)&v26);
        }
        else
        {
          int v11 = HIDWORD(v30) + 1;
          uint64_t v12 = (void *)(v29 + 16 * HIDWORD(v30));
          uint64_t v13 = v26;
          uint64_t v26 = 0;
          *uint64_t v12 = v13;
          uint64_t v14 = v27;
          uint64_t v27 = 0;
          v12[1] = v14;
          HIDWORD(v30) = v11;
        }
        std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v26);
        if (!--v10)
        {
          uint64_t v15 = v29;
          uint64_t v16 = v30;
          goto LABEL_15;
        }
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v26);
    return WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, a2);
  }
  unint64_t v18 = v5;
  uint64_t v19 = 0;
LABEL_21:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result)
  {
    if (v18) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v19);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

uint64_t *IPC::Decoder::decode<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebKit::CoreIPCString>(a2, (uint64_t)&v10);
  if (!v11) {
    goto LABEL_7;
  }
  uint64_t result = IPC::Decoder::decode<WebKit::CoreIPCPlistObject>(&v8, (uint64_t *)a2);
  if (!v9)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    if (v11)
    {
      unint64_t v7 = v10;
      unint64_t v10 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          WTF::StringImpl::destroy(v7, v5);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
    }
    return (uint64_t *)IPC::Decoder::markInvalid(a2);
  }
  if (!v11)
  {
    __break(1u);
LABEL_7:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    return (uint64_t *)IPC::Decoder::markInvalid(a2);
  }
  uint64_t v6 = v8;
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_1994C7020(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v2 = a1 + 8;
    unint64_t v3 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v3) {
      std::default_delete<std::variant<WebKit::CoreIPCPlistArray,WebKit::CoreIPCPlistDictionary,WebKit::CoreIPCString,WebKit::CoreIPCNumber,WebKit::CoreIPCDate,WebKit::CoreIPCData>>::operator()[abi:sn180100](v2, (uint64_t)v3);
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      uint64_t result = (uint64_t)WTF::VectorDestructor<true,WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>>::destruct((WTF::StringImpl *)(*(void *)result + 16 * a2), (WTF::StringImpl *)(*(void *)result + 16 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    unint64_t v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(void *)uint64_t v3 = result;
      if ((WTF::StringImpl *)result != v5) {
        uint64_t result = (uint64_t)WTF::VectorMover<false,WTF::KeyValuePair<WebKit::CoreIPCString,WebKit::CoreIPCPlistObject>>::move(v5, (WTF::StringImpl *)((char *)v5 + 16 * v4), (void *)result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC> const&,0ul>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 20) == 1)
    {
      unint64_t v3 = result[2];
      if (v3 >= result[1])
      {
        result[1] = 0;
      }
      else
      {
        *(unsigned char *)(*result + v3++) = *(unsigned char *)a2;
        result[2] = v3;
      }
      uint64_t v4 = *result;
      unint64_t v5 = *result + v3;
      unint64_t v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      BOOL v7 = v6 >= v5;
      unint64_t v8 = v6 - v5;
      if (v7)
      {
        unint64_t v9 = v8 + v3;
        unint64_t v10 = v8 + v3 + 4;
        if (v9 > 0xFFFFFFFFFFFFFFFBLL || v10 > result[1])
        {
          result[1] = 0;
        }
        else
        {
          *(_DWORD *)(v4 + v9) = *(_DWORD *)(a2 + 4);
          result[2] = v10;
          uint64_t v4 = *result;
          unint64_t v3 = v10;
        }
      }
      unint64_t v12 = (v4 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v13 = v12 - (v4 + v3);
      if (v12 >= v4 + v3)
      {
        unint64_t v14 = v12 - v4;
        unint64_t v15 = v13 + v3 + 4;
        if (v14 > 0xFFFFFFFFFFFFFFFBLL || v15 > result[1])
        {
          result[1] = 0;
        }
        else
        {
          *(_DWORD *)(v4 + v14) = *(_DWORD *)(a2 + 8);
          result[2] = v15;
          uint64_t v4 = *result;
          unint64_t v3 = v15;
        }
      }
      unint64_t v17 = (v4 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v18 = v17 - (v4 + v3);
      if (v17 >= v4 + v3)
      {
        unint64_t v19 = v17 - v4;
        unint64_t v20 = v18 + v3 + 4;
        if (v19 > 0xFFFFFFFFFFFFFFFBLL || v20 > result[1])
        {
          result[1] = 0;
        }
        else
        {
          *(_DWORD *)(v4 + v19) = *(_DWORD *)(a2 + 12);
          result[2] = v20;
          uint64_t v4 = *result;
          unint64_t v3 = v20;
        }
      }
      uint64_t v22 = (_DWORD *)((v4 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v22 >= v4 + v3)
      {
        uint64_t v23 = (char *)v22 - v4;
        if ((unint64_t)v22 - v4 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v23 + 4) > result[1])
        {
          result[1] = 0;
        }
        else
        {
          *uint64_t v22 = *(_DWORD *)(a2 + 16);
          result[2] = (uint64_t)(v23 + 4);
        }
      }
    }
    else
    {
      uint64_t v24 = std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::decode<IPC::Decoder,0ul>(v24, v25, v26);
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::variant<WebCore::PackedColor::RGBA,WebCore::OutOfLineColorDataForIPC>,void>::decode<IPC::Decoder,0ul>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2 == 1)
  {
    uint64_t v4 = (uint64_t *)result;
    uint64_t result = IPC::Decoder::decode<WebCore::ColorSpace>((void *)result);
    unint64_t v5 = v4[1];
    uint64_t v6 = *v4;
    unint64_t v7 = ((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v4;
    if (v5 >= v7 && v5 - v7 > 3)
    {
      unint64_t v9 = (int *)(v6 + v7);
      v4[2] = (uint64_t)(v9 + 1);
      if (!v6)
      {
        uint64_t v27 = v5;
        uint64_t v28 = 0;
        goto LABEL_32;
      }
      int v10 = 0;
      int v11 = *v9;
      uint64_t v12 = v6;
      goto LABEL_9;
    }
    while (1)
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      *uint64_t v4 = 0;
      v4[1] = 0;
      uint64_t v29 = v4[3];
      if (v29)
      {
        unsigned int v65 = result;
        if (v5)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v6);
          uint64_t v28 = *v4;
          uint64_t v27 = v4[1];
        }
        else
        {
          uint64_t v27 = 0;
          uint64_t v28 = 0;
        }
        uint64_t result = v65;
      }
LABEL_32:
      *uint64_t v4 = 0;
      v4[1] = 0;
      uint64_t v6 = v4[3];
      if (v6)
      {
        unsigned int v61 = result;
        if (v27)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v28, v27);
          int v11 = 0;
          uint64_t v12 = *v4;
          unint64_t v5 = v4[1];
          int v10 = 1;
          uint64_t v6 = *v4;
        }
        else
        {
          uint64_t v12 = 0;
          unint64_t v5 = 0;
          uint64_t v6 = 0;
          int v11 = 0;
          int v10 = 1;
        }
        uint64_t result = v61;
      }
      else
      {
        uint64_t v12 = 0;
        unint64_t v5 = 0;
        int v11 = 0;
        int v10 = 1;
      }
LABEL_9:
      unint64_t v13 = ((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v6;
      if (v5 >= v13 && v5 - v13 > 3)
      {
        unint64_t v15 = (int *)((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
        v4[2] = (uint64_t)(v15 + 1);
        if (v6)
        {
          int v16 = 0;
          int v17 = *v15;
          goto LABEL_16;
        }
        uint64_t v30 = v5;
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v12 = 0;
        *uint64_t v4 = 0;
        v4[1] = 0;
        uint64_t v31 = v4[3];
        if (v31)
        {
          int v52 = v11;
          int v58 = v10;
          unsigned int v66 = result;
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v6);
            uint64_t v12 = *v4;
            uint64_t v30 = v4[1];
          }
          else
          {
            uint64_t v30 = 0;
            uint64_t v12 = 0;
          }
          uint64_t result = v66;
          int v11 = v52;
          int v10 = v58;
        }
      }
      *uint64_t v4 = 0;
      v4[1] = 0;
      uint64_t v6 = v4[3];
      if (v6)
      {
        int v49 = v11;
        int v55 = v10;
        unsigned int v62 = result;
        if (v30)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v12, v30);
          int v17 = 0;
          uint64_t v12 = *v4;
          unint64_t v5 = v4[1];
          int v16 = 1;
          uint64_t v6 = *v4;
        }
        else
        {
          uint64_t v12 = 0;
          unint64_t v5 = 0;
          uint64_t v6 = 0;
          int v17 = 0;
          int v16 = 1;
        }
        uint64_t result = v62;
        int v11 = v49;
        int v10 = v55;
      }
      else
      {
        uint64_t v12 = 0;
        unint64_t v5 = 0;
        int v17 = 0;
        int v16 = 1;
      }
LABEL_16:
      unint64_t v18 = ((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v6;
      if (v5 < v18 || v5 - v18 <= 3)
      {
        uint64_t v32 = 0;
        uint64_t v12 = 0;
        *uint64_t v4 = 0;
        v4[1] = 0;
        uint64_t v33 = v4[3];
        if (v33)
        {
          int v43 = v16;
          int v47 = v17;
          int v53 = v11;
          int v59 = v10;
          unsigned int v67 = result;
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v6);
            uint64_t v12 = *v4;
            uint64_t v32 = v4[1];
          }
          else
          {
            uint64_t v32 = 0;
            uint64_t v12 = 0;
          }
          uint64_t result = v67;
          int v11 = v53;
          int v10 = v59;
          int v16 = v43;
          int v17 = v47;
        }
      }
      else
      {
        unint64_t v19 = (int *)((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
        v4[2] = (uint64_t)(v19 + 1);
        if (v6)
        {
          int v20 = 0;
          int v21 = *v19;
          goto LABEL_20;
        }
        uint64_t v32 = v5;
      }
      *uint64_t v4 = 0;
      v4[1] = 0;
      int v21 = 0;
      uint64_t v6 = v4[3];
      if (v6)
      {
        int v41 = v16;
        int v45 = v17;
        int v50 = v11;
        int v56 = v10;
        unsigned int v63 = result;
        if (v32)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v6 + 16))(v6, v12, v32, 0.0);
          uint64_t v12 = *v4;
          unint64_t v5 = v4[1];
          int v20 = 1;
          uint64_t v6 = *v4;
          uint64_t result = v63;
          int v11 = v50;
          int v10 = v56;
          int v16 = v41;
          int v17 = v45;
          int v21 = 0;
        }
        else
        {
          uint64_t v12 = 0;
          unint64_t v5 = 0;
          uint64_t v6 = 0;
          int v20 = 1;
          uint64_t result = result;
        }
      }
      else
      {
        uint64_t v12 = 0;
        unint64_t v5 = 0;
        int v20 = 1;
      }
LABEL_20:
      unint64_t v22 = ((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - v6;
      if (v5 < v22 || v5 - v22 <= 3)
      {
        uint64_t v24 = 0;
        uint64_t v12 = 0;
        *uint64_t v4 = 0;
        v4[1] = 0;
        uint64_t v34 = v4[3];
        if (v34)
        {
          int v40 = v20;
          int v44 = v16;
          int v38 = v21;
          int v48 = v17;
          int v54 = v11;
          int v60 = v10;
          unsigned int v68 = result;
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v6);
            uint64_t v12 = *v4;
            uint64_t v24 = v4[1];
          }
          else
          {
            uint64_t v24 = 0;
            uint64_t v12 = 0;
          }
          uint64_t result = v68;
          int v11 = v54;
          int v10 = v60;
          int v16 = v44;
          int v17 = v48;
          int v21 = v38;
          int v20 = v40;
        }
      }
      else
      {
        uint64_t v23 = (int *)((v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL);
        v4[2] = (uint64_t)(v23 + 1);
        uint64_t v24 = v5;
        if (v6)
        {
          uint64_t v6 = 0;
          int v25 = *v23;
          goto LABEL_24;
        }
      }
      *uint64_t v4 = 0;
      v4[1] = 0;
      uint64_t v35 = v4[3];
      if (!v35 || !v24) {
        break;
      }
      int v39 = v20;
      int v42 = v16;
      int v37 = v21;
      int v46 = v17;
      int v51 = v11;
      int v57 = v10;
      unsigned int v64 = result;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v12, v24);
      if (!*v4)
      {
        uint64_t v36 = v4[1];
        uint64_t result = v4[3];
        *uint64_t v4 = 0;
        v4[1] = 0;
        if (result && v36) {
          uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 16))(result, 0);
        }
        break;
      }
      int v25 = 0;
      uint64_t v6 = 1;
      uint64_t result = v64;
      int v11 = v51;
      int v10 = v57;
      int v16 = v42;
      int v17 = v46;
      int v21 = v37;
      int v20 = v39;
LABEL_24:
      if ((unsigned __int16)result > 0xFFu && !v10 && !v16 && !v20 && !v6)
      {
        *(unsigned char *)a3 = result;
        *(_DWORD *)(a3 + 4) = v11;
        *(_DWORD *)(a3 + 8) = v17;
        *(_DWORD *)(a3 + 12) = v21;
        *(_DWORD *)(a3 + 16) = v25;
        char v26 = 1;
        *(_DWORD *)(a3 + 20) = 1;
        goto LABEL_43;
      }
      __break(1u);
    }
  }
  char v26 = 0;
  *(unsigned char *)a3 = 0;
LABEL_43:
  *(unsigned char *)(a3 + 24) = v26;
  return result;
}

unint64_t IPC::VectorArgumentCoder<false,WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)a2;
    uint64_t v7 = 8 * v5;
    do
    {
      uint64_t v8 = *v6++;
      unint64_t result = ((uint64_t (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::Encoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>)(a1, v8);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void *IPC::VectorArgumentCoder<false,WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  uint64_t v4 = result[2];
  unint64_t v5 = *result + v4;
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!v3) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v9 = v8 + v4;
  unint64_t v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= result[1])
  {
    *(void *)(*result + v9) = v3;
    result[2] = v10;
    uint64_t v3 = *(unsigned int *)(a2 + 12);
    goto LABEL_8;
  }
  result[1] = 0;
  if (!v3) {
    return result;
  }
LABEL_9:
  uint64_t v12 = *(unsigned __int8 ***)a2;
  uint64_t v13 = 8 * v3;
  do
  {
    unint64_t v14 = *v12++;
    unint64_t result = IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(v2, v14);
    v13 -= 8;
  }
  while (v13);
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v25 = a1[3];
    if (v25)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v25 + 16))(v25, v6, v5);
        uint64_t v24 = *a1;
        unint64_t v23 = a1[1];
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v24 = 0;
      }
    }
    goto LABEL_34;
  }
  unint64_t v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v6)
  {
    unint64_t v23 = v5;
    uint64_t v24 = 0;
LABEL_34:
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result)
    {
      if (v23) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v24);
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return result;
  }
  unint64_t v10 = *v9;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  if (v10 >= 0x20000)
  {
    while (1)
    {
      IPC::Decoder::decode<WebKit::CoreIPCCFType>(&v27, a1);
      if (!v28)
      {
LABEL_32:
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 16) = 0;
        return WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, a2);
      }
      int v20 = HIDWORD(v30);
      if (HIDWORD(v30) != v30) {
        break;
      }
      WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::CoreIPCCFType>((uint64_t)&v29, (unint64_t)&v27);
      if (v28) {
        goto LABEL_27;
      }
LABEL_29:
      if (!--v10)
      {
        WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v29, HIDWORD(v30));
        *(void *)a3 = v29;
        uint64_t v26 = v30;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        *(void *)(a3 + 8) = v26;
        goto LABEL_20;
      }
    }
    int v21 = v27;
    uint64_t v27 = 0;
    *(void *)(v29 + 8 * HIDWORD(v30)) = v21;
    HIDWORD(v30) = v20 + 1;
LABEL_27:
    uint64_t v22 = (uint64_t)v27;
    uint64_t v27 = 0;
    if (v22) {
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v27, v22);
    }
    goto LABEL_29;
  }
  if (v10)
  {
    LODWORD(v30) = v10;
    uint64_t v29 = WTF::fastMalloc((WTF *)(8 * v10));
    while (1)
    {
      IPC::Decoder::decode<WebKit::CoreIPCCFType>(&v27, a1);
      if (!v28) {
        goto LABEL_32;
      }
      int v11 = HIDWORD(v30);
      if (HIDWORD(v30) != v30) {
        break;
      }
      uint64_t v12 = (uint64_t *)WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v29, HIDWORD(v30) + 1, (unint64_t)&v27);
      uint64_t v13 = HIDWORD(v30);
      uint64_t v14 = v29;
      uint64_t v15 = *v12;
      *uint64_t v12 = 0;
      *(void *)(v14 + 8 * v13) = v15;
      HIDWORD(v30) = v13 + 1;
      if (v28) {
        goto LABEL_15;
      }
LABEL_17:
      if (!--v10)
      {
        uint64_t v17 = v29;
        uint64_t v18 = v30;
        goto LABEL_19;
      }
    }
    int v16 = v27;
    uint64_t v27 = 0;
    *(void *)(v29 + 8 * HIDWORD(v30)) = v16;
    HIDWORD(v30) = v11 + 1;
LABEL_15:
    a2 = v27;
    uint64_t v27 = 0;
    if (a2) {
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v27, (uint64_t)a2);
    }
    goto LABEL_17;
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
LABEL_19:
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  *(void *)a3 = v17;
  *(void *)(a3 + 8) = v18;
LABEL_20:
  *(unsigned char *)(a3 + 16) = 1;
  return WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, a2);
}

void sub_1994C7C1C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10, int a11, char a12)
{
  if (a10)
  {
    a2 = a9;
    a9 = 0;
    if (a2) {
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&a9, (uint64_t)a2);
    }
  }
  WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a12, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebKit::CoreIPCCFType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    unint64_t v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      unint64_t v5 = (unint64_t *)(*(void *)result + 8 * a2);
      uint64_t v6 = 8 * v4 - 8 * a2;
      do
      {
        a2 = *v5;
        unint64_t *v5 = 0;
        if (a2) {
          uint64_t result = std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)v5, a2);
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
      *(_DWORD *)(v3 + 12) = v2;
      LODWORD(v4) = v2;
    }
    unint64_t v7 = *(WTF **)v3;
    if (v2)
    {
      if (v2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(v3 + 8) = v2;
      *(void *)uint64_t v3 = result;
      if ((WTF *)result != v7) {
        uint64_t result = WTF::VectorMover<false,WebKit::CoreIPCCFType>::move((uint64_t)v7, (uint64_t *)v7 + v4, (uint64_t *)result);
      }
    }
    if (v7)
    {
      if (*(WTF **)v3 == v7)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v7, (void *)a2);
    }
  }
  return result;
}

void *IPC::ArgumentCoder<std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::StreamConnectionEncoder,std::unique_ptr<WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(void *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v5 = result[1];
  unint64_t v4 = result[2];
  if (v3)
  {
    if (v4 >= v5)
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v4) = 1;
      result[2] = v4 + 1;
      uint64_t v3 = *a2;
    }
    return IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(result, v3);
  }
  else if (v4 >= v5)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v4) = 0;
    result[2] = v4 + 1;
  }
  return result;
}

void *IPC::VectorArgumentCoder<false,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(void *result, uint64_t a2)
{
  unint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  uint64_t v4 = result[2];
  unint64_t v5 = *result + v4;
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (!v7)
  {
LABEL_8:
    if (!v3) {
      return result;
    }
    goto LABEL_9;
  }
  unint64_t v9 = v8 + v4;
  unint64_t v10 = v9 + 8;
  if (v9 <= 0xFFFFFFFFFFFFFFF7 && v10 <= result[1])
  {
    *(void *)(*result + v9) = v3;
    result[2] = v10;
    uint64_t v3 = *(unsigned int *)(a2 + 12);
    goto LABEL_8;
  }
  result[1] = 0;
  if (!v3) {
    return result;
  }
LABEL_9:
  uint64_t v12 = *(unsigned __int8 ***)a2;
  uint64_t v13 = *(void *)a2 + 16 * v3;
  do
  {
    IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(v2, *v12);
    uint64_t result = IPC::ArgumentCoder<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>,void>::encode<IPC::StreamConnectionEncoder,std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl> const&>(v2, v12[1]);
    v12 += 2;
  }
  while (v12 != (unsigned __int8 **)v13);
  return result;
}

void *IPC::Decoder::decode<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<WebKit::CoreIPCCFType>(&v12, a2);
  if (v13)
  {
    uint64_t result = IPC::Decoder::decode<WebKit::CoreIPCCFType>(&v10, a2);
    if (!v11)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 16) = 0;
      if (v13)
      {
        uint64_t v6 = v12;
        uint64_t v12 = 0;
        if (v6) {
          std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100]((uint64_t)&v12, v6);
        }
      }
      goto LABEL_11;
    }
    if (v13)
    {
      uint64_t v5 = v10;
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v5;
      *(unsigned char *)(a1 + 16) = 1;
      return result;
    }
    __break(1u);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
LABEL_11:
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (void *)a2[3];
  if (result) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9) {
    return (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v7);
  }
  return result;
}

void sub_1994C7F40(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,false>::~__optional_destruct_base[abi:sn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v2 = a1 + 8;
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v3) {
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100](v2, v3);
    }
    uint64_t v4 = *(void *)a1;
    *(void *)a1 = 0;
    if (v4) {
      std::default_delete<std::variant<decltype(nullptr),WebKit::CoreIPCCFArray,WebKit::CoreIPCBoolean,WebKit::CoreIPCCFCharacterSet,WebKit::CoreIPCData,WebKit::CoreIPCDate,WebKit::CoreIPCCFDictionary,WebKit::CoreIPCNull,WebKit::CoreIPCNumber,WebKit::CoreIPCString,WebKit::CoreIPCCFURL,WebKit::CoreIPCSecCertificate,WebKit::CoreIPCSecTrust,WebKit::CoreIPCCGColorSpace,WebCore::Color,WebKit::CoreIPCSecAccessControl>>::operator()[abi:sn180100](a1, v4);
    }
  }
  return a1;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      uint64_t result = WTF::VectorDestructor<true,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>::destruct(*(void *)result + 16 * a2, (uint64_t *)(*(void *)result + 16 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF **)v3;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(void *)uint64_t v3 = result;
      if ((WTF *)result != v5) {
        uint64_t result = WTF::VectorMover<false,WTF::KeyValuePair<WebKit::CoreIPCCFType,WebKit::CoreIPCCFType>>::move((uint64_t)v5, (void *)v5 + 2 * v4, (void *)result);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&,0ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1)
  {
    return (WTF::StringImpl *)IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&,0ul,1ul>((uint64_t)a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 8) != 1)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&,0ul,1ul>((uint64_t)a1, a2, a3);
  }

  return IPC::ArgumentCoder<__CFString const*,void>::encode(a1);
}

uint64_t IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::Encoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&,0ul,1ul>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 == 2)
  {
    if (*(_DWORD *)(a2 + 8) == 2)
    {
      uint64_t v3 = *(IPC **)a2;
      return IPC::ArgumentCoder<void const*,void>::encode(result, v3);
    }
    else
    {
      uint64_t v4 = std::__throw_bad_variant_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&,0ul>(v4);
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&,0ul>(IPC::Encoder *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1)
  {
    return IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&,0ul,1ul>(a1, a2, a3);
  }
  if (*(_DWORD *)(a2 + 8) != 1)
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&,0ul,1ul>(a1, a2, a3);
  }

  return IPC::ArgumentCoder<__CFString const*,void>::encode(a1);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>>,void>::encode<IPC::StreamConnectionEncoder,std::variant<WebCore::ColorSpace,WTF::RetainPtr<__CFString const*>,WTF::RetainPtr<void const*>> const&,0ul,1ul>(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 2)
  {
    if (*(_DWORD *)(a2 + 8) == 2)
    {
      uint64_t v3 = *(IPC **)a2;
      return (IPC::Encoder *)IPC::ArgumentCoder<void const*,void>::encode(result, v3);
    }
    else
    {
      uint64_t v4 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
      return IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>>(v4, v5, v6);
    }
  }
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>>(IPC::Encoder *a1, int *a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul>(a1, a2, a3);
  }
  if (a2[2])
  {
    a1 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul>(a1, a2, a3);
  }
  char v4 = *(unsigned char *)a2;

  return (IPC::Encoder *)IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, v4);
}

IPC::Encoder *IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::Encoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul>(IPC::Encoder *result, int *a2, uint64_t a3)
{
  switch(a3)
  {
    case 1:
      if (a2[2] != 1) {
        goto LABEL_47;
      }
      char v7 = *(unsigned char *)a2;
      uint64_t result = (IPC::Encoder *)IPC::Encoder::grow(result, 1uLL, 1);
      if (!v8)
      {
        __break(0xC471u);
        JUMPOUT(0x1994C83A0);
      }
      *(unsigned char *)uint64_t result = v7;
      return result;
    case 2:
      if (a2[2] != 2) {
        goto LABEL_47;
      }
      __int16 v11 = *(_WORD *)a2;
      return (IPC::Encoder *)IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(result, v11);
    case 3:
      if (a2[2] != 3) {
        goto LABEL_47;
      }
      __int16 v11 = *(_WORD *)a2;
      return (IPC::Encoder *)IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(result, v11);
    case 4:
      if (a2[2] != 4) {
        goto LABEL_47;
      }
      int v9 = *a2;
      uint64_t result = (IPC::Encoder *)IPC::Encoder::grow(result, 4uLL, 4);
      if (v10 <= 3) {
        goto LABEL_48;
      }
      *(_DWORD *)uint64_t result = v9;
      break;
    case 5:
      if (a2[2] != 5) {
        goto LABEL_47;
      }
      return (IPC::Encoder *)IPC::Encoder::operator<<<int>(result, a2);
    case 6:
      if (a2[2] != 6) {
        goto LABEL_47;
      }
      uint64_t v12 = *(void *)a2;
      goto LABEL_38;
    case 7:
      if (a2[2] != 7) {
        goto LABEL_47;
      }
      uint64_t v12 = *(void *)a2;
      goto LABEL_38;
    case 8:
      if (a2[2] != 8) {
        goto LABEL_47;
      }
      uint64_t v12 = *(void *)a2;
LABEL_38:
      uint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(result, v12);
      break;
    case 9:
      if (a2[2] != 9) {
        goto LABEL_47;
      }
      uint64_t v3 = *(void *)a2;
      uint64_t result = (IPC::Encoder *)IPC::Encoder::grow(result, 8uLL, 8);
      if (v4 <= 7)
      {
        __break(0xC471u);
        JUMPOUT(0x1994C8380);
      }
      *(void *)uint64_t result = v3;
      break;
    case 10:
      if (a2[2] != 10) {
        goto LABEL_47;
      }
      int v5 = *a2;
      uint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(result, *(float *)&v5);
      break;
    default:
      if (a3 != 11) {
        return result;
      }
      if (a2[2] != 11)
      {
LABEL_47:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_48:
        __break(0xC471u);
        JUMPOUT(0x1994C84C8);
      }
      double v6 = *(double *)a2;
      uint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(result, v6);
      break;
  }
  return result;
}

void *IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>>(void *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 8);
  unint64_t v3 = a1[2];
  if (v3 >= a1[1])
  {
    a1[1] = 0;
  }
  else
  {
    *(unsigned char *)(*a1 + v3) = v2;
    a1[2] = v3 + 1;
  }
  return IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>>(a1, a2, v2);
}

void *IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>>(void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    return IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul>(result, a2, a3);
  }
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t result = (void *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul>(result, a2, a3);
  }
  unint64_t v3 = result[2];
  if (v3 >= result[1])
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v3) = *(unsigned char *)a2;
    result[2] = v3 + 1;
  }
  return result;
}

void *IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul>(void *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 1)
  {
    if (*(_DWORD *)(a2 + 8) == 1)
    {
      unint64_t v3 = result[2];
      if (v3 < result[1])
      {
        *(unsigned char *)(*result + v3) = *(unsigned char *)a2;
        result[2] = v3 + 1;
        return result;
      }
    }
    else
    {
      uint64_t result = (void *)std::__throw_bad_variant_access[abi:sn180100]();
    }
    result[1] = 0;
    return result;
  }

  return IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul>(result, (__int16 *)a2, a3);
}

void *IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul>(void *a1, __int16 *a2, uint64_t a3)
{
  if (a3 == 2)
  {
    if (*((_DWORD *)a2 + 2) == 2)
    {
      __int16 v4 = *a2;
      return (void *)IPC::StreamConnectionEncoder::encodeSpan<short const,18446744073709551615ul>(a1, &v4, 1);
    }
    a1 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul,2ul>(a1, (uint64_t *)a2, a3);
}

void *IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::encode<IPC::StreamConnectionEncoder,std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,0ul,1ul,2ul>(void *result, uint64_t *a2, uint64_t a3)
{
  switch(a3)
  {
    case 3:
      if (*((_DWORD *)a2 + 2) != 3) {
        goto LABEL_20;
      }
      uint64_t v3 = result[2];
      unint64_t v4 = *result + v3;
      unint64_t v5 = (v4 + 1) & 0xFFFFFFFFFFFFFFFELL;
      BOOL v6 = v5 >= v4;
      unint64_t v7 = v5 - v4;
      if (v6)
      {
        unint64_t v8 = v7 + v3;
        unint64_t v9 = v8 + 2;
        if (v8 <= 0xFFFFFFFFFFFFFFFDLL && v9 <= result[1])
        {
          *(_WORD *)(*result + v8) = *(_WORD *)a2;
          goto LABEL_51;
        }
        goto LABEL_53;
      }
      return result;
    case 4:
      if (*((_DWORD *)a2 + 2) == 4) {
        goto LABEL_22;
      }
      goto LABEL_20;
    case 5:
      goto LABEL_21;
    case 6:
      if (*((_DWORD *)a2 + 2) != 6) {
        goto LABEL_20;
      }
      goto LABEL_36;
    case 7:
      if (*((_DWORD *)a2 + 2) != 7) {
        goto LABEL_20;
      }
      goto LABEL_36;
    case 8:
      if (*((_DWORD *)a2 + 2) != 8) {
        goto LABEL_20;
      }
      uint64_t v35 = *a2;
      return (void *)IPC::StreamConnectionEncoder::encodeSpan<long long const,18446744073709551615ul>(result, &v35, 1);
    case 9:
      if (*((_DWORD *)a2 + 2) != 9) {
        goto LABEL_20;
      }
LABEL_36:
      uint64_t v23 = result[2];
      unint64_t v24 = *result + v23;
      unint64_t v25 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8;
      BOOL v6 = v25 >= v24;
      unint64_t v26 = v25 - v24;
      if (!v6) {
        return result;
      }
      unint64_t v27 = v26 + v23;
      unint64_t v9 = v27 + 8;
      if (v27 > 0xFFFFFFFFFFFFFFF7 || v9 > result[1]) {
        goto LABEL_53;
      }
      *(void *)(*result + v27) = *a2;
      goto LABEL_51;
    case 10:
      if (*((_DWORD *)a2 + 2) != 10) {
        goto LABEL_20;
      }
      uint64_t v29 = result[2];
      unint64_t v30 = *result + v29;
      unint64_t v31 = (v30 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      BOOL v6 = v31 >= v30;
      unint64_t v32 = v31 - v30;
      if (!v6) {
        return result;
      }
      unint64_t v33 = v32 + v29;
      unint64_t v9 = v33 + 4;
      if (v33 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1]) {
        goto LABEL_53;
      }
      *(_DWORD *)(*result + v33) = *(_DWORD *)a2;
      goto LABEL_51;
    default:
      if (a3 != 11) {
        return result;
      }
      if (*((_DWORD *)a2 + 2) == 11)
      {
        uint64_t v11 = result[2];
        unint64_t v12 = *result + v11;
        unint64_t v13 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
        BOOL v6 = v13 >= v12;
        unint64_t v14 = v13 - v12;
        if (!v6) {
          return result;
        }
        unint64_t v15 = v14 + v11;
        unint64_t v9 = v15 + 8;
        if (v15 <= 0xFFFFFFFFFFFFFFF7 && v9 <= result[1])
        {
          *(void *)(*result + v15) = *a2;
LABEL_51:
          result[2] = v9;
          return result;
        }
LABEL_53:
        result[1] = 0;
        return result;
      }
      do
      {
LABEL_20:
        uint64_t result = (void *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_21:
        ;
      }
      while (*((_DWORD *)a2 + 2) != 5);
LABEL_22:
      uint64_t v17 = result[2];
      unint64_t v18 = *result + v17;
      unint64_t v19 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      BOOL v6 = v19 >= v18;
      unint64_t v20 = v19 - v18;
      if (v6)
      {
        unint64_t v21 = v20 + v17;
        unint64_t v9 = v21 + 4;
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v9 <= result[1])
        {
          *(_DWORD *)(*result + v21) = *(_DWORD *)a2;
          goto LABEL_51;
        }
        goto LABEL_53;
      }
      return result;
  }
}

uint64_t IPC::StreamConnectionEncoder::encodeSpan<short const,18446744073709551615ul>(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v3 = a1[2];
  unint64_t v4 = *a1 + v3;
  unint64_t v5 = (v4 + 1) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (!v6) {
    return 0;
  }
  size_t v10 = 2 * a3;
  uint64_t v11 = v7 + v3;
  size_t v12 = v11 + v10;
  if (__CFADD__(v11, v10) || v12 > a1[1])
  {
    uint64_t result = 0;
    a1[1] = 0;
  }
  else
  {
    memcpy((void *)(*a1 + v11), a2, v10);
    a1[2] = v12;
    return 1;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::variant<char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double>,void>::decode<IPC::Decoder>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *(void *)result;
  unint64_t v5 = *(void *)(result + 16) - *(void *)result;
  if (v3 <= v5)
  {
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    uint64_t v26 = *(void *)(result + 24);
    if (v26)
    {
      uint64_t v35 = (uint64_t *)result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v26 + 16))(v26);
        uint64_t result = (uint64_t)v35;
        uint64_t v25 = *v35;
        unint64_t v24 = v35[1];
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = 0;
      }
    }
    goto LABEL_36;
  }
  BOOL v6 = (unsigned __int8 *)(v4 + v5);
  uint64_t v7 = v4 + v5 + 1;
  *(void *)(result + 16) = v7;
  if (!v4)
  {
    unint64_t v24 = v3;
    uint64_t v25 = 0;
LABEL_36:
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    uint64_t result = *(void *)(result + 24);
    if (result && v24) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)result + 16))(result, v25, v24);
    }
    goto LABEL_40;
  }
  unsigned int v8 = *v6;
  if (v8 >= 0xC) {
    goto LABEL_40;
  }
  if (!*v6)
  {
    uint64_t result = IPC::Decoder::decode<char>((uint64_t *)result);
    if ((unsigned __int16)result > 0xFFu)
    {
      *(unsigned char *)a2 = result;
      *(_DWORD *)(a2 + 8) = 0;
      goto LABEL_18;
    }
    goto LABEL_40;
  }
  switch(v8)
  {
    case 1u:
      if (v3 > v7 - v4)
      {
        *(void *)(result + 16) = v6 + 2;
        *(unsigned char *)a2 = v6[1];
        char v13 = 1;
        *(_DWORD *)(a2 + 8) = 1;
        goto LABEL_19;
      }
      goto LABEL_41;
    case 2u:
      uint64_t result = IPC::Decoder::decode<short>((IPC::Decoder *)result);
      if ((result & 0xFF0000) != 0)
      {
        *(_WORD *)a2 = result;
        int v12 = 2;
        goto LABEL_17;
      }
      goto LABEL_40;
    case 3u:
      uint64_t result = IPC::Decoder::decode<unsigned short>((void *)result);
      if ((result & 0xFF0000) != 0)
      {
        *(_WORD *)a2 = result;
        int v12 = 3;
        goto LABEL_17;
      }
      goto LABEL_40;
    case 4u:
      unint64_t v20 = ((v7 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v4;
      if (v3 >= v20 && v3 - v20 > 3)
      {
        uint64_t v22 = (int *)(v4 + v20);
        int v23 = *v22;
        *(void *)(result + 16) = v22 + 1;
        *(_DWORD *)a2 = v23;
        int v12 = 4;
        goto LABEL_17;
      }
      goto LABEL_41;
    case 5u:
      uint64_t result = IPC::Decoder::decode<unsigned int>((void *)result);
      if ((result & 0xFF00000000) != 0)
      {
        *(_DWORD *)a2 = result;
        int v12 = 5;
        goto LABEL_17;
      }
      goto LABEL_40;
    case 6u:
      uint64_t result = IPC::Decoder::decode<long>((void *)result);
      if (v30)
      {
        *(void *)a2 = result;
        int v12 = 6;
        goto LABEL_17;
      }
      goto LABEL_40;
    case 7u:
      uint64_t result = IPC::Decoder::decode<unsigned long long>((void *)result);
      if (v31)
      {
        *(void *)a2 = result;
        int v12 = 7;
        goto LABEL_17;
      }
      goto LABEL_40;
    case 8u:
      uint64_t result = IPC::Decoder::decode<long long>((IPC::Decoder *)result);
      if (v32)
      {
        *(void *)a2 = result;
        int v12 = 8;
        goto LABEL_17;
      }
      goto LABEL_40;
  }
  if (v8 != 9)
  {
    if (v8 == 10)
    {
      unint64_t v14 = ((v7 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v4;
      if (v3 >= v14 && v3 - v14 > 3)
      {
        unint64_t v15 = (int *)(v4 + v14);
        int v16 = *v15;
        *(void *)(result + 16) = v15 + 1;
        *(_DWORD *)a2 = v16;
        int v12 = 10;
        goto LABEL_17;
      }
LABEL_39:
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      uint64_t v27 = *(void *)(result + 24);
      if (v27)
      {
        unint64_t v33 = (uint64_t *)result;
        (*(void (**)(void))(*(void *)v27 + 16))(*(void *)(result + 24));
        uint64_t v28 = *v33;
        uint64_t v29 = v33[1];
        uint64_t result = v33[3];
        *unint64_t v33 = 0;
        v33[1] = 0;
        if (result) {
          goto LABEL_61;
        }
      }
      goto LABEL_40;
    }
    unint64_t v17 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
    if (v3 >= v17 && v3 - v17 > 7)
    {
      unint64_t v18 = (uint64_t *)(v4 + v17);
      uint64_t v19 = *v18;
      *(void *)(result + 16) = v18 + 1;
      *(void *)a2 = v19;
      int v12 = 11;
      goto LABEL_17;
    }
LABEL_41:
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    uint64_t v34 = (uint64_t *)result;
    uint64_t result = *(void *)(result + 24);
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)result + 16))(result);
      uint64_t v28 = *v34;
      uint64_t v29 = v34[1];
      uint64_t result = v34[3];
      *uint64_t v34 = 0;
      v34[1] = 0;
      if (result)
      {
LABEL_61:
        if (v29) {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v28);
        }
      }
    }
LABEL_40:
    char v13 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_19;
  }
  unint64_t v9 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v4;
  if (v3 < v9 || v3 - v9 <= 7) {
    goto LABEL_39;
  }
  size_t v10 = (uint64_t *)(v4 + v9);
  uint64_t v11 = *v10;
  *(void *)(result + 16) = v10 + 1;
  *(void *)a2 = v11;
  int v12 = 9;
LABEL_17:
  *(_DWORD *)(a2 + 8) = v12;
LABEL_18:
  char v13 = 1;
LABEL_19:
  *(unsigned char *)(a2 + 16) = v13;
  return result;
}

unint64_t WebKit::WebPushMessage::fromDictionary@<X0>(WebKit::WebPushMessage *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = [(WebKit::WebPushMessage *)this objectForKey:@"WebKitPushRegistrationURL"];
  if (!result) {
    goto LABEL_9;
  }
  unint64_t v6 = result;
  objc_opt_class();
  unint64_t result = objc_opt_isKindOfClass();
  if ((result & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v7 = (void *)[(WebKit::WebPushMessage *)this objectForKey:@"WebKitPushData"];
  char v8 = objc_msgSend(v7, "isEqual:", objc_msgSend(MEMORY[0x1E4F1CA98], "null"));
  objc_opt_class();
  unint64_t result = objc_opt_isKindOfClass();
  char v9 = result;
  if ((v8 & 1) == 0 && (result & 1) == 0) {
    goto LABEL_9;
  }
  unint64_t result = [(WebKit::WebPushMessage *)this objectForKey:@"WebKitPushPartition"];
  if (!result
    || (unint64_t v10 = result, objc_opt_class(), result = objc_opt_isKindOfClass(), (result & 1) == 0)
    || (uint64_t v11 = (void *)[(WebKit::WebPushMessage *)this objectForKey:@"WebKitNotificationPayload"],
        char v12 = objc_msgSend(v11, "isEqual:", objc_msgSend(MEMORY[0x1E4F1CA98], "null")),
        objc_opt_class(),
        unint64_t result = objc_opt_isKindOfClass(),
        (v12 & 1) == 0)
    && (result & 1) == 0)
  {
LABEL_9:
    *a2 = 0;
    a2[216] = 0;
    return result;
  }
  LOBYTE(v48[0]) = 0;
  unsigned __int8 v60 = 0;
  if (result)
  {
    WebCore::NotificationPayload::fromDictionary((uint64_t *)&v38, (WebCore::NotificationPayload *)v11, v13);
    if (v60 == v47[64])
    {
      if (v60)
      {
        WTF::URL::operator=((uint64_t)v48, (uint64_t)&v38);
        int v16 = v43;
        int v43 = 0;
        unint64_t v17 = v49;
        int v49 = v16;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            WTF::StringImpl::destroy(v17, v15);
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
        uint64_t v50 = v44;
        char v51 = v45;
        std::__optional_storage_base<WebCore::NotificationOptionsPayload,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::NotificationOptionsPayload,false>>((WebCore::ApplePayInstallmentItem *)&v52, (uint64_t)&v46);
        char v59 = v47[56];
      }
    }
    else if (v60)
    {
      if (v58)
      {
        unint64_t v18 = v57;
        int v57 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v14);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
        uint64_t v19 = v56;
        int v56 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v14);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
        unint64_t v20 = v55;
        int v55 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2) {
            WTF::StringImpl::destroy(v20, v14);
          }
          else {
            *(_DWORD *)v20 -= 2;
          }
        }
        unint64_t v21 = v54;
        int v54 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v14);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
        uint64_t v22 = v53;
        int v53 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, v14);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
      }
      int v23 = v49;
      int v49 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v14);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      unint64_t v24 = (WTF::StringImpl *)v48[0];
      v48[0] = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v14);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      unsigned __int8 v60 = 0;
    }
    else
    {
      std::construct_at[abi:sn180100]<WebCore::NotificationPayload,WebCore::NotificationPayload,WebCore::NotificationPayload*>((uint64_t)v48, (uint64_t)&v38);
      unsigned __int8 v60 = 1;
    }
    std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v38, v14);
    if (!v60)
    {
      *a2 = 0;
      a2[216] = 0;
      return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v48, v25);
    }
  }
  LOBYTE(v38) = 0;
  char v40 = 0;
  MEMORY[0x19972EAD0](&v41, v10);
  MEMORY[0x19972E8A0](&v42, v6);
  std::__optional_move_base<WebCore::NotificationPayload,false>::__optional_move_base[abi:sn180100](v47, (uint64_t)v48);
  if ((v9 & 1) == 0)
  {
LABEL_59:
    WebKit::WebPushMessage::WebPushMessage((uint64_t)a2, (uint64_t *)&v38);
    a2[216] = 1;
    std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v47, v32);
    unint64_t v33 = v42;
    int v42 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, v25);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
    uint64_t v34 = v41;
    int v41 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, v25);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
    if (v40)
    {
      uint64_t v35 = v38;
      if (v38)
      {
        int v38 = 0;
        int v39 = 0;
        WTF::fastFree(v35, v25);
      }
    }
    return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v48, v25);
  }
  if (!v7)
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_57;
  }
  uint64_t v26 = (char *)[v7 bytes];
  unint64_t result = [v7 length];
  unint64_t v27 = result;
  uint64_t v36 = 0;
  LODWORD(v37) = 0;
  HIDWORD(v37) = result;
  if (!result) {
    goto LABEL_57;
  }
  if (!HIDWORD(result))
  {
    uint64_t v28 = (WTF *)WTF::fastMalloc((WTF *)result);
    LODWORD(v37) = v27;
    uint64_t v36 = v28;
    do
    {
      char v29 = *v26++;
      *(unsigned char *)uint64_t v28 = v29;
      uint64_t v28 = (WTF *)((char *)v28 + 1);
      --v27;
    }
    while (v27);
LABEL_57:
    std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)&v38, (uint64_t)&v36);
    char v31 = v36;
    if (v36)
    {
      uint64_t v36 = 0;
      LODWORD(v37) = 0;
      WTF::fastFree(v31, v30);
    }
    goto LABEL_59;
  }
  __break(0xC471u);
  return result;
}

void sub_1994C9150(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, WTF *a12, int a13, int a14, char a15, WTF::StringImpl *a16, WTF::StringImpl *a17)
{
  if (a10) {
    WTF::fastFree(a10, a2);
  }
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](v17, (WTF::StringImpl *)a2);
  if (a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, v20);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, v20);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (a15)
  {
    if (a12) {
      WTF::fastFree(a12, v20);
    }
  }
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](v18 - 208, v20);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPushMessage::toDictionary(WebKit::WebPushMessage *this)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 16))
  {
    uint64_t v2 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:*(void *)this length:*((unsigned int *)this + 3)];
    unint64_t v3 = v2;
    if (v2)
    {
      CFRetain(v2);
      CFRelease(v3);
    }
  }
  else
  {
    unint64_t v3 = 0;
  }
  if (*((unsigned char *)this + 208)) {
    uint64_t v4 = WebCore::NotificationPayload::dictionaryRepresentation((WebKit::WebPushMessage *)((char *)this + 72));
  }
  else {
    uint64_t v4 = 0;
  }
  v9[0] = @"WebKitPushData";
  uint64_t v5 = (uint64_t)v3;
  if (!v3) {
    uint64_t v5 = [MEMORY[0x1E4F1CA98] null];
  }
  v10[0] = v5;
  v9[1] = @"WebKitPushRegistrationURL";
  v10[1] = WTF::URL::operator NSURL *();
  void v9[2] = @"WebKitPushPartition";
  if (*((void *)this + 3)) {
    unint64_t v6 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    unint64_t v6 = &stru_1EEA10550;
  }
  void v10[2] = v6;
  v9[3] = @"WebKitNotificationPayload";
  if (!v4) {
    uint64_t v4 = [MEMORY[0x1E4F1CA98] null];
  }
  v10[3] = v4;
  uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v10 forKeys:v9 count:4];
  if (v3) {
    CFRelease(v3);
  }
  return v7;
}

void sub_1994C9398(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1F41138B8]();
}

uint64_t CABackingStoreCollectBlocking()
{
  return MEMORY[0x1F40F4A38]();
}

CFTimeInterval CACurrentMediaTime(void)
{
  MEMORY[0x1F40F4A90]();
  return result;
}

CAFrameRateRange CAFrameRateRangeMake(float minimum, float maximum, float preferred)
{
  MEMORY[0x1F40F4AC8](minimum, maximum, preferred);
  result.preferred = v5;
  result.maximum = v4;
  result.minimum = v3;
  return result;
}

uint64_t CAMachPortCreate()
{
  return MEMORY[0x1F40F4C08]();
}

uint64_t CAMachPortGetPort()
{
  return MEMORY[0x1F40F4C10]();
}

uint64_t CAMachPortGetTypeID()
{
  return MEMORY[0x1F40F4C18]();
}

uint64_t CARenderServerRenderDisplayLayerWithTransformAndTimeOffset()
{
  return MEMORY[0x1F40F4C98]();
}

uint64_t CARenderServerRenderLayerWithTransform()
{
  return MEMORY[0x1F40F4CA0]();
}

CATransform3D *__cdecl CATransform3DMakeScale(CATransform3D *__return_ptr retstr, CGFloat sx, CGFloat sy, CGFloat sz)
{
  return (CATransform3D *)MEMORY[0x1F40F4D20](retstr, sx, sy, sz);
}

CATransform3D *__cdecl CATransform3DTranslate(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat tx, CGFloat ty, CGFloat tz)
{
  return (CATransform3D *)MEMORY[0x1F40F4D68](retstr, t, tx, ty, tz);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1F40D70F8](allocator, context);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1F40D72D8](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFURLRef CFBundleCopyResourcesDirectoryURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1F40D7500](bundle);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1F40D7538](bundleID);
}

void *__cdecl CFBundleGetFunctionPointerForName(CFBundleRef bundle, CFStringRef functionName)
{
  return (void *)MEMORY[0x1F40D7558](bundle, functionName);
}

CFDataRef CFCharacterSetCreateBitmapRepresentation(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFDataRef)MEMORY[0x1F40D7700](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetCreateWithBitmapRepresentation(CFAllocatorRef alloc, CFDataRef theData)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7728](alloc, theData);
}

CFTypeID CFCharacterSetGetTypeID(void)
{
  return MEMORY[0x1F40D7748]();
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7808](allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1F40D7818](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1F40D7858](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

void CFDataIncreaseLength(CFMutableDataRef theData, CFIndex extraLength)
{
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1F40D7898](allocator, at);
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  MEMORY[0x1F40D7928](theDate);
  return result;
}

CFTypeID CFDateGetTypeID(void)
{
  return MEMORY[0x1F40D7938]();
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7990](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

uint64_t CFHTTPCookieStorageCreateFromFile()
{
  return MEMORY[0x1F40D5228]();
}

uint64_t CFHTTPCookieStorageCreateFromIdentifyingData()
{
  return MEMORY[0x1F40D5238]();
}

uint64_t CFHTTPCookieStorageCreateIdentifyingData()
{
  return MEMORY[0x1F40D5240]();
}

uint64_t CFHTTPCookieStorageScheduleWithRunLoop()
{
  return MEMORY[0x1F40D5260]();
}

uint64_t CFHTTPCookieStorageSetCookieAcceptPolicy()
{
  return MEMORY[0x1F40D5270]();
}

CFStringRef CFHTTPMessageCopyResponseStatusLine(CFHTTPMessageRef response)
{
  return (CFStringRef)MEMORY[0x1F40D52B0](response);
}

CFTypeRef CFMakeCollectable(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D7CA0](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D20]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFTypeID CFNullGetTypeID(void)
{
  return MEMORY[0x1F40D7D68]();
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E08](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7ED0](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE8](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1F40D7F10](applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F50](allocator, data, options, format, error);
}

CFIndex CFPropertyListWrite(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return MEMORY[0x1F40D7F70](propertyList, stream, format, options, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B8]();
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
}

void CFRunLoopRun(void)
{
}

void CFRunLoopStop(CFRunLoopRef rl)
{
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
}

CFStringRef CFStringConvertEncodingToIANACharSetName(CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D83A0](*(void *)&encoding);
}

CFStringEncoding CFStringConvertNSStringEncodingToEncoding(unint64_t encoding)
{
  return MEMORY[0x1F40D83C0](encoding);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8458](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1F40D8460](alloc, chars, numChars);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1F40D8758](anURL, pathStyle);
}

CFURLRef CFURLCreateAbsoluteURLWithBytes(CFAllocatorRef alloc, const UInt8 *relativeURLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL, Boolean useCompatibilityMode)
{
  return (CFURLRef)MEMORY[0x1F40D87D8](alloc, relativeURLBytes, length, *(void *)&encoding, baseURL, useCompatibilityMode);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D87F8](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateFilePathURL(CFAllocatorRef allocator, CFURLRef url, CFErrorRef *error)
{
  return (CFURLRef)MEMORY[0x1F40D8830](allocator, url, error);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D8848](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLGetBaseURL(CFURLRef anURL)
{
  return (CFURLRef)MEMORY[0x1F40D88F0](anURL);
}

CFIndex CFURLGetBytes(CFURLRef url, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1F40D8900](url, buffer, bufferLength);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1F40D8928]();
}

uint64_t CFURLResponseGetHTTPResponse()
{
  return MEMORY[0x1F40D54F8]();
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
}

CFTypeRef CFWriteStreamCopyProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName)
{
  return (CFTypeRef)MEMORY[0x1F40D8A90](stream, propertyName);
}

CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(CFAllocatorRef alloc, CFAllocatorRef bufferAllocator)
{
  return (CFWriteStreamRef)MEMORY[0x1F40D8AA0](alloc, bufferAllocator);
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return MEMORY[0x1F40D8AD0](stream);
}

CFIndex CFWriteStreamWrite(CFWriteStreamRef stream, const UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1F40D8B08](stream, buffer, bufferLength);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x1F40D9790](retstr, t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97A8](retstr, t);
}

BOOL CGAffineTransformIsIdentity(CGAffineTransform *t)
{
  return MEMORY[0x1F40D97B0](t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97C8](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D0](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D8](retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97F0](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97F8](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1F40D9808](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1F40D9818](context);
}

void *__cdecl CGBitmapContextGetData(CGContextRef context)
{
  return (void *)MEMORY[0x1F40D9868](context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1F40D9970](space, components);
}

CGFloat CGColorGetAlpha(CGColorRef color)
{
  MEMORY[0x1F40D99F0](color);
  return result;
}

CFTypeID CGColorGetTypeID(void)
{
  return MEMORY[0x1F40D9A30]();
}

CFPropertyListRef CGColorSpaceCopyPropertyList(CGColorSpaceRef space)
{
  return (CFPropertyListRef)MEMORY[0x1F40D9AC0](space);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B60](name);
}

CGColorSpaceRef CGColorSpaceCreateWithPropertyList(CFPropertyListRef plist)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B70](plist);
}

CFStringRef CGColorSpaceGetName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x1F40D9BE8](space);
}

CFTypeID CGColorSpaceGetTypeID(void)
{
  return MEMORY[0x1F40D9C10]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

BOOL CGColorSpaceSupportsOutput(CGColorSpaceRef space)
{
  return MEMORY[0x1F40D9C58](space);
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
}

void CGContextBeginTransparencyLayer(CGContextRef c, CFDictionaryRef auxiliaryInfo)
{
}

void CGContextClearRect(CGContextRef c, CGRect rect)
{
}

void CGContextClipToRect(CGContextRef c, CGRect rect)
{
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextDrawPDFPage(CGContextRef c, CGPDFPageRef page)
{
}

void CGContextDrawPath(CGContextRef c, CGPathDrawingMode mode)
{
}

void CGContextEndTransparencyLayer(CGContextRef c)
{
}

void CGContextRestoreGState(CGContextRef c)
{
}

void CGContextSaveGState(CGContextRef c)
{
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
}

void CGContextSetAllowsFontSubpixelPositioning(CGContextRef c, BOOL allowsFontSubpixelPositioning)
{
}

void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
{
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
}

void CGContextSetLineJoin(CGContextRef c, CGLineJoin join)
{
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
}

void CGContextSetShouldSubpixelQuantizeFonts(CGContextRef c, BOOL shouldSubpixelQuantizeFonts)
{
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

CGDataConsumerRef CGDataConsumerCreateWithCFData(CFMutableDataRef data)
{
  return (CGDataConsumerRef)MEMORY[0x1F40DA2C0](data);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA300](data);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
}

uint64_t CGEnterLockdownModeForPDF()
{
  return MEMORY[0x1F40DA398]();
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1F40DA868](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(void *)&bitmapInfo, provider);
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x1F40DA890](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGImageRef CGImageCreateWithJPEGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1F40DA8A0](source, decode, shouldInterpolate, *(void *)&intent);
}

CGImageRef CGImageCreateWithPNGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1F40DA8B8](source, decode, shouldInterpolate, *(void *)&intent);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1F40E9738](data, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1F40E9760](idst);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x1F40DA908](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1F40DA948](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1F40DA9B8](image);
}

void CGImageRelease(CGImageRef image)
{
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1F40E9968](isrc, index, options);
}

CGImageRef CGImageSourceCreateThumbnailAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1F40E9988](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1F40E9998](data, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1F40E99C8](url, options);
}

uint64_t CGImageSourceDisableHardwareDecoding()
{
  return MEMORY[0x1F40E99D0]();
}

uint64_t CGImageSourceEnableRestrictedDecoding()
{
  return MEMORY[0x1F40E99E8]();
}

size_t CGPDFArrayGetCount(CGPDFArrayRef array)
{
  return MEMORY[0x1F40DAB78](array);
}

BOOL CGPDFArrayGetDictionary(CGPDFArrayRef array, size_t index, CGPDFDictionaryRef *value)
{
  return MEMORY[0x1F40DAB80](array, index, value);
}

BOOL CGPDFArrayGetObject(CGPDFArrayRef array, size_t index, CGPDFObjectRef *value)
{
  return MEMORY[0x1F40DAB98](array, index, value);
}

void CGPDFContextBeginPage(CGContextRef context, CFDictionaryRef pageInfo)
{
}

void CGPDFContextClose(CGContextRef context)
{
}

CGContextRef CGPDFContextCreate(CGDataConsumerRef consumer, const CGRect *mediaBox, CFDictionaryRef auxiliaryInfo)
{
  return (CGContextRef)MEMORY[0x1F40DABC0](consumer, mediaBox, auxiliaryInfo);
}

void CGPDFContextEndPage(CGContextRef context)
{
}

BOOL CGPDFDictionaryGetArray(CGPDFDictionaryRef dict, const char *key, CGPDFArrayRef *value)
{
  return MEMORY[0x1F40DABE8](dict, key, value);
}

BOOL CGPDFDictionaryGetDictionary(CGPDFDictionaryRef dict, const char *key, CGPDFDictionaryRef *value)
{
  return MEMORY[0x1F40DABF0](dict, key, value);
}

BOOL CGPDFDictionaryGetName(CGPDFDictionaryRef dict, const char *key, const char **value)
{
  return MEMORY[0x1F40DABF8](dict, key, value);
}

BOOL CGPDFDictionaryGetStream(CGPDFDictionaryRef dict, const char *key, CGPDFStreamRef *value)
{
  return MEMORY[0x1F40DAC10](dict, key, value);
}

BOOL CGPDFDictionaryGetString(CGPDFDictionaryRef dict, const char *key, CGPDFStringRef *value)
{
  return MEMORY[0x1F40DAC18](dict, key, value);
}

BOOL CGPDFDocumentAllowsPrinting(CGPDFDocumentRef document)
{
  return MEMORY[0x1F40DAC28](document);
}

CGPDFDocumentRef CGPDFDocumentCreateWithProvider(CGDataProviderRef provider)
{
  return (CGPDFDocumentRef)MEMORY[0x1F40DAC48](provider);
}

CGPDFDictionaryRef CGPDFDocumentGetCatalog(CGPDFDocumentRef document)
{
  return (CGPDFDictionaryRef)MEMORY[0x1F40DAC60](document);
}

size_t CGPDFDocumentGetNumberOfPages(CGPDFDocumentRef document)
{
  return MEMORY[0x1F40DAC88](document);
}

CGPDFPageRef CGPDFDocumentGetPage(CGPDFDocumentRef document, size_t pageNumber)
{
  return (CGPDFPageRef)MEMORY[0x1F40DAC90](document, pageNumber);
}

uint64_t CGPDFDocumentIsTaggedPDF()
{
  return MEMORY[0x1F40DACA8]();
}

BOOL CGPDFDocumentIsUnlocked(CGPDFDocumentRef document)
{
  return MEMORY[0x1F40DACB0](document);
}

BOOL CGPDFDocumentUnlockWithPassword(CGPDFDocumentRef document, const char *password)
{
  return MEMORY[0x1F40DACC8](document, password);
}

BOOL CGPDFObjectGetValue(CGPDFObjectRef object, CGPDFObjectType type, void *value)
{
  return MEMORY[0x1F40DAD60](object, *(void *)&type, value);
}

CGRect CGPDFPageGetBoxRect(CGPDFPageRef page, CGPDFBox box)
{
  MEMORY[0x1F40DAD80](page, *(void *)&box);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.CGFloat y = v3;
  result.origin.x = v2;
  return result;
}

CGAffineTransform *__cdecl CGPDFPageGetDrawingTransform(CGAffineTransform *__return_ptr retstr, CGPDFPageRef page, CGPDFBox box, CGRect rect, int rotate, BOOL preserveAspectRatio)
{
  return (CGAffineTransform *)MEMORY[0x1F40DAD98](retstr, page, *(void *)&box, *(void *)&rotate, preserveAspectRatio, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

uint64_t CGPDFPageLayoutGetAreaOfInterestAtPoint()
{
  return MEMORY[0x1F40DADC8]();
}

CFDataRef CGPDFStreamCopyData(CGPDFStreamRef stream, CGPDFDataFormat *format)
{
  return (CFDataRef)MEMORY[0x1F40DAF50](stream, format);
}

const unsigned __int8 *__cdecl CGPDFStringGetBytePtr(CGPDFStringRef string)
{
  return (const unsigned __int8 *)MEMORY[0x1F40DAF60](string);
}

size_t CGPDFStringGetLength(CGPDFStringRef string)
{
  return MEMORY[0x1F40DAF68](string);
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1F40DB068]();
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  MEMORY[0x1F40DB220](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.CGFloat y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x1F40DB228]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB230]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB248]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x1F40DB250]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x1F40DB268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x1F40DB270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x1F40DB280]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x1F40DB288]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x1F40DB298]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x1F40DB2A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x1F40DB2A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x1F40DB2B8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.CGFloat y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  MEMORY[0x1F40DB2C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.CGFloat y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB2C8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.CGFloat y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB2D0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1F40DB2D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1F40DB2E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x1F40DB2F8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.CGFloat y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectStandardize(CGRect rect)
{
  MEMORY[0x1F40DB300]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.CGFloat y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB310]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.CGFloat y = v3;
  result.origin.x = v2;
  return result;
}

CFTypeRef CTFontCopyAttribute(CTFontRef font, CFStringRef attribute)
{
  return (CFTypeRef)MEMORY[0x1F40DF270](font, attribute);
}

DNSServiceErrorType DNSServiceCreateConnection(DNSServiceRef *sdRef)
{
  return MEMORY[0x1F40C9820](sdRef);
}

void DNSServiceRefDeallocate(DNSServiceRef sdRef)
{
}

DNSServiceErrorType DNSServiceRegisterRecord(DNSServiceRef sdRef, DNSRecordRef *RecordRef, DNSServiceFlags flags, uint32_t interfaceIndex, const char *fullname, uint16_t rrtype, uint16_t rrclass, uint16_t rdlen, const void *rdata, uint32_t ttl, DNSServiceRegisterRecordReply callBack, void *context)
{
  return MEMORY[0x1F40C9890](sdRef, RecordRef, *(void *)&flags, *(void *)&interfaceIndex, fullname, rrtype, rrclass, rdlen);
}

DNSServiceErrorType DNSServiceSetDispatchQueue(DNSServiceRef service, dispatch_queue_t queue)
{
  return MEMORY[0x1F40C98B0](service, queue);
}

uint64_t GSCurrentEventTimestamp()
{
  return MEMORY[0x1F411C878]();
}

uint64_t GSEventGetHardwareKeyboardCountry()
{
  return MEMORY[0x1F411C8B0]();
}

uint64_t GSEventGetHardwareKeyboardType()
{
  return MEMORY[0x1F411C8B8]();
}

uint64_t GSEventIsHardwareKeyboardAttached()
{
  return MEMORY[0x1F411C8F8]();
}

uint64_t GSEventSetHardwareKeyboardAttachedWithCountryCodeAndType()
{
  return MEMORY[0x1F411C940]();
}

uint64_t GSInitialize()
{
  return MEMORY[0x1F411C960]();
}

uint64_t GSSystemRootDirectory()
{
  return MEMORY[0x1F411CA28]();
}

IOReturn IOHIDDeviceClose(IOHIDDeviceRef device, IOOptionBits options)
{
  return MEMORY[0x1F40E8798](device, *(void *)&options);
}

IOReturn IOHIDDeviceOpen(IOHIDDeviceRef device, IOOptionBits options)
{
  return MEMORY[0x1F40E87E8](device, *(void *)&options);
}

void IOHIDDeviceRegisterInputReportCallback(IOHIDDeviceRef device, uint8_t *report, CFIndex reportLength, IOHIDReportCallback callback, void *context)
{
}

void IOHIDDeviceScheduleWithRunLoop(IOHIDDeviceRef device, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

IOReturn IOHIDDeviceSetReport(IOHIDDeviceRef device, IOHIDReportType reportType, CFIndex reportID, const uint8_t *report, CFIndex reportLength)
{
  return MEMORY[0x1F40E8848](device, *(void *)&reportType, reportID, report, reportLength);
}

void IOHIDDeviceUnscheduleFromRunLoop(IOHIDDeviceRef device, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

uint64_t IOHIDEventAppendEvent()
{
  return MEMORY[0x1F40E88D8]();
}

uint64_t IOHIDEventCreateDigitizerEvent()
{
  return MEMORY[0x1F40E8910]();
}

uint64_t IOHIDEventCreateDigitizerFingerEvent()
{
  return MEMORY[0x1F40E8918]();
}

uint64_t IOHIDEventCreateVendorDefinedEvent()
{
  return MEMORY[0x1F40E89A0]();
}

uint64_t IOHIDEventGetIntegerValue()
{
  return MEMORY[0x1F40E8A00]();
}

uint64_t IOHIDEventGetType()
{
  return MEMORY[0x1F40E8A38]();
}

uint64_t IOHIDEventSetFloatValue()
{
  return MEMORY[0x1F40E8A78]();
}

uint64_t IOHIDEventSetIntegerValue()
{
  return MEMORY[0x1F40E8A80]();
}

uint64_t IOHIDEventSystemClientCreate()
{
  return MEMORY[0x1F40E8AC0]();
}

IOReturn IOHIDManagerClose(IOHIDManagerRef manager, IOOptionBits options)
{
  return MEMORY[0x1F40E8C50](manager, *(void *)&options);
}

IOHIDManagerRef IOHIDManagerCreate(CFAllocatorRef allocator, IOOptionBits options)
{
  return (IOHIDManagerRef)MEMORY[0x1F40E8C68](allocator, *(void *)&options);
}

IOReturn IOHIDManagerOpen(IOHIDManagerRef manager, IOOptionBits options)
{
  return MEMORY[0x1F40E8C80](manager, *(void *)&options);
}

void IOHIDManagerRegisterDeviceMatchingCallback(IOHIDManagerRef manager, IOHIDDeviceCallback callback, void *context)
{
}

void IOHIDManagerRegisterDeviceRemovalCallback(IOHIDManagerRef manager, IOHIDDeviceCallback callback, void *context)
{
}

void IOHIDManagerScheduleWithRunLoop(IOHIDManagerRef manager, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

void IOHIDManagerSetDeviceMatching(IOHIDManagerRef manager, CFDictionaryRef matching)
{
}

void IOHIDManagerUnscheduleFromRunLoop(IOHIDManagerRef manager, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

mach_port_t IOSurfaceCreateMachPort(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9318](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x1F40E9358](buffer);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1F40E9540](buffer, *(void *)&options, seed);
}

IOSurfaceRef IOSurfaceLookupFromMachPort(mach_port_t port)
{
  return (IOSurfaceRef)MEMORY[0x1F40E9558](*(void *)&port);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1F40E9630](buffer, *(void *)&options, seed);
}

uint64_t InitWebCoreThreadSystemInterface()
{
  return MEMORY[0x1F416BB38]();
}

JSClassRef JSClassCreate(const JSClassDefinition *definition)
{
  return (JSClassRef)MEMORY[0x1F40E9BD0](definition);
}

JSGlobalContextRef JSContextGetGlobalContext(JSContextRef ctx)
{
  return (JSGlobalContextRef)MEMORY[0x1F40E9BD8](ctx);
}

JSObjectRef JSContextGetGlobalObject(JSContextRef ctx)
{
  return (JSObjectRef)MEMORY[0x1F40E9BE0](ctx);
}

JSValueRef JSEvaluateScript(JSContextRef ctx, JSStringRef script, JSObjectRef thisObject, JSStringRef sourceURL, int startingLineNumber, JSValueRef *exception)
{
  return (JSValueRef)MEMORY[0x1F40E9BF8](ctx, script, thisObject, sourceURL, *(void *)&startingLineNumber, exception);
}

JSGlobalContextRef JSGlobalContextCreate(JSClassRef globalObjectClass)
{
  return (JSGlobalContextRef)MEMORY[0x1F40E9C08](globalObjectClass);
}

void JSGlobalContextRelease(JSGlobalContextRef ctx)
{
}

JSGlobalContextRef JSGlobalContextRetain(JSGlobalContextRef ctx)
{
  return (JSGlobalContextRef)MEMORY[0x1F40E9C20](ctx);
}

JSValueRef JSObjectCallAsFunction(JSContextRef ctx, JSObjectRef object, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef *exception)
{
  return (JSValueRef)MEMORY[0x1F40E9C30](ctx, object, thisObject, argumentCount, arguments, exception);
}

JSPropertyNameArrayRef JSObjectCopyPropertyNames(JSContextRef ctx, JSObjectRef object)
{
  return (JSPropertyNameArrayRef)MEMORY[0x1F40E9C38](ctx, object);
}

void *__cdecl JSObjectGetPrivate(JSObjectRef object)
{
  return (void *)MEMORY[0x1F40E9C58](object);
}

JSValueRef JSObjectGetProperty(JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef *exception)
{
  return (JSValueRef)MEMORY[0x1F40E9C60](ctx, object, propertyName, exception);
}

JSValueRef JSObjectGetPropertyAtIndex(JSContextRef ctx, JSObjectRef object, unsigned int propertyIndex, JSValueRef *exception)
{
  return (JSValueRef)MEMORY[0x1F40E9C68](ctx, object, *(void *)&propertyIndex, exception);
}

JSValueRef JSObjectGetPropertyForKey(JSContextRef ctx, JSObjectRef object, JSValueRef propertyKey, JSValueRef *exception)
{
  return (JSValueRef)MEMORY[0x1F40E9C70](ctx, object, propertyKey, exception);
}

size_t JSObjectGetTypedArrayByteLength(JSContextRef ctx, JSObjectRef object, JSValueRef *exception)
{
  return MEMORY[0x1F40E9C80](ctx, object, exception);
}

void *__cdecl JSObjectGetTypedArrayBytesPtr(JSContextRef ctx, JSObjectRef object, JSValueRef *exception)
{
  return (void *)MEMORY[0x1F40E9C90](ctx, object, exception);
}

BOOL JSObjectIsFunction(JSContextRef ctx, JSObjectRef object)
{
  return MEMORY[0x1F40E9CB0](ctx, object);
}

JSObjectRef JSObjectMake(JSContextRef ctx, JSClassRef jsClass, void *data)
{
  return (JSObjectRef)MEMORY[0x1F40E9CB8](ctx, jsClass, data);
}

JSObjectRef JSObjectMakeArray(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef *exception)
{
  return (JSObjectRef)MEMORY[0x1F40E9CC0](ctx, argumentCount, arguments, exception);
}

JSObjectRef JSObjectMakeDeferredPromise(JSContextRef ctx, JSObjectRef *resolve, JSObjectRef *reject, JSValueRef *exception)
{
  return (JSObjectRef)MEMORY[0x1F40E9CD0](ctx, resolve, reject, exception);
}

JSObjectRef JSObjectMakeError(JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef *exception)
{
  return (JSObjectRef)MEMORY[0x1F40E9CD8](ctx, argumentCount, arguments, exception);
}

JSObjectRef JSObjectMakeFunctionWithCallback(JSContextRef ctx, JSStringRef name, JSObjectCallAsFunctionCallback callAsFunction)
{
  return (JSObjectRef)MEMORY[0x1F40E9CE0](ctx, name, callAsFunction);
}

BOOL JSObjectSetPrivate(JSObjectRef object, void *data)
{
  return MEMORY[0x1F40E9D10](object, data);
}

void JSObjectSetProperty(JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef value, JSPropertyAttributes attributes, JSValueRef *exception)
{
}

void JSPropertyNameAccumulatorAddName(JSPropertyNameAccumulatorRef accumulator, JSStringRef propertyName)
{
}

size_t JSPropertyNameArrayGetCount(JSPropertyNameArrayRef array)
{
  return MEMORY[0x1F40E9D30](array);
}

JSStringRef JSPropertyNameArrayGetNameAtIndex(JSPropertyNameArrayRef array, size_t index)
{
  return (JSStringRef)MEMORY[0x1F40E9D38](array, index);
}

void JSPropertyNameArrayRelease(JSPropertyNameArrayRef array)
{
}

uint64_t JSRemoteInspectorGetInspectionEnabledByDefault()
{
  return MEMORY[0x1F40E9D48]();
}

uint64_t JSRemoteInspectorGetInspectionFollowsInternalPolicies()
{
  return MEMORY[0x1F40E9D50]();
}

uint64_t JSRemoteInspectorSetInspectionEnabledByDefault()
{
  return MEMORY[0x1F40E9D58]();
}

uint64_t JSRemoteInspectorSetInspectionFollowsInternalPolicies()
{
  return MEMORY[0x1F40E9D60]();
}

CFStringRef JSStringCopyCFString(CFAllocatorRef alloc, JSStringRef string)
{
  return (CFStringRef)MEMORY[0x1F40E9D88](alloc, string);
}

JSStringRef JSStringCreateWithCFString(CFStringRef string)
{
  return (JSStringRef)MEMORY[0x1F40E9D90](string);
}

JSStringRef JSStringCreateWithUTF8CString(const char *string)
{
  return (JSStringRef)MEMORY[0x1F40E9DA0](string);
}

size_t JSStringGetMaximumUTF8CStringSize(JSStringRef string)
{
  return MEMORY[0x1F40E9DB8](string);
}

size_t JSStringGetUTF8CString(JSStringRef string, char *buffer, size_t bufferSize)
{
  return MEMORY[0x1F40E9DC0](string, buffer, bufferSize);
}

BOOL JSStringIsEqualToUTF8CString(JSStringRef a, const char *b)
{
  return MEMORY[0x1F40E9DC8](a, b);
}

void JSStringRelease(JSStringRef string)
{
}

JSStringRef JSStringRetain(JSStringRef string)
{
  return (JSStringRef)MEMORY[0x1F40E9DD8](string);
}

JSStringRef JSValueCreateJSONString(JSContextRef ctx, JSValueRef value, unsigned int indent, JSValueRef *exception)
{
  return (JSStringRef)MEMORY[0x1F40E9DE0](ctx, value, *(void *)&indent, exception);
}

JSTypedArrayType JSValueGetTypedArrayType(JSContextRef ctx, JSValueRef value, JSValueRef *exception)
{
  return MEMORY[0x1F40E9DF0](ctx, value, exception);
}

BOOL JSValueIsArray(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1F40E9DF8](ctx, value);
}

BOOL JSValueIsBoolean(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1F40E9E00](ctx, value);
}

BOOL JSValueIsNull(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1F40E9E10](ctx, value);
}

BOOL JSValueIsNumber(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1F40E9E18](ctx, value);
}

BOOL JSValueIsObject(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1F40E9E20](ctx, value);
}

BOOL JSValueIsObjectOfClass(JSContextRef ctx, JSValueRef value, JSClassRef jsClass)
{
  return MEMORY[0x1F40E9E28](ctx, value, jsClass);
}

BOOL JSValueIsString(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1F40E9E30](ctx, value);
}

BOOL JSValueIsUndefined(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1F40E9E38](ctx, value);
}

JSValueRef JSValueMakeBoolean(JSContextRef ctx, BOOL BOOLean)
{
  return (JSValueRef)MEMORY[0x1F40E9E40](ctx, BOOLean);
}

JSValueRef JSValueMakeNull(JSContextRef ctx)
{
  return (JSValueRef)MEMORY[0x1F40E9E50](ctx);
}

JSValueRef JSValueMakeNumber(JSContextRef ctx, double number)
{
  return (JSValueRef)MEMORY[0x1F40E9E58](ctx, number);
}

JSValueRef JSValueMakeString(JSContextRef ctx, JSStringRef string)
{
  return (JSValueRef)MEMORY[0x1F40E9E60](ctx, string);
}

JSValueRef JSValueMakeUndefined(JSContextRef ctx)
{
  return (JSValueRef)MEMORY[0x1F40E9E68](ctx);
}

void JSValueProtect(JSContextRef ctx, JSValueRef value)
{
}

BOOL JSValueToBoolean(JSContextRef ctx, JSValueRef value)
{
  return MEMORY[0x1F40E9E78](ctx, value);
}

double JSValueToNumber(JSContextRef ctx, JSValueRef value, JSValueRef *exception)
{
  MEMORY[0x1F40E9E80](ctx, value, exception);
  return result;
}

JSObjectRef JSValueToObject(JSContextRef ctx, JSValueRef value, JSValueRef *exception)
{
  return (JSObjectRef)MEMORY[0x1F40E9E88](ctx, value, exception);
}

JSStringRef JSValueToStringCopy(JSContextRef ctx, JSValueRef value, JSValueRef *exception)
{
  return (JSStringRef)MEMORY[0x1F40E9E90](ctx, value, exception);
}

void JSValueUnprotect(JSContextRef ctx, JSValueRef value)
{
}

uint64_t JSWeakObjectMapCreate()
{
  return MEMORY[0x1F40E9EB0]();
}

uint64_t JSWeakObjectMapGet()
{
  return MEMORY[0x1F40E9EB8]();
}

uint64_t JSWeakObjectMapRemove()
{
  return MEMORY[0x1F40E9EC0]();
}

uint64_t JSWeakObjectMapSet()
{
  return MEMORY[0x1F40E9EC8]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t MGGetFloat32Answer()
{
  return MEMORY[0x1F417CE10]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1F417CE28]();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return MEMORY[0x1F412F958]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E7110]();
}

void NSLog(NSString *format, ...)
{
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1F40E7248](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1F40E7258](aSelectorName);
}

NSString *__cdecl NSStringFromCGRect(CGRect rect)
{
  return (NSString *)MEMORY[0x1F4102AF8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

NSString *__cdecl NSStringFromCGSize(CGSize size)
{
  return (NSString *)MEMORY[0x1F4102B00]((__n128)size, *(__n128 *)&size.height);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromProtocol(Protocol *proto)
{
  return (NSString *)MEMORY[0x1F40E7298](proto);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E72C8]();
}

uint64_t SBSCreateOpenApplicationService()
{
  return MEMORY[0x1F415C330]();
}

uint64_t SecAccessControlCopyData()
{
  return MEMORY[0x1F40F6A00]();
}

uint64_t SecAccessControlCreateFromData()
{
  return MEMORY[0x1F40F6A10]();
}

SecAccessControlRef SecAccessControlCreateWithFlags(CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return (SecAccessControlRef)MEMORY[0x1F40F6A18](allocator, protection, flags, error);
}

CFTypeID SecAccessControlGetTypeID(void)
{
  return MEMORY[0x1F40F6A40]();
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return (CFDataRef)MEMORY[0x1F40F6AD0](certificate);
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return (SecCertificateRef)MEMORY[0x1F40F6B80](allocator, data);
}

CFTypeID SecCertificateGetTypeID(void)
{
  return MEMORY[0x1F40F6BB8]();
}

OSStatus SecCodeCopySigningInformation(SecStaticCodeRef code, SecCSFlags flags, CFDictionaryRef *information)
{
  return MEMORY[0x1F40F6D48](code, *(void *)&flags, information);
}

OSStatus SecIdentityCopyCertificate(SecIdentityRef identityRef, SecCertificateRef *certificateRef)
{
  return MEMORY[0x1F40F6DB8](identityRef, certificateRef);
}

OSStatus SecIdentityCopyPrivateKey(SecIdentityRef identityRef, SecKeyRef *privateKeyRef)
{
  return MEMORY[0x1F40F6DC0](identityRef, privateKeyRef);
}

CFTypeID SecIdentityGetTypeID(void)
{
  return MEMORY[0x1F40F6DD0]();
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return MEMORY[0x1F40F6DD8](attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x1F40F6DE0](query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x1F40F6DE8](query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return MEMORY[0x1F40F6E20](query, attributesToUpdate);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40F6E40](key, error);
}

SecKeyRef SecKeyCopyPublicKey(SecKeyRef key)
{
  return (SecKeyRef)MEMORY[0x1F40F6E70](key);
}

SecKeyRef SecKeyCreateRandomKey(CFDictionaryRef parameters, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1F40F6EE0](parameters, error);
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40F6EF8](key, algorithm, dataToSign, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1F40F6F08](keyData, attributes, error);
}

SecPolicyRef SecPolicyCreateBasicX509(void)
{
  return (SecPolicyRef)MEMORY[0x1F40F7048]();
}

OSStatus SecStaticCodeCreateWithPath(CFURLRef path, SecCSFlags flags, SecStaticCodeRef *staticCode)
{
  return MEMORY[0x1F40F7120](path, *(void *)&flags, staticCode);
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return (CFStringRef)MEMORY[0x1F40F7128](task, error);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7138](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1F40F7160](allocator);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1F40F7168](allocator, token);
}

uint32_t SecTaskGetCodeSignStatus(SecTaskRef task)
{
  return MEMORY[0x1F40F7180](task);
}

CFArrayRef SecTrustCopyCertificateChain(SecTrustRef trust)
{
  return (CFArrayRef)MEMORY[0x1F40F7190](trust);
}

uint64_t SecTrustCopyInfo()
{
  return MEMORY[0x1F40F71B0]();
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return MEMORY[0x1F40F71E0](certificates, policies, trust);
}

uint64_t SecTrustDeserialize()
{
  return MEMORY[0x1F40F71E8]();
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return MEMORY[0x1F40F7210](trust, error);
}

CFTypeID SecTrustGetTypeID(void)
{
  return MEMORY[0x1F40F7238]();
}

uint64_t SecTrustSerialize()
{
  return MEMORY[0x1F40F7250]();
}

uint64_t SecTrustSetClientAuditToken()
{
  return MEMORY[0x1F40F7268]();
}

uint64_t UIEdgeInsetsAdd()
{
  return MEMORY[0x1F4102BE0]();
}

void UIGraphicsBeginImageContextWithOptions(CGSize size, BOOL opaque, CGFloat scale)
{
}

void UIGraphicsEndImageContext(void)
{
}

CGContextRef UIGraphicsGetCurrentContext(void)
{
  return (CGContextRef)MEMORY[0x1F4102C40]();
}

UIImage *UIGraphicsGetImageFromCurrentImageContext(void)
{
  return (UIImage *)MEMORY[0x1F4102C48]();
}

uint64_t UIImageDataWriteToSavedPhotosAlbum()
{
  return MEMORY[0x1F4102C60]();
}

NSData *__cdecl UIImageJPEGRepresentation(UIImage *image, CGFloat compressionQuality)
{
  return (NSData *)MEMORY[0x1F4102C78](image, compressionQuality);
}

NSData *__cdecl UIImagePNGRepresentation(UIImage *image)
{
  return (NSData *)MEMORY[0x1F4102C80](image);
}

uint64_t UIKeyboardEnabledInputModesAllowChineseTransliterationForText()
{
  return MEMORY[0x1F4102CC0]();
}

uint64_t UIKeyboardEnabledInputModesAllowOneToManyShortcuts()
{
  return MEMORY[0x1F4102CC8]();
}

uint64_t UIKeyboardIsRightToLeftInputModeActive()
{
  return MEMORY[0x1F4102D00]();
}

void UIRectFill(CGRect rect)
{
}

Boolean UTTypeConformsTo(CFStringRef inUTI, CFStringRef inConformsToUTI)
{
  return MEMORY[0x1F40DEE20](inUTI, inConformsToUTI);
}

CFStringRef UTTypeCopyPreferredTagWithClass(CFStringRef inUTI, CFStringRef inTagClass)
{
  return (CFStringRef)MEMORY[0x1F40DEE50](inUTI, inTagClass);
}

CFStringRef UTTypeCreatePreferredIdentifierForTag(CFStringRef inTagClass, CFStringRef inTag, CFStringRef inConformingToUTI)
{
  return (CFStringRef)MEMORY[0x1F40DEE60](inTagClass, inTag, inConformingToUTI);
}

Boolean UTTypeIsDeclared(CFStringRef inUTI)
{
  return MEMORY[0x1F40DEE70](inUTI);
}

Boolean UTTypeIsDynamic(CFStringRef inUTI)
{
  return MEMORY[0x1F40DEE78](inUTI);
}

uint64_t WTFCurrentContinuousTime()
{
  return MEMORY[0x1F40E9ED8]();
}

uint64_t WTFLogAlways()
{
  return MEMORY[0x1F40E9EE8]();
}

uint64_t WTFSignpostHandleIndirectLog()
{
  return MEMORY[0x1F40E9EF8]();
}

uint64_t WTFSignpostLogHandle()
{
  return MEMORY[0x1F40E9F00]();
}

uint64_t _AXDarkenSystemColorsApp()
{
  return MEMORY[0x1F4178818]();
}

uint64_t _AXSApplicationAccessibilityEnabled()
{
  return MEMORY[0x1F41788D0]();
}

uint64_t _AXSApplicationAccessibilitySetEnabled()
{
  return MEMORY[0x1F41788D8]();
}

uint64_t _AXSEnhanceTextLegibilityEnabled()
{
  return MEMORY[0x1F4178A88]();
}

uint64_t _AXSEnhanceTextLegibilityEnabledApp()
{
  return MEMORY[0x1F4178A98]();
}

uint64_t _AXSFullKeyboardAccessEnabled()
{
  return MEMORY[0x1F4178AD8]();
}

uint64_t _AXSIncreaseButtonLegibilityApp()
{
  return MEMORY[0x1F4178CE0]();
}

uint64_t _AXSInvertColorsEnabledApp()
{
  return MEMORY[0x1F4178CF8]();
}

uint64_t _AXSInvertColorsSetEnabledApp()
{
  return MEMORY[0x1F4178D10]();
}

uint64_t _AXSPrefersNonBlinkingCursorIndicator()
{
  return MEMORY[0x1F4178E18]();
}

uint64_t _AXSReduceMotionEnabledApp()
{
  return MEMORY[0x1F4178E68]();
}

uint64_t _AXSSetDarkenSystemColorsApp()
{
  return MEMORY[0x1F4178F20]();
}

uint64_t _AXSSetEnhanceTextLegibilityEnabledApp()
{
  return MEMORY[0x1F4178F38]();
}

uint64_t _AXSSetIncreaseButtonLegibilityApp()
{
  return MEMORY[0x1F4178F70]();
}

uint64_t _AXSSetReduceMotionEnabledApp()
{
  return MEMORY[0x1F4178FC8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

const char *__cdecl _Block_signature(void *aBlock)
{
  return (const char *)MEMORY[0x1F40C9AB0](aBlock);
}

uint64_t _CFBundleSetupXPCBootstrap()
{
  return MEMORY[0x1F40D8C90]();
}

uint64_t _CFNetworkCopyATSContext()
{
  return MEMORY[0x1F40D56C0]();
}

uint64_t _CFNetworkHTTPConnectionCacheSetLimit()
{
  return MEMORY[0x1F40D5700]();
}

uint64_t _CFNetworkIsKnownHSTSHostWithSession()
{
  return MEMORY[0x1F40D5708]();
}

uint64_t _CFNetworkSetATSContext()
{
  return MEMORY[0x1F40D5718]();
}

uint64_t _CFPrefsSetDirectModeEnabled()
{
  return MEMORY[0x1F40D9000]();
}

uint64_t _CFPrefsSetReadOnly()
{
  return MEMORY[0x1F40D9008]();
}

uint64_t _CFURLConnectionSetFrameworkStubs()
{
  return MEMORY[0x1F40D5748]();
}

uint64_t _CFURLStorageSessionCopyCookieStorage()
{
  return MEMORY[0x1F40D5788]();
}

uint64_t _MGCacheValid()
{
  return MEMORY[0x1F417CF00]();
}

int _NSGetExecutablePath(char *buf, uint32_t *bufsize)
{
  return MEMORY[0x1F40C9AE8](buf, bufsize);
}

char **_NSGetProgname(void)
{
  return (char **)MEMORY[0x1F40C9AF8]();
}

uint64_t _UIApplicationIsExtension()
{
  return MEMORY[0x1F4102EB8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t WTFCrashWithInfoImpl(uint64_t a1, const char *a2, const char *a3)
{
  return MEMORY[0x1F40E9F08](a1, a2, a3);
}

{
  return MEMORY[0x1F40E9F10](a1, a2, a3);
}

{
  return MEMORY[0x1F40E9F18](a1, a2, a3);
}

uint64_t WTFCrashWithInfoImpl(uint64_t a1, const char *a2, const char *a3, int a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, unint64_t a9, unint64_t a10)
{
  return MEMORY[0x1F40E9F20](a1, a2, a3);
}

uint64_t ReportBlockedObjCException(NSException *a1)
{
  return MEMORY[0x1F40E9F28](a1);
}

uint64_t suggestedFilenameWithMIMEType(NSURL *a1, const WTF::String *a2)
{
  return MEMORY[0x1F416BBD0](a1, a2);
}

uint64_t WebCoreObjCScheduleDeallocateOnMainThread(objc_class *a1, objc_object *a2)
{
  return MEMORY[0x1F416BBE0](a1, a2);
}

uint64_t WebCoreObjCScheduleDeallocateOnMainRunLoop(objc_class *a1, objc_object *a2)
{
  return MEMORY[0x1F416BBE8](a1, a2);
}

uint64_t OpaqueJSString::tryCreate()
{
  return MEMORY[0x1F40E9F38]();
}

uint64_t OpaqueJSString::tryCreate(OpaqueJSString *this, const WTF::String *a2)
{
  return MEMORY[0x1F40E9F40](this, a2);
}

void OpaqueJSString::~OpaqueJSString(OpaqueJSString *this)
{
}

uint64_t JSC::initialize(JSC *this)
{
  return MEMORY[0x1F40E9FB0](this);
}

uint64_t JSC::jsToNumber()
{
  return MEMORY[0x1F40E9FB8]();
}

uint64_t JSC::ArrayBuffer::tryCreateUninitialized(JSC::ArrayBuffer *this)
{
  return MEMORY[0x1F40E9FD8](this);
}

uint64_t JSC::ArrayBuffer::create()
{
  return MEMORY[0x1F40E9FE0]();
}

uint64_t JSC::ArrayBuffer::create(JSC::ArrayBuffer *this)
{
  return MEMORY[0x1F40E9FF8](this);
}

uint64_t JSC::ArrayBuffer::tryCreate()
{
  return MEMORY[0x1F40EA008]();
}

uint64_t JSC::JSLockHolder::JSLockHolder()
{
  return MEMORY[0x1F40EA068]();
}

{
  return MEMORY[0x1F40EA078]();
}

void JSC::JSLockHolder::~JSLockHolder(JSC::JSLockHolder *this)
{
}

uint64_t JSC::throwTypeError()
{
  return MEMORY[0x1F40EA268]();
}

uint64_t JSC::ArrayBufferView::ArrayBufferView()
{
  return MEMORY[0x1F40EA290]();
}

uint64_t JSC::ArrayBufferView::operator delete()
{
  return MEMORY[0x1F40EA298]();
}

uint64_t JSC::SamplingProfiler::reportTopBytecodes()
{
  return MEMORY[0x1F40EA350]();
}

uint64_t JSC::SamplingProfiler::reportTopFunctions()
{
  return MEMORY[0x1F40EA358]();
}

uint64_t JSC::JSArrayBufferView::possiblySharedImpl(JSC::JSArrayBufferView *this)
{
  return MEMORY[0x1F40EA3B8](this);
}

uint64_t JSC::JSArrayBufferView::slowDownAndWasteMemory(JSC::JSArrayBufferView *this)
{
  return MEMORY[0x1F40EA3D0](this);
}

uint64_t JSC::processConfigFile(JSC *this, const char *a2, const char *a3, const char *a4)
{
  return MEMORY[0x1F40EA420](this, a2, a3, a4);
}

void JSC::BufferMemoryHandle::~BufferMemoryHandle(JSC::BufferMemoryHandle *this)
{
}

uint64_t JSC::ArrayBufferContents::fromSpan()
{
  return MEMORY[0x1F40EA450]();
}

uint64_t JSC::ExecutableAllocator::disableJIT(JSC::ExecutableAllocator *this)
{
  return MEMORY[0x1F40EA460](this);
}

uint64_t JSC::InlineWatchpointSet::freeFat(JSC::InlineWatchpointSet *this)
{
  return MEMORY[0x1F40EA498](this);
}

uint64_t JSC::globalMemoryStatistics(JSC *this)
{
  return MEMORY[0x1F40EA558](this);
}

void JSC::SharedArrayBufferContents::~SharedArrayBufferContents(JSC::SharedArrayBufferContents *this)
{
}

uint64_t JSC::VM::hasExceptionsAfterHandlingTraps(JSC::VM *this)
{
  return MEMORY[0x1F40EA638](this);
}

void JSC::VM::~VM(JSC::VM *this)
{
}

uint64_t JSC::Heap::objectCount(JSC::Heap *this)
{
  return MEMORY[0x1F40EA6C8](this);
}

uint64_t JSC::Heap::size(JSC::Heap *this)
{
  return MEMORY[0x1F40EA790](this);
}

uint64_t JSC::Heap::capacity(JSC::Heap *this)
{
  return MEMORY[0x1F40EA7A0](this);
}

void JSC::Wasm::Module::~Module(JSC::Wasm::Module *this)
{
}

uint64_t JSC::Yarr::RegularExpression::RegularExpression()
{
  return MEMORY[0x1F40EA810]();
}

uint64_t JSC::Options::initialize(JSC::Options *this)
{
  return MEMORY[0x1F40EA8C0](this);
}

uint64_t JSC::Options::notifyOptionsChanged(JSC::Options *this)
{
  return MEMORY[0x1F40EA8C8](this);
}

uint64_t JSC::VMTraps::fireTrap(JSC::VMTraps *this)
{
  return MEMORY[0x1F40EA8E0](this);
}

uint64_t JSC::JSObject::fillGetterPropertySlot()
{
  return MEMORY[0x1F40EAA60]();
}

uint64_t JSC::JSObject::getOwnStaticPropertySlot()
{
  return MEMORY[0x1F40EAA90]();
}

uint64_t PAL::systemBeep(PAL *this)
{
  return MEMORY[0x1F416BBF0](this);
}

uint64_t PAL::CryptoDigest::computeHash(PAL::CryptoDigest *this)
{
  return MEMORY[0x1F416BBF8](this);
}

uint64_t PAL::CryptoDigest::create()
{
  return MEMORY[0x1F416BC00]();
}

uint64_t PAL::CryptoDigest::addBytes()
{
  return MEMORY[0x1F416BC08]();
}

void PAL::CryptoDigest::~CryptoDigest(PAL::CryptoDigest *this)
{
}

uint64_t PAL::TextEncoding::TextEncoding(PAL::TextEncoding *this, const char *a2)
{
  return MEMORY[0x1F416BC18](this, a2);
}

uint64_t PAL::TextEncoding::TextEncoding(PAL::TextEncoding *this, const WTF::String *a2)
{
  return MEMORY[0x1F416BC20](this, a2);
}

uint64_t PAL::ContactsLibrary(PAL *this)
{
  return MEMORY[0x1F416BC30](this);
}

uint64_t PAL::RevealCoreLibrary(PAL *this)
{
  return MEMORY[0x1F416BC38](this);
}

uint64_t PAL::WebPrivacyLibrary(PAL *this)
{
  return MEMORY[0x1F416BC40](this);
}

uint64_t PAL::PassKitCoreLibrary(PAL *this)
{
  return MEMORY[0x1F416BC48](this);
}

uint64_t PAL::SleepDisablerCocoa::setScreenWakeLockHandler()
{
  return MEMORY[0x1F416BC50]();
}

uint64_t PAL::AVFoundationLibrary(PAL *this)
{
  return MEMORY[0x1F416BC58](this);
}

uint64_t PAL::VideoToolboxLibrary(PAL *this)
{
  return MEMORY[0x1F416BC60](this);
}

uint64_t PAL::VisionKitCoreLibrary(PAL *this)
{
  return MEMORY[0x1F416BC68](this);
}

uint64_t PAL::isLockdownModeEnabled(PAL *this)
{
  return MEMORY[0x1F416BC78](this);
}

uint64_t PAL::registerNotifyCallback()
{
  return MEMORY[0x1F416BC80]();
}

uint64_t PAL::deviceHasIPadCapability(PAL *this)
{
  return MEMORY[0x1F416BC88](this);
}

uint64_t PAL::DataDetectorsCoreLibrary(PAL *this)
{
  return MEMORY[0x1F416BC90](this);
}

uint64_t PAL::deviceClassIsSmallScreen(PAL *this)
{
  return MEMORY[0x1F416BCA0](this);
}

uint64_t PAL::get_AppSSO_SOErrorDomain(PAL *this)
{
  return MEMORY[0x1F416BCA8](this);
}

uint64_t PAL::currentUserInterfaceIdiom(PAL *this)
{
  return MEMORY[0x1F416BCB0](this);
}

uint64_t PAL::get_CoreMedia_kCMTimeZero(PAL *this)
{
  return MEMORY[0x1F416BCB8](this);
}

uint64_t PAL::TranslationUIServicesLibrary(PAL *this)
{
  return MEMORY[0x1F416BCC8](this);
}

uint64_t PAL::setCurrentUserInterfaceIdiom()
{
  return MEMORY[0x1F416BCD0]();
}

uint64_t PAL::get_Contacts_CNContactNoteKey(PAL *this)
{
  return MEMORY[0x1F416BCD8](this);
}

uint64_t PAL::get_Contacts_CNContactDatesKey(PAL *this)
{
  return MEMORY[0x1F416BCE0](this);
}

uint64_t PAL::updateCurrentUserInterfaceIdiom(PAL *this)
{
  return MEMORY[0x1F416BCE8](this);
}

uint64_t PAL::currentUserInterfaceIdiomIsVision(PAL *this)
{
  return MEMORY[0x1F416BCF0](this);
}

uint64_t PAL::get_AVFoundation_AVMediaTypeAudio(PAL *this)
{
  return MEMORY[0x1F416BCF8](this);
}

uint64_t PAL::get_AVFoundation_AVMediaTypeVideo(PAL *this)
{
  return MEMORY[0x1F416BD00](this);
}

uint64_t PAL::get_Contacts_CNContactBirthdayKey(PAL *this)
{
  return MEMORY[0x1F416BD08](this);
}

uint64_t PAL::get_Contacts_CNContactJobTitleKey(PAL *this)
{
  return MEMORY[0x1F416BD10](this);
}

uint64_t PAL::get_Contacts_CNContactNicknameKey(PAL *this)
{
  return MEMORY[0x1F416BD18](this);
}

uint64_t PAL::get_Contacts_CNContactGivenNameKey(PAL *this)
{
  return MEMORY[0x1F416BD20](this);
}

uint64_t PAL::get_PassKitCore_PKContactFieldName(PAL *this)
{
  return MEMORY[0x1F416BD28](this);
}

uint64_t PAL::get_Contacts_CNContactFamilyNameKey(PAL *this)
{
  return MEMORY[0x1F416BD30](this);
}

uint64_t PAL::get_Contacts_CNContactMiddleNameKey(PAL *this)
{
  return MEMORY[0x1F416BD38](this);
}

uint64_t PAL::get_Contacts_CNContactNamePrefixKey(PAL *this)
{
  return MEMORY[0x1F416BD40](this);
}

uint64_t PAL::get_Contacts_CNContactNameSuffixKey(PAL *this)
{
  return MEMORY[0x1F416BD48](this);
}

uint64_t PAL::canLoad_QuartzCore_CAIOSurfaceCreate(PAL *this)
{
  return MEMORY[0x1F416BD50](this);
}

uint64_t PAL::get_PassKitCore_PKPassKitErrorDomain(PAL *this)
{
  return MEMORY[0x1F416BD58](this);
}

uint64_t PAL::get_PassKitCore_PKPaymentErrorDomain(PAL *this)
{
  return MEMORY[0x1F416BD60](this);
}

uint64_t PAL::get_Contacts_CNContactPhoneNumbersKey(PAL *this)
{
  return MEMORY[0x1F416BD68](this);
}

uint64_t PAL::get_Contacts_CNContactUrlAddressesKey(PAL *this)
{
  return MEMORY[0x1F416BD70](this);
}

uint64_t PAL::currentUserInterfaceIdiomIsSmallScreen(PAL *this)
{
  return MEMORY[0x1F416BD78](this);
}

uint64_t PAL::get_Contacts_CNContactDepartmentNameKey(PAL *this)
{
  return MEMORY[0x1F416BD80](this);
}

uint64_t PAL::get_Contacts_CNContactEmailAddressesKey(PAL *this)
{
  return MEMORY[0x1F416BD88](this);
}

uint64_t PAL::defaultTextEncodingNameForSystemLanguage(PAL *this)
{
  return MEMORY[0x1F416BD90](this);
}

uint64_t PAL::get_Contacts_CNContactPostalAddressesKey(PAL *this)
{
  return MEMORY[0x1F416BD98](this);
}

uint64_t PAL::get_AVFoundation_AVFileTypeQuickTimeMovie(PAL *this)
{
  return MEMORY[0x1F416BDA0](this);
}

uint64_t PAL::get_Contacts_CNContactOrganizationNameKey(PAL *this)
{
  return MEMORY[0x1F416BDA8](this);
}

uint64_t PAL::get_PassKitCore_PKContactFieldPhoneNumber(PAL *this)
{
  return MEMORY[0x1F416BDB0](this);
}

uint64_t PAL::get_PassKitCore_PKDisbursementErrorDomain(PAL *this)
{
  return MEMORY[0x1F416BDB8](this);
}

uint64_t PAL::get_Contacts_CNContactPhoneticGivenNameKey(PAL *this)
{
  return MEMORY[0x1F416BDC0](this);
}

uint64_t PAL::get_PassKitCore_PKContactFieldEmailAddress(PAL *this)
{
  return MEMORY[0x1F416BDC8](this);
}

uint64_t PAL::get_PassKitCore_PKContactFieldPhoneticName(PAL *this)
{
  return MEMORY[0x1F416BDD0](this);
}

uint64_t PAL::get_PassKitCore_PKMerchantCategoryCodeNone(PAL *this)
{
  return MEMORY[0x1F416BDD8](this);
}

uint64_t PAL::get_Contacts_CNContactPhoneticFamilyNameKey(PAL *this)
{
  return MEMORY[0x1F416BDE0](this);
}

uint64_t PAL::get_Contacts_CNContactPhoneticMiddleNameKey(PAL *this)
{
  return MEMORY[0x1F416BDE8](this);
}

uint64_t PAL::get_Contacts_CNContactPreviousFamilyNameKey(PAL *this)
{
  return MEMORY[0x1F416BDF0](this);
}

uint64_t PAL::get_PassKitCore_PKContactFieldPostalAddress(PAL *this)
{
  return MEMORY[0x1F416BDF8](this);
}

uint64_t PAL::canLoad_VideoToolbox_VTRestrictVideoDecoders(PAL *this)
{
  return MEMORY[0x1F416BE00](this);
}

uint64_t PAL::get_Contacts_CNContactNonGregorianBirthdayKey(PAL *this)
{
  return MEMORY[0x1F416BE08](this);
}

uint64_t PAL::get_DataDetectorsUI_kDataDetectorsLeadingText(PAL *this)
{
  return MEMORY[0x1F416BE10](this);
}

uint64_t PAL::get_DataDetectorsUI_kDataDetectorsTrailingText(PAL *this)
{
  return MEMORY[0x1F416BE18](this);
}

uint64_t PAL::get_AppSSO_SOAuthorizationOptionInitiatorOrigin(PAL *this)
{
  return MEMORY[0x1F416BE20](this);
}

uint64_t PAL::canLoad_VisionKitCore_vk_cgImageRemoveBackground(PAL *this)
{
  return MEMORY[0x1F416BE28](this);
}

uint64_t PAL::get_AppSSO_SOAuthorizationOptionInitiatingAction(PAL *this)
{
  return MEMORY[0x1F416BE30](this);
}

uint64_t PAL::get_Contacts_CNContactPhoneticOrganizationNameKey(PAL *this)
{
  return MEMORY[0x1F416BE38](this);
}

uint64_t PAL::get_DataDetectorsUI_kDDContextMenuWantsPreviewKey(PAL *this)
{
  return MEMORY[0x1F416BE40](this);
}

uint64_t PAL::get_AVFoundation_AVAssetExportPresetHighestQuality(PAL *this)
{
  return MEMORY[0x1F416BE48](this);
}

uint64_t PAL::get_AppSSO_SOAuthorizationOptionUserActionInitiated(PAL *this)
{
  return MEMORY[0x1F416BE50](this);
}

uint64_t PAL::get_WebPrivacy_WPNotificationUserInfoResourceTypeKey(PAL *this)
{
  return MEMORY[0x1F416BE58](this);
}

uint64_t PAL::get_WebPrivacy_WPResourceDataChangedNotificationName(PAL *this)
{
  return MEMORY[0x1F416BE60](this);
}

uint64_t PAL::get_PassKitCore_PKPaymentErrorContactFieldUserInfoKey(PAL *this)
{
  return MEMORY[0x1F416BE68](this);
}

uint64_t PAL::get_PassKitCore_PKPaymentErrorPostalAddressUserInfoKey(PAL *this)
{
  return MEMORY[0x1F416BE70](this);
}

uint64_t PAL::get_ManagedConfiguration_MCFeatureDefinitionLookupAllowed(PAL *this)
{
  return MEMORY[0x1F416BE78](this);
}

uint64_t PAL::canLoad_DataDetectorsCore_DDResultDisableURLSchemeChecking(PAL *this)
{
  return MEMORY[0x1F416BE80](this);
}

uint64_t PAL::canLoad_VisionKitCore_vk_cgImageRemoveBackgroundWithDownsizing(PAL *this)
{
  return MEMORY[0x1F416BE88](this);
}

uint64_t PAL::canLoad_CoreText_CTFontManagerCreateMemorySafeFontDescriptorFromData(PAL *this)
{
  return MEMORY[0x1F416BE90](this);
}

uint64_t PAL::SessionID::enableGenerationProtection(PAL::SessionID *this)
{
  return MEMORY[0x1F416BE98](this);
}

uint64_t PAL::SessionID::generateEphemeralSessionID(PAL::SessionID *this)
{
  return MEMORY[0x1F416BEA0](this);
}

uint64_t PAL::SessionID::generatePersistentSessionID(PAL::SessionID *this)
{
  return MEMORY[0x1F416BEA8](this);
}

uint64_t WTF::ParkingLot::unparkOneImpl()
{
  return MEMORY[0x1F40EABF0]();
}

uint64_t WTF::ParkingLot::parkConditionallyImpl()
{
  return MEMORY[0x1F40EABF8]();
}

uint64_t WTF::ParkingLot::unparkAll(WTF::ParkingLot *this, const void *a2)
{
  return MEMORY[0x1F40EAC00](this, a2);
}

uint64_t WTF::StringImpl::reverseFind()
{
  return MEMORY[0x1F40EAC10]();
}

uint64_t WTF::StringImpl::createUninitialized()
{
  return MEMORY[0x1F40EAC30]();
}

uint64_t WTF::StringImpl::createUninitialized(WTF::StringImpl *this, uint64_t a2, unsigned __int8 **a3)
{
  return MEMORY[0x1F40EAC38](this, a2, a3);
}

uint64_t WTF::StringImpl::createWithoutCopyingNonEmpty()
{
  return MEMORY[0x1F40EAC58]();
}

{
  return MEMORY[0x1F40EAC60]();
}

uint64_t WTF::StringImpl::find()
{
  return MEMORY[0x1F40EAC68]();
}

{
  return MEMORY[0x1F40EAC70]();
}

{
  return MEMORY[0x1F40EAC78]();
}

uint64_t WTF::StringImpl::destroy(WTF::StringImpl *this, WTF::StringImpl *a2)
{
  return MEMORY[0x1F40EACA8](this, a2);
}

uint64_t WTF::StringImpl::replace()
{
  return MEMORY[0x1F40EACB8]();
}

{
  return MEMORY[0x1F40EACC0]();
}

uint64_t WTF::StringImpl::endsWith()
{
  return MEMORY[0x1F40EACD0]();
}

{
  return MEMORY[0x1F40EC848]();
}

uint64_t WTF::StringImpl::substring(WTF::StringImpl *this)
{
  return MEMORY[0x1F40EACD8](this);
}

uint64_t WTF::StringImpl::operator NSString *()
{
  return MEMORY[0x1F40EACE0]();
}

uint64_t WTF::StringView::SplitResult::Iterator::findNextSubstring(WTF::StringView::SplitResult::Iterator *this)
{
  return MEMORY[0x1F40EACE8](this);
}

uint64_t WTF::StringView::SplitResult::Iterator::operator++()
{
  return MEMORY[0x1F40EACF0]();
}

uint64_t WTF::SymbolImpl::create(WTF::SymbolImpl *this, WTF::StringImpl *a2)
{
  return MEMORY[0x1F40EAD10](this, a2);
}

uint64_t WTF::TextStream::startGroup(WTF::TextStream *this)
{
  return MEMORY[0x1F40EAD18](this);
}

uint64_t WTF::TextStream::writeIndent(WTF::TextStream *this)
{
  return MEMORY[0x1F40EAD20](this);
}

uint64_t WTF::TextStream::release(WTF::TextStream *this)
{
  return MEMORY[0x1F40EAD28](this);
}

uint64_t WTF::TextStream::endGroup(WTF::TextStream *this)
{
  return MEMORY[0x1F40EAD30](this);
}

uint64_t WTF::TextStream::operator<<()
{
  return MEMORY[0x1F40EAD38]();
}

{
  return MEMORY[0x1F40EAD40]();
}

{
  return MEMORY[0x1F40EAD48]();
}

{
  return MEMORY[0x1F40EAD68]();
}

{
  return MEMORY[0x1F40EAD78]();
}

{
  return MEMORY[0x1F40EAD88]();
}

{
  return MEMORY[0x1F40EAD98]();
}

{
  return MEMORY[0x1F40EADA0]();
}

{
  return MEMORY[0x1F40EADA8]();
}

uint64_t WTF::URLHelpers::userVisibleURL(WTF::URLHelpers *this, const CString *a2)
{
  return MEMORY[0x1F40EADB8](this, a2);
}

uint64_t WTF::fastMalloc(WTF *this)
{
  return MEMORY[0x1F40EADC0](this);
}

uint64_t WTF::isUIThread(WTF *this)
{
  return MEMORY[0x1F40EADD0](this);
}

uint64_t WTF::protocolIs()
{
  return MEMORY[0x1F40EADD8]();
}

uint64_t WTF::LogArgument<void const*>::toString()
{
  return MEMORY[0x1F40EADE8]();
}

uint64_t WTF::LogChannels::initializeLogChannelsIfNecessary()
{
  return MEMORY[0x1F40EADF8]();
}

uint64_t WTF::Persistence::Coder<WebCore::HTTPHeaderMap>::decodeForPersistence()
{
  return MEMORY[0x1F416BEB0]();
}

uint64_t WTF::Persistence::Coder<WebCore::HTTPHeaderMap>::encodeForPersistence()
{
  return MEMORY[0x1F416BEB8]();
}

uint64_t WTF::Persistence::Coder<WebCore::ResourceRequest>::decodeForPersistence()
{
  return MEMORY[0x1F416BEC0]();
}

uint64_t WTF::Persistence::Coder<WebCore::ResourceRequest>::encodeForPersistence()
{
  return MEMORY[0x1F416BEC8]();
}

uint64_t WTF::Persistence::Coder<WebCore::ResourceResponse>::decodeForPersistence()
{
  return MEMORY[0x1F416BED0]();
}

uint64_t WTF::Persistence::Coder<WebCore::ResourceResponse>::encodeForPersistence()
{
  return MEMORY[0x1F416BED8]();
}

uint64_t WTF::Persistence::Coder<WebCore::ResourceResponseData>::decodeForPersistence()
{
  return MEMORY[0x1F416BEE0]();
}

uint64_t WTF::Persistence::Coder<WebCore::ResourceResponseData>::encodeForPersistence()
{
  return MEMORY[0x1F416BEE8]();
}

uint64_t WTF::Persistence::Coder<WTF::URL>::decodeForPersistence()
{
  return MEMORY[0x1F40EAE10]();
}

uint64_t WTF::Persistence::Coder<WTF::URL>::encodeForPersistence()
{
  return MEMORY[0x1F40EAE18]();
}

uint64_t WTF::Persistence::Coder<WTF::String>::decodeForPersistence()
{
  return MEMORY[0x1F40EAE20]();
}

uint64_t WTF::Persistence::Coder<WTF::String>::encodeForPersistence()
{
  return MEMORY[0x1F40EAE28]();
}

uint64_t WTF::Persistence::Coder<WTF::Seconds>::decodeForPersistence()
{
  return MEMORY[0x1F40EAE30]();
}

uint64_t WTF::Persistence::Coder<WTF::Seconds>::encodeForPersistence()
{
  return MEMORY[0x1F40EAE38]();
}

uint64_t WTF::Persistence::Coder<WTF::WallTime>::decodeForPersistence()
{
  return MEMORY[0x1F40EAE40]();
}

uint64_t WTF::Persistence::Coder<WTF::WallTime>::encodeForPersistence()
{
  return MEMORY[0x1F40EAE48]();
}

uint64_t WTF::Persistence::Coder<std::array<unsigned char,20ul>>::decodeForPersistence()
{
  return MEMORY[0x1F40EAE50]();
}

uint64_t WTF::Persistence::Coder<std::array<unsigned char,20ul>>::encodeForPersistence()
{
  return MEMORY[0x1F40EAE58]();
}

uint64_t WTF::Persistence::Decoder::verifyChecksum(WTF::Persistence::Decoder *this)
{
  return MEMORY[0x1F40EAE60](this);
}

uint64_t WTF::Persistence::Decoder::Decoder()
{
  return MEMORY[0x1F40EAE78]();
}

void WTF::Persistence::Decoder::~Decoder(WTF::Persistence::Decoder *this)
{
}

uint64_t WTF::Persistence::Decoder::operator>>()
{
  return MEMORY[0x1F40EAE88]();
}

{
  return MEMORY[0x1F40EAE90]();
}

{
  return MEMORY[0x1F40EAE98]();
}

{
  return MEMORY[0x1F40EAEA8]();
}

{
  return MEMORY[0x1F40EAEC8]();
}

uint64_t WTF::Persistence::Encoder::encodeChecksum(WTF::Persistence::Encoder *this)
{
  return MEMORY[0x1F40EAED0](this);
}

uint64_t WTF::Persistence::Encoder::Encoder(WTF::Persistence::Encoder *this)
{
  return MEMORY[0x1F40EAEE0](this);
}

void WTF::Persistence::Encoder::~Encoder(WTF::Persistence::Encoder *this)
{
}

uint64_t WTF::Persistence::Encoder::operator<<()
{
  return MEMORY[0x1F40EAEF0]();
}

{
  return MEMORY[0x1F40EAEF8]();
}

{
  return MEMORY[0x1F40EAF00]();
}

{
  return MEMORY[0x1F40EAF10]();
}

{
  return MEMORY[0x1F40EAF30]();
}

uint64_t WTF::exitProcess(WTF *this)
{
  return MEMORY[0x1F40EAF48](this);
}

uint64_t WTF::fastRealloc(WTF *this, void *a2)
{
  return MEMORY[0x1F40EAF50](this, a2);
}

uint64_t WTF::logChannels(WTF *this)
{
  return MEMORY[0x1F40EAF60](this);
}

uint64_t WTF::portAllowed(WTF *this, const URL *a2)
{
  return MEMORY[0x1F40EAF78](this, a2);
}

uint64_t WTF::base64Decode()
{
  return MEMORY[0x1F40EAF90]();
}

{
  return MEMORY[0x1F40EAF98]();
}

uint64_t WTF::isMainThread(WTF *this)
{
  return MEMORY[0x1F40EAFB0](this);
}

uint64_t WTF::MachSendRight::leakSendRight(WTF::MachSendRight *this)
{
  return MEMORY[0x1F40EAFB8](this);
}

uint64_t WTF::MachSendRight::createFromReceiveRight(WTF::MachSendRight *this)
{
  return MEMORY[0x1F40EAFC0](this);
}

uint64_t WTF::MachSendRight::adopt(WTF::MachSendRight *this)
{
  return MEMORY[0x1F40EAFC8](this);
}

uint64_t WTF::MachSendRight::create(WTF::MachSendRight *this)
{
  return MEMORY[0x1F40EAFD0](this);
}

uint64_t WTF::MachSendRight::MachSendRight()
{
  return MEMORY[0x1F40EAFD8]();
}

uint64_t WTF::MachSendRight::MachSendRight(WTF::MachSendRight *this, const WTF::MachSendRight *a2)
{
  return MEMORY[0x1F40EAFE0](this, a2);
}

void WTF::MachSendRight::~MachSendRight(WTF::MachSendRight *this)
{
}

uint64_t WTF::MachSendRight::operator=()
{
  return MEMORY[0x1F40EAFF0]();
}

uint64_t WTF::MonotonicTime::fromMachAbsoluteTime(WTF::MonotonicTime *this)
{
  return MEMORY[0x1F40EAFF8](this);
}

uint64_t WTF::MonotonicTime::now(WTF::MonotonicTime *this)
{
  return MEMORY[0x1F40EB000](this);
}

uint64_t WTF::StringBuilder::shrinkToFit(WTF::StringBuilder *this)
{
  return MEMORY[0x1F40EB008](this);
}

uint64_t WTF::StringBuilder::reserveCapacity(WTF::StringBuilder *this)
{
  return MEMORY[0x1F40EB010](this);
}

uint64_t WTF::StringBuilder::appendQuotedJSONString(WTF::StringBuilder *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB018](this, a2);
}

uint64_t WTF::StringBuilder::extendBufferForAppendingLChar(WTF::StringBuilder *this)
{
  return MEMORY[0x1F40EB020](this);
}

uint64_t WTF::StringBuilder::extendBufferForAppendingWithUpconvert(WTF::StringBuilder *this)
{
  return MEMORY[0x1F40EB028](this);
}

uint64_t WTF::StringBuilder::append()
{
  return MEMORY[0x1F40EB038]();
}

uint64_t WTF::WorkQueueBase::dispatchWithQOS()
{
  return MEMORY[0x1F40EB048]();
}

uint64_t WTF::aboutBlankURL(WTF *this)
{
  return MEMORY[0x1F40EB050](this);
}

uint64_t WTF::allPrivileges(WTF *this)
{
  return MEMORY[0x1F40EB058](this);
}

uint64_t WTF::bytesAsString(WTF *this, const __CFURL *a2)
{
  return MEMORY[0x1F40EB060](this, a2);
}

uint64_t WTF::bytesAsVector(WTF *this, const __CFURL *a2)
{
  return MEMORY[0x1F40EB068](this, a2);
}

uint64_t WTF::isMainRunLoop(WTF *this)
{
  return MEMORY[0x1F40EB070](this);
}

uint64_t WTF::tryFastMalloc(WTF *this)
{
  return MEMORY[0x1F40EB0E0](this);
}

uint64_t WTF::AtomStringImpl::addSlowCase()
{
  return MEMORY[0x1F40EB0F0]();
}

uint64_t WTF::AtomStringImpl::addSlowCase(WTF::AtomStringImpl *this, WTF::StringImpl *a2)
{
  return MEMORY[0x1F40EB0F8](this, a2);
}

uint64_t WTF::AtomStringImpl::add()
{
  return MEMORY[0x1F40EB110]();
}

{
  return MEMORY[0x1F40EB118]();
}

uint64_t WTF::AtomStringImpl::add(WTF::AtomStringImpl *this, const __CFString *a2)
{
  return MEMORY[0x1F40EB120](this, a2);
}

uint64_t WTF::FileSystemImpl::deleteFile(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB148](this, a2);
}

uint64_t WTF::FileSystemImpl::fileExists(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB150](this, a2);
}

uint64_t WTF::FileSystemImpl::parentPath(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB158](this, a2);
}

uint64_t WTF::FileSystemImpl::writeToFile()
{
  return MEMORY[0x1F40EB160]();
}

uint64_t WTF::FileSystemImpl::pathFileName(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB170](this, a2);
}

uint64_t WTF::FileSystemImpl::directorySize(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB188](this, a2);
}

uint64_t WTF::FileSystemImpl::hardLinkCount(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB190](this, a2);
}

uint64_t WTF::FileSystemImpl::listDirectory(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB198](this, a2);
}

uint64_t WTF::FileSystemImpl::markPurgeable(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB1A0](this, a2);
}

uint64_t WTF::FileSystemImpl::MappedFileData::mapFileHandle()
{
  return MEMORY[0x1F40EB1A8]();
}

uint64_t WTF::FileSystemImpl::MappedFileData::MappedFileData()
{
  return MEMORY[0x1F40EB1B0]();
}

void WTF::FileSystemImpl::MappedFileData::~MappedFileData(WTF::FileSystemImpl::MappedFileData *this)
{
}

uint64_t WTF::FileSystemImpl::readEntireFile(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB1C0](this, a2);
}

uint64_t WTF::FileSystemImpl::readEntireFile(WTF::FileSystemImpl *this)
{
  return MEMORY[0x1F40EB1C8](this);
}

uint64_t WTF::FileSystemImpl::readOrMakeSalt(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB1D0](this, a2);
}

uint64_t WTF::FileSystemImpl::volumeCapacity(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB1D8](this, a2);
}

uint64_t WTF::FileSystemImpl::lexicallyNormal(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB1E8](this, a2);
}

uint64_t WTF::FileSystemImpl::openAndLockFile()
{
  return MEMORY[0x1F40EB1F0]();
}

uint64_t WTF::FileSystemImpl::volumeFreeSpace(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB1F8](this, a2);
}

uint64_t WTF::FileSystemImpl::fileCreationTime(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB200](this, a2);
}

uint64_t WTF::FileSystemImpl::encodeForFileName(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB208](this, a2);
}

uint64_t WTF::FileSystemImpl::openTemporaryFile()
{
  return MEMORY[0x1F40EB210]();
}

uint64_t WTF::FileSystemImpl::decodeFromFilename(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB218](this, a2);
}

uint64_t WTF::FileSystemImpl::hardLinkOrCopyFile(WTF::FileSystemImpl *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F40EB220](this, a2, a3);
}

uint64_t WTF::FileSystemImpl::makeAllDirectories(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB228](this, a2);
}

uint64_t WTF::FileSystemImpl::unlockAndCloseFile(WTF::FileSystemImpl *this)
{
  return MEMORY[0x1F40EB230](this);
}

uint64_t WTF::FileSystemImpl::createTemporaryFile()
{
  return MEMORY[0x1F40EB238]();
}

uint64_t WTF::FileSystemImpl::overwriteEntireFile()
{
  return MEMORY[0x1F40EB240]();
}

uint64_t WTF::FileSystemImpl::systemDirectoryPath(WTF::FileSystemImpl *this)
{
  return MEMORY[0x1F40EB248](this);
}

uint64_t WTF::FileSystemImpl::volumeFileBlockSize(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB250](this, a2);
}

uint64_t WTF::FileSystemImpl::deleteEmptyDirectory(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB260](this, a2);
}

uint64_t WTF::FileSystemImpl::fileModificationTime(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB268](this, a2);
}

uint64_t WTF::FileSystemImpl::setExcludedFromBackup(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB270](this, a2);
}

uint64_t WTF::FileSystemImpl::deleteNonEmptyDirectory(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB280](this, a2);
}

uint64_t WTF::FileSystemImpl::createTemporaryDirectory(WTF::FileSystemImpl *this, NSString *a2)
{
  return MEMORY[0x1F40EB288](this, a2);
}

uint64_t WTF::FileSystemImpl::fileSystemRepresentation(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB290](this, a2);
}

uint64_t WTF::FileSystemImpl::pathByAppendingComponent()
{
  return MEMORY[0x1F40EB298]();
}

uint64_t WTF::FileSystemImpl::fileTypeFollowingSymlinks(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB2A8](this, a2);
}

uint64_t WTF::FileSystemImpl::pathByAppendingComponents()
{
  return MEMORY[0x1F40EB2B0]();
}

uint64_t WTF::FileSystemImpl::updateFileModificationTime(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB2B8](this, a2);
}

uint64_t WTF::FileSystemImpl::deleteAllFilesModifiedSince(WTF::FileSystemImpl *this, const WTF::String *a2, __n128 a3)
{
  return MEMORY[0x1F40EB2C0](this, a2, a3);
}

uint64_t WTF::FileSystemImpl::makeSafeToUseMemoryMapForPath(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB2D0](this, a2);
}

uint64_t WTF::FileSystemImpl::stringFromFileSystemRepresentation(WTF::FileSystemImpl *this, const char *a2)
{
  return MEMORY[0x1F40EB2E0](this, a2);
}

uint64_t WTF::FileSystemImpl::setAllowsMaterializingDatalessFiles()
{
  return MEMORY[0x1F40EB2E8]();
}

uint64_t WTF::FileSystemImpl::lastComponentOfPathIgnoringTrailingSlash(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB2F0](this, a2);
}

uint64_t WTF::FileSystemImpl::fileSize(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB300](this, a2);
}

uint64_t WTF::FileSystemImpl::fileSize(WTF::FileSystemImpl *this)
{
  return MEMORY[0x1F40EB308](this);
}

uint64_t WTF::FileSystemImpl::fileType(WTF::FileSystemImpl *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB310](this, a2);
}

uint64_t WTF::FileSystemImpl::hardLink(WTF::FileSystemImpl *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F40EB318](this, a2, a3);
}

uint64_t WTF::FileSystemImpl::moveFile(WTF::FileSystemImpl *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F40EB320](this, a2, a3);
}

uint64_t WTF::FileSystemImpl::openFile()
{
  return MEMORY[0x1F40EB328]();
}

uint64_t WTF::FileSystemImpl::seekFile()
{
  return MEMORY[0x1F40EB338]();
}

uint64_t WTF::FileSystemImpl::closeFile(WTF::FileSystemImpl *this, int *a2)
{
  return MEMORY[0x1F40EB340](this, a2);
}

uint64_t WTF::FileSystemImpl::mapToFile()
{
  return MEMORY[0x1F40EB350]();
}

uint64_t WTF::hasEntitlement()
{
  return MEMORY[0x1F40EB380]();
}

{
  return MEMORY[0x1F40EB388]();
}

{
  return MEMORY[0x1F40EB398]();
}

uint64_t WTF::isVersion4UUID()
{
  return MEMORY[0x1F40EB3A0]();
}

uint64_t WTF::ApproximateTime::now(WTF::ApproximateTime *this)
{
  return MEMORY[0x1F40EB3A8](this);
}

uint64_t WTF::AutodrainedPool::AutodrainedPool(WTF::AutodrainedPool *this)
{
  return MEMORY[0x1F40EB3B0](this);
}

void WTF::AutodrainedPool::~AutodrainedPool(WTF::AutodrainedPool *this)
{
}

uint64_t WTF::BinarySemaphore::signal(WTF::BinarySemaphore *this)
{
  return MEMORY[0x1F40EB3C0](this);
}

uint64_t WTF::BinarySemaphore::waitUntil()
{
  return MEMORY[0x1F40EB3C8]();
}

uint64_t WTF::defaultLanguage()
{
  return MEMORY[0x1F40EB3D0]();
}

uint64_t WTF::codePointCompare()
{
  return MEMORY[0x1F40EB410]();
}

uint64_t WTF::codePointCompare(WTF *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F40EB418](this, a2, a3);
}

uint64_t WTF::fastZeroedMalloc(WTF *this)
{
  return MEMORY[0x1F40EB420](this);
}

uint64_t WTF::terminateProcess(WTF *this)
{
  return MEMORY[0x1F40EB430](this);
}

uint64_t WTF::weakRandomNumber<unsigned int>()
{
  return MEMORY[0x1F40EB438]();
}

uint64_t WTF::NativePromiseBase::logChannel(WTF::NativePromiseBase *this)
{
  return MEMORY[0x1F40EB448](this);
}

uint64_t WTF::StringPrintStream::toString(WTF::StringPrintStream *this)
{
  return MEMORY[0x1F40EB458](this);
}

uint64_t WTF::StringPrintStream::StringPrintStream(WTF::StringPrintStream *this)
{
  return MEMORY[0x1F40EB468](this);
}

void WTF::StringPrintStream::~StringPrintStream(WTF::StringPrintStream *this)
{
}

uint64_t WTF::callOnMainRunLoop()
{
  return MEMORY[0x1F40EB480]();
}

uint64_t WTF::fastCompactMalloc(WTF *this)
{
  return MEMORY[0x1F40EB4B0](this);
}

uint64_t WTF::languageDidChange(WTF *this)
{
  return MEMORY[0x1F40EB4B8](this);
}

uint64_t WTF::makeVectorElement(WTF *this, const WTF::String *a2, objc_object *a3)
{
  return MEMORY[0x1F40EB4C0](this, a2, a3);
}

uint64_t WTF::userVisibleString(WTF *this, NSURL *a2)
{
  return MEMORY[0x1F40EB4D8](this, a2);
}

uint64_t WTF::FunctionDispatcher::FunctionDispatcher(WTF::FunctionDispatcher *this)
{
  return MEMORY[0x1F40EB4E8](this);
}

void WTF::FunctionDispatcher::~FunctionDispatcher(WTF::FunctionDispatcher *this)
{
}

uint64_t WTF::ensureOnMainThread()
{
  return MEMORY[0x1F40EB508]();
}

uint64_t WTF::makeNSArrayElement(WTF *this, const URL *a2)
{
  return MEMORY[0x1F40EB518](this, a2);
}

uint64_t WTF::makeNSArrayElement(WTF *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB520](this, a2);
}

uint64_t WTF::setCrashLogMessage(WTF *this, const char *a2)
{
  return MEMORY[0x1F40EB528](this, a2);
}

uint64_t WTF::ConcurrentWorkQueue::create()
{
  return MEMORY[0x1F40EB538]();
}

uint64_t WTF::ConcurrentWorkQueue::dispatch()
{
  return MEMORY[0x1F40EB540]();
}

uint64_t WTF::ensureOnMainRunLoop()
{
  return MEMORY[0x1F40EB558]();
}

uint64_t WTF::makeStringByJoining()
{
  return MEMORY[0x1F40EB578]();
}

uint64_t WTF::numGraphemeClusters()
{
  return MEMORY[0x1F40EB588]();
}

uint64_t WTF::sdkAlignedBehaviors(WTF *this)
{
  return MEMORY[0x1F40EB590](this);
}

uint64_t WTF::setTimeZoneOverride()
{
  return MEMORY[0x1F40EB598]();
}

uint64_t WTF::SuspendableWorkQueue::dispatchAfter()
{
  return MEMORY[0x1F40EB5B0]();
}

uint64_t WTF::SuspendableWorkQueue::create()
{
  return MEMORY[0x1F40EB5B8]();
}

uint64_t WTF::SuspendableWorkQueue::resume(WTF::SuspendableWorkQueue *this)
{
  return MEMORY[0x1F40EB5C0](this);
}

uint64_t WTF::SuspendableWorkQueue::suspend()
{
  return MEMORY[0x1F40EB5C8]();
}

uint64_t WTF::SuspendableWorkQueue::dispatch()
{
  return MEMORY[0x1F40EB5D0]();
}

uint64_t WTF::base64EncodeToString()
{
  return MEMORY[0x1F40EB5E0]();
}

uint64_t WTF::fastMallocStatistics(WTF *this)
{
  return MEMORY[0x1F40EB5F8](this);
}

uint64_t WTF::initializeMainThread(WTF *this)
{
  return MEMORY[0x1F40EB600](this);
}

uint64_t WTF::protocolIsJavaScript()
{
  return MEMORY[0x1F40EB610]();
}

uint64_t WTF::setProcessPrivileges()
{
  return MEMORY[0x1F40EB618]();
}

uint64_t WTF::tryFastCompactMalloc(WTF *this)
{
  return MEMORY[0x1F40EB620](this);
}

uint64_t WTF::MemoryPressureHandler::releaseMemory()
{
  return MEMORY[0x1F40EB630]();
}

uint64_t WTF::MemoryPressureHandler::processStateDescription(WTF::MemoryPressureHandler *this)
{
  return MEMORY[0x1F40EB640](this);
}

uint64_t WTF::MemoryPressureHandler::install(WTF::MemoryPressureHandler *this)
{
  return MEMORY[0x1F40EB650](this);
}

uint64_t WTF::MemoryPressureHandler::singleton(WTF::MemoryPressureHandler *this)
{
  return MEMORY[0x1F40EB658](this);
}

uint64_t WTF::numberToStringAndSize()
{
  return MEMORY[0x1F40EB670]();
}

{
  return MEMORY[0x1F40EB678]();
}

uint64_t WTF::processHasEntitlement()
{
  return MEMORY[0x1F40EB680]();
}

uint64_t WTF::removeQueryParameters()
{
  return MEMORY[0x1F40EB688]();
}

uint64_t WTF::defaultPortForProtocol()
{
  return MEMORY[0x1F40EB6B0]();
}

uint64_t WTF::equalIgnoringASCIICase(WTF *this, const WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  return MEMORY[0x1F40EB6B8](this, a2, a3);
}

uint64_t WTF::numberOfProcessorCores(WTF *this)
{
  return MEMORY[0x1F40EB6C8](this);
}

uint64_t WTF::setSDKAlignedBehaviors()
{
  return MEMORY[0x1F40EB6E0]();
}

uint64_t WTF::callOnMainThreadAndWait()
{
  return MEMORY[0x1F40EB6F0]();
}

uint64_t WTF::callOnMainRunLoopAndWait()
{
  return MEMORY[0x1F40EB710]();
}

uint64_t WTF::createVersion4UUIDString(WTF *this)
{
  return MEMORY[0x1F40EB718](this);
}

uint64_t WTF::isDefaultPortForProtocol()
{
  return MEMORY[0x1F40EB730]();
}

uint64_t WTF::deallocateSendRightSafely(WTF *this)
{
  return MEMORY[0x1F40EB750](this);
}

uint64_t WTF::hasEntitlementValueInArray()
{
  return MEMORY[0x1F40EB760]();
}

uint64_t WTF::setPermissionsOfConfigPage(WTF *this)
{
  return MEMORY[0x1F40EB770](this);
}

uint64_t WTF::protocolHostAndPortAreEqual(WTF *this, const URL *a2, const URL *a3)
{
  return MEMORY[0x1F40EB778](this, a2, a3);
}

uint64_t WTF::releaseFastMallocFreeMemory(WTF *this)
{
  return MEMORY[0x1F40EB780](this);
}

uint64_t WTF::enableAllSDKAlignedBehaviors(WTF *this)
{
  return MEMORY[0x1F40EB7A0](this);
}

uint64_t WTF::encodeWithURLEscapeSequences(WTF *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EB7A8](this, a2);
}

uint64_t WTF::cryptographicallyRandomNumber<unsigned int>()
{
  return MEMORY[0x1F40EB7D0]();
}

uint64_t WTF::cryptographicallyRandomNumber<unsigned long long>()
{
  return MEMORY[0x1F40EB7D8]();
}

uint64_t WTF::cryptographicallyRandomValues()
{
  return MEMORY[0x1F40EB7E0]();
}

uint64_t WTF::linkedOnOrAfterSDKWithBehavior()
{
  return MEMORY[0x1F40EB800]();
}

uint64_t WTF::overrideUserPreferredLanguages()
{
  return MEMORY[0x1F40EB810]();
}

uint64_t WTF::ramSizeDisregardingJetsamLimit(WTF *this)
{
  return MEMORY[0x1F40EB818](this);
}

uint64_t WTF::equalIgnoringFragmentIdentifier(WTF *this, const URL *a2, const URL *a3)
{
  return MEMORY[0x1F40EB830](this, a2, a3);
}

uint64_t WTF::cryptographicallyRandomUnitInterval(WTF *this)
{
  return MEMORY[0x1F40EB860](this);
}

uint64_t WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal()
{
  return MEMORY[0x1F40EB878]();
}

uint64_t WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal()
{
  return MEMORY[0x1F40EB880]();
}

uint64_t WTF::URL::invalidate(WTF::URL *this)
{
  return MEMORY[0x1F40EB898](this);
}

uint64_t WTF::URL::setProtocol()
{
  return MEMORY[0x1F40EB8A8]();
}

uint64_t WTF::URL::hostIsIPAddress()
{
  return MEMORY[0x1F40EB8B8]();
}

uint64_t WTF::URL::setFragmentIdentifier()
{
  return MEMORY[0x1F40EB8D0]();
}

uint64_t WTF::URL::removeFragmentIdentifier(WTF::URL *this)
{
  return MEMORY[0x1F40EB8E8](this);
}

uint64_t WTF::URL::fileURLWithFileSystemPath()
{
  return MEMORY[0x1F40EB8F0]();
}

uint64_t WTF::URL::removeQueryAndFragmentIdentifier(WTF::URL *this)
{
  return MEMORY[0x1F40EB8F8](this);
}

uint64_t WTF::URL::setHost()
{
  return MEMORY[0x1F40EB900]();
}

uint64_t WTF::URL::URL()
{
  return MEMORY[0x1F40EB928]();
}

{
  return MEMORY[0x1F40EB940]();
}

uint64_t WTF::URL::URL(WTF::URL *this, NSURL *a2)
{
  return MEMORY[0x1F40EB930](this, a2);
}

uint64_t WTF::Lock::unlockSlow(WTF::Lock *this)
{
  return MEMORY[0x1F40EB978](this);
}

uint64_t WTF::Lock::lockSlow(WTF::Lock *this)
{
  return MEMORY[0x1F40EB980](this);
}

uint64_t WTF::SHA1::computeHash()
{
  return MEMORY[0x1F40EB988]();
}

uint64_t WTF::SHA1::addUTF8Bytes(WTF::SHA1 *this, const __CFString *a2)
{
  return MEMORY[0x1F40EB998](this, a2);
}

uint64_t WTF::SHA1::addBytes()
{
  return MEMORY[0x1F40EB9A0]();
}

uint64_t WTF::SHA1::hexDigest()
{
  return MEMORY[0x1F40EB9A8]();
}

uint64_t WTF::SHA1::SHA1(WTF::SHA1 *this)
{
  return MEMORY[0x1F40EB9B0](this);
}

uint64_t WTF::UUID::fromNSUUID(WTF::UUID *this, NSUUID *a2)
{
  return MEMORY[0x1F40EB9B8](this, a2);
}

uint64_t WTF::UUID::parseVersion4()
{
  return MEMORY[0x1F40EB9C0]();
}

uint64_t WTF::UUID::generateWeakRandomUUIDVersion4(WTF::UUID *this)
{
  return MEMORY[0x1F40EB9C8](this);
}

uint64_t WTF::UUID::parse()
{
  return MEMORY[0x1F40EB9D0]();
}

uint64_t WTF::UUID::UUID(WTF::UUID *this)
{
  return MEMORY[0x1F40EB9D8](this);
}

uint64_t WTF::equal()
{
  return MEMORY[0x1F40EBA08]();
}

uint64_t WTF::equal(WTF *this, const WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  return MEMORY[0x1F40EBA18](this, a2, a3);
}

{
  return MEMORY[0x1F40EBA20](this, a2, a3);
}

uint64_t WTF::sleep()
{
  return MEMORY[0x1F40EBA28]();
}

uint64_t WTF::Config::disableFreezingForTesting(WTF::Config *this)
{
  return MEMORY[0x1F40EBA30](this);
}

uint64_t WTF::Logger::observers(WTF::Logger *this)
{
  return MEMORY[0x1F40EBA40](this);
}

uint64_t WTF::String::numberToStringFixedPrecision()
{
  return MEMORY[0x1F40EBA60]();
}

uint64_t WTF::String::number(WTF::String *this, double a2)
{
  return MEMORY[0x1F40EBA68](this, a2);
}

uint64_t WTF::String::number(WTF::String *this, float a2)
{
  return MEMORY[0x1F40EBA70](this, a2);
}

uint64_t WTF::String::number(WTF::String *this)
{
  return MEMORY[0x1F40EBA78](this);
}

{
  return MEMORY[0x1F40EBA80](this);
}

{
  return MEMORY[0x1F40EBA90](this);
}

{
  return MEMORY[0x1F40EBA98](this);
}

{
  return MEMORY[0x1F40EBAA0](this);
}

uint64_t WTF::String::fromUTF8()
{
  return MEMORY[0x1F40EBAA8]();
}

uint64_t WTF::String::String()
{
  return MEMORY[0x1F40EBAB8]();
}

{
  return MEMORY[0x1F40EBAC0]();
}

{
  return MEMORY[0x1F40EBAC8]();
}

uint64_t WTF::String::String(WTF::String *this, const __CFString *a2)
{
  return MEMORY[0x1F40EBAD0](this, a2);
}

uint64_t WTF::String::String(WTF::String *this, const char *a2)
{
  return MEMORY[0x1F40EBAD8](this, a2);
}

uint64_t WTF::Thread::changePriority(WTF::Thread *this)
{
  return MEMORY[0x1F40EBAF8](this);
}

uint64_t WTF::Thread::currentThreadQOS(WTF::Thread *this)
{
  return MEMORY[0x1F40EBB00](this);
}

uint64_t WTF::Thread::waitForCompletion(WTF::Thread *this)
{
  return MEMORY[0x1F40EBB08](this);
}

uint64_t WTF::Thread::initializeCurrentTLS(WTF::Thread *this)
{
  return MEMORY[0x1F40EBB10](this);
}

uint64_t WTF::Thread::setGlobalMaxQOSClass(WTF::Thread *this, uint64_t a2)
{
  return MEMORY[0x1F40EBB18](this, a2);
}

uint64_t WTF::Thread::setThreadTimeConstraints()
{
  return MEMORY[0x1F40EBB20]();
}

uint64_t WTF::Thread::setCurrentThreadIsUserInitiated(WTF::Thread *this)
{
  return MEMORY[0x1F40EBB28](this);
}

uint64_t WTF::Thread::setCurrentThreadIsUserInteractive(WTF::Thread *this)
{
  return MEMORY[0x1F40EBB30](this);
}

uint64_t WTF::Thread::create()
{
  return MEMORY[0x1F40EBB38]();
}

void WTF::Thread::~Thread(WTF::Thread *this)
{
}

uint64_t WTF::CString::mutableData(WTF::CString *this)
{
  return MEMORY[0x1F40EBB58](this);
}

uint64_t WTF::CString::CString()
{
  return MEMORY[0x1F40EBB68]();
}

uint64_t WTF::CString::CString(WTF::CString *this, const char *a2)
{
  return MEMORY[0x1F40EBB70](this, a2);
}

uint64_t WTF::RunLoop::dispatchAfter()
{
  return MEMORY[0x1F40EBB80]();
}

uint64_t WTF::RunLoop::run(WTF::RunLoop *this)
{
  return MEMORY[0x1F40EBB88](this);
}

uint64_t WTF::RunLoop::main(WTF::RunLoop *this)
{
  return MEMORY[0x1F40EBB90](this);
}

uint64_t WTF::RunLoop::stop(WTF::RunLoop *this)
{
  return MEMORY[0x1F40EBB98](this);
}

uint64_t WTF::RunLoop::wakeUp(WTF::RunLoop *this)
{
  return MEMORY[0x1F40EBBB0](this);
}

uint64_t WTF::RunLoop::current(WTF::RunLoop *this)
{
  return MEMORY[0x1F40EBBB8](this);
}

uint64_t WTF::RunLoop::dispatch()
{
  return MEMORY[0x1F40EBBC0]();
}

uint64_t WTF::RunLoop::TimerBase::stop(WTF::RunLoop::TimerBase *this)
{
  return MEMORY[0x1F40EBBD0](this);
}

uint64_t WTF::RunLoop::TimerBase::start()
{
  return MEMORY[0x1F40EBBD8]();
}

uint64_t WTF::RunLoop::TimerBase::TimerBase(WTF::RunLoop::TimerBase *this, WTF::RunLoop *a2)
{
  return MEMORY[0x1F40EBBE0](this, a2);
}

void WTF::RunLoop::TimerBase::~TimerBase(WTF::RunLoop::TimerBase *this)
{
}

void WTF::RunLoop::~RunLoop(WTF::RunLoop *this)
{
}

uint64_t WTF::Unicode::convertReplacingInvalidSequences()
{
  return MEMORY[0x1F40EBBF8]();
}

uint64_t WTF::Unicode::convert()
{
  return MEMORY[0x1F40EBC00]();
}

{
  return MEMORY[0x1F40EBC10]();
}

uint64_t WTF::ramSize(WTF *this)
{
  return MEMORY[0x1F40EBC20](this);
}

uint64_t WTF::Internal::appendHex()
{
  return MEMORY[0x1F40EBC38]();
}

uint64_t WTF::JSONImpl::Value::create(WTF::JSONImpl::Value *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EBC50](this, a2);
}

uint64_t WTF::JSONImpl::Value::create(WTF::JSONImpl::Value *this)
{
  return MEMORY[0x1F40EBC58](this);
}

{
  return MEMORY[0x1F40EBC68](this);
}

uint64_t WTF::JSONImpl::Value::create(WTF::JSONImpl::Value *this, double a2)
{
  return MEMORY[0x1F40EBC60](this, a2);
}

uint64_t WTF::JSONImpl::Value::parseJSON()
{
  return MEMORY[0x1F40EBC70]();
}

uint64_t WTF::JSONImpl::Value::operator delete()
{
  return MEMORY[0x1F40EBC78]();
}

uint64_t WTF::JSONImpl::Object::create(WTF::JSONImpl::Object *this)
{
  return MEMORY[0x1F40EBC80](this);
}

uint64_t WTF::JSONImpl::ArrayBase::ArrayBase(WTF::JSONImpl::ArrayBase *this)
{
  return MEMORY[0x1F40EBC88](this);
}

uint64_t WTF::WallTime::now(WTF::WallTime *this)
{
  return MEMORY[0x1F40EBC90](this);
}

uint64_t WTF::fastFree(WTF *this, void *a2)
{
  return MEMORY[0x1F40EBCA8](this, a2);
}

uint64_t WTF::pageSize(WTF *this)
{
  return MEMORY[0x1F40EBCB0](this);
}

uint64_t WTF::MediaTime::invalidTime(WTF::MediaTime *this)
{
  return MEMORY[0x1F40EBCD0](this);
}

uint64_t WTF::MediaTime::createWithDouble(WTF::MediaTime *this, double a2)
{
  return MEMORY[0x1F40EBCE8](this, a2);
}

uint64_t WTF::MediaTime::zeroTime(WTF::MediaTime *this)
{
  return MEMORY[0x1F40EBD08](this);
}

uint64_t WTF::URLParser::maybeCanonicalizeScheme()
{
  return MEMORY[0x1F40EBD30]();
}

uint64_t WTF::WorkQueue::main(WTF::WorkQueue *this)
{
  return MEMORY[0x1F40EBD40](this);
}

uint64_t WTF::WorkQueue::create()
{
  return MEMORY[0x1F40EBD48]();
}

uint64_t WTF::operator<<()
{
  return MEMORY[0x1F40EBD60]();
}

uint64_t WTF::operator<()
{
  return MEMORY[0x1F40EBD70]();
}

void rtc::PacketInfo::~PacketInfo(rtc::PacketInfo *this)
{
}

uint64_t rtc::SentPacket::SentPacket(rtc::SentPacket *this)
{
  return MEMORY[0x1F416B488](this);
}

uint64_t rtc::TimeMicros(rtc *this)
{
  return MEMORY[0x1F416B490](this);
}

uint64_t rtc::TimeMillis(rtc *this)
{
  return MEMORY[0x1F416B498](this);
}

uint64_t rtc::PacketOptions::PacketOptions()
{
  return MEMORY[0x1F416B4A8]();
}

uint64_t rtc::PacketOptions::PacketOptions(rtc::PacketOptions *this)
{
  return MEMORY[0x1F416B4B0](this);
}

void rtc::PacketOptions::~PacketOptions(rtc::PacketOptions *this)
{
}

uint64_t rtc::SocketAddress::SetResolvedIP(rtc::SocketAddress *this, const rtc::IPAddress *a2)
{
  return MEMORY[0x1F416B4C0](this, a2);
}

uint64_t rtc::SocketAddress::SetIP()
{
  return MEMORY[0x1F416B4C8]();
}

uint64_t rtc::SocketAddress::SetPort(rtc::SocketAddress *this)
{
  return MEMORY[0x1F416B4D0](this);
}

uint64_t rtc::SocketAddress::SocketAddress()
{
  return MEMORY[0x1F416B4D8]();
}

uint64_t rtc::SocketAddress::SocketAddress(rtc::SocketAddress *this, const rtc::IPAddress *a2)
{
  return MEMORY[0x1F416B4E0](this, a2);
}

uint64_t rtc::SocketAddress::SocketAddress(rtc::SocketAddress *this, const rtc::SocketAddress *a2)
{
  return MEMORY[0x1F416B4E8](this, a2);
}

uint64_t rtc::SocketAddress::SocketAddress(rtc::SocketAddress *this)
{
  return MEMORY[0x1F416B4F0](this);
}

uint64_t rtc::SocketAddress::operator=()
{
  return MEMORY[0x1F416B4F8]();
}

uint64_t rtc::ReceivedPacket::ReceivedPacket()
{
  return MEMORY[0x1F416B510]();
}

uint64_t rtc::CountIPMaskBits(rtc *this, const rtc::IPAddress *a2)
{
  return MEMORY[0x1F416B528](this, a2);
}

uint64_t rtc::AsyncPacketSocket::NotifyPacketReceived()
{
  return MEMORY[0x1F416B530]();
}

uint64_t rtc::NetworkManagerBase::MergeNetworkList()
{
  return MEMORY[0x1F416B558]();
}

uint64_t rtc::NetworkManagerBase::set_default_local_addresses(rtc::NetworkManagerBase *this, const rtc::IPAddress *a2, const rtc::IPAddress *a3)
{
  return MEMORY[0x1F416B560](this, a2, a3);
}

uint64_t rtc::NetworkManagerBase::NetworkManagerBase(rtc::NetworkManagerBase *this)
{
  return MEMORY[0x1F416B568](this);
}

uint64_t rtc::IPAddressPrecedence(rtc *this, const rtc::IPAddress *a2)
{
  return MEMORY[0x1F416B578](this, a2);
}

uint64_t rtc::PacketTimeUpdateParams::PacketTimeUpdateParams(rtc::PacketTimeUpdateParams *this)
{
  return MEMORY[0x1F416B588](this);
}

void rtc::PacketTimeUpdateParams::~PacketTimeUpdateParams(rtc::PacketTimeUpdateParams *this)
{
}

uint64_t rtc::Network::SetIPs()
{
  return MEMORY[0x1F416B5F0]();
}

uint64_t rtc::Network::Network()
{
  return MEMORY[0x1F416B5F8]();
}

{
  return MEMORY[0x1F416B600]();
}

void rtc::Network::~Network(rtc::Network *this)
{
}

uint64_t apdu::ApduResponse::createFromMessage()
{
  return MEMORY[0x1F416BEF0]();
}

uint64_t cbor::CBORReader::read()
{
  return MEMORY[0x1F416BEF8]();
}

uint64_t cbor::CBORWriter::write()
{
  return MEMORY[0x1F416BF00]();
}

uint64_t cbor::CBORValue::CBORValue()
{
  return MEMORY[0x1F416BF08]();
}

{
  return MEMORY[0x1F416BF10]();
}

{
  return MEMORY[0x1F416BF18]();
}

{
  return MEMORY[0x1F416BF20]();
}

{
  return MEMORY[0x1F416BF28]();
}

{
  return MEMORY[0x1F416BF30]();
}

{
  return MEMORY[0x1F416BF48]();
}

{
  return MEMORY[0x1F416BF58]();
}

uint64_t cbor::CBORValue::CBORValue(cbor::CBORValue *this, const char *a2)
{
  return MEMORY[0x1F416BF38](this, a2);
}

uint64_t cbor::CBORValue::CBORValue(cbor::CBORValue *this, const WTF::String *a2)
{
  return MEMORY[0x1F416BF40](this, a2);
}

uint64_t cbor::CBORValue::CBORValue(cbor::CBORValue *this, const WebCore::BufferSource *a2)
{
  return MEMORY[0x1F416BF50](this, a2);
}

uint64_t cbor::CBORValue::CBORValue(cbor::CBORValue *this)
{
  return MEMORY[0x1F416BF60](this);
}

{
  return MEMORY[0x1F416BF68](this);
}

{
  return MEMORY[0x1F416BF70](this);
}

void cbor::CBORValue::~CBORValue(cbor::CBORValue *this)
{
}

uint64_t cbor::CBORValue::operator=()
{
  return MEMORY[0x1F416BF80]();
}

uint64_t fido::encodeAsCBOR(fido *this, const fido::AuthenticatorGetInfoResponse *a2)
{
  return MEMORY[0x1F416BF88](this, a2);
}

uint64_t fido::FidoHidMessage::popNextPacket(fido::FidoHidMessage *this)
{
  return MEMORY[0x1F416BF90](this);
}

uint64_t fido::FidoHidMessage::addContinuationPacket()
{
  return MEMORY[0x1F416BF98]();
}

uint64_t fido::FidoHidMessage::createFromSerializedData()
{
  return MEMORY[0x1F416BFA0]();
}

uint64_t fido::FidoHidMessage::create()
{
  return MEMORY[0x1F416BFA8]();
}

uint64_t fido::getResponseCode()
{
  return MEMORY[0x1F416BFB0]();
}

uint64_t fido::FidoHidInitPacket::FidoHidInitPacket()
{
  return MEMORY[0x1F416BFB8]();
}

uint64_t fido::readU2fSignResponse()
{
  return MEMORY[0x1F416BFC0]();
}

uint64_t fido::convertToU2fSignCommand()
{
  return MEMORY[0x1F416BFC8]();
}

uint64_t fido::readCTAPGetInfoResponse()
{
  return MEMORY[0x1F416BFD0]();
}

uint64_t fido::readU2fRegisterResponse()
{
  return MEMORY[0x1F416BFD8]();
}

uint64_t fido::FidoHidContinuationPacket::FidoHidContinuationPacket()
{
  return MEMORY[0x1F416BFE0]();
}

uint64_t fido::convertToU2fRegisterCommand()
{
  return MEMORY[0x1F416BFE8]();
}

uint64_t fido::AuthenticatorGetInfoResponse::setOptions()
{
  return MEMORY[0x1F416BFF0]();
}

uint64_t fido::AuthenticatorGetInfoResponse::setPinProtocols()
{
  return MEMORY[0x1F416BFF8]();
}

uint64_t fido::AuthenticatorGetInfoResponse::AuthenticatorGetInfoResponse()
{
  return MEMORY[0x1F416C000]();
}

uint64_t fido::readCTAPGetAssertionResponse()
{
  return MEMORY[0x1F416C008]();
}

uint64_t fido::AuthenticatorSupportedOptions::setClientPinAvailability()
{
  return MEMORY[0x1F416C010]();
}

uint64_t fido::AuthenticatorSupportedOptions::setUserVerificationAvailability()
{
  return MEMORY[0x1F416C018]();
}

uint64_t fido::isConvertibleToU2fSignCommand(fido *this, const PublicKeyCredentialRequestOptions *a2)
{
  return MEMORY[0x1F416C020](this, a2);
}

uint64_t fido::readCTAPMakeCredentialResponse()
{
  return MEMORY[0x1F416C028]();
}

uint64_t fido::encodeEmptyAuthenticatorRequest()
{
  return MEMORY[0x1F416C030]();
}

uint64_t fido::encodeGetAssertionRequestAsCBOR()
{
  return MEMORY[0x1F416C038]();
}

uint64_t fido::convertToU2fCheckOnlySignCommand()
{
  return MEMORY[0x1F416C040]();
}

uint64_t fido::encodeMakeCredentialRequestAsCBOR()
{
  return MEMORY[0x1F416C048]();
}

uint64_t fido::isConvertibleToU2fRegisterCommand(fido *this, const PublicKeyCredentialCreationOptions *a2)
{
  return MEMORY[0x1F416C050](this, a2);
}

uint64_t fido::constructBogusU2fRegistrationCommand(fido *this)
{
  return MEMORY[0x1F416C058](this);
}

uint64_t fido::pin::TokenRequest::tryCreate()
{
  return MEMORY[0x1F416C060]();
}

uint64_t fido::pin::encodeAsCBOR()
{
  return MEMORY[0x1F416C068]();
}

{
  return MEMORY[0x1F416C070]();
}

{
  return MEMORY[0x1F416C078]();
}

uint64_t fido::pin::TokenResponse::parse()
{
  return MEMORY[0x1F416C080]();
}

uint64_t fido::pin::RetriesResponse::parse()
{
  return MEMORY[0x1F416C088]();
}

uint64_t fido::pin::KeyAgreementResponse::parse()
{
  return MEMORY[0x1F416C090]();
}

uint64_t fido::pin::KeyAgreementResponse::KeyAgreementResponse()
{
  return MEMORY[0x1F416C098]();
}

void fido::pin::KeyAgreementResponse::~KeyAgreementResponse(fido::pin::KeyAgreementResponse *this)
{
}

uint64_t fido::pin::validateAndConvertToUTF8(fido::pin *this, const WTF::String *a2)
{
  return MEMORY[0x1F416C0A8](this, a2);
}

uint64_t webrtc::SdpVideoFormat::SdpVideoFormat()
{
  return MEMORY[0x1F416B768]();
}

void webrtc::SdpVideoFormat::~SdpVideoFormat(webrtc::SdpVideoFormat *this)
{
}

uint64_t webrtc::flushLocalEncoder(webrtc *this, void *a2)
{
  return MEMORY[0x1F416B7A8](this, a2);
}

uint64_t webrtc::callback_list_impl::CallbackListReceivers::Foreach()
{
  return MEMORY[0x1F416B7E8]();
}

uint64_t webrtc::callback_list_impl::CallbackListReceivers::CallbackListReceivers(webrtc::callback_list_impl::CallbackListReceivers *this)
{
  return MEMORY[0x1F416B7F0](this);
}

uint64_t webrtc::createLocalEncoder()
{
  return MEMORY[0x1F416B7F8]();
}

uint64_t webrtc::releaseLocalEncoder(webrtc *this, void *a2)
{
  return MEMORY[0x1F416B810](this, a2);
}

uint64_t webrtc::setLocalEncoderRates(webrtc *this, void *a2)
{
  return MEMORY[0x1F416B848](this, a2);
}

uint64_t webrtc::copyPixelBufferForFrame()
{
  return MEMORY[0x1F416B8C8]();
}

uint64_t webrtc::encodeLocalEncoderFrame()
{
  return MEMORY[0x1F416B8D0]();
}

uint64_t webrtc::encoderVideoTaskComplete()
{
  return MEMORY[0x1F416B8E8]();
}

uint64_t webrtc::setVideoDecoderCallbacks()
{
  return MEMORY[0x1F416B900]();
}

uint64_t webrtc::videoDecoderTaskComplete(webrtc *this, void *a2, uint64_t a3, uint64_t a4, __CVBuffer *a5)
{
  return MEMORY[0x1F416B918](this, a2, a3, a4, a5);
}

uint64_t webrtc::videoDecoderTaskComplete(webrtc *this, void *a2, uint64_t a3, uint64_t a4, void *a5, __CVBuffer *(*a6)(void *), void (*a7)(void *), int a8, int a9)
{
  return MEMORY[0x1F416B920](this, a2, a3, a4, a5, a6, a7);
}

uint64_t webrtc::videoFrameBufferProvider()
{
  return MEMORY[0x1F416B928]();
}

uint64_t webrtc::setLocalEncoderLowLatency(webrtc *this, void *a2)
{
  return MEMORY[0x1F416B938](this, a2);
}

uint64_t WebCore::CDMFactory::registeredFactories(WebCore::CDMFactory *this)
{
  return MEMORY[0x1F416C0B0](this);
}

uint64_t WebCore::CDMFactory::platformRegisterFactories()
{
  return MEMORY[0x1F416C0B8]();
}

uint64_t WebCore::CDMPrivate::CDMPrivate(WebCore::CDMPrivate *this)
{
  return MEMORY[0x1F416C0C0](this);
}

uint64_t WebCore::CachedPage::restore()
{
  return MEMORY[0x1F416C0D0]();
}

void WebCore::CachedPage::~CachedPage(WebCore::CachedPage *this)
{
}

uint64_t WebCore::Credential::fromIPCData()
{
  return MEMORY[0x1F416C0E0]();
}

uint64_t WebCore::Credential::Credential(WebCore::Credential *this, NSURLCredential *a2)
{
  return MEMORY[0x1F416C0E8](this, a2);
}

uint64_t WebCore::FileHandle::FileHandle()
{
  return MEMORY[0x1F416C0F0]();
}

uint64_t WebCore::FileHandle::FileHandle(WebCore::FileHandle *this)
{
  return MEMORY[0x1F416C0F8](this);
}

void WebCore::FileHandle::~FileHandle(WebCore::FileHandle *this)
{
}

uint64_t WebCore::FileHandle::operator=()
{
  return MEMORY[0x1F416C108]();
}

uint64_t WebCore::FloatPoint::FloatPoint(WebCore::FloatPoint *this, const CGPoint *a2)
{
  return MEMORY[0x1F416C110](this, a2);
}

uint64_t WebCore::FloatPoint::FloatPoint(WebCore::FloatPoint *this, const IntPoint *a2)
{
  return MEMORY[0x1F416C118](this, a2);
}

uint64_t WebCore::LayoutRect::LayoutRect(WebCore::LayoutRect *this, const FloatRect *a2)
{
  return MEMORY[0x1F416C128](this, a2);
}

uint64_t WebCore::LocalFrame::createView()
{
  return MEMORY[0x1F416C130]();
}

uint64_t WebCore::LocalFrame::checkedEditor(WebCore::LocalFrame *this)
{
  return MEMORY[0x1F416C138](this);
}

uint64_t WebCore::LocalFrame::fromJSContext(WebCore::LocalFrame *this, const OpaqueJSContext *a2)
{
  return MEMORY[0x1F416C140](this, a2);
}

uint64_t WebCore::LocalFrame::rangeForPoint(WebCore::LocalFrame *this, const IntPoint *a2)
{
  return MEMORY[0x1F416C148](this, a2);
}

uint64_t WebCore::LocalFrame::createSubframe()
{
  return MEMORY[0x1F416C150]();
}

uint64_t WebCore::LocalFrame::createMainFrame()
{
  return MEMORY[0x1F416C158]();
}

uint64_t WebCore::LocalFrame::setPageZoomFactor(WebCore::LocalFrame *this, float a2)
{
  return MEMORY[0x1F416C168](this, a2);
}

uint64_t WebCore::LocalFrame::setTextZoomFactor(WebCore::LocalFrame *this, float a2)
{
  return MEMORY[0x1F416C170](this, a2);
}

uint64_t WebCore::LocalFrame::checkedEventHandler(WebCore::LocalFrame *this)
{
  return MEMORY[0x1F416C180](this);
}

uint64_t WebCore::LocalFrame::dataDetectionResults(WebCore::LocalFrame *this)
{
  return MEMORY[0x1F416C188](this);
}

uint64_t WebCore::LocalFrame::deepestNodeAtLocation(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2)
{
  return MEMORY[0x1F416C190](this, a2);
}

uint64_t WebCore::LocalFrame::createProvisionalSubframe()
{
  return MEMORY[0x1F416C1B0]();
}

uint64_t WebCore::LocalFrame::setPageAndTextZoomFactors(WebCore::LocalFrame *this, float a2, float a3)
{
  return MEMORY[0x1F416C1B8](this, a2, a3);
}

uint64_t WebCore::LocalFrame::injectUserScriptImmediately()
{
  return MEMORY[0x1F416C1C8]();
}

uint64_t WebCore::LocalFrame::nodeRespondingToClickEvents(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2, WebCore::FloatPoint *a3, WebCore::SecurityOrigin *a4)
{
  return MEMORY[0x1F416C1D0](this, a2, a3, a4);
}

uint64_t WebCore::LocalFrame::nodeRespondingToInteraction(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2, WebCore::FloatPoint *a3)
{
  return MEMORY[0x1F416C1D8](this, a2, a3);
}

uint64_t WebCore::LocalFrame::resetAllGeolocationPermission(WebCore::LocalFrame *this)
{
  return MEMORY[0x1F416C1E8](this);
}

uint64_t WebCore::LocalFrame::nodeRespondingToDoubleClickEvent(WebCore::LocalFrame *this, const WebCore::FloatPoint *a2, WebCore::FloatPoint *a3)
{
  return MEMORY[0x1F416C1F8](this, a2, a3);
}

uint64_t WebCore::LocalFrame::contentFrameFromWindowOrFrameElement(WebCore::LocalFrame *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  return MEMORY[0x1F416C228](this, a2, a3);
}

uint64_t WebCore::LocalFrame::init(WebCore::LocalFrame *this)
{
  return MEMORY[0x1F416C258](this);
}

uint64_t WebCore::LocalFrame::setView()
{
  return MEMORY[0x1F416C270]();
}

uint64_t WebCore::MouseEvent::create()
{
  return MEMORY[0x1F416C298]();
}

{
  return MEMORY[0x1F416C2A0]();
}

void WebCore::OriginLock::~OriginLock(WebCore::OriginLock *this)
{
}

uint64_t WebCore::Pasteboard::createForDragAndDrop()
{
  return MEMORY[0x1F416C2B0]();
}

uint64_t WebCore::Pasteboard::nameOfDragPasteboard(WebCore::Pasteboard *this)
{
  return MEMORY[0x1F416C2B8](this);
}

uint64_t WebCore::Pasteboard::createForCopyAndPaste()
{
  return MEMORY[0x1F416C2C0]();
}

uint64_t WebCore::Pasteboard::supportedFileUploadPasteboardTypes(WebCore::Pasteboard *this)
{
  return MEMORY[0x1F416C2C8](this);
}

uint64_t WebCore::PingLoader::sendViolationReport()
{
  return MEMORY[0x1F416C2D0]();
}

uint64_t WebCore::PushCrypto::decryptAESGCMPayload()
{
  return MEMORY[0x1F416C2E0]();
}

uint64_t WebCore::PushCrypto::decryptAES128GCMPayload()
{
  return MEMORY[0x1F416C2E8]();
}

uint64_t WebCore::RenderView::compositor(WebCore::RenderView *this)
{
  return MEMORY[0x1F416C2F0](this);
}

uint64_t WebCore::ScrollView::setScrollOffset(WebCore::ScrollView *this, const IntPoint *a2)
{
  return MEMORY[0x1F416C2F8](this, a2);
}

uint64_t WebCore::ScrollView::setScrollbarModes()
{
  return MEMORY[0x1F416C308]();
}

uint64_t WebCore::ScrollView::setUseFixedLayout(WebCore::ScrollView *this)
{
  return MEMORY[0x1F416C310](this);
}

uint64_t WebCore::ScrollView::setFixedLayoutSize(WebCore::ScrollView *this, const IntSize *a2)
{
  return MEMORY[0x1F416C318](this, a2);
}

uint64_t WebCore::ScrollView::setExposedContentRect(WebCore::ScrollView *this, const FloatRect *a2)
{
  return MEMORY[0x1F416C320](this, a2);
}

uint64_t WebCore::ScrollView::setUnobscuredContentSize(WebCore::ScrollView *this, const WebCore::FloatSize *a2)
{
  return MEMORY[0x1F416C328](this, a2);
}

uint64_t WebCore::ScrollView::setDelegatedScrollingMode()
{
  return MEMORY[0x1F416C330]();
}

uint64_t WebCore::ScrollView::paint()
{
  return MEMORY[0x1F416C340]();
}

uint64_t WebCore::StorageMap::removeItem(WebCore::StorageMap *this, const WTF::String *a2, WTF::String *a3)
{
  return MEMORY[0x1F416C348](this, a2, a3);
}

uint64_t WebCore::StorageMap::importItems()
{
  return MEMORY[0x1F416C350]();
}

uint64_t WebCore::StorageMap::setItemIgnoringQuota(WebCore::StorageMap *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F416C358](this, a2, a3);
}

uint64_t WebCore::StorageMap::clear(WebCore::StorageMap *this)
{
  return MEMORY[0x1F416C368](this);
}

uint64_t WebCore::StorageMap::setItem(WebCore::StorageMap *this, const WTF::String *a2, const WTF::String *a3, WTF::String *a4, BOOL *a5)
{
  return MEMORY[0x1F416C370](this, a2, a3, a4, a5);
}

uint64_t WebCore::StorageMap::StorageMap(WebCore::StorageMap *this)
{
  return MEMORY[0x1F416C378](this);
}

uint64_t WebCore::StyleColor::StyleColor()
{
  return MEMORY[0x1F416C380]();
}

void WebCore::StyleColor::~StyleColor(WebCore::StyleColor *this)
{
}

uint64_t WebCore::TimeRanges::add()
{
  return MEMORY[0x1F416C390]();
}

uint64_t WebCore::TimeRanges::create(WebCore::TimeRanges *this)
{
  return MEMORY[0x1F416C398](this);
}

uint64_t WebCore::UserScript::UserScript()
{
  return MEMORY[0x1F416C3E8]();
}

uint64_t WebCore::VideoFrame::asVideoFrameCV(WebCore::VideoFrame *this)
{
  return MEMORY[0x1F416C3F0](this);
}

uint64_t WebCore::VideoFrame::VideoFrame()
{
  return MEMORY[0x1F416C3F8]();
}

uint64_t WebCore::cocoaColor(WebCore *this, const Color *a2)
{
  return MEMORY[0x1F416C400](this, a2);
}

uint64_t WebCore::inSameLine()
{
  return MEMORY[0x1F416C408]();
}

uint64_t WebCore::intersects()
{
  return MEMORY[0x1F416C410]();
}

uint64_t WebCore::parseRange()
{
  return MEMORY[0x1F416C418]();
}

uint64_t WebCore::resolveDNS()
{
  return MEMORY[0x1F416C420]();
}

uint64_t WebCore::screenSize(WebCore *this)
{
  return MEMORY[0x1F416C428](this);
}

void WebCore::AbortSignal::~AbortSignal(WebCore::AbortSignal *this)
{
}

void WebCore::AbortSignal::operator delete(void *a1)
{
}

uint64_t WebCore::BitmapImage::create()
{
  return MEMORY[0x1F416C440]();
}

{
  return MEMORY[0x1F416C448]();
}

{
  return MEMORY[0x1F416C450]();
}

uint64_t WebCore::CachedImage::imageForRenderer()
{
  return MEMORY[0x1F416C478]();
}

uint64_t WebCore::ContentType::ContentType(WebCore::ContentType *this, const WTF::String *a2)
{
  return MEMORY[0x1F416C480](this, a2);
}

{
  return MEMORY[0x1F416C488](this, a2);
}

uint64_t WebCore::ControlPart::ControlPart()
{
  return MEMORY[0x1F416C490]();
}

void WebCore::DOMRectList::~DOMRectList(WebCore::DOMRectList *this)
{
}

uint64_t WebCore::DataSegment::create()
{
  return MEMORY[0x1F416C4A0]();
}

{
  return MEMORY[0x1F416C4A8]();
}

uint64_t WebCore::DisplayList::DrawGlyphs::DrawGlyphs()
{
  return MEMORY[0x1F416C4B0]();
}

{
  return MEMORY[0x1F416C4B8]();
}

uint64_t WebCore::DisplayList::DrawPattern::DrawPattern()
{
  return MEMORY[0x1F416C4C0]();
}

uint64_t WebCore::DisplayList::DrawControlPart::DrawControlPart()
{
  return MEMORY[0x1F416C4C8]();
}

uint64_t WebCore::DisplayList::DrawLinesForText::DrawLinesForText()
{
  return MEMORY[0x1F416C4D0]();
}

uint64_t WebCore::DisplayList::DrawDisplayListItems::DrawDisplayListItems()
{
  return MEMORY[0x1F416C4D8]();
}

uint64_t WebCore::DisplayList::FillRectWithGradient::FillRectWithGradient()
{
  return MEMORY[0x1F416C4E0]();
}

{
  return MEMORY[0x1F416C4E8]();
}

uint64_t WebCore::DisplayList::DrawFilteredImageBuffer::DrawFilteredImageBuffer()
{
  return MEMORY[0x1F416C4F0]();
}

uint64_t WebCore::DisplayList::FillRectWithGradientAndSpaceTransform::FillRectWithGradientAndSpaceTransform()
{
  return MEMORY[0x1F416C4F8]();
}

{
  return MEMORY[0x1F416C500]();
}

uint64_t WebCore::DisplayList::Recorder::Recorder()
{
  return MEMORY[0x1F416C508]();
}

uint64_t WebCore::DisplayList::SetState::SetState()
{
  return MEMORY[0x1F416C518]();
}

uint64_t WebCore::EventRegion::EventRegion()
{
  return MEMORY[0x1F416C520]();
}

uint64_t WebCore::EventRegion::EventRegion(WebCore::EventRegion *this)
{
  return MEMORY[0x1F416C528](this);
}

uint64_t WebCore::FEComposite::create()
{
  return MEMORY[0x1F416C548]();
}

uint64_t WebCore::FileChooser::chooseFiles()
{
  return MEMORY[0x1F416C558]();
}

uint64_t WebCore::FileChooser::chooseMediaFiles()
{
  return MEMORY[0x1F416C560]();
}

uint64_t WebCore::FileChooser::cancelFileChoosing(WebCore::FileChooser *this)
{
  return MEMORY[0x1F416C568](this);
}

void WebCore::FileChooser::~FileChooser(WebCore::FileChooser *this)
{
}

uint64_t WebCore::FontCascade::setCodePath()
{
  return MEMORY[0x1F416C578]();
}

uint64_t WebCore::FontCascade::setDisableFontSubpixelAntialiasingForTesting(WebCore::FontCascade *this)
{
  return MEMORY[0x1F416C580](this);
}

uint64_t WebCore::FontChanges::FontChanges()
{
  return MEMORY[0x1F416C588]();
}

uint64_t WebCore::FrameLoader::shouldClose(WebCore::FrameLoader *this)
{
  return MEMORY[0x1F416C598](this);
}

uint64_t WebCore::FrameLoader::changeLocation()
{
  return MEMORY[0x1F416C5A0]();
}

uint64_t WebCore::FrameLoader::detachFromParent(WebCore::FrameLoader *this)
{
  return MEMORY[0x1F416C5A8](this);
}

uint64_t WebCore::FrameLoader::stopForUserCancel(WebCore::FrameLoader *this)
{
  return MEMORY[0x1F416C5B8](this);
}

uint64_t WebCore::FrameLoader::outgoingReferrerURL(WebCore::FrameLoader *this)
{
  return MEMORY[0x1F416C5C0](this);
}

uint64_t WebCore::FrameLoader::completePageTransitionIfNeeded(WebCore::FrameLoader *this)
{
  return MEMORY[0x1F416C5D0](this);
}

uint64_t WebCore::FrameLoader::load()
{
  return MEMORY[0x1F416C5D8]();
}

uint64_t WebCore::FrameLoader::reload()
{
  return MEMORY[0x1F416C5E0]();
}

uint64_t WebCore::Geolocation::setIsAllowed(WebCore::Geolocation *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1F416C5E8](this, a2, a3);
}

void WebCore::Geolocation::~Geolocation(WebCore::Geolocation *this)
{
}

void WebCore::Geolocation::operator delete(void *a1)
{
}

uint64_t WebCore::HTMLElement::shouldExtendSelectionToTargetNode()
{
  return MEMORY[0x1F416C648]();
}

uint64_t WebCore::HTMLElement::labels(WebCore::HTMLElement *this)
{
  return MEMORY[0x1F416C658](this);
}

uint64_t WebCore::HistoryItem::setFormData()
{
  return MEMORY[0x1F416C668]();
}

uint64_t WebCore::HistoryItem::setReferrer(WebCore::HistoryItem *this, const WTF::String *a2)
{
  return MEMORY[0x1F416C670](this, a2);
}

uint64_t WebCore::HistoryItem::addChildItem()
{
  return MEMORY[0x1F416C678]();
}

uint64_t WebCore::HistoryItem::setStateObject()
{
  return MEMORY[0x1F416C690]();
}

uint64_t WebCore::HistoryItem::setDocumentState()
{
  return MEMORY[0x1F416C698]();
}

uint64_t WebCore::HistoryItem::setScrollPosition(WebCore::HistoryItem *this, const IntPoint *a2)
{
  return MEMORY[0x1F416C6A8](this, a2);
}

uint64_t WebCore::HistoryItem::setFormContentType(WebCore::HistoryItem *this, const WTF::String *a2)
{
  return MEMORY[0x1F416C6B0](this, a2);
}

uint64_t WebCore::HistoryItem::setPageScaleFactor(WebCore::HistoryItem *this, float a2)
{
  return MEMORY[0x1F416C6B8](this, a2);
}

uint64_t WebCore::HistoryItem::setOriginalURLString(WebCore::HistoryItem *this, const WTF::String *a2)
{
  return MEMORY[0x1F416C6C0](this, a2);
}

uint64_t WebCore::HistoryItem::setShouldRestoreScrollPosition(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F416C6C8](this);
}

uint64_t WebCore::HistoryItem::setShouldOpenExternalURLsPolicy()
{
  return MEMORY[0x1F416C6D0]();
}

uint64_t WebCore::HistoryItem::formData(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F416C6D8](this);
}

uint64_t WebCore::HistoryItem::setTarget(WebCore::HistoryItem *this, const AtomString *a2)
{
  return MEMORY[0x1F416C6E8](this, a2);
}

uint64_t WebCore::HistoryItem::HistoryItem()
{
  return MEMORY[0x1F416C6F0]();
}

void WebCore::HistoryItem::~HistoryItem(WebCore::HistoryItem *this)
{
}

uint64_t WebCore::ImageBuffer::setBackend()
{
  return MEMORY[0x1F416C700]();
}

uint64_t WebCore::ImageBuffer::setVolatile(WebCore::ImageBuffer *this)
{
  return MEMORY[0x1F416C708](this);
}

uint64_t WebCore::ImageBuffer::putPixelBuffer()
{
  return MEMORY[0x1F416C710]();
}

uint64_t WebCore::ImageBuffer::setNonVolatile(WebCore::ImageBuffer *this)
{
  return MEMORY[0x1F416C718](this);
}

uint64_t WebCore::ImageBuffer::backendParameters()
{
  return MEMORY[0x1F416C720]();
}

uint64_t WebCore::ImageBuffer::sinkIntoNativeImage()
{
  return MEMORY[0x1F416C728]();
}

uint64_t WebCore::ImageBuffer::calculateBackendSize()
{
  return MEMORY[0x1F416C730]();
}

uint64_t WebCore::ImageBuffer::transferToNewContext()
{
  return MEMORY[0x1F416C738]();
}

uint64_t WebCore::ImageBuffer::setVolatileAndPurgeForTesting(WebCore::ImageBuffer *this)
{
  return MEMORY[0x1F416C740](this);
}

uint64_t WebCore::ImageBuffer::sinkIntoBufferForDifferentThread()
{
  return MEMORY[0x1F416C748]();
}

uint64_t WebCore::ImageBuffer::create()
{
  return MEMORY[0x1F416C750]();
}

uint64_t WebCore::ImageBuffer::ImageBuffer()
{
  return MEMORY[0x1F416C758]();
}

{
  return MEMORY[0x1F416C760]();
}

void WebCore::ImageBuffer::~ImageBuffer(WebCore::ImageBuffer *this)
{
}

uint64_t WebCore::LoginStatus::setTimeToLive()
{
  return MEMORY[0x1F416C778]();
}

uint64_t WebCore::LoginStatus::create()
{
  return MEMORY[0x1F416C780]();
}

uint64_t WebCore::LoginStatus::LoginStatus()
{
  return MEMORY[0x1F416C788]();
}

void WebCore::LoginStatus::operator delete(void *a1)
{
}

uint64_t WebCore::MediaPlayer::cancelLoad(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C798](this);
}

uint64_t WebCore::MediaPlayer::colorSpace(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C7A0](this);
}

uint64_t WebCore::MediaPlayer::invalidate(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C7A8](this);
}

uint64_t WebCore::MediaPlayer::setPreload()
{
  return MEMORY[0x1F416C7B0]();
}

uint64_t WebCore::MediaPlayer::mediaEngine()
{
  return MEMORY[0x1F416C7B8]();
}

uint64_t WebCore::MediaPlayer::muteChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C7C0](this);
}

uint64_t WebCore::MediaPlayer::naturalSize(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C7C8](this);
}

uint64_t WebCore::MediaPlayer::rateChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C7D0](this);
}

uint64_t WebCore::MediaPlayer::sizeChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C7D8](this);
}

uint64_t WebCore::MediaPlayer::timeChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C7E0](this);
}

uint64_t WebCore::MediaPlayer::addTextTrack(WebCore::MediaPlayer *this, WebCore::InbandTextTrackPrivate *a2)
{
  return MEMORY[0x1F416C7E8](this, a2);
}

uint64_t WebCore::MediaPlayer::networkState(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C7F0](this);
}

uint64_t WebCore::MediaPlayer::seekToTarget()
{
  return MEMORY[0x1F416C7F8]();
}

uint64_t WebCore::MediaPlayer::addAudioTrack(WebCore::MediaPlayer *this, WebCore::AudioTrackPrivate *a2)
{
  return MEMORY[0x1F416C800](this, a2);
}

uint64_t WebCore::MediaPlayer::addVideoTrack(WebCore::MediaPlayer *this, WebCore::VideoTrackPrivate *a2)
{
  return MEMORY[0x1F416C808](this, a2);
}

uint64_t WebCore::MediaPlayer::playerPrivate(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C810](this);
}

uint64_t WebCore::MediaPlayer::prepareToPlay(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C818](this);
}

uint64_t WebCore::MediaPlayer::setCDMSession()
{
  return MEMORY[0x1F416C820]();
}

uint64_t WebCore::MediaPlayer::tracksChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C828](this);
}

uint64_t WebCore::MediaPlayer::volumeChanged(WebCore::MediaPlayer *this, double a2)
{
  return MEMORY[0x1F416C830](this, a2);
}

uint64_t WebCore::MediaPlayer::playAtHostTime(WebCore::MediaPlayer *this, const WTF::MonotonicTime *a2)
{
  return MEMORY[0x1F416C838](this, a2);
}

uint64_t WebCore::MediaPlayer::durationChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C840](this);
}

uint64_t WebCore::MediaPlayer::pauseAtHostTime(WebCore::MediaPlayer *this, const WTF::MonotonicTime *a2)
{
  return MEMORY[0x1F416C848](this, a2);
}

uint64_t WebCore::MediaPlayer::removeTextTrack(WebCore::MediaPlayer *this, WebCore::InbandTextTrackPrivate *a2)
{
  return MEMORY[0x1F416C850](this, a2);
}

uint64_t WebCore::MediaPlayer::removeAudioTrack(WebCore::MediaPlayer *this, WebCore::AudioTrackPrivate *a2)
{
  return MEMORY[0x1F416C858](this, a2);
}

uint64_t WebCore::MediaPlayer::removeVideoTrack(WebCore::MediaPlayer *this, WebCore::VideoTrackPrivate *a2)
{
  return MEMORY[0x1F416C860](this, a2);
}

uint64_t WebCore::MediaPlayer::setPageIsVisible(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C868](this);
}

uint64_t WebCore::MediaPlayer::setResourceOwner()
{
  return MEMORY[0x1F416C870]();
}

uint64_t WebCore::MediaPlayer::mediaPlayerLogger(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C878](this);
}

uint64_t WebCore::MediaPlayer::performTaskAtTime()
{
  return MEMORY[0x1F416C880]();
}

uint64_t WebCore::MediaPlayer::readyStateChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C888](this);
}

uint64_t WebCore::MediaPlayer::setPreservesPitch(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C890](this);
}

uint64_t WebCore::MediaPlayer::liveUpdateInterval(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C898](this);
}

uint64_t WebCore::MediaPlayer::setBufferingPolicy()
{
  return MEMORY[0x1F416C8A0]();
}

uint64_t WebCore::MediaPlayer::audioSourceProvider(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C8A8](this);
}

uint64_t WebCore::MediaPlayer::cdmInstanceAttached(WebCore::MediaPlayer *this, WebCore::CDMInstance *a2)
{
  return MEMORY[0x1F416C8B0](this, a2);
}

uint64_t WebCore::MediaPlayer::cdmInstanceDetached(WebCore::MediaPlayer *this, WebCore::CDMInstance *a2)
{
  return MEMORY[0x1F416C8B8](this, a2);
}

uint64_t WebCore::MediaPlayer::networkStateChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C8C0](this);
}

uint64_t WebCore::MediaPlayer::prepareForRendering(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C8C8](this);
}

uint64_t WebCore::MediaPlayer::setPresentationSize(WebCore::MediaPlayer *this, const IntSize *a2)
{
  return MEMORY[0x1F416C8D0](this, a2);
}

uint64_t WebCore::MediaPlayer::createResourceLoader(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C8E0](this);
}

uint64_t WebCore::MediaPlayer::playbackStateChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C8E8](this);
}

uint64_t WebCore::MediaPlayer::waitingForKeyChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C8F0](this);
}

uint64_t WebCore::MediaPlayer::characteristicChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C8F8](this);
}

uint64_t WebCore::MediaPlayer::endSimulatedHDCPError(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C900](this);
}

uint64_t WebCore::MediaPlayer::outOfBandTrackSources(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C908](this);
}

uint64_t WebCore::MediaPlayer::notifyTrackModeChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C918](this);
}

uint64_t WebCore::MediaPlayer::setPrivateBrowsingMode(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C920](this);
}

uint64_t WebCore::MediaPlayer::setVideoFullscreenMode(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C928](this);
}

uint64_t WebCore::MediaPlayer::beginSimulatedHDCPError(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C930](this);
}

uint64_t WebCore::MediaPlayer::setVideoLayerSizeFenced()
{
  return MEMORY[0x1F416C938]();
}

uint64_t WebCore::MediaPlayer::videoLayerSizeDidChange(WebCore::MediaPlayer *this, const WebCore::FloatSize *a2)
{
  return MEMORY[0x1F416C940](this, a2);
}

uint64_t WebCore::MediaPlayer::firstVideoFrameAvailable(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C948](this);
}

uint64_t WebCore::MediaPlayer::remoteEngineFailedToLoad(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C950](this);
}

uint64_t WebCore::MediaPlayer::videoFrameForCurrentTime(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C958](this);
}

uint64_t WebCore::MediaPlayer::nativeImageForCurrentTime(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C960](this);
}

uint64_t WebCore::MediaPlayer::setVideoFullscreenGravity()
{
  return MEMORY[0x1F416C968]();
}

uint64_t WebCore::MediaPlayer::setWirelessPlaybackTarget()
{
  return MEMORY[0x1F416C970]();
}

uint64_t WebCore::MediaPlayer::shouldIgnoreIntrinsicSize(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C978](this);
}

uint64_t WebCore::MediaPlayer::applicationDidBecomeActive(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C980](this);
}

uint64_t WebCore::MediaPlayer::applicationWillResignActive(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C988](this);
}

uint64_t WebCore::MediaPlayer::setPitchCorrectionAlgorithm()
{
  return MEMORY[0x1F416C998]();
}

uint64_t WebCore::MediaPlayer::attemptToDecryptWithInstance(WebCore::MediaPlayer *this, WebCore::CDMInstance *a2)
{
  return MEMORY[0x1F416C9A0](this, a2);
}

uint64_t WebCore::MediaPlayer::setPreferredDynamicRangeMode()
{
  return MEMORY[0x1F416C9A8]();
}

uint64_t WebCore::MediaPlayer::initializationDataEncountered()
{
  return MEMORY[0x1F416C9B8]();
}

uint64_t WebCore::MediaPlayer::setShouldCheckHardwareSupport(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C9C0](this);
}

uint64_t WebCore::MediaPlayer::reloadAndResumePlaybackIfNeeded(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C9D8](this);
}

uint64_t WebCore::MediaPlayer::setCurrentTimeDidChangeCallback()
{
  return MEMORY[0x1F416C9E0]();
}

uint64_t WebCore::MediaPlayer::stopVideoFrameMetadataGathering(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C9F0](this);
}

uint64_t WebCore::MediaPlayer::acceleratedRenderingStateChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416C9F8](this);
}

uint64_t WebCore::MediaPlayer::asyncVideoPlaybackQualityMetrics(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416CA00](this);
}

uint64_t WebCore::MediaPlayer::setWirelessVideoPlaybackDisabled(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416CA08](this);
}

uint64_t WebCore::MediaPlayer::startVideoFrameMetadataGathering(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416CA10](this);
}

uint64_t WebCore::MediaPlayer::updateVideoFullscreenInlineImage(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416CA18](this);
}

uint64_t WebCore::MediaPlayer::seekableTimeRangesLastModifiedTime(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416CA28](this);
}

uint64_t WebCore::MediaPlayer::currentPlaybackTargetIsWirelessChanged(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416CA30](this);
}

uint64_t WebCore::MediaPlayer::load(WebCore::MediaPlayer *this, const WTF::URL *a2, const WebCore::ContentType *a3, const WTF::String *a4)
{
  return MEMORY[0x1F416CA38](this, a2, a3, a4);
}

uint64_t WebCore::MediaPlayer::load(WebCore::MediaPlayer *this, const WTF::URL *a2, const WebCore::ContentType *a3, WebCore::MediaSourcePrivateClient *a4)
{
  return MEMORY[0x1F416CA40](this, a2, a3, a4);
}

uint64_t WebCore::MediaPlayer::play(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416CA48](this);
}

uint64_t WebCore::MediaPlayer::pause(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416CA50](this);
}

uint64_t WebCore::MediaPlayer::create()
{
  return MEMORY[0x1F416CA58]();
}

uint64_t WebCore::MediaPlayer::seeked(WebCore::MediaPlayer *this, const WTF::MediaTime *a2)
{
  return MEMORY[0x1F416CA60](this, a2);
}

uint64_t WebCore::MediaPlayer::setRate(WebCore::MediaPlayer *this, double a2)
{
  return MEMORY[0x1F416CA68](this, a2);
}

uint64_t WebCore::MediaPlayer::keyAdded(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F416CA70](this);
}

uint64_t WebCore::MediaPlayer::keyNeeded()
{
  return MEMORY[0x1F416CA80]();
}

uint64_t WebCore::MediaPlayer::setVolume(WebCore::MediaPlayer *this, double a2)
{
  return MEMORY[0x1F416CA88](this, a2);
}

void WebCore::MediaPlayer::~MediaPlayer(WebCore::MediaPlayer *this)
{
}

uint64_t WebCore::MemoryCache::setCapacities(WebCore::MemoryCache *this)
{
  return MEMORY[0x1F416CAA8](this);
}

uint64_t WebCore::MemoryCache::evictResources()
{
  return MEMORY[0x1F416CAB0]();
}

uint64_t WebCore::MemoryCache::resourceForRequest()
{
  return MEMORY[0x1F416CAC0]();
}

uint64_t WebCore::MemoryCache::removeResourcesWithOrigin(WebCore::MemoryCache *this, const WebCore::ClientOrigin *a2)
{
  return MEMORY[0x1F416CAC8](this, a2);
}

uint64_t WebCore::MemoryCache::removeResourcesWithOrigins()
{
  return MEMORY[0x1F416CAD0]();
}

uint64_t WebCore::MemoryCache::destroyDecodedDataForAllImages(WebCore::MemoryCache *this)
{
  return MEMORY[0x1F416CAD8](this);
}

uint64_t WebCore::MemoryCache::singleton(WebCore::MemoryCache *this)
{
  return MEMORY[0x1F416CAE0](this);
}

void WebCore::MessagePort::~MessagePort(WebCore::MessagePort *this)
{
}

void WebCore::MessagePort::operator delete(void *a1)
{
}

void WebCore::ModelPlayer::~ModelPlayer(WebCore::ModelPlayer *this)
{
}

uint64_t WebCore::NativeImage::replaceBackend()
{
  return MEMORY[0x1F416CB08]();
}

uint64_t WebCore::NativeImage::createTransient()
{
  return MEMORY[0x1F416CB10]();
}

uint64_t WebCore::NativeImage::create()
{
  return MEMORY[0x1F416CB18]();
}

uint64_t WebCore::PageOverlay::setNeedsDisplay(WebCore::PageOverlay *this, const IntRect *a2)
{
  return MEMORY[0x1F416CB20](this, a2);
}

uint64_t WebCore::PageOverlay::setNeedsDisplay(WebCore::PageOverlay *this)
{
  return MEMORY[0x1F416CB28](this);
}

uint64_t WebCore::PageOverlay::stopFadeOutAnimation(WebCore::PageOverlay *this)
{
  return MEMORY[0x1F416CB30](this);
}

uint64_t WebCore::PageOverlay::layer(WebCore::PageOverlay *this)
{
  return MEMORY[0x1F416CB40](this);
}

uint64_t WebCore::PageOverlay::create()
{
  return MEMORY[0x1F416CB48]();
}

uint64_t WebCore::PageOverlay::setFrame(WebCore::PageOverlay *this, IntRect a2)
{
  return MEMORY[0x1F416CB50](this, *(void *)&a2.m_location, *(void *)&a2.m_size);
}

void WebCore::PageOverlay::~PageOverlay(WebCore::PageOverlay *this)
{
}

uint64_t WebCore::PathSegment::PathSegment()
{
  return MEMORY[0x1F416CB60]();
}

uint64_t WebCore::Permissions::toPermissionName(WebCore::Permissions *this, const WTF::String *a2)
{
  return MEMORY[0x1F416CB68](this, a2);
}

uint64_t WebCore::PixelBuffer::computeBufferSize()
{
  return MEMORY[0x1F416CB70]();
}

uint64_t WebCore::PixelBuffer::supportedPixelFormat()
{
  return MEMORY[0x1F416CB78]();
}

uint64_t WebCore::PixelBuffer::zeroRange(WebCore::PixelBuffer *this)
{
  return MEMORY[0x1F416CB80](this);
}

uint64_t WebCore::PixelBuffer::PixelBuffer()
{
  return MEMORY[0x1F416CB88]();
}

void WebCore::PixelBuffer::~PixelBuffer(WebCore::PixelBuffer *this)
{
}

uint64_t WebCore::RemoteFrame::createSubframe()
{
  return MEMORY[0x1F416CB98]();
}

uint64_t WebCore::RemoteFrame::createMainFrame()
{
  return MEMORY[0x1F416CBA0]();
}

uint64_t WebCore::RemoteFrame::createSubframeWithContentsInAnotherProcess()
{
  return MEMORY[0x1F416CBA8]();
}

uint64_t WebCore::RemoteFrame::setView()
{
  return MEMORY[0x1F416CBB0]();
}

uint64_t WebCore::SimpleRange::SimpleRange()
{
  return MEMORY[0x1F416CBC0]();
}

{
  return MEMORY[0x1F416CBC8]();
}

uint64_t WebCore::SourceAlpha::create()
{
  return MEMORY[0x1F416CBD0]();
}

uint64_t WebCore::SourceBrush::setGradient()
{
  return MEMORY[0x1F416CBD8]();
}

uint64_t WebCore::SourceBrush::SourceBrush()
{
  return MEMORY[0x1F416CBE0]();
}

uint64_t WebCore::SourceImage::SourceImage()
{
  return MEMORY[0x1F416CBE8]();
}

uint64_t WebCore::StaticRange::create()
{
  return MEMORY[0x1F416CBF0]();
}

void WebCore::WindowProxy::~WindowProxy(WebCore::WindowProxy *this)
{
}

uint64_t WebCore::logChannels(WebCore *this)
{
  return MEMORY[0x1F416CC30](this);
}

uint64_t WebCore::startOfWord()
{
  return MEMORY[0x1F416CC48]();
}

uint64_t WebCore::AudioSession::sharedSession(WebCore::AudioSession *this)
{
  return MEMORY[0x1F416CC50](this);
}

uint64_t WebCore::AudioSession::tryToSetActive(WebCore::AudioSession *this)
{
  return MEMORY[0x1F416CC58](this);
}

uint64_t WebCore::AudioSession::endInterruption()
{
  return MEMORY[0x1F416CC60]();
}

uint64_t WebCore::AudioSession::setSharedSession()
{
  return MEMORY[0x1F416CC68]();
}

uint64_t WebCore::AudioSession::beginInterruption(WebCore::AudioSession *this)
{
  return MEMORY[0x1F416CC70](this);
}

uint64_t WebCore::AudioSession::activeStateChanged(WebCore::AudioSession *this)
{
  return MEMORY[0x1F416CC78](this);
}

uint64_t WebCore::AudioSession::addInterruptionObserver(WebCore::AudioSession *this, WebCore::AudioSessionInterruptionObserver *a2)
{
  return MEMORY[0x1F416CC80](this, a2);
}

uint64_t WebCore::AudioSession::removeInterruptionObserver(WebCore::AudioSession *this, WebCore::AudioSessionInterruptionObserver *a2)
{
  return MEMORY[0x1F416CC88](this, a2);
}

uint64_t WebCore::AudioSession::create(WebCore::AudioSession *this)
{
  return MEMORY[0x1F416CC90](this);
}

uint64_t WebCore::AudioSession::AudioSession(WebCore::AudioSession *this)
{
  return MEMORY[0x1F416CC98](this);
}

void WebCore::AudioSession::~AudioSession(WebCore::AudioSession *this)
{
}

void WebCore::BlobRegistry::~BlobRegistry(WebCore::BlobRegistry *this)
{
}

uint64_t WebCore::CARingBuffer::initialize(WebCore::CARingBuffer *this)
{
  return MEMORY[0x1F416CCB0](this);
}

uint64_t WebCore::CARingBuffer::fetchIfHasEnoughData()
{
  return MEMORY[0x1F416CCB8]();
}

uint64_t WebCore::CARingBuffer::computeSizeForBuffers(WebCore::CARingBuffer *this)
{
  return MEMORY[0x1F416CCC0](this);
}

uint64_t WebCore::CARingBuffer::fetch()
{
  return MEMORY[0x1F416CCC8]();
}

uint64_t WebCore::CARingBuffer::store(WebCore::CARingBuffer *this, const AudioBufferList *a2)
{
  return MEMORY[0x1F416CCD0](this, a2);
}

uint64_t WebCore::CARingBuffer::CARingBuffer(WebCore::CARingBuffer *this)
{
  return MEMORY[0x1F416CCD8](this);
}

void WebCore::CARingBuffer::~CARingBuffer(WebCore::CARingBuffer *this)
{
}

uint64_t WebCore::ChromeClient::ChromeClient(WebCore::ChromeClient *this)
{
  return MEMORY[0x1F416CCF8](this);
}

uint64_t WebCore::EditingStyle::styleAtSelectionStart()
{
  return MEMORY[0x1F416CD28]();
}

uint64_t WebCore::EditingStyle::hasStyle()
{
  return MEMORY[0x1F416CD30]();
}

void WebCore::EditingStyle::~EditingStyle(WebCore::EditingStyle *this)
{
}

uint64_t WebCore::EventHandler::mouseMoved()
{
  return MEMORY[0x1F416CD50]();
}

uint64_t WebCore::EventHandler::didStartDrag(WebCore::EventHandler *this)
{
  return MEMORY[0x1F416CD68](this);
}

uint64_t WebCore::EventHandler::selectCursor()
{
  return MEMORY[0x1F416CD70]();
}

uint64_t WebCore::EventHandler::dragCancelled(WebCore::EventHandler *this)
{
  return MEMORY[0x1F416CD78](this);
}

uint64_t WebCore::EventHandler::handleAccessKey()
{
  return MEMORY[0x1F416CD88]();
}

uint64_t WebCore::EventHandler::invalidateClick(WebCore::EventHandler *this)
{
  return MEMORY[0x1F416CD90](this);
}

uint64_t WebCore::EventHandler::handleTouchEvent()
{
  return MEMORY[0x1F416CD98]();
}

uint64_t WebCore::EventHandler::handleWheelEvent()
{
  return MEMORY[0x1F416CDA0]();
}

uint64_t WebCore::EventHandler::dragSourceEndedAt()
{
  return MEMORY[0x1F416CDA8]();
}

uint64_t WebCore::EventHandler::scrollRecursively()
{
  return MEMORY[0x1F416CDB0]();
}

uint64_t WebCore::EventHandler::sendContextMenuEvent()
{
  return MEMORY[0x1F416CDC0]();
}

uint64_t WebCore::EventHandler::handleMouseForceEvent()
{
  return MEMORY[0x1F416CDC8]();
}

uint64_t WebCore::EventHandler::handleMousePressEvent()
{
  return MEMORY[0x1F416CDD0]();
}

uint64_t WebCore::EventHandler::tryToBeginDragAtPoint(WebCore::EventHandler *this, const IntPoint *a2, const IntPoint *a3)
{
  return MEMORY[0x1F416CDD8](this, a2, a3);
}

uint64_t WebCore::EventHandler::handleMouseReleaseEvent()
{
  return MEMORY[0x1F416CDE0]();
}

uint64_t WebCore::EventHandler::startSelectionAutoscroll()
{
  return MEMORY[0x1F416CDE8]();
}

uint64_t WebCore::EventHandler::cancelSelectionAutoscroll(WebCore::EventHandler *this)
{
  return MEMORY[0x1F416CDF0](this);
}

uint64_t WebCore::EventHandler::dispatchSyntheticMouseOut()
{
  return MEMORY[0x1F416CDF8]();
}

uint64_t WebCore::EventHandler::dispatchSyntheticMouseMove()
{
  return MEMORY[0x1F416CE08]();
}

uint64_t WebCore::EventHandler::getHitTestResultForMouseEvent()
{
  return MEMORY[0x1F416CE10]();
}

uint64_t WebCore::EventHandler::setCapturingMouseEventsElement()
{
  return MEMORY[0x1F416CE18]();
}

uint64_t WebCore::EventHandler::passMouseMovedEventToScrollbars()
{
  return MEMORY[0x1F416CE20]();
}

uint64_t WebCore::EventHandler::selectionExtentRespectingEditingBoundary()
{
  return MEMORY[0x1F416CE28]();
}

uint64_t WebCore::EventHandler::selectClosestContextualWordOrLinkFromHitTestResult()
{
  return MEMORY[0x1F416CE30]();
}

uint64_t WebCore::EventHandler::keyEvent()
{
  return MEMORY[0x1F416CE48]();
}

uint64_t WebCore::FEDropShadow::create()
{
  return MEMORY[0x1F416CE58]();
}

uint64_t WebCore::FEMorphology::create()
{
  return MEMORY[0x1F416CE60]();
}

uint64_t WebCore::FETurbulence::create()
{
  return MEMORY[0x1F416CE68]();
}

uint64_t WebCore::GCController::singleton(WebCore::GCController *this)
{
  return MEMORY[0x1F416CE88](this);
}

void WebCore::IDBGetResult::operator delete(void *a1)
{
}

uint64_t WebCore::IDBGetResult::operator new(WebCore::IDBGetResult *this)
{
  return MEMORY[0x1F416CE98](this);
}

uint64_t WebCore::IDBIndexInfo::IDBIndexInfo()
{
  return MEMORY[0x1F416CEA0]();
}

uint64_t WebCore::ISOWebVTTCue::ISOWebVTTCue()
{
  return MEMORY[0x1F416CEA8]();
}

{
  return MEMORY[0x1F416CEB0]();
}

void WebCore::ISOWebVTTCue::~ISOWebVTTCue(WebCore::ISOWebVTTCue *this)
{
}

uint64_t WebCore::ImageDecoder::clearFactories(WebCore::ImageDecoder *this)
{
  return MEMORY[0x1F416CEC0](this);
}

uint64_t WebCore::ImageDecoder::installFactory()
{
  return MEMORY[0x1F416CEC8]();
}

uint64_t WebCore::ImageDecoder::ImageDecoder(WebCore::ImageDecoder *this)
{
  return MEMORY[0x1F416CED8](this);
}

uint64_t WebCore::ImageOverlay::hasOverlay(WebCore::ImageOverlay *this, const WebCore::HTMLElement *a2)
{
  return MEMORY[0x1F416CEE8](this, a2);
}

uint64_t WebCore::ImageOverlay::isOverlayText(WebCore::ImageOverlay *this, const Node *a2)
{
  return MEMORY[0x1F416CEF0](this, a2);
}

{
  return MEMORY[0x1F416CEF8](this, a2);
}

uint64_t WebCore::ImageOverlay::isInsideOverlay()
{
  return MEMORY[0x1F416CF00]();
}

uint64_t WebCore::ImageOverlay::isInsideOverlay(WebCore::ImageOverlay *this, const Node *a2)
{
  return MEMORY[0x1F416CF08](this, a2);
}

uint64_t WebCore::ImageOverlay::updateWithTextRecognitionResult()
{
  return MEMORY[0x1F416CF10]();
}

uint64_t WebCore::KeyedDecoder::decoder()
{
  return MEMORY[0x1F416CF28]();
}

uint64_t WebCore::KeyedEncoder::encoder(WebCore::KeyedEncoder *this)
{
  return MEMORY[0x1F416CF30](this);
}

uint64_t WebCore::Notification::dispatchClickEvent(WebCore::Notification *this)
{
  return MEMORY[0x1F416CF88](this);
}

uint64_t WebCore::Notification::ensureOnNotificationThread()
{
  return MEMORY[0x1F416CFA0]();
}

uint64_t WebCore::PrintContext::numberOfPages(WebCore::PrintContext *this, WebCore::LocalFrame *a2, const WebCore::FloatSize *a3)
{
  return MEMORY[0x1F416CFB8](this, a2, a3);
}

uint64_t WebCore::PrintContext::computePageRects(WebCore::PrintContext *this, const FloatRect *a2, float a3, float a4, float a5, float *a6)
{
  return MEMORY[0x1F416CFC0](this, a2, a6, a3, a4, a5);
}

uint64_t WebCore::PrintContext::computedPageSize()
{
  return MEMORY[0x1F416CFC8]();
}

uint64_t WebCore::PrintContext::computedPageMargin()
{
  return MEMORY[0x1F416CFD8]();
}

uint64_t WebCore::PrintContext::pageNumberForElement()
{
  return MEMORY[0x1F416CFE0]();
}

uint64_t WebCore::PrintContext::computeAutomaticScaleFactor(WebCore::PrintContext *this, const WebCore::FloatSize *a2)
{
  return MEMORY[0x1F416CFF0](this, a2);
}

uint64_t WebCore::PrintContext::spoolAllPagesWithBoundaries(WebCore::PrintContext *this, WebCore::LocalFrame *a2, WebCore::GraphicsContext *a3, const WebCore::FloatSize *a4)
{
  return MEMORY[0x1F416CFF8](this, a2, a3, a4);
}

uint64_t WebCore::PrintContext::begin(WebCore::PrintContext *this, float a2, float a3)
{
  return MEMORY[0x1F416D008](this, a2, a3);
}

uint64_t WebCore::PrintContext::spoolPage(WebCore::PrintContext *this, WebCore::GraphicsContext *a2, float a3)
{
  return MEMORY[0x1F416D010](this, a2, a3);
}

uint64_t WebCore::PrintContext::spoolRect(WebCore::PrintContext *this, WebCore::GraphicsContext *a2, const IntRect *a3)
{
  return MEMORY[0x1F416D018](this, a2, a3);
}

uint64_t WebCore::PrintContext::PrintContext(WebCore::PrintContext *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1F416D020](this, a2);
}

uint64_t WebCore::PushDatabase::insertRecord()
{
  return MEMORY[0x1F416D030]();
}

uint64_t WebCore::PushDatabase::getRecordByTopic()
{
  return MEMORY[0x1F416D038]();
}

uint64_t WebCore::PushDatabase::updatePublicToken()
{
  return MEMORY[0x1F416D040]();
}

uint64_t WebCore::PushDatabase::incrementSilentPushCount()
{
  return MEMORY[0x1F416D048]();
}

uint64_t WebCore::PushDatabase::removeRecordByIdentifier()
{
  return MEMORY[0x1F416D050]();
}

uint64_t WebCore::PushDatabase::setPushesEnabledForOrigin()
{
  return MEMORY[0x1F416D058]();
}

uint64_t WebCore::PushDatabase::getPushSubscriptionSetRecords()
{
  return MEMORY[0x1F416D060]();
}

uint64_t WebCore::PushDatabase::removeRecordsBySubscriptionSet()
{
  return MEMORY[0x1F416D068]();
}

uint64_t WebCore::PushDatabase::getRecordBySubscriptionSetAndScope()
{
  return MEMORY[0x1F416D070]();
}

uint64_t WebCore::PushDatabase::removeRecordsByBundleIdentifierAndDataStore()
{
  return MEMORY[0x1F416D078]();
}

uint64_t WebCore::PushDatabase::removeRecordsBySubscriptionSetAndSecurityOrigin()
{
  return MEMORY[0x1F416D080]();
}

uint64_t WebCore::PushDatabase::create()
{
  return MEMORY[0x1F416D088]();
}

uint64_t WebCore::PushDatabase::getTopics()
{
  return MEMORY[0x1F416D090]();
}

void WebCore::PushDatabase::~PushDatabase(WebCore::PushDatabase *this)
{
}

uint64_t WebCore::RenderObject::paintingRootRect(WebCore::RenderObject *this, WebCore::LayoutRect *a2)
{
  return MEMORY[0x1F416D0A0](this, a2);
}

uint64_t WebCore::RenderObject::absoluteTextQuads()
{
  return MEMORY[0x1F416D0A8]();
}

uint64_t WebCore::RenderObject::absoluteTextRects()
{
  return MEMORY[0x1F416D0B0]();
}

uint64_t WebCore::RenderObject::absoluteBorderAndTextRects()
{
  return MEMORY[0x1F416D0B8]();
}

uint64_t WebCore::RenderObject::collectSelectionGeometries()
{
  return MEMORY[0x1F416D0C0]();
}

uint64_t WebCore::RenderObject::collectSelectionGeometriesWithoutUnionInteriorLines()
{
  return MEMORY[0x1F416D0C8]();
}

uint64_t WebCore::RenderWidget::setWidget()
{
  return MEMORY[0x1F416D0D0]();
}

uint64_t WebCore::SameSiteInfo::create()
{
  return MEMORY[0x1F416D0D8]();
}

uint64_t WebCore::ScriptBuffer::fromIPCData()
{
  return MEMORY[0x1F416D0E0]();
}

uint64_t WebCore::ScriptBuffer::ScriptBuffer(WebCore::ScriptBuffer *this, const WTF::String *a2)
{
  return MEMORY[0x1F416D0E8](this, a2);
}

uint64_t WebCore::SettingsBase::setFixedFontFamily()
{
  return MEMORY[0x1F416D0F0]();
}

uint64_t WebCore::SettingsBase::setSerifFontFamily()
{
  return MEMORY[0x1F416D0F8]();
}

uint64_t WebCore::SettingsBase::setCursiveFontFamily()
{
  return MEMORY[0x1F416D100]();
}

uint64_t WebCore::SettingsBase::setFantasyFontFamily()
{
  return MEMORY[0x1F416D108]();
}

uint64_t WebCore::SettingsBase::setStandardFontFamily()
{
  return MEMORY[0x1F416D110]();
}

uint64_t WebCore::SettingsBase::setSansSerifFontFamily()
{
  return MEMORY[0x1F416D118]();
}

uint64_t WebCore::SettingsBase::setPictographFontFamily()
{
  return MEMORY[0x1F416D120]();
}

uint64_t WebCore::SettingsBase::setAllowedMediaCodecTypes(WebCore::SettingsBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F416D128](this, a2);
}

uint64_t WebCore::SettingsBase::setAllowedMediaAudioCodecIDs(WebCore::SettingsBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F416D130](this, a2);
}

uint64_t WebCore::SettingsBase::setAllowedMediaVideoCodecIDs(WebCore::SettingsBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F416D138](this, a2);
}

uint64_t WebCore::SettingsBase::setAllowedMediaContainerTypes(WebCore::SettingsBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F416D140](this, a2);
}

uint64_t WebCore::SettingsBase::setAllowedMediaCaptionFormatTypes(WebCore::SettingsBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F416D148](this, a2);
}

uint64_t WebCore::SettingsBase::setMediaContentTypesRequiringHardwareSupport(WebCore::SettingsBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F416D150](this, a2);
}

uint64_t WebCore::SharedBuffer::createWithContentsOfFile()
{
  return MEMORY[0x1F416D158]();
}

uint64_t WebCore::SharedBuffer::create()
{
  return MEMORY[0x1F416D160]();
}

uint64_t WebCore::SharedBuffer::SharedBuffer()
{
  return MEMORY[0x1F416D168]();
}

uint64_t WebCore::SharedBuffer::SharedBuffer(WebCore::SharedBuffer *this)
{
  return MEMORY[0x1F416D170](this);
}

uint64_t WebCore::SharedMemory::copyBuffer()
{
  return MEMORY[0x1F416D178]();
}

uint64_t WebCore::SharedMemory::createHandle()
{
  return MEMORY[0x1F416D180]();
}

uint64_t WebCore::SharedMemory::map()
{
  return MEMORY[0x1F416D188]();
}

uint64_t WebCore::SharedMemory::allocate(WebCore::SharedMemory *this)
{
  return MEMORY[0x1F416D198](this);
}

uint64_t WebCore::SharedMemory::copySpan()
{
  return MEMORY[0x1F416D1A0]();
}

void WebCore::SharedMemory::~SharedMemory(WebCore::SharedMemory *this)
{
}

uint64_t WebCore::TextIterator::advance(WebCore::TextIterator *this)
{
  return MEMORY[0x1F416D1B0](this);
}

uint64_t WebCore::TextIterator::TextIterator()
{
  return MEMORY[0x1F416D1B8]();
}

void WebCore::TextIterator::~TextIterator(WebCore::TextIterator *this)
{
}

uint64_t WebCore::UserActivity::UserActivity()
{
  return MEMORY[0x1F416D1C8]();
}

uint64_t WebCore::VideoDecoder::setCreatorCallback()
{
  return MEMORY[0x1F416D1D8]();
}

uint64_t WebCore::VideoDecoder::VideoDecoder(WebCore::VideoDecoder *this)
{
  return MEMORY[0x1F416D1E0](this);
}

uint64_t WebCore::VideoEncoder::setCreatorCallback()
{
  return MEMORY[0x1F416D1F8]();
}

uint64_t WebCore::VideoFrameCV::setOwnershipIdentity()
{
  return MEMORY[0x1F416D200]();
}

uint64_t WebCore::VideoFrameCV::create()
{
  return MEMORY[0x1F416D208]();
}

uint64_t WebCore::commonVMSlow(WebCore *this)
{
  return MEMORY[0x1F416D210](this);
}

uint64_t WebCore::intersection()
{
  return MEMORY[0x1F416D218]();
}

uint64_t WebCore::AXObjectCache::rootObject(WebCore::AXObjectCache *this)
{
  return MEMORY[0x1F416D220](this);
}

uint64_t WebCore::AXObjectCache::getOrCreate()
{
  return MEMORY[0x1F416D228]();
}

uint64_t WebCore::AXObjectCache::focusedObjectForPage()
{
  return MEMORY[0x1F416D238]();
}

uint64_t WebCore::AXObjectCache::performDeferredCacheUpdate()
{
  return MEMORY[0x1F416D240]();
}

uint64_t WebCore::AXObjectCache::setEnhancedUserInterfaceAccessibility(WebCore::AXObjectCache *this)
{
  return MEMORY[0x1F416D250](this);
}

uint64_t WebCore::AXObjectCache::announce(WebCore::AXObjectCache *this, const WTF::String *a2)
{
  return MEMORY[0x1F416D260](this, a2);
}

uint64_t WebCore::CharacterData::setData(WebCore::CharacterData *this, const WTF::String *a2)
{
  return MEMORY[0x1F416D2A8](this, a2);
}

uint64_t WebCore::ContainerNode::appendChild(WebCore::ContainerNode *this, Node *a2)
{
  return MEMORY[0x1F416D2B0](this, a2);
}

uint64_t WebCore::ContainerNode::removeChildren(WebCore::ContainerNode *this)
{
  return MEMORY[0x1F416D2C0](this);
}

uint64_t WebCore::ContentFilter::blockedPageURL(WebCore::ContentFilter *this)
{
  return MEMORY[0x1F416D2F0](this);
}

uint64_t WebCore::ContentFilter::setHostProcessAuditToken()
{
  return MEMORY[0x1F416D2F8]();
}

uint64_t WebCore::ContentFilter::continueAfterDataReceived(WebCore::ContentFilter *this, const WebCore::SharedBuffer *a2)
{
  return MEMORY[0x1F416D300](this, a2);
}

uint64_t WebCore::ContentFilter::stopFilteringMainResource(WebCore::ContentFilter *this)
{
  return MEMORY[0x1F416D308](this);
}

uint64_t WebCore::ContentFilter::startFilteringMainResource(WebCore::ContentFilter *this, const WTF::URL *a2)
{
  return MEMORY[0x1F416D310](this, a2);
}

uint64_t WebCore::ContentFilter::continueAfterNotifyFinished(WebCore::ContentFilter *this, const WTF::URL *a2)
{
  return MEMORY[0x1F416D318](this, a2);
}

uint64_t WebCore::ContentFilter::continueAfterWillSendRequest()
{
  return MEMORY[0x1F416D320]();
}

uint64_t WebCore::ContentFilter::handleProvisionalLoadFailure()
{
  return MEMORY[0x1F416D328]();
}

uint64_t WebCore::ContentFilter::continueAfterResponseReceived()
{
  return MEMORY[0x1F416D330]();
}

uint64_t WebCore::ContentFilter::create()
{
  return MEMORY[0x1F416D338]();
}

void WebCore::ContentFilter::~ContentFilter(WebCore::ContentFilter *this)
{
}

uint64_t WebCore::DataDetection::isDataDetectorLink()
{
  return MEMORY[0x1F416D348]();
}

uint64_t WebCore::DataDetection::detectContentInFrame()
{
  return MEMORY[0x1F416D350]();
}

uint64_t WebCore::DataDetection::detectContentInRange()
{
  return MEMORY[0x1F416D358]();
}

uint64_t WebCore::DataDetection::extractReferenceDate(WebCore::DataDetection *this, NSDictionary *a2)
{
  return MEMORY[0x1F416D360](this, a2);
}

uint64_t WebCore::DataDetection::dataDetectorIdentifier()
{
  return MEMORY[0x1F416D368]();
}

uint64_t WebCore::DataDetection::requiresExtendedContext()
{
  return MEMORY[0x1F416D370]();
}

uint64_t WebCore::DataDetection::canBePresentedByDataDetectors(WebCore::DataDetection *this, const WTF::URL *a2)
{
  return MEMORY[0x1F416D378](this, a2);
}

uint64_t WebCore::DataDetection::removeDataDetectedLinksInDocument(WebCore::DataDetection *this, Document *a2)
{
  return MEMORY[0x1F416D380](this, a2);
}

uint64_t WebCore::DataDetection::findDataDetectionResultElementInImageOverlay(WebCore::DataDetection *this, const WebCore::FloatPoint *a2, const WebCore::HTMLElement *a3)
{
  return MEMORY[0x1F416D388](this, a2, a3);
}

uint64_t WebCore::FEColorMatrix::create()
{
  return MEMORY[0x1F416D390]();
}

uint64_t WebCore::FilterResults::FilterResults()
{
  return MEMORY[0x1F416D398]();
}

uint64_t WebCore::GraphicsLayer::setIsInWindow(WebCore::GraphicsLayer *this)
{
  return MEMORY[0x1F416D3A0](this);
}

uint64_t WebCore::GraphicsLayer::removeFromParent(WebCore::GraphicsLayer *this)
{
  return MEMORY[0x1F416D3A8](this);
}

uint64_t WebCore::GraphicsLayer::unparentAndClear()
{
  return MEMORY[0x1F416D3B0]();
}

uint64_t WebCore::GraphicsLayer::removeAllChildren(WebCore::GraphicsLayer *this)
{
  return MEMORY[0x1F416D3B8](this);
}

uint64_t WebCore::GraphicsLayer::noteDeviceOrPageScaleFactorChangedIncludingDescendants(WebCore::GraphicsLayer *this)
{
  return MEMORY[0x1F416D3C0](this);
}

uint64_t WebCore::GraphicsLayer::create()
{
  return MEMORY[0x1F416D3C8]();
}

uint64_t WebCore::HTTPHeaderMap::set(WebCore::HTTPHeaderMap *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F416D3D0](this, a2, a3);
}

uint64_t WebCore::HTTPHeaderMap::remove()
{
  return MEMORY[0x1F416D3D8]();
}

uint64_t WebCore::HTTPHeaderMap::HTTPHeaderMap()
{
  return MEMORY[0x1F416D3E0]();
}

uint64_t WebCore::HTTPHeaderMap::HTTPHeaderMap(WebCore::HTTPHeaderMap *this)
{
  return MEMORY[0x1F416D3E8](this);
}

uint64_t WebCore::HitTestResult::setToNonUserAgentShadowAncestor(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F416D3F0](this);
}

uint64_t WebCore::HitTestResult::HitTestResult(WebCore::HitTestResult *this, const WebCore::LayoutRect *a2)
{
  return MEMORY[0x1F416D3F8](this, a2);
}

uint64_t WebCore::HitTestResult::HitTestResult()
{
  return MEMORY[0x1F416D400]();
}

uint64_t WebCore::HitTestResult::HitTestResult(WebCore::HitTestResult *this, const WebCore::HitTestResult *a2)
{
  return MEMORY[0x1F416D408](this, a2);
}

void WebCore::HitTestResult::~HitTestResult(WebCore::HitTestResult *this)
{
}

uint64_t WebCore::IDBCursorInfo::IDBCursorInfo()
{
  return MEMORY[0x1F416D418]();
}

uint64_t WebCore::IDBResultData::IDBResultData()
{
  return MEMORY[0x1F416D420]();
}

uint64_t WebCore::IDBResultData::IDBResultData(WebCore::IDBResultData *this)
{
  return MEMORY[0x1F416D428](this);
}

uint64_t WebCore::IOSurfacePool::sharedPool(WebCore::IOSurfacePool *this)
{
  return MEMORY[0x1F416D430](this);
}

uint64_t WebCore::IOSurfacePool::setPoolSize(WebCore::IOSurfacePool *this)
{
  return MEMORY[0x1F416D438](this);
}

uint64_t WebCore::IOSurfacePool::discardAllSurfaces(WebCore::IOSurfacePool *this)
{
  return MEMORY[0x1F416D440](this);
}

uint64_t WebCore::IOSurfacePool::create(WebCore::IOSurfacePool *this)
{
  return MEMORY[0x1F416D448](this);
}

void WebCore::IOSurfacePool::~IOSurfacePool(WebCore::IOSurfacePool *this)
{
}

uint64_t WebCore::KeyboardEvent::create()
{
  return MEMORY[0x1F416D478]();
}

uint64_t WebCore::LinkHeaderSet::LinkHeaderSet(WebCore::LinkHeaderSet *this, const WTF::String *a2)
{
  return MEMORY[0x1F416D480](this, a2);
}

uint64_t WebCore::MIMETypeCache::canDecodeType(WebCore::MIMETypeCache *this, const WTF::String *a2)
{
  return MEMORY[0x1F416D488](this, a2);
}

uint64_t WebCore::MediaStrategy::addMockMediaSourceEngine(WebCore::MediaStrategy *this)
{
  return MEMORY[0x1F416D490](this);
}

uint64_t WebCore::MediaStrategy::MediaStrategy(WebCore::MediaStrategy *this)
{
  return MEMORY[0x1F416D498](this);
}

void WebCore::MediaStrategy::~MediaStrategy(WebCore::MediaStrategy *this)
{
}

uint64_t WebCore::NodeTraversal::nextAncestorSibling(WebCore::NodeTraversal *this, const Node *a2, const Node *a3)
{
  return MEMORY[0x1F416D4C0](this, a2, a3);
}

uint64_t WebCore::PathUtilities::pathWithShrinkWrappedRects()
{
  return MEMORY[0x1F416D4C8]();
}

uint64_t WebCore::PathUtilities::pathsWithShrinkWrappedRects()
{
  return MEMORY[0x1F416D4D8]();
}

uint64_t WebCore::PaymentMethod::PaymentMethod()
{
  return MEMORY[0x1F416D4E0]();
}

void WebCore::PaymentMethod::~PaymentMethod(WebCore::PaymentMethod *this)
{
}

uint64_t WebCore::QualifiedName::init(WebCore::QualifiedName *this)
{
  return MEMORY[0x1F416D4F8](this);
}

uint64_t WebCore::RenderElement::resetTextAutosizing(WebCore::RenderElement *this)
{
  return MEMORY[0x1F416D508](this);
}

uint64_t WebCore::ResourceError::fromIPCData()
{
  return MEMORY[0x1F416D510]();
}

uint64_t WebCore::ResourceError::ResourceError(WebCore::ResourceError *this, NSError *a2)
{
  return MEMORY[0x1F416D518](this, a2);
}

uint64_t WebCore::ResourceError::ResourceError(WebCore::ResourceError *this, __CFError *a2)
{
  return MEMORY[0x1F416D520](this, a2);
}

uint64_t WebCore::ScrollingTree::removeAllNodes(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1F416D528](this);
}

uint64_t WebCore::ScrollingTree::commitTreeState()
{
  return MEMORY[0x1F416D530]();
}

uint64_t WebCore::ScrollingTree::clearLatchedNode(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1F416D538](this);
}

uint64_t WebCore::ScrollingTree::viewSizeDidChange(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1F416D540](this);
}

uint64_t WebCore::ScrollingTree::scrollPinningBehavior(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1F416D550](this);
}

uint64_t WebCore::ScrollingTree::willProcessWheelEvent(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1F416D560](this);
}

uint64_t WebCore::ScrollingTree::addPendingScrollUpdate()
{
  return MEMORY[0x1F416D568]();
}

uint64_t WebCore::ScrollingTree::hasPendingScrollUpdates(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1F416D570](this);
}

uint64_t WebCore::ScrollingTree::takePendingScrollUpdates(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1F416D580](this);
}

uint64_t WebCore::ScrollingTree::eventTrackingTypeForPoint()
{
  return MEMORY[0x1F416D588]();
}

uint64_t WebCore::ScrollingTree::frameIDForScrollingNodeID()
{
  return MEMORY[0x1F416D590]();
}

uint64_t WebCore::ScrollingTree::scrollingTreeNodeDidScroll()
{
  return MEMORY[0x1F416D598]();
}

uint64_t WebCore::ScrollingTree::determineWheelEventProcessing()
{
  return MEMORY[0x1F416D5A0]();
}

uint64_t WebCore::ScrollingTree::willWheelEventStartSwipeGesture()
{
  return MEMORY[0x1F416D5B0]();
}

uint64_t WebCore::ScrollingTree::clearNodesWithUserScrollInProgress(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1F416D5B8](this);
}

uint64_t WebCore::ScrollingTree::setClientAllowedMainFrameRubberBandableEdges()
{
  return MEMORY[0x1F416D5C0]();
}

uint64_t WebCore::ScrollingTree::mainFrameViewportChangedViaDelegatedScrolling(WebCore::ScrollingTree *this, const WebCore::FloatPoint *a2, const FloatRect *a3, double a4)
{
  return MEMORY[0x1F416D5C8](this, a2, a3, a4);
}

uint64_t WebCore::ScrollingTree::ScrollingTree(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1F416D5D0](this);
}

uint64_t WebCore::SleepDisabler::SleepDisabler()
{
  return MEMORY[0x1F416D5E0]();
}

void WebCore::SleepDisabler::~SleepDisabler(WebCore::SleepDisabler *this)
{
}

uint64_t WebCore::SourceGraphic::create()
{
  return MEMORY[0x1F416D5F0]();
}

uint64_t WebCore::StyledElement::setInlineStyleProperty()
{
  return MEMORY[0x1F416D600]();
}

uint64_t WebCore::StyledElement::removeInlineStyleProperty()
{
  return MEMORY[0x1F416D608]();
}

uint64_t WebCore::TextIndicator::createWithRange()
{
  return MEMORY[0x1F416D610]();
}

uint64_t WebCore::TextIndicator::createWithSelectionInFrame()
{
  return MEMORY[0x1F416D618]();
}

uint64_t WebCore::TextIndicator::create(WebCore::TextIndicator *this, const TextIndicatorData *a2)
{
  return MEMORY[0x1F416D620](this, a2);
}

void WebCore::TextIndicator::~TextIndicator(WebCore::TextIndicator *this)
{
}

uint64_t WebCore::buildAuthData()
{
  return MEMORY[0x1F416D630]();
}

uint64_t WebCore::cachedCGColor(WebCore *this, const Color *a2)
{
  return MEMORY[0x1F416D638](this, a2);
}

uint64_t WebCore::createWrapper()
{
  return MEMORY[0x1F416D640]();
}

uint64_t WebCore::documentOrder()
{
  return MEMORY[0x1F416D650]();
}

uint64_t WebCore::enclosingList(WebCore *this, Node *a2)
{
  return MEMORY[0x1F416D660](this, a2);
}

uint64_t WebCore::endOfSentence()
{
  return MEMORY[0x1F416D678]();
}

uint64_t WebCore::findPlainText()
{
  return MEMORY[0x1F416D680]();
}

uint64_t WebCore::getLogChannel(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1F416D688](this, a2);
}

uint64_t WebCore::makePushTopic()
{
  return MEMORY[0x1F416D698]();
}

uint64_t WebCore::releaseMemory()
{
  return MEMORY[0x1F416D6A0]();
}

uint64_t WebCore::BasicShapePath::create()
{
  return MEMORY[0x1F416D6A8]();
}

uint64_t WebCore::CachedResource::tryReplaceEncodedData(WebCore::CachedResource *this, WebCore::SharedBuffer *a2)
{
  return MEMORY[0x1F416D6B0](this, a2);
}

uint64_t WebCore::ControlFactory::create(WebCore::ControlFactory *this)
{
  return MEMORY[0x1F416D6B8](this);
}

uint64_t WebCore::CredentialBase::compare(WebCore::CredentialBase *this, const WebCore::Credential *a2, const WebCore::Credential *a3)
{
  return MEMORY[0x1F416D6C0](this, a2, a3);
}

uint64_t WebCore::CredentialBase::CredentialBase()
{
  return MEMORY[0x1F416D6C8]();
}

uint64_t WebCore::CredentialBase::CredentialBase(WebCore::CredentialBase *this)
{
  return MEMORY[0x1F416D6D0](this);
}

uint64_t WebCore::DOMCacheEngine::queryCacheMatch()
{
  return MEMORY[0x1F416D6D8]();
}

uint64_t WebCore::DOMCacheEngine::copyResponseBody()
{
  return MEMORY[0x1F416D6E0]();
}

uint64_t WebCore::DOMCacheEngine::isolatedResponseBody()
{
  return MEMORY[0x1F416D6E8]();
}

uint64_t WebCore::DataURLDecoder::decode()
{
  return MEMORY[0x1F416D6F0]();
}

uint64_t WebCore::DocumentLoader::commitData(WebCore::DocumentLoader *this, const WebCore::SharedBuffer *a2)
{
  return MEMORY[0x1F416D6F8](this, a2);
}

uint64_t WebCore::DocumentLoader::setNavigationID()
{
  return MEMORY[0x1F416D710]();
}

uint64_t WebCore::DocumentLoader::addArchiveResource()
{
  return MEMORY[0x1F416D718]();
}

uint64_t WebCore::DocumentLoader::scheduleArchiveLoad()
{
  return MEMORY[0x1F416D720]();
}

uint64_t WebCore::DocumentLoader::setCustomHeaderFields()
{
  return MEMORY[0x1F416D730]();
}

uint64_t WebCore::DocumentLoader::setHTTPSByDefaultMode()
{
  return MEMORY[0x1F416D738]();
}

uint64_t WebCore::DocumentLoader::whenDocumentIsCreated()
{
  return MEMORY[0x1F416D740]();
}

uint64_t WebCore::DocumentLoader::cancelMainResourceLoad()
{
  return MEMORY[0x1F416D750]();
}

uint64_t WebCore::DocumentLoader::loadApplicationManifest()
{
  return MEMORY[0x1F416D760]();
}

uint64_t WebCore::DocumentLoader::didGetLoadDecisionForIcon()
{
  return MEMORY[0x1F416D768]();
}

uint64_t WebCore::DocumentLoader::handleContentFilterDidBlock()
{
  return MEMORY[0x1F416D770]();
}

uint64_t WebCore::DocumentLoader::setRedirectionAsSubstituteData()
{
  return MEMORY[0x1F416D778]();
}

uint64_t WebCore::DocumentLoader::fromScriptExecutionContextIdentifier()
{
  return MEMORY[0x1F416D780]();
}

uint64_t WebCore::DocumentLoader::setActiveContentRuleListActionPatterns()
{
  return MEMORY[0x1F416D788]();
}

uint64_t WebCore::DocumentLoader::setControllingServiceWorkerRegistration()
{
  return MEMORY[0x1F416D790]();
}

uint64_t WebCore::DocumentLoader::stopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied()
{
  return MEMORY[0x1F416D798]();
}

uint64_t WebCore::DocumentLoader::DocumentLoader()
{
  return MEMORY[0x1F416D7A8]();
}

uint64_t WebCore::DragController::dragExited()
{
  return MEMORY[0x1F416D7C8]();
}

uint64_t WebCore::DragController::dragEnteredOrUpdated()
{
  return MEMORY[0x1F416D7D0]();
}

uint64_t WebCore::DragController::performDragOperation()
{
  return MEMORY[0x1F416D7D8]();
}

uint64_t WebCore::DragController::finalizeDroppedImagePlaceholder()
{
  return MEMORY[0x1F416D7E0]();
}

uint64_t WebCore::DragController::insertDroppedImagePlaceholdersAtCaret()
{
  return MEMORY[0x1F416D7E8]();
}

uint64_t WebCore::DragController::dragEnded(WebCore::DragController *this)
{
  return MEMORY[0x1F416D7F0](this);
}

uint64_t WebCore::FEGaussianBlur::create()
{
  return MEMORY[0x1F416D7F8]();
}

uint64_t WebCore::FileIconLoader::iconLoaded()
{
  return MEMORY[0x1F416D800]();
}

uint64_t WebCore::FrameSelection::setSelection()
{
  return MEMORY[0x1F416D808]();
}

uint64_t WebCore::FrameSelection::revealSelection()
{
  return MEMORY[0x1F416D818]();
}

uint64_t WebCore::FrameSelection::selectionBounds()
{
  return MEMORY[0x1F416D820]();
}

uint64_t WebCore::FrameSelection::setSelectedRange()
{
  return MEMORY[0x1F416D828]();
}

uint64_t WebCore::FrameSelection::updateAppearance(WebCore::FrameSelection *this)
{
  return MEMORY[0x1F416D830](this);
}

uint64_t WebCore::FrameSelection::absoluteCaretBounds(WebCore::FrameSelection *this, BOOL *a2)
{
  return MEMORY[0x1F416D838](this, a2);
}

uint64_t WebCore::FrameSelection::setSelectionFromNone(WebCore::FrameSelection *this)
{
  return MEMORY[0x1F416D840](this);
}

uint64_t WebCore::FrameSelection::clear(WebCore::FrameSelection *this)
{
  return MEMORY[0x1F416D880](this);
}

uint64_t WebCore::FrameSelection::selectAll(WebCore::FrameSelection *this)
{
  return MEMORY[0x1F416D8A0](this);
}

uint64_t WebCore::IDBRequestData::IDBRequestData()
{
  return MEMORY[0x1F416D8C0]();
}

void WebCore::IDBTransaction::~IDBTransaction(WebCore::IDBTransaction *this)
{
}

void WebCore::IDBTransaction::operator delete(void *a1)
{
}

uint64_t WebCore::IOSApplication::isEvernote(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D8D8](this);
}

uint64_t WebCore::IOSApplication::isHimalaya(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D8E0](this);
}

uint64_t WebCore::IOSApplication::isJWLibrary(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D8E8](this);
}

uint64_t WebCore::IOSApplication::isCardiogram(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D8F0](this);
}

uint64_t WebCore::IOSApplication::isDoubleDown(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D8F8](this);
}

uint64_t WebCore::IOSApplication::isEventbrite(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D900](this);
}

uint64_t WebCore::IOSApplication::isPocketCity(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D910](this);
}

uint64_t WebCore::IOSApplication::isCrunchyroll(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D920](this);
}

uint64_t WebCore::IOSApplication::isMiniBrowser(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D928](this);
}

uint64_t WebCore::IOSApplication::isMobileSafari(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D930](this);
}

uint64_t WebCore::IOSApplication::isFIFACompanion(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D938](this);
}

uint64_t WebCore::IOSApplication::isWebBookmarksD(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D940](this);
}

uint64_t WebCore::IOSApplication::isESPNFantasySports(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D958](this);
}

uint64_t WebCore::IOSApplication::isEssentialSkeleton(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D960](this);
}

uint64_t WebCore::IOSApplication::isSafariViewService(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D968](this);
}

uint64_t WebCore::IOSApplication::isIMDb(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D978](this);
}

uint64_t WebCore::IOSApplication::isNews(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D980](this);
}

uint64_t WebCore::IOSApplication::isNike(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D988](this);
}

uint64_t WebCore::IOSApplication::isGmail(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D990](this);
}

uint64_t WebCore::IOSApplication::isLutron(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D998](this);
}

uint64_t WebCore::IOSApplication::isNoggin(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D9A0](this);
}

uint64_t WebCore::IOSApplication::isStocks(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D9A8](this);
}

uint64_t WebCore::IOSApplication::isFirefox(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D9B0](this);
}

uint64_t WebCore::IOSApplication::isHoYoLAB(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D9B8](this);
}

uint64_t WebCore::IOSApplication::isOKCupid(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D9C0](this);
}

uint64_t WebCore::IOSApplication::isPaperIO(WebCore::IOSApplication *this)
{
  return MEMORY[0x1F416D9C8](this);
}

uint64_t WebCore::JSNotification::toWrapped(WebCore::JSNotification *this, JSC::VM *a2, JSValue a3)
{
  return MEMORY[0x1F416D9E0](this, a2, a3.super.isa);
}

uint64_t WebCore::LocalDOMWindow::registerObserver(WebCore::LocalDOMWindow *this, WebCore::LocalDOMWindowObserver *a2)
{
  return MEMORY[0x1F416D9F0](this, a2);
}

uint64_t WebCore::LocalDOMWindow::unregisterObserver(WebCore::LocalDOMWindow *this, WebCore::LocalDOMWindowObserver *a2)
{
  return MEMORY[0x1F416D9F8](this, a2);
}

uint64_t WebCore::LocalDOMWindow::postMessageFromRemoteFrame()
{
  return MEMORY[0x1F416DA00]();
}

uint64_t WebCore::LocalFrameView::forceLayout(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F416DA18](this);
}

uint64_t WebCore::LocalFrameView::setNodeToDraw(WebCore::LocalFrameView *this, Node *a2)
{
  return MEMORY[0x1F416DA30](this, a2);
}

uint64_t WebCore::LocalFrameView::setTransparent(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F416DA40](this);
}

uint64_t WebCore::LocalFrameView::setPaintBehavior()
{
  return MEMORY[0x1F416DA48]();
}

uint64_t WebCore::LocalFrameView::addScrollableArea(WebCore::LocalFrameView *this, WebCore::ScrollableArea *a2)
{
  return MEMORY[0x1F416DA50](this, a2);
}

uint64_t WebCore::LocalFrameView::setScrollPosition()
{
  return MEMORY[0x1F416DA60]();
}

uint64_t WebCore::LocalFrameView::setScrollVelocity()
{
  return MEMORY[0x1F416DA68]();
}

uint64_t WebCore::LocalFrameView::willEndLiveResize(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F416DA78](this);
}

uint64_t WebCore::LocalFrameView::setViewExposedRect()
{
  return MEMORY[0x1F416DA80]();
}

uint64_t WebCore::LocalFrameView::willStartLiveResize(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F416DA90](this);
}

uint64_t WebCore::LocalFrameView::enterCompositingMode(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F416DA98](this);
}

uint64_t WebCore::LocalFrameView::removeScrollableArea(WebCore::LocalFrameView *this, WebCore::ScrollableArea *a2)
{
  return MEMORY[0x1F416DAA0](this, a2);
}

uint64_t WebCore::LocalFrameView::setCanHaveScrollbars(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F416DAB0](this);
}

uint64_t WebCore::LocalFrameView::setBaseBackgroundColor(WebCore::LocalFrameView *this, const Color *a2)
{
  return MEMORY[0x1F416DAC0](this, a2);
}

uint64_t WebCore::LocalFrameView::paintContentsForSnapshot()
{
  return MEMORY[0x1F416DAD8]();
}

uint64_t WebCore::LocalFrameView::setScrollPinningBehavior()
{
  return MEMORY[0x1F416DAE8]();
}

uint64_t WebCore::LocalFrameView::expandedLayoutViewportSize()
{
  return MEMORY[0x1F416DB00]();
}

uint64_t WebCore::LocalFrameView::setCustomSizeForResizeEvent(WebCore::LocalFrameView *this, IntSize a2)
{
  return ((uint64_t (*)(void, void))MEMORY[0x1F416DB10])(this, a2);
}

uint64_t WebCore::LocalFrameView::updateBackgroundRecursively()
{
  return MEMORY[0x1F416DB18]();
}

uint64_t WebCore::LocalFrameView::enableFixedWidthAutoSizeMode(WebCore::LocalFrameView *this, uint64_t a2, const IntSize *a3)
{
  return MEMORY[0x1F416DB20](this, a2, a3);
}

uint64_t WebCore::LocalFrameView::layoutOrVisualViewportChanged(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F416DB28](this);
}

uint64_t WebCore::LocalFrameView::setAutoSizeFixedMinimumHeight(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F416DB30](this);
}

uint64_t WebCore::LocalFrameView::setLayoutViewportOverrideRect()
{
  return MEMORY[0x1F416DB38]();
}

uint64_t WebCore::LocalFrameView::setVisualViewportOverrideRect()
{
  return MEMORY[0x1F416DB48]();
}

uint64_t WebCore::LocalFrameView::enableSizeToContentAutoSizeMode(WebCore::LocalFrameView *this, uint64_t a2, const IntSize *a3)
{
  return MEMORY[0x1F416DB58](this, a2, a3);
}

uint64_t WebCore::LocalFrameView::setSizeForCSSLargeViewportUnits()
{
  return MEMORY[0x1F416DB60]();
}

uint64_t WebCore::LocalFrameView::setSizeForCSSSmallViewportUnits()
{
  return MEMORY[0x1F416DB68]();
}

uint64_t WebCore::LocalFrameView::setVisualUpdatesAllowedByClient(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F416DB70](this);
}

uint64_t WebCore::LocalFrameView::computeUpdatedLayoutViewportRect()
{
  return MEMORY[0x1F416DB78]();
}

uint64_t WebCore::LocalFrameView::setCustomFixedPositionLayoutRect(WebCore::LocalFrameView *this, const IntRect *a2)
{
  return MEMORY[0x1F416DB88](this, a2);
}

uint64_t WebCore::LocalFrameView::setSizeForCSSDefaultViewportUnits()
{
  return MEMORY[0x1F416DB90]();
}

uint64_t WebCore::LocalFrameView::updateLayoutAndStyleIfNeededRecursive()
{
  return MEMORY[0x1F416DB98]();
}

uint64_t WebCore::LocalFrameView::setOverrideSizeForCSSLargeViewportUnits()
{
  return MEMORY[0x1F416DBA8]();
}

uint64_t WebCore::LocalFrameView::setOverrideSizeForCSSSmallViewportUnits()
{
  return MEMORY[0x1F416DBB0]();
}

uint64_t WebCore::LocalFrameView::setOverrideSizeForCSSDefaultViewportUnits()
{
  return MEMORY[0x1F416DBB8]();
}

uint64_t WebCore::LocalFrameView::setNeedsLayoutAfterViewConfigurationChange(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F416DBC0](this);
}

uint64_t WebCore::LocalFrameView::addChild(WebCore::LocalFrameView *this, WebCore::Widget *a2)
{
  return MEMORY[0x1F416DBD8](this, a2);
}

uint64_t WebCore::PaymentContact::PaymentContact()
{
  return MEMORY[0x1F416DBE0]();
}

void WebCore::PaymentContact::~PaymentContact(WebCore::PaymentContact *this)
{
}

uint64_t WebCore::PluginDocument::pluginWidget(WebCore::PluginDocument *this)
{
  return MEMORY[0x1F416DBF0](this);
}

uint64_t WebCore::ProcessWarming::prewarmGlobally(WebCore::ProcessWarming *this)
{
  return MEMORY[0x1F416DBF8](this);
}

uint64_t WebCore::ProcessWarming::collectPrewarmInformation(WebCore::ProcessWarming *this)
{
  return MEMORY[0x1F416DC08](this);
}

uint64_t WebCore::RTCDataChannel::handlerFromIdentifier()
{
  return MEMORY[0x1F416DC10]();
}

uint64_t WebCore::RenderThemeIOS::iconForAttachment(WebCore::RenderThemeIOS *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4)
{
  return MEMORY[0x1F416DC18](this, a2, a3, a4);
}

uint64_t WebCore::RenderThemeIOS::setFocusRingColor(WebCore::RenderThemeIOS *this, const Color *a2)
{
  return MEMORY[0x1F416DC20](this, a2);
}

uint64_t WebCore::RenderThemeIOS::systemFocusRingColor(WebCore::RenderThemeIOS *this)
{
  return MEMORY[0x1F416DC28](this);
}

uint64_t WebCore::RenderThemeIOS::setInsertionPointColor(WebCore::RenderThemeIOS *this, const Color *a2)
{
  return MEMORY[0x1F416DC30](this, a2);
}

uint64_t WebCore::RenderThemeIOS::cssValueToSystemColorMap(WebCore::RenderThemeIOS *this)
{
  return MEMORY[0x1F416DC38](this);
}

uint64_t WebCore::RenderThemeIOS::setCSSValueToSystemColorMap()
{
  return MEMORY[0x1F416DC40]();
}

uint64_t WebCore::ReportingScope::generateTestReport()
{
  return MEMORY[0x1F416DC48]();
}

uint64_t WebCore::ReportingScope::notifyReportObservers()
{
  return MEMORY[0x1F416DC50]();
}

uint64_t WebCore::ReportingScope::parseReportingEndpointsFromHeader(WebCore::ReportingScope *this, const WTF::String *a2, const WTF::URL *a3)
{
  return MEMORY[0x1F416DC58](this, a2, a3);
}

uint64_t WebCore::ResourceLoader::cancelledError(WebCore::ResourceLoader *this)
{
  return MEMORY[0x1F416DC78](this);
}

uint64_t WebCore::ResourceLoader::didBlockAuthenticationChallenge(WebCore::ResourceLoader *this)
{
  return MEMORY[0x1F416DC80](this);
}

uint64_t WebCore::ResourceLoader::start(WebCore::ResourceLoader *this)
{
  return MEMORY[0x1F416DC88](this);
}

uint64_t WebCore::ResourceLoader::cancel()
{
  return MEMORY[0x1F416DC90]();
}

uint64_t WebCore::SQLiteDatabase::lastChanges(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1F416DC98](this);
}

uint64_t WebCore::SQLiteDatabase::lastErrorMsg(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1F416DCA8](this);
}

uint64_t WebCore::SQLiteDatabase::releaseMemory(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1F416DCB0](this);
}

uint64_t WebCore::SQLiteDatabase::useFastMalloc(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1F416DCB8](this);
}

uint64_t WebCore::SQLiteDatabase::clearAllTables(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1F416DCC0](this);
}

uint64_t WebCore::SQLiteDatabase::executeCommand()
{
  return MEMORY[0x1F416DCC8]();
}

uint64_t WebCore::SQLiteDatabase::prepareStatement()
{
  return MEMORY[0x1F416DCD0]();
}

uint64_t WebCore::SQLiteDatabase::executeCommandSlow()
{
  return MEMORY[0x1F416DCD8]();
}

uint64_t WebCore::SQLiteDatabase::prepareHeapStatement()
{
  return MEMORY[0x1F416DCE0]();
}

uint64_t WebCore::SQLiteDatabase::prepareStatementSlow()
{
  return MEMORY[0x1F416DCE8]();
}

uint64_t WebCore::SQLiteDatabase::turnOnIncrementalAutoVacuum(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1F416DCF8](this);
}

uint64_t WebCore::SQLiteDatabase::open()
{
  return MEMORY[0x1F416DD00]();
}

uint64_t WebCore::SQLiteDatabase::tableSQL()
{
  return MEMORY[0x1F416DD10]();
}

uint64_t WebCore::SQLiteDatabase::interrupt()
{
  return MEMORY[0x1F416DD18]();
}

uint64_t WebCore::SQLiteDatabase::lastError(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1F416DD20](this);
}

uint64_t WebCore::SQLiteDatabase::SQLiteDatabase(WebCore::SQLiteDatabase *this)
{
  return MEMORY[0x1F416DD28](this);
}

void WebCore::SQLiteDatabase::~SQLiteDatabase(WebCore::SQLiteDatabase *this)
{
}

uint64_t WebCore::SWServerWorker::skipWaiting(WebCore::SWServerWorker *this)
{
  return MEMORY[0x1F416DD38](this);
}

uint64_t WebCore::SWServerWorker::whenActivated()
{
  return MEMORY[0x1F416DD40]();
}

uint64_t WebCore::SWServerWorker::whenTerminated()
{
  return MEMORY[0x1F416DD48]();
}

uint64_t WebCore::SWServerWorker::contextConnection(WebCore::SWServerWorker *this)
{
  return MEMORY[0x1F416DD50](this);
}

uint64_t WebCore::SWServerWorker::existingWorkerForIdentifier()
{
  return MEMORY[0x1F416DD58]();
}

uint64_t WebCore::SWServerWorker::terminate()
{
  return MEMORY[0x1F416DD60]();
}

void WebCore::SWServerWorker::~SWServerWorker(WebCore::SWServerWorker *this)
{
}

uint64_t WebCore::ScrollableArea::scrollbarStyleChanged()
{
  return MEMORY[0x1F416DD70]();
}

uint64_t WebCore::ScrollableArea::targetSideForScrollDelta()
{
  return MEMORY[0x1F416DD78]();
}

uint64_t WebCore::ScrollableArea::handleWheelEventForScrolling()
{
  return MEMORY[0x1F416DD80]();
}

uint64_t WebCore::ScrollableArea::scrollToPositionWithoutAnimation()
{
  return MEMORY[0x1F416DD88]();
}

uint64_t WebCore::ScrollableArea::ScrollableArea(WebCore::ScrollableArea *this)
{
  return MEMORY[0x1F416DD90](this);
}

void WebCore::ScrollableArea::~ScrollableArea(WebCore::ScrollableArea *this)
{
}

uint64_t WebCore::ScrollbarTheme::theme(WebCore::ScrollbarTheme *this)
{
  return MEMORY[0x1F416DDA0](this);
}

uint64_t WebCore::SecurityOrigin::createOpaque(WebCore::SecurityOrigin *this)
{
  return MEMORY[0x1F416DDA8](this);
}

uint64_t WebCore::SecurityOrigin::opaqueOrigin(WebCore::SecurityOrigin *this)
{
  return MEMORY[0x1F416DDB0](this);
}

uint64_t WebCore::SecurityOrigin::createFromString(WebCore::SecurityOrigin *this, const WTF::String *a2)
{
  return MEMORY[0x1F416DDB8](this, a2);
}

uint64_t WebCore::SecurityOrigin::isLocalhostAddress()
{
  return MEMORY[0x1F416DDC0]();
}

uint64_t WebCore::SecurityOrigin::isLocalHostOrLoopbackIPAddress()
{
  return MEMORY[0x1F416DDC8]();
}

uint64_t WebCore::SecurityOrigin::create()
{
  return MEMORY[0x1F416DDD0]();
}

uint64_t WebCore::SecurityOrigin::create(WebCore::SecurityOrigin *this, const WTF::URL *a2)
{
  return MEMORY[0x1F416DDD8](this, a2);
}

uint64_t WebCore::SecurityPolicy::generateReferrerHeader()
{
  return MEMORY[0x1F416DDE8]();
}

uint64_t WebCore::SecurityPolicy::resetOriginAccessAllowlists(WebCore::SecurityPolicy *this)
{
  return MEMORY[0x1F416DDF0](this);
}

uint64_t WebCore::SecurityPolicy::addOriginAccessAllowlistEntry(WebCore::SecurityPolicy *this, const WebCore::SecurityOrigin *a2, const WTF::String *a3, const WTF::String *a4)
{
  return MEMORY[0x1F416DDF8](this, a2, a3, a4);
}

uint64_t WebCore::SecurityPolicy::removeOriginAccessAllowlistEntry(WebCore::SecurityPolicy *this, const WebCore::SecurityOrigin *a2, const WTF::String *a3, const WTF::String *a4)
{
  return MEMORY[0x1F416DE00](this, a2, a3, a4);
}

uint64_t WebCore::SecurityPolicy::shouldInheritSecurityOriginFromOwner(WebCore::SecurityPolicy *this, const WTF::URL *a2)
{
  return MEMORY[0x1F416DE08](this, a2);
}

uint64_t WebCore::ShapeDetection::FaceDetectorImpl::FaceDetectorImpl()
{
  return MEMORY[0x1F416DE10]();
}

uint64_t WebCore::ShapeDetection::TextDetectorImpl::TextDetectorImpl(WebCore::ShapeDetection::TextDetectorImpl *this)
{
  return MEMORY[0x1F416DE18](this);
}

uint64_t WebCore::ShapeDetection::BarcodeDetectorImpl::BarcodeDetectorImpl()
{
  return MEMORY[0x1F416DE28]();
}

uint64_t WebCore::TestReportBody::create()
{
  return MEMORY[0x1F416DE40]();
}

uint64_t WebCore::TextExtraction::extractItem()
{
  return MEMORY[0x1F416DE48]();
}

uint64_t WebCore::TileController::containerLayers(WebCore::TileController *this)
{
  return MEMORY[0x1F416DE58](this);
}

uint64_t WebCore::TileController::setNeedsDisplayInRect(WebCore::TileController *this, const IntRect *a2)
{
  return MEMORY[0x1F416DE78](this, a2);
}

uint64_t WebCore::TileController::setTileDebugBorderColor(WebCore::TileController *this, Color a2)
{
  return MEMORY[0x1F416DE80](this, a2.m_colorAndFlags);
}

uint64_t WebCore::TileController::tileGridContainerLayerName(WebCore::TileController *this)
{
  return MEMORY[0x1F416DE90](this);
}

uint64_t WebCore::TileController::TileController()
{
  return MEMORY[0x1F416DEA8]();
}

uint64_t WebCore::UserStyleSheet::UserStyleSheet()
{
  return MEMORY[0x1F416DEB0]();
}

uint64_t WebCore::WebRTCProvider::webRTCAvailable(WebCore::WebRTCProvider *this)
{
  return MEMORY[0x1F416DEB8](this);
}

uint64_t WebCore::WebSocketFrame::WebSocketFrame()
{
  return MEMORY[0x1F416DEE0]();
}

uint64_t WebCore::characterCount()
{
  return MEMORY[0x1F416DEE8]();
}

uint64_t WebCore::copyTimingData()
{
  return MEMORY[0x1F416DEF0]();
}

uint64_t WebCore::endOfParagraph()
{
  return MEMORY[0x1F416DEF8]();
}

uint64_t WebCore::foldQuoteMarks(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1F416DF00](this, a2);
}

uint64_t WebCore::keyForKeyEvent(WebCore *this, WebEvent *a2)
{
  return MEMORY[0x1F416DF08](this, a2);
}

uint64_t WebCore::roundedIntRect(WebCore *this, const FloatRect *a2)
{
  return MEMORY[0x1F416DF10](this, a2);
}

uint64_t WebCore::setSystemHasAC(WebCore *this)
{
  return MEMORY[0x1F416DF18](this);
}

uint64_t WebCore::viewController(WebCore *this, UIView *a2)
{
  return MEMORY[0x1F416DF28](this, a2);
}

uint64_t WebCore::ActiveDOMObject::ActiveDOMObject(WebCore::ActiveDOMObject *this, Document *a2)
{
  return MEMORY[0x1F416DF38](this, a2);
}

void WebCore::ActiveDOMObject::~ActiveDOMObject(WebCore::ActiveDOMObject *this)
{
}

uint64_t WebCore::AffineTransform::scale(WebCore::AffineTransform *this, double a2)
{
  return MEMORY[0x1F416DF48](this, a2);
}

uint64_t WebCore::AffineTransform::rotate(WebCore::AffineTransform *this, double a2)
{
  return MEMORY[0x1F416DF50](this, a2);
}

uint64_t WebCore::AffineTransform::translate(WebCore::AffineTransform *this, const WebCore::FloatSize *a2)
{
  return MEMORY[0x1F416DF58](this, a2);
}

uint64_t WebCore::AffineTransform::translate(WebCore::AffineTransform *this, double a2, double a3)
{
  return MEMORY[0x1F416DF60](this, a2, a3);
}

uint64_t WebCore::AffineTransform::AffineTransform(WebCore::AffineTransform *this, const CGAffineTransform *a2)
{
  return MEMORY[0x1F416DF68](this, a2);
}

uint64_t WebCore::ArchiveResource::create()
{
  return MEMORY[0x1F416DF70]();
}

uint64_t WebCore::AsyncFileStream::openForRead(WebCore::AsyncFileStream *this, const WTF::String *a2)
{
  return MEMORY[0x1F416DF78](this, a2);
}

uint64_t WebCore::AsyncFileStream::close(WebCore::AsyncFileStream *this)
{
  return MEMORY[0x1F416DF88](this);
}

uint64_t WebCore::AsyncFileStream::AsyncFileStream(WebCore::AsyncFileStream *this, WebCore::FileStreamClient *a2)
{
  return MEMORY[0x1F416DF98](this, a2);
}

void WebCore::AsyncFileStream::~AsyncFileStream(WebCore::AsyncFileStream *this)
{
}

uint64_t WebCore::BasicShapeInset::create()
{
  return MEMORY[0x1F416DFA8]();
}

uint64_t WebCore::CertificateInfo::certificateChainFromSecTrust(WebCore::CertificateInfo *this, __SecTrust *a2)
{
  return MEMORY[0x1F416DFC8](this, a2);
}

uint64_t WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert()
{
  return MEMORY[0x1F416DFD0]();
}

uint64_t WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert()
{
  return MEMORY[0x1F416DFD8]();
}

uint64_t WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert()
{
  return MEMORY[0x1F416DFE0]();
}

uint64_t WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert()
{
  return MEMORY[0x1F416DFE8]();
}

uint64_t WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert()
{
  return MEMORY[0x1F416DFF0]();
}

uint64_t WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert()
{
  return MEMORY[0x1F416DFF8]();
}

void WebCore::DOMWrapperWorld::~DOMWrapperWorld(WebCore::DOMWrapperWorld *this)
{
}

uint64_t WebCore::DatabaseManager::setIsAvailable(WebCore::DatabaseManager *this)
{
  return MEMORY[0x1F416E018](this);
}

uint64_t WebCore::DatabaseManager::singleton(WebCore::DatabaseManager *this)
{
  return MEMORY[0x1F416E038](this);
}

uint64_t WebCore::DatabaseTracker::trackerWithDatabasePath(WebCore::DatabaseTracker *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E058](this, a2);
}

uint64_t WebCore::DatabaseTracker::deleteAllDatabasesImmediately(WebCore::DatabaseTracker *this)
{
  return MEMORY[0x1F416E070](this);
}

uint64_t WebCore::DatabaseTracker::setQuota(WebCore::DatabaseTracker *this, const WebCore::SecurityOriginData *a2)
{
  return MEMORY[0x1F416E0A0](this, a2);
}

uint64_t WebCore::DatabaseTracker::singleton(WebCore::DatabaseTracker *this)
{
  return MEMORY[0x1F416E0A8](this);
}

uint64_t WebCore::DeferredPromise::callFunction()
{
  return MEMORY[0x1F416E0B0]();
}

uint64_t WebCore::DeferredPromise::reject()
{
  return MEMORY[0x1F416E0B8]();
}

uint64_t WebCore::FocusController::setFocusedFrame()
{
  return MEMORY[0x1F416E0C8]();
}

uint64_t WebCore::FocusController::setInitialFocus()
{
  return MEMORY[0x1F416E0D0]();
}

uint64_t WebCore::FocusController::setFocusedElement()
{
  return MEMORY[0x1F416E0D8]();
}

uint64_t WebCore::FocusController::nextFocusableElement(WebCore::FocusController *this, Node *a2)
{
  return MEMORY[0x1F416E0E0](this, a2);
}

uint64_t WebCore::FocusController::relinquishFocusToChrome()
{
  return MEMORY[0x1F416E0E8]();
}

uint64_t WebCore::FocusController::previousFocusableElement(WebCore::FocusController *this, Node *a2)
{
  return MEMORY[0x1F416E0F0](this, a2);
}

uint64_t WebCore::GamepadProvider::setSharedProvider(WebCore::GamepadProvider *this, WebCore::GamepadProvider *a2)
{
  return MEMORY[0x1F416E100](this, a2);
}

uint64_t WebCore::GamepadProvider::singleton(WebCore::GamepadProvider *this)
{
  return MEMORY[0x1F416E108](this);
}

uint64_t WebCore::GraphicsContext::drawImageBuffer()
{
  return MEMORY[0x1F416E110]();
}

{
  return MEMORY[0x1F416E118]();
}

uint64_t WebCore::GraphicsContext::drawNativeImage()
{
  return MEMORY[0x1F416E120]();
}

uint64_t WebCore::GraphicsContext::drawConsumingImageBuffer()
{
  return MEMORY[0x1F416E128]();
}

uint64_t WebCore::GraphicsContext::drawImage()
{
  return MEMORY[0x1F416E130]();
}

{
  return MEMORY[0x1F416E138]();
}

uint64_t WebCore::GraphicsLayerCA::setContentsToAsyncDisplayDelegate()
{
  return MEMORY[0x1F416E148]();
}

uint64_t WebCore::GraphicsLayerCA::GraphicsLayerCA()
{
  return MEMORY[0x1F416E150]();
}

void WebCore::GraphicsLayerCA::~GraphicsLayerCA(WebCore::GraphicsLayerCA *this)
{
}

uint64_t WebCore::HTTPHeaderField::create()
{
  return MEMORY[0x1F416E1B0]();
}

uint64_t WebCore::IDBDatabaseInfo::IDBDatabaseInfo()
{
  return MEMORY[0x1F416E1B8]();
}

void WebCore::IDBDatabaseInfo::operator delete(void *a1)
{
}

uint64_t WebCore::IDBDatabaseInfo::operator new(WebCore::IDBDatabaseInfo *this)
{
  return MEMORY[0x1F416E1C8](this);
}

void WebCore::IDBGetAllResult::operator delete(void *a1)
{
}

uint64_t WebCore::IDBGetAllResult::operator new(WebCore::IDBGetAllResult *this)
{
  return MEMORY[0x1F416E1D8](this);
}

uint64_t WebCore::MIMETypeFromUTI(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E1F8](this, a2);
}

void WebCore::OffscreenCanvas::~OffscreenCanvas(WebCore::OffscreenCanvas *this)
{
}

void WebCore::OffscreenCanvas::operator delete(void *a1)
{
}

uint64_t WebCore::PlatformCALayer::setMaskLayer()
{
  return MEMORY[0x1F416E210]();
}

uint64_t WebCore::PlatformCALayer::drawLayerContents()
{
  return MEMORY[0x1F416E218]();
}

uint64_t WebCore::PlatformCALayer::currentTimeToMediaTime()
{
  return MEMORY[0x1F416E220]();
}

uint64_t WebCore::PlatformCALayer::PlatformCALayer()
{
  return MEMORY[0x1F416E228]();
}

void WebCore::PlatformCALayer::~PlatformCALayer(WebCore::PlatformCALayer *this)
{
}

uint64_t WebCore::ProcessIdentity::ProcessIdentity()
{
  return MEMORY[0x1F416E238]();
}

{
  return MEMORY[0x1F416E240]();
}

uint64_t WebCore::ProcessIdentity::operator=()
{
  return MEMORY[0x1F416E248]();
}

uint64_t WebCore::ProgressBarPart::create(WebCore::ProgressBarPart *this, double a2, const WTF::Seconds *a3)
{
  return MEMORY[0x1F416E250](this, a3, a2);
}

uint64_t WebCore::ProtectionSpace::ProtectionSpace(WebCore::ProtectionSpace *this, NSURLProtectionSpace *a2)
{
  return MEMORY[0x1F416E258](this, a2);
}

uint64_t WebCore::ProtectionSpace::ProtectionSpace()
{
  return MEMORY[0x1F416E260]();
}

uint64_t WebCore::ResourceRequest::fromResourceRequestData()
{
  return MEMORY[0x1F416E278]();
}

uint64_t WebCore::ResourceRequest::setHTTPPipeliningEnabled(WebCore::ResourceRequest *this)
{
  return MEMORY[0x1F416E280](this);
}

uint64_t WebCore::ResourceRequest::updateFromDelegatePreservingOldProperties(WebCore::ResourceRequest *this, const WebCore::ResourceRequest *a2)
{
  return MEMORY[0x1F416E288](this, a2);
}

uint64_t WebCore::ResourceRequest::ResourceRequest(WebCore::ResourceRequest *this, NSURLRequest *a2)
{
  return MEMORY[0x1F416E290](this, a2);
}

uint64_t WebCore::RunLoopObserver::invalidate(WebCore::RunLoopObserver *this)
{
  return MEMORY[0x1F416E298](this);
}

void WebCore::RunLoopObserver::~RunLoopObserver(WebCore::RunLoopObserver *this)
{
}

uint64_t WebCore::SQLiteStatement::bindDouble(WebCore::SQLiteStatement *this, double a2)
{
  return MEMORY[0x1F416E2B0](this, a2);
}

uint64_t WebCore::SQLiteStatement::columnText(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1F416E2B8](this);
}

uint64_t WebCore::SQLiteStatement::columnDouble(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1F416E2C0](this);
}

uint64_t WebCore::SQLiteStatement::columnBlobAsString(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1F416E2D0](this);
}

uint64_t WebCore::SQLiteStatement::step(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1F416E2E0](this);
}

uint64_t WebCore::SQLiteStatement::reset(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1F416E2E8](this);
}

uint64_t WebCore::SQLiteStatement::bindInt(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1F416E2F0](this);
}

uint64_t WebCore::SQLiteStatement::bindBlob(WebCore::SQLiteStatement *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1F416E2F8](this, a2, a3);
}

uint64_t WebCore::SQLiteStatement::bindText()
{
  return MEMORY[0x1F416E300]();
}

uint64_t WebCore::SQLiteStatement::columnInt(WebCore::SQLiteStatement *this)
{
  return MEMORY[0x1F416E308](this);
}

void WebCore::SQLiteStatement::~SQLiteStatement(WebCore::SQLiteStatement *this)
{
}

uint64_t WebCore::SecurityContext::contentSecurityPolicy(WebCore::SecurityContext *this)
{
  return MEMORY[0x1F416E318](this);
}

uint64_t WebCore::ShareableBitmap::createImage(WebCore::ShareableBitmap *this)
{
  return MEMORY[0x1F416E320](this);
}

uint64_t WebCore::ShareableBitmap::makeCGImage()
{
  return MEMORY[0x1F416E328]();
}

uint64_t WebCore::ShareableBitmap::mutableSpan(WebCore::ShareableBitmap *this)
{
  return MEMORY[0x1F416E330](this);
}

uint64_t WebCore::ShareableBitmap::createReadOnly()
{
  return MEMORY[0x1F416E338]();
}

uint64_t WebCore::ShareableBitmap::makeCGImageCopy(WebCore::ShareableBitmap *this)
{
  return MEMORY[0x1F416E340](this);
}

uint64_t WebCore::ShareableBitmap::createFromImageDraw()
{
  return MEMORY[0x1F416E348]();
}

{
  return MEMORY[0x1F416E350]();
}

uint64_t WebCore::ShareableBitmap::createPlatformImage()
{
  return MEMORY[0x1F416E358]();
}

uint64_t WebCore::ShareableBitmap::setOwnershipOfMemory()
{
  return MEMORY[0x1F416E360]();
}

uint64_t WebCore::ShareableBitmap::createFromImagePixels()
{
  return MEMORY[0x1F416E368]();
}

uint64_t WebCore::ShareableBitmap::createGraphicsContext(WebCore::ShareableBitmap *this)
{
  return MEMORY[0x1F416E370](this);
}

uint64_t WebCore::ShareableBitmap::paint(WebCore::ShareableBitmap *this, WebCore::GraphicsContext *a2, const IntPoint *a3, const IntRect *a4)
{
  return MEMORY[0x1F416E378](this, a2, a3, a4);
}

uint64_t WebCore::ShareableBitmap::paint(WebCore::ShareableBitmap *this, WebCore::GraphicsContext *a2, float a3, const IntPoint *a4, const IntRect *a5)
{
  return MEMORY[0x1F416E380](this, a2, a4, a5, a3);
}

uint64_t WebCore::ShareableBitmap::create()
{
  return MEMORY[0x1F416E388]();
}

{
  return MEMORY[0x1F416E390]();
}

uint64_t WebCore::SliderTrackPart::create()
{
  return MEMORY[0x1F416E398]();
}

uint64_t WebCore::SpotLightSource::create()
{
  return MEMORY[0x1F416E3A0]();
}

uint64_t WebCore::UTIFromMIMEType(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E3A8](this, a2);
}

uint64_t WebCore::VisiblePosition::VisiblePosition()
{
  return MEMORY[0x1F416E3B0]();
}

uint64_t WebCore::WebLockRegistry::setSharedRegistry()
{
  return MEMORY[0x1F416E3B8]();
}

uint64_t WebCore::blendSourceOver(WebCore *this, const Color *a2, const Color *a3)
{
  return MEMORY[0x1F416E3D8](this, a2, a3);
}

uint64_t WebCore::cocoaColorOrNil(WebCore *this, const Color *a2)
{
  return MEMORY[0x1F416E3E0](this, a2);
}

uint64_t WebCore::codeForKeyEvent(WebCore *this, WebEvent *a2)
{
  return MEMORY[0x1F416E3E8](this, a2);
}

uint64_t WebCore::createLiveRange()
{
  return MEMORY[0x1F416E3F0]();
}

{
  return MEMORY[0x1F416E3F8]();
}

uint64_t WebCore::hasAnyPlainText()
{
  return MEMORY[0x1F416E400]();
}

uint64_t WebCore::localizedString(WebCore *this, const __CFString *a2)
{
  return MEMORY[0x1F416E410](this, a2);
}

uint64_t WebCore::makeSimpleRange()
{
  return MEMORY[0x1F416E420]();
}

{
  return MEMORY[0x1F416E428]();
}

{
  return MEMORY[0x1F416E438]();
}

uint64_t WebCore::makeSimpleRange(WebCore *this, const Range *a2)
{
  return MEMORY[0x1F416E430](this, a2);
}

uint64_t WebCore::startOfDocument(WebCore *this, const Node *a2)
{
  return MEMORY[0x1F416E448](this, a2);
}

uint64_t WebCore::startOfSentence()
{
  return MEMORY[0x1F416E458]();
}

uint64_t WebCore::toDecimalNumber(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E460](this, a2);
}

uint64_t WebCore::unwrapCryptoKey()
{
  return MEMORY[0x1F416E468]();
}

uint64_t WebCore::AttributedString::rangesAreSafe()
{
  return MEMORY[0x1F416E470]();
}

uint64_t WebCore::AttributedString::fromNSAttributedString()
{
  return MEMORY[0x1F416E478]();
}

uint64_t WebCore::AttributedString::AttributedString()
{
  return MEMORY[0x1F416E480]();
}

{
  return MEMORY[0x1F416E488]();
}

{
  return MEMORY[0x1F416E490]();
}

uint64_t WebCore::AttributedString::AttributedString(WebCore::AttributedString *this)
{
  return MEMORY[0x1F416E498](this);
}

void WebCore::AttributedString::~AttributedString(WebCore::AttributedString *this)
{
}

uint64_t WebCore::AttributedString::operator=()
{
  return MEMORY[0x1F416E4A8]();
}

{
  return MEMORY[0x1F416E4B0]();
}

uint64_t WebCore::AudioDestination::hardwareSampleRate(WebCore::AudioDestination *this)
{
  return MEMORY[0x1F416E4B8](this);
}

uint64_t WebCore::AutofillElements::computeAutofillElements()
{
  return MEMORY[0x1F416E4C8]();
}

uint64_t WebCore::AutofillElements::autofill()
{
  return MEMORY[0x1F416E4D0]();
}

uint64_t WebCore::BackForwardCache::setMaxSize(WebCore::BackForwardCache *this)
{
  return MEMORY[0x1F416E4D8](this);
}

uint64_t WebCore::BackForwardCache::suspendPage()
{
  return MEMORY[0x1F416E4E0]();
}

uint64_t WebCore::BackForwardCache::addIfCacheable()
{
  return MEMORY[0x1F416E4E8]();
}

uint64_t WebCore::BackForwardCache::pruneToSizeNow()
{
  return MEMORY[0x1F416E4F0]();
}

uint64_t WebCore::BackForwardCache::clearEntriesForOrigins()
{
  return MEMORY[0x1F416E4F8]();
}

uint64_t WebCore::BackForwardCache::remove(WebCore::BackForwardCache *this, WebCore::HistoryItem *a2)
{
  return MEMORY[0x1F416E500](this, a2);
}

uint64_t WebCore::BackForwardCache::singleton(WebCore::BackForwardCache *this)
{
  return MEMORY[0x1F416E508](this);
}

uint64_t WebCore::BasicShapeCircle::create()
{
  return MEMORY[0x1F416E510]();
}

uint64_t WebCore::BlobRegistryImpl::registerBlobURL()
{
  return MEMORY[0x1F416E518]();
}

uint64_t WebCore::BlobRegistryImpl::unregisterBlobURL()
{
  return MEMORY[0x1F416E520]();
}

uint64_t WebCore::BlobRegistryImpl::registerBlobURLHandle()
{
  return MEMORY[0x1F416E528]();
}

uint64_t WebCore::BlobRegistryImpl::setPartitioningEnabled(WebCore::BlobRegistryImpl *this)
{
  return MEMORY[0x1F416E530](this);
}

uint64_t WebCore::BlobRegistryImpl::registerInternalBlobURL()
{
  return MEMORY[0x1F416E538]();
}

uint64_t WebCore::BlobRegistryImpl::unregisterBlobURLHandle()
{
  return MEMORY[0x1F416E540]();
}

uint64_t WebCore::BlobRegistryImpl::registerInternalFileBlobURL()
{
  return MEMORY[0x1F416E548]();
}

uint64_t WebCore::BlobRegistryImpl::registerInternalBlobURLForSlice(WebCore::BlobRegistryImpl *this, const WTF::URL *a2, const WTF::URL *a3, uint64_t a4, uint64_t a5, const WTF::String *a6)
{
  return MEMORY[0x1F416E550](this, a2, a3, a4, a5, a6);
}

uint64_t WebCore::BlobRegistryImpl::writeBlobsToTemporaryFilesForIndexedDB()
{
  return MEMORY[0x1F416E558]();
}

uint64_t WebCore::BlobRegistryImpl::registerInternalBlobURLOptionallyFileBacked()
{
  return MEMORY[0x1F416E560]();
}

uint64_t WebCore::BlobRegistryImpl::blobSize(WebCore::BlobRegistryImpl *this, const WTF::URL *a2)
{
  return MEMORY[0x1F416E568](this, a2);
}

uint64_t WebCore::BlobRegistryImpl::blobType(WebCore::BlobRegistryImpl *this, const WTF::URL *a2)
{
  return MEMORY[0x1F416E570](this, a2);
}

void WebCore::BlobRegistryImpl::~BlobRegistryImpl(WebCore::BlobRegistryImpl *this)
{
}

uint64_t WebCore::BroadcastChannel::dispatchMessageTo()
{
  return MEMORY[0x1F416E580]();
}

uint64_t WebCore::CocoaApplication::isIBooks(WebCore::CocoaApplication *this)
{
  return MEMORY[0x1F416E588](this);
}

uint64_t WebCore::DecomposedGlyphs::create()
{
  return MEMORY[0x1F416E598]();
}

uint64_t WebCore::DictionaryLookup::rangeForSelection()
{
  return MEMORY[0x1F416E5A0]();
}

uint64_t WebCore::DictionaryLookup::rangeAtHitTestResult(WebCore::DictionaryLookup *this, const WebCore::HitTestResult *a2)
{
  return MEMORY[0x1F416E5A8](this, a2);
}

uint64_t WebCore::DictionaryLookup::stringForPDFSelection(WebCore::DictionaryLookup *this, PDFSelection *a2)
{
  return MEMORY[0x1F416E5B0](this, a2);
}

uint64_t WebCore::DictionaryLookup::showPopup()
{
  return MEMORY[0x1F416E5B8]();
}

uint64_t WebCore::EventListenerMap::EventListenerMap(WebCore::EventListenerMap *this)
{
  return MEMORY[0x1F416E5C8](this);
}

uint64_t WebCore::FEConvolveMatrix::create()
{
  return MEMORY[0x1F416E5D0]();
}

uint64_t WebCore::FilterOperations::FilterOperations()
{
  return MEMORY[0x1F416E5F0]();
}

uint64_t WebCore::FloatRoundedRect::FloatRoundedRect(WebCore::FloatRoundedRect *this, const FloatRect *a2, const Radii *a3)
{
  return MEMORY[0x1F416E5F8](this, a2, a3);
}

uint64_t WebCore::FloatRoundedRect::FloatRoundedRect(WebCore::FloatRoundedRect *this, const FloatRect *a2, const WebCore::FloatSize *a3, const WebCore::FloatSize *a4, const WebCore::FloatSize *a5, const WebCore::FloatSize *a6)
{
  return MEMORY[0x1F416E600](this, a2, a3, a4, a5, a6);
}

void WebCore::FontCascadeFonts::~FontCascadeFonts(WebCore::FontCascadeFonts *this)
{
}

uint64_t WebCore::FontPlatformData::fromIPCData()
{
  return MEMORY[0x1F416E618]();
}

uint64_t WebCore::FontPlatformData::create()
{
  return MEMORY[0x1F416E620]();
}

void WebCore::FontPlatformData::~FontPlatformData(WebCore::FontPlatformData *this)
{
}

uint64_t WebCore::FrameLoadRequest::requester(WebCore::FrameLoadRequest *this)
{
  return MEMORY[0x1F416E630](this);
}

uint64_t WebCore::FrameLoadRequest::FrameLoadRequest()
{
  return MEMORY[0x1F416E640]();
}

{
  return MEMORY[0x1F416E648]();
}

void WebCore::FrameLoadRequest::~FrameLoadRequest(WebCore::FrameLoadRequest *this)
{
}

uint64_t WebCore::FrameRateMonitor::update(WebCore::FrameRateMonitor *this)
{
  return MEMORY[0x1F416E658](this);
}

uint64_t WebCore::HTMLImageElement::setAllowsAnimation()
{
  return MEMORY[0x1F416E670]();
}

uint64_t WebCore::HTMLInputElement::setAutoFilled(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F416E6A8](this);
}

uint64_t WebCore::HTMLInputElement::setShowAutoFillButton()
{
  return MEMORY[0x1F416E6D0]();
}

uint64_t WebCore::HTMLInputElement::setAutoFilledAndObscured(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F416E6D8](this);
}

uint64_t WebCore::HTMLInputElement::setAutoFilledAndViewable(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F416E6E0](this);
}

uint64_t WebCore::HTMLInputElement::files(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F416E6E8](this);
}

uint64_t WebCore::HTMLInputElement::setFiles()
{
  return MEMORY[0x1F416E708]();
}

uint64_t WebCore::HTMLInputElement::setValue()
{
  return MEMORY[0x1F416E710]();
}

uint64_t WebCore::HTMLMediaElement::naturalSize(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F416E738](this);
}

uint64_t WebCore::HTMLMediaElement::addEventListener()
{
  return MEMORY[0x1F416E760]();
}

uint64_t WebCore::HTMLMediaElement::willExitFullscreen(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F416E770](this);
}

uint64_t WebCore::HTMLMediaElement::mediaCacheDirectory(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F416E778](this);
}

uint64_t WebCore::HTMLMediaElement::originsInMediaCache(WebCore::HTMLMediaElement *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E780](this, a2);
}

uint64_t WebCore::HTMLMediaElement::removeEventListener()
{
  return MEMORY[0x1F416E788]();
}

uint64_t WebCore::HTMLMediaElement::layerHostingContextID(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F416E790](this);
}

uint64_t WebCore::HTMLMediaElement::setMediaCacheDirectory(WebCore::HTMLMediaElement *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E798](this, a2);
}

uint64_t WebCore::HTMLMediaElement::requestHostingContextID()
{
  return MEMORY[0x1F416E7A0]();
}

uint64_t WebCore::HTMLMediaElement::prepareForVideoFullscreenStandby(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F416E7C8](this);
}

uint64_t WebCore::HTMLVideoElement::nativeImageForCurrentTime(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1F416E880](this);
}

uint64_t WebCore::HTMLVideoElement::setVideoFullscreenStandby(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1F416E888](this);
}

uint64_t WebCore::HTMLVideoElement::didExitFullscreenOrPictureInPicture(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1F416E898](this);
}

uint64_t WebCore::HTMLVideoElement::didEnterFullscreenOrPictureInPicture(WebCore::HTMLVideoElement *this, const WebCore::FloatSize *a2)
{
  return MEMORY[0x1F416E8A0](this, a2);
}

uint64_t WebCore::HTTPHeaderValues::applicationJSONContentType(WebCore::HTTPHeaderValues *this)
{
  return MEMORY[0x1F416E8A8](this);
}

uint64_t WebCore::HTTPHeaderValues::maxAge0(WebCore::HTTPHeaderValues *this)
{
  return MEMORY[0x1F416E8B0](this);
}

uint64_t WebCore::InspectorOverlay::drawFlexOverlay(WebCore::InspectorOverlay *this, WebCore::GraphicsContext *a2, const FlexHighlightOverlay *a3)
{
  return MEMORY[0x1F416E8B8](this, a2, a3);
}

uint64_t WebCore::InspectorOverlay::drawGridOverlay(WebCore::InspectorOverlay *this, WebCore::GraphicsContext *a2, const GridHighlightOverlay *a3)
{
  return MEMORY[0x1F416E8C0](this, a2, a3);
}

uint64_t WebCore::LegacyWebArchive::createFromSelection(WebCore::LegacyWebArchive *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1F416E8D8](this, a2);
}

uint64_t WebCore::LegacyWebArchive::rawDataRepresentation(WebCore::LegacyWebArchive *this)
{
  return MEMORY[0x1F416E8E0](this);
}

uint64_t WebCore::LegacyWebArchive::create()
{
  return MEMORY[0x1F416E8E8]();
}

{
  return MEMORY[0x1F416E8F0]();
}

{
  return MEMORY[0x1F416E900]();
}

{
  return MEMORY[0x1F416E908]();
}

uint64_t WebCore::MIMETypeRegistry::pdfMIMETypes(WebCore::MIMETypeRegistry *this)
{
  return MEMORY[0x1F416E918](this);
}

uint64_t WebCore::MIMETypeRegistry::usdMIMETypes(WebCore::MIMETypeRegistry *this)
{
  return MEMORY[0x1F416E920](this);
}

uint64_t WebCore::MIMETypeRegistry::isPDFMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E928](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::isUSDMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E930](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::canShowMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E948](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::allowedMIMETypes()
{
  return MEMORY[0x1F416E950]();
}

uint64_t WebCore::MIMETypeRegistry::isWebArchiveMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E958](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::mimeTypeForExtension()
{
  return MEMORY[0x1F416E960]();
}

uint64_t WebCore::MIMETypeRegistry::isSupportedJSONMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E968](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::isSupportedImageMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E980](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::isSupportedModelMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E990](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::isSupportedNonImageMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416E9A8](this, a2);
}

uint64_t WebCore::MIMETypeRegistry::appendFileExtensionIfNecessary(WebCore::MIMETypeRegistry *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F416E9B8](this, a2, a3);
}

uint64_t WebCore::NavigationAction::NavigationAction()
{
  return MEMORY[0x1F416E9C8]();
}

void WebCore::NavigationAction::~NavigationAction(WebCore::NavigationAction *this)
{
}

uint64_t WebCore::NavigatorGamepad::setGamepadsRecentlyAccessedThreshold()
{
  return MEMORY[0x1F416E9D8]();
}

uint64_t WebCore::NetworkSendQueue::clear(WebCore::NetworkSendQueue *this)
{
  return MEMORY[0x1F416E9E0](this);
}

uint64_t WebCore::NetworkSendQueue::enqueue()
{
  return MEMORY[0x1F416E9E8]();
}

{
  return MEMORY[0x1F416E9F8]();
}

uint64_t WebCore::NetworkSendQueue::enqueue(WebCore::NetworkSendQueue *this, const JSC::ArrayBuffer *a2)
{
  return MEMORY[0x1F416E9F0](this, a2);
}

uint64_t WebCore::NetworkSendQueue::NetworkSendQueue()
{
  return MEMORY[0x1F416EA00]();
}

void WebCore::NetworkSendQueue::~NetworkSendQueue(WebCore::NetworkSendQueue *this)
{
}

uint64_t WebCore::NotificationData::fromDictionary(WebCore::NotificationData *this, NSDictionary *a2)
{
  return MEMORY[0x1F416EA10](this, a2);
}

uint64_t WebCore::PointLightSource::create()
{
  return MEMORY[0x1F416EA18]();
}

uint64_t WebCore::PreviewConverter::supportsMIMEType(WebCore::PreviewConverter *this, const WTF::String *a2)
{
  return MEMORY[0x1F416EA20](this, a2);
}

uint64_t WebCore::RayPathOperation::create()
{
  return MEMORY[0x1F416EA28]();
}

uint64_t WebCore::ResourceResponse::disableLazyInitialization(WebCore::ResourceResponse *this)
{
  return MEMORY[0x1F416EA30](this);
}

uint64_t WebCore::SQLiteFileSystem::databaseFileSize(WebCore::SQLiteFileSystem *this, const WTF::String *a2)
{
  return MEMORY[0x1F416EA38](this, a2);
}

uint64_t WebCore::SQLiteFileSystem::moveDatabaseFile(WebCore::SQLiteFileSystem *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F416EA40](this, a2, a3);
}

uint64_t WebCore::SQLiteFileSystem::deleteDatabaseFile(WebCore::SQLiteFileSystem *this, const WTF::String *a2)
{
  return MEMORY[0x1F416EA48](this, a2);
}

uint64_t WebCore::SQLiteFileSystem::computeHashForFileName()
{
  return MEMORY[0x1F416EA50]();
}

uint64_t WebCore::SWContextManager::firePushEvent()
{
  return MEMORY[0x1F416EA60]();
}

uint64_t WebCore::SWContextManager::setConnection()
{
  return MEMORY[0x1F416EA68]();
}

uint64_t WebCore::SWContextManager::terminateWorker()
{
  return MEMORY[0x1F416EA78]();
}

uint64_t WebCore::SWContextManager::updateWorkerState()
{
  return MEMORY[0x1F416EA80]();
}

uint64_t WebCore::SWContextManager::fireUpdateFoundEvent()
{
  return MEMORY[0x1F416EA88]();
}

uint64_t WebCore::SWContextManager::fireNotificationEvent()
{
  return MEMORY[0x1F416EA90]();
}

uint64_t WebCore::SWContextManager::stopAllServiceWorkers(WebCore::SWContextManager *this)
{
  return MEMORY[0x1F416EA98](this);
}

uint64_t WebCore::SWContextManager::fireBackgroundFetchEvent()
{
  return MEMORY[0x1F416EAA8]();
}

uint64_t WebCore::SWContextManager::fireBackgroundFetchClickEvent()
{
  return MEMORY[0x1F416EAB0]();
}

uint64_t WebCore::SWContextManager::setRegistrationLastUpdateTime()
{
  return MEMORY[0x1F416EAB8]();
}

uint64_t WebCore::SWContextManager::setRegistrationUpdateViaCache()
{
  return MEMORY[0x1F416EAC0]();
}

uint64_t WebCore::SWContextManager::registerServiceWorkerThreadForInstall()
{
  return MEMORY[0x1F416EAC8]();
}

uint64_t WebCore::SWContextManager::singleton(WebCore::SWContextManager *this)
{
  return MEMORY[0x1F416EAD0](this);
}

uint64_t WebCore::ScriptController::createWorld()
{
  return MEMORY[0x1F416EAD8]();
}

uint64_t WebCore::ScriptController::jsWindowProxy(WebCore::ScriptController *this, WebCore::DOMWrapperWorld *a2)
{
  return MEMORY[0x1F416EAE0](this, a2);
}

uint64_t WebCore::ScriptController::executeAsynchronousUserAgentScriptInWorld()
{
  return MEMORY[0x1F416EB08]();
}

uint64_t WebCore::ServiceWorkerJob::validateServiceWorkerResponse()
{
  return MEMORY[0x1F416EB18]();
}

uint64_t WebCore::SpeechRecognizer::prepareForDestruction(WebCore::SpeechRecognizer *this)
{
  return MEMORY[0x1F416EB20](this);
}

uint64_t WebCore::SpeechRecognizer::abort()
{
  return MEMORY[0x1F416EB30]();
}

uint64_t WebCore::SpeechRecognizer::start()
{
  return MEMORY[0x1F416EB38]();
}

uint64_t WebCore::SpeechRecognizer::SpeechRecognizer()
{
  return MEMORY[0x1F416EB40]();
}

uint64_t WebCore::StorageUtilities::writeOriginToFile(WebCore::StorageUtilities *this, const WTF::String *a2, const WebCore::ClientOrigin *a3)
{
  return MEMORY[0x1F416EB48](this, a2, a3);
}

uint64_t WebCore::StorageUtilities::readOriginFromFile(WebCore::StorageUtilities *this, const WTF::String *a2)
{
  return MEMORY[0x1F416EB50](this, a2);
}

uint64_t WebCore::StorageUtilities::encodeSecurityOriginForFileName()
{
  return MEMORY[0x1F416EB58]();
}

uint64_t WebCore::ThreadGlobalData::initializeEventNames(WebCore::ThreadGlobalData *this)
{
  return MEMORY[0x1F416EB60](this);
}

uint64_t WebCore::TrackPrivateBase::removeClient(WebCore::TrackPrivateBase *this)
{
  return MEMORY[0x1F416EB68](this);
}

uint64_t WebCore::TrackPrivateBase::notifyClients()
{
  return MEMORY[0x1F416EB70]();
}

uint64_t WebCore::TrackPrivateBase::notifyMainThreadClient()
{
  return MEMORY[0x1F416EB78]();
}

uint64_t WebCore::TrackPrivateBase::addClient()
{
  return MEMORY[0x1F416EB80]();
}

void WebCore::UserGestureToken::~UserGestureToken(WebCore::UserGestureToken *this)
{
}

uint64_t WebCore::UserMediaRequest::deny()
{
  return MEMORY[0x1F416EB90]();
}

uint64_t WebCore::UserMediaRequest::allow()
{
  return MEMORY[0x1F416EB98]();
}

uint64_t WebCore::ValidationBubble::setAnchorRect(WebCore::ValidationBubble *this, const IntRect *a2, UIViewController *a3)
{
  return MEMORY[0x1F416EBA0](this, a2, a3);
}

uint64_t WebCore::ValidationBubble::show(WebCore::ValidationBubble *this)
{
  return MEMORY[0x1F416EBA8](this);
}

uint64_t WebCore::ValidationBubble::ValidationBubble()
{
  return MEMORY[0x1F416EBB0]();
}

void WebCore::ValidationBubble::~ValidationBubble(WebCore::ValidationBubble *this)
{
}

uint64_t WebCore::VisibleSelection::adjustPositionForEnd(WebCore::VisibleSelection *this, const WebCore::Position *a2, Node *a3)
{
  return MEMORY[0x1F416EBC0](this, a2, a3);
}

uint64_t WebCore::VisibleSelection::adjustPositionForStart(WebCore::VisibleSelection *this, const WebCore::Position *a2, Node *a3)
{
  return MEMORY[0x1F416EBC8](this, a2, a3);
}

uint64_t WebCore::VisibleSelection::selectionFromContentsOfNode(WebCore::VisibleSelection *this, Node *a2)
{
  return MEMORY[0x1F416EBD0](this, a2);
}

uint64_t WebCore::VisibleSelection::VisibleSelection()
{
  return MEMORY[0x1F416EBD8]();
}

{
  return MEMORY[0x1F416EBE0]();
}

uint64_t WebCore::VisibleSelection::VisibleSelection(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1F416EBF0](this);
}

uint64_t WebCore::VisitedLinkStore::invalidateStylesForLink(WebCore::VisitedLinkStore *this)
{
  return MEMORY[0x1F416EBF8](this);
}

uint64_t WebCore::VisitedLinkStore::invalidateStylesForAllLinks(WebCore::VisitedLinkStore *this)
{
  return MEMORY[0x1F416EC00](this);
}

uint64_t WebCore::VisitedLinkStore::VisitedLinkStore(WebCore::VisitedLinkStore *this)
{
  return MEMORY[0x1F416EC08](this);
}

uint64_t WebCore::attributedString()
{
  return MEMORY[0x1F416EC18]();
}

uint64_t WebCore::createTextStream(WebCore *this, const WebCore::RenderView *a2)
{
  return MEMORY[0x1F416EC20](this, a2);
}

uint64_t WebCore::enclosingIntRect(WebCore *this, const CGRect *a2)
{
  return MEMORY[0x1F416EC28](this, a2);
}

uint64_t WebCore::enclosingIntRect(WebCore *this, const WebCore::LayoutRect *a2)
{
  return MEMORY[0x1F416EC30](this, a2);
}

uint64_t WebCore::enclosingIntRect(WebCore *this, const FloatRect *a2)
{
  return MEMORY[0x1F416EC38](this, a2);
}

uint64_t WebCore::findIntersection(WebCore *this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3, const WebCore::FloatPoint *a4, const WebCore::FloatPoint *a5, WebCore::FloatPoint *a6)
{
  return MEMORY[0x1F416EC40](this, a2, a3, a4, a5, a6);
}

uint64_t WebCore::screenColorSpace(WebCore *this, WebCore::Widget *a2)
{
  return MEMORY[0x1F416EC50](this, a2);
}

uint64_t WebCore::startOfParagraph()
{
  return MEMORY[0x1F416EC58]();
}

uint64_t WebCore::systemHasBattery(WebCore *this)
{
  return MEMORY[0x1F416EC60](this);
}

uint64_t WebCore::toCAFillModeType()
{
  return MEMORY[0x1F416EC68]();
}

uint64_t WebCore::AcceleratedEffect::apply()
{
  return MEMORY[0x1F416EC70]();
}

uint64_t WebCore::AcceleratedEffect::create()
{
  return MEMORY[0x1F416EC78]();
}

uint64_t WebCore::AcceleratedEffect::Keyframe::Keyframe()
{
  return MEMORY[0x1F416EC80]();
}

uint64_t WebCore::BasicShapeEllipse::create()
{
  return MEMORY[0x1F416EC88]();
}

uint64_t WebCore::BasicShapePolygon::create()
{
  return MEMORY[0x1F416EC90]();
}

uint64_t WebCore::ContentExtensions::parseRuleList(WebCore::ContentExtensions *this, const WTF::String *a2)
{
  return MEMORY[0x1F416EC98](this, a2);
}

uint64_t WebCore::ContentExtensions::URLFilterParser::addPattern()
{
  return MEMORY[0x1F416ECA0]();
}

uint64_t WebCore::ContentExtensions::URLFilterParser::URLFilterParser()
{
  return MEMORY[0x1F416ECA8]();
}

void WebCore::ContentExtensions::URLFilterParser::~URLFilterParser(WebCore::ContentExtensions::URLFilterParser *this)
{
}

uint64_t WebCore::ContentExtensions::compileRuleList()
{
  return MEMORY[0x1F416ECB8]();
}

uint64_t WebCore::ContentExtensions::CombinedURLFilters::CombinedURLFilters(WebCore::ContentExtensions::CombinedURLFilters *this)
{
  return MEMORY[0x1F416ECC0](this);
}

void WebCore::ContentExtensions::CombinedURLFilters::~CombinedURLFilters(WebCore::ContentExtensions::CombinedURLFilters *this)
{
}

uint64_t WebCore::ContentExtensions::ContentExtensionRule::ContentExtensionRule()
{
  return MEMORY[0x1F416ECD0]();
}

uint64_t WebCore::ContentExtensions::applyResultsToRequest()
{
  return MEMORY[0x1F416ECD8]();
}

uint64_t WebCore::ContentExtensions::ContentExtensionsBackend::shouldBeMadeSecure(WebCore::ContentExtensions::ContentExtensionsBackend *this, const WTF::URL *a2)
{
  return MEMORY[0x1F416ECE8](this, a2);
}

uint64_t WebCore::ContentExtensions::ContentExtensionsBackend::addContentExtension()
{
  return MEMORY[0x1F416ECF0]();
}

uint64_t WebCore::ContentExtensions::ContentExtensionsBackend::removeContentExtension(WebCore::ContentExtensions::ContentExtensionsBackend *this, const WTF::String *a2)
{
  return MEMORY[0x1F416ECF8](this, a2);
}

uint64_t WebCore::ContentExtensions::ContentExtensionsBackend::removeAllContentExtensions(WebCore::ContentExtensions::ContentExtensionsBackend *this)
{
  return MEMORY[0x1F416ED00](this);
}

uint64_t WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForPingLoad(WebCore::ContentExtensions::ContentExtensionsBackend *this, const WTF::URL *a2, const WTF::URL *a3, const WTF::URL *a4)
{
  return MEMORY[0x1F416ED08](this, a2, a3, a4);
}

uint64_t WebCore::CredentialStorage::clearCredentials(WebCore::CredentialStorage *this)
{
  return MEMORY[0x1F416ED10](this);
}

uint64_t WebCore::CredentialStorage::removeCredentialsWithOrigin(WebCore::CredentialStorage *this, const WebCore::SecurityOriginData *a2)
{
  return MEMORY[0x1F416ED20](this, a2);
}

uint64_t WebCore::CredentialStorage::get(WebCore::CredentialStorage *this, const WTF::String *a2, const WTF::URL *a3)
{
  return MEMORY[0x1F416ED28](this, a2, a3);
}

uint64_t WebCore::CredentialStorage::get(WebCore::CredentialStorage *this, const WTF::String *a2, const WebCore::ProtectionSpace *a3)
{
  return MEMORY[0x1F416ED30](this, a2, a3);
}

uint64_t WebCore::CredentialStorage::set(WebCore::CredentialStorage *this, const WTF::String *a2, const WebCore::Credential *a3, const WTF::URL *a4)
{
  return MEMORY[0x1F416ED38](this, a2, a3, a4);
}

uint64_t WebCore::CredentialStorage::set(WebCore::CredentialStorage *this, const WTF::String *a2, const WebCore::Credential *a3, const WebCore::ProtectionSpace *a4, const WTF::URL *a5)
{
  return MEMORY[0x1F416ED40](this, a2, a3, a4, a5);
}

uint64_t WebCore::CredentialStorage::remove(WebCore::CredentialStorage *this, const WTF::String *a2, const WebCore::ProtectionSpace *a3)
{
  return MEMORY[0x1F416ED48](this, a2, a3);
}

uint64_t WebCore::FEDiffuseLighting::create()
{
  return MEMORY[0x1F416ED78]();
}

uint64_t WebCore::FEDisplacementMap::create()
{
  return MEMORY[0x1F416ED80]();
}

uint64_t WebCore::FullscreenManager::cancelFullscreen(WebCore::FullscreenManager *this)
{
  return MEMORY[0x1F416ED88](this);
}

uint64_t WebCore::FullscreenManager::didExitFullscreen(WebCore::FullscreenManager *this)
{
  return MEMORY[0x1F416ED90](this);
}

uint64_t WebCore::FullscreenManager::didEnterFullscreen(WebCore::FullscreenManager *this)
{
  return MEMORY[0x1F416ED98](this);
}

uint64_t WebCore::FullscreenManager::willExitFullscreen(WebCore::FullscreenManager *this)
{
  return MEMORY[0x1F416EDA0](this);
}

uint64_t WebCore::FullscreenManager::willEnterFullscreen()
{
  return MEMORY[0x1F416EDA8]();
}

uint64_t WebCore::FullscreenManager::requestFullscreenForElement()
{
  return MEMORY[0x1F416EDB8]();
}

uint64_t WebCore::GraphicsContextCG::clip(WebCore::GraphicsContextCG *this, const FloatRect *a2)
{
  return MEMORY[0x1F416EDC0](this, a2);
}

uint64_t WebCore::GraphicsContextCG::scale(WebCore::GraphicsContextCG *this, const WebCore::FloatSize *a2)
{
  return MEMORY[0x1F416EDC8](this, a2);
}

uint64_t WebCore::GraphicsContextCG::translate(WebCore::GraphicsContextCG *this, float a2, float a3)
{
  return MEMORY[0x1F416EDD0](this, a2, a3);
}

uint64_t WebCore::GraphicsContextCG::GraphicsContextCG()
{
  return MEMORY[0x1F416EDD8]();
}

void WebCore::GraphicsContextCG::~GraphicsContextCG(WebCore::GraphicsContextCG *this)
{
}

uint64_t WebCore::GraphicsContextGL::paintToCanvas()
{
  return MEMORY[0x1F416EDE8]();
}

uint64_t WebCore::GraphicsContextGL::computeBytesPerGroup(WebCore::GraphicsContextGL *this)
{
  return MEMORY[0x1F416EDF8](this);
}

uint64_t WebCore::GraphicsContextGL::Client::Client(WebCore::GraphicsContextGL::Client *this)
{
  return MEMORY[0x1F416EE00](this);
}

uint64_t WebCore::GraphicsContextGL::GraphicsContextGL()
{
  return MEMORY[0x1F416EE10]();
}

void WebCore::GraphicsContextGL::~GraphicsContextGL(WebCore::GraphicsContextGL *this)
{
}

uint64_t WebCore::HTMLSelectElement::optionSelectedByUser(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1F416EE88](this);
}

uint64_t WebCore::HighlightRegistry::setHighlightVisibility()
{
  return MEMORY[0x1F416EEC8]();
}

uint64_t WebCore::HighlightRegistry::addAnnotationHighlightWithRange()
{
  return MEMORY[0x1F416EED0]();
}

uint64_t WebCore::HistoryController::setCurrentItem()
{
  return MEMORY[0x1F416EED8]();
}

uint64_t WebCore::HistoryController::saveDocumentAndScrollState(WebCore::HistoryController *this)
{
  return MEMORY[0x1F416EEE8](this);
}

uint64_t WebCore::HistoryController::restoreScrollPositionAndViewState(WebCore::HistoryController *this)
{
  return MEMORY[0x1F416EEF0](this);
}

uint64_t WebCore::HistoryController::saveScrollPositionAndViewStateToItem(WebCore::HistoryController *this, WebCore::HistoryItem *a2)
{
  return MEMORY[0x1F416EEF8](this, a2);
}

uint64_t WebCore::KeyframeValueList::insert()
{
  return MEMORY[0x1F416EF08]();
}

uint64_t WebCore::LibWebRTCProvider::setRTCLogging()
{
  return MEMORY[0x1F416EF10]();
}

uint64_t WebCore::LibWebRTCProvider::setLoggingLevel()
{
  return MEMORY[0x1F416EF18]();
}

uint64_t WebCore::LibWebRTCProvider::hasWebRTCThreads(WebCore::LibWebRTCProvider *this)
{
  return MEMORY[0x1F416EF20](this);
}

uint64_t WebCore::LibWebRTCProvider::createPeerConnection()
{
  return MEMORY[0x1F416EF28]();
}

uint64_t WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread()
{
  return MEMORY[0x1F416EF30]();
}

uint64_t WebCore::LibWebRTCProvider::enableEnumeratingAllNetworkInterfaces(WebCore::LibWebRTCProvider *this)
{
  return MEMORY[0x1F416EF38](this);
}

uint64_t WebCore::LibWebRTCProvider::enableEnumeratingVisibleNetworkInterfaces(WebCore::LibWebRTCProvider *this)
{
  return MEMORY[0x1F416EF40](this);
}

uint64_t WebCore::LibWebRTCProvider::LibWebRTCProvider(WebCore::LibWebRTCProvider *this)
{
  return MEMORY[0x1F416EF48](this);
}

void WebCore::LibWebRTCProvider::~LibWebRTCProvider(WebCore::LibWebRTCProvider *this)
{
}

uint64_t WebCore::LinkIconCollector::iconsOfTypes()
{
  return MEMORY[0x1F416EF58]();
}

uint64_t WebCore::NowPlayingManager::removeClient()
{
  return MEMORY[0x1F416EF70]();
}

uint64_t WebCore::NowPlayingManager::setNowPlayingInfo()
{
  return MEMORY[0x1F416EF78]();
}

uint64_t WebCore::NowPlayingManager::setSupportsSeeking(WebCore::NowPlayingManager *this)
{
  return MEMORY[0x1F416EF80](this);
}

uint64_t WebCore::NowPlayingManager::setSupportedRemoteCommands()
{
  return MEMORY[0x1F416EF88]();
}

uint64_t WebCore::NowPlayingManager::addClient()
{
  return MEMORY[0x1F416EF90]();
}

uint64_t WebCore::NowPlayingManager::NowPlayingManager(WebCore::NowPlayingManager *this)
{
  return MEMORY[0x1F416EF98](this);
}

{
  return MEMORY[0x1F416EFA0](this);
}

void WebCore::NowPlayingManager::~NowPlayingManager(WebCore::NowPlayingManager *this)
{
}

uint64_t WebCore::PageConfiguration::PageConfiguration()
{
  return MEMORY[0x1F416EFB0]();
}

void WebCore::PageConfiguration::~PageConfiguration(WebCore::PageConfiguration *this)
{
}

uint64_t WebCore::PlatformCAFilters::setFiltersOnLayer()
{
  return MEMORY[0x1F416EFD0]();
}

uint64_t WebCore::PlatformCAFilters::filterValueForOperation(WebCore::PlatformCAFilters *this, const WebCore::FilterOperation *a2)
{
  return MEMORY[0x1F416EFD8](this, a2);
}

uint64_t WebCore::PlatformCAFilters::setBlendingFiltersOnLayer()
{
  return MEMORY[0x1F416EFE0]();
}

uint64_t WebCore::PublicSuffixStore::addPublicSuffix()
{
  return MEMORY[0x1F416EFE8]();
}

uint64_t WebCore::PublicSuffixStore::enablePublicSuffixCache(WebCore::PublicSuffixStore *this)
{
  return MEMORY[0x1F416EFF0](this);
}

uint64_t WebCore::PublicSuffixStore::singleton(WebCore::PublicSuffixStore *this)
{
  return MEMORY[0x1F416EFF8](this);
}

uint64_t WebCore::ResourceErrorBase::setType()
{
  return MEMORY[0x1F416F000]();
}

uint64_t WebCore::SQLiteTransaction::begin(WebCore::SQLiteTransaction *this)
{
  return MEMORY[0x1F416F008](this);
}

uint64_t WebCore::SQLiteTransaction::commit(WebCore::SQLiteTransaction *this)
{
  return MEMORY[0x1F416F010](this);
}

uint64_t WebCore::SQLiteTransaction::rollback(WebCore::SQLiteTransaction *this)
{
  return MEMORY[0x1F416F018](this);
}

uint64_t WebCore::SQLiteTransaction::SQLiteTransaction(WebCore::SQLiteTransaction *this, WebCore::SQLiteDatabase *a2)
{
  return MEMORY[0x1F416F020](this, a2);
}

void WebCore::SQLiteTransaction::~SQLiteTransaction(WebCore::SQLiteTransaction *this)
{
}

uint64_t WebCore::SelectionGeometry::setQuad(WebCore::SelectionGeometry *this, const FloatQuad *a2)
{
  return MEMORY[0x1F416F030](this, a2);
}

uint64_t WebCore::SelectionGeometry::setRect(WebCore::SelectionGeometry *this, const IntRect *a2)
{
  return MEMORY[0x1F416F038](this, a2);
}

uint64_t WebCore::SelectionGeometry::SelectionGeometry()
{
  return MEMORY[0x1F416F040]();
}

uint64_t WebCore::ShareableResource::createHandle(WebCore::ShareableResource *this)
{
  return MEMORY[0x1F416F048](this);
}

uint64_t WebCore::ShareableResource::create()
{
  return MEMORY[0x1F416F050]();
}

void WebCore::ShareableResource::~ShareableResource(WebCore::ShareableResource *this)
{
}

uint64_t WebCore::SubresourceLoader::create()
{
  return MEMORY[0x1F416F060]();
}

uint64_t WebCore::WorkerGlobalScope::fileSystemStorageConnection(WebCore::WorkerGlobalScope *this)
{
  return MEMORY[0x1F416F078](this);
}

uint64_t WebCore::cachedSystemHasAC(WebCore *this)
{
  return MEMORY[0x1F416F080](this);
}

uint64_t WebCore::certificatesMatch(WebCore *this, __SecTrust *a2, __SecTrust *a3)
{
  return MEMORY[0x1F416F088](this, a2, a3);
}

uint64_t WebCore::computeCurrentAge()
{
  return MEMORY[0x1F416F090]();
}

uint64_t WebCore::containsPlainText()
{
  return MEMORY[0x1F416F098]();
}

uint64_t WebCore::euclidianDistance(WebCore *this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3)
{
  return MEMORY[0x1F416F0A0](this, a2, a3);
}

uint64_t WebCore::makeBoundaryPoint()
{
  return MEMORY[0x1F416F0B0]();
}

uint64_t WebCore::makeBoundaryPoint(WebCore *this, const WebCore::Position *a2)
{
  return MEMORY[0x1F416F0B8](this, a2);
}

uint64_t WebCore::sRGBColorSpaceRef(WebCore *this)
{
  return MEMORY[0x1F416F0C0](this);
}

uint64_t WebCore::screenScaleFactor(WebCore *this, UIScreen *a2)
{
  return MEMORY[0x1F416F0C8](this, a2);
}

uint64_t WebCore::snapshotFrameRect()
{
  return MEMORY[0x1F416F0D8]();
}

uint64_t WebCore::snapshotSelection()
{
  return MEMORY[0x1F416F0E0]();
}

uint64_t WebCore::ApplePayButtonPart::create()
{
  return MEMORY[0x1F416F0E8]();
}

uint64_t WebCore::DOMWindowExtension::DOMWindowExtension(WebCore::DOMWindowExtension *this, WebCore::LocalDOMWindow *a2, WebCore::DOMWrapperWorld *a3)
{
  return MEMORY[0x1F416F0F8](this, a2, a3);
}

void WebCore::DOMWindowExtension::~DOMWindowExtension(WebCore::DOMWindowExtension *this)
{
}

uint64_t WebCore::DistantLightSource::create(WebCore::DistantLightSource *this, float a2, float a3)
{
  return MEMORY[0x1F416F108](this, a2, a3);
}

uint64_t WebCore::EventLoopTaskGroup::queueTask()
{
  return MEMORY[0x1F416F118]();
}

uint64_t WebCore::EventRegionContext::unite()
{
  return MEMORY[0x1F416F120]();
}

uint64_t WebCore::EventRegionContext::EventRegionContext(WebCore::EventRegionContext *this, WebCore::EventRegion *a2)
{
  return MEMORY[0x1F416F128](this, a2);
}

void WebCore::EventRegionContext::~EventRegionContext(WebCore::EventRegionContext *this)
{
}

uint64_t WebCore::FESpecularLighting::create()
{
  return MEMORY[0x1F416F138]();
}

uint64_t WebCore::IDBObjectStoreInfo::IDBObjectStoreInfo()
{
  return MEMORY[0x1F416F168]();
}

uint64_t WebCore::IDBOpenRequestData::IDBOpenRequestData()
{
  return MEMORY[0x1F416F170]();
}

uint64_t WebCore::ImageAnalysisQueue::enqueueAllImagesIfNeeded(WebCore::ImageAnalysisQueue *this, Document *a2, const WTF::String *a3, const WTF::String *a4)
{
  return MEMORY[0x1F416F178](this, a2, a3, a4);
}

uint64_t WebCore::ImageBufferBackend::calculateMemoryCost(WebCore::ImageBufferBackend *this, const IntSize *a2)
{
  return MEMORY[0x1F416F198](this, a2);
}

uint64_t WebCore::ImageBufferBackend::calculateBaseTransform()
{
  return MEMORY[0x1F416F1A0]();
}

uint64_t WebCore::ImageBufferBackend::ImageBufferBackend()
{
  return MEMORY[0x1F416F1A8]();
}

void WebCore::ImageBufferBackend::~ImageBufferBackend(WebCore::ImageBufferBackend *this)
{
}

uint64_t WebCore::InspectorPageAgent::frameId()
{
  return MEMORY[0x1F416F1B8]();
}

uint64_t WebCore::MediaSessionHelper::removeClient()
{
  return MEMORY[0x1F416F1C0]();
}

uint64_t WebCore::MediaSessionHelper::sharedHelper(WebCore::MediaSessionHelper *this)
{
  return MEMORY[0x1F416F1C8](this);
}

uint64_t WebCore::MediaSessionHelper::setSharedHelper()
{
  return MEMORY[0x1F416F1D0]();
}

uint64_t WebCore::MediaSessionHelper::resetSharedHelper(WebCore::MediaSessionHelper *this)
{
  return MEMORY[0x1F416F1D8](this);
}

uint64_t WebCore::MediaSessionHelper::activeVideoRouteDidChange()
{
  return MEMORY[0x1F416F1E8]();
}

uint64_t WebCore::MediaSessionHelper::addClient()
{
  return MEMORY[0x1F416F238]();
}

uint64_t WebCore::MediaSourcePrivate::bufferedChanged()
{
  return MEMORY[0x1F416F240]();
}

uint64_t WebCore::MediaSourcePrivate::durationChanged(WebCore::MediaSourcePrivate *this, const WTF::MediaTime *a2)
{
  return MEMORY[0x1F416F248](this, a2);
}

uint64_t WebCore::MediaSourcePrivate::MediaSourcePrivate()
{
  return MEMORY[0x1F416F250]();
}

void WebCore::MediaSourcePrivate::~MediaSourcePrivate(WebCore::MediaSourcePrivate *this)
{
}

void WebCore::MediaStreamPrivate::~MediaStreamPrivate(WebCore::MediaStreamPrivate *this)
{
}

uint64_t WebCore::MessagePortChannel::processForPort()
{
  return MEMORY[0x1F416F268]();
}

void WebCore::MessagePortChannel::~MessagePortChannel(WebCore::MessagePortChannel *this)
{
}

uint64_t WebCore::NativeImageBackend::NativeImageBackend(WebCore::NativeImageBackend *this)
{
  return MEMORY[0x1F416F278](this);
}

uint64_t WebCore::NetworkLoadMetrics::emptyMetrics(WebCore::NetworkLoadMetrics *this)
{
  return MEMORY[0x1F416F288](this);
}

uint64_t WebCore::NetworkLoadMetrics::NetworkLoadMetrics()
{
  return MEMORY[0x1F416F290]();
}

uint64_t WebCore::NetworkLoadMetrics::NetworkLoadMetrics(WebCore::NetworkLoadMetrics *this)
{
  return MEMORY[0x1F416F298](this);
}

uint64_t WebCore::ParsedContentRange::ParsedContentRange(WebCore::ParsedContentRange *this)
{
  return MEMORY[0x1F416F2A0](this);
}

uint64_t WebCore::PaymentCoordinator::validateMerchant()
{
  return MEMORY[0x1F416F2A8]();
}

uint64_t WebCore::PaymentCoordinator::didCancelPaymentSession()
{
  return MEMORY[0x1F416F2C8]();
}

uint64_t WebCore::PerformanceLogging::memoryUsageStatistics()
{
  return MEMORY[0x1F416F2E0]();
}

uint64_t WebCore::PerformanceLogging::javaScriptObjectCounts(WebCore::PerformanceLogging *this)
{
  return MEMORY[0x1F416F2E8](this);
}

uint64_t WebCore::PlatformPasteboard::setBufferForType(WebCore::PlatformPasteboard *this, WebCore::SharedBuffer *a2, const WTF::String *a3)
{
  return MEMORY[0x1F416F2F0](this, a2, a3);
}

uint64_t WebCore::PlatformPasteboard::setStringForType(WebCore::PlatformPasteboard *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F416F2F8](this, a2, a3);
}

uint64_t WebCore::PlatformPasteboard::performAsDataOwner()
{
  return MEMORY[0x1F416F300]();
}

uint64_t WebCore::PlatformPasteboard::allPasteboardItemInfo(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1F416F308](this);
}

uint64_t WebCore::PlatformPasteboard::informationForItemAtIndex(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1F416F310](this);
}

uint64_t WebCore::PlatformPasteboard::urlStringSuitableForLoading(WebCore::PlatformPasteboard *this, WTF::String *a2)
{
  return MEMORY[0x1F416F318](this, a2);
}

uint64_t WebCore::PlatformPasteboard::updateSupportedTypeIdentifiers()
{
  return MEMORY[0x1F416F320]();
}

uint64_t WebCore::PlatformPasteboard::containsURLStringSuitableForLoading(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1F416F328](this);
}

uint64_t WebCore::PlatformPasteboard::url(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1F416F330](this);
}

uint64_t WebCore::PlatformPasteboard::color(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1F416F338](this);
}

uint64_t WebCore::PlatformPasteboard::write(WebCore::PlatformPasteboard *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F416F340](this, a2, a3);
}

uint64_t WebCore::PlatformPasteboard::write()
{
  return MEMORY[0x1F416F348]();
}

{
  return MEMORY[0x1F416F350]();
}

{
  return MEMORY[0x1F416F358]();
}

{
  return MEMORY[0x1F416F360]();
}

uint64_t WebCore::PlatformPasteboard::setURL()
{
  return MEMORY[0x1F416F368]();
}

uint64_t WebCore::PlatformPasteboard::addTypes()
{
  return MEMORY[0x1F416F370]();
}

uint64_t WebCore::PlatformPasteboard::setColor(WebCore::PlatformPasteboard *this, const Color *a2)
{
  return MEMORY[0x1F416F378](this, a2);
}

uint64_t WebCore::PlatformPasteboard::setTypes()
{
  return MEMORY[0x1F416F380]();
}

uint64_t WebCore::PlatformPasteboard::PlatformPasteboard(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return MEMORY[0x1F416F388](this, a2);
}

uint64_t WebCore::PlatformTimeRanges::PlatformTimeRanges()
{
  return MEMORY[0x1F416F398]();
}

uint64_t WebCore::PlatformTimeRanges::PlatformTimeRanges(WebCore::PlatformTimeRanges *this)
{
  return MEMORY[0x1F416F3A0](this);
}

void WebCore::PluginInfoProvider::~PluginInfoProvider(WebCore::PluginInfoProvider *this)
{
}

uint64_t WebCore::SWClientConnection::clearPendingJobs(WebCore::SWClientConnection *this)
{
  return MEMORY[0x1F416F3B0](this);
}

uint64_t WebCore::SWClientConnection::updateWorkerState()
{
  return MEMORY[0x1F416F3B8]();
}

uint64_t WebCore::SWClientConnection::jobRejectedInServer()
{
  return MEMORY[0x1F416F3C0]();
}

uint64_t WebCore::SWClientConnection::fireUpdateFoundEvent()
{
  return MEMORY[0x1F416F3C8]();
}

uint64_t WebCore::SWClientConnection::updateRegistrationState()
{
  return MEMORY[0x1F416F3D0]();
}

uint64_t WebCore::SWClientConnection::startScriptFetchForServer()
{
  return MEMORY[0x1F416F3D8]();
}

uint64_t WebCore::SWClientConnection::registerServiceWorkerClients(WebCore::SWClientConnection *this)
{
  return MEMORY[0x1F416F3E0](this);
}

uint64_t WebCore::SWClientConnection::setRegistrationLastUpdateTime()
{
  return MEMORY[0x1F416F3E8]();
}

uint64_t WebCore::SWClientConnection::setRegistrationUpdateViaCache()
{
  return MEMORY[0x1F416F3F0]();
}

uint64_t WebCore::SWClientConnection::notifyClientsOfControllerChange()
{
  return MEMORY[0x1F416F3F8]();
}

uint64_t WebCore::SWClientConnection::registrationJobResolvedInServer()
{
  return MEMORY[0x1F416F400]();
}

uint64_t WebCore::SWClientConnection::postMessageToServiceWorkerClient()
{
  return MEMORY[0x1F416F408]();
}

uint64_t WebCore::SWClientConnection::updateBackgroundFetchRegistration()
{
  return MEMORY[0x1F416F410]();
}

uint64_t WebCore::SWClientConnection::SWClientConnection(WebCore::SWClientConnection *this)
{
  return MEMORY[0x1F416F418](this);
}

uint64_t WebCore::ScrollingStateNode::setLayer()
{
  return MEMORY[0x1F416F428]();
}

uint64_t WebCore::ScrollingStateTree::attachDeserializedNodes(WebCore::ScrollingStateTree *this)
{
  return MEMORY[0x1F416F430](this);
}

uint64_t WebCore::ScrollingStateTree::createAfterReconstruction()
{
  return MEMORY[0x1F416F438]();
}

uint64_t WebCore::ScrollingStateTree::commit()
{
  return MEMORY[0x1F416F440]();
}

uint64_t WebCore::ScrollingStateTree::ScrollingStateTree()
{
  return MEMORY[0x1F416F448]();
}

uint64_t WebCore::ScrollingStateTree::ScrollingStateTree(WebCore::ScrollingStateTree *this, WebCore::AsyncScrollingCoordinator *a2)
{
  return MEMORY[0x1F416F450](this, a2);
}

void WebCore::ScrollingStateTree::~ScrollingStateTree(WebCore::ScrollingStateTree *this)
{
}

uint64_t WebCore::SecurityOriginData::fromDatabaseIdentifier()
{
  return MEMORY[0x1F416F460]();
}

uint64_t WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(WebCore::SecurityOriginData *this, const WTF::URL *a2)
{
  return MEMORY[0x1F416F468](this, a2);
}

uint64_t WebCore::SecurityOriginData::fromURL(WebCore::SecurityOriginData *this, const WTF::URL *a2)
{
  return MEMORY[0x1F416F470](this, a2);
}

uint64_t WebCore::SecurityOriginData::fromFrame(WebCore::SecurityOriginData *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1F416F478](this, a2);
}

uint64_t WebCore::SharedMemoryHandle::SharedMemoryHandle()
{
  return MEMORY[0x1F416F480]();
}

void WebCore::StyleSheetContents::~StyleSheetContents(WebCore::StyleSheetContents *this)
{
}

uint64_t WebCore::SystemSoundManager::setSystemSoundDelegate()
{
  return MEMORY[0x1F416F490]();
}

uint64_t WebCore::SystemSoundManager::singleton(WebCore::SystemSoundManager *this)
{
  return MEMORY[0x1F416F498](this);
}

uint64_t WebCore::WebAudioBufferList::setSampleCount(WebCore::WebAudioBufferList *this)
{
  return MEMORY[0x1F416F4A0](this);
}

uint64_t WebCore::WebAudioBufferList::zeroFlatBuffer(WebCore::WebAudioBufferList *this)
{
  return MEMORY[0x1F416F4A8](this);
}

uint64_t WebCore::WebAudioBufferList::isSupportedDescription()
{
  return MEMORY[0x1F416F4B0]();
}

uint64_t WebCore::WebAudioBufferList::WebAudioBufferList()
{
  return MEMORY[0x1F416F4B8]();
}

{
  return MEMORY[0x1F416F4C0]();
}

void WebCore::WebAudioBufferList::~WebAudioBufferList(WebCore::WebAudioBufferList *this)
{
}

uint64_t WebCore::WebRTCVideoDecoder::create()
{
  return MEMORY[0x1F416F4D0]();
}

uint64_t WebCore::WorkerScriptLoader::validateWorkerResponse()
{
  return MEMORY[0x1F416F500]();
}

uint64_t WebCore::WorkerScriptLoader::ServiceWorkerDataManager::setData()
{
  return MEMORY[0x1F416F508]();
}

void WebCore::WorkerScriptLoader::ServiceWorkerDataManager::~ServiceWorkerDataManager(WebCore::WorkerScriptLoader::ServiceWorkerDataManager *this)
{
}

uint64_t WebCore::WorkerScriptLoader::serviceWorkerDataManagerFromIdentifier()
{
  return MEMORY[0x1F416F518]();
}

uint64_t WebCore::buildUserEntityMap()
{
  return MEMORY[0x1F416F520]();
}

uint64_t WebCore::makeNSArrayElement(WebCore *this, const IntRect *a2)
{
  return MEMORY[0x1F416F538](this, a2);
}

uint64_t WebCore::overrideScreenSize(WebCore *this)
{
  return MEMORY[0x1F416F548](this);
}

uint64_t WebCore::platformStrategies(WebCore *this)
{
  return MEMORY[0x1F416F550](this);
}

uint64_t WebCore::provideUserMediaTo()
{
  return MEMORY[0x1F416F558]();
}

uint64_t WebCore::setViewportFeature()
{
  return MEMORY[0x1F416F560]();
}

uint64_t WebCore::AccessibilityObject::computedLabel(WebCore::AccessibilityObject *this)
{
  return MEMORY[0x1F416F568](this);
}

uint64_t WebCore::AccessibilityObject::isARIAControl()
{
  return MEMORY[0x1F416F570]();
}

uint64_t WebCore::AccessibilityObject::ariaRoleToWebCoreRole(WebCore::AccessibilityObject *this, const WTF::String *a2)
{
  return MEMORY[0x1F416F578](this, a2);
}

uint64_t WebCore::AppHighlightStorage::storeAppHighlight()
{
  return MEMORY[0x1F416F580]();
}

uint64_t WebCore::AppHighlightStorage::restoreAndScrollToAppHighlight()
{
  return MEMORY[0x1F416F588]();
}

uint64_t WebCore::CoreAudioSharedUnit::unit(WebCore::CoreAudioSharedUnit *this)
{
  return MEMORY[0x1F416F590](this);
}

uint64_t WebCore::DOMTimerHoldingTank::removeAll(WebCore::DOMTimerHoldingTank *this)
{
  return MEMORY[0x1F416F598](this);
}

void WebCore::DetachedImageBitmap::~DetachedImageBitmap(WebCore::DetachedImageBitmap *this)
{
}

uint64_t WebCore::FEComponentTransfer::create()
{
  return MEMORY[0x1F416F5B0]();
}

uint64_t WebCore::ImageDecoderAVFObjC::clearFrameBufferCache(WebCore::ImageDecoderAVFObjC *this)
{
  return MEMORY[0x1F416F5F8](this);
}

uint64_t WebCore::ImageDecoderAVFObjC::setExpectedContentSize(WebCore::ImageDecoderAVFObjC *this)
{
  return MEMORY[0x1F416F600](this);
}

uint64_t WebCore::ImageDecoderAVFObjC::createFrameImageAtIndex()
{
  return MEMORY[0x1F416F608]();
}

uint64_t WebCore::ImageDecoderAVFObjC::setEncodedDataStatusChangeCallback()
{
  return MEMORY[0x1F416F610]();
}

uint64_t WebCore::ImageDecoderAVFObjC::create()
{
  return MEMORY[0x1F416F618]();
}

uint64_t WebCore::ImageDecoderAVFObjC::setData()
{
  return MEMORY[0x1F416F620]();
}

uint64_t WebCore::InspectorController::connectFrontend()
{
  return MEMORY[0x1F416F638]();
}

uint64_t WebCore::InspectorController::ensurePageAgent(WebCore::InspectorController *this)
{
  return MEMORY[0x1F416F640](this);
}

uint64_t WebCore::InspectorController::disconnectFrontend()
{
  return MEMORY[0x1F416F648]();
}

uint64_t WebCore::InspectorController::disconnectAllFrontends(WebCore::InspectorController *this)
{
  return MEMORY[0x1F416F650](this);
}

uint64_t WebCore::InspectorController::setInspectorFrontendClient()
{
  return MEMORY[0x1F416F660]();
}

uint64_t WebCore::InspectorController::show(WebCore::InspectorController *this)
{
  return MEMORY[0x1F416F670](this);
}

uint64_t WebCore::LayerRepresentation::retainPlatformLayer(WebCore::LayerRepresentation *this, void *a2)
{
  return MEMORY[0x1F416F680](this, a2);
}

uint64_t WebCore::LayerRepresentation::releasePlatformLayer(WebCore::LayerRepresentation *this, void *a2)
{
  return MEMORY[0x1F416F688](this, a2);
}

uint64_t WebCore::LayerRepresentation::makePlatformLayerTyped(WebCore::LayerRepresentation *this, void *a2)
{
  return MEMORY[0x1F416F690](this, a2);
}

uint64_t WebCore::LayerRepresentation::makePlatformLayerTypeless(WebCore::LayerRepresentation *this, CALayer *a2)
{
  return MEMORY[0x1F416F698](this, a2);
}

void WebCore::ModelPlayerProvider::~ModelPlayerProvider(WebCore::ModelPlayerProvider *this)
{
}

uint64_t WebCore::NotificationPayload::fromDictionary(WebCore::NotificationPayload *this, NSDictionary *a2)
{
  return MEMORY[0x1F416F6A8](this, a2);
}

uint64_t WebCore::NotificationPayload::parseJSON(WebCore::NotificationPayload *this, const WTF::String *a2)
{
  return MEMORY[0x1F416F6B0](this, a2);
}

uint64_t WebCore::PaymentSessionError::PaymentSessionError()
{
  return MEMORY[0x1F416F6B8]();
}

uint64_t WebCore::PlatformCAAnimation::isValidKeyPath()
{
  return MEMORY[0x1F416F6C0]();
}

uint64_t WebCore::PowerSourceNotifier::PowerSourceNotifier()
{
  return MEMORY[0x1F416F6C8]();
}

void WebCore::PowerSourceNotifier::~PowerSourceNotifier(WebCore::PowerSourceNotifier *this)
{
}

uint64_t WebCore::ProcessCapabilities::setAVIFDecodingEnabled(WebCore::ProcessCapabilities *this)
{
  return MEMORY[0x1F416F6D8](this);
}

uint64_t WebCore::ProcessCapabilities::setHEICDecodingEnabled(WebCore::ProcessCapabilities *this)
{
  return MEMORY[0x1F416F6E0](this);
}

uint64_t WebCore::ProcessCapabilities::setCanUseAcceleratedBuffers(WebCore::ProcessCapabilities *this)
{
  return MEMORY[0x1F416F6E8](this);
}

uint64_t WebCore::ProcessCapabilities::setHardwareAcceleratedDecodingDisabled(WebCore::ProcessCapabilities *this)
{
  return MEMORY[0x1F416F6F0](this);
}

uint64_t WebCore::ProtectionSpaceBase::compare(WebCore::ProtectionSpaceBase *this, const WebCore::ProtectionSpace *a2, const WebCore::ProtectionSpace *a3)
{
  return MEMORY[0x1F416F6F8](this, a2, a3);
}

uint64_t WebCore::RealtimeMediaSource::addObserver(WebCore::RealtimeMediaSource *this, WebCore::RealtimeMediaSourceObserver *a2)
{
  return MEMORY[0x1F416F700](this, a2);
}

uint64_t WebCore::RealtimeMediaSource::removeObserver(WebCore::RealtimeMediaSource *this, WebCore::RealtimeMediaSourceObserver *a2)
{
  return MEMORY[0x1F416F708](this, a2);
}

uint64_t WebCore::RealtimeMediaSource::forEachObserver()
{
  return MEMORY[0x1F416F710]();
}

uint64_t WebCore::RealtimeMediaSource::setPersistentId(WebCore::RealtimeMediaSource *this, const WTF::String *a2)
{
  return MEMORY[0x1F416F718](this, a2);
}

uint64_t WebCore::RealtimeMediaSource::setIntrinsicSize(WebCore::RealtimeMediaSource *this, const IntSize *a2)
{
  return MEMORY[0x1F416F720](this, a2);
}

uint64_t WebCore::RealtimeMediaSource::notifyMutedChange(WebCore::RealtimeMediaSource *this)
{
  return MEMORY[0x1F416F728](this);
}

uint64_t WebCore::RealtimeMediaSource::videoFrameAvailable()
{
  return MEMORY[0x1F416F730]();
}

uint64_t WebCore::RealtimeMediaSource::addVideoFrameObserver()
{
  return MEMORY[0x1F416F738]();
}

{
  return MEMORY[0x1F416F740]();
}

uint64_t WebCore::RealtimeMediaSource::audioSamplesAvailable()
{
  return MEMORY[0x1F416F748]();
}

uint64_t WebCore::RealtimeMediaSource::addAudioSampleObserver()
{
  return MEMORY[0x1F416F750]();
}

uint64_t WebCore::RealtimeMediaSource::removeVideoFrameObserver()
{
  return MEMORY[0x1F416F758]();
}

uint64_t WebCore::RealtimeMediaSource::removeAudioSampleObserver()
{
  return MEMORY[0x1F416F760]();
}

uint64_t WebCore::RealtimeMediaSource::extractVideoPresetConstraints()
{
  return MEMORY[0x1F416F768]();
}

uint64_t WebCore::RealtimeMediaSource::end(WebCore::RealtimeMediaSource *this, WebCore::RealtimeMediaSourceObserver *a2)
{
  return MEMORY[0x1F416F778](this, a2);
}

uint64_t WebCore::RealtimeMediaSource::stop(WebCore::RealtimeMediaSource *this)
{
  return MEMORY[0x1F416F780](this);
}

uint64_t WebCore::RealtimeMediaSource::start(WebCore::RealtimeMediaSource *this)
{
  return MEMORY[0x1F416F788](this);
}

uint64_t WebCore::RealtimeMediaSource::RealtimeMediaSource()
{
  return MEMORY[0x1F416F790]();
}

uint64_t WebCore::RequestedScrollData::computeDestinationPosition()
{
  return MEMORY[0x1F416F7A0]();
}

uint64_t WebCore::ResourceRequestBase::setHTTPBody()
{
  return MEMORY[0x1F416F7A8]();
}

uint64_t WebCore::ResourceRequestBase::setPriority()
{
  return MEMORY[0x1F416F7B0]();
}

uint64_t WebCore::ResourceRequestBase::clearPurpose(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F416F7B8](this);
}

uint64_t WebCore::ResourceRequestBase::setIsTopSite(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F416F7C0](this);
}

uint64_t WebCore::ResourceRequestBase::partitionName(WebCore::ResourceRequestBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F416F7C8](this, a2);
}

uint64_t WebCore::ResourceRequestBase::setHTTPMethod(WebCore::ResourceRequestBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F416F7D0](this, a2);
}

uint64_t WebCore::ResourceRequestBase::setIsSameSite(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F416F7D8](this);
}

uint64_t WebCore::ResourceRequestBase::setCachePolicy()
{
  return MEMORY[0x1F416F7E0]();
}

uint64_t WebCore::ResourceRequestBase::clearHTTPOrigin(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F416F7E8](this);
}

uint64_t WebCore::ResourceRequestBase::setHTTPReferrer(WebCore::ResourceRequestBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F416F7F0](this, a2);
}

uint64_t WebCore::ResourceRequestBase::setHTTPUserAgent(WebCore::ResourceRequestBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F416F7F8](this, a2);
}

uint64_t WebCore::ResourceRequestBase::clearHTTPReferrer(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F416F800](this);
}

uint64_t WebCore::ResourceRequestBase::makeUnconditional(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F416F808](this);
}

uint64_t WebCore::ResourceRequestBase::removeCredentials(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F416F810](this);
}

uint64_t WebCore::ResourceRequestBase::setAsIsolatedCopy(WebCore::ResourceRequestBase *this, const WebCore::ResourceRequest *a2)
{
  return MEMORY[0x1F416F818](this, a2);
}

uint64_t WebCore::ResourceRequestBase::setCachePartition(WebCore::ResourceRequestBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F416F820](this, a2);
}

uint64_t WebCore::ResourceRequestBase::setIsAppInitiated(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F416F828](this);
}

uint64_t WebCore::ResourceRequestBase::addHTTPHeaderField()
{
  return MEMORY[0x1F416F830]();
}

uint64_t WebCore::ResourceRequestBase::setHTTPHeaderField()
{
  return MEMORY[0x1F416F838]();
}

uint64_t WebCore::ResourceRequestBase::setTimeoutInterval(WebCore::ResourceRequestBase *this, double a2)
{
  return MEMORY[0x1F416F840](this, a2);
}

uint64_t WebCore::ResourceRequestBase::setHTTPHeaderFields()
{
  return MEMORY[0x1F416F848]();
}

uint64_t WebCore::ResourceRequestBase::clearHTTPAuthorization(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F416F850](this);
}

uint64_t WebCore::ResourceRequestBase::defaultTimeoutInterval(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F416F858](this);
}

uint64_t WebCore::ResourceRequestBase::setFirstPartyForCookies(WebCore::ResourceRequestBase *this, const WTF::URL *a2)
{
  return MEMORY[0x1F416F860](this, a2);
}

uint64_t WebCore::ResourceRequestBase::setDefaultTimeoutInterval(WebCore::ResourceRequestBase *this, double a2)
{
  return MEMORY[0x1F416F868](this, a2);
}

uint64_t WebCore::ResourceRequestBase::setExistingHTTPReferrerToOriginString(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F416F870](this);
}

uint64_t WebCore::SharedBufferBuilder::initialize()
{
  return MEMORY[0x1F416F880]();
}

uint64_t WebCore::SharedBufferBuilder::ensureBuffer(WebCore::SharedBufferBuilder *this)
{
  return MEMORY[0x1F416F888](this);
}

uint64_t WebCore::SharedBufferBuilder::takeAsContiguous(WebCore::SharedBufferBuilder *this)
{
  return MEMORY[0x1F416F890](this);
}

uint64_t WebCore::SharedBufferBuilder::take(WebCore::SharedBufferBuilder *this)
{
  return MEMORY[0x1F416F898](this);
}

uint64_t WebCore::SharedBufferBuilder::SharedBufferBuilder()
{
  return MEMORY[0x1F416F8A0]();
}

uint64_t WebCore::SourceBufferPrivate::setClient()
{
  return MEMORY[0x1F416F8A8]();
}

uint64_t WebCore::SourceBufferPrivate::SourceBufferPrivate()
{
  return MEMORY[0x1F416F8B0]();
}

void WebCore::SourceBufferPrivate::~SourceBufferPrivate(WebCore::SourceBufferPrivate *this)
{
}

uint64_t WebCore::TextResourceDecoder::flush(WebCore::TextResourceDecoder *this)
{
  return MEMORY[0x1F416F8C8](this);
}

uint64_t WebCore::TextResourceDecoder::create(WebCore::TextResourceDecoder *this, const WTF::String *a2, const PAL::TextEncoding *a3)
{
  return MEMORY[0x1F416F8D0](this, a2, a3);
}

uint64_t WebCore::TextResourceDecoder::decode()
{
  return MEMORY[0x1F416F8D8]();
}

void WebCore::TextResourceDecoder::~TextResourceDecoder(WebCore::TextResourceDecoder *this)
{
}

uint64_t WebCore::TransformOperations::TransformOperations()
{
  return MEMORY[0x1F416F8E8]();
}

void WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive(WebCore::URLKeepingBlobAlive *this)
{
}

uint64_t WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages(WebCore::UserContentProvider *this)
{
  return MEMORY[0x1F416F8F8](this);
}

uint64_t WebCore::UserContentProvider::invalidateAllRegisteredUserMessageHandlerInvalidationClients(WebCore::UserContentProvider *this)
{
  return MEMORY[0x1F416F900](this);
}

uint64_t WebCore::UserContentProvider::UserContentProvider(WebCore::UserContentProvider *this)
{
  return MEMORY[0x1F416F908](this);
}

uint64_t WebCore::VP9TestingOverrides::setVP9DecoderDisabled()
{
  return MEMORY[0x1F416F918]();
}

uint64_t WebCore::VP9TestingOverrides::setVP9ScreenSizeAndScale()
{
  return MEMORY[0x1F416F920]();
}

uint64_t WebCore::VP9TestingOverrides::setHardwareDecoderDisabled()
{
  return MEMORY[0x1F416F928]();
}

uint64_t WebCore::VP9TestingOverrides::resetOverridesToDefaultValues(WebCore::VP9TestingOverrides *this)
{
  return MEMORY[0x1F416F930](this);
}

uint64_t WebCore::VP9TestingOverrides::setConfigurationChangedCallback()
{
  return MEMORY[0x1F416F938]();
}

uint64_t WebCore::VP9TestingOverrides::singleton(WebCore::VP9TestingOverrides *this)
{
  return MEMORY[0x1F416F940](this);
}

void WebCore::WebTransportSession::~WebTransportSession(WebCore::WebTransportSession *this)
{
}

uint64_t WebCore::allowableImageTypes(WebCore *this)
{
  return MEMORY[0x1F416F950](this);
}

uint64_t WebCore::availableScreenSize(WebCore *this)
{
  return MEMORY[0x1F416F958](this);
}

uint64_t WebCore::buildAttestationMap()
{
  return MEMORY[0x1F416F960]();
}

uint64_t WebCore::buildClientDataJson()
{
  return MEMORY[0x1F416F968]();
}

uint64_t WebCore::colorFromCocoaColor(WebCore *this, UIColor *a2)
{
  return MEMORY[0x1F416F970](this, a2);
}

uint64_t WebCore::contentSizeCategory(WebCore *this)
{
  return MEMORY[0x1F416F978](this);
}

uint64_t WebCore::copyLocalizedString(WebCore *this, const __CFString *a2)
{
  return MEMORY[0x1F416F980](this, a2);
}

uint64_t WebCore::createCVPixelBuffer(WebCore *this, __IOSurface *a2)
{
  return MEMORY[0x1F416F988](this, a2);
}

uint64_t WebCore::createInternalError()
{
  return MEMORY[0x1F416F990]();
}

uint64_t WebCore::penPointerEventType(WebCore *this)
{
  return MEMORY[0x1F416F9A0](this);
}

uint64_t WebCore::provideNotification()
{
  return MEMORY[0x1F416F9A8]();
}

uint64_t WebCore::serializationForCSS(WebCore *this, const Color *a2)
{
  return MEMORY[0x1F416F9B0](this, a2);
}

uint64_t WebCore::setScreenProperties()
{
  return MEMORY[0x1F416F9B8]();
}

uint64_t WebCore::setSystemHasBattery(WebCore *this)
{
  return MEMORY[0x1F416F9C0](this);
}

uint64_t WebCore::sleepDisablerClient(WebCore *this)
{
  return MEMORY[0x1F416F9C8](this);
}

uint64_t WebCore::toAutofillFieldName(WebCore *this, const AtomString *a2)
{
  return MEMORY[0x1F416F9D0](this, a2);
}

uint64_t WebCore::AVAssetMIMETypeCache::singleton(WebCore::AVAssetMIMETypeCache *this)
{
  return MEMORY[0x1F416F9E8](this);
}

uint64_t WebCore::ApplePaySetupFeature::supportsFeature()
{
  return MEMORY[0x1F416F9F0]();
}

uint64_t WebCore::ApplePaySetupFeature::ApplePaySetupFeature()
{
  return MEMORY[0x1F416F9F8]();
}

uint64_t WebCore::ByteArrayPixelBuffer::create()
{
  return MEMORY[0x1F416FA00]();
}

uint64_t WebCore::CanvasActivityRecord::recordWrittenOrMeasuredText(WebCore::CanvasActivityRecord *this, const WTF::String *a2)
{
  return MEMORY[0x1F416FA08](this, a2);
}

void WebCore::CaptureDeviceManager::~CaptureDeviceManager(WebCore::CaptureDeviceManager *this)
{
}

uint64_t WebCore::FontAttributeChanges::FontAttributeChanges()
{
  return MEMORY[0x1F416FA20]();
}

uint64_t WebCore::GraphicsContextState::GraphicsContextState()
{
  return MEMORY[0x1F416FA28]();
}

uint64_t WebCore::ImageBufferAllocator::ImageBufferAllocator(WebCore::ImageBufferAllocator *this)
{
  return MEMORY[0x1F416FA48](this);
}

{
  return MEMORY[0x1F416FA50](this);
}

uint64_t WebCore::LegacySchemeRegistry::isBuiltinScheme(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416FA60](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsLocal(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416FA68](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsSecure(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416FA70](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsNoAccess(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416FA78](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::shouldTreatURLSchemeAsLocal()
{
  return MEMORY[0x1F416FA80]();
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsCORSEnabled(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416FA88](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsEmptyDocument(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416FA90](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsDisplayIsolated(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416FA98](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::shouldLoadURLSchemeAsEmptyDocument()
{
  return MEMORY[0x1F416FAA0]();
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsCachePartitioned(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416FAA8](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::allURLSchemesRegisteredAsCORSEnabled(WebCore::LegacySchemeRegistry *this)
{
  return MEMORY[0x1F416FAB0](this);
}

uint64_t WebCore::LegacySchemeRegistry::registerAsCanDisplayOnlyIfCanRequest(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416FAB8](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsAlwaysRevalidated(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416FAC0](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::setDomainRelaxationForbiddenForURLScheme(WebCore::LegacySchemeRegistry *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1F416FAC8](this, a2, a3);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsHandledBySchemeHandler(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416FAD0](this, a2);
}

uint64_t WebCore::LegacySchemeRegistry::registerURLSchemeAsBypassingContentSecurityPolicy(WebCore::LegacySchemeRegistry *this, const WTF::String *a2)
{
  return MEMORY[0x1F416FAD8](this, a2);
}

uint64_t WebCore::LocalWebLockRegistry::releaseLock()
{
  return MEMORY[0x1F416FAE8]();
}

uint64_t WebCore::LocalWebLockRegistry::requestLock()
{
  return MEMORY[0x1F416FAF0]();
}

uint64_t WebCore::LocalWebLockRegistry::abortLockRequest()
{
  return MEMORY[0x1F416FAF8]();
}

uint64_t WebCore::LocalWebLockRegistry::clientIsGoingAway()
{
  return MEMORY[0x1F416FB00]();
}

uint64_t WebCore::LocalWebLockRegistry::LocalWebLockRegistry(WebCore::LocalWebLockRegistry *this)
{
  return MEMORY[0x1F416FB18](this);
}

uint64_t WebCore::LowPowerModeNotifier::LowPowerModeNotifier()
{
  return MEMORY[0x1F416FB20]();
}

void WebCore::LowPowerModeNotifier::~LowPowerModeNotifier(WebCore::LowPowerModeNotifier *this)
{
}

uint64_t WebCore::MediaRecorderPrivate::selectTracks(WebCore::MediaRecorderPrivate *this, WebCore::MediaStreamPrivate *a2)
{
  return MEMORY[0x1F416FB30](this, a2);
}

uint64_t WebCore::NetworkStateNotifier::addListener()
{
  return MEMORY[0x1F416FB38]();
}

uint64_t WebCore::NetworkStateNotifier::onLine(WebCore::NetworkStateNotifier *this)
{
  return MEMORY[0x1F416FB40](this);
}

uint64_t WebCore::NetworkStateNotifier::singleton(WebCore::NetworkStateNotifier *this)
{
  return MEMORY[0x1F416FB48](this);
}

uint64_t WebCore::PasteboardCustomData::fromSharedBuffer(WebCore::PasteboardCustomData *this, const WebCore::SharedBuffer *a2)
{
  return MEMORY[0x1F416FB50](this, a2);
}

uint64_t WebCore::PasteboardCustomData::Entry::Entry()
{
  return MEMORY[0x1F416FB58]();
}

{
  return MEMORY[0x1F416FB60]();
}

uint64_t WebCore::PasteboardCustomData::cocoaType(WebCore::PasteboardCustomData *this)
{
  return MEMORY[0x1F416FB68](this);
}

uint64_t WebCore::PasteboardCustomData::PasteboardCustomData()
{
  return MEMORY[0x1F416FB70]();
}

{
  return MEMORY[0x1F416FB78]();
}

void WebCore::PasteboardCustomData::~PasteboardCustomData(WebCore::PasteboardCustomData *this)
{
}

void WebCore::PasteboardWriterData::WebContent::~WebContent(WebCore::PasteboardWriterData::WebContent *this)
{
}

uint64_t WebCore::PasteboardWriterData::PasteboardWriterData(WebCore::PasteboardWriterData *this)
{
  return MEMORY[0x1F416FB90](this);
}

void WebCore::PasteboardWriterData::~PasteboardWriterData(WebCore::PasteboardWriterData *this)
{
}

uint64_t WebCore::PermissionController::setSharedController()
{
  return MEMORY[0x1F416FBA0]();
}

uint64_t WebCore::PlatformCALayerCocoa::layerTypeForPlatformLayer(WebCore::PlatformCALayerCocoa *this, CALayer *a2)
{
  return MEMORY[0x1F416FBB0](this, a2);
}

uint64_t WebCore::ReadableStreamSource::ReadableStreamSource(WebCore::ReadableStreamSource *this)
{
  return MEMORY[0x1F416FBC8](this);
}

void WebCore::ReadableStreamSource::~ReadableStreamSource(WebCore::ReadableStreamSource *this)
{
}

uint64_t WebCore::ResourceLoadObserver::sharedIfExists(WebCore::ResourceLoadObserver *this)
{
  return MEMORY[0x1F416FBF0](this);
}

uint64_t WebCore::ResourceLoadObserver::shared(WebCore::ResourceLoadObserver *this)
{
  return MEMORY[0x1F416FBF8](this);
}

uint64_t WebCore::ResourceLoadObserver::setShared(WebCore::ResourceLoadObserver *this, WebCore::ResourceLoadObserver *a2)
{
  return MEMORY[0x1F416FC00](this, a2);
}

uint64_t WebCore::ResourceResponseBase::dataURLResponse()
{
  return MEMORY[0x1F416FC08]();
}

uint64_t WebCore::ResourceResponseBase::setHTTPStatusCode(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F416FC10](this);
}

uint64_t WebCore::ResourceResponseBase::setHTTPStatusText()
{
  return MEMORY[0x1F416FC18]();
}

uint64_t WebCore::ResourceResponseBase::setHTTPHeaderField()
{
  return MEMORY[0x1F416FC20]();
}

uint64_t WebCore::ResourceResponseBase::setTextEncodingName()
{
  return MEMORY[0x1F416FC28]();
}

uint64_t WebCore::ResourceResponseBase::sanitizeHTTPHeaderFields()
{
  return MEMORY[0x1F416FC30]();
}

uint64_t WebCore::ResourceResponseBase::setExpectedContentLength(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F416FC38](this);
}

uint64_t WebCore::ResourceResponseBase::sanitizeSuggestedFilename(WebCore::ResourceResponseBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F416FC40](this, a2);
}

uint64_t WebCore::ResourceResponseBase::syntheticRedirectResponse(WebCore::ResourceResponseBase *this, const WTF::URL *a2, const WTF::URL *a3)
{
  return MEMORY[0x1F416FC48](this, a2, a3);
}

uint64_t WebCore::ResourceResponseBase::setURL(WebCore::ResourceResponseBase *this, const WTF::URL *a2)
{
  return MEMORY[0x1F416FC50](this, a2);
}

uint64_t WebCore::ResourceResponseBase::setType()
{
  return MEMORY[0x1F416FC58]();
}

uint64_t WebCore::ResourceResponseBase::ResourceResponseBase()
{
  return MEMORY[0x1F416FC60]();
}

uint64_t WebCore::ResourceResponseBase::ResourceResponseBase(WebCore::ResourceResponseBase *this, const WTF::URL *a2, const WTF::String *a3, uint64_t a4, const WTF::String *a5)
{
  return MEMORY[0x1F416FC68](this, a2, a3, a4, a5);
}

uint64_t WebCore::ResourceResponseBase::ResourceResponseBase(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F416FC70](this);
}

uint64_t WebCore::SWServerRegistration::scheduleSoftUpdate()
{
  return MEMORY[0x1F416FC78]();
}

uint64_t WebCore::SWServerRegistration::enableNavigationPreload(WebCore::SWServerRegistration *this)
{
  return MEMORY[0x1F416FC80](this);
}

uint64_t WebCore::SWServerRegistration::disableNavigationPreload(WebCore::SWServerRegistration *this)
{
  return MEMORY[0x1F416FC88](this);
}

uint64_t WebCore::SWServerRegistration::addCookieChangeSubscriptions()
{
  return MEMORY[0x1F416FC90]();
}

uint64_t WebCore::SWServerRegistration::removeCookieChangeSubscriptions()
{
  return MEMORY[0x1F416FC98]();
}

uint64_t WebCore::SWServerRegistration::setNavigationPreloadHeaderValue()
{
  return MEMORY[0x1F416FCA0]();
}

void WebCore::SWServerRegistration::~SWServerRegistration(WebCore::SWServerRegistration *this)
{
}

uint64_t WebCore::ScrollingCoordinator::uniqueScrollingNodeID(WebCore::ScrollingCoordinator *this)
{
  return MEMORY[0x1F416FCB0](this);
}

uint64_t WebCore::ServiceWorkerJobData::ServiceWorkerJobData()
{
  return MEMORY[0x1F416FCB8]();
}

uint64_t WebCore::SharedVideoFrameInfo::writePixelBuffer(WebCore::SharedVideoFrameInfo *this, __CVBuffer *a2, unsigned __int8 *a3)
{
  return MEMORY[0x1F416FCC0](this, a2, a3);
}

uint64_t WebCore::SharedVideoFrameInfo::fromCVPixelBuffer(WebCore::SharedVideoFrameInfo *this, __CVBuffer *a2)
{
  return MEMORY[0x1F416FCC8](this, a2);
}

uint64_t WebCore::SharedVideoFrameInfo::fromVideoFrameBuffer()
{
  return MEMORY[0x1F416FCD0]();
}

uint64_t WebCore::SharedVideoFrameInfo::writeVideoFrameBuffer()
{
  return MEMORY[0x1F416FCD8]();
}

uint64_t WebCore::SharedVideoFrameInfo::createPixelBufferFromMemory(WebCore::SharedVideoFrameInfo *this, const unsigned __int8 *a2, __CVPixelBufferPool *a3)
{
  return MEMORY[0x1F416FCE0](this, a2, a3);
}

uint64_t WebCore::SharedVideoFrameInfo::decode()
{
  return MEMORY[0x1F416FCE8]();
}

uint64_t WebCore::SharedWorkerProvider::setSharedProvider()
{
  return MEMORY[0x1F416FCF0]();
}

uint64_t WebCore::TransformationMatrix::scale(WebCore::TransformationMatrix *this, double a2)
{
  return MEMORY[0x1F416FCF8](this, a2);
}

uint64_t WebCore::TransformationMatrix::translate(WebCore::TransformationMatrix *this, double a2, double a3)
{
  return MEMORY[0x1F416FD00](this, a2, a3);
}

uint64_t WebCore::TransformationMatrix::TransformationMatrix(WebCore::TransformationMatrix *this, const CATransform3D *a2)
{
  return MEMORY[0x1F416FD08](this, a2);
}

uint64_t WebCore::UserGestureIndicator::currentUserGesture(WebCore::UserGestureIndicator *this)
{
  return MEMORY[0x1F416FD10](this);
}

uint64_t WebCore::UserGestureIndicator::processingUserGesture(WebCore::UserGestureIndicator *this, const Document *a2)
{
  return MEMORY[0x1F416FD18](this, a2);
}

uint64_t WebCore::UserGestureIndicator::UserGestureIndicator()
{
  return MEMORY[0x1F416FD20]();
}

void WebCore::UserGestureIndicator::~UserGestureIndicator(WebCore::UserGestureIndicator *this)
{
}

uint64_t WebCore::endOfEditableContent()
{
  return MEMORY[0x1F416FD30]();
}

uint64_t WebCore::findClosestPlainText()
{
  return MEMORY[0x1F416FD38]();
}

uint64_t WebCore::httpHeaderNameString()
{
  return MEMORY[0x1F416FD40]();
}

uint64_t WebCore::isInAuxiliaryProcess(WebCore *this)
{
  return MEMORY[0x1F416FD48](this);
}

uint64_t WebCore::isSupportedImageType(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1F416FD50](this, a2);
}

uint64_t WebCore::localizedDeviceModel(WebCore *this)
{
  return MEMORY[0x1F416FD58](this);
}

uint64_t WebCore::platformSummaryItems()
{
  return MEMORY[0x1F416FD60]();
}

uint64_t WebCore::provideGeolocationTo()
{
  return MEMORY[0x1F416FD70]();
}

uint64_t WebCore::serializationForHTML(WebCore *this, const Color *a2)
{
  return MEMORY[0x1F416FD78](this, a2);
}

uint64_t WebCore::threadGlobalDataSlow(WebCore *this)
{
  return MEMORY[0x1F416FD80](this);
}

uint64_t WebCore::AudioHardwareListener::setCreationFunction()
{
  return MEMORY[0x1F416FD88]();
}

uint64_t WebCore::AudioHardwareListener::resetCreationFunction(WebCore::AudioHardwareListener *this)
{
  return MEMORY[0x1F416FD90](this);
}

uint64_t WebCore::AudioHardwareListener::create()
{
  return MEMORY[0x1F416FD98]();
}

uint64_t WebCore::AudioHardwareListener::AudioHardwareListener()
{
  return MEMORY[0x1F416FDA0]();
}

uint64_t WebCore::AudioSampleBufferList::zeroABL(WebCore::AudioSampleBufferList *this, AudioBufferList *a2)
{
  return MEMORY[0x1F416FDA8](this, a2);
}

uint64_t WebCore::AuthenticatorResponse::setExtensions()
{
  return MEMORY[0x1F416FDB0]();
}

uint64_t WebCore::BackForwardController::itemAtIndex(WebCore::BackForwardController *this)
{
  return MEMORY[0x1F416FDC0](this);
}

uint64_t WebCore::BackgroundFetchEngine::addFetchFromStore()
{
  return MEMORY[0x1F416FDD8]();
}

uint64_t WebCore::BackgroundFetchEngine::abortBackgroundFetch()
{
  return MEMORY[0x1F416FDE0]();
}

uint64_t WebCore::BackgroundFetchEngine::clickBackgroundFetch()
{
  return MEMORY[0x1F416FDE8]();
}

uint64_t WebCore::BackgroundFetchEngine::pauseBackgroundFetch()
{
  return MEMORY[0x1F416FDF0]();
}

uint64_t WebCore::BackgroundFetchEngine::resumeBackgroundFetch()
{
  return MEMORY[0x1F416FDF8]();
}

uint64_t WebCore::BlobDataFileReference::expectedModificationTime(WebCore::BlobDataFileReference *this)
{
  return MEMORY[0x1F416FE00](this);
}

uint64_t WebCore::BlobDataFileReference::path(WebCore::BlobDataFileReference *this)
{
  return MEMORY[0x1F416FE08](this);
}

uint64_t WebCore::BlobDataFileReference::BlobDataFileReference(WebCore::BlobDataFileReference *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F416FE10](this, a2, a3);
}

uint64_t WebCore::ContentChangeObserver::MouseMovedScope::MouseMovedScope(WebCore::ContentChangeObserver::MouseMovedScope *this, Document *a2)
{
  return MEMORY[0x1F416FE20](this, a2);
}

void WebCore::ContentChangeObserver::MouseMovedScope::~MouseMovedScope(WebCore::ContentChangeObserver::MouseMovedScope *this)
{
}

uint64_t WebCore::ContentChangeObserver::isConsideredVisible(WebCore::ContentChangeObserver *this, const Node *a2)
{
  return MEMORY[0x1F416FE30](this, a2);
}

uint64_t WebCore::ContentChangeObserver::didCancelPotentialTap(WebCore::ContentChangeObserver *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1F416FE38](this, a2);
}

uint64_t WebCore::ContentChangeObserver::didRecognizeLongPress(WebCore::ContentChangeObserver *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1F416FE40](this, a2);
}

uint64_t WebCore::ContentChangeObserver::stopContentObservation(WebCore::ContentChangeObserver *this)
{
  return MEMORY[0x1F416FE48](this);
}

uint64_t WebCore::ContentChangeObserver::didPreventDefaultForEvent(WebCore::ContentChangeObserver *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1F416FE50](this, a2);
}

uint64_t WebCore::ContentChangeObserver::startContentObservationForDuration()
{
  return MEMORY[0x1F416FE58]();
}

uint64_t WebCore::ContentSecurityPolicy::didReceiveHeaders()
{
  return MEMORY[0x1F416FE60]();
}

uint64_t WebCore::ContentSecurityPolicy::ContentSecurityPolicy()
{
  return MEMORY[0x1F416FE68]();
}

void WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(WebCore::ContentSecurityPolicy *this)
{
}

uint64_t WebCore::DeprecationReportBody::create()
{
  return MEMORY[0x1F416FE78]();
}

uint64_t WebCore::DestinationColorSpace::SRGB(WebCore::DestinationColorSpace *this)
{
  return MEMORY[0x1F416FE80](this);
}

uint64_t WebCore::DestinationColorSpace::DestinationColorSpace()
{
  return MEMORY[0x1F416FE88]();
}

uint64_t WebCore::DiagnosticLoggingKeys::webViewKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FE98](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::occurredKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FEA0](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::timedOutKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FEA8](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::networkCacheKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FEB0](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::internalErrorKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FEB8](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::userZoomActionKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FEC0](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::invalidSessionIDKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FEC8](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::telemetryPageLoadKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FED0](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::domainCausingCrashKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FED8](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::simulatedPageCrashKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FEE0](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::backNavigationDeltaKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FEE8](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::domainCausingJetsamKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FEF0](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::unknownEntryRequestKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FEF8](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::networkProcessCrashedKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF00](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::failedLessThan2SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF08](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::failedLessThan5SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF10](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::entryRightlyNotWarmedUpKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF18](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::entryWronglyNotWarmedUpKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF20](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::failedLessThan20SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF28](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::failedMoreThan20SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF30](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::canceledLessThan2SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF38](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::canceledLessThan5SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF40](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::createSharedBufferFailedKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF48](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::synchronousMessageFailedKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF50](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::canceledLessThan20SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF58](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::canceledMoreThan20SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF60](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::exceededActiveMemoryLimitKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF68](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::succeededLessThan2SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF70](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::succeededLessThan5SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF78](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::exceededBackgroundCPULimitKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF80](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::succeededLessThan20SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF88](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::succeededMoreThan20SecondsKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF90](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::exceededInactiveMemoryLimitKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FF98](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::wastedSpeculativeWarmupWithRevalidationKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FFA0](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::wastedSpeculativeWarmupWithoutRevalidationKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FFA8](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::successfulSpeculativeWarmupWithRevalidationKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FFB0](this);
}

uint64_t WebCore::DiagnosticLoggingKeys::successfulSpeculativeWarmupWithoutRevalidationKey(WebCore::DiagnosticLoggingKeys *this)
{
  return MEMORY[0x1F416FFB8](this);
}

uint64_t WebCore::GeolocationController::errorOccurred()
{
  return MEMORY[0x1F416FFC0]();
}

uint64_t WebCore::GeolocationController::supplementName(WebCore::GeolocationController *this)
{
  return MEMORY[0x1F416FFC8](this);
}

uint64_t WebCore::GeolocationController::positionChanged()
{
  return MEMORY[0x1F416FFD0]();
}

uint64_t WebCore::HTMLAttachmentElement::updateAttributes()
{
  return MEMORY[0x1F416FFD8]();
}

uint64_t WebCore::HTMLAttachmentElement::updateIconForWideLayout()
{
  return MEMORY[0x1F416FFE0]();
}

uint64_t WebCore::HTMLAttachmentElement::updateIconForNarrowLayout()
{
  return MEMORY[0x1F416FFE8]();
}

uint64_t WebCore::HTMLAttachmentElement::updateThumbnailForWideLayout()
{
  return MEMORY[0x1F416FFF0]();
}

uint64_t WebCore::HTMLAttachmentElement::updateThumbnailForNarrowLayout()
{
  return MEMORY[0x1F416FFF8]();
}

uint64_t WebCore::HTMLAttachmentElement::updateAssociatedElementWithData()
{
  return MEMORY[0x1F4170000]();
}

uint64_t WebCore::HTMLFrameOwnerElement::scheduleInvalidateStyleAndLayerComposition(WebCore::HTMLFrameOwnerElement *this)
{
  return MEMORY[0x1F4170008](this);
}

uint64_t WebCore::IDBDatabaseIdentifier::databaseDirectoryRelativeToRoot()
{
  return MEMORY[0x1F4170030]();
}

uint64_t WebCore::IDBResourceIdentifier::emptyValue(WebCore::IDBResourceIdentifier *this)
{
  return MEMORY[0x1F4170038](this);
}

uint64_t WebCore::IDBResourceIdentifier::IDBResourceIdentifier()
{
  return MEMORY[0x1F4170040]();
}

uint64_t WebCore::InspectorFrontendHost::disconnectClient(WebCore::InspectorFrontendHost *this)
{
  return MEMORY[0x1F4170048](this);
}

uint64_t WebCore::InspectorFrontendHost::InspectorFrontendHost()
{
  return MEMORY[0x1F4170058]();
}

void WebCore::InspectorFrontendHost::~InspectorFrontendHost(WebCore::InspectorFrontendHost *this)
{
}

uint64_t WebCore::InspectorOverlayLabel::InspectorOverlayLabel()
{
  return MEMORY[0x1F4170068]();
}

uint64_t WebCore::JSCSSStyleDeclaration::toWrapped(WebCore::JSCSSStyleDeclaration *this, JSC::VM *a2, JSValue a3)
{
  return MEMORY[0x1F4170070](this, a2, a3.super.isa);
}

uint64_t WebCore::MediaKeySystemRequest::deny(WebCore::MediaKeySystemRequest *this, const WTF::String *a2)
{
  return MEMORY[0x1F4170080](this, a2);
}

uint64_t WebCore::MediaKeySystemRequest::allow(WebCore::MediaKeySystemRequest *this)
{
  return MEMORY[0x1F4170088](this);
}

uint64_t WebCore::NetworkStorageSession::getCookies(WebCore::NetworkStorageSession *this, const WTF::URL *a2)
{
  return MEMORY[0x1F4170098](this, a2);
}

uint64_t WebCore::NetworkStorageSession::setCookies()
{
  return MEMORY[0x1F41700A0]();
}

uint64_t WebCore::NetworkStorageSession::deleteCookie()
{
  return MEMORY[0x1F41700A8]();
}

uint64_t WebCore::NetworkStorageSession::deleteCookies()
{
  return MEMORY[0x1F41700B0]();
}

uint64_t WebCore::NetworkStorageSession::getAllCookies(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1F41700B8](this);
}

uint64_t WebCore::NetworkStorageSession::maxAgeCacheCap(WebCore::NetworkStorageSession *this, const WebCore::ResourceRequest *a2)
{
  return MEMORY[0x1F41700C0](this, a2);
}

uint64_t WebCore::NetworkStorageSession::domCookiesForHost(WebCore::NetworkStorageSession *this, const WTF::String *a2)
{
  return MEMORY[0x1F41700D0](this, a2);
}

uint64_t WebCore::NetworkStorageSession::setManagedDomains()
{
  return MEMORY[0x1F41700D8]();
}

uint64_t WebCore::NetworkStorageSession::grantStorageAccess()
{
  return MEMORY[0x1F41700E0]();
}

uint64_t WebCore::NetworkStorageSession::setAppBoundDomains()
{
  return MEMORY[0x1F41700E8]();
}

uint64_t WebCore::NetworkStorageSession::resetManagedDomains(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1F41700F0](this);
}

uint64_t WebCore::NetworkStorageSession::resetAppBoundDomains(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1F41700F8](this);
}

uint64_t WebCore::NetworkStorageSession::processMayUseCookieAPI(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1F4170100](this);
}

uint64_t WebCore::NetworkStorageSession::removeAllStorageAccess(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1F4170108](this);
}

uint64_t WebCore::NetworkStorageSession::getHostnamesWithCookies()
{
  return MEMORY[0x1F4170110]();
}

uint64_t WebCore::NetworkStorageSession::deleteCookiesForHostnames()
{
  return MEMORY[0x1F4170118]();
}

{
  return MEMORY[0x1F4170120]();
}

uint64_t WebCore::NetworkStorageSession::findAdditionalLoginDomain()
{
  return MEMORY[0x1F4170128]();
}

uint64_t WebCore::NetworkStorageSession::capExpiryOfPersistentCookie()
{
  return MEMORY[0x1F4170130]();
}

uint64_t WebCore::NetworkStorageSession::grantCrossPageStorageAccess()
{
  return MEMORY[0x1F4170138]();
}

uint64_t WebCore::NetworkStorageSession::permitProcessToUseCookieAPI(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1F4170140](this);
}

uint64_t WebCore::NetworkStorageSession::setTrackingPreventionEnabled(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1F4170150](this);
}

uint64_t WebCore::NetworkStorageSession::deleteAllCookiesModifiedSince()
{
  return MEMORY[0x1F4170158]();
}

uint64_t WebCore::NetworkStorageSession::setAllCookiesToSameSiteStrict()
{
  return MEMORY[0x1F4170168]();
}

uint64_t WebCore::NetworkStorageSession::addCookiesEnabledStateObserver()
{
  return MEMORY[0x1F4170170]();
}

uint64_t WebCore::NetworkStorageSession::setThirdPartyCookieBlockingMode()
{
  return MEMORY[0x1F4170178]();
}

uint64_t WebCore::NetworkStorageSession::storageAccessQuirkForDomainPair()
{
  return MEMORY[0x1F4170180]();
}

uint64_t WebCore::NetworkStorageSession::updateStorageAccessPromptQuirks()
{
  return MEMORY[0x1F4170188]();
}

uint64_t WebCore::NetworkStorageSession::removeCookiesEnabledStateObserver()
{
  return MEMORY[0x1F4170190]();
}

uint64_t WebCore::NetworkStorageSession::loginDomainMatchesRequestingDomain()
{
  return MEMORY[0x1F4170198]();
}

uint64_t WebCore::NetworkStorageSession::createCFStorageSessionForIdentifier()
{
  return MEMORY[0x1F41701A0]();
}

uint64_t WebCore::NetworkStorageSession::storageAccessQuirkForTopFrameDomain(WebCore::NetworkStorageSession *this, const WTF::URL *a2)
{
  return MEMORY[0x1F41701A8](this, a2);
}

uint64_t WebCore::NetworkStorageSession::setDomainsWithCrossPageStorageAccess()
{
  return MEMORY[0x1F41701B0]();
}

uint64_t WebCore::NetworkStorageSession::setCacheMaxAgeCapForPrevalentResources()
{
  return MEMORY[0x1F41701B8]();
}

uint64_t WebCore::NetworkStorageSession::resetCacheMaxAgeCapForPrevalentResources(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1F41701C0](this);
}

uint64_t WebCore::NetworkStorageSession::setTrackingPreventionDebugLoggingEnabled(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1F41701C8](this);
}

uint64_t WebCore::NetworkStorageSession::setDomainsWithUserInteractionAsFirstParty()
{
  return MEMORY[0x1F41701D0]();
}

uint64_t WebCore::NetworkStorageSession::stopListeningForCookieChangeNotifications()
{
  return MEMORY[0x1F41701D8]();
}

uint64_t WebCore::NetworkStorageSession::startListeningForCookieChangeNotifications()
{
  return MEMORY[0x1F41701E0]();
}

uint64_t WebCore::NetworkStorageSession::setPrevalentDomainsToBlockButKeepCookiesFor()
{
  return MEMORY[0x1F41701E8]();
}

uint64_t WebCore::NetworkStorageSession::setPrevalentDomainsToBlockAndDeleteCookiesFor()
{
  return MEMORY[0x1F41701F0]();
}

uint64_t WebCore::NetworkStorageSession::resetCrossSiteLoadsWithLinkDecorationForTesting(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1F4170200](this);
}

uint64_t WebCore::NetworkStorageSession::didCommitCrossSiteLoadWithDataTransferFromPrevalentResource()
{
  return MEMORY[0x1F4170208]();
}

uint64_t WebCore::NetworkStorageSession::canRequestStorageAccessForLoginOrCompatibilityPurposesWithoutPriorUserInteraction()
{
  return MEMORY[0x1F4170210]();
}

uint64_t WebCore::NetworkStorageSession::setCookie()
{
  return MEMORY[0x1F4170218]();
}

uint64_t WebCore::NetworkStorageSession::NetworkStorageSession()
{
  return MEMORY[0x1F4170228]();
}

void WebCore::NetworkStorageSession::~NetworkStorageSession(WebCore::NetworkStorageSession *this)
{
}

uint64_t WebCore::PageOverlayController::installPageOverlay()
{
  return MEMORY[0x1F4170238]();
}

uint64_t WebCore::PageOverlayController::uninstallPageOverlay()
{
  return MEMORY[0x1F4170240]();
}

uint64_t WebCore::PlatformKeyboardEvent::setCurrentModifierState()
{
  return MEMORY[0x1F4170248]();
}

uint64_t WebCore::PlatformKeyboardEvent::disambiguateKeyDownEvent()
{
  return MEMORY[0x1F4170250]();
}

uint64_t WebCore::PlatformKeyboardEvent::currentStateOfModifierKeys(WebCore::PlatformKeyboardEvent *this)
{
  return MEMORY[0x1F4170258](this);
}

uint64_t WebCore::RemoteCommandListener::setCreationFunction()
{
  return MEMORY[0x1F4170260]();
}

uint64_t WebCore::RemoteCommandListener::resetCreationFunction(WebCore::RemoteCommandListener *this)
{
  return MEMORY[0x1F4170268](this);
}

uint64_t WebCore::RemoteCommandListener::RemoteCommandListener()
{
  return MEMORY[0x1F4170270]();
}

void WebCore::RemoteCommandListener::~RemoteCommandListener(WebCore::RemoteCommandListener *this)
{
}

uint64_t WebCore::RenderLayerCompositor::layerTreeAsText()
{
  return MEMORY[0x1F4170280]();
}

uint64_t WebCore::SQLiteDatabaseTracker::setClient(WebCore::SQLiteDatabaseTracker *this, WebCore::SQLiteDatabaseTrackerClient *a2)
{
  return MEMORY[0x1F4170298](this, a2);
}

uint64_t WebCore::SerializedImageBuffer::sinkIntoImageBuffer()
{
  return MEMORY[0x1F41702A0]();
}

uint64_t WebCore::SerializedScriptValue::deserialize(WebCore::SerializedScriptValue *this, const OpaqueJSContext *a2, const OpaqueJSValue **a3)
{
  return MEMORY[0x1F41702A8](this, a2, a3);
}

uint64_t WebCore::SerializedScriptValue::create(WebCore::SerializedScriptValue *this, const OpaqueJSContext *a2, const OpaqueJSValue *a3, const OpaqueJSValue **a4)
{
  return MEMORY[0x1F41702B0](this, a2, a3, a4);
}

uint64_t WebCore::SerializedScriptValue::create()
{
  return MEMORY[0x1F41702B8]();
}

uint64_t WebCore::SerializedScriptValue::SerializedScriptValue()
{
  return MEMORY[0x1F41702C0]();
}

{
  return MEMORY[0x1F41702C8]();
}

void WebCore::SerializedScriptValue::~SerializedScriptValue(WebCore::SerializedScriptValue *this)
{
}

uint64_t WebCore::ServiceWorkerProvider::setSharedProvider()
{
  return MEMORY[0x1F41702D8]();
}

void WebCore::ServiceWorkerProvider::~ServiceWorkerProvider(WebCore::ServiceWorkerProvider *this)
{
}

uint64_t WebCore::ShareableBitmapHandle::ShareableBitmapHandle()
{
  return MEMORY[0x1F41702E8]();
}

uint64_t WebCore::TextRecognitionResult::encodeVKCImageAnalysis()
{
  return MEMORY[0x1F41702F0]();
}

uint64_t WebCore::UserContentURLPattern::parse()
{
  return MEMORY[0x1F4170338]();
}

uint64_t WebCore::UserContentURLPattern::UserContentURLPattern()
{
  return MEMORY[0x1F4170340]();
}

uint64_t WebCore::VideoLayerManagerObjC::VideoLayerManagerObjC(WebCore::VideoLayerManagerObjC *this, const WTF::Logger *a2, const void *a3)
{
  return MEMORY[0x1F4170348](this, a2, a3);
}

uint64_t WebCore::ViewportConfiguration::setContentsSize(WebCore::ViewportConfiguration *this, const IntSize *a2)
{
  return MEMORY[0x1F4170350](this, a2);
}

uint64_t WebCore::ViewportConfiguration::setViewLayoutSize()
{
  return MEMORY[0x1F4170358]();
}

uint64_t WebCore::ViewportConfiguration::testingParameters(WebCore::ViewportConfiguration *this)
{
  return MEMORY[0x1F4170360](this);
}

uint64_t WebCore::ViewportConfiguration::webpageParameters(WebCore::ViewportConfiguration *this)
{
  return MEMORY[0x1F4170368](this);
}

uint64_t WebCore::ViewportConfiguration::setViewportArguments()
{
  return MEMORY[0x1F4170370]();
}

uint64_t WebCore::ViewportConfiguration::xhtmlMobileParameters(WebCore::ViewportConfiguration *this)
{
  return MEMORY[0x1F4170378](this);
}

uint64_t WebCore::ViewportConfiguration::setDisabledAdaptations()
{
  return MEMORY[0x1F4170380]();
}

uint64_t WebCore::ViewportConfiguration::textDocumentParameters(WebCore::ViewportConfiguration *this)
{
  return MEMORY[0x1F4170388](this);
}

uint64_t WebCore::ViewportConfiguration::imageDocumentParameters(WebCore::ViewportConfiguration *this)
{
  return MEMORY[0x1F4170390](this);
}

uint64_t WebCore::ViewportConfiguration::nativeWebpageParameters(WebCore::ViewportConfiguration *this)
{
  return MEMORY[0x1F4170398](this);
}

uint64_t WebCore::ViewportConfiguration::setDefaultConfiguration(WebCore::ViewportConfiguration *this, const Parameters *a2)
{
  return MEMORY[0x1F41703A0](this, a2);
}

uint64_t WebCore::ViewportConfiguration::setCanIgnoreScalingConstraints(WebCore::ViewportConfiguration *this)
{
  return MEMORY[0x1F41703A8](this);
}

uint64_t WebCore::ViewportConfiguration::setIsKnownToLayOutWiderThanViewport(WebCore::ViewportConfiguration *this)
{
  return MEMORY[0x1F41703B0](this);
}

uint64_t WebCore::ViewportConfiguration::setMinimumEffectiveDeviceWidthForShrinkToFit(WebCore::ViewportConfiguration *this, double a2)
{
  return MEMORY[0x1F41703B8](this, a2);
}

uint64_t WebCore::ViewportConfiguration::setMinimumEffectiveDeviceWidthWhenIgnoringScalingConstraints(WebCore::ViewportConfiguration *this, double a2)
{
  return MEMORY[0x1F41703C0](this, a2);
}

uint64_t WebCore::ViewportConfiguration::ViewportConfiguration(WebCore::ViewportConfiguration *this)
{
  return MEMORY[0x1F41703C8](this);
}

uint64_t WebCore::WheelEventDeltaFilter::create(WebCore::WheelEventDeltaFilter *this)
{
  return MEMORY[0x1F41703D0](this);
}

uint64_t WebCore::WheelEventTestMonitor::deferForReason()
{
  return MEMORY[0x1F41703D8]();
}

uint64_t WebCore::WheelEventTestMonitor::removeDeferralForReason()
{
  return MEMORY[0x1F41703E0]();
}

uint64_t WebCore::WheelEventTestMonitor::receivedWheelEventWithPhases()
{
  return MEMORY[0x1F41703E8]();
}

uint64_t WebCore::WheelEventTestMonitor::setTestCallbackAndStartMonitoring()
{
  return MEMORY[0x1F41703F0]();
}

uint64_t WebCore::WorkerOrWorkletThread::dispatch()
{
  return MEMORY[0x1F41703F8]();
}

uint64_t WebCore::formatLocalizedString(WebCore *this, const __CFString *a2, ...)
{
  return MEMORY[0x1F4170400](this, a2);
}

uint64_t WebCore::isIPAddressDisallowed(WebCore *this, const WTF::URL *a2)
{
  return MEMORY[0x1F4170408](this, a2);
}

uint64_t WebCore::isQuickLookPreviewURL(WebCore *this, const WTF::URL *a2)
{
  return MEMORY[0x1F4170410](this, a2);
}

uint64_t WebCore::mainThreadNormalWorld(WebCore *this)
{
  return MEMORY[0x1F4170418](this);
}

uint64_t WebCore::mousePointerEventType(WebCore *this)
{
  return MEMORY[0x1F4170420](this);
}

uint64_t WebCore::populateJITOperations(WebCore *this)
{
  return MEMORY[0x1F4170428](this);
}

uint64_t WebCore::releaseGraphicsMemory()
{
  return MEMORY[0x1F4170430]();
}

uint64_t WebCore::resolveCharacterRange()
{
  return MEMORY[0x1F4170438]();
}

uint64_t WebCore::sendCOEPCORPViolation()
{
  return MEMORY[0x1F4170440]();
}

uint64_t WebCore::setPlatformStrategies(WebCore *this, WebCore::PlatformStrategies *a2)
{
  return MEMORY[0x1F4170448](this, a2);
}

uint64_t WebCore::toCAValueFunctionType()
{
  return MEMORY[0x1F4170450]();
}

uint64_t WebCore::wordRangeFromPosition()
{
  return MEMORY[0x1F4170458]();
}

uint64_t WebCore::AcceleratedEffectStack::setEffects()
{
  return MEMORY[0x1F4170460]();
}

uint64_t WebCore::AcceleratedEffectStack::setBaseValues()
{
  return MEMORY[0x1F4170468]();
}

uint64_t WebCore::AcceleratedEffectStack::AcceleratedEffectStack(WebCore::AcceleratedEffectStack *this)
{
  return MEMORY[0x1F4170470](this);
}

uint64_t WebCore::AudioOutputUnitAdaptor::stop(WebCore::AudioOutputUnitAdaptor *this)
{
  return MEMORY[0x1F4170478](this);
}

uint64_t WebCore::AudioOutputUnitAdaptor::start(WebCore::AudioOutputUnitAdaptor *this)
{
  return MEMORY[0x1F4170480](this);
}

uint64_t WebCore::AudioOutputUnitAdaptor::configure(WebCore::AudioOutputUnitAdaptor *this, float a2)
{
  return MEMORY[0x1F4170488](this, a2);
}

uint64_t WebCore::AudioOutputUnitAdaptor::AudioOutputUnitAdaptor()
{
  return MEMORY[0x1F4170490]();
}

void WebCore::AudioOutputUnitAdaptor::~AudioOutputUnitAdaptor(WebCore::AudioOutputUnitAdaptor *this)
{
}

uint64_t WebCore::CSPViolationReportBody::create()
{
  return MEMORY[0x1F41704A0]();
}

uint64_t WebCore::FontCustomPlatformData::tryMakeFromSerializationData()
{
  return MEMORY[0x1F41704B8]();
}

void WebCore::FontCustomPlatformData::~FontCustomPlatformData(WebCore::FontCustomPlatformData *this)
{
}

uint64_t WebCore::FragmentedSharedBuffer::fromIPCData()
{
  return MEMORY[0x1F41704C8]();
}

uint64_t WebCore::FragmentedSharedBuffer::append()
{
  return MEMORY[0x1F41704D0]();
}

uint64_t WebCore::FragmentedSharedBuffer::create()
{
  return MEMORY[0x1F41704D8]();
}

{
  return MEMORY[0x1F41704E0]();
}

{
  return MEMORY[0x1F41704E8]();
}

uint64_t WebCore::FragmentedSharedBuffer::create(WebCore::FragmentedSharedBuffer *this, NSData *a2)
{
  return MEMORY[0x1F41704F0](this, a2);
}

uint64_t WebCore::FragmentedSharedBuffer::create(WebCore::FragmentedSharedBuffer *this, const __CFData *a2)
{
  return MEMORY[0x1F41704F8](this, a2);
}

uint64_t WebCore::FragmentedSharedBuffer::create(WebCore::FragmentedSharedBuffer *this)
{
  return MEMORY[0x1F4170500](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::beginQuery(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170508](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::bindBuffer(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170510](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::blendColor(WebCore::GraphicsContextGLANGLE *this, float a2, float a3, float a4, float a5)
{
  return MEMORY[0x1F4170518](this, a2, a3, a4, a5);
}

uint64_t WebCore::GraphicsContextGLANGLE::bufferData()
{
  return MEMORY[0x1F4170520]();
}

uint64_t WebCore::GraphicsContextGLANGLE::bufferData(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170528](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::clearColor(WebCore::GraphicsContextGLANGLE *this, float a2, float a3, float a4, float a5)
{
  return MEMORY[0x1F4170530](this, a2, a3, a4, a5);
}

uint64_t WebCore::GraphicsContextGLANGLE::clearDepth(WebCore::GraphicsContextGLANGLE *this, float a2)
{
  return MEMORY[0x1F4170538](this, a2);
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteSync(WebCore::GraphicsContextGLANGLE *this, void *a2)
{
  return MEMORY[0x1F4170540](this, a2);
}

uint64_t WebCore::GraphicsContextGLANGLE::depthRange(WebCore::GraphicsContextGLANGLE *this, float a2, float a3)
{
  return MEMORY[0x1F4170548](this, a2, a3);
}

uint64_t WebCore::GraphicsContextGLANGLE::drawArrays(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170550](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::enableiOES(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170558](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getShaderi(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170560](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::isQueryEXT(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170568](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::readBuffer(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170570](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::texImage2D()
{
  return MEMORY[0x1F4170578]();
}

uint64_t WebCore::GraphicsContextGLANGLE::texImage2D(WebCore::GraphicsContextGLANGLE *this, unsigned int a2, int a3, unsigned int a4, int a5, int a6, int a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  return MEMORY[0x1F4170580](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::texImage3D()
{
  return MEMORY[0x1F4170588]();
}

uint64_t WebCore::GraphicsContextGLANGLE::texImage3D(WebCore::GraphicsContextGLANGLE *this, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, unsigned int a10, uint64_t a11)
{
  return MEMORY[0x1F4170590](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform1fv()
{
  return MEMORY[0x1F4170598]();
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform1iv()
{
  return MEMORY[0x1F41705A0]();
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform1ui(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41705A8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform2fv()
{
  return MEMORY[0x1F41705B0]();
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform2iv()
{
  return MEMORY[0x1F41705B8]();
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform2ui(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41705C0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform3fv()
{
  return MEMORY[0x1F41705C8]();
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform3iv()
{
  return MEMORY[0x1F41705D0]();
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform3ui(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41705D8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform4fv()
{
  return MEMORY[0x1F41705E0]();
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform4iv()
{
  return MEMORY[0x1F41705E8]();
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform4ui(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41705F0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::useProgram(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41705F8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::bindSampler(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170600](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::bindTexture(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170608](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::createQuery(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170610](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteQuery(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170618](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::disableiOES(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170620](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::drawBuffers()
{
  return MEMORY[0x1F4170628]();
}

uint64_t WebCore::GraphicsContextGLANGLE::endQueryEXT(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170630](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getBooleanv()
{
  return MEMORY[0x1F4170638]();
}

uint64_t WebCore::GraphicsContextGLANGLE::getIntegerv()
{
  return MEMORY[0x1F4170640]();
}

uint64_t WebCore::GraphicsContextGLANGLE::getProgrami(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170648](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::linkProgram(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170650](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::pixelStorei(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170658](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::stencilFunc(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170660](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::stencilMask(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170668](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform1uiv()
{
  return MEMORY[0x1F4170670]();
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform2uiv()
{
  return MEMORY[0x1F4170678]();
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform3uiv()
{
  return MEMORY[0x1F4170680]();
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform4uiv()
{
  return MEMORY[0x1F4170688]();
}

uint64_t WebCore::GraphicsContextGLANGLE::attachShader(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170690](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::clearStencil(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170698](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::createBuffer(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41706A0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::createShader(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41706A8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteBuffer(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41706B0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteShader(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41706B8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::detachShader(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41706C0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::drawElements(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41706C8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getInteger64(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41706D0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getQueryiEXT(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41706D8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getUniformfv()
{
  return MEMORY[0x1F41706E0]();
}

uint64_t WebCore::GraphicsContextGLANGLE::getUniformiv()
{
  return MEMORY[0x1F41706E8]();
}

uint64_t WebCore::GraphicsContextGLANGLE::shaderSource(WebCore::GraphicsContextGLANGLE *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1F41706F0](this, a2, a3);
}

uint64_t WebCore::GraphicsContextGLANGLE::texStorage2D(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41706F8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::texStorage3D(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170700](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::activeTexture(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170708](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::beginQueryEXT(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170710](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::blendEquation(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170718](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::blendFunciOES(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170720](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::bufferSubData()
{
  return MEMORY[0x1F4170728]();
}

uint64_t WebCore::GraphicsContextGLANGLE::clearBufferfi(WebCore::GraphicsContextGLANGLE *this, float a2)
{
  return MEMORY[0x1F4170730](this, a2);
}

uint64_t WebCore::GraphicsContextGLANGLE::clearBufferfv()
{
  return MEMORY[0x1F4170738]();
}

uint64_t WebCore::GraphicsContextGLANGLE::clearBufferiv()
{
  return MEMORY[0x1F4170740]();
}

uint64_t WebCore::GraphicsContextGLANGLE::colorMaskiOES(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170748](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::compileShader(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170750](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::createProgram(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170758](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::createSampler(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170760](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::createTexture(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170768](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteProgram(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170770](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteSampler(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170778](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteTexture(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170780](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getInteger64i(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170788](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getIntegeri_v()
{
  return MEMORY[0x1F4170790]();
}

uint64_t WebCore::GraphicsContextGLANGLE::getUniformuiv()
{
  return MEMORY[0x1F4170798]();
}

uint64_t WebCore::GraphicsContextGLANGLE::isFramebuffer(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41707A0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::isVertexArray(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41707A8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::polygonOffset(WebCore::GraphicsContextGLANGLE *this, float a2, float a3)
{
  return MEMORY[0x1F41707B0](this, a2, a3);
}

uint64_t WebCore::GraphicsContextGLANGLE::texParameterf(WebCore::GraphicsContextGLANGLE *this, float a2)
{
  return MEMORY[0x1F41707B8](this, a2);
}

uint64_t WebCore::GraphicsContextGLANGLE::texParameteri(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41707C0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::texSubImage2D()
{
  return MEMORY[0x1F41707C8]();
}

uint64_t WebCore::GraphicsContextGLANGLE::texSubImage2D(WebCore::GraphicsContextGLANGLE *this, unsigned int a2, int a3, int a4, int a5, int a6, int a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  return MEMORY[0x1F41707D0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::texSubImage3D()
{
  return MEMORY[0x1F41707D8]();
}

uint64_t WebCore::GraphicsContextGLANGLE::texSubImage3D(WebCore::GraphicsContextGLANGLE *this, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, unsigned int a11, uint64_t a12)
{
  return MEMORY[0x1F41707E0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::bindBufferBase(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41707E8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::clearBufferuiv()
{
  return MEMORY[0x1F41707F0]();
}

uint64_t WebCore::GraphicsContextGLANGLE::clientWaitSync(WebCore::GraphicsContextGLANGLE *this, void *a2)
{
  return MEMORY[0x1F41707F8](this, a2);
}

uint64_t WebCore::GraphicsContextGLANGLE::clipControlEXT(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170800](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::copyTexImage2D(WebCore::GraphicsContextGLANGLE *this, unsigned int a2, int a3, unsigned int a4, int a5, int a6, int a7, int a8, int a9)
{
  return MEMORY[0x1F4170808](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::createQueryEXT(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170810](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteQueryEXT(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170818](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::generateMipmap(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170820](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::isRenderbuffer(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170828](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::sampleCoverage(WebCore::GraphicsContextGLANGLE *this, float a2)
{
  return MEMORY[0x1F4170830](this, a2);
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttrib1f(WebCore::GraphicsContextGLANGLE *this, float a2)
{
  return MEMORY[0x1F4170838](this, a2);
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttrib2f(WebCore::GraphicsContextGLANGLE *this, float a2, float a3)
{
  return MEMORY[0x1F4170840](this, a2, a3);
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttrib3f(WebCore::GraphicsContextGLANGLE *this, float a2, float a3, float a4)
{
  return MEMORY[0x1F4170848](this, a2, a3, a4);
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttrib4f(WebCore::GraphicsContextGLANGLE *this, float a2, float a3, float a4, float a5)
{
  return MEMORY[0x1F4170850](this, a2, a3, a4, a5);
}

uint64_t WebCore::GraphicsContextGLANGLE::bindBufferRange(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170858](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::bindFramebuffer(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170860](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::bindVertexArray(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170868](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::blitFramebuffer(WebCore::GraphicsContextGLANGLE *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, unsigned int a11)
{
  return MEMORY[0x1F4170870](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getActiveAttrib()
{
  return MEMORY[0x1F4170878]();
}

uint64_t WebCore::GraphicsContextGLANGLE::getInteger64EXT(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170880](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getShaderSource(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170888](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::queryCounterEXT(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170890](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::validateProgram(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170898](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttrib1fv()
{
  return MEMORY[0x1F41708A0]();
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttrib2fv()
{
  return MEMORY[0x1F41708A8]();
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttrib3fv()
{
  return MEMORY[0x1F41708B0]();
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttrib4fv()
{
  return MEMORY[0x1F41708B8]();
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttribI4i(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41708C0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::bindRenderbuffer(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41708C8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getActiveUniform()
{
  return MEMORY[0x1F41708D0]();
}

uint64_t WebCore::GraphicsContextGLANGLE::getQueryObjectui(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41708D8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getShaderInfoLog(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41708E0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getTexParameterf(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41708E8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getTexParameteri(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41708F0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::polygonModeANGLE(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41708F8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformMatrix2fv()
{
  return MEMORY[0x1F4170900]();
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformMatrix3fv()
{
  return MEMORY[0x1F4170908]();
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformMatrix4fv()
{
  return MEMORY[0x1F4170910]();
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttribI4iv()
{
  return MEMORY[0x1F4170918]();
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttribI4ui(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170920](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::blendEquationiOES(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170928](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::blendFuncSeparate(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170930](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::copyBufferSubData(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170938](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::copyTexSubImage2D(WebCore::GraphicsContextGLANGLE *this, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  return MEMORY[0x1F4170940](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::copyTexSubImage3D(WebCore::GraphicsContextGLANGLE *this, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  return MEMORY[0x1F4170948](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::createFramebuffer(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170950](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::createVertexArray(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170958](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteFramebuffer(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170960](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteVertexArray(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170968](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::drawRangeElements(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170970](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getActiveUniforms()
{
  return MEMORY[0x1F4170978]();
}

uint64_t WebCore::GraphicsContextGLANGLE::getAttribLocation(WebCore::GraphicsContextGLANGLE *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1F4170980](this, a2, a3);
}

uint64_t WebCore::GraphicsContextGLANGLE::getProgramInfoLog(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170988](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getUniformIndices()
{
  return MEMORY[0x1F4170990]();
}

uint64_t WebCore::GraphicsContextGLANGLE::samplerParameterf(WebCore::GraphicsContextGLANGLE *this, float a2)
{
  return MEMORY[0x1F4170998](this, a2);
}

uint64_t WebCore::GraphicsContextGLANGLE::samplerParameteri(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41709A0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::stencilOpSeparate(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41709A8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttribI4uiv()
{
  return MEMORY[0x1F41709B0]();
}

uint64_t WebCore::GraphicsContextGLANGLE::bindAttribLocation(WebCore::GraphicsContextGLANGLE *this, uint64_t a2, uint64_t a3, const WTF::String *a4)
{
  return MEMORY[0x1F41709B8](this, a2, a3, a4);
}

uint64_t WebCore::GraphicsContextGLANGLE::createRenderbuffer(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41709C0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteExternalSync(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41709C8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteRenderbuffer(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41709D0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getQueryObjectiEXT(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F41709D8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getUniformLocation(WebCore::GraphicsContextGLANGLE *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1F41709E0](this, a2, a3);
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformMatrix2x3fv()
{
  return MEMORY[0x1F41709E8]();
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformMatrix2x4fv()
{
  return MEMORY[0x1F41709F0]();
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformMatrix3x2fv()
{
  return MEMORY[0x1F41709F8]();
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformMatrix3x4fv()
{
  return MEMORY[0x1F4170A00]();
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformMatrix4x2fv()
{
  return MEMORY[0x1F4170A08]();
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformMatrix4x3fv()
{
  return MEMORY[0x1F4170A10]();
}

uint64_t WebCore::GraphicsContextGLANGLE::drawArraysInstanced(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170A18](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getBufferParameteri(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170A20](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getFragDataLocation(WebCore::GraphicsContextGLANGLE *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1F4170A28](this, a2, a3);
}

uint64_t WebCore::GraphicsContextGLANGLE::getInternalformativ()
{
  return MEMORY[0x1F4170A30]();
}

uint64_t WebCore::GraphicsContextGLANGLE::isTransformFeedback(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170A38](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::renderbufferStorage(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170A40](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::stencilFuncSeparate(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170A48](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::stencilMaskSeparate(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170A50](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformBlockBinding(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170A58](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttribDivisor(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170A60](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttribPointer(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170A68](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::compressedTexImage2D()
{
  return MEMORY[0x1F4170A70]();
}

uint64_t WebCore::GraphicsContextGLANGLE::compressedTexImage2D(WebCore::GraphicsContextGLANGLE *this, unsigned int a2, int a3, unsigned int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  return MEMORY[0x1F4170A78](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::compressedTexImage3D()
{
  return MEMORY[0x1F4170A80]();
}

uint64_t WebCore::GraphicsContextGLANGLE::compressedTexImage3D(WebCore::GraphicsContextGLANGLE *this, unsigned int a2, int a3, unsigned int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10)
{
  return MEMORY[0x1F4170A88](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::endTransformFeedback(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170A90](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::framebufferTexture2D(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170A98](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getSamplerParameterf(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170AA0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getSamplerParameteri(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170AA8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getUniformBlockIndex(WebCore::GraphicsContextGLANGLE *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1F4170AB0](this, a2, a3);
}

uint64_t WebCore::GraphicsContextGLANGLE::multiDrawArraysANGLE()
{
  return MEMORY[0x1F4170AB8]();
}

uint64_t WebCore::GraphicsContextGLANGLE::provokingVertexANGLE(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170AC0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::readPixelsWithStatus()
{
  return MEMORY[0x1F4170AC8]();
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttribIPointer(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170AD0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::bindTransformFeedback(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170AD8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::blendEquationSeparate(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170AE0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::blendFuncSeparateiOES(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170AE8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::drawElementsInstanced(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170AF0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getQueryObjectui64EXT(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170AF8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getVertexAttribOffset(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170B00](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::invalidateFramebuffer()
{
  return MEMORY[0x1F4170B08]();
}

uint64_t WebCore::GraphicsContextGLANGLE::polygonOffsetClampEXT(WebCore::GraphicsContextGLANGLE *this, float a2, float a3, float a4)
{
  return MEMORY[0x1F4170B10](this, a2, a3, a4);
}

uint64_t WebCore::GraphicsContextGLANGLE::beginTransformFeedback(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170B18](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::checkFramebufferStatus(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170B20](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::multiDrawElementsANGLE()
{
  return MEMORY[0x1F4170B28]();
}

uint64_t WebCore::GraphicsContextGLANGLE::pauseTransformFeedback(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170B30](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::readPixelsBufferObject(WebCore::GraphicsContextGLANGLE *this, IntRect a2)
{
  return MEMORY[0x1F4170B38](this, *(void *)&a2.m_location, *(void *)&a2.m_size);
}

uint64_t WebCore::GraphicsContextGLANGLE::compressedTexSubImage2D()
{
  return MEMORY[0x1F4170B48]();
}

uint64_t WebCore::GraphicsContextGLANGLE::compressedTexSubImage2D(WebCore::GraphicsContextGLANGLE *this, unsigned int a2, int a3, int a4, int a5, int a6, int a7, unsigned int a8, int a9, uint64_t a10)
{
  return MEMORY[0x1F4170B50](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::compressedTexSubImage3D()
{
  return MEMORY[0x1F4170B58]();
}

uint64_t WebCore::GraphicsContextGLANGLE::compressedTexSubImage3D(WebCore::GraphicsContextGLANGLE *this, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, int a11, uint64_t a12)
{
  return MEMORY[0x1F4170B60](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::createTransformFeedback(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170B68](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteTransformFeedback(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170B70](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::enableVertexAttribArray(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170B78](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::framebufferRenderbuffer(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170B80](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::framebufferTextureLayer(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170B88](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getActiveUniformBlockiv()
{
  return MEMORY[0x1F4170B90]();
}

uint64_t WebCore::GraphicsContextGLANGLE::resumeTransformFeedback(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170B98](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::disableVertexAttribArray(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170BA0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getShaderPrecisionFormat()
{
  return MEMORY[0x1F4170BA8]();
}

uint64_t WebCore::GraphicsContextGLANGLE::invalidateSubFramebuffer()
{
  return MEMORY[0x1F4170BB0]();
}

uint64_t WebCore::GraphicsContextGLANGLE::blendEquationSeparateiOES(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170BB8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getActiveUniformBlockName(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170BC0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getRenderbufferParameteri(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170BC8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::transformFeedbackVaryings()
{
  return MEMORY[0x1F4170BD0]();
}

uint64_t WebCore::GraphicsContextGLANGLE::getBufferSubDataWithStatus()
{
  return MEMORY[0x1F4170BD8]();
}

uint64_t WebCore::GraphicsContextGLANGLE::getTransformFeedbackVarying()
{
  return MEMORY[0x1F4170BE0]();
}

uint64_t WebCore::GraphicsContextGLANGLE::multiDrawArraysInstancedANGLE()
{
  return MEMORY[0x1F4170BE8]();
}

uint64_t WebCore::GraphicsContextGLANGLE::renderbufferStorageMultisample(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170BF0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::multiDrawElementsInstancedANGLE()
{
  return MEMORY[0x1F4170BF8]();
}

uint64_t WebCore::GraphicsContextGLANGLE::getFramebufferAttachmentParameteri(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170C00](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::renderbufferStorageMultisampleANGLE(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170C08](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::drawArraysInstancedBaseInstanceANGLE(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170C10](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::multiDrawArraysInstancedBaseInstanceANGLE()
{
  return MEMORY[0x1F4170C18]();
}

uint64_t WebCore::GraphicsContextGLANGLE::drawElementsInstancedBaseVertexBaseInstanceANGLE(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170C20](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::hint(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170C28](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::multiDrawElementsInstancedBaseVertexBaseInstanceANGLE()
{
  return MEMORY[0x1F4170C30]();
}

uint64_t WebCore::GraphicsContextGLANGLE::clear(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170C38](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::flush(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170C40](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::enable(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170C48](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::finish(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170C50](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::isSync(WebCore::GraphicsContextGLANGLE *this, void *a2)
{
  return MEMORY[0x1F4170C58](this, a2);
}

uint64_t WebCore::GraphicsContextGLANGLE::disable(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170C60](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::isQuery(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170C68](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::scissor(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170C78](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::addError()
{
  return MEMORY[0x1F4170C80]();
}

uint64_t WebCore::GraphicsContextGLANGLE::cullFace(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170C88](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::endQuery(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170C90](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getQuery(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170C98](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getSynci(WebCore::GraphicsContextGLANGLE *this, void *a2)
{
  return MEMORY[0x1F4170CA0](this, a2);
}

uint64_t WebCore::GraphicsContextGLANGLE::isBuffer(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170CA8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::isShader(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170CB0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::viewport(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170CB8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::waitSync(WebCore::GraphicsContextGLANGLE *this, void *a2)
{
  return MEMORY[0x1F4170CC0](this, a2);
}

uint64_t WebCore::GraphicsContextGLANGLE::blendFunc(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170CC8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::colorMask(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170CD0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::depthFunc(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170CD8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::depthMask(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170CE0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::fenceSync(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170CE8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::frontFace(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170CF0](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getErrors(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170CF8](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::getFloatv()
{
  return MEMORY[0x1F4170D00]();
}

uint64_t WebCore::GraphicsContextGLANGLE::getString(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170D08](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::isEnabled(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170D10](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::isProgram(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170D18](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::isSampler(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170D20](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::isTexture(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170D28](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::lineWidth(WebCore::GraphicsContextGLANGLE *this, float a2)
{
  return MEMORY[0x1F4170D30](this, a2);
}

uint64_t WebCore::GraphicsContextGLANGLE::stencilOp(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170D38](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform1f(WebCore::GraphicsContextGLANGLE *this, float a2)
{
  return MEMORY[0x1F4170D40](this, a2);
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform1i(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170D48](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform2f(WebCore::GraphicsContextGLANGLE *this, float a2, float a3)
{
  return MEMORY[0x1F4170D50](this, a2, a3);
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform2i(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170D58](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform3f(WebCore::GraphicsContextGLANGLE *this, float a2, float a3, float a4)
{
  return MEMORY[0x1F4170D60](this, a2, a3, a4);
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform3i(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170D68](this);
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform4f(WebCore::GraphicsContextGLANGLE *this, float a2, float a3, float a4, float a5)
{
  return MEMORY[0x1F4170D70](this, a2, a3, a4, a5);
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform4i(WebCore::GraphicsContextGLANGLE *this)
{
  return MEMORY[0x1F4170D78](this);
}

uint64_t WebCore::GraphicsContextGLCocoa::displayBufferSurface(WebCore::GraphicsContextGLCocoa *this)
{
  return MEMORY[0x1F4170D80](this);
}

uint64_t WebCore::GraphicsContextGLCocoa::surfaceBufferToVideoFrame()
{
  return MEMORY[0x1F4170D88]();
}

uint64_t WebCore::GraphicsContextGLCocoa::setDrawingBufferColorSpace(WebCore::GraphicsContextGLCocoa *this, const WebCore::DestinationColorSpace *a2)
{
  return MEMORY[0x1F4170D90](this, a2);
}

uint64_t WebCore::GraphicsContextGLCocoa::externalImageTextureBindingPoint(WebCore::GraphicsContextGLCocoa *this)
{
  return MEMORY[0x1F4170D98](this);
}

uint64_t WebCore::GraphicsContextGLCocoa::prepareForDisplayWithFinishedSignal()
{
  return MEMORY[0x1F4170DA0]();
}

uint64_t WebCore::GraphicsContextGLCocoa::asCV(WebCore::GraphicsContextGLCocoa *this)
{
  return MEMORY[0x1F4170DA8](this);
}

uint64_t WebCore::GraphicsContextGLCocoa::create()
{
  return MEMORY[0x1F4170DB0]();
}

uint64_t WebCore::HistoricalVelocityData::velocityForNewData()
{
  return MEMORY[0x1F4170DD8]();
}

uint64_t WebCore::ImageRotationSessionVT::rotate()
{
  return MEMORY[0x1F4170DE8]();
}

void WebCore::LibWebRTCProviderCocoa::~LibWebRTCProviderCocoa(WebCore::LibWebRTCProviderCocoa *this)
{
}

uint64_t WebCore::MediaSessionManageriOS::providePresentingApplicationPID(WebCore::MediaSessionManageriOS *this)
{
  return MEMORY[0x1F4170E00](this);
}

uint64_t WebCore::MutableStyleProperties::ensureCSSStyleDeclaration(WebCore::MutableStyleProperties *this)
{
  return MEMORY[0x1F4170E08](this);
}

void WebCore::MutableStyleProperties::~MutableStyleProperties(WebCore::MutableStyleProperties *this)
{
}

uint64_t WebCore::NotificationController::supplementName(WebCore::NotificationController *this)
{
  return MEMORY[0x1F4170E20](this);
}

uint64_t WebCore::NullImageBufferBackend::create()
{
  return MEMORY[0x1F4170E28]();
}

void WebCore::NullImageBufferBackend::~NullImageBufferBackend(WebCore::NullImageBufferBackend *this)
{
}

uint64_t WebCore::PixelBufferConformerCV::imageFrom32BGRAPixelBuffer()
{
  return MEMORY[0x1F4170E38]();
}

uint64_t WebCore::PixelBufferConformerCV::convert(WebCore::PixelBufferConformerCV *this, __CVBuffer *a2)
{
  return MEMORY[0x1F4170E40](this, a2);
}

uint64_t WebCore::PixelBufferConformerCV::PixelBufferConformerCV(WebCore::PixelBufferConformerCV *this, const __CFDictionary *a2)
{
  return MEMORY[0x1F4170E48](this, a2);
}

uint64_t WebCore::ReferencePathOperation::create()
{
  return MEMORY[0x1F4170E50]();
}

uint64_t WebCore::ResourceLoadStatistics::reduceTimeResolution()
{
  return MEMORY[0x1F4170E58]();
}

uint64_t WebCore::SWRegistrationDatabase::SWRegistrationDatabase(WebCore::SWRegistrationDatabase *this, const WTF::String *a2)
{
  return MEMORY[0x1F4170E78](this, a2);
}

void WebCore::SWRegistrationDatabase::~SWRegistrationDatabase(WebCore::SWRegistrationDatabase *this)
{
}

uint64_t WebCore::ScriptExecutionContext::postTaskTo()
{
  return MEMORY[0x1F4170E88]();
}

uint64_t WebCore::ScriptExecutionContext::setCrossOriginMode()
{
  return MEMORY[0x1F4170E90]();
}

uint64_t WebCore::ScriptExecutionContext::ensureOnContextThread()
{
  return MEMORY[0x1F4170E98]();
}

uint64_t WebCore::ScriptExecutionContext::addNotificationCallback()
{
  return MEMORY[0x1F4170EA0]();
}

uint64_t WebCore::ScriptExecutionContext::takeNotificationCallback()
{
  return MEMORY[0x1F4170EA8]();
}

uint64_t WebCore::SharedAudioDestination::create()
{
  return MEMORY[0x1F4170EB0]();
}

uint64_t WebCore::SkewTransformOperation::create()
{
  return MEMORY[0x1F4170EB8]();
}

uint64_t WebCore::StorageEventDispatcher::dispatchLocalStorageEvents()
{
  return MEMORY[0x1F4170EC0]();
}

uint64_t WebCore::StorageEventDispatcher::dispatchSessionStorageEvents()
{
  return MEMORY[0x1F4170EC8]();
}

uint64_t WebCore::buildAttestationObject()
{
  return MEMORY[0x1F4170EF8]();
}

uint64_t WebCore::counterValueForElement()
{
  return MEMORY[0x1F4170F00]();
}

uint64_t WebCore::createBlackPixelBuffer(WebCore *this)
{
  return MEMORY[0x1F4170F08](this);
}

uint64_t WebCore::createFragmentFromText()
{
  return MEMORY[0x1F4170F10]();
}

uint64_t WebCore::externalRepresentation()
{
  return MEMORY[0x1F4170F20]();
}

uint64_t WebCore::makeRangeSelectingNode(WebCore *this, Node *a2)
{
  return MEMORY[0x1F4170F28](this, a2);
}

uint64_t WebCore::matchesWildcardPattern(WebCore *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F4170F30](this, a2, a3);
}

uint64_t WebCore::multipleFileUploadText(WebCore *this)
{
  return MEMORY[0x1F4170F38](this);
}

uint64_t WebCore::setContentSizeCategory(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1F4170F40](this, a2);
}

uint64_t WebCore::startOfEditableContent()
{
  return MEMORY[0x1F4170F48]();
}

uint64_t WebCore::validateHEVCParameters()
{
  return MEMORY[0x1F4170F50]();
}

uint64_t WebCore::ApplicationCacheStorage::deleteAllCaches(WebCore::ApplicationCacheStorage *this)
{
  return MEMORY[0x1F4170F58](this);
}

uint64_t WebCore::ApplicationCacheStorage::ApplicationCacheStorage(WebCore::ApplicationCacheStorage *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F4170F60](this, a2, a3);
}

uint64_t WebCore::AuthenticationChallenge::AuthenticationChallenge(WebCore::AuthenticationChallenge *this, NSURLAuthenticationChallenge *a2)
{
  return MEMORY[0x1F4170F68](this, a2);
}

uint64_t WebCore::AuthenticationChallenge::AuthenticationChallenge(WebCore::AuthenticationChallenge *this, const WebCore::ProtectionSpace *a2, const WebCore::Credential *a3, uint64_t a4, const WebCore::ResourceResponse *a5, const WebCore::ResourceError *a6)
{
  return MEMORY[0x1F4170F70](this, a2, a3, a4, a5, a6);
}

uint64_t WebCore::CORPViolationReportBody::create()
{
  return MEMORY[0x1F4170F78]();
}

void WebCore::DetachedOffscreenCanvas::~DetachedOffscreenCanvas(WebCore::DetachedOffscreenCanvas *this)
{
}

uint64_t WebCore::FragmentDirectiveParser::FragmentDirectiveParser()
{
  return MEMORY[0x1F4170F88]();
}

void WebCore::FragmentDirectiveParser::~FragmentDirectiveParser(WebCore::FragmentDirectiveParser *this)
{
}

uint64_t WebCore::GeolocationPositionData::GeolocationPositionData(WebCore::GeolocationPositionData *this, CLLocation *a2)
{
  return MEMORY[0x1F4170F98](this, a2);
}

uint64_t WebCore::MediaPlaybackTargetMock::create()
{
  return MEMORY[0x1F4170FC0]();
}

uint64_t WebCore::MediaStreamTrackPrivate::source(WebCore::MediaStreamTrackPrivate *this)
{
  return MEMORY[0x1F4170FC8](this);
}

void WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(WebCore::MediaStreamTrackPrivate *this)
{
}

uint64_t WebCore::PrivateClickMeasurement::setSourceSecretToken()
{
  return MEMORY[0x1F4170FD8]();
}

uint64_t WebCore::PrivateClickMeasurement::parseAttributionRequest(WebCore::PrivateClickMeasurement *this, const WTF::URL *a2)
{
  return MEMORY[0x1F4170FE0](this, a2);
}

uint64_t WebCore::PrivateClickMeasurement::setEphemeralSourceNonce()
{
  return MEMORY[0x1F4170FE8]();
}

uint64_t WebCore::PrivateClickMeasurement::hasPreviouslyBeenReported(WebCore::PrivateClickMeasurement *this)
{
  return MEMORY[0x1F4170FF0](this);
}

uint64_t WebCore::PrivateClickMeasurement::setDestinationSecretToken()
{
  return MEMORY[0x1F4170FF8]();
}

uint64_t WebCore::PrivateClickMeasurement::attributeAndGetEarliestTimeToSend()
{
  return MEMORY[0x1F4171000]();
}

uint64_t WebCore::PrivateClickMeasurement::calculateAndUpdateSourceSecretToken(WebCore::PrivateClickMeasurement *this, const WTF::String *a2)
{
  return MEMORY[0x1F4171008](this, a2);
}

uint64_t WebCore::PrivateClickMeasurement::setSourceApplicationBundleIDForTesting(WebCore::PrivateClickMeasurement *this, const WTF::String *a2)
{
  return MEMORY[0x1F4171010](this, a2);
}

uint64_t WebCore::PrivateClickMeasurement::calculateAndUpdateSourceUnlinkableToken(WebCore::PrivateClickMeasurement *this, const WTF::String *a2)
{
  return MEMORY[0x1F4171018](this, a2);
}

uint64_t WebCore::PrivateClickMeasurement::calculateAndUpdateDestinationSecretToken()
{
  return MEMORY[0x1F4171020]();
}

uint64_t WebCore::PrivateClickMeasurement::calculateAndUpdateDestinationUnlinkableToken(WebCore::PrivateClickMeasurement *this, const WTF::String *a2)
{
  return MEMORY[0x1F4171028](this, a2);
}

uint64_t WebCore::PrivateClickMeasurement::isNeitherSameSiteNorCrossSiteTriggeringEvent()
{
  return MEMORY[0x1F4171030]();
}

uint64_t WebCore::PrivateClickMeasurement::maxAge(WebCore::PrivateClickMeasurement *this)
{
  return MEMORY[0x1F4171038](this);
}

uint64_t WebCore::ScaleTransformOperation::create()
{
  return MEMORY[0x1F4171040]();
}

uint64_t WebCore::ScrollingStateFixedNode::ScrollingStateFixedNode()
{
  return MEMORY[0x1F4171048]();
}

uint64_t WebCore::ServiceWorkerClientData::from()
{
  return MEMORY[0x1F4171050]();
}

uint64_t WebCore::ShareableResourceHandle::ShareableResourceHandle()
{
  return MEMORY[0x1F4171058]();
}

uint64_t WebCore::SharedWorkerThreadProxy::hasInstances(WebCore::SharedWorkerThreadProxy *this)
{
  return MEMORY[0x1F4171060](this);
}

uint64_t WebCore::SharedWorkerThreadProxy::SharedWorkerThreadProxy()
{
  return MEMORY[0x1F4171068]();
}

void WebCore::SharedWorkerThreadProxy::~SharedWorkerThreadProxy(WebCore::SharedWorkerThreadProxy *this)
{
}

uint64_t WebCore::SpeechRecognitionUpdate::createError()
{
  return MEMORY[0x1F4171078]();
}

uint64_t WebCore::SpeechRecognitionUpdate::create()
{
  return MEMORY[0x1F4171080]();
}

uint64_t WebCore::SpeechRecognitionUpdate::SpeechRecognitionUpdate()
{
  return MEMORY[0x1F4171088]();
}

uint64_t WebCore::VideoFullscreenCaptions::setCaptionsFrame(WebCore::VideoFullscreenCaptions *this, const CGRect *a2)
{
  return MEMORY[0x1F4171090](this, a2);
}

uint64_t WebCore::VideoFullscreenCaptions::removeCaptionsLayer(WebCore::VideoFullscreenCaptions *this)
{
  return MEMORY[0x1F4171098](this);
}

uint64_t WebCore::VideoFullscreenCaptions::setTrackRepresentationImage()
{
  return MEMORY[0x1F41710A0]();
}

uint64_t WebCore::VideoFullscreenCaptions::setTrackRepresentationHidden(WebCore::VideoFullscreenCaptions *this)
{
  return MEMORY[0x1F41710A8](this);
}

uint64_t WebCore::VideoFullscreenCaptions::setTrackRepresentationContentsScale(WebCore::VideoFullscreenCaptions *this, float a2)
{
  return MEMORY[0x1F41710B0](this, a2);
}

uint64_t WebCore::atBoundaryOfGranularity()
{
  return MEMORY[0x1F41710B8]();
}

uint64_t WebCore::buildClientDataJsonHash(WebCore *this, const JSC::ArrayBuffer *a2)
{
  return MEMORY[0x1F41710C8](this, a2);
}

uint64_t WebCore::collectScreenProperties(WebCore *this)
{
  return MEMORY[0x1F41710D0](this);
}

uint64_t WebCore::computeSharedStringHash(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1F41710E0](this, a2);
}

uint64_t WebCore::parseAVCCodecParameters()
{
  return MEMORY[0x1F41710F8]();
}

uint64_t WebCore::provideMediaKeySystemTo()
{
  return MEMORY[0x1F4171100]();
}

uint64_t WebCore::readSerializedCryptoKey()
{
  return MEMORY[0x1F4171108]();
}

uint64_t WebCore::setAuxiliaryProcessType()
{
  return MEMORY[0x1F4171110]();
}

uint64_t WebCore::setLocalizedDeviceModel(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1F4171118](this, a2);
}

uint64_t WebCore::toCAMediaTimingFunction()
{
  return MEMORY[0x1F4171120]();
}

uint64_t WebCore::wrapSerializedCryptoKey()
{
  return MEMORY[0x1F4171128]();
}

uint64_t WebCore::CAAudioStreamDescription::streamDescription(WebCore::CAAudioStreamDescription *this)
{
  return MEMORY[0x1F4171130](this);
}

{
  return MEMORY[0x1F4175A58](this);
}

uint64_t WebCore::CAAudioStreamDescription::CAAudioStreamDescription(WebCore::CAAudioStreamDescription *this, const AudioStreamBasicDescription *a2)
{
  return MEMORY[0x1F4171138](this, a2);
}

void WebCore::CAAudioStreamDescription::~CAAudioStreamDescription(WebCore::CAAudioStreamDescription *this)
{
}

uint64_t WebCore::CachedResourceHandleBase::CachedResourceHandleBase(WebCore::CachedResourceHandleBase *this, WebCore::CachedResource *a2)
{
  return MEMORY[0x1F4171148](this, a2);
}

uint64_t WebCore::CachedResourceHandleBase::CachedResourceHandleBase(WebCore::CachedResourceHandleBase *this, const WebCore::CachedResourceHandleBase *a2)
{
  return MEMORY[0x1F4171150](this, a2);
}

void WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(WebCore::CachedResourceHandleBase *this)
{
}

uint64_t WebCore::DeprecatedGlobalSettings::setOpusDecoderEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F4171160](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setAVFoundationEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F4171168](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setVorbisDecoderEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F4171180](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setMockScrollbarsEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F4171188](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::builtInNotificationsEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F4171190](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setTrackingPreventionEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F4171198](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setMediaSourceInlinePaintingEnabled(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F41711B0](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::setShouldManageAudioSessionCategory(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F41711B8](this);
}

uint64_t WebCore::DeprecatedGlobalSettings::shared(WebCore::DeprecatedGlobalSettings *this)
{
  return MEMORY[0x1F41711C0](this);
}

uint64_t WebCore::DocumentMarkerController::hasMarkers()
{
  return MEMORY[0x1F41711C8]();
}

uint64_t WebCore::DocumentMarkerController::filterMarkers()
{
  return MEMORY[0x1F41711D0]();
}

uint64_t WebCore::DocumentMarkerController::removeMarkers()
{
  return MEMORY[0x1F41711D8]();
}

{
  return MEMORY[0x1F41711E0]();
}

{
  return MEMORY[0x1F41711E8]();
}

uint64_t WebCore::DocumentMarkerController::markersInRange()
{
  return MEMORY[0x1F41711F0]();
}

uint64_t WebCore::DocumentMarkerController::rangesForMarkersInRange()
{
  return MEMORY[0x1F41711F8]();
}

uint64_t WebCore::DocumentMarkerController::renderedRectsForMarkers()
{
  return MEMORY[0x1F4171200]();
}

uint64_t WebCore::DocumentMarkerController::addTransparentContentMarker()
{
  return MEMORY[0x1F4171208]();
}

uint64_t WebCore::DocumentMarkerController::addMarker()
{
  return MEMORY[0x1F4171210]();
}

uint64_t WebCore::DocumentParserYieldToken::DocumentParserYieldToken(WebCore::DocumentParserYieldToken *this, Document *a2)
{
  return MEMORY[0x1F4171218](this, a2);
}

void WebCore::DocumentParserYieldToken::~DocumentParserYieldToken(WebCore::DocumentParserYieldToken *this)
{
}

uint64_t WebCore::FloatingPointEnvironment::enableDenormalSupport(WebCore::FloatingPointEnvironment *this)
{
  return MEMORY[0x1F4171238](this);
}

uint64_t WebCore::FloatingPointEnvironment::saveMainThreadEnvironment(WebCore::FloatingPointEnvironment *this)
{
  return MEMORY[0x1F4171240](this);
}

uint64_t WebCore::FloatingPointEnvironment::singleton(WebCore::FloatingPointEnvironment *this)
{
  return MEMORY[0x1F4171248](this);
}

uint64_t WebCore::LocalCurrentContextSaver::LocalCurrentContextSaver(WebCore::LocalCurrentContextSaver *this, CGContext *a2)
{
  return MEMORY[0x1F4171258](this, a2);
}

void WebCore::LocalCurrentContextSaver::~LocalCurrentContextSaver(WebCore::LocalCurrentContextSaver *this)
{
}

uint64_t WebCore::MatrixTransformOperation::create(WebCore::MatrixTransformOperation *this, const WebCore::TransformationMatrix *a2)
{
  return MEMORY[0x1F4171268](this, a2);
}

uint64_t WebCore::MediaPlaybackTargetCocoa::create()
{
  return MEMORY[0x1F4171270]();
}

uint64_t WebCore::MediaSessionManagerCocoa::setShouldUseModernAVContentKeySession(WebCore::MediaSessionManagerCocoa *this)
{
  return MEMORY[0x1F4171278](this);
}

uint64_t WebCore::MockContentFilterManager::setClient()
{
  return MEMORY[0x1F4171280]();
}

uint64_t WebCore::MockContentFilterManager::singleton(WebCore::MockContentFilterManager *this)
{
  return MEMORY[0x1F4171288](this);
}

uint64_t WebCore::PerformanceLoggingClient::synchronousScrollingReasonsAsString()
{
  return MEMORY[0x1F4171290]();
}

uint64_t WebCore::PointerCaptureController::cancelPointer()
{
  return MEMORY[0x1F4171298]();
}

uint64_t WebCore::PointerCaptureController::touchWithIdentifierWasRemoved(WebCore::PointerCaptureController *this)
{
  return MEMORY[0x1F41712A0](this);
}

uint64_t WebCore::RemoteMediaPlayerSupport::setRegisterRemotePlayerCallback()
{
  return MEMORY[0x1F41712A8]();
}

uint64_t WebCore::RotateTransformOperation::create()
{
  return MEMORY[0x1F41712B0]();
}

uint64_t WebCore::SampleBufferDisplayLayer::setCreator()
{
  return MEMORY[0x1F41712B8]();
}

uint64_t WebCore::ScreenOrientationManager::ScreenOrientationManager(WebCore::ScreenOrientationManager *this)
{
  return MEMORY[0x1F41712C0](this);
}

uint64_t WebCore::ScrollingStateStickyNode::ScrollingStateStickyNode()
{
  return MEMORY[0x1F41712D0]();
}

uint64_t WebCore::ServiceWorkerThreadProxy::startFetch()
{
  return MEMORY[0x1F41712D8]();
}

uint64_t WebCore::ServiceWorkerThreadProxy::cancelFetch()
{
  return MEMORY[0x1F41712E0]();
}

uint64_t WebCore::ServiceWorkerThreadProxy::createBlobLoader()
{
  return MEMORY[0x1F41712E8]();
}

uint64_t WebCore::ServiceWorkerThreadProxy::fireInstallEvent(WebCore::ServiceWorkerThreadProxy *this)
{
  return MEMORY[0x1F41712F0](this);
}

uint64_t WebCore::ServiceWorkerThreadProxy::fireMessageEvent()
{
  return MEMORY[0x1F41712F8]();
}

uint64_t WebCore::ServiceWorkerThreadProxy::fireActivateEvent(WebCore::ServiceWorkerThreadProxy *this)
{
  return MEMORY[0x1F4171300](this);
}

uint64_t WebCore::ServiceWorkerThreadProxy::didSaveScriptsToDisk()
{
  return MEMORY[0x1F4171308]();
}

uint64_t WebCore::ServiceWorkerThreadProxy::navigationPreloadFailed()
{
  return MEMORY[0x1F4171310]();
}

uint64_t WebCore::ServiceWorkerThreadProxy::navigationPreloadIsReady()
{
  return MEMORY[0x1F4171318]();
}

uint64_t WebCore::ServiceWorkerThreadProxy::setLastNavigationWasAppInitiated(WebCore::ServiceWorkerThreadProxy *this)
{
  return MEMORY[0x1F4171320](this);
}

uint64_t WebCore::ServiceWorkerThreadProxy::ServiceWorkerThreadProxy()
{
  return MEMORY[0x1F4171328]();
}

void WebCore::ServiceWorkerThreadProxy::~ServiceWorkerThreadProxy(WebCore::ServiceWorkerThreadProxy *this)
{
}

uint64_t WebCore::SpeechRecognitionRequest::SpeechRecognitionRequest()
{
  return MEMORY[0x1F4171338]();
}

uint64_t WebCore::StorageNamespaceProvider::StorageNamespaceProvider(WebCore::StorageNamespaceProvider *this)
{
  return MEMORY[0x1F4171348](this);
}

uint64_t WebCore::TemporarySelectionChange::invalidate(WebCore::TemporarySelectionChange *this)
{
  return MEMORY[0x1F4171358](this);
}

uint64_t WebCore::TemporarySelectionChange::TemporarySelectionChange()
{
  return MEMORY[0x1F4171360]();
}

void WebCore::TemporarySelectionChange::~TemporarySelectionChange(WebCore::TemporarySelectionChange *this)
{
}

uint64_t WebCore::TextAlternativeWithRange::TextAlternativeWithRange()
{
  return MEMORY[0x1F4171370]();
}

uint64_t WebCore::charactersAroundPosition()
{
  return MEMORY[0x1F4171378]();
}

uint64_t WebCore::createFragmentFromMarkup()
{
  return MEMORY[0x1F4171380]();
}

uint64_t WebCore::distanceBetweenPositions()
{
  return MEMORY[0x1F4171388]();
}

uint64_t WebCore::enclosingTextFormControl(WebCore *this, const WebCore::Position *a2)
{
  return MEMORY[0x1F4171390](this, a2);
}

uint64_t WebCore::keyIdentifierForKeyEvent(WebCore *this, WebEvent *a2)
{
  return MEMORY[0x1F4171398](this, a2);
}

uint64_t WebCore::makeVisiblePositionRange()
{
  return MEMORY[0x1F41713A0]();
}

uint64_t WebCore::parseClearSiteDataHeader(WebCore *this, const WebCore::ResourceResponse *a2)
{
  return MEMORY[0x1F41713A8](this, a2);
}

uint64_t WebCore::parseHEVCCodecParameters()
{
  return MEMORY[0x1F41713B0]();
}

uint64_t WebCore::parseXFrameOptionsHeader()
{
  return MEMORY[0x1F41713B8]();
}

uint64_t WebCore::passesAccessControlCheck()
{
  return MEMORY[0x1F41713C0]();
}

uint64_t WebCore::presentingApplicationPID(WebCore *this)
{
  return MEMORY[0x1F41713C8](this);
}

uint64_t WebCore::registerWebKitVP8Decoder(WebCore *this)
{
  return MEMORY[0x1F41713D0](this);
}

uint64_t WebCore::registerWebKitVP9Decoder(WebCore *this)
{
  return MEMORY[0x1F41713D8](this);
}

uint64_t WebCore::supportsPictureInPicture(WebCore *this)
{
  return MEMORY[0x1F41713E8](this);
}

uint64_t WebCore::ApplicationManifestParser::parseWithValidation(WebCore::ApplicationManifestParser *this, const WTF::String *a2, const WTF::URL *a3, const WTF::URL *a4)
{
  return MEMORY[0x1F41713F0](this, a2, a3, a4);
}

uint64_t WebCore::ApplicationManifestParser::parse(WebCore::ApplicationManifestParser *this, const WTF::String *a2, const WTF::URL *a3, const WTF::URL *a4)
{
  return MEMORY[0x1F41713F8](this, a2, a3, a4);
}

uint64_t WebCore::AsyncScrollingCoordinator::willCommitTree()
{
  return MEMORY[0x1F4171400]();
}

uint64_t WebCore::AsyncScrollingCoordinator::applyScrollUpdate()
{
  return MEMORY[0x1F4171408]();
}

uint64_t WebCore::AsyncScrollingCoordinator::ensureScrollingStateTreeForRootFrameID()
{
  return MEMORY[0x1F4171418]();
}

uint64_t WebCore::AsyncScrollingCoordinator::AsyncScrollingCoordinator()
{
  return MEMORY[0x1F4171420]();
}

void WebCore::AsyncScrollingCoordinator::~AsyncScrollingCoordinator(WebCore::AsyncScrollingCoordinator *this)
{
}

uint64_t WebCore::AudioDestinationResampler::pullRendered(WebCore::AudioDestinationResampler *this)
{
  return MEMORY[0x1F4171430](this);
}

uint64_t WebCore::AudioDestinationResampler::setIsPlaying(WebCore::AudioDestinationResampler *this)
{
  return MEMORY[0x1F4171438](this);
}

uint64_t WebCore::AudioDestinationResampler::render()
{
  return MEMORY[0x1F4171440]();
}

uint64_t WebCore::AudioDestinationResampler::AudioDestinationResampler()
{
  return MEMORY[0x1F4171448]();
}

void WebCore::AudioDestinationResampler::~AudioDestinationResampler(WebCore::AudioDestinationResampler *this)
{
}

uint64_t WebCore::CubicBezierTimingFunction::create()
{
  return MEMORY[0x1F4171458]();
}

uint64_t WebCore::EmptyOriginAccessPatterns::singleton(WebCore::EmptyOriginAccessPatterns *this)
{
  return MEMORY[0x1F4171460](this);
}

uint64_t WebCore::KeyboardScrollingAnimator::stopScrollingImmediately(WebCore::KeyboardScrollingAnimator *this)
{
  return MEMORY[0x1F4171470](this);
}

uint64_t WebCore::MockContentFilterSettings::singleton(WebCore::MockContentFilterSettings *this)
{
  return MEMORY[0x1F4171478](this);
}

uint64_t WebCore::PlatformSpeechSynthesizer::create()
{
  return MEMORY[0x1F4171480]();
}

uint64_t WebCore::RealtimeMediaSourceCenter::getCapabilities()
{
  return MEMORY[0x1F4171488]();
}

uint64_t WebCore::RealtimeMediaSourceCenter::audioCaptureFactory(WebCore::RealtimeMediaSourceCenter *this)
{
  return MEMORY[0x1F4171490](this);
}

uint64_t WebCore::RealtimeMediaSourceCenter::videoCaptureFactory(WebCore::RealtimeMediaSourceCenter *this)
{
  return MEMORY[0x1F4171498](this);
}

uint64_t WebCore::RealtimeMediaSourceCenter::displayCaptureFactory(WebCore::RealtimeMediaSourceCenter *this)
{
  return MEMORY[0x1F41714A0](this);
}

uint64_t WebCore::RealtimeMediaSourceCenter::getMediaStreamDevices()
{
  return MEMORY[0x1F41714A8]();
}

uint64_t WebCore::RealtimeMediaSourceCenter::setAudioCaptureFactory(WebCore::RealtimeMediaSourceCenter *this, WebCore::AudioCaptureFactory *a2)
{
  return MEMORY[0x1F41714B0](this, a2);
}

uint64_t WebCore::RealtimeMediaSourceCenter::setVideoCaptureFactory()
{
  return MEMORY[0x1F41714B8]();
}

uint64_t WebCore::RealtimeMediaSourceCenter::unsetAudioCaptureFactory(WebCore::RealtimeMediaSourceCenter *this, WebCore::AudioCaptureFactory *a2)
{
  return MEMORY[0x1F41714C8](this, a2);
}

uint64_t WebCore::RealtimeMediaSourceCenter::unsetVideoCaptureFactory()
{
  return MEMORY[0x1F41714D0]();
}

uint64_t WebCore::RealtimeMediaSourceCenter::setCurrentMediaEnvironment()
{
  return MEMORY[0x1F41714E0]();
}

uint64_t WebCore::RealtimeMediaSourceCenter::unsetDisplayCaptureFactory()
{
  return MEMORY[0x1F41714E8]();
}

uint64_t WebCore::RealtimeMediaSourceCenter::validateRequestConstraints()
{
  return MEMORY[0x1F41714F0]();
}

uint64_t WebCore::RealtimeMediaSourceCenter::shouldInterruptAudioOnPageVisibilityChange(WebCore::RealtimeMediaSourceCenter *this)
{
  return MEMORY[0x1F41714F8](this);
}

uint64_t WebCore::RealtimeMediaSourceCenter::singleton(WebCore::RealtimeMediaSourceCenter *this)
{
  return MEMORY[0x1F4171500](this);
}

uint64_t WebCore::SerializedPlatformDataCue::create()
{
  return MEMORY[0x1F4171510]();
}

uint64_t WebCore::WebSocketChannelInspector::WebSocketChannelInspector(WebCore::WebSocketChannelInspector *this, Document *a2)
{
  return MEMORY[0x1F4171518](this, a2);
}

void WebCore::WebSocketChannelInspector::~WebSocketChannelInspector(WebCore::WebSocketChannelInspector *this)
{
}

uint64_t WebCore::addPolicyContainerHeaders()
{
  return MEMORY[0x1F4171528]();
}

uint64_t WebCore::adjustMIMETypeIfNecessary()
{
  return MEMORY[0x1F4171530]();
}

uint64_t WebCore::buildCredentialDescriptor()
{
  return MEMORY[0x1F4171540]();
}

uint64_t WebCore::colorSpaceForCGColorSpace(WebCore *this, CGColorSpace *a2)
{
  return MEMORY[0x1F4171548](this, a2);
}

uint64_t WebCore::defaultWebCryptoMasterKey(WebCore *this)
{
  return MEMORY[0x1F4171550](this);
}

uint64_t WebCore::encloseRectToDevicePixels(WebCore *this, const FloatRect *a2, float a3)
{
  return MEMORY[0x1F4171558](this, a2, a3);
}

uint64_t WebCore::extendedSRGBColorSpaceRef(WebCore *this)
{
  return MEMORY[0x1F4171560](this);
}

uint64_t WebCore::fileButtonChooseFileLabel(WebCore *this)
{
  return MEMORY[0x1F4171568](this);
}

uint64_t WebCore::genericTouchIDPromptTitle(WebCore *this)
{
  return MEMORY[0x1F4171570](this);
}

uint64_t WebCore::getOutOfLineCachedWrapper()
{
  return MEMORY[0x1F4171578]();
}

uint64_t WebCore::roundAndClampToSRGBALossy(WebCore *this, CGColor *a2)
{
  return MEMORY[0x1F4171588](this, a2);
}

uint64_t WebCore::validatePreflightResponse()
{
  return MEMORY[0x1F4171590]();
}

uint64_t WebCore::windowsKeyCodeForKeyEvent(WebCore *this, WebEvent *a2)
{
  return MEMORY[0x1F4171598](this, a2);
}

uint64_t WebCore::AudioSourceProviderAVFObjC::setAudioCallback()
{
  return MEMORY[0x1F41715A0]();
}

uint64_t WebCore::AudioSourceProviderAVFObjC::setConfigureAudioStorageCallback()
{
  return MEMORY[0x1F41715A8]();
}

uint64_t WebCore::BasicShapeCenterCoordinate::updateComputedLength(WebCore::BasicShapeCenterCoordinate *this)
{
  return MEMORY[0x1F41715B0](this);
}

uint64_t WebCore::ContextDestructionObserver::contextDestroyed(WebCore::ContextDestructionObserver *this)
{
  return MEMORY[0x1F41715B8](this);
}

uint64_t WebCore::ElementTargetingController::findTargets()
{
  return MEMORY[0x1F41715C0]();
}

uint64_t WebCore::ElementTargetingController::adjustVisibility()
{
  return MEMORY[0x1F41715C8]();
}

uint64_t WebCore::ElementTargetingController::resetVisibilityAdjustments()
{
  return MEMORY[0x1F41715D0]();
}

uint64_t WebCore::ElementTargetingController::numberOfVisibilityAdjustmentRects(WebCore::ElementTargetingController *this)
{
  return MEMORY[0x1F41715D8](this);
}

uint64_t WebCore::ElementTargetingController::snapshotIgnoringVisibilityAdjustment()
{
  return MEMORY[0x1F41715E0]();
}

uint64_t WebCore::HTMLTextFormControlElement::setCanShowPlaceholder(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1F4171618](this);
}

uint64_t WebCore::IdentityTransformOperation::create(WebCore::IdentityTransformOperation *this)
{
  return MEMORY[0x1F4171630](this);
}

uint64_t WebCore::Matrix3DTransformOperation::create(WebCore::Matrix3DTransformOperation *this, const WebCore::TransformationMatrix *a2)
{
  return MEMORY[0x1F4171638](this, a2);
}

uint64_t WebCore::MediaRecorderPrivateWriter::stopRecording(WebCore::MediaRecorderPrivateWriter *this)
{
  return MEMORY[0x1F4171640](this);
}

uint64_t WebCore::MediaRecorderPrivateWriter::appendVideoFrame(WebCore::MediaRecorderPrivateWriter *this, WebCore::VideoFrame *a2)
{
  return MEMORY[0x1F4171648](this, a2);
}

uint64_t WebCore::MediaRecorderPrivateWriter::appendAudioSampleBuffer()
{
  return MEMORY[0x1F4171650]();
}

uint64_t WebCore::MediaRecorderPrivateWriter::close(WebCore::MediaRecorderPrivateWriter *this)
{
  return MEMORY[0x1F4171658](this);
}

uint64_t WebCore::MediaRecorderPrivateWriter::pause(WebCore::MediaRecorderPrivateWriter *this)
{
  return MEMORY[0x1F4171660](this);
}

uint64_t WebCore::MediaRecorderPrivateWriter::create()
{
  return MEMORY[0x1F4171668]();
}

uint64_t WebCore::MediaRecorderPrivateWriter::resume(WebCore::MediaRecorderPrivateWriter *this)
{
  return MEMORY[0x1F4171670](this);
}

uint64_t WebCore::MediaRecorderPrivateWriter::fetchData()
{
  return MEMORY[0x1F4171678]();
}

void WebCore::MediaRecorderPrivateWriter::~MediaRecorderPrivateWriter(WebCore::MediaRecorderPrivateWriter *this)
{
}

void WebCore::MediaStreamTrackDataHolder::~MediaStreamTrackDataHolder(WebCore::MediaStreamTrackDataHolder *this)
{
}

uint64_t WebCore::MessagePortChannelProvider::setSharedProvider()
{
  return MEMORY[0x1F4171690]();
}

uint64_t WebCore::MessagePortChannelRegistry::didCloseMessagePort()
{
  return MEMORY[0x1F4171698]();
}

uint64_t WebCore::MessagePortChannelRegistry::didPostMessageToRemote()
{
  return MEMORY[0x1F41716A0]();
}

uint64_t WebCore::MessagePortChannelRegistry::takeAllMessagesForPort()
{
  return MEMORY[0x1F41716A8]();
}

uint64_t WebCore::MessagePortChannelRegistry::didEntangleLocalToRemote()
{
  return MEMORY[0x1F41716B0]();
}

uint64_t WebCore::MessagePortChannelRegistry::didCreateMessagePortChannel()
{
  return MEMORY[0x1F41716C0]();
}

uint64_t WebCore::MessagePortChannelRegistry::existingChannelContainingPort()
{
  return MEMORY[0x1F41716C8]();
}

uint64_t WebCore::MessagePortChannelRegistry::MessagePortChannelRegistry(WebCore::MessagePortChannelRegistry *this)
{
  return MEMORY[0x1F41716D0](this);
}

void WebCore::MessagePortChannelRegistry::~MessagePortChannelRegistry(WebCore::MessagePortChannelRegistry *this)
{
}

uint64_t WebCore::NetscapePlugInStreamLoader::create()
{
  return MEMORY[0x1F41716E0]();
}

uint64_t WebCore::RTCDataChannelRemoteSource::RTCDataChannelRemoteSource()
{
  return MEMORY[0x1F41716E8]();
}

uint64_t WebCore::ScrollingTreeScrollingNode::commitStateBeforeChildren()
{
  return MEMORY[0x1F41716F8]();
}

uint64_t WebCore::ScrollingTreeScrollingNode::handleScrollPositionRequest()
{
  return MEMORY[0x1F4171700]();
}

uint64_t WebCore::ScrollingTreeScrollingNode::wasScrolledByDelegatedScrolling()
{
  return MEMORY[0x1F4171708]();
}

uint64_t WebCore::ScrollingTreeScrollingNode::setCurrentVerticalSnapPointIndex()
{
  return MEMORY[0x1F4171710]();
}

uint64_t WebCore::ScrollingTreeScrollingNode::setCurrentHorizontalSnapPointIndex()
{
  return MEMORY[0x1F4171718]();
}

uint64_t WebCore::SharedWorkerContextManager::Connection::postConnectEvent()
{
  return MEMORY[0x1F4171720]();
}

uint64_t WebCore::SharedWorkerContextManager::setConnection()
{
  return MEMORY[0x1F4171740]();
}

uint64_t WebCore::SharedWorkerContextManager::stopAllSharedWorkers(WebCore::SharedWorkerContextManager *this)
{
  return MEMORY[0x1F4171748](this);
}

uint64_t WebCore::SharedWorkerContextManager::registerSharedWorkerThread()
{
  return MEMORY[0x1F4171750]();
}

uint64_t WebCore::SharedWorkerContextManager::singleton(WebCore::SharedWorkerContextManager *this)
{
  return MEMORY[0x1F4171758](this);
}

uint64_t WebCore::TextManipulationController::completeManipulation()
{
  return MEMORY[0x1F4171760]();
}

uint64_t WebCore::TextManipulationController::startObservingParagraphs()
{
  return MEMORY[0x1F4171768]();
}

uint64_t WebCore::ThreadableWebSocketChannel::webSocketConnectRequest(WebCore::ThreadableWebSocketChannel *this, Document *a2, const WTF::URL *a3)
{
  return MEMORY[0x1F4171778](this, a2, a3);
}

uint64_t WebCore::ThreadableWebSocketChannel::ThreadableWebSocketChannel(WebCore::ThreadableWebSocketChannel *this)
{
  return MEMORY[0x1F4171780](this);
}

uint64_t WebCore::UserTypingGestureIndicator::processingUserTypingGesture(WebCore::UserTypingGestureIndicator *this)
{
  return MEMORY[0x1F4171788](this);
}

uint64_t WebCore::UserTypingGestureIndicator::focusedElementAtGestureStart(WebCore::UserTypingGestureIndicator *this)
{
  return MEMORY[0x1F4171790](this);
}

uint64_t WebCore::UserTypingGestureIndicator::UserTypingGestureIndicator(WebCore::UserTypingGestureIndicator *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1F4171798](this, a2);
}

void WebCore::UserTypingGestureIndicator::~UserTypingGestureIndicator(WebCore::UserTypingGestureIndicator *this)
{
}

uint64_t WebCore::convertEnumerationToString()
{
  return MEMORY[0x1F41717B8]();
}

{
  return MEMORY[0x1F41717C0]();
}

{
  return MEMORY[0x1F41717C8]();
}

uint64_t WebCore::encodeES256PublicKeyAsCBOR()
{
  return MEMORY[0x1F41717D0]();
}

uint64_t WebCore::loadRecentSearchesFromFile(WebCore *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F41717D8](this, a2, a3);
}

uint64_t WebCore::pdfDocumentTypeDescription(WebCore *this)
{
  return MEMORY[0x1F41717E0](this);
}

uint64_t WebCore::truncatedStringForMenuItem(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1F41717F0](this, a2);
}

uint64_t WebCore::unionRectIgnoringZeroRects()
{
  return MEMORY[0x1F41717F8]();
}

uint64_t WebCore::AbsolutePositionConstraints::AbsolutePositionConstraints(WebCore::AbsolutePositionConstraints *this, const WebCore::FloatSize *a2, const WebCore::FloatPoint *a3)
{
  return MEMORY[0x1F4171800](this, a2, a3);
}

uint64_t WebCore::AlternativeTextUIController::removeAlternatives()
{
  return MEMORY[0x1F4171810]();
}

uint64_t WebCore::AlternativeTextUIController::alternativesForContext()
{
  return MEMORY[0x1F4171820]();
}

uint64_t WebCore::ContentFilterUnblockHandler::setUnblockedAfterRequest(WebCore::ContentFilterUnblockHandler *this)
{
  return MEMORY[0x1F4171830](this);
}

uint64_t WebCore::ContentFilterUnblockHandler::ContentFilterUnblockHandler()
{
  return MEMORY[0x1F4171838]();
}

uint64_t WebCore::ImageBufferIOSurfaceBackend::calculateMemoryCost()
{
  return MEMORY[0x1F4171850]();
}

uint64_t WebCore::ImageBufferIOSurfaceBackend::calculateSafeBackendSize()
{
  return MEMORY[0x1F4171860]();
}

uint64_t WebCore::ImageBufferIOSurfaceBackend::ImageBufferIOSurfaceBackend()
{
  return MEMORY[0x1F4171868]();
}

void WebCore::ImageBufferIOSurfaceBackend::~ImageBufferIOSurfaceBackend(WebCore::ImageBufferIOSurfaceBackend *this)
{
}

uint64_t WebCore::MediaPlayerPrivateInterface::MediaPlayerPrivateInterface(WebCore::MediaPlayerPrivateInterface *this)
{
  return MEMORY[0x1F4171878](this);
}

void WebCore::MediaPlayerPrivateInterface::~MediaPlayerPrivateInterface(WebCore::MediaPlayerPrivateInterface *this)
{
}

uint64_t WebCore::PlatformMediaSessionManager::sharedManager(WebCore::PlatformMediaSessionManager *this)
{
  return MEMORY[0x1F4171888](this);
}

uint64_t WebCore::PlatformMediaSessionManager::processDidResume(WebCore::PlatformMediaSessionManager *this)
{
  return MEMORY[0x1F4171890](this);
}

uint64_t WebCore::PlatformMediaSessionManager::processWillSuspend(WebCore::PlatformMediaSessionManager *this)
{
  return MEMORY[0x1F4171898](this);
}

uint64_t WebCore::PlatformMediaSessionManager::setOpusDecoderEnabled(WebCore::PlatformMediaSessionManager *this)
{
  return MEMORY[0x1F41718A0](this);
}

uint64_t WebCore::PlatformMediaSessionManager::sharedManagerIfExists(WebCore::PlatformMediaSessionManager *this)
{
  return MEMORY[0x1F41718A8](this);
}

uint64_t WebCore::PlatformMediaSessionManager::setVorbisDecoderEnabled(WebCore::PlatformMediaSessionManager *this)
{
  return MEMORY[0x1F41718B0](this);
}

uint64_t WebCore::PlatformMediaSessionManager::setShouldEnableVP8Decoder(WebCore::PlatformMediaSessionManager *this)
{
  return MEMORY[0x1F41718B8](this);
}

uint64_t WebCore::PlatformMediaSessionManager::setShouldEnableVP9Decoder(WebCore::PlatformMediaSessionManager *this)
{
  return MEMORY[0x1F41718C0](this);
}

uint64_t WebCore::PlatformMediaSessionManager::applicationDidBecomeActive(WebCore::PlatformMediaSessionManager *this)
{
  return MEMORY[0x1F41718C8](this);
}

uint64_t WebCore::PlatformMediaSessionManager::mediaCapabilityGrantsEnabled(WebCore::PlatformMediaSessionManager *this)
{
  return MEMORY[0x1F41718D0](this);
}

uint64_t WebCore::PlatformMediaSessionManager::setSWVPDecodersAlwaysEnabled(WebCore::PlatformMediaSessionManager *this)
{
  return MEMORY[0x1F41718D8](this);
}

uint64_t WebCore::PlatformMediaSessionManager::applicationDidEnterBackground(WebCore::PlatformMediaSessionManager *this)
{
  return MEMORY[0x1F41718E8](this);
}

uint64_t WebCore::PlatformMediaSessionManager::applicationWillBecomeInactive(WebCore::PlatformMediaSessionManager *this)
{
  return MEMORY[0x1F41718F0](this);
}

uint64_t WebCore::PlatformMediaSessionManager::setAlternateWebMPlayerEnabled(WebCore::PlatformMediaSessionManager *this)
{
  return MEMORY[0x1F41718F8](this);
}

uint64_t WebCore::PlatformMediaSessionManager::applicationWillEnterForeground(WebCore::PlatformMediaSessionManager *this)
{
  return MEMORY[0x1F4171900](this);
}

uint64_t WebCore::PlatformMediaSessionManager::setMediaCapabilityGrantsEnabled(WebCore::PlatformMediaSessionManager *this)
{
  return MEMORY[0x1F4171908](this);
}

uint64_t WebCore::PlatformMediaSessionManager::setShouldDeactivateAudioSession(WebCore::PlatformMediaSessionManager *this)
{
  return MEMORY[0x1F4171910](this);
}

uint64_t WebCore::PlatformMediaSessionManager::removeNowPlayingMetadataObserver()
{
  return MEMORY[0x1F4171918]();
}

uint64_t WebCore::PlatformMediaSessionManager::processDidReceiveRemoteControlCommand()
{
  return MEMORY[0x1F4171920]();
}

uint64_t WebCore::RTCDataChannelRemoteHandler::didDetectError()
{
  return MEMORY[0x1F4171930]();
}

uint64_t WebCore::RealtimeMediaSourceObserver::RealtimeMediaSourceObserver(WebCore::RealtimeMediaSourceObserver *this)
{
  return MEMORY[0x1F4171958](this);
}

uint64_t WebCore::SVGPreserveAspectRatioValue::SVGPreserveAspectRatioValue()
{
  return MEMORY[0x1F4171968]();
}

uint64_t WebCore::SWServerToContextConnection::setAsInspected()
{
  return MEMORY[0x1F4171970]();
}

uint64_t WebCore::SWServerToContextConnection::didFinishInstall()
{
  return MEMORY[0x1F4171978]();
}

uint64_t WebCore::SWServerToContextConnection::setScriptResource()
{
  return MEMORY[0x1F4171988]();
}

uint64_t WebCore::SWServerToContextConnection::didFinishActivation()
{
  return MEMORY[0x1F4171990]();
}

uint64_t WebCore::SWServerToContextConnection::scriptContextStarted()
{
  return MEMORY[0x1F4171998]();
}

uint64_t WebCore::SWServerToContextConnection::scriptContextFailedToStart()
{
  return MEMORY[0x1F41719A8]();
}

uint64_t WebCore::SWServerToContextConnection::findClientByVisibleIdentifier()
{
  return MEMORY[0x1F41719B0]();
}

uint64_t WebCore::SWServerToContextConnection::setServiceWorkerHasPendingEvents()
{
  return MEMORY[0x1F41719B8]();
}

uint64_t WebCore::SWServerToContextConnection::claim()
{
  return MEMORY[0x1F41719C0]();
}

uint64_t WebCore::SWServerToContextConnection::matchAll()
{
  return MEMORY[0x1F41719C8]();
}

uint64_t WebCore::SWServerToContextConnection::SWServerToContextConnection()
{
  return MEMORY[0x1F41719D0]();
}

uint64_t WebCore::ScrollingStateScrollingNode::setScrollContainerLayer(WebCore::ScrollingStateScrollingNode *this, const WebCore::LayerRepresentation *a2)
{
  return MEMORY[0x1F41719E0](this, a2);
}

uint64_t WebCore::ScrollingStateScrollingNode::setScrolledContentsLayer(WebCore::ScrollingStateScrollingNode *this, const WebCore::LayerRepresentation *a2)
{
  return MEMORY[0x1F41719E8](this, a2);
}

uint64_t WebCore::TranslateTransformOperation::create()
{
  return MEMORY[0x1F41719F8]();
}

uint64_t WebCore::WebAudioSourceProviderCocoa::WebAudioSourceProviderCocoa(WebCore::WebAudioSourceProviderCocoa *this)
{
  return MEMORY[0x1F4171A08](this);
}

uint64_t WebCore::applicationBundleIdentifier(WebCore *this)
{
  return MEMORY[0x1F4171A18](this);
}

uint64_t WebCore::av1HardwareDecoderAvailable(WebCore *this)
{
  return MEMORY[0x1F4171A20](this);
}

uint64_t WebCore::buildAttestedCredentialData()
{
  return MEMORY[0x1F4171A28]();
}

uint64_t WebCore::createHTTPBodyNSInputStream()
{
  return MEMORY[0x1F4171A30]();
}

uint64_t WebCore::createLibWebRTCDav1dDecoder(WebCore *this)
{
  return MEMORY[0x1F4171A38](this);
}

uint64_t WebCore::createPrivateStorageSession()
{
  return MEMORY[0x1F4171A40]();
}

uint64_t WebCore::extractCharsetFromMediaType()
{
  return MEMORY[0x1F4171A48]();
}

uint64_t WebCore::initializeCommonAtomStrings(WebCore *this)
{
  return MEMORY[0x1F4171A50](this);
}

uint64_t WebCore::makeContainerOffsetPosition()
{
  return MEMORY[0x1F4171A58]();
}

uint64_t WebCore::overrideAvailableScreenSize(WebCore *this)
{
  return MEMORY[0x1F4171A60](this);
}

uint64_t WebCore::parseCacheControlDirectives(WebCore *this, const WebCore::HTTPHeaderMap *a2)
{
  return MEMORY[0x1F4171A68](this, a2);
}

uint64_t WebCore::platformDeferredSummaryItem()
{
  return MEMORY[0x1F4171A70]();
}

uint64_t WebCore::screenSupportsExtendedColor(WebCore *this, WebCore::Widget *a2)
{
  return MEMORY[0x1F4171A78](this, a2);
}

uint64_t WebCore::setPresentingApplicationPID(WebCore *this)
{
  return MEMORY[0x1F4171A80](this);
}

uint64_t WebCore::setSupportsPictureInPicture(WebCore *this)
{
  return MEMORY[0x1F4171A88](this);
}

uint64_t WebCore::startObservingCookieChanges()
{
  return MEMORY[0x1F4171A90]();
}

uint64_t WebCore::verifyVaryingRequestHeaders()
{
  return MEMORY[0x1F4171A98]();
}

uint64_t WebCore::vp9HardwareDecoderAvailable(WebCore *this)
{
  return MEMORY[0x1F4171AA0](this);
}

uint64_t WebCore::FragmentDirectiveRangeFinder::findRangesFromTextDirectives()
{
  return MEMORY[0x1F4171AB0]();
}

uint64_t WebCore::PlatformSpeechSynthesisVoice::create(WebCore::PlatformSpeechSynthesisVoice *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4)
{
  return MEMORY[0x1F4171AF8](this, a2, a3, a4);
}

uint64_t WebCore::ScrollingStatePositionedNode::ScrollingStatePositionedNode()
{
  return MEMORY[0x1F4171B00]();
}

uint64_t WebCore::ServiceWorkerRegistrationKey::emptyKey(WebCore::ServiceWorkerRegistrationKey *this)
{
  return MEMORY[0x1F4171B10](this);
}

uint64_t WebCore::ServiceWorkerRegistrationKey::ServiceWorkerRegistrationKey()
{
  return MEMORY[0x1F4171B18]();
}

uint64_t WebCore::ShareableBitmapConfiguration::calculateBytesPerRow(WebCore::ShareableBitmapConfiguration *this, const IntSize *a2, const WebCore::DestinationColorSpace *a3)
{
  return MEMORY[0x1F4171B20](this, a2, a3);
}

uint64_t WebCore::ShareableBitmapConfiguration::calculateSizeInBytes(WebCore::ShareableBitmapConfiguration *this, const IntSize *a2, const WebCore::DestinationColorSpace *a3)
{
  return MEMORY[0x1F4171B28](this, a2, a3);
}

uint64_t WebCore::ShareableBitmapConfiguration::ShareableBitmapConfiguration()
{
  return MEMORY[0x1F4171B30]();
}

{
  return MEMORY[0x1F4171B38]();
}

uint64_t WebCore::SharedWorkerObjectConnection::fetchScriptInClient()
{
  return MEMORY[0x1F4171B40]();
}

uint64_t WebCore::SharedWorkerObjectConnection::postErrorToWorkerObject()
{
  return MEMORY[0x1F4171B48]();
}

uint64_t WebCore::SharedWorkerObjectConnection::notifyWorkerObjectOfLoadCompletion()
{
  return MEMORY[0x1F4171B50]();
}

uint64_t WebCore::SharedWorkerObjectConnection::SharedWorkerObjectConnection(WebCore::SharedWorkerObjectConnection *this)
{
  return MEMORY[0x1F4171B58](this);
}

void WebCore::SharedWorkerObjectConnection::~SharedWorkerObjectConnection(WebCore::SharedWorkerObjectConnection *this)
{
}

uint64_t WebCore::TextTrackRepresentationCocoa::setContentScale(WebCore::TextTrackRepresentationCocoa *this, float a2)
{
  return MEMORY[0x1F4171B68](this, a2);
}

uint64_t WebCore::TextTrackRepresentationCocoa::representationFactory(WebCore::TextTrackRepresentationCocoa *this)
{
  return MEMORY[0x1F4171B70](this);
}

uint64_t WebCore::TextTrackRepresentationCocoa::TextTrackRepresentationCocoa()
{
  return MEMORY[0x1F4171B78]();
}

void WebCore::TextTrackRepresentationCocoa::~TextTrackRepresentationCocoa(WebCore::TextTrackRepresentationCocoa *this)
{
}

uint64_t WebCore::UserMessageHandlerDescriptor::UserMessageHandlerDescriptor(WebCore::UserMessageHandlerDescriptor *this, const AtomString *a2, WebCore::DOMWrapperWorld *a3)
{
  return MEMORY[0x1F4171B88](this, a2, a3);
}

uint64_t WebCore::collectVaryingRequestHeaders(WebCore *this, WebCore::NetworkStorageSession *a2, const WebCore::ResourceRequest *a3, const WebCore::ResourceResponse *a4)
{
  return MEMORY[0x1F4171B98](this, a2, a3, a4);
}

uint64_t WebCore::extractMIMETypeFromMediaType(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1F4171BA8](this, a2);
}

uint64_t WebCore::makeDeprecatedLegacyPosition()
{
  return MEMORY[0x1F4171BB0]();
}

uint64_t WebCore::platformRecurringSummaryItem()
{
  return MEMORY[0x1F4171BB8]();
}

uint64_t WebCore::reportExceptionIfJSDOMWindow()
{
  return MEMORY[0x1F4171BC0]();
}

uint64_t WebCore::sendCOEPInheritenceViolation()
{
  return MEMORY[0x1F4171BC8]();
}

uint64_t WebCore::setImageSourceAllowableTypes()
{
  return MEMORY[0x1F4171BD0]();
}

uint64_t WebCore::unitVectorForScrollDirection()
{
  return MEMORY[0x1F4171BD8]();
}

void WebCore::ApplePaySessionPaymentRequest::~ApplePaySessionPaymentRequest(WebCore::ApplePaySessionPaymentRequest *this)
{
}

uint64_t WebCore::CaptionUserPreferencesMediaAF::platformCaptionDisplayMode(WebCore::CaptionUserPreferencesMediaAF *this)
{
  return MEMORY[0x1F4171BE8](this);
}

uint64_t WebCore::CaptionUserPreferencesMediaAF::platformPreferredLanguages(WebCore::CaptionUserPreferencesMediaAF *this)
{
  return MEMORY[0x1F4171BF0](this);
}

uint64_t WebCore::CaptionUserPreferencesMediaAF::setCachedCaptionDisplayMode()
{
  return MEMORY[0x1F4171BF8]();
}

uint64_t WebCore::CaptionUserPreferencesMediaAF::setCachedPreferredLanguages()
{
  return MEMORY[0x1F4171C00]();
}

uint64_t WebCore::CaptionUserPreferencesMediaAF::platformSetCaptionDisplayMode()
{
  return MEMORY[0x1F4171C10]();
}

uint64_t WebCore::CaptionUserPreferencesMediaAF::setCaptionPreferencesDelegate()
{
  return MEMORY[0x1F4171C18]();
}

uint64_t WebCore::CoreAudioCaptureSourceFactory::isAudioCaptureUnitRunning(WebCore::CoreAudioCaptureSourceFactory *this)
{
  return MEMORY[0x1F4171C20](this);
}

uint64_t WebCore::CoreAudioCaptureSourceFactory::registerSpeakerSamplesProducer()
{
  return MEMORY[0x1F4171C28]();
}

uint64_t WebCore::CoreAudioCaptureSourceFactory::unregisterSpeakerSamplesProducer()
{
  return MEMORY[0x1F4171C30]();
}

uint64_t WebCore::CoreAudioCaptureSourceFactory::whenAudioCaptureUnitIsNotRunning()
{
  return MEMORY[0x1F4171C38]();
}

uint64_t WebCore::CoreAudioCaptureSourceFactory::shouldAudioCaptureUnitRenderAudio(WebCore::CoreAudioCaptureSourceFactory *this)
{
  return MEMORY[0x1F4171C40](this);
}

uint64_t WebCore::CoreAudioCaptureSourceFactory::singleton(WebCore::CoreAudioCaptureSourceFactory *this)
{
  return MEMORY[0x1F4171C48](this);
}

uint64_t WebCore::GameControllerGamepadProvider::singleton(WebCore::GameControllerGamepadProvider *this)
{
  return MEMORY[0x1F4171C50](this);
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::initialize()
{
  return MEMORY[0x1F4171C58]();
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::enqueueVideoFrame(WebCore::LocalSampleBufferDisplayLayer *this, WebCore::VideoFrame *a2)
{
  return MEMORY[0x1F4171C68](this, a2);
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::updateBoundsAndPosition()
{
  return MEMORY[0x1F4171C80]();
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::create()
{
  return MEMORY[0x1F4171C98]();
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::rootLayer(WebCore::LocalSampleBufferDisplayLayer *this)
{
  return MEMORY[0x1F4171CA0](this);
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::setDevices()
{
  return MEMORY[0x1F4171CA8]();
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::removeDevice(WebCore::MockRealtimeMediaSourceCenter *this, const WTF::String *a2)
{
  return MEMORY[0x1F4171CB0](this, a2);
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::resetDevices(WebCore::MockRealtimeMediaSourceCenter *this)
{
  return MEMORY[0x1F4171CB8](this);
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::setDeviceIsEphemeral(WebCore::MockRealtimeMediaSourceCenter *this, const WTF::String *a2)
{
  return MEMORY[0x1F4171CC0](this, a2);
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::setMockCaptureDevicesInterrupted(WebCore::MockRealtimeMediaSourceCenter *this)
{
  return MEMORY[0x1F4171CC8](this);
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::mockRealtimeMediaSourceCenterEnabled(WebCore::MockRealtimeMediaSourceCenter *this)
{
  return MEMORY[0x1F4171CD0](this);
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::triggerMockCaptureConfigurationChange(WebCore::MockRealtimeMediaSourceCenter *this)
{
  return MEMORY[0x1F4171CD8](this);
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::setMockRealtimeMediaSourceCenterEnabled(WebCore::MockRealtimeMediaSourceCenter *this)
{
  return MEMORY[0x1F4171CE0](this);
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::addDevice()
{
  return MEMORY[0x1F4171CE8]();
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::singleton(WebCore::MockRealtimeMediaSourceCenter *this)
{
  return MEMORY[0x1F4171CF0](this);
}

uint64_t WebCore::PerspectiveTransformOperation::create()
{
  return MEMORY[0x1F4171CF8]();
}

uint64_t WebCore::PlaybackSessionInterfaceAVKit::invalidate(WebCore::PlaybackSessionInterfaceAVKit *this)
{
  return MEMORY[0x1F4171D00](this);
}

uint64_t WebCore::PlaybackSessionInterfaceAVKit::create()
{
  return MEMORY[0x1F4171D08]();
}

uint64_t WebCore::SQLiteStatementAutoResetScope::SQLiteStatementAutoResetScope(WebCore::SQLiteStatementAutoResetScope *this, WebCore::SQLiteStatement *a2)
{
  return MEMORY[0x1F4171D10](this, a2);
}

void WebCore::SQLiteStatementAutoResetScope::~SQLiteStatementAutoResetScope(WebCore::SQLiteStatementAutoResetScope *this)
{
}

uint64_t WebCore::VideoPresentationInterfaceIOS::invalidate(WebCore::VideoPresentationInterfaceIOS *this)
{
  return MEMORY[0x1F4171D28](this);
}

uint64_t WebCore::VideoPresentationInterfaceIOS::setInlineRect(WebCore::VideoPresentationInterfaceIOS *this, const FloatRect *a2)
{
  return MEMORY[0x1F4171D30](this, a2);
}

uint64_t WebCore::VideoPresentationInterfaceIOS::exitFullscreen(WebCore::VideoPresentationInterfaceIOS *this, const FloatRect *a2)
{
  return MEMORY[0x1F4171D38](this, a2);
}

uint64_t WebCore::VideoPresentationInterfaceIOS::enterFullscreen(WebCore::VideoPresentationInterfaceIOS *this)
{
  return MEMORY[0x1F4171D40](this);
}

uint64_t WebCore::VideoPresentationInterfaceIOS::cleanupFullscreen(WebCore::VideoPresentationInterfaceIOS *this)
{
  return MEMORY[0x1F4171D48](this);
}

uint64_t WebCore::VideoPresentationInterfaceIOS::setHasVideoContentLayer(WebCore::VideoPresentationInterfaceIOS *this)
{
  return MEMORY[0x1F4171D50](this);
}

uint64_t WebCore::VideoPresentationInterfaceIOS::preparedToExitFullscreen(WebCore::VideoPresentationInterfaceIOS *this)
{
  return MEMORY[0x1F4171D58](this);
}

uint64_t WebCore::VideoPresentationInterfaceIOS::preparedToReturnToInline(WebCore::VideoPresentationInterfaceIOS *this, uint64_t a2, const FloatRect *a3)
{
  return MEMORY[0x1F4171D60](this, a2, a3);
}

uint64_t WebCore::VideoPresentationInterfaceIOS::preparedToReturnToStandby(WebCore::VideoPresentationInterfaceIOS *this)
{
  return MEMORY[0x1F4171D70](this);
}

uint64_t WebCore::VideoPresentationInterfaceIOS::setVideoPresentationModel()
{
  return MEMORY[0x1F4171D78]();
}

uint64_t WebCore::VideoPresentationInterfaceIOS::applicationDidBecomeActive(WebCore::VideoPresentationInterfaceIOS *this)
{
  return MEMORY[0x1F4171D80](this);
}

uint64_t WebCore::VideoPresentationInterfaceIOS::requestHideAndExitFullscreen(WebCore::VideoPresentationInterfaceIOS *this)
{
  return MEMORY[0x1F4171D88](this);
}

uint64_t WebCore::VideoPresentationInterfaceIOS::exitFullscreenWithoutAnimationToMode(WebCore::VideoPresentationInterfaceIOS *this)
{
  return MEMORY[0x1F4171D90](this);
}

uint64_t WebCore::VideoPresentationInterfaceIOS::setMode(WebCore::VideoPresentationInterfaceIOS *this)
{
  return MEMORY[0x1F4171D98](this);
}

uint64_t WebCore::contextMenuItemTagCopySubject(WebCore *this)
{
  return MEMORY[0x1F4171DA0](this);
}

uint64_t WebCore::contextMenuItemTagLookUpImage(WebCore *this)
{
  return MEMORY[0x1F4171DA8](this);
}

uint64_t WebCore::obtainCrossOriginOpenerPolicy(WebCore *this, const WebCore::ResourceResponse *a2)
{
  return MEMORY[0x1F4171DC0](this, a2);
}

uint64_t WebCore::updateRequestForAccessControl()
{
  return MEMORY[0x1F4171DC8]();
}

uint64_t WebCore::AuthenticatorAssertionResponse::setAuthenticatorData()
{
  return MEMORY[0x1F4171DD0]();
}

uint64_t WebCore::AuthenticatorAssertionResponse::create()
{
  return MEMORY[0x1F4171DD8]();
}

uint64_t WebCore::InspectorFrontendAPIDispatcher::frontendLoaded(WebCore::InspectorFrontendAPIDispatcher *this)
{
  return MEMORY[0x1F4171DE0](this);
}

uint64_t WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync()
{
  return MEMORY[0x1F4171DF8]();
}

uint64_t WebCore::InspectorFrontendAPIDispatcher::reset(WebCore::InspectorFrontendAPIDispatcher *this)
{
  return MEMORY[0x1F4171E00](this);
}

uint64_t WebCore::InspectorFrontendAPIDispatcher::InspectorFrontendAPIDispatcher()
{
  return MEMORY[0x1F4171E18]();
}

void WebCore::InspectorFrontendAPIDispatcher::~InspectorFrontendAPIDispatcher(WebCore::InspectorFrontendAPIDispatcher *this)
{
}

uint64_t WebCore::InspectorInstrumentationWebKit::interceptRequestInternal()
{
  return MEMORY[0x1F4171E28]();
}

uint64_t WebCore::InspectorInstrumentationWebKit::interceptResponseInternal()
{
  return MEMORY[0x1F4171E30]();
}

uint64_t WebCore::InspectorInstrumentationWebKit::shouldInterceptRequestInternal(WebCore::InspectorInstrumentationWebKit *this, const WebCore::ResourceLoader *a2)
{
  return MEMORY[0x1F4171E38](this, a2);
}

uint64_t WebCore::InspectorInstrumentationWebKit::shouldInterceptResponseInternal(WebCore::InspectorInstrumentationWebKit *this, const WebCore::LocalFrame *a2, const WebCore::ResourceResponse *a3)
{
  return MEMORY[0x1F4171E40](this, a2, a3);
}

uint64_t WebCore::ScrollingStateFrameHostingNode::create()
{
  return MEMORY[0x1F4171E48]();
}

uint64_t WebCore::SpeechRecognitionCaptureSource::findCaptureDevice(WebCore::SpeechRecognitionCaptureSource *this)
{
  return MEMORY[0x1F4171E58](this);
}

uint64_t WebCore::SpeechRecognitionCaptureSource::createRealtimeMediaSource()
{
  return MEMORY[0x1F4171E60]();
}

uint64_t WebCore::SpeechRecognitionCaptureSource::mute(WebCore::SpeechRecognitionCaptureSource *this)
{
  return MEMORY[0x1F4171E68](this);
}

uint64_t WebCore::closestWordBoundaryForPosition()
{
  return MEMORY[0x1F4171E78]();
}

uint64_t WebCore::enclosingTextUnitOfGranularity()
{
  return MEMORY[0x1F4171E80]();
}

uint64_t WebCore::isStatusCodeCacheableByDefault(WebCore *this)
{
  return MEMORY[0x1F4171E98](this);
}

uint64_t WebCore::makeRangeSelectingNodeContents(WebCore *this, Node *a2)
{
  return MEMORY[0x1F4171EA0](this, a2);
}

uint64_t WebCore::plainTextReplacingNoBreakSpace()
{
  return MEMORY[0x1F4171EA8]();
}

uint64_t WebCore::registerSupplementalVP9Decoder(WebCore *this)
{
  return MEMORY[0x1F4171EB0](this);
}

uint64_t WebCore::setApplicationBundleIdentifier(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1F4171EC0](this, a2);
}

uint64_t WebCore::CoreLocationGeolocationProvider::requestAuthorization()
{
  return MEMORY[0x1F4171EC8]();
}

uint64_t WebCore::CoreLocationGeolocationProvider::setEnableHighAccuracy(WebCore::CoreLocationGeolocationProvider *this)
{
  return MEMORY[0x1F4171ED0](this);
}

uint64_t WebCore::CoreLocationGeolocationProvider::CoreLocationGeolocationProvider()
{
  return MEMORY[0x1F4171ED8]();
}

void WebCore::CoreLocationGeolocationProvider::~CoreLocationGeolocationProvider(WebCore::CoreLocationGeolocationProvider *this)
{
}

uint64_t WebCore::CrossOriginPreflightResultCache::canSkipPreflight()
{
  return MEMORY[0x1F4171EE8]();
}

uint64_t WebCore::CrossOriginPreflightResultCache::clear(WebCore::CrossOriginPreflightResultCache *this)
{
  return MEMORY[0x1F4171EF0](this);
}

uint64_t WebCore::CrossOriginPreflightResultCache::singleton(WebCore::CrossOriginPreflightResultCache *this)
{
  return MEMORY[0x1F4171EF8](this);
}

uint64_t WebCore::MediaEngineConfigurationFactory::clearFactories(WebCore::MediaEngineConfigurationFactory *this)
{
  return MEMORY[0x1F4171F00](this);
}

uint64_t WebCore::MediaEngineConfigurationFactory::installFactory()
{
  return MEMORY[0x1F4171F08]();
}

uint64_t WebCore::MediaEngineConfigurationFactory::resetFactories(WebCore::MediaEngineConfigurationFactory *this)
{
  return MEMORY[0x1F4171F10](this);
}

uint64_t WebCore::MediaEngineConfigurationFactory::createDecodingConfiguration()
{
  return MEMORY[0x1F4171F18]();
}

uint64_t WebCore::MediaEngineConfigurationFactory::createEncodingConfiguration()
{
  return MEMORY[0x1F4171F20]();
}

uint64_t WebCore::MediaPlaybackTargetContextCocoa::MediaPlaybackTargetContextCocoa()
{
  return MEMORY[0x1F4171F28]();
}

uint64_t WebCore::PaymentInstallmentConfiguration::PaymentInstallmentConfiguration()
{
  return MEMORY[0x1F4171F38]();
}

uint64_t WebCore::PlatformImageNativeImageBackend::PlatformImageNativeImageBackend()
{
  return MEMORY[0x1F4171F40]();
}

void WebCore::PlatformImageNativeImageBackend::~PlatformImageNativeImageBackend(WebCore::PlatformImageNativeImageBackend *this)
{
}

uint64_t WebCore::ReadableStreamDefaultController::enqueue()
{
  return MEMORY[0x1F4171F50]();
}

uint64_t WebCore::ScrollingStatePluginHostingNode::create()
{
  return MEMORY[0x1F4171F58]();
}

uint64_t WebCore::ScrollingTreeFrameScrollingNode::commitStateBeforeChildren()
{
  return MEMORY[0x1F4171F60]();
}

uint64_t WebCore::ScrollingTreeFrameScrollingNode::ScrollingTreeFrameScrollingNode()
{
  return MEMORY[0x1F4171F68]();
}

void WebCore::ScrollingTreeFrameScrollingNode::~ScrollingTreeFrameScrollingNode(WebCore::ScrollingTreeFrameScrollingNode *this)
{
}

uint64_t WebCore::VideoPresentationInterfaceAVKit::hasVideoChanged(WebCore::VideoPresentationInterfaceAVKit *this)
{
  return MEMORY[0x1F4171F78](this);
}

uint64_t WebCore::VideoPresentationInterfaceAVKit::setupFullscreen(WebCore::VideoPresentationInterfaceAVKit *this, UIView *a2, const FloatRect *a3, const WebCore::FloatSize *a4, UIView *a5, unsigned int a6, BOOL a7, BOOL a8, BOOL a9)
{
  return MEMORY[0x1F4171F80](this, a2, a3, a4, a5);
}

uint64_t WebCore::VideoPresentationInterfaceAVKit::setupCaptionsLayer(WebCore::VideoPresentationInterfaceAVKit *this, CALayer *a2, const WebCore::FloatSize *a3)
{
  return MEMORY[0x1F4171F88](this, a2, a3);
}

uint64_t WebCore::VideoPresentationInterfaceAVKit::setPlayerIdentifier()
{
  return MEMORY[0x1F4171F90]();
}

uint64_t WebCore::VideoPresentationInterfaceAVKit::create(WebCore::VideoPresentationInterfaceAVKit *this, PlaybackSessionInterfaceIOS *a2)
{
  return MEMORY[0x1F4171F98](this, a2);
}

uint64_t WebCore::nonAutofillCredentialTypeString()
{
  return MEMORY[0x1F4171FB0]();
}

uint64_t WebCore::obtainCrossOriginEmbedderPolicy()
{
  return MEMORY[0x1F4171FB8]();
}

uint64_t WebCore::AuthenticatorAttestationResponse::create()
{
  return MEMORY[0x1F4171FC0]();
}

void WebCore::IDBDatabaseNameAndVersionRequest::operator delete(void *a1)
{
}

uint64_t WebCore::PlatformSpeechSynthesisUtterance::create()
{
  return MEMORY[0x1F4171FD0]();
}

uint64_t WebCore::PlaybackSessionModelMediaElement::seekToTime(WebCore::PlaybackSessionModelMediaElement *this, double a2, double a3, double a4)
{
  return MEMORY[0x1F4171FD8](this, a2, a3, a4);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::endScanning(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F4171FE0](this);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::toggleMuted(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F4171FE8](this);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::endScrubbing(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F4171FF0](this);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::removeClient(WebCore::PlaybackSessionModelMediaElement *this, WebCore::PlaybackSessionModelClient *a2)
{
  return MEMORY[0x1F4171FF8](this, a2);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::beginScrubbing(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F4172000](this);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::exitFullscreen(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F4172008](this);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::enterFullscreen(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F4172010](this);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::setMediaElement(WebCore::PlaybackSessionModelMediaElement *this, WebCore::HTMLMediaElement *a2)
{
  return MEMORY[0x1F4172018](this, a2);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::setPlaybackRate(WebCore::PlaybackSessionModelMediaElement *this, double a2)
{
  return MEMORY[0x1F4172020](this, a2);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::togglePlayState(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F4172028](this);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::sendRemoteCommand()
{
  return MEMORY[0x1F4172030]();
}

uint64_t WebCore::PlaybackSessionModelMediaElement::beginScanningForward(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F4172040](this);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::beginScanningBackward(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F4172048](this);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::exitInWindowFullscreen(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F4172050](this);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::selectAudioMediaOption(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F4172058](this);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::setDefaultPlaybackRate(WebCore::PlaybackSessionModelMediaElement *this, double a2)
{
  return MEMORY[0x1F4172060](this, a2);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::togglePictureInPicture(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F4172068](this);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::enterInWindowFullscreen(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F4172070](this);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::selectLegibleMediaOption(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F4172078](this);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::setPlayingOnSecondScreen(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F4172080](this);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::play(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F4172088](this);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::pause(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F4172090](this);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::fastSeek(WebCore::PlaybackSessionModelMediaElement *this, double a2)
{
  return MEMORY[0x1F4172098](this, a2);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::setMuted(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F41720A0](this);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::addClient(WebCore::PlaybackSessionModelMediaElement *this, WebCore::PlaybackSessionModelClient *a2)
{
  return MEMORY[0x1F41720A8](this, a2);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::setVolume(WebCore::PlaybackSessionModelMediaElement *this, double a2)
{
  return MEMORY[0x1F41720B0](this, a2);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::PlaybackSessionModelMediaElement(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F41720B8](this);
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::setFooterLayer(WebCore::ScrollingStateFrameScrollingNode *this, const WebCore::LayerRepresentation *a2)
{
  return MEMORY[0x1F41720C0](this, a2);
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::setHeaderLayer(WebCore::ScrollingStateFrameScrollingNode *this, const WebCore::LayerRepresentation *a2)
{
  return MEMORY[0x1F41720C8](this, a2);
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::setCounterScrollingLayer(WebCore::ScrollingStateFrameScrollingNode *this, const WebCore::LayerRepresentation *a2)
{
  return MEMORY[0x1F41720D0](this, a2);
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::ScrollingStateFrameScrollingNode()
{
  return MEMORY[0x1F41720D8]();
}

uint64_t WebCore::ScrollingTreePluginScrollingNode::ScrollingTreePluginScrollingNode()
{
  return MEMORY[0x1F41720E0]();
}

void WebCore::ScrollingTreePluginScrollingNode::~ScrollingTreePluginScrollingNode(WebCore::ScrollingTreePluginScrollingNode *this)
{
}

uint64_t WebCore::SecurityPolicyViolationEventInit::SecurityPolicyViolationEventInit()
{
  return MEMORY[0x1F41720F8]();
}

uint64_t WebCore::isSimpleCrossOriginAccessRequest(WebCore *this, const WTF::String *a2, const WebCore::HTTPHeaderMap *a3)
{
  return MEMORY[0x1F4172100](this, a2, a3);
}

uint64_t WebCore::isStatusCodePotentiallyCacheable(WebCore *this)
{
  return MEMORY[0x1F4172108](this);
}

uint64_t WebCore::platformDisbursementSummaryItems()
{
  return MEMORY[0x1F4172110]();
}

uint64_t WebCore::setAdditionalSupportedImageTypes()
{
  return MEMORY[0x1F4172118]();
}

uint64_t WebCore::setOverrideEnhanceTextLegibility(WebCore *this)
{
  return MEMORY[0x1F4172120](this);
}

uint64_t WebCore::OriginAccessPatternsForWebProcess::allowAccessTo()
{
  return MEMORY[0x1F4172128]();
}

uint64_t WebCore::OriginAccessPatternsForWebProcess::singleton(WebCore::OriginAccessPatternsForWebProcess *this)
{
  return MEMORY[0x1F4172130](this);
}

void WebCore::RealtimeMediaSourceCenterObserver::~RealtimeMediaSourceCenterObserver(WebCore::RealtimeMediaSourceCenterObserver *this)
{
}

uint64_t WebCore::ScrollingStatePluginScrollingNode::ScrollingStatePluginScrollingNode()
{
  return MEMORY[0x1F4172148]();
}

uint64_t WebCore::allocWebAVPlayerLayerViewInstance(WebCore *this)
{
  return MEMORY[0x1F4172150](this);
}

uint64_t WebCore::pageConfigurationWithEmptyClients()
{
  return MEMORY[0x1F4172168]();
}

uint64_t WebCore::validateCrossOriginResourcePolicy()
{
  return MEMORY[0x1F4172170]();
}

{
  return MEMORY[0x1F4172178]();
}

uint64_t WebCore::COEPInheritenceViolationReportBody::create()
{
  return MEMORY[0x1F4172180]();
}

uint64_t WebCore::ScrollingTreeOverflowScrollingNode::ScrollingTreeOverflowScrollingNode()
{
  return MEMORY[0x1F4172188]();
}

void WebCore::ScrollingTreeOverflowScrollingNode::~ScrollingTreeOverflowScrollingNode(WebCore::ScrollingTreeOverflowScrollingNode *this)
{
}

uint64_t WebCore::ScrollingTreeScrollingNodeDelegate::totalContentsSize(WebCore::ScrollingTreeScrollingNodeDelegate *this)
{
  return MEMORY[0x1F4172198](this);
}

uint64_t WebCore::ScrollingTreeScrollingNodeDelegate::reachableContentsSize(WebCore::ScrollingTreeScrollingNodeDelegate *this)
{
  return MEMORY[0x1F41721A0](this);
}

uint64_t WebCore::ScrollingTreeScrollingNodeDelegate::ScrollingTreeScrollingNodeDelegate(WebCore::ScrollingTreeScrollingNodeDelegate *this, WebCore::ScrollingTreeScrollingNode *a2)
{
  return MEMORY[0x1F41721A8](this, a2);
}

void WebCore::ScrollingTreeScrollingNodeDelegate::~ScrollingTreeScrollingNodeDelegate(WebCore::ScrollingTreeScrollingNodeDelegate *this)
{
}

uint64_t WebCore::VideoPresentationModelVideoElement::removeClient(WebCore::VideoPresentationModelVideoElement *this, WebCore::VideoPresentationModelClient *a2)
{
  return MEMORY[0x1F41721B8](this, a2);
}

uint64_t WebCore::VideoPresentationModelVideoElement::setVideoElement(WebCore::VideoPresentationModelVideoElement *this, WebCore::HTMLVideoElement *a2)
{
  return MEMORY[0x1F41721C0](this, a2);
}

uint64_t WebCore::VideoPresentationModelVideoElement::setVideoLayerFrame(WebCore::VideoPresentationModelVideoElement *this, FloatRect a2)
{
  return MEMORY[0x1F41721C8](this, (__n128)a2, *(__n128 *)((char *)&a2 + 4), *(__n128 *)&a2.m_size.m_width, *(__n128 *)&a2.m_size.m_height);
}

uint64_t WebCore::VideoPresentationModelVideoElement::setVideoSizeFenced()
{
  return MEMORY[0x1F41721D0]();
}

uint64_t WebCore::VideoPresentationModelVideoElement::setVideoLayerGravity()
{
  return MEMORY[0x1F41721D8]();
}

uint64_t WebCore::VideoPresentationModelVideoElement::fullscreenModeChanged(WebCore::VideoPresentationModelVideoElement *this)
{
  return MEMORY[0x1F41721E0](this);
}

uint64_t WebCore::VideoPresentationModelVideoElement::requestFullscreenMode(WebCore::VideoPresentationModelVideoElement *this)
{
  return MEMORY[0x1F41721E8](this);
}

uint64_t WebCore::VideoPresentationModelVideoElement::setVideoFullscreenFrame(WebCore::VideoPresentationModelVideoElement *this, FloatRect a2)
{
  return MEMORY[0x1F41721F0](this, (__n128)a2, *(__n128 *)((char *)&a2 + 4), *(__n128 *)&a2.m_size.m_width, *(__n128 *)&a2.m_size.m_height);
}

uint64_t WebCore::VideoPresentationModelVideoElement::setVideoFullscreenLayer()
{
  return MEMORY[0x1F41721F8]();
}

uint64_t WebCore::VideoPresentationModelVideoElement::createVideoFullscreenLayer(WebCore::VideoPresentationModelVideoElement *this)
{
  return MEMORY[0x1F4172200](this);
}

uint64_t WebCore::VideoPresentationModelVideoElement::waitForPreparedForInlineThen()
{
  return MEMORY[0x1F4172208]();
}

uint64_t WebCore::VideoPresentationModelVideoElement::setTextTrackRepresentationBounds(WebCore::VideoPresentationModelVideoElement *this, const IntRect *a2)
{
  return MEMORY[0x1F4172210](this, a2);
}

uint64_t WebCore::VideoPresentationModelVideoElement::setRequiresTextTrackRepresentation(WebCore::VideoPresentationModelVideoElement *this)
{
  return MEMORY[0x1F4172218](this);
}

uint64_t WebCore::VideoPresentationModelVideoElement::requestRouteSharingPolicyAndContextUID()
{
  return MEMORY[0x1F4172220]();
}

uint64_t WebCore::VideoPresentationModelVideoElement::addClient(WebCore::VideoPresentationModelVideoElement *this, WebCore::VideoPresentationModelClient *a2)
{
  return MEMORY[0x1F4172228](this, a2);
}

uint64_t WebCore::VideoPresentationModelVideoElement::VideoPresentationModelVideoElement(WebCore::VideoPresentationModelVideoElement *this)
{
  return MEMORY[0x1F4172230](this);
}

uint64_t WebCore::createCGColorSpaceForCVPixelBuffer(WebCore *this, __CVBuffer *a2)
{
  return MEMORY[0x1F4172238](this, a2);
}

uint64_t WebCore::fileButtonChooseMultipleFilesLabel(WebCore *this)
{
  return MEMORY[0x1F4172240](this);
}

uint64_t WebCore::platformAutomaticReloadSummaryItem()
{
  return MEMORY[0x1F4172248]();
}

uint64_t WebCore::ScrollingStateOverflowScrollingNode::ScrollingStateOverflowScrollingNode()
{
  return MEMORY[0x1F4172258]();
}

uint64_t WebCore::SystemBatteryStatusTestingOverrides::setConfigurationChangedCallback()
{
  return MEMORY[0x1F4172270]();
}

uint64_t WebCore::SystemBatteryStatusTestingOverrides::setHasAC()
{
  return MEMORY[0x1F4172278]();
}

uint64_t WebCore::SystemBatteryStatusTestingOverrides::singleton(WebCore::SystemBatteryStatusTestingOverrides *this)
{
  return MEMORY[0x1F4172280](this);
}

uint64_t WebCore::createAccessControlPreflightRequest(WebCore *this, const WebCore::ResourceRequest *a2, WebCore::SecurityOrigin *a3, const WTF::String *a4)
{
  return MEMORY[0x1F4172288](this, a2, a3, a4);
}

uint64_t WebCore::externalRepresentationForLocalFrame()
{
  return MEMORY[0x1F4172290]();
}

uint64_t WebCore::isEndOfEditableOrNonEditableContent()
{
  return MEMORY[0x1F4172298]();
}

uint64_t WebCore::positionOfNextBoundaryOfGranularity()
{
  return MEMORY[0x1F41722A0]();
}

uint64_t WebCore::AuthenticationExtensionsClientInputs::fromCBOR()
{
  return MEMORY[0x1F41722B0]();
}

uint64_t WebCore::ContentSecurityPolicyResponseHeaders::ContentSecurityPolicyResponseHeaders(WebCore::ContentSecurityPolicyResponseHeaders *this, const WebCore::ResourceResponse *a2)
{
  return MEMORY[0x1F41722B8](this, a2);
}

void WebCore::GraphicsLayerContentsDisplayDelegate::~GraphicsLayerContentsDisplayDelegate(WebCore::GraphicsLayerContentsDisplayDelegate *this)
{
}

uint64_t WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setNativeImageCreator()
{
  return MEMORY[0x1F41722C8]();
}

uint64_t WebCore::contextMenuItemTitleRemoveBackground(WebCore *this)
{
  return MEMORY[0x1F41722D0](this);
}

uint64_t WebCore::largestRectWithAspectRatioInsideRect(WebCore *this, float a2, const FloatRect *a3)
{
  return MEMORY[0x1F41722D8](this, a3, a2);
}

uint64_t WebCore::registerMemoryReleaseNotifyCallbacks(WebCore *this)
{
  return MEMORY[0x1F41722E0](this);
}

uint64_t WebCore::setOwnershipIdentityForCVPixelBuffer()
{
  return MEMORY[0x1F41722E8]();
}

uint64_t WebCore::standardUserAgentWithApplicationName()
{
  return MEMORY[0x1F41722F0]();
}

uint64_t WebCore::visiblePositionForPositionWithOffset()
{
  return MEMORY[0x1F41722F8]();
}

uint64_t WebCore::AuthenticationExtensionsClientOutputs::fromCBOR()
{
  return MEMORY[0x1F4172300]();
}

uint64_t WebCore::CrossOriginAccessControlCheckDisabler::setCrossOriginAccessControlCheckEnabled(WebCore::CrossOriginAccessControlCheckDisabler *this)
{
  return MEMORY[0x1F4172308](this);
}

uint64_t WebCore::CrossOriginAccessControlCheckDisabler::singleton(WebCore::CrossOriginAccessControlCheckDisabler *this)
{
  return MEMORY[0x1F4172310](this);
}

uint64_t WebCore::PlatformCALayerDelegatedContentsFence::PlatformCALayerDelegatedContentsFence(WebCore::PlatformCALayerDelegatedContentsFence *this)
{
  return MEMORY[0x1F4172318](this);
}

void WebCore::PlatformCALayerDelegatedContentsFence::~PlatformCALayerDelegatedContentsFence(WebCore::PlatformCALayerDelegatedContentsFence *this)
{
}

uint64_t WebCore::ScrollingStateOverflowScrollProxyNode::ScrollingStateOverflowScrollProxyNode()
{
  return MEMORY[0x1F4172328]();
}

uint64_t WebCore::computeFreshnessLifetimeForHTTPFamily()
{
  return MEMORY[0x1F4172330]();
}

uint64_t WebCore::convertStringToAuthenticatorTransport(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1F4172338](this, a2);
}

uint64_t WebCore::doCrossOriginOpenerHandlingOfResponse()
{
  return MEMORY[0x1F4172340]();
}

uint64_t WebCore::smallestRectWithAspectRatioAroundRect(WebCore *this, float a2, const FloatRect *a3)
{
  return MEMORY[0x1F4172348](this, a3, a2);
}

uint64_t WebCore::synthesizeRedirectResponseIfNecessary(WebCore *this, NSURLRequest *a2, NSURLRequest *a3, NSURLResponse *a4)
{
  return MEMORY[0x1F4172350](this, a2, a3, a4);
}

uint64_t WebCore::audioStreamBasicDescriptionForAudioBus()
{
  return MEMORY[0x1F4172358]();
}

uint64_t WebCore::setApplicationBundleIdentifierOverride(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1F4172360](this, a2);
}

uint64_t WebCore::updateResponseHeadersAfterRevalidation(WebCore *this, WebCore::ResourceResponse *a2, const WebCore::ResourceResponse *a3)
{
  return MEMORY[0x1F4172368](this, a2, a3);
}

uint64_t WebCore::cleanHTTPRequestHeadersForAccessControl()
{
  return MEMORY[0x1F41723B0]();
}

uint64_t WebCore::contextMenuItemTagCopyLinkWithHighlight(WebCore *this)
{
  return MEMORY[0x1F41723B8](this);
}

uint64_t WebCore::convertMediaPlayerToAVLayerVideoGravity()
{
  return MEMORY[0x1F41723C0]();
}

uint64_t WebCore::rangeExpandedAroundPositionByCharacters()
{
  return MEMORY[0x1F41723C8]();
}

uint64_t WebCore::mac(WebCore *this, const WebCore::AuthenticationChallenge *a2)
{
  return MEMORY[0x1F41723D0](this, a2);
}

uint64_t WebCore::CrossOriginOpenerPolicyEnforcementResult::from()
{
  return MEMORY[0x1F41723D8]();
}

uint64_t WebCore::setPresentingApplicationBundleIdentifier(WebCore *this, const WTF::String *a2)
{
  return MEMORY[0x1F41723E8](this, a2);
}

uint64_t WebCore::AudioMediaStreamTrackRendererInternalUnit::setCreateFunction()
{
  return MEMORY[0x1F41723F0]();
}

uint64_t WebCore::AudioMediaStreamTrackRendererInternalUnit::create()
{
  return MEMORY[0x1F41723F8]();
}

uint64_t WebCore::wordBoundaryForPositionWithoutCrossingLine()
{
  return MEMORY[0x1F4172410]();
}

uint64_t WebCore::AdditionalNetworkLoadMetricsForWebInspector::create()
{
  return MEMORY[0x1F4172418]();
}

uint64_t WebCore::coopValuesRequireBrowsingContextGroupSwitch()
{
  return MEMORY[0x1F4172420]();
}

uint64_t WebCore::contextMenuItemTagAddHighlightToNewQuickNote(WebCore *this)
{
  return MEMORY[0x1F4172430](this);
}

uint64_t WebCore::removeRecentlyModifiedRecentSearchesFromFile()
{
  return MEMORY[0x1F4172438]();
}

uint64_t WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(WebCore *this)
{
  return MEMORY[0x1F4172440](this);
}

uint64_t WebCore::visibleImageElementsInRangeWithNonLoadedImages()
{
  return MEMORY[0x1F4172448]();
}

uint64_t WebCore::clearApplicationBundleIdentifierTestingOverride(WebCore *this)
{
  return MEMORY[0x1F4172450](this);
}

uint64_t WebCore::traitCollectionWithAdjustedIdiomForSystemColors(WebCore *this, UITraitCollection *a2)
{
  return MEMORY[0x1F4172458](this, a2);
}

uint64_t WebCore::closestEditablePositionInElementForAbsolutePoint()
{
  return MEMORY[0x1F4172460]();
}

uint64_t WebCore::contextMenuItemTagAddHighlightToCurrentQuickNote(WebCore *this)
{
  return MEMORY[0x1F4172468](this);
}

uint64_t WebCore::contentTypeMeetsContainerAndCodecTypeRequirements()
{
  return MEMORY[0x1F4172470]();
}

uint64_t WebCore::File::create()
{
  return MEMORY[0x1F4172488]();
}

uint64_t WebCore::Font::create()
{
  return MEMORY[0x1F4172490]();
}

{
  return MEMORY[0x1F4172498]();
}

void WebCore::Font::~Font(WebCore::Font *this)
{
}

uint64_t WebCore::Icon::create()
{
  return MEMORY[0x1F41724B0]();
}

uint64_t WebCore::Icon::create(WebCore::Icon *this, UIImage *a2)
{
  return MEMORY[0x1F41724B8](this, a2);
}

void WebCore::Icon::~Icon(WebCore::Icon *this)
{
}

uint64_t WebCore::Node::appendChild(WebCore::Node *this, Node *a2)
{
  return MEMORY[0x1F41724D0](this, a2);
}

uint64_t WebCore::Node::removeChild(WebCore::Node *this, WebCore::Node *a2)
{
  return MEMORY[0x1F41724D8](this, a2);
}

uint64_t WebCore::Node::insertBefore()
{
  return MEMORY[0x1F41724E0]();
}

uint64_t WebCore::Node::removedLastRef(WebCore::Node *this)
{
  return MEMORY[0x1F41724F0](this);
}

uint64_t WebCore::Node::setTextContent()
{
  return MEMORY[0x1F41724F8]();
}

uint64_t WebCore::Node::absoluteBoundingRect(WebCore::Node *this, BOOL *a2)
{
  return MEMORY[0x1F4172510](this, a2);
}

uint64_t WebCore::Page::findString()
{
  return MEMORY[0x1F4172540]();
}

uint64_t WebCore::Page::pluginData(WebCore::Page *this)
{
  return MEMORY[0x1F4172548](this);
}

uint64_t WebCore::Page::forEachPage()
{
  return MEMORY[0x1F4172550]();
}

uint64_t WebCore::Page::setGroupName(WebCore::Page *this, const WTF::String *a2)
{
  return MEMORY[0x1F4172558](this, a2);
}

uint64_t WebCore::Page::setMainFrame()
{
  return MEMORY[0x1F4172568]();
}

uint64_t WebCore::Page::setPagination()
{
  return MEMORY[0x1F4172588]();
}

uint64_t WebCore::Page::layoutIfNeeded()
{
  return MEMORY[0x1F4172590]();
}

uint64_t WebCore::Page::setInspectable(WebCore::Page *this)
{
  return MEMORY[0x1F4172598](this);
}

uint64_t WebCore::Page::setIsPrerender(WebCore::Page *this)
{
  return MEMORY[0x1F41725A0](this);
}

uint64_t WebCore::Page::setMediaVolume(WebCore::Page *this, float a2)
{
  return MEMORY[0x1F41725A8](this, a2);
}

uint64_t WebCore::Page::setOpenedByDOM(WebCore::Page *this)
{
  return MEMORY[0x1F41725B0](this);
}

uint64_t WebCore::Page::findTextMatches()
{
  return MEMORY[0x1F41725C0]();
}

uint64_t WebCore::Page::setMainFrameURL(WebCore::Page *this, const WTF::URL *a2)
{
  return MEMORY[0x1F41725C8](this, a2);
}

uint64_t WebCore::Page::updateRendering(WebCore::Page *this)
{
  return MEMORY[0x1F41725D0](this);
}

uint64_t WebCore::Page::countFindMatches()
{
  return MEMORY[0x1F41725D8]();
}

uint64_t WebCore::Page::setActivityState()
{
  return MEMORY[0x1F41725E0]();
}

uint64_t WebCore::Page::setCanStartMedia(WebCore::Page *this)
{
  return MEMORY[0x1F41725E8](this);
}

uint64_t WebCore::Page::setDefersLoading(WebCore::Page *this)
{
  return MEMORY[0x1F41725F0](this);
}

uint64_t WebCore::Page::stopMediaCapture()
{
  return MEMORY[0x1F41725F8]();
}

uint64_t WebCore::Page::serviceWorkerPage()
{
  return MEMORY[0x1F4172608]();
}

uint64_t WebCore::Page::settingsDidChange(WebCore::Page *this)
{
  return MEMORY[0x1F4172610](this);
}

uint64_t WebCore::Page::clearIDBConnection(WebCore::Page *this)
{
  return MEMORY[0x1F4172618](this);
}

uint64_t WebCore::Page::hasLocalDataForURL(WebCore::Page *this, const WTF::URL *a2)
{
  return MEMORY[0x1F4172620](this, a2);
}

uint64_t WebCore::Page::imageAnalysisQueue(WebCore::Page *this)
{
  return MEMORY[0x1F4172628](this);
}

uint64_t WebCore::Page::setPageScaleFactor(WebCore::Page *this, float a2, const IntPoint *a3)
{
  return MEMORY[0x1F4172638](this, a3, a2);
}

uint64_t WebCore::Page::setTopContentInset(WebCore::Page *this, float a2)
{
  return MEMORY[0x1F4172648](this, a2);
}

uint64_t WebCore::Page::setViewScaleFactor(WebCore::Page *this, float a2)
{
  return MEMORY[0x1F4172650](this, a2);
}

uint64_t WebCore::Page::updateCaptureState()
{
  return MEMORY[0x1F4172658]();
}

uint64_t WebCore::Page::addLayoutMilestones()
{
  return MEMORY[0x1F4172660]();
}

uint64_t WebCore::Page::mediaPlaybackExists(WebCore::Page *this)
{
  return MEMORY[0x1F4172668](this);
}

uint64_t WebCore::Page::setDelegatesScaling(WebCore::Page *this)
{
  return MEMORY[0x1F4172670](this);
}

uint64_t WebCore::Page::setFullscreenInsets()
{
  return MEMORY[0x1F4172678]();
}

uint64_t WebCore::Page::userContentProvider(WebCore::Page *this)
{
  return MEMORY[0x1F4172688](this);
}

uint64_t WebCore::Page::injectUserStyleSheet()
{
  return MEMORY[0x1F4172690]();
}

uint64_t WebCore::Page::scrollingCoordinator(WebCore::Page *this)
{
  return MEMORY[0x1F4172698](this);
}

uint64_t WebCore::Page::setDeviceScaleFactor(WebCore::Page *this, float a2)
{
  return MEMORY[0x1F41726A0](this, a2);
}

uint64_t WebCore::Page::setupForRemoteWorker()
{
  return MEMORY[0x1F41726A8]();
}

uint64_t WebCore::Page::unmarkAllTextMatches(WebCore::Page *this)
{
  return MEMORY[0x1F41726B0](this);
}

uint64_t WebCore::Page::forceRepaintAllFrames(WebCore::Page *this)
{
  return MEMORY[0x1F41726B8](this);
}

uint64_t WebCore::Page::markAllMatchesForText()
{
  return MEMORY[0x1F41726C0]();
}

uint64_t WebCore::Page::mediaPlaybackIsPaused(WebCore::Page *this)
{
  return MEMORY[0x1F41726C8](this);
}

uint64_t WebCore::Page::optionalIDBConnection(WebCore::Page *this)
{
  return MEMORY[0x1F41726D0](this);
}

uint64_t WebCore::Page::pauseAllMediaPlayback(WebCore::Page *this)
{
  return MEMORY[0x1F41726D8](this);
}

uint64_t WebCore::Page::replaceRangesWithText()
{
  return MEMORY[0x1F41726E0]();
}

uint64_t WebCore::Page::voiceActivityDetected(WebCore::Page *this)
{
  return MEMORY[0x1F41726E8](this);
}

uint64_t WebCore::Page::resumeAllMediaPlayback(WebCore::Page *this)
{
  return MEMORY[0x1F41726F0](this);
}

uint64_t WebCore::Page::revealCurrentSelection(WebCore::Page *this)
{
  return MEMORY[0x1F41726F8](this);
}

uint64_t WebCore::Page::finalizeRenderingUpdate()
{
  return MEMORY[0x1F4172718]();
}

uint64_t WebCore::Page::isolatedUpdateRendering(WebCore::Page *this)
{
  return MEMORY[0x1F4172720](this);
}

uint64_t WebCore::Page::scheduleRenderingUpdate()
{
  return MEMORY[0x1F4172730]();
}

uint64_t WebCore::Page::suspendAllMediaPlayback(WebCore::Page *this)
{
  return MEMORY[0x1F4172738](this);
}

uint64_t WebCore::Page::dispatchBeforePrintEvent(WebCore::Page *this)
{
  return MEMORY[0x1F4172740](this);
}

uint64_t WebCore::Page::setCORSDisablingPatterns()
{
  return MEMORY[0x1F4172750]();
}

uint64_t WebCore::Page::setEditableRegionEnabled(WebCore::Page *this)
{
  return MEMORY[0x1F4172758](this);
}

uint64_t WebCore::Page::setImageAnimationEnabled(WebCore::Page *this)
{
  return MEMORY[0x1F4172760](this);
}

uint64_t WebCore::Page::didCompleteRenderingFrame(WebCore::Page *this)
{
  return MEMORY[0x1F4172770](this);
}

uint64_t WebCore::Page::didEndWritingToolsSession()
{
  return MEMORY[0x1F4172778]();
}

uint64_t WebCore::Page::notifyToInjectUserScripts(WebCore::Page *this)
{
  return MEMORY[0x1F4172780](this);
}

uint64_t WebCore::Page::screenPropertiesDidChange(WebCore::Page *this)
{
  return MEMORY[0x1F4172788](this);
}

uint64_t WebCore::Page::analyzeImagesForFindInPage()
{
  return MEMORY[0x1F4172798]();
}

uint64_t WebCore::Page::clearWheelEventTestMonitor(WebCore::Page *this)
{
  return MEMORY[0x1F41727A8](this);
}

uint64_t WebCore::Page::willEndWritingToolsSession()
{
  return MEMORY[0x1F41727B8]();
}

uint64_t WebCore::Page::setPrefersNonBlinkingCursor(WebCore::Page *this)
{
  return MEMORY[0x1F41727D8](this);
}

uint64_t WebCore::Page::setUnobscuredSafeAreaInsets()
{
  return MEMORY[0x1F41727E0]();
}

uint64_t WebCore::Page::setZoomedOutPageScaleFactor(WebCore::Page *this, float a2)
{
  return MEMORY[0x1F41727F0](this, a2);
}

uint64_t WebCore::Page::disableICECandidateFiltering(WebCore::Page *this)
{
  return MEMORY[0x1F41727F8](this);
}

uint64_t WebCore::Page::effectiveAppearanceDidChange(WebCore::Page *this)
{
  return MEMORY[0x1F4172800](this);
}

uint64_t WebCore::Page::removeInjectedUserStyleSheet()
{
  return MEMORY[0x1F4172808]();
}

uint64_t WebCore::Page::setOverrideViewportArguments()
{
  return MEMORY[0x1F4172818]();
}

uint64_t WebCore::Page::applicationDidEnterBackground(WebCore::Page *this)
{
  return MEMORY[0x1F4172828](this);
}

uint64_t WebCore::Page::clearPreviousItemFromAllPages(WebCore::Page *this, WebCore::HistoryItem *a2)
{
  return MEMORY[0x1F4172830](this, a2);
}

uint64_t WebCore::Page::setFullscreenAutoHideDuration()
{
  return MEMORY[0x1F4172838]();
}

uint64_t WebCore::Page::accessibilitySettingsDidChange(WebCore::Page *this)
{
  return MEMORY[0x1F4172848](this);
}

uint64_t WebCore::Page::applicationWillEnterForeground(WebCore::Page *this)
{
  return MEMORY[0x1F4172850](this);
}

uint64_t WebCore::Page::setUserInterfaceLayoutDirection()
{
  return MEMORY[0x1F4172858]();
}

uint64_t WebCore::Page::willStartRenderingUpdateDisplay(WebCore::Page *this)
{
  return MEMORY[0x1F4172860](this);
}

uint64_t WebCore::Page::checkedElementTargetingController(WebCore::Page *this)
{
  return MEMORY[0x1F4172870](this);
}

uint64_t WebCore::Page::didCompleteRenderingUpdateDisplay(WebCore::Page *this)
{
  return MEMORY[0x1F4172878](this);
}

uint64_t WebCore::Page::setInitialScaleIgnoringContentSize(WebCore::Page *this, float a2)
{
  return MEMORY[0x1F4172888](this, a2);
}

uint64_t WebCore::Page::fragmentDirectiveURLForSelectedText(WebCore::Page *this)
{
  return MEMORY[0x1F4172890](this);
}

uint64_t WebCore::Page::resumeActiveDOMObjectsAndAnimations(WebCore::Page *this)
{
  return MEMORY[0x1F4172898](this);
}

uint64_t WebCore::Page::updateStyleAfterChangeInEnvironment(WebCore::Page *this)
{
  return MEMORY[0x1F41728A8](this);
}

uint64_t WebCore::Page::writingToolsSessionDidReceiveAction()
{
  return MEMORY[0x1F41728B0]();
}

uint64_t WebCore::Page::suspendActiveDOMObjectsAndAnimations(WebCore::Page *this)
{
  return MEMORY[0x1F41728C8](this);
}

uint64_t WebCore::Page::intelligenceTextAnimationsDidComplete(WebCore::Page *this)
{
  return MEMORY[0x1F41728D0](this);
}

uint64_t WebCore::Page::proofreadingSessionDidReceiveSuggestions()
{
  return MEMORY[0x1F41728E0]();
}

uint64_t WebCore::Page::setSelectionForActiveWritingToolsSession()
{
  return MEMORY[0x1F41728E8]();
}

uint64_t WebCore::Page::updateMediaElementRateChangeRestrictions(WebCore::Page *this)
{
  return MEMORY[0x1F41728F0](this);
}

uint64_t WebCore::Page::updateStateForSelectedSuggestionIfNeeded(WebCore::Page *this)
{
  return MEMORY[0x1F41728F8](this);
}

uint64_t WebCore::Page::setDOMTimerAlignmentIntervalIncreaseLimit()
{
  return MEMORY[0x1F4172900]();
}

uint64_t WebCore::Page::textPreviewDataForActiveWritingToolsSession()
{
  return MEMORY[0x1F4172908]();
}

uint64_t WebCore::Page::updateTextVisibilityForActiveWritingToolsSession()
{
  return MEMORY[0x1F4172920]();
}

uint64_t WebCore::Page::decorateTextReplacementsForActiveWritingToolsSession()
{
  return MEMORY[0x1F4172930]();
}

uint64_t WebCore::Page::group(WebCore::Page *this)
{
  return MEMORY[0x1F4172940](this);
}

uint64_t WebCore::Page::create()
{
  return MEMORY[0x1F4172948]();
}

uint64_t WebCore::Page::goToItem()
{
  return MEMORY[0x1F4172950]();
}

uint64_t WebCore::Page::setMuted()
{
  return MEMORY[0x1F4172958]();
}

void WebCore::Page::~Page(WebCore::Page *this)
{
}

uint64_t WebCore::Path::addRoundedRect()
{
  return MEMORY[0x1F4172968]();
}

uint64_t WebCore::Path::addRect(WebCore::Path *this, const FloatRect *a2)
{
  return MEMORY[0x1F4172970](this, a2);
}

uint64_t WebCore::Path::Path()
{
  return MEMORY[0x1F4172978]();
}

uint64_t WebCore::Path::Path(WebCore::Path *this, const WebCore::Path *a2)
{
  return MEMORY[0x1F4172980](this, a2);
}

uint64_t WebCore::toJS()
{
  return MEMORY[0x1F4172998]();
}

{
  return MEMORY[0x1F41729A0]();
}

uint64_t WebCore::rangeExpandedByCharactersInDirectionAtWordBoundary()
{
  return MEMORY[0x1F41729A8]();
}

uint64_t WebCore::WebTransportBidirectionalStreamConstructionParameters::WebTransportBidirectionalStreamConstructionParameters()
{
  return MEMORY[0x1F41729B0]();
}

{
  return MEMORY[0x1F41729B8]();
}

void WebCore::WebTransportBidirectionalStreamConstructionParameters::~WebTransportBidirectionalStreamConstructionParameters(WebCore::WebTransportBidirectionalStreamConstructionParameters *this)
{
}

uint64_t WebCore::Color::createAndPreserveColorSpace()
{
  return MEMORY[0x1F41729C8]();
}

uint64_t WebCore::Color::Color()
{
  return MEMORY[0x1F41729D0]();
}

{
  return MEMORY[0x1F41729D8]();
}

uint64_t WebCore::Color::Color(WebCore::Color *this, const Color *a2)
{
  return MEMORY[0x1F41729E0](this, a2);
}

uint64_t WebCore::Color::operator=()
{
  return MEMORY[0x1F41729E8]();
}

{
  return MEMORY[0x1F41729F0]();
}

uint64_t WebCore::Event::create()
{
  return MEMORY[0x1F41729F8]();
}

uint64_t WebCore::Frame::setOwnerElement(WebCore::Frame *this, WebCore::HTMLFrameOwnerElement *a2)
{
  return MEMORY[0x1F4172A10](this, a2);
}

uint64_t WebCore::Frame::disconnectOwnerElement(WebCore::Frame *this)
{
  return MEMORY[0x1F4172A18](this);
}

uint64_t WebCore::Frame::detachFromAllOpenedFrames(WebCore::Frame *this)
{
  return MEMORY[0x1F4172A28](this);
}

uint64_t WebCore::Frame::setOwnerPermissionsPolicy()
{
  return MEMORY[0x1F4172A30]();
}

uint64_t WebCore::Frame::takeWindowProxyAndOpenerFrom(WebCore::Frame *this, WebCore::Frame *a2)
{
  return MEMORY[0x1F4172A38](this, a2);
}

uint64_t WebCore::Image::supportsType(WebCore::Image *this, const WTF::String *a2)
{
  return MEMORY[0x1F4172A40](this, a2);
}

uint64_t WebCore::Image::setSystemAllowsAnimationControls(WebCore::Image *this)
{
  return MEMORY[0x1F4172A48](this);
}

uint64_t WebCore::Image::create()
{
  return MEMORY[0x1F4172A50]();
}

uint64_t WebCore::Image::setData()
{
  return MEMORY[0x1F4172A58]();
}

uint64_t WebCore::Image::nullImage(WebCore::Image *this)
{
  return MEMORY[0x1F4172A60](this);
}

uint64_t WebCore::Model::create()
{
  return MEMORY[0x1F4172A68]();
}

void WebCore::Model::~Model(WebCore::Model *this)
{
}

uint64_t WebCore::Range::selectNode(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1F4172A80](this, a2);
}

uint64_t WebCore::Range::selectNodeContents(WebCore::Range *this, WebCore::Node *a2)
{
  return MEMORY[0x1F4172AD0](this, a2);
}

uint64_t WebCore::Range::create(WebCore::Range *this, Document *a2)
{
  return MEMORY[0x1F4172AE0](this, a2);
}

uint64_t WebCore::Range::setEnd()
{
  return MEMORY[0x1F4172AF0]();
}

uint64_t WebCore::Range::setStart()
{
  return MEMORY[0x1F4172B00]();
}

uint64_t WebCore::Chrome::getToolTip()
{
  return MEMORY[0x1F4172B10]();
}

uint64_t WebCore::Chrome::createWindow(WebCore::Chrome *this, WebCore::LocalFrame *a2, const WebCore::WindowFeatures *a3, const WebCore::NavigationAction *a4)
{
  return MEMORY[0x1F4172B20](this, a2, a3, a4);
}

uint64_t WebCore::Chrome::setWindowRect(WebCore::Chrome *this, const FloatRect *a2)
{
  return MEMORY[0x1F4172B28](this, a2);
}

uint64_t WebCore::Chrome::print(WebCore::Chrome *this, WebCore::LocalFrame *a2)
{
  return MEMORY[0x1F4172B30](this, a2);
}

uint64_t WebCore::Cookie::Cookie(WebCore::Cookie *this, NSHTTPCookie *a2)
{
  return MEMORY[0x1F4172B38](this, a2);
}

uint64_t WebCore::Cursor::fromType()
{
  return MEMORY[0x1F4172B40]();
}

uint64_t WebCore::Cursor::Cursor(WebCore::Cursor *this, WebCore::Image *a2, const IntPoint *a3)
{
  return MEMORY[0x1F4172B48](this, a2, a3);
}

uint64_t WebCore::Editor::insertText()
{
  return MEMORY[0x1F4172B60]();
}

uint64_t WebCore::Editor::closeTyping(WebCore::Editor *this)
{
  return MEMORY[0x1F4172B68](this);
}

uint64_t WebCore::Editor::setComposition()
{
  return MEMORY[0x1F4172B78]();
}

uint64_t WebCore::Editor::fontForSelection(WebCore::Editor *this, BOOL *a2)
{
  return MEMORY[0x1F4172B88](this, a2);
}

uint64_t WebCore::Editor::insertAttachment()
{
  return MEMORY[0x1F4172B90]();
}

uint64_t WebCore::Editor::confirmComposition(WebCore::Editor *this, const WTF::String *a2)
{
  return MEMORY[0x1F4172BA8](this, a2);
}

uint64_t WebCore::Editor::confirmComposition(WebCore::Editor *this)
{
  return MEMORY[0x1F4172BB0](this);
}

uint64_t WebCore::Editor::insertDictatedText()
{
  return MEMORY[0x1F4172BB8]();
}

uint64_t WebCore::Editor::deleteWithDirection()
{
  return MEMORY[0x1F4172BC8]();
}

uint64_t WebCore::Editor::setWritingSuggestion()
{
  return MEMORY[0x1F4172BD8]();
}

uint64_t WebCore::Editor::applyStyleToSelection()
{
  return MEMORY[0x1F4172BE0]();
}

uint64_t WebCore::Editor::insertTextPlaceholder(WebCore::Editor *this, const IntSize *a2)
{
  return MEMORY[0x1F4172BE8](this, a2);
}

uint64_t WebCore::Editor::removeTextPlaceholder()
{
  return MEMORY[0x1F4172BF0]();
}

uint64_t WebCore::Editor::promisedAttachmentInfo()
{
  return MEMORY[0x1F4172C00]();
}

uint64_t WebCore::Editor::writeImageToPasteboard()
{
  return MEMORY[0x1F4172C08]();
}

uint64_t WebCore::Editor::changeSelectionListType(WebCore::Editor *this)
{
  return MEMORY[0x1F4172C10](this);
}

uint64_t WebCore::Editor::setBaseWritingDirection()
{
  return MEMORY[0x1F4172C18]();
}

uint64_t WebCore::Editor::replaceSelectionWithText()
{
  return MEMORY[0x1F4172C38]();
}

uint64_t WebCore::Editor::replaceNodeFromPasteboard()
{
  return MEMORY[0x1F4172C40]();
}

uint64_t WebCore::Editor::setIgnoreSelectionChanges()
{
  return MEMORY[0x1F4172C48]();
}

uint64_t WebCore::Editor::decreaseSelectionListLevel(WebCore::Editor *this)
{
  return MEMORY[0x1F4172C50](this);
}

uint64_t WebCore::Editor::increaseSelectionListLevel(WebCore::Editor *this)
{
  return MEMORY[0x1F4172C58](this);
}

uint64_t WebCore::Editor::readSelectionFromPasteboard(WebCore::Editor *this, const WTF::String *a2)
{
  return MEMORY[0x1F4172C60](this, a2);
}

uint64_t WebCore::Editor::handleAlternativeTextUIResult(WebCore::Editor *this, const WTF::String *a2)
{
  return MEMORY[0x1F4172C80](this, a2);
}

uint64_t WebCore::Editor::insertMultiRepresentationHEIC()
{
  return MEMORY[0x1F4172C88]();
}

uint64_t WebCore::Editor::deleteSelectionWithSmartDelete()
{
  return MEMORY[0x1F4172C90]();
}

uint64_t WebCore::Editor::fontAttributesAtSelectionStart(WebCore::Editor *this)
{
  return MEMORY[0x1F4172C98](this);
}

uint64_t WebCore::Editor::insertParagraphSeparatorInQuotedContent(WebCore::Editor *this)
{
  return MEMORY[0x1F4172CC0](this);
}

uint64_t WebCore::Editor::command(WebCore::Editor *this, const WTF::String *a2)
{
  return MEMORY[0x1F4172CE0](this, a2);
}

uint64_t WebCore::Editor::copyURL(WebCore::Editor *this, const WTF::URL *a2, const WTF::String *a3)
{
  return MEMORY[0x1F4172CE8](this, a2, a3);
}

uint64_t WebCore::FETile::create()
{
  return MEMORY[0x1F4172CF0]();
}

uint64_t WebCore::JSNode::toWrapped(WebCore::JSNode *this, JSC::VM *a2, JSValue a3)
{
  return MEMORY[0x1F4172CF8](this, a2, a3.super.isa);
}

uint64_t WebCore::Length::Length()
{
  return MEMORY[0x1F4172D00]();
}

uint64_t WebCore::Quirks::needsIPhoneUserAgent(WebCore::Quirks *this, const WTF::URL *a2)
{
  return MEMORY[0x1F4172D08](this, a2);
}

uint64_t WebCore::Quirks::needsDesktopUserAgent(WebCore::Quirks *this, const WTF::URL *a2)
{
  return MEMORY[0x1F4172D10](this, a2);
}

uint64_t WebCore::Quirks::needsIPadMiniUserAgent(WebCore::Quirks *this, const WTF::URL *a2)
{
  return MEMORY[0x1F4172D18](this, a2);
}

uint64_t WebCore::Quirks::defaultVisibilityAdjustmentSelectors(WebCore::Quirks *this, const WTF::URL *a2)
{
  return MEMORY[0x1F4172D20](this, a2);
}

uint64_t WebCore::Quirks::updateStorageAccessUserAgentStringQuirks()
{
  return MEMORY[0x1F4172D28]();
}

uint64_t WebCore::Quirks::shouldAllowNavigationToCustomProtocolWithoutUserGesture()
{
  return MEMORY[0x1F4172D30]();
}

uint64_t WebCore::Region::Shape::isValidShape()
{
  return MEMORY[0x1F4172D38]();
}

uint64_t WebCore::Region::Shape::Shape()
{
  return MEMORY[0x1F4172D40]();
}

uint64_t WebCore::Region::Shape::Shape(WebCore::Region::Shape *this, const IntRect *a2)
{
  return MEMORY[0x1F4172D48](this, a2);
}

uint64_t WebCore::Region::unite()
{
  return MEMORY[0x1F4172D50]();
}

uint64_t WebCore::Region::setShape()
{
  return MEMORY[0x1F4172D58]();
}

uint64_t WebCore::Region::subtract()
{
  return MEMORY[0x1F4172D60]();
}

uint64_t WebCore::Region::Region()
{
  return MEMORY[0x1F4172D68]();
}

uint64_t WebCore::Region::Region(WebCore::Region *this, const IntRect *a2)
{
  return MEMORY[0x1F4172D70](this, a2);
}

uint64_t WebCore::Region::Region(WebCore::Region *this, const WebCore::Region *a2)
{
  return MEMORY[0x1F4172D78](this, a2);
}

uint64_t WebCore::Region::Region(WebCore::Region *this)
{
  return MEMORY[0x1F4172D80](this);
}

void WebCore::Region::~Region(WebCore::Region *this)
{
}

uint64_t WebCore::Region::operator=()
{
  return MEMORY[0x1F4172D90]();
}

{
  return MEMORY[0x1F4172D98]();
}

uint64_t WebCore::Report::create()
{
  return MEMORY[0x1F4172DA0]();
}

void WebCore::Report::~Report(WebCore::Report *this)
{
}

void WebCore::Report::operator delete(void *a1)
{
}

uint64_t WebCore::WebGPU::create()
{
  return MEMORY[0x1F4172DB8]();
}

uint64_t WebCore::WebRTC::extractMessages()
{
  return MEMORY[0x1F4172DC0]();
}

uint64_t WebCore::WebRTC::getSTUNOrTURNMessageLengths()
{
  return MEMORY[0x1F4172DC8]();
}

uint64_t WebCore::Widget::setFrameRect(WebCore::Widget *this, const IntRect *a2)
{
  return MEMORY[0x1F4172DD0](this, a2);
}

uint64_t WebCore::Widget::removeFromParent(WebCore::Widget *this)
{
  return MEMORY[0x1F4172DD8](this);
}

uint64_t WebCore::Widget::setParent(WebCore::Widget *this, WebCore::ScrollView *a2)
{
  return MEMORY[0x1F4172DF8](this, a2);
}

uint64_t WebCore::Widget::Widget()
{
  return MEMORY[0x1F4172E00]();
}

uint64_t WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(WebCore *this)
{
  return MEMORY[0x1F4172E10](this);
}

uint64_t WebCore::Archive::saveResourcesToDisk(WebCore::Archive *this, const WTF::String *a2)
{
  return MEMORY[0x1F4172E18](this, a2);
}

uint64_t WebCore::Element::setAttribute(WebCore::Element *this, const AtomString *a2, const AtomString *a3)
{
  return MEMORY[0x1F4172E50](this, a2, a3);
}

uint64_t WebCore::Element::fromIdentifier()
{
  return MEMORY[0x1F4172E68]();
}

uint64_t WebCore::Element::getClientRects(WebCore::Element *this)
{
  return MEMORY[0x1F4172E70](this);
}

uint64_t WebCore::Element::boundingClientRect(WebCore::Element *this)
{
  return MEMORY[0x1F4172EA8](this);
}

uint64_t WebCore::Element::boundsInRootViewSpace(WebCore::Element *this)
{
  return MEMORY[0x1F4172EF0](this);
}

uint64_t WebCore::Element::ensureUserAgentShadowRoot(WebCore::Element *this)
{
  return MEMORY[0x1F4172F28](this);
}

uint64_t WebCore::Element::scrollIntoViewIfNotVisible(WebCore::Element *this)
{
  return MEMORY[0x1F4172F30](this);
}

uint64_t WebCore::Element::invalidateStyleAndLayerComposition(WebCore::Element *this)
{
  return MEMORY[0x1F4172F40](this);
}

uint64_t WebCore::Element::setAttributeWithoutSynchronization(WebCore::Element *this, const WebCore::QualifiedName *a2, const AtomString *a3)
{
  return MEMORY[0x1F4172F48](this, a2, a3);
}

uint64_t WebCore::Element::innerText(WebCore::Element *this)
{
  return MEMORY[0x1F4172F70](this);
}

uint64_t WebCore::FEBlend::create()
{
  return MEMORY[0x1F4172F80]();
}

uint64_t WebCore::FEFlood::create()
{
  return MEMORY[0x1F4172F88]();
}

uint64_t WebCore::FEImage::create()
{
  return MEMORY[0x1F4172F90]();
}

uint64_t WebCore::FEMerge::create()
{
  return MEMORY[0x1F4172F98]();
}

uint64_t WebCore::IntRect::intersect(WebCore::IntRect *this, const IntRect *a2)
{
  return MEMORY[0x1F4172FA0](this, a2);
}

uint64_t WebCore::IntRect::IntRect(WebCore::IntRect *this, const FloatRect *a2)
{
  return MEMORY[0x1F4172FA8](this, a2);
}

uint64_t WebCore::IntSize::IntSize(WebCore::IntSize *this, const CGSize *a2)
{
  return MEMORY[0x1F4172FB0](this, a2);
}

uint64_t WebCore::IntSize::IntSize(WebCore::IntSize *this, const WebCore::FloatSize *a2)
{
  return MEMORY[0x1F4172FB8](this, a2);
}

uint64_t WebCore::JSRange::toWrapped(WebCore::JSRange *this, JSC::VM *a2, JSValue a3)
{
  return MEMORY[0x1F4172FC8](this, a2, a3.super.isa);
}

uint64_t WebCore::Pattern::create()
{
  return MEMORY[0x1F4172FD0]();
}

void WebCore::Pattern::~Pattern(WebCore::Pattern *this)
{
}

uint64_t WebCore::Payment::Payment()
{
  return MEMORY[0x1F4172FE0]();
}

void WebCore::Payment::~Payment(WebCore::Payment *this)
{
}

uint64_t WebCore::Process::identifier(WebCore::Process *this)
{
  return MEMORY[0x1F4172FF0](this);
}

uint64_t WebCore::Process::setIdentifier()
{
  return MEMORY[0x1F4172FF8]();
}

uint64_t WebCore::dataURL()
{
  return MEMORY[0x1F4173008]();
}

uint64_t WebCore::mapRect(WebCore *this, const FloatRect *a2, const FloatRect *a3, const FloatRect *a4)
{
  return MEMORY[0x1F4173010](this, a2, a3, a4);
}

uint64_t WebCore::AudioBus::setChannelMemory(WebCore::AudioBus *this, uint64_t a2, float *a3)
{
  return MEMORY[0x1F4173018](this, a2, a3);
}

uint64_t WebCore::CSSValue::operator delete()
{
  return MEMORY[0x1F4173020]();
}

uint64_t WebCore::Document::allDocuments(WebCore::Document *this)
{
  return MEMORY[0x1F4173068](this);
}

uint64_t WebCore::Document::ensureQuirks(WebCore::Document *this)
{
  return MEMORY[0x1F4173070](this);
}

uint64_t WebCore::Document::updateLayout()
{
  return MEMORY[0x1F4173078]();
}

uint64_t WebCore::Document::createElement(WebCore::Document *this, const WebCore::QualifiedName *a2)
{
  return MEMORY[0x1F4173090](this, a2);
}

uint64_t WebCore::Document::ensureMarkers(WebCore::Document *this)
{
  return MEMORY[0x1F4173098](this);
}

uint64_t WebCore::Document::createTextNode()
{
  return MEMORY[0x1F41730C8]();
}

uint64_t WebCore::Document::allDocumentsMap(WebCore::Document *this)
{
  return MEMORY[0x1F41730E0](this);
}

uint64_t WebCore::Document::addConsoleMessage()
{
  return MEMORY[0x1F4173118]();
}

uint64_t WebCore::Document::setFocusedElement(WebCore::Document *this, WebCore::Element *a2)
{
  return MEMORY[0x1F4173148](this, a2);
}

uint64_t WebCore::Document::appHighlightStorage(WebCore::Document *this)
{
  return MEMORY[0x1F4173160](this);
}

uint64_t WebCore::Document::forEachMediaElement()
{
  return MEMORY[0x1F4173178]();
}

uint64_t WebCore::Document::updateStyleIfNeeded(WebCore::Document *this)
{
  return MEMORY[0x1F4173188](this);
}

uint64_t WebCore::Document::appHighlightRegistry(WebCore::Document *this)
{
  return MEMORY[0x1F4173190](this);
}

uint64_t WebCore::Document::ensureReportingScope(WebCore::Document *this)
{
  return MEMORY[0x1F4173198](this);
}

uint64_t WebCore::Document::setRTCNetworkManager()
{
  return MEMORY[0x1F41731A8]();
}

uint64_t WebCore::Document::contentChangeObserver(WebCore::Document *this)
{
  return MEMORY[0x1F41731B0](this);
}

uint64_t WebCore::Document::didAddWheelEventHandler(WebCore::Document *this, WebCore::Node *a2)
{
  return MEMORY[0x1F41731D0](this, a2);
}

uint64_t WebCore::Document::ensureFullscreenManager(WebCore::Document *this)
{
  return MEMORY[0x1F41731D8](this);
}

uint64_t WebCore::Document::addMediaCanStartListener()
{
  return MEMORY[0x1F41731E8]();
}

uint64_t WebCore::Document::createElementForBindings(WebCore::Document *this, const AtomString *a2)
{
  return MEMORY[0x1F41731F0](this, a2);
}

uint64_t WebCore::Document::navigateFromServiceWorker()
{
  return MEMORY[0x1F4173210]();
}

uint64_t WebCore::Document::didRemoveWheelEventHandler()
{
  return MEMORY[0x1F4173218]();
}

uint64_t WebCore::Document::textManipulationController(WebCore::Document *this)
{
  return MEMORY[0x1F4173228](this);
}

uint64_t WebCore::Document::updateCachedCookiesEnabled(WebCore::Document *this)
{
  return MEMORY[0x1F4173230](this);
}

uint64_t WebCore::Document::removeMediaCanStartListener()
{
  return MEMORY[0x1F4173240]();
}

uint64_t WebCore::Document::setNeedsDOMWindowResizeEvent(WebCore::Document *this)
{
  return MEMORY[0x1F4173248](this);
}

uint64_t WebCore::Document::enqueueSecurityPolicyViolationEvent()
{
  return MEMORY[0x1F4173260]();
}

uint64_t WebCore::Document::updateLayoutIgnorePendingStylesheets()
{
  return MEMORY[0x1F4173268]();
}

uint64_t WebCore::Document::hasRequestedPageSpecificStorageAccessWithUserInteraction()
{
  return MEMORY[0x1F4173288]();
}

uint64_t WebCore::Document::setHasRequestedPageSpecificStorageAccessWithUserInteraction()
{
  return MEMORY[0x1F4173290]();
}

uint64_t WebCore::Document::editor(WebCore::Document *this)
{
  return MEMORY[0x1F41732C0](this);
}

uint64_t WebCore::Document::hitTest()
{
  return MEMORY[0x1F41732F0]();
}

uint64_t WebCore::Document::postTask()
{
  return MEMORY[0x1F4173310]();
}

uint64_t WebCore::Document::eventLoop(WebCore::Document *this)
{
  return MEMORY[0x1F4173330](this);
}

uint64_t WebCore::DragData::DragData()
{
  return MEMORY[0x1F4173340]();
}

{
  return MEMORY[0x1F4173348]();
}

uint64_t WebCore::FEOffset::create()
{
  return MEMORY[0x1F4173350]();
}

void WebCore::FileList::operator delete(void *a1)
{
}

uint64_t WebCore::FileList::operator new(WebCore::FileList *this)
{
  return MEMORY[0x1F4173360](this);
}

uint64_t WebCore::FormData::appendBlob(WebCore::FormData *this, const WTF::URL *a2)
{
  return MEMORY[0x1F4173368](this, a2);
}

uint64_t WebCore::FormData::appendData()
{
  return MEMORY[0x1F4173370]();
}

uint64_t WebCore::FormData::appendFileRange()
{
  return MEMORY[0x1F4173378]();
}

uint64_t WebCore::FormData::resolveBlobReferences(WebCore::FormData *this, WebCore::BlobRegistryImpl *a2)
{
  return MEMORY[0x1F4173380](this, a2);
}

uint64_t WebCore::FormData::create()
{
  return MEMORY[0x1F4173388]();
}

{
  return MEMORY[0x1F4173390]();
}

uint64_t WebCore::FormData::create(WebCore::FormData *this)
{
  return MEMORY[0x1F4173398](this);
}

void WebCore::FormData::~FormData(WebCore::FormData *this)
{
}

void WebCore::FormData::operator delete(void *a1)
{
}

uint64_t WebCore::Gradient::create()
{
  return MEMORY[0x1F41733B0]();
}

uint64_t WebCore::IDBError::IDBError()
{
  return MEMORY[0x1F41733B8]();
}

uint64_t WebCore::IDBValue::IDBValue()
{
  return MEMORY[0x1F41733C0]();
}

uint64_t WebCore::IntPoint::IntPoint(WebCore::IntPoint *this, const CGPoint *a2)
{
  return MEMORY[0x1F41733C8](this, a2);
}

uint64_t WebCore::IntPoint::IntPoint(WebCore::IntPoint *this, const WebCore::FloatPoint *a2)
{
  return MEMORY[0x1F41733D0](this, a2);
}

uint64_t WebCore::Position::Position()
{
  return MEMORY[0x1F41733D8]();
}

{
  return MEMORY[0x1F41733E0]();
}

uint64_t WebCore::RTCError::RTCError()
{
  return MEMORY[0x1F41733F0]();
}

uint64_t WebCore::SWServer::Connection::abortBackgroundFetch()
{
  return MEMORY[0x1F41733F8]();
}

uint64_t WebCore::SWServer::Connection::matchBackgroundFetch()
{
  return MEMORY[0x1F4173400]();
}

uint64_t WebCore::SWServer::Connection::startBackgroundFetch()
{
  return MEMORY[0x1F4173408]();
}

uint64_t WebCore::SWServer::Connection::whenRegistrationReady()
{
  return MEMORY[0x1F4173410]();
}

uint64_t WebCore::SWServer::Connection::doRegistrationMatching(WebCore::SWServer::Connection *this, const WebCore::SecurityOriginData *a2, const WTF::URL *a3)
{
  return MEMORY[0x1F4173418](this, a2, a3);
}

uint64_t WebCore::SWServer::Connection::retrieveRecordResponse()
{
  return MEMORY[0x1F4173420]();
}

uint64_t WebCore::SWServer::Connection::storeRegistrationsOnDisk()
{
  return MEMORY[0x1F4173428]();
}

uint64_t WebCore::SWServer::Connection::backgroundFetchIdentifiers()
{
  return MEMORY[0x1F4173430]();
}

uint64_t WebCore::SWServer::Connection::backgroundFetchInformation()
{
  return MEMORY[0x1F4173438]();
}

uint64_t WebCore::SWServer::Connection::retrieveRecordResponseBody()
{
  return MEMORY[0x1F4173440]();
}

uint64_t WebCore::SWServer::Connection::finishFetchingScriptInServer()
{
  return MEMORY[0x1F4173448]();
}

uint64_t WebCore::SWServer::Connection::didResolveRegistrationPromise(WebCore::SWServer::Connection *this, const WebCore::ServiceWorkerRegistrationKey *a2)
{
  return MEMORY[0x1F4173450](this, a2);
}

uint64_t WebCore::SWServer::Connection::Connection()
{
  return MEMORY[0x1F4173468]();
}

void WebCore::SWServer::Connection::~Connection(WebCore::SWServer::Connection *this)
{
}

uint64_t WebCore::SWServer::scheduleJob()
{
  return MEMORY[0x1F4173478]();
}

uint64_t WebCore::SWServer::addConnection()
{
  return MEMORY[0x1F4173480]();
}

uint64_t WebCore::SWServer::getAllOrigins()
{
  return MEMORY[0x1F4173488]();
}

uint64_t WebCore::SWServer::setInspectable()
{
  return MEMORY[0x1F4173490]();
}

uint64_t WebCore::SWServer::getRegistration()
{
  return MEMORY[0x1F4173498]();
}

uint64_t WebCore::SWServer::gatherClientData()
{
  return MEMORY[0x1F41734A0]();
}

uint64_t WebCore::SWServer::getRegistrations(WebCore::SWServer *this, const WebCore::SecurityOriginData *a2, const WTF::URL *a3)
{
  return MEMORY[0x1F41734A8](this, a2, a3);
}

uint64_t WebCore::SWServer::removeConnection()
{
  return MEMORY[0x1F41734B0]();
}

uint64_t WebCore::SWServer::processPushMessage()
{
  return MEMORY[0x1F41734B8]();
}

uint64_t WebCore::SWServer::addContextConnection()
{
  return MEMORY[0x1F41734C0]();
}

uint64_t WebCore::SWServer::backgroundFetchEngine(WebCore::SWServer *this)
{
  return MEMORY[0x1F41734C8](this);
}

uint64_t WebCore::SWServer::scheduleUnregisterJob()
{
  return MEMORY[0x1F41734D0]();
}

uint64_t WebCore::SWServer::whenImportIsCompleted()
{
  return MEMORY[0x1F41734D8]();
}

uint64_t WebCore::SWServer::forEachClientForOrigin()
{
  return MEMORY[0x1F41734E0]();
}

uint64_t WebCore::SWServer::handleLowMemoryWarning(WebCore::SWServer *this)
{
  return MEMORY[0x1F41734E8](this);
}

uint64_t WebCore::SWServer::createContextConnection()
{
  return MEMORY[0x1F41734F0]();
}

uint64_t WebCore::SWServer::removeContextConnection()
{
  return MEMORY[0x1F41734F8]();
}

uint64_t WebCore::SWServer::processNotificationEvent()
{
  return MEMORY[0x1F4173500]();
}

uint64_t WebCore::SWServer::storeRegistrationsOnDisk()
{
  return MEMORY[0x1F4173508]();
}

uint64_t WebCore::SWServer::didSaveWorkerScriptsToDisk()
{
  return MEMORY[0x1F4173510]();
}

uint64_t WebCore::SWServer::getOriginsWithRegistrations()
{
  return MEMORY[0x1F4173518]();
}

uint64_t WebCore::SWServer::registerServiceWorkerClient()
{
  return MEMORY[0x1F4173520]();
}

uint64_t WebCore::SWServer::runServiceWorkerIfNecessary()
{
  return MEMORY[0x1F4173528]();
}

uint64_t WebCore::SWServer::unregisterServiceWorkerClient()
{
  return MEMORY[0x1F4173530]();
}

uint64_t WebCore::SWServer::postMessageToServiceWorkerClient()
{
  return MEMORY[0x1F4173538]();
}

uint64_t WebCore::SWServer::contextConnectionForRegistrableDomain()
{
  return MEMORY[0x1F4173540]();
}

uint64_t WebCore::SWServer::terminateContextConnectionWhenPossible()
{
  return MEMORY[0x1F4173548]();
}

uint64_t WebCore::SWServer::releaseServiceWorkerClientPendingMessage()
{
  return MEMORY[0x1F4173550]();
}

uint64_t WebCore::SWServer::clear()
{
  return MEMORY[0x1F4173558]();
}

{
  return MEMORY[0x1F4173560]();
}

uint64_t WebCore::SWServer::create()
{
  return MEMORY[0x1F4173568]();
}

uint64_t WebCore::SWServer::clearAll()
{
  return MEMORY[0x1F4173570]();
}

void WebCore::SWServer::~SWServer(WebCore::SWServer *this)
{
}

uint64_t WebCore::Settings::setDefaultFontSize(WebCore::Settings *this, double a2)
{
  return MEMORY[0x1F4173580](this, a2);
}

uint64_t WebCore::Settings::setMinimumFontSize(WebCore::Settings *this, double a2)
{
  return MEMORY[0x1F4173588](this, a2);
}

uint64_t WebCore::Settings::setShowDebugBorders(WebCore::Settings *this)
{
  return MEMORY[0x1F4173590](this);
}

uint64_t WebCore::Settings::setCoreMathMLEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173598](this);
}

uint64_t WebCore::Settings::setColorFilterEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F41735A0](this);
}

uint64_t WebCore::Settings::setShowRepaintCounter(WebCore::Settings *this)
{
  return MEMORY[0x1F41735A8](this);
}

uint64_t WebCore::Settings::setCanvasFiltersEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F41735B0](this);
}

uint64_t WebCore::Settings::setDefaultFixedFontSize(WebCore::Settings *this, double a2)
{
  return MEMORY[0x1F41735B8](this, a2);
}

uint64_t WebCore::Settings::setUsesBackForwardCache(WebCore::Settings *this)
{
  return MEMORY[0x1F41735C0](this);
}

uint64_t WebCore::Settings::setDNSPrefetchingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F41735C8](this);
}

uint64_t WebCore::Settings::setStorageBlockingPolicy()
{
  return MEMORY[0x1F41735D0]();
}

uint64_t WebCore::Settings::setTextAreasAreResizable(WebCore::Settings *this)
{
  return MEMORY[0x1F41735D8](this);
}

uint64_t WebCore::Settings::setTextAutosizingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F41735E0](this);
}

uint64_t WebCore::Settings::setVisualViewportEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F41735E8](this);
}

uint64_t WebCore::Settings::setMinimumLogicalFontSize(WebCore::Settings *this, double a2)
{
  return MEMORY[0x1F41735F0](this, a2);
}

uint64_t WebCore::Settings::setUserStyleSheetLocation(WebCore::Settings *this, const WTF::URL *a2)
{
  return MEMORY[0x1F41735F8](this, a2);
}

uint64_t WebCore::Settings::setLoadsImagesAutomatically(WebCore::Settings *this)
{
  return MEMORY[0x1F4173600](this);
}

uint64_t WebCore::Settings::setAcceleratedFiltersEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173608](this);
}

uint64_t WebCore::Settings::setMockCaptureDevicesEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173610](this);
}

uint64_t WebCore::Settings::setAsyncFrameScrollingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173618](this);
}

uint64_t WebCore::Settings::setAuthorAndUserStylesEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173620](this);
}

uint64_t WebCore::Settings::setLayerBasedSVGEngineEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173628](this);
}

uint64_t WebCore::Settings::disableFeaturesForLockdownMode(WebCore::Settings *this)
{
  return MEMORY[0x1F4173630](this);
}

uint64_t WebCore::Settings::setResourceUsageOverlayVisible(WebCore::Settings *this)
{
  return MEMORY[0x1F4173638](this);
}

uint64_t WebCore::Settings::setICECandidateFilteringEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173640](this);
}

uint64_t WebCore::Settings::setAcceleratedCompositingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173648](this);
}

uint64_t WebCore::Settings::setAsyncOverflowScrollingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173650](this);
}

uint64_t WebCore::Settings::setCSSWordBreakAutoPhraseEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173658](this);
}

uint64_t WebCore::Settings::setGraphicsContextFiltersEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173660](this);
}

uint64_t WebCore::Settings::setShouldAllowUserInstalledFonts(WebCore::Settings *this)
{
  return MEMORY[0x1F4173668](this);
}

uint64_t WebCore::Settings::setShouldEnableTextAutosizingBoost(WebCore::Settings *this)
{
  return MEMORY[0x1F4173678](this);
}

uint64_t WebCore::Settings::setBackgroundShouldExtendBeyondPage(WebCore::Settings *this)
{
  return MEMORY[0x1F4173680](this);
}

uint64_t WebCore::Settings::setTextAutosizingUsesIdempotentMode(WebCore::Settings *this)
{
  return MEMORY[0x1F4173688](this);
}

uint64_t WebCore::Settings::setPunchOutWhiteBackgroundsInDarkMode(WebCore::Settings *this)
{
  return MEMORY[0x1F4173690](this);
}

uint64_t WebCore::Settings::setScrollingPerformanceTestingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F4173698](this);
}

uint64_t WebCore::Settings::setShouldUseModernAVContentKeySession(WebCore::Settings *this)
{
  return MEMORY[0x1F41736A0](this);
}

uint64_t WebCore::Settings::disableUnstableFeaturesForModernWebKit(WebCore::Settings *this)
{
  return MEMORY[0x1F41736A8](this);
}

uint64_t WebCore::Settings::setHiddenPageDOMTimerThrottlingEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F41736B0](this);
}

uint64_t WebCore::Settings::setLayoutViewportHeightExpansionFactor(WebCore::Settings *this, double a2)
{
  return MEMORY[0x1F41736B8](this, a2);
}

uint64_t WebCore::Settings::setLegacyOverflowScrollingTouchEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F41736C0](this);
}

uint64_t WebCore::Settings::setLegacyLineLayoutVisualCoverageEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F41736C8](this);
}

uint64_t WebCore::Settings::setHiddenPageCSSAnimationSuspensionEnabled(WebCore::Settings *this)
{
  return MEMORY[0x1F41736D0](this);
}

uint64_t WebCore::Settings::disableGlobalUnstableFeaturesForModernWebKit(WebCore::Settings *this)
{
  return MEMORY[0x1F41736D8](this);
}

uint64_t WebCore::Settings::setHiddenPageDOMTimerThrottlingAutoIncreases(WebCore::Settings *this)
{
  return MEMORY[0x1F41736E0](this);
}

uint64_t WebCore::contains()
{
  return MEMORY[0x1F41736E8]();
}

uint64_t WebCore::copyRows(WebCore *this, uint64_t a2, const unsigned __int8 *a3, uint64_t a4, unsigned __int8 *a5)
{
  return MEMORY[0x1F41736F0](this, a2, a3, a4, a5);
}

uint64_t WebCore::isReload()
{
  return MEMORY[0x1F41736F8]();
}

uint64_t WebCore::midpoint()
{
  return MEMORY[0x1F4173700]();
}

uint64_t WebCore::toString()
{
  return MEMORY[0x1F4173708]();
}

uint64_t WebCore::Animation::Animation(WebCore::Animation *this)
{
  return MEMORY[0x1F4173710](this);
}

void WebCore::Animation::~Animation(WebCore::Animation *this)
{
}

uint64_t WebCore::CSSFilter::create()
{
  return MEMORY[0x1F4173720]();
}

uint64_t WebCore::CSSParser::parseColorWithoutContext(WebCore::CSSParser *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173728](this, a2);
}

uint64_t WebCore::CaretBase::computeCaretColor()
{
  return MEMORY[0x1F4173730]();
}

uint64_t WebCore::CookieJar::sameSiteInfo()
{
  return MEMORY[0x1F4173738]();
}

uint64_t WebCore::CookieJar::shouldIncludeSecureCookies(WebCore::CookieJar *this, const WebCore::Document *a2, const WTF::URL *a3)
{
  return MEMORY[0x1F4173740](this, a2, a3);
}

uint64_t WebCore::CookieJar::CookieJar()
{
  return MEMORY[0x1F4173758]();
}

void WebCore::CookieJar::~CookieJar(WebCore::CookieJar *this)
{
}

uint64_t WebCore::DragImage::DragImage()
{
  return MEMORY[0x1F4173768]();
}

void WebCore::DragImage::~DragImage(WebCore::DragImage *this)
{
}

uint64_t WebCore::FloatRect::scale(WebCore::FloatRect *this, float a2, float a3)
{
  return MEMORY[0x1F4173778](this, a2, a3);
}

uint64_t WebCore::FloatRect::unite(WebCore::FloatRect *this, const WebCore::FloatRect *a2)
{
  return MEMORY[0x1F4173780](this, a2);
}

uint64_t WebCore::FloatRect::intersect(WebCore::FloatRect *this, const WebCore::FloatRect *a2)
{
  return MEMORY[0x1F4173788](this, a2);
}

uint64_t WebCore::FloatRect::FloatRect(WebCore::FloatRect *this, const CGRect *a2)
{
  return MEMORY[0x1F4173790](this, a2);
}

uint64_t WebCore::FloatRect::FloatRect(WebCore::FloatRect *this, const WebCore::IntRect *a2)
{
  return MEMORY[0x1F4173798](this, a2);
}

uint64_t WebCore::FloatSize::FloatSize(WebCore::FloatSize *this, const CGSize *a2)
{
  return MEMORY[0x1F41737A0](this, a2);
}

uint64_t WebCore::FontCache::invalidateAllFontCaches()
{
  return MEMORY[0x1F41737C0]();
}

uint64_t WebCore::FrameTree::removeChild(WebCore::FrameTree *this, WebCore::Frame *a2)
{
  return MEMORY[0x1F41737D0](this, a2);
}

uint64_t WebCore::FrameTree::setSpecifiedName(WebCore::FrameTree *this, const AtomString *a2)
{
  return MEMORY[0x1F41737D8](this, a2);
}

uint64_t WebCore::IDBClient::IDBConnectionProxy::deref(WebCore::IDBClient::IDBConnectionProxy *this)
{
  return MEMORY[0x1F41737F0](this);
}

void WebCore::IDBClient::IDBConnectionProxy::operator delete(void *a1)
{
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::connectionToServerLost()
{
  return MEMORY[0x1F41738A0]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::fireVersionChangeEvent()
{
  return MEMORY[0x1F41738A8]();
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::notifyOpenDBRequestBlocked(WebCore::IDBClient::IDBConnectionToServer *this, const WebCore::IDBResourceIdentifier *a2)
{
  return MEMORY[0x1F41738B0](this, a2);
}

uint64_t WebCore::IDBClient::IDBConnectionToServer::create()
{
  return MEMORY[0x1F41738C0]();
}

void WebCore::IDBClient::IDBConnectionToServer::operator delete(void *a1)
{
}

uint64_t WebCore::IDBServer::UniqueIDBDatabase::handleDelete()
{
  return MEMORY[0x1F41738D0]();
}

uint64_t WebCore::IDBServer::UniqueIDBDatabase::immediateClose(WebCore::IDBServer::UniqueIDBDatabase *this)
{
  return MEMORY[0x1F41738D8](this);
}

uint64_t WebCore::IDBServer::UniqueIDBDatabase::handleLowMemoryWarning(WebCore::IDBServer::UniqueIDBDatabase *this)
{
  return MEMORY[0x1F41738E0](this);
}

uint64_t WebCore::IDBServer::UniqueIDBDatabase::openDBRequestCancelled(WebCore::IDBServer::UniqueIDBDatabase *this, const WebCore::IDBResourceIdentifier *a2)
{
  return MEMORY[0x1F41738E8](this, a2);
}

uint64_t WebCore::IDBServer::UniqueIDBDatabase::openDatabaseConnection()
{
  return MEMORY[0x1F41738F0]();
}

uint64_t WebCore::IDBServer::UniqueIDBDatabase::abortActiveTransactions(WebCore::IDBServer::UniqueIDBDatabase *this)
{
  return MEMORY[0x1F41738F8](this);
}

uint64_t WebCore::IDBServer::UniqueIDBDatabase::tryClose(WebCore::IDBServer::UniqueIDBDatabase *this)
{
  return MEMORY[0x1F4173900](this);
}

uint64_t WebCore::IDBServer::UniqueIDBDatabase::UniqueIDBDatabase()
{
  return MEMORY[0x1F4173908]();
}

void WebCore::IDBServer::UniqueIDBDatabase::~UniqueIDBDatabase(WebCore::IDBServer::UniqueIDBDatabase *this)
{
}

uint64_t WebCore::IDBServer::IDBConnectionToClient::connectionToClientClosed(WebCore::IDBServer::IDBConnectionToClient *this)
{
  return MEMORY[0x1F4173918](this);
}

uint64_t WebCore::IDBServer::IDBConnectionToClient::didGetAllDatabaseNamesAndVersions()
{
  return MEMORY[0x1F4173920]();
}

uint64_t WebCore::IDBServer::IDBConnectionToClient::create()
{
  return MEMORY[0x1F4173928]();
}

uint64_t WebCore::IDBServer::MemoryIDBBackingStore::MemoryIDBBackingStore()
{
  return MEMORY[0x1F4173930]();
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::decodeDatabaseName(WebCore::IDBServer::SQLiteIDBBackingStore *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173938](this, a2);
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::databasesSizeForDirectory(WebCore::IDBServer::SQLiteIDBBackingStore *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173940](this, a2);
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::fullDatabasePathForDirectory(WebCore::IDBServer::SQLiteIDBBackingStore *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173948](this, a2);
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::databaseNameAndVersionFromFile(WebCore::IDBServer::SQLiteIDBBackingStore *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173950](this, a2);
}

uint64_t WebCore::IDBServer::SQLiteIDBBackingStore::SQLiteIDBBackingStore()
{
  return MEMORY[0x1F4173958]();
}

uint64_t WebCore::IDBServer::UniqueIDBDatabaseTransaction::abortWithoutCallback(WebCore::IDBServer::UniqueIDBDatabaseTransaction *this)
{
  return MEMORY[0x1F41739E0](this);
}

uint64_t WebCore::IOSurface::moveToPool()
{
  return MEMORY[0x1F4173AF8]();
}

uint64_t WebCore::IOSurface::createImage(WebCore::IOSurface *this, CGContext *a2)
{
  return MEMORY[0x1F4173B00](this, a2);
}

uint64_t WebCore::IOSurface::maximumSize(WebCore::IOSurface *this)
{
  return MEMORY[0x1F4173B08](this);
}

uint64_t WebCore::IOSurface::setVolatile(WebCore::IOSurface *this)
{
  return MEMORY[0x1F4173B10](this);
}

uint64_t WebCore::IOSurface::sinkIntoImage()
{
  return MEMORY[0x1F4173B18]();
}

uint64_t WebCore::IOSurface::setMaximumSize()
{
  return MEMORY[0x1F4173B20]();
}

uint64_t WebCore::IOSurface::convertToFormat()
{
  return MEMORY[0x1F4173B28]();
}

uint64_t WebCore::IOSurface::createFromImage(WebCore::IOSurface *this, WebCore::IOSurfacePool *a2, CGImage *a3)
{
  return MEMORY[0x1F4173B30](this, a2, a3);
}

uint64_t WebCore::IOSurface::createFromSendRight()
{
  return MEMORY[0x1F4173B38]();
}

uint64_t WebCore::IOSurface::bytesPerRowAlignment(WebCore::IOSurface *this)
{
  return MEMORY[0x1F4173B40](this);
}

uint64_t WebCore::IOSurface::setOwnershipIdentity()
{
  return MEMORY[0x1F4173B48]();
}

uint64_t WebCore::IOSurface::createPlatformContext(WebCore::IOSurface *this)
{
  return MEMORY[0x1F4173B50](this);
}

uint64_t WebCore::IOSurface::nameForRenderingPurpose()
{
  return MEMORY[0x1F4173B58]();
}

uint64_t WebCore::IOSurface::setBytesPerRowAlignment(WebCore::IOSurface *this)
{
  return MEMORY[0x1F4173B60](this);
}

uint64_t WebCore::IOSurface::createBitmapPlatformContext(WebCore::IOSurface *this)
{
  return MEMORY[0x1F4173B68](this);
}

uint64_t WebCore::IOSurface::allowConversionFromFormatToFormat()
{
  return MEMORY[0x1F4173B70]();
}

uint64_t WebCore::IOSurface::create()
{
  return MEMORY[0x1F4173B78]();
}

void WebCore::IOSurface::~IOSurface(WebCore::IOSurface *this)
{
}

uint64_t WebCore::IPAddress::fromString(WebCore::IPAddress *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173B88](this, a2);
}

uint64_t WebCore::LayerPool::LayerPool(WebCore::LayerPool *this)
{
  return MEMORY[0x1F4173BA0](this);
}

void WebCore::LayerPool::~LayerPool(WebCore::LayerPool *this)
{
}

uint64_t WebCore::LegacyCDM::createSession()
{
  return MEMORY[0x1F4173BB0]();
}

uint64_t WebCore::LegacyCDM::clearFactories(WebCore::LegacyCDM *this)
{
  return MEMORY[0x1F4173BB8](this);
}

uint64_t WebCore::LegacyCDM::resetFactories(WebCore::LegacyCDM *this)
{
  return MEMORY[0x1F4173BC0](this);
}

uint64_t WebCore::LegacyCDM::supportsKeySystem(WebCore::LegacyCDM *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173BC8](this, a2);
}

uint64_t WebCore::LegacyCDM::registerCDMFactory()
{
  return MEMORY[0x1F4173BD0]();
}

uint64_t WebCore::LegacyCDM::keySystemSupportsMimeType(WebCore::LegacyCDM *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F4173BD8](this, a2, a3);
}

uint64_t WebCore::LegacyCDM::create(WebCore::LegacyCDM *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173BE0](this, a2);
}

void WebCore::LegacyCDM::~LegacyCDM(WebCore::LegacyCDM *this)
{
}

uint64_t WebCore::MeterPart::create()
{
  return MEMORY[0x1F4173C10]();
}

uint64_t WebCore::PageGroup::ensureCaptionPreferences(WebCore::PageGroup *this)
{
  return MEMORY[0x1F4173C18](this);
}

uint64_t WebCore::PageGroup::pageGroup(WebCore::PageGroup *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173C20](this, a2);
}

uint64_t WebCore::SVGFilter::mergeEffects()
{
  return MEMORY[0x1F4173C28]();
}

uint64_t WebCore::SVGFilter::ensureResults()
{
  return MEMORY[0x1F4173C30]();
}

uint64_t WebCore::SVGFilter::create()
{
  return MEMORY[0x1F4173C38]();
}

uint64_t WebCore::Scrollbar::setFrameRect(WebCore::Scrollbar *this, const WebCore::IntRect *a2)
{
  return MEMORY[0x1F4173C40](this, a2);
}

uint64_t WebCore::Scrollbar::setProportion(WebCore::Scrollbar *this)
{
  return MEMORY[0x1F4173C48](this);
}

uint64_t WebCore::Scrollbar::createNativeScrollbar()
{
  return MEMORY[0x1F4173C50]();
}

uint64_t WebCore::Scrollbar::maxOverlapBetweenPages(WebCore::Scrollbar *this)
{
  return MEMORY[0x1F4173C58](this);
}

uint64_t WebCore::Scrollbar::setSteps(WebCore::Scrollbar *this)
{
  return MEMORY[0x1F4173C60](this);
}

uint64_t WebCore::TimerBase::stopSlowCase(WebCore::TimerBase *this)
{
  return MEMORY[0x1F4173C70](this);
}

uint64_t WebCore::TimerBase::start()
{
  return MEMORY[0x1F4173C78]();
}

uint64_t WebCore::TimerBase::TimerBase(WebCore::TimerBase *this)
{
  return MEMORY[0x1F4173C80](this);
}

void WebCore::TimerBase::~TimerBase(WebCore::TimerBase *this)
{
}

uint64_t WebCore::TreeScope::elementsFromPoint()
{
  return MEMORY[0x1F4173C98]();
}

uint64_t WebCore::addMarker()
{
  return MEMORY[0x1F4173CA0]();
}

uint64_t WebCore::endOfLine()
{
  return MEMORY[0x1F4173CA8]();
}

uint64_t WebCore::endOfWord()
{
  return MEMORY[0x1F4173CB0]();
}

uint64_t WebCore::plainText()
{
  return MEMORY[0x1F4173CB8]();
}

uint64_t WebCore::treeOrder<(WebCore::TreeType)2>()
{
  return MEMORY[0x1F4173CC0]();
}

uint64_t WebCore::unionRect()
{
  return MEMORY[0x1F4173CC8]();
}

uint64_t WebCore::operator<<()
{
  return MEMORY[0x1F4173CE0]();
}

{
  return MEMORY[0x1F4173CE8]();
}

{
  return MEMORY[0x1F4173CF0]();
}

{
  return MEMORY[0x1F4173CF8]();
}

uint64_t bmalloc::api::isoAllocate()
{
  return MEMORY[0x1F40EBD78]();
}

uint64_t bmalloc::api::isoDeallocate(bmalloc::api *this, void *a2)
{
  return MEMORY[0x1F40EBD80](this, a2);
}

uint64_t Gigacage::forbidDisablingPrimitiveGigacage(Gigacage *this)
{
  return MEMORY[0x1F40EBD88](this);
}

uint64_t Inspector::AgentRegistry::discardValues(Inspector::AgentRegistry *this)
{
  return MEMORY[0x1F40EBD90](this);
}

uint64_t Inspector::AgentRegistry::didCreateFrontendAndBackend()
{
  return MEMORY[0x1F40EBD98]();
}

uint64_t Inspector::AgentRegistry::willDestroyFrontendAndBackend()
{
  return MEMORY[0x1F40EBDA0]();
}

uint64_t Inspector::AgentRegistry::append()
{
  return MEMORY[0x1F40EBDA8]();
}

uint64_t Inspector::AgentRegistry::AgentRegistry(Inspector::AgentRegistry *this)
{
  return MEMORY[0x1F40EBDB0](this);
}

void Inspector::AgentRegistry::~AgentRegistry(Inspector::AgentRegistry *this)
{
}

uint64_t Inspector::FrontendRouter::connectFrontend()
{
  return MEMORY[0x1F40EBDF8]();
}

uint64_t Inspector::FrontendRouter::disconnectFrontend()
{
  return MEMORY[0x1F40EBE00]();
}

uint64_t Inspector::FrontendRouter::disconnectAllFrontends(Inspector::FrontendRouter *this)
{
  return MEMORY[0x1F40EBE08](this);
}

uint64_t Inspector::FrontendRouter::create(Inspector::FrontendRouter *this)
{
  return MEMORY[0x1F40EBE10](this);
}

uint64_t Inspector::InspectorTarget::setResumeCallback()
{
  return MEMORY[0x1F40EBE60]();
}

uint64_t Inspector::InspectorTarget::resume(Inspector::InspectorTarget *this)
{
  return MEMORY[0x1F40EBE68](this);
}

uint64_t Inspector::RemoteInspector::connectToWebInspector(Inspector::RemoteInspector *this)
{
  return MEMORY[0x1F40EBE78](this);
}

uint64_t Inspector::RemoteInspector::setParentProcessInformation()
{
  return MEMORY[0x1F40EBE88]();
}

void Inspector::RemoteInspector::Client::~Client(Inspector::RemoteInspector::Client *this)
{
}

uint64_t Inspector::RemoteInspector::setClient(Inspector::RemoteInspector *this, Inspector::RemoteInspector::Client *a2)
{
  return MEMORY[0x1F40EBEA8](this, a2);
}

uint64_t Inspector::RemoteInspector::singleton(Inspector::RemoteInspector *this)
{
  return MEMORY[0x1F40EBEB0](this);
}

void Inspector::ScriptCallStack::~ScriptCallStack(Inspector::ScriptCallStack *this)
{
}

uint64_t Inspector::BackendDispatcher::getBoolean(Inspector::BackendDispatcher *this, WTF::JSONImpl::Object *a2, const WTF::String *a3)
{
  return MEMORY[0x1F40EBEE0](this, a2, a3);
}

uint64_t Inspector::BackendDispatcher::getInteger(Inspector::BackendDispatcher *this, WTF::JSONImpl::Object *a2, const WTF::String *a3)
{
  return MEMORY[0x1F40EBEE8](this, a2, a3);
}

uint64_t Inspector::BackendDispatcher::CallbackBase::sendFailure(Inspector::BackendDispatcher::CallbackBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EBEF0](this, a2);
}

uint64_t Inspector::BackendDispatcher::CallbackBase::sendSuccess()
{
  return MEMORY[0x1F40EBEF8]();
}

uint64_t Inspector::BackendDispatcher::CallbackBase::CallbackBase()
{
  return MEMORY[0x1F40EBF00]();
}

uint64_t Inspector::BackendDispatcher::sendResponse()
{
  return MEMORY[0x1F40EBF08]();
}

uint64_t Inspector::BackendDispatcher::reportProtocolError()
{
  return MEMORY[0x1F40EBF10]();
}

uint64_t Inspector::BackendDispatcher::registerDispatcherForDomain()
{
  return MEMORY[0x1F40EBF18]();
}

uint64_t Inspector::BackendDispatcher::create()
{
  return MEMORY[0x1F40EBF20]();
}

uint64_t Inspector::BackendDispatcher::dispatch(Inspector::BackendDispatcher *this, const WTF::String *a2)
{
  return MEMORY[0x1F40EBF28](this, a2);
}

uint64_t Inspector::BackendDispatcher::getArray(Inspector::BackendDispatcher *this, WTF::JSONImpl::Object *a2, const WTF::String *a3)
{
  return MEMORY[0x1F40EBF30](this, a2, a3);
}

uint64_t Inspector::BackendDispatcher::getDouble(Inspector::BackendDispatcher *this, WTF::JSONImpl::Object *a2, const WTF::String *a3)
{
  return MEMORY[0x1F40EBF38](this, a2, a3);
}

uint64_t Inspector::BackendDispatcher::getObject(Inspector::BackendDispatcher *this, WTF::JSONImpl::Object *a2, const WTF::String *a3)
{
  return MEMORY[0x1F40EBF40](this, a2, a3);
}

uint64_t Inspector::BackendDispatcher::getString(Inspector::BackendDispatcher *this, WTF::JSONImpl::Object *a2, const WTF::String *a3)
{
  return MEMORY[0x1F40EBF48](this, a2, a3);
}

uint64_t Inspector::InspectorTargetAgent::targetCreated(Inspector::InspectorTargetAgent *this, Inspector::InspectorTarget *a2)
{
  return MEMORY[0x1F40EBFE8](this, a2);
}

uint64_t Inspector::InspectorTargetAgent::targetDestroyed(Inspector::InspectorTargetAgent *this, Inspector::InspectorTarget *a2)
{
  return MEMORY[0x1F40EBFF0](this, a2);
}

uint64_t Inspector::InspectorTargetAgent::didCommitProvisionalTarget(Inspector::InspectorTargetAgent *this, const WTF::String *a2, const WTF::String *a3)
{
  return MEMORY[0x1F40EBFF8](this, a2, a3);
}

uint64_t Inspector::InspectorTargetAgent::InspectorTargetAgent(Inspector::InspectorTargetAgent *this, Inspector::FrontendRouter *a2, Inspector::BackendDispatcher *a3)
{
  return MEMORY[0x1F40EC008](this, a2, a3);
}

uint64_t Inspector::createScriptCallStack()
{
  return MEMORY[0x1F40EC1A0]();
}

uint64_t Inspector::RemoteAutomationTarget::setIsPaired(Inspector::RemoteAutomationTarget *this)
{
  return MEMORY[0x1F40EC2D0](this);
}

void Inspector::RemoteAutomationTarget::~RemoteAutomationTarget(Inspector::RemoteAutomationTarget *this)
{
}

uint64_t Inspector::RemoteInspectionTarget::setInspectable(Inspector::RemoteInspectionTarget *this)
{
  return MEMORY[0x1F40EC2E0](this);
}

uint64_t Inspector::RemoteInspectionTarget::setPresentingApplicationPID()
{
  return MEMORY[0x1F40EC2E8]();
}

uint64_t Inspector::BrowserBackendDispatcher::create()
{
  return MEMORY[0x1F40EC310]();
}

uint64_t Inspector::RemoteControllableTarget::init(Inspector::RemoteControllableTarget *this)
{
  return MEMORY[0x1F40EC398](this);
}

uint64_t Inspector::RemoteControllableTarget::update(Inspector::RemoteControllableTarget *this)
{
  return MEMORY[0x1F40EC3A0](this);
}

uint64_t Inspector::BrowserFrontendDispatcher::extensionsEnabled()
{
  return MEMORY[0x1F40EC3D0]();
}

uint64_t Inspector::BrowserFrontendDispatcher::extensionsDisabled()
{
  return MEMORY[0x1F40EC3D8]();
}

uint64_t Inspector::SupplementalBackendDispatcher::SupplementalBackendDispatcher(Inspector::SupplementalBackendDispatcher *this, Inspector::BackendDispatcher *a2)
{
  return MEMORY[0x1F40EC590](this, a2);
}

void Inspector::SupplementalBackendDispatcher::~SupplementalBackendDispatcher(Inspector::SupplementalBackendDispatcher *this)
{
}

void Inspector::BrowserBackendDispatcherHandler::~BrowserBackendDispatcherHandler(Inspector::BrowserBackendDispatcherHandler *this)
{
}

uint64_t OpaqueJSString::string(OpaqueJSString *this)
{
  return MEMORY[0x1F40EC6A8](this);
}

uint64_t JSC::PropertySlot::customGetter()
{
  return MEMORY[0x1F40EC6D8]();
}

uint64_t JSC::PropertySlot::functionGetter()
{
  return MEMORY[0x1F40EC6E0]();
}

uint64_t JSC::Yarr::RegularExpression::match()
{
  return MEMORY[0x1F40EC758]();
}

uint64_t JSC::JSObject::hasProperty()
{
  return MEMORY[0x1F40EC7B8]();
}

uint64_t JSC::Profiler::Database::toJSON(JSC::Profiler::Database *this)
{
  return MEMORY[0x1F40EC7C8](this);
}

uint64_t PAL::TextEncoding::decode()
{
  return MEMORY[0x1F4173D00]();
}

uint64_t WTF::StringImpl::startsWith()
{
  return MEMORY[0x1F40EC810]();
}

{
  return MEMORY[0x1F40EC818]();
}

uint64_t WTF::StringImpl::hashSlowCase(WTF::StringImpl *this)
{
  return MEMORY[0x1F40EC820](this);
}

uint64_t WTF::StringImpl::endsWithIgnoringASCIICase()
{
  return MEMORY[0x1F40EC838]();
}

uint64_t WTF::StringView::startsWith()
{
  return MEMORY[0x1F40EC858]();
}

uint64_t WTF::StringView::createNSString(WTF::StringView *this)
{
  return MEMORY[0x1F40EC868](this);
}

uint64_t WTF::StringView::convertToASCIILowercase(WTF::StringView *this)
{
  return MEMORY[0x1F40EC890](this);
}

uint64_t WTF::StringView::endsWithIgnoringASCIICase()
{
  return MEMORY[0x1F40EC8A0]();
}

uint64_t WTF::StringView::getCharactersWithASCIICase()
{
  return MEMORY[0x1F40EC8A8]();
}

{
  return MEMORY[0x1F40EC8B0]();
}

uint64_t WTF::StringView::createNSStringWithoutCopying(WTF::StringView *this)
{
  return MEMORY[0x1F40EC8D0](this);
}

uint64_t WTF::StringView::find()
{
  return MEMORY[0x1F40EC8E0]();
}

uint64_t WTF::StringView::utf8()
{
  return MEMORY[0x1F40EC8E8]();
}

uint64_t WTF::StringView::endsWith()
{
  return MEMORY[0x1F40EC8F0]();
}

{
  return MEMORY[0x1F40EC8F8]();
}

uint64_t WTF::ASCIILiteral::createNSString(WTF::ASCIILiteral *this)
{
  return MEMORY[0x1F40EC900](this);
}

uint64_t WTF::MonotonicTime::toMachAbsoluteTime(WTF::MonotonicTime *this)
{
  return MEMORY[0x1F40EC910](this);
}

uint64_t WTF::MonotonicTime::approximateWallTime(WTF::MonotonicTime *this)
{
  return MEMORY[0x1F40EC918](this);
}

uint64_t WTF::StringBuilder::reifyString(WTF::StringBuilder *this)
{
  return MEMORY[0x1F40EC920](this);
}

uint64_t WTF::TimeWithDynamicClockType::nowWithSameClock(WTF::TimeWithDynamicClockType *this)
{
  return MEMORY[0x1F40EC948](this);
}

uint64_t WTF::TimeWithDynamicClockType::operator<()
{
  return MEMORY[0x1F40EC950]();
}

uint64_t WTF::URL::protocolIs()
{
  return MEMORY[0x1F40EC958]();
}

uint64_t WTF::URL::createCFURL(WTF::URL *this)
{
  return MEMORY[0x1F40EC960](this);
}

uint64_t WTF::URL::hostAndPort(WTF::URL *this)
{
  return MEMORY[0x1F40EC970](this);
}

uint64_t WTF::URL::isAboutBlank(WTF::URL *this)
{
  return MEMORY[0x1F40EC978](this);
}

uint64_t WTF::URL::fileSystemPath(WTF::URL *this)
{
  return MEMORY[0x1F40EC988](this);
}

uint64_t WTF::URL::hasSpecialScheme(WTF::URL *this)
{
  return MEMORY[0x1F40EC9A0](this);
}

uint64_t WTF::URL::lastPathComponent(WTF::URL *this)
{
  return MEMORY[0x1F40EC9A8](this);
}

uint64_t WTF::URL::fragmentIdentifier(WTF::URL *this)
{
  return MEMORY[0x1F40EC9B0](this);
}

uint64_t WTF::URL::protocolHostAndPort(WTF::URL *this)
{
  return MEMORY[0x1F40EC9B8](this);
}

uint64_t WTF::URL::protocolIsJavaScript(WTF::URL *this)
{
  return MEMORY[0x1F40EC9C0](this);
}

uint64_t WTF::URL::truncatedForUseAsBase(WTF::URL *this)
{
  return MEMORY[0x1F40EC9C8](this);
}

uint64_t WTF::URL::stringCenterEllipsizedToLength(WTF::URL *this)
{
  return MEMORY[0x1F40EC9E8](this);
}

uint64_t WTF::URL::stringWithoutFragmentIdentifier(WTF::URL *this)
{
  return MEMORY[0x1F40EC9F0](this);
}

uint64_t WTF::URL::viewWithoutQueryOrFragmentIdentifier(WTF::URL *this)
{
  return MEMORY[0x1F40EC9F8](this);
}

uint64_t WTF::URL::host(WTF::URL *this)
{
  return MEMORY[0x1F40ECA10](this);
}

uint64_t WTF::URL::path(WTF::URL *this)
{
  return MEMORY[0x1F40ECA18](this);
}

uint64_t WTF::URL::port(WTF::URL *this)
{
  return MEMORY[0x1F40ECA20](this);
}

uint64_t WTF::URL::user(WTF::URL *this)
{
  return MEMORY[0x1F40ECA28](this);
}

uint64_t WTF::URL::query(WTF::URL *this)
{
  return MEMORY[0x1F40ECA30](this);
}

uint64_t WTF::URL::password(WTF::URL *this)
{
  return MEMORY[0x1F40ECA38](this);
}

uint64_t WTF::URL::protocol(WTF::URL *this)
{
  return MEMORY[0x1F40ECA40](this);
}

uint64_t WTF::URL::pathStart(WTF::URL *this)
{
  return MEMORY[0x1F40ECA48](this);
}

uint64_t WTF::URL::operator NSURL *()
{
  return MEMORY[0x1F40ECA50]();
}

uint64_t WTF::UUID::toString(WTF::UUID *this)
{
  return MEMORY[0x1F40ECA58](this);
}

uint64_t WTF::UUID::operator NSUUID *()
{
  return MEMORY[0x1F40ECA60]();
}

uint64_t WTF::Logger::LogSiteIdentifier::toString(WTF::Logger::LogSiteIdentifier *this)
{
  return MEMORY[0x1F40ECA68](this);
}

uint64_t WTF::String::createCFString(WTF::String *this)
{
  return MEMORY[0x1F40ECA70](this);
}

uint64_t WTF::String::convertToASCIILowercase(WTF::String *this)
{
  return MEMORY[0x1F40ECA90](this);
}

uint64_t WTF::String::convertToASCIIUppercase(WTF::String *this)
{
  return MEMORY[0x1F40ECA98](this);
}

uint64_t WTF::String::trim()
{
  return MEMORY[0x1F40ECAD0]();
}

uint64_t WTF::String::utf8()
{
  return MEMORY[0x1F40ECAD8]();
}

uint64_t WTF::String::ascii(WTF::String *this)
{
  return MEMORY[0x1F40ECAE0](this);
}

uint64_t WTF::String::split()
{
  return MEMORY[0x1F40ECAE8]();
}

{
  return MEMORY[0x1F40ECAF0]();
}

uint64_t WTF::String::latin1(WTF::String *this)
{
  return MEMORY[0x1F40ECB00](this);
}

uint64_t WTF::String::toDouble(WTF::String *this, BOOL *a2)
{
  return MEMORY[0x1F40ECB18](this, a2);
}

uint64_t WTF::RunLoop::TimerBase::secondsUntilFire(WTF::RunLoop::TimerBase *this)
{
  return MEMORY[0x1F40ECB28](this);
}

uint64_t WTF::RunLoop::TimerBase::isActive(WTF::RunLoop::TimerBase *this)
{
  return MEMORY[0x1F40ECB30](this);
}

uint64_t WTF::RunLoop::isCurrent(WTF::RunLoop *this)
{
  return MEMORY[0x1F40ECB38](this);
}

uint64_t WTF::JSONImpl::ObjectBase::getBoolean(WTF::JSONImpl::ObjectBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F40ECB58](this, a2);
}

uint64_t WTF::JSONImpl::ObjectBase::getInteger(WTF::JSONImpl::ObjectBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F40ECB60](this, a2);
}

uint64_t WTF::JSONImpl::ObjectBase::getArray(WTF::JSONImpl::ObjectBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F40ECB68](this, a2);
}

uint64_t WTF::JSONImpl::ObjectBase::getDouble(WTF::JSONImpl::ObjectBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F40ECB78](this, a2);
}

uint64_t WTF::JSONImpl::ObjectBase::getObject(WTF::JSONImpl::ObjectBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F40ECB80](this, a2);
}

uint64_t WTF::JSONImpl::ObjectBase::getString(WTF::JSONImpl::ObjectBase *this, const WTF::String *a2)
{
  return MEMORY[0x1F40ECB88](this, a2);
}

uint64_t WTF::JSONImpl::Value::toJSONString(WTF::JSONImpl::Value *this)
{
  return MEMORY[0x1F40ECBA0](this);
}

uint64_t WTF::JSONImpl::Value::asString(WTF::JSONImpl::Value *this)
{
  return MEMORY[0x1F40ECBB0](this);
}

uint64_t WTF::JSONImpl::ArrayBase::get(WTF::JSONImpl::ArrayBase *this)
{
  return MEMORY[0x1F40ECBD0](this);
}

uint64_t WTF::WallTime::approximateMonotonicTime(WTF::WallTime *this)
{
  return MEMORY[0x1F40ECBD8](this);
}

uint64_t WTF::MediaTime::toJSONString(WTF::MediaTime *this)
{
  return MEMORY[0x1F40ECBF8](this);
}

uint64_t WTF::MediaTime::compare(WTF::MediaTime *this, const WTF::MediaTime *a2)
{
  return MEMORY[0x1F40ECC08](this, a2);
}

uint64_t WTF::MediaTime::toDouble(WTF::MediaTime *this)
{
  return MEMORY[0x1F40ECC10](this);
}

uint64_t WTF::MediaTime::operator-()
{
  return MEMORY[0x1F40ECC30]();
}

uint64_t WTF::MediaTime::operator+()
{
  return MEMORY[0x1F40ECC50]();
}

uint64_t WTF::WorkQueue::ref(WTF::WorkQueue *this)
{
  return MEMORY[0x1F40ECC58](this);
}

uint64_t WTF::WorkQueue::deref(WTF::WorkQueue *this)
{
  return MEMORY[0x1F40ECC60](this);
}

uint64_t rtc::SocketAddress::IsUnresolvedIP(rtc::SocketAddress *this)
{
  return MEMORY[0x1F416B9F8](this);
}

uint64_t rtc::SocketAddress::HostAsURIString(rtc::SocketAddress *this)
{
  return MEMORY[0x1F416BA00](this);
}

uint64_t rtc::SocketAddress::Hash(rtc::SocketAddress *this)
{
  return MEMORY[0x1F416BA08](this);
}

uint64_t rtc::SocketAddress::port(rtc::SocketAddress *this)
{
  return MEMORY[0x1F416BA10](this);
}

uint64_t rtc::SocketAddress::IsNil(rtc::SocketAddress *this)
{
  return MEMORY[0x1F416BA18](this);
}

uint64_t rtc::SocketAddress::ipaddr(rtc::SocketAddress *this)
{
  return MEMORY[0x1F416BA20](this);
}

uint64_t rtc::SocketAddress::operator==()
{
  return MEMORY[0x1F416BA28]();
}

uint64_t rtc::InterfaceAddress::operator==()
{
  return MEMORY[0x1F416BA50]();
}

uint64_t rtc::IPAddress::ipv4_address(rtc::IPAddress *this)
{
  return MEMORY[0x1F416BA60](this);
}

uint64_t rtc::IPAddress::ipv6_address(rtc::IPAddress *this)
{
  return MEMORY[0x1F416BA68](this);
}

uint64_t rtc::IPAddress::IsNil(rtc::IPAddress *this)
{
  return MEMORY[0x1F416BA70](this);
}

uint64_t rtc::IPAddress::ToString(rtc::IPAddress *this)
{
  return MEMORY[0x1F416BA78](this);
}

uint64_t rtc::IPAddress::operator==()
{
  return MEMORY[0x1F416BA80]();
}

uint64_t rtc::IPAddress::operator!=()
{
  return MEMORY[0x1F416BA88]();
}

uint64_t apdu::ApduCommand::getEncodedCommand(apdu::ApduCommand *this)
{
  return MEMORY[0x1F4173D10](this);
}

uint64_t cbor::CBORValue::getInteger(cbor::CBORValue *this)
{
  return MEMORY[0x1F4173D18](this);
}

uint64_t cbor::CBORValue::getByteString(cbor::CBORValue *this)
{
  return MEMORY[0x1F4173D20](this);
}

uint64_t cbor::CBORValue::clone(cbor::CBORValue *this)
{
  return MEMORY[0x1F4173D28](this);
}

uint64_t cbor::CBORValue::getMap(cbor::CBORValue *this)
{
  return MEMORY[0x1F4173D30](this);
}

uint64_t cbor::CBORValue::getBool(cbor::CBORValue *this)
{
  return MEMORY[0x1F4173D38](this);
}

uint64_t cbor::CBORValue::getArray(cbor::CBORValue *this)
{
  return MEMORY[0x1F4173D40](this);
}

uint64_t cbor::CBORValue::getString(cbor::CBORValue *this)
{
  return MEMORY[0x1F4173D48](this);
}

uint64_t fido::FidoHidMessage::numPackets(fido::FidoHidMessage *this)
{
  return MEMORY[0x1F4173D50](this);
}

uint64_t fido::FidoHidMessage::messageComplete(fido::FidoHidMessage *this)
{
  return MEMORY[0x1F4173D58](this);
}

uint64_t fido::FidoHidMessage::getMessagePayload(fido::FidoHidMessage *this)
{
  return MEMORY[0x1F4173D60](this);
}

uint64_t fido::FidoHidInitPacket::getSerializedData(fido::FidoHidInitPacket *this)
{
  return MEMORY[0x1F4173D68](this);
}

uint64_t fido::FidoHidContinuationPacket::getSerializedData(fido::FidoHidContinuationPacket *this)
{
  return MEMORY[0x1F4173D70](this);
}

uint64_t fido::pin::TokenRequest::sharedKey(fido::pin::TokenRequest *this)
{
  return MEMORY[0x1F4173D78](this);
}

uint64_t fido::pin::TokenResponse::pinAuth()
{
  return MEMORY[0x1F4173D80]();
}

uint64_t webrtc::VideoFrame::video_frame_buffer(webrtc::VideoFrame *this)
{
  return MEMORY[0x1F416BAB0](this);
}

uint64_t WebCore::Credential::nsCredential(WebCore::Credential *this)
{
  return MEMORY[0x1F4173D88](this);
}

uint64_t WebCore::Credential::ipcData(WebCore::Credential *this)
{
  return MEMORY[0x1F4173D90](this);
}

uint64_t WebCore::Credential::isEmpty(WebCore::Credential *this)
{
  return MEMORY[0x1F4173D98](this);
}

uint64_t WebCore::FileHandle::handle(WebCore::FileHandle *this)
{
  return MEMORY[0x1F4173DA0](this);
}

uint64_t WebCore::FloatPoint::constrainedBetween(WebCore::FloatPoint *this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3)
{
  return MEMORY[0x1F4173DA8](this, a2, a3);
}

uint64_t WebCore::FloatPoint::operator CGPoint()
{
  return MEMORY[0x1F4173DB0]();
}

uint64_t WebCore::LocalFrame::contentRenderer(WebCore::LocalFrame *this)
{
  return MEMORY[0x1F4173DD8](this);
}

uint64_t WebCore::LocalFrame::frameScaleFactor(WebCore::LocalFrame *this)
{
  return MEMORY[0x1F4173DE8](this);
}

uint64_t WebCore::LocalFrame::visiblePositionForPoint(WebCore::LocalFrame *this, const WebCore::IntPoint *a2)
{
  return MEMORY[0x1F4173E00](this, a2);
}

uint64_t WebCore::LocalFrame::displayStringModifiedByEncoding(WebCore::LocalFrame *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173E20](this, a2);
}

uint64_t WebCore::LocalFrame::window(WebCore::LocalFrame *this)
{
  return MEMORY[0x1F4173E28](this);
}

uint64_t WebCore::PluginData::supportsMimeType()
{
  return MEMORY[0x1F4173E30]();
}

uint64_t WebCore::PluginData::webVisibleMimeTypes(WebCore::PluginData *this)
{
  return MEMORY[0x1F4173E38](this);
}

uint64_t WebCore::RenderView::unscaledDocumentRect(WebCore::RenderView *this)
{
  return MEMORY[0x1F4173E68](this);
}

uint64_t WebCore::ScrollView::contentsSize(WebCore::ScrollView *this)
{
  return MEMORY[0x1F4173E78](this);
}

uint64_t WebCore::ScrollView::scrollbarModes()
{
  return MEMORY[0x1F4173E88]();
}

uint64_t WebCore::ScrollView::fixedLayoutSize(WebCore::ScrollView *this)
{
  return MEMORY[0x1F4173E98](this);
}

uint64_t WebCore::ScrollView::contentsToScreen(WebCore::ScrollView *this, const WebCore::IntRect *a2)
{
  return MEMORY[0x1F4173EA0](this, a2);
}

uint64_t WebCore::ScrollView::contentsToWindow(WebCore::ScrollView *this, const WebCore::IntRect *a2)
{
  return MEMORY[0x1F4173EA8](this, a2);
}

uint64_t WebCore::ScrollView::contentsToWindow(WebCore::ScrollView *this, const WebCore::IntPoint *a2)
{
  return MEMORY[0x1F4173EB0](this, a2);
}

uint64_t WebCore::ScrollView::windowToContents(WebCore::ScrollView *this, const WebCore::IntRect *a2)
{
  return MEMORY[0x1F4173EB8](this, a2);
}

uint64_t WebCore::ScrollView::windowToContents(WebCore::ScrollView *this, const WebCore::IntPoint *a2)
{
  return MEMORY[0x1F4173EC0](this, a2);
}

uint64_t WebCore::ScrollView::contentsToRootView(WebCore::ScrollView *this, const WebCore::FloatPoint *a2)
{
  return MEMORY[0x1F4173EC8](this, a2);
}

uint64_t WebCore::ScrollView::contentsToRootView(WebCore::ScrollView *this, const WebCore::IntRect *a2)
{
  return MEMORY[0x1F4173ED0](this, a2);
}

uint64_t WebCore::ScrollView::contentsToRootView(WebCore::ScrollView *this, const WebCore::IntPoint *a2)
{
  return MEMORY[0x1F4173ED8](this, a2);
}

uint64_t WebCore::ScrollView::contentsToRootView(WebCore::ScrollView *this, const FloatQuad *a2)
{
  return MEMORY[0x1F4173EE0](this, a2);
}

uint64_t WebCore::ScrollView::contentsToRootView(WebCore::ScrollView *this, const WebCore::FloatRect *a2)
{
  return MEMORY[0x1F4173EE8](this, a2);
}

uint64_t WebCore::ScrollView::exposedContentRect(WebCore::ScrollView *this)
{
  return MEMORY[0x1F4173EF0](this);
}

uint64_t WebCore::ScrollView::rootViewToContents(WebCore::ScrollView *this, const WebCore::FloatPoint *a2)
{
  return MEMORY[0x1F4173EF8](this, a2);
}

uint64_t WebCore::ScrollView::rootViewToContents(WebCore::ScrollView *this, const WebCore::IntPoint *a2)
{
  return MEMORY[0x1F4173F00](this, a2);
}

uint64_t WebCore::ScrollView::rootViewToContents(WebCore::ScrollView *this, const WebCore::FloatRect *a2)
{
  return MEMORY[0x1F4173F08](this, a2);
}

uint64_t WebCore::ScrollView::unobscuredContentRect()
{
  return MEMORY[0x1F4173F10]();
}

uint64_t WebCore::ScrollView::unobscuredContentSize(WebCore::ScrollView *this)
{
  return MEMORY[0x1F4173F18](this);
}

uint64_t WebCore::ScrollView::contentsScrollPosition(WebCore::ScrollView *this)
{
  return MEMORY[0x1F4173F20](this);
}

uint64_t WebCore::SeekTarget::toString(WebCore::SeekTarget *this)
{
  return MEMORY[0x1F4173F28](this);
}

uint64_t WebCore::StorageMap::length(WebCore::StorageMap *this)
{
  return MEMORY[0x1F4173F30](this);
}

uint64_t WebCore::StorageMap::getItem(WebCore::StorageMap *this, const WTF::String *a2)
{
  return MEMORY[0x1F4173F38](this, a2);
}

uint64_t WebCore::TimeRanges::length(WebCore::TimeRanges *this)
{
  return MEMORY[0x1F4173F58](this);
}

uint64_t WebCore::CachedImage::imageSizeForRenderer()
{
  return MEMORY[0x1F4173F68]();
}

uint64_t WebCore::CachedImage::image(WebCore::CachedImage *this)
{
  return MEMORY[0x1F4173F70](this);
}

uint64_t WebCore::ContentType::toJSONString(WebCore::ContentType *this)
{
  return MEMORY[0x1F4173F78](this);
}

uint64_t WebCore::ControlPart::controlFactory(WebCore::ControlPart *this)
{
  return MEMORY[0x1F4173F80](this);
}

uint64_t WebCore::DataSegment::data(WebCore::DataSegment *this)
{
  return MEMORY[0x1F4173F88](this);
}

uint64_t WebCore::DataSegment::size(WebCore::DataSegment *this)
{
  return MEMORY[0x1F4173F90](this);
}

uint64_t WebCore::DisplayList::DrawGlyphs::apply(WebCore::DisplayList::DrawGlyphs *this, WebCore::GraphicsContext *a2, const WebCore::Font *a3)
{
  return MEMORY[0x1F4173F98](this, a2, a3);
}

uint64_t WebCore::DisplayList::SetLineCap::apply(WebCore::DisplayList::SetLineCap *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4173FA0](this, a2);
}

uint64_t WebCore::DisplayList::StrokeLine::apply(WebCore::DisplayList::StrokeLine *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4173FA8](this, a2);
}

uint64_t WebCore::DisplayList::StrokePath::apply(WebCore::DisplayList::StrokePath *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4173FB0](this, a2);
}

uint64_t WebCore::DisplayList::StrokeRect::apply(WebCore::DisplayList::StrokeRect *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4173FB8](this, a2);
}

uint64_t WebCore::DisplayList::DrawEllipse::apply(WebCore::DisplayList::DrawEllipse *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4173FC0](this, a2);
}

uint64_t WebCore::DisplayList::DrawPattern::apply(WebCore::DisplayList::DrawPattern *this, WebCore::GraphicsContext *a2, WebCore::SourceImage *a3)
{
  return MEMORY[0x1F4173FC8](this, a2, a3);
}

uint64_t WebCore::DisplayList::FillEllipse::apply(WebCore::DisplayList::FillEllipse *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4173FD0](this, a2);
}

uint64_t WebCore::DisplayList::SetLineJoin::apply(WebCore::DisplayList::SetLineJoin *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4173FE0](this, a2);
}

uint64_t WebCore::DisplayList::ClipOutToPath::apply(WebCore::DisplayList::ClipOutToPath *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4173FE8](this, a2);
}

uint64_t WebCore::DisplayList::FillClosedArc::apply(WebCore::DisplayList::FillClosedArc *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4173FF0](this, a2);
}

uint64_t WebCore::DisplayList::FillQuadCurve::apply(WebCore::DisplayList::FillQuadCurve *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4173FF8](this, a2);
}

uint64_t WebCore::DisplayList::SetMiterLimit::apply(WebCore::DisplayList::SetMiterLimit *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174000](this, a2);
}

uint64_t WebCore::DisplayList::StrokeEllipse::apply(WebCore::DisplayList::StrokeEllipse *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174008](this, a2);
}

uint64_t WebCore::DisplayList::ConcatenateCTM::apply(WebCore::DisplayList::ConcatenateCTM *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174010](this, a2);
}

uint64_t WebCore::DisplayList::ClearDropShadow::apply(WebCore::DisplayList::ClearDropShadow *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174018](this, a2);
}

uint64_t WebCore::DisplayList::ClipRoundedRect::apply(WebCore::DisplayList::ClipRoundedRect *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174020](this, a2);
}

uint64_t WebCore::DisplayList::DrawControlPart::apply(WebCore::DisplayList::DrawControlPart *this, WebCore::GraphicsContext *a2, WebCore::ControlFactory *a3)
{
  return MEMORY[0x1F4174028](this, a2, a3);
}

uint64_t WebCore::DisplayList::DrawImageBuffer::apply(WebCore::DisplayList::DrawImageBuffer *this, WebCore::GraphicsContext *a2, WebCore::ImageBuffer *a3)
{
  return MEMORY[0x1F4174030](this, a2, a3);
}

uint64_t WebCore::DisplayList::DrawNativeImage::apply()
{
  return MEMORY[0x1F4174038]();
}

uint64_t WebCore::DisplayList::DrawSystemImage::apply(WebCore::DisplayList::DrawSystemImage *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174040](this, a2);
}

uint64_t WebCore::DisplayList::FillBezierCurve::apply(WebCore::DisplayList::FillBezierCurve *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174048](this, a2);
}

uint64_t WebCore::DisplayList::FillPathSegment::apply(WebCore::DisplayList::FillPathSegment *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174050](this, a2);
}

uint64_t WebCore::DisplayList::FillRoundedRect::apply(WebCore::DisplayList::FillRoundedRect *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174058](this, a2);
}

uint64_t WebCore::DisplayList::SetInlineStroke::apply(WebCore::DisplayList::SetInlineStroke *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174060](this, a2);
}

uint64_t WebCore::DisplayList::StrokeClosedArc::apply(WebCore::DisplayList::StrokeClosedArc *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174068](this, a2);
}

uint64_t WebCore::DisplayList::StrokeQuadCurve::apply(WebCore::DisplayList::StrokeQuadCurve *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174070](this, a2);
}

uint64_t WebCore::DisplayList::ApplyFillPattern::apply(WebCore::DisplayList::ApplyFillPattern *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174078](this, a2);
}

uint64_t WebCore::DisplayList::ClipToImageBuffer::apply(WebCore::DisplayList::ClipToImageBuffer *this, WebCore::GraphicsContext *a2, WebCore::ImageBuffer *a3)
{
  return MEMORY[0x1F4174088](this, a2, a3);
}

uint64_t WebCore::DisplayList::DrawFocusRingPath::apply(WebCore::DisplayList::DrawFocusRingPath *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174090](this, a2);
}

uint64_t WebCore::DisplayList::FillRectWithColor::apply(WebCore::DisplayList::FillRectWithColor *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174098](this, a2);
}

uint64_t WebCore::DisplayList::StrokeBezierCurve::apply(WebCore::DisplayList::StrokeBezierCurve *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F41740A0](this, a2);
}

uint64_t WebCore::DisplayList::StrokePathSegment::apply(WebCore::DisplayList::StrokePathSegment *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F41740A8](this, a2);
}

uint64_t WebCore::DisplayList::ApplyStrokePattern::apply(WebCore::DisplayList::ApplyStrokePattern *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F41740B0](this, a2);
}

uint64_t WebCore::DisplayList::ClipOutRoundedRect::apply(WebCore::DisplayList::ClipOutRoundedRect *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F41740B8](this, a2);
}

uint64_t WebCore::DisplayList::DrawFocusRingRects::apply(WebCore::DisplayList::DrawFocusRingRects *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F41740C0](this, a2);
}

uint64_t WebCore::DisplayList::FillCompositedRect::apply(WebCore::DisplayList::FillCompositedRect *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F41740C8](this, a2);
}

uint64_t WebCore::DisplayList::SetInlineFillColor::apply(WebCore::DisplayList::SetInlineFillColor *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F41740D0](this, a2);
}

uint64_t WebCore::DisplayList::DrawDecomposedGlyphs::apply()
{
  return MEMORY[0x1F41740D8]();
}

uint64_t WebCore::DisplayList::DrawDisplayListItems::apply()
{
  return MEMORY[0x1F41740E0]();
}

uint64_t WebCore::DisplayList::EndTransparencyLayer::apply(WebCore::DisplayList::EndTransparencyLayer *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F41740E8](this, a2);
}

uint64_t WebCore::DisplayList::ApplyDeviceScaleFactor::apply(WebCore::DisplayList::ApplyDeviceScaleFactor *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F41740F8](this, a2);
}

uint64_t WebCore::DisplayList::BeginTransparencyLayer::apply(WebCore::DisplayList::BeginTransparencyLayer *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174100](this, a2);
}

uint64_t WebCore::DisplayList::DrawFilteredImageBuffer::apply()
{
  return MEMORY[0x1F4174108]();
}

uint64_t WebCore::DisplayList::FillRectWithRoundedHole::apply(WebCore::DisplayList::FillRectWithRoundedHole *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174110](this, a2);
}

uint64_t WebCore::DisplayList::DrawDotsForDocumentMarker::apply(WebCore::DisplayList::DrawDotsForDocumentMarker *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174118](this, a2);
}

uint64_t WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode::apply(WebCore::DisplayList::BeginTransparencyLayerWithCompositeMode *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174128](this, a2);
}

uint64_t WebCore::DisplayList::Clip::apply(WebCore::DisplayList::Clip *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174130](this, a2);
}

uint64_t WebCore::DisplayList::Save::apply(WebCore::DisplayList::Save *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174138](this, a2);
}

uint64_t WebCore::DisplayList::Scale::apply(WebCore::DisplayList::Scale *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174140](this, a2);
}

uint64_t WebCore::DisplayList::Rotate::apply(WebCore::DisplayList::Rotate *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174148](this, a2);
}

uint64_t WebCore::DisplayList::SetCTM::apply(WebCore::DisplayList::SetCTM *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174150](this, a2);
}

uint64_t WebCore::DisplayList::ClipOut::apply(WebCore::DisplayList::ClipOut *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174158](this, a2);
}

uint64_t WebCore::DisplayList::FillArc::apply(WebCore::DisplayList::FillArc *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174160](this, a2);
}

uint64_t WebCore::DisplayList::Restore::apply(WebCore::DisplayList::Restore *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174168](this, a2);
}

uint64_t WebCore::DisplayList::ClipPath::apply(WebCore::DisplayList::ClipPath *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174170](this, a2);
}

uint64_t WebCore::DisplayList::DrawLine::apply(WebCore::DisplayList::DrawLine *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174178](this, a2);
}

uint64_t WebCore::DisplayList::DrawPath::apply(WebCore::DisplayList::DrawPath *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174180](this, a2);
}

uint64_t WebCore::DisplayList::DrawRect::apply(WebCore::DisplayList::DrawRect *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174188](this, a2);
}

uint64_t WebCore::DisplayList::FillLine::apply(WebCore::DisplayList::FillLine *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174190](this, a2);
}

uint64_t WebCore::DisplayList::FillPath::apply(WebCore::DisplayList::FillPath *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4174198](this, a2);
}

uint64_t WebCore::DisplayList::FillRect::apply(WebCore::DisplayList::FillRect *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F41741A0](this, a2);
}

uint64_t WebCore::DisplayList::SetState::apply(WebCore::DisplayList::SetState *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F41741A8](this, a2);
}

uint64_t WebCore::DisplayList::ClearRect::apply(WebCore::DisplayList::ClearRect *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F41741B0](this, a2);
}

uint64_t WebCore::DisplayList::ResetClip::apply(WebCore::DisplayList::ResetClip *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F41741B8](this, a2);
}

uint64_t WebCore::DisplayList::StrokeArc::apply(WebCore::DisplayList::StrokeArc *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F41741C0](this, a2);
}

uint64_t WebCore::DisplayList::Translate::apply(WebCore::DisplayList::Translate *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F41741C8](this, a2);
}

uint64_t WebCore::EventRegion::touchActionsForPoint(WebCore::EventRegion *this, const WebCore::IntPoint *a2)
{
  return MEMORY[0x1F41741D0](this, a2);
}

uint64_t WebCore::EventRegion::containsEditableElementsInRect(WebCore::EventRegion *this, const WebCore::IntRect *a2)
{
  return MEMORY[0x1F41741D8](this, a2);
}

uint64_t WebCore::EventRegion::eventListenerRegionTypesForPoint(WebCore::EventRegion *this, const WebCore::IntPoint *a2)
{
  return MEMORY[0x1F41741E0](this, a2);
}

uint64_t WebCore::FontChanges::createEditingStyle(WebCore::FontChanges *this)
{
  return MEMORY[0x1F41741F0](this);
}

uint64_t WebCore::FrameLoader::activeDocumentLoader(WebCore::FrameLoader *this)
{
  return MEMORY[0x1F4174208](this);
}

uint64_t WebCore::FrameLoader::effectiveSandboxFlags(WebCore::FrameLoader *this)
{
  return MEMORY[0x1F4174210](this);
}

uint64_t WebCore::FrameLoader::loaderForWebsitePolicies()
{
  return MEMORY[0x1F4174218]();
}

uint64_t WebCore::FrameLoader::frame(WebCore::FrameLoader *this)
{
  return MEMORY[0x1F4174220](this);
}

uint64_t WebCore::FrameLoader::frameID(WebCore::FrameLoader *this)
{
  return MEMORY[0x1F4174228](this);
}

uint64_t WebCore::FrameLoader::loadType(WebCore::FrameLoader *this)
{
  return MEMORY[0x1F4174230](this);
}

uint64_t WebCore::Geolocation::frame(WebCore::Geolocation *this)
{
  return MEMORY[0x1F4174238](this);
}

uint64_t WebCore::HTMLElement::spellcheck(WebCore::HTMLElement *this)
{
  return MEMORY[0x1F4174240](this);
}

uint64_t WebCore::HTMLElement::canonicalInputMode(WebCore::HTMLElement *this)
{
  return MEMORY[0x1F4174258](this);
}

uint64_t WebCore::HTMLElement::canonicalEnterKeyHint(WebCore::HTMLElement *this)
{
  return MEMORY[0x1F4174260](this);
}

uint64_t WebCore::HistoryItem::isTargetItem(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F4174280](this);
}

uint64_t WebCore::HistoryItem::documentState(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F4174288](this);
}

uint64_t WebCore::HistoryItem::scrollPosition(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F4174298](this);
}

uint64_t WebCore::HistoryItem::formContentType(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F41742A0](this);
}

uint64_t WebCore::HistoryItem::pageScaleFactor(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F41742A8](this);
}

uint64_t WebCore::HistoryItem::originalURLString(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F41742B0](this);
}

uint64_t WebCore::HistoryItem::shouldRestoreScrollPosition(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F41742C0](this);
}

uint64_t WebCore::HistoryItem::shouldOpenExternalURLsPolicy(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F41742C8](this);
}

uint64_t WebCore::HistoryItem::url(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F41742D0](this);
}

uint64_t WebCore::HistoryItem::title(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F41742E0](this);
}

uint64_t WebCore::HistoryItem::target(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F41742E8](this);
}

uint64_t WebCore::HistoryItem::children(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F41742F0](this);
}

uint64_t WebCore::HistoryItem::referrer(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F41742F8](this);
}

uint64_t WebCore::HistoryItem::urlString(WebCore::HistoryItem *this)
{
  return MEMORY[0x1F4174300](this);
}

uint64_t WebCore::ImageBuffer::backendSize(WebCore::ImageBuffer *this)
{
  return MEMORY[0x1F4174310](this);
}

uint64_t WebCore::ImageBuffer::volatilityState(WebCore::ImageBuffer *this)
{
  return MEMORY[0x1F4174328](this);
}

uint64_t WebCore::ImageBuffer::backendGeneration(WebCore::ImageBuffer *this)
{
  return MEMORY[0x1F4174330](this);
}

uint64_t WebCore::ImageBuffer::clone(WebCore::ImageBuffer *this)
{
  return MEMORY[0x1F4174340](this);
}

uint64_t WebCore::ImageBuffer::toData()
{
  return MEMORY[0x1F4174348]();
}

uint64_t WebCore::ImageBuffer::isInUse(WebCore::ImageBuffer *this)
{
  return MEMORY[0x1F4174350](this);
}

uint64_t WebCore::LoginStatus::hasExpired(WebCore::LoginStatus *this)
{
  return MEMORY[0x1F4174358](this);
}

uint64_t WebCore::MediaPlayer::identifier(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174360](this);
}

uint64_t WebCore::MediaPlayer::readyState(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174368](this);
}

uint64_t WebCore::MediaPlayer::currentTime(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174370](this);
}

uint64_t WebCore::MediaPlayer::getStartDate(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174378](this);
}

uint64_t WebCore::MediaPlayer::effectiveRate(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174380](this);
}

uint64_t WebCore::MediaPlayer::getRawCookies()
{
  return MEMORY[0x1F4174388]();
}

uint64_t WebCore::MediaPlayer::isCrossOrigin(WebCore::MediaPlayer *this, const WebCore::SecurityOrigin *a2)
{
  return MEMORY[0x1F4174390](this, a2);
}

uint64_t WebCore::MediaPlayer::movieLoadType(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174398](this);
}

uint64_t WebCore::MediaPlayer::platformLayer(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41743A0](this);
}

uint64_t WebCore::MediaPlayer::waitingForKey(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41743A8](this);
}

uint64_t WebCore::MediaPlayer::videoLayerSize(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41743B0](this);
}

uint64_t WebCore::MediaPlayer::maxTimeSeekable(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41743B8](this);
}

uint64_t WebCore::MediaPlayer::minTimeSeekable(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41743C0](this);
}

uint64_t WebCore::MediaPlayer::canSaveMediaData(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41743C8](this);
}

uint64_t WebCore::MediaPlayer::supportsScanning(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41743D0](this);
}

uint64_t WebCore::MediaPlayer::engineDescription(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41743D8](this);
}

uint64_t WebCore::MediaPlayer::hasClosedCaptions(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41743E0](this);
}

uint64_t WebCore::MediaPlayer::platformErrorCode(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41743E8](this);
}

uint64_t WebCore::MediaPlayer::timeIsProgressing(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41743F0](this);
}

uint64_t WebCore::MediaPlayer::canShowWhileLocked(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41743F8](this);
}

uint64_t WebCore::MediaPlayer::maxFastForwardRate(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174408](this);
}

uint64_t WebCore::MediaPlayer::minFastReverseRate(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174410](this);
}

uint64_t WebCore::MediaPlayer::supportsFullscreen(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174418](this);
}

uint64_t WebCore::MediaPlayer::allowedMediaCodecTypes(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174420](this);
}

uint64_t WebCore::MediaPlayer::didPassCORSAccessCheck(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174428](this);
}

uint64_t WebCore::MediaPlayer::documentSecurityOrigin(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174430](this);
}

uint64_t WebCore::MediaPlayer::hasAvailableVideoFrame(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174438](this);
}

uint64_t WebCore::MediaPlayer::supportsPlayAtHostTime(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174440](this);
}

uint64_t WebCore::MediaPlayer::supportsPauseAtHostTime(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174448](this);
}

uint64_t WebCore::MediaPlayer::isVideoFullscreenStandby(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174450](this);
}

uint64_t WebCore::MediaPlayer::supportsPictureInPicture(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174458](this);
}

uint64_t WebCore::MediaPlayer::allowedMediaAudioCodecIDs(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174460](this);
}

uint64_t WebCore::MediaPlayer::allowedMediaVideoCodecIDs(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174468](this);
}

uint64_t WebCore::MediaPlayer::allowedMediaContainerTypes(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174470](this);
}

uint64_t WebCore::MediaPlayer::wirelessPlaybackTargetName(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174478](this);
}

uint64_t WebCore::MediaPlayer::wirelessPlaybackTargetType(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174480](this);
}

uint64_t WebCore::MediaPlayer::languageOfPrimaryAudioTrack(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174488](this);
}

uint64_t WebCore::MediaPlayer::sourceApplicationIdentifier(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174490](this);
}

uint64_t WebCore::MediaPlayer::supportsAcceleratedRendering(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174498](this);
}

uint64_t WebCore::MediaPlayer::preferredAudioCharacteristics(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41744A0](this);
}

uint64_t WebCore::MediaPlayer::wirelessVideoPlaybackDisabled(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41744A8](this);
}

uint64_t WebCore::MediaPlayer::allowedMediaCaptionFormatTypes(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41744B0](this);
}

uint64_t WebCore::MediaPlayer::canPlayToWirelessPlaybackTarget(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41744B8](this);
}

uint64_t WebCore::MediaPlayer::maximumDurationToCacheMediaTime(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41744C0](this);
}

uint64_t WebCore::MediaPlayer::mediaPlayerNetworkInterfaceName(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41744C8](this);
}

uint64_t WebCore::MediaPlayer::mediaContentTypesRequiringHardwareSupport(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41744D0](this);
}

uint64_t WebCore::MediaPlayer::muted(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41744D8](this);
}

uint64_t WebCore::MediaPlayer::paused(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41744E0](this);
}

uint64_t WebCore::MediaPlayer::volume(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41744E8](this);
}

uint64_t WebCore::MediaPlayer::buffered(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41744F0](this);
}

uint64_t WebCore::MediaPlayer::duration(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F41744F8](this);
}

uint64_t WebCore::MediaPlayer::errorLog(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174500](this);
}

uint64_t WebCore::MediaPlayer::hasAudio(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174508](this);
}

uint64_t WebCore::MediaPlayer::hasVideo(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174510](this);
}

uint64_t WebCore::MediaPlayer::referrer(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174518](this);
}

uint64_t WebCore::MediaPlayer::accessLog(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174520](this);
}

uint64_t WebCore::MediaPlayer::startTime(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174528](this);
}

uint64_t WebCore::MediaPlayer::userAgent(WebCore::MediaPlayer *this)
{
  return MEMORY[0x1F4174530](this);
}

uint64_t WebCore::MemoryCache::originsWithCache()
{
  return MEMORY[0x1F4174538]();
}

uint64_t WebCore::NativeImage::colorSpace(WebCore::NativeImage *this)
{
  return MEMORY[0x1F4174540](this);
}

uint64_t WebCore::NativeImage::platformImage(WebCore::NativeImage *this)
{
  return MEMORY[0x1F4174548](this);
}

uint64_t WebCore::NativeImage::size(WebCore::NativeImage *this)
{
  return MEMORY[0x1F4174550](this);
}

uint64_t WebCore::PageOverlay::bounds(WebCore::PageOverlay *this)
{
  return MEMORY[0x1F4174558](this);
}

uint64_t WebCore::RenderLayer::scrollableArea(WebCore::RenderLayer *this)
{
  return MEMORY[0x1F4174560](this);
}

uint64_t WebCore::RenderLayer::enclosingScrollableLayer()
{
  return MEMORY[0x1F4174568]();
}

uint64_t WebCore::RenderLayer::isTransparentRespectingParentFrames(WebCore::RenderLayer *this)
{
  return MEMORY[0x1F4174570](this);
}

uint64_t WebCore::RenderStyle::usedUserSelect(WebCore::RenderStyle *this)
{
  return MEMORY[0x1F4174588](this);
}

uint64_t WebCore::RenderStyle::fontDescription(WebCore::RenderStyle *this)
{
  return MEMORY[0x1F4174590](this);
}

uint64_t WebCore::RenderStyle::scrollbarGutter(WebCore::RenderStyle *this)
{
  return MEMORY[0x1F4174598](this);
}

uint64_t WebCore::RenderStyle::computedLineHeight(WebCore::RenderStyle *this)
{
  return MEMORY[0x1F41745A0](this);
}

uint64_t WebCore::RenderStyle::metricsOfPrimaryFont(WebCore::RenderStyle *this)
{
  return MEMORY[0x1F41745A8](this);
}

uint64_t WebCore::RenderStyle::colorResolvingCurrentColor(WebCore::RenderStyle *this, const WebCore::StyleColor *a2)
{
  return MEMORY[0x1F41745B0](this, a2);
}

uint64_t WebCore::RenderTheme::activeSelectionBackgroundColor()
{
  return MEMORY[0x1F41745C0]();
}

uint64_t WebCore::RenderTheme::inactiveSelectionBackgroundColor()
{
  return MEMORY[0x1F41745C8]();
}

uint64_t WebCore::RenderVideo::videoElement(WebCore::RenderVideo *this)
{
  return MEMORY[0x1F41745D0](this);
}

uint64_t WebCore::RenderVideo::videoBox(WebCore::RenderVideo *this)
{
  return MEMORY[0x1F41745D8](this);
}

uint64_t WebCore::SourceBrush::gradientIdentifier(WebCore::SourceBrush *this)
{
  return MEMORY[0x1F41745E0](this);
}

uint64_t WebCore::SourceBrush::gradientSpaceTransform(WebCore::SourceBrush *this)
{
  return MEMORY[0x1F41745E8](this);
}

uint64_t WebCore::SourceBrush::pattern(WebCore::SourceBrush *this)
{
  return MEMORY[0x1F41745F0](this);
}

uint64_t WebCore::SourceImage::imageIdentifier(WebCore::SourceImage *this)
{
  return MEMORY[0x1F41745F8](this);
}

uint64_t WebCore::SourceImage::imageBufferIfExists(WebCore::SourceImage *this)
{
  return MEMORY[0x1F4174600](this);
}

uint64_t WebCore::SourceImage::nativeImageIfExists(WebCore::SourceImage *this)
{
  return MEMORY[0x1F4174608](this);
}

uint64_t WebCore::BlobDataItem::length(WebCore::BlobDataItem *this)
{
  return MEMORY[0x1F4174650](this);
}

uint64_t WebCore::EventHandler::hitTestResultAtPoint()
{
  return MEMORY[0x1F4174678]();
}

uint64_t WebCore::EventHandler::capsLockStateMayHaveChanged(WebCore::EventHandler *this)
{
  return MEMORY[0x1F4174680](this);
}

uint64_t WebCore::RenderObject::enclosingLayer(WebCore::RenderObject *this)
{
  return MEMORY[0x1F41746A8](this);
}

uint64_t WebCore::RenderObject::repaintRectangle(WebCore::RenderObject *this, const WebCore::LayoutRect *a2)
{
  return MEMORY[0x1F41746C0](this, a2);
}

uint64_t WebCore::RenderObject::styleColorOptions(WebCore::RenderObject *this)
{
  return MEMORY[0x1F41746C8](this);
}

uint64_t WebCore::RenderObject::localToContainerQuad()
{
  return MEMORY[0x1F41746D0]();
}

uint64_t WebCore::RenderObject::localToContainerPoint()
{
  return MEMORY[0x1F41746D8]();
}

uint64_t WebCore::RenderObject::absoluteBoundingBoxRect(WebCore::RenderObject *this, uint64_t a2, BOOL *a3)
{
  return MEMORY[0x1F41746E0](this, a2, a3);
}

uint64_t WebCore::RenderObject::theme(WebCore::RenderObject *this)
{
  return MEMORY[0x1F41746F8](this);
}

uint64_t WebCore::ScriptBuffer::containsSingleFileMappedSegment(WebCore::ScriptBuffer *this)
{
  return MEMORY[0x1F4174700](this);
}

uint64_t WebCore::ScriptBuffer::ipcData(WebCore::ScriptBuffer *this)
{
  return MEMORY[0x1F4174708](this);
}

uint64_t WebCore::SharedBuffer::createCFData(WebCore::SharedBuffer *this)
{
  return MEMORY[0x1F4174710](this);
}

uint64_t WebCore::SharedBuffer::createNSData(WebCore::SharedBuffer *this)
{
  return MEMORY[0x1F4174718](this);
}

uint64_t WebCore::SharedBuffer::data(WebCore::SharedBuffer *this)
{
  return MEMORY[0x1F4174720](this);
}

uint64_t WebCore::SharedMemory::createSharedBuffer(WebCore::SharedMemory *this)
{
  return MEMORY[0x1F4174728](this);
}

uint64_t WebCore::TextIterator::node(WebCore::TextIterator *this)
{
  return MEMORY[0x1F4174730](this);
}

uint64_t WebCore::TextIterator::range(WebCore::TextIterator *this)
{
  return MEMORY[0x1F4174738](this);
}

uint64_t WebCore::BoundaryPoint::protectedDocument(WebCore::BoundaryPoint *this)
{
  return MEMORY[0x1F4174740](this);
}

uint64_t WebCore::ContainerNode::countChildNodes(WebCore::ContainerNode *this)
{
  return MEMORY[0x1F4174770](this);
}

uint64_t WebCore::HTTPHeaderMap::getUncommonHeader()
{
  return MEMORY[0x1F4174798]();
}

uint64_t WebCore::HTTPHeaderMap::get()
{
  return MEMORY[0x1F41747A0]();
}

uint64_t WebCore::HTTPHeaderMap::contains()
{
  return MEMORY[0x1F41747A8]();
}

uint64_t WebCore::HitTestResult::isSelected(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F41747B0](this);
}

uint64_t WebCore::HitTestResult::targetFrame(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F41747B8](this);
}

uint64_t WebCore::HitTestResult::textContent(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F41747C0](this);
}

uint64_t WebCore::HitTestResult::mediaIsVideo(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F41747C8](this);
}

uint64_t WebCore::HitTestResult::targetElement(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F41747D8](this);
}

uint64_t WebCore::HitTestResult::absolutePDFURL(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F41747E0](this);
}

uint64_t WebCore::HitTestResult::hasEntireImage(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F41747E8](this);
}

uint64_t WebCore::HitTestResult::innerNodeFrame(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F41747F0](this);
}

uint64_t WebCore::HitTestResult::absoluteLinkURL(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F41747F8](this);
}

uint64_t WebCore::HitTestResult::hasMediaElement(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F4174800](this);
}

uint64_t WebCore::HitTestResult::absoluteImageURL(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F4174810](this);
}

uint64_t WebCore::HitTestResult::absoluteMediaURL(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F4174818](this);
}

uint64_t WebCore::HitTestResult::isContentEditable(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F4174828](this);
}

uint64_t WebCore::HitTestResult::titleDisplayString(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F4174830](this);
}

uint64_t WebCore::HitTestResult::isDownloadableMedia(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F4174838](this);
}

uint64_t WebCore::HitTestResult::listBasedTestResult(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F4174840](this);
}

uint64_t WebCore::HitTestResult::mediaIsInFullscreen(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F4174848](this);
}

uint64_t WebCore::HitTestResult::linkSuggestedFilename(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F4174850](this);
}

uint64_t WebCore::HitTestResult::hasLocalDataForLinkURL(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F4174858](this);
}

uint64_t WebCore::HitTestResult::isOverTextInsideFormControlElement(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F4174860](this);
}

uint64_t WebCore::HitTestResult::frame(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F4174868](this);
}

uint64_t WebCore::HitTestResult::image(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F4174870](this);
}

uint64_t WebCore::HitTestResult::imageRect(WebCore::HitTestResult *this)
{
  return MEMORY[0x1F4174880](this);
}

uint64_t WebCore::ImageDocument::imageElement(WebCore::ImageDocument *this)
{
  return MEMORY[0x1F4174898](this);
}

uint64_t WebCore::KeyboardEvent::charCode(WebCore::KeyboardEvent *this)
{
  return MEMORY[0x1F41748A8](this);
}

uint64_t WebCore::MIMETypeCache::isEmpty(WebCore::MIMETypeCache *this)
{
  return MEMORY[0x1F41748B0](this);
}

uint64_t WebCore::MediaStrategy::mockMediaSourceEnabled(WebCore::MediaStrategy *this)
{
  return MEMORY[0x1F41748B8](this);
}

uint64_t WebCore::RenderElement::imageOrientation(WebCore::RenderElement *this)
{
  return MEMORY[0x1F41748C8](this);
}

uint64_t WebCore::ResourceError::blockedKnownTracker(WebCore::ResourceError *this)
{
  return MEMORY[0x1F41748D0](this);
}

uint64_t WebCore::ResourceError::errorRecoveryMethod(WebCore::ResourceError *this)
{
  return MEMORY[0x1F41748D8](this);
}

uint64_t WebCore::ResourceError::blockedTrackerHostName(WebCore::ResourceError *this)
{
  return MEMORY[0x1F41748E0](this);
}

uint64_t WebCore::ResourceError::cfError(WebCore::ResourceError *this)
{
  return MEMORY[0x1F41748E8](this);
}

uint64_t WebCore::ResourceError::ipcData(WebCore::ResourceError *this)
{
  return MEMORY[0x1F41748F0](this);
}

uint64_t WebCore::ResourceError::nsError(WebCore::ResourceError *this)
{
  return MEMORY[0x1F41748F8](this);
}

uint64_t WebCore::ResourceError::operator NSError *()
{
  return MEMORY[0x1F4174900]();
}

uint64_t WebCore::ScrollingTree::layoutViewport(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1F4174910](this);
}

uint64_t WebCore::ScrollingTree::mainFrameScrollPosition(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1F4174918](this);
}

uint64_t WebCore::ScrollingTree::mainFrameScrollbarWidth(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1F4174920](this);
}

uint64_t WebCore::ScrollingTree::mainFrameVerticalOverscrollBehavior(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1F4174928](this);
}

uint64_t WebCore::ScrollingTree::mainFrameHorizontalOverscrollBehavior(WebCore::ScrollingTree *this)
{
  return MEMORY[0x1F4174930](this);
}

uint64_t WebCore::ScrollingTree::nodeForID()
{
  return MEMORY[0x1F4174938]();
}

uint64_t WebCore::CredentialBase::persistence(WebCore::CredentialBase *this)
{
  return MEMORY[0x1F4174948](this);
}

uint64_t WebCore::CredentialBase::serializationForBasicAuthorizationHeader(WebCore::CredentialBase *this)
{
  return MEMORY[0x1F4174950](this);
}

uint64_t WebCore::CredentialBase::user(WebCore::CredentialBase *this)
{
  return MEMORY[0x1F4174958](this);
}

uint64_t WebCore::CredentialBase::password(WebCore::CredentialBase *this)
{
  return MEMORY[0x1F4174960](this);
}

uint64_t WebCore::DocumentLoader::frameLoader(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1F4174968](this);
}

uint64_t WebCore::DocumentLoader::subresource(WebCore::DocumentLoader *this, const WTF::URL *a2)
{
  return MEMORY[0x1F4174970](this, a2);
}

uint64_t WebCore::DocumentLoader::urlForHistory(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1F4174988](this);
}

uint64_t WebCore::DocumentLoader::mainResourceData(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1F4174990](this);
}

uint64_t WebCore::DocumentLoader::mouseEventPolicy(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1F4174998](this);
}

uint64_t WebCore::DocumentLoader::mainResourceLoader(WebCore::DocumentLoader *this)
{
  return MEMORY[0x1F41749A8](this);
}

uint64_t WebCore::FontAttributes::createDictionary(WebCore::FontAttributes *this)
{
  return MEMORY[0x1F41749C8](this);
}

uint64_t WebCore::FrameSelection::rootEditableElementOrDocumentElement(WebCore::FrameSelection *this)
{
  return MEMORY[0x1F4174A18](this);
}

uint64_t WebCore::FrameSelection::contains()
{
  return MEMORY[0x1F4174A20]();
}

uint64_t WebCore::IDBRequestData::transactionIdentifier(WebCore::IDBRequestData *this)
{
  return MEMORY[0x1F4174A30](this);
}

uint64_t WebCore::LocalDOMWindow::pendingUnloadEventListeners(WebCore::LocalDOMWindow *this)
{
  return MEMORY[0x1F4174A48](this);
}

uint64_t WebCore::LocalDOMWindow::frame(WebCore::LocalDOMWindow *this)
{
  return MEMORY[0x1F4174A50](this);
}

uint64_t WebCore::LocalFrameView::renderView(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F4174A58](this);
}

uint64_t WebCore::LocalFrameView::needsLayout(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F4174A60](this);
}

uint64_t WebCore::LocalFrameView::paintBehavior(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F4174A68](this);
}

uint64_t WebCore::LocalFrameView::scrollingNodeID(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F4174A70](this);
}

uint64_t WebCore::LocalFrameView::wasScrolledByUser(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F4174A78](this);
}

uint64_t WebCore::LocalFrameView::layoutViewportRect(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F4174A80](this);
}

uint64_t WebCore::LocalFrameView::visualViewportRect(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F4174A88](this);
}

uint64_t WebCore::LocalFrameView::baseBackgroundColor(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F4174A90](this);
}

uint64_t WebCore::LocalFrameView::clientToDocumentRect()
{
  return MEMORY[0x1F4174A98]();
}

uint64_t WebCore::LocalFrameView::documentToClientRect()
{
  return MEMORY[0x1F4174AA0]();
}

uint64_t WebCore::LocalFrameView::clientToDocumentPoint()
{
  return MEMORY[0x1F4174AB0]();
}

uint64_t WebCore::LocalFrameView::baseLayoutViewportSize(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F4174AB8](this);
}

uint64_t WebCore::LocalFrameView::documentBackgroundColor(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F4174AC0](this);
}

uint64_t WebCore::LocalFrameView::absoluteToLayoutViewportRect()
{
  return MEMORY[0x1F4174AC8]();
}

uint64_t WebCore::LocalFrameView::absoluteToLayoutViewportPoint()
{
  return MEMORY[0x1F4174AD0]();
}

uint64_t WebCore::LocalFrameView::hasViewportConstrainedObjects(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F4174AD8](this);
}

uint64_t WebCore::LocalFrameView::maxStableLayoutViewportOrigin(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F4174AE0](this);
}

uint64_t WebCore::LocalFrameView::minStableLayoutViewportOrigin(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F4174AE8](this);
}

uint64_t WebCore::LocalFrameView::viewportConstrainedObjectsRect(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F4174AF0](this);
}

uint64_t WebCore::LocalFrameView::scrollableAreaForScrollingNodeID()
{
  return MEMORY[0x1F4174AF8]();
}

uint64_t WebCore::LocalFrameView::frame(WebCore::LocalFrameView *this)
{
  return MEMORY[0x1F4174B00](this);
}

uint64_t WebCore::PaymentContact::pkContact(WebCore::PaymentContact *this)
{
  return MEMORY[0x1F4174B08](this);
}

uint64_t WebCore::ResourceLoader::frameLoader(WebCore::ResourceLoader *this)
{
  return MEMORY[0x1F4174B18](this);
}

uint64_t WebCore::ResourceLoader::shouldIncludeCertificateInfo(WebCore::ResourceLoader *this)
{
  return MEMORY[0x1F4174B20](this);
}

uint64_t WebCore::ResourceLoader::isAllowedToAskUserForCredentials(WebCore::ResourceLoader *this)
{
  return MEMORY[0x1F4174B28](this);
}

uint64_t WebCore::SWServerWorker::registration(WebCore::SWServerWorker *this)
{
  return MEMORY[0x1F4174B30](this);
}

uint64_t WebCore::SWServerWorker::findClientByIdentifier()
{
  return MEMORY[0x1F4174B38]();
}

uint64_t WebCore::SWServerWorker::isClientActiveServiceWorker()
{
  return MEMORY[0x1F4174B40]();
}

uint64_t WebCore::SWServerWorker::serviceWorkerPageIdentifier(WebCore::SWServerWorker *this)
{
  return MEMORY[0x1F4174B48](this);
}

uint64_t WebCore::SWServerWorker::origin(WebCore::SWServerWorker *this)
{
  return MEMORY[0x1F4174B50](this);
}

uint64_t WebCore::ScrollableArea::scrollOffset(WebCore::ScrollableArea *this)
{
  return MEMORY[0x1F4174B58](this);
}

uint64_t WebCore::ScrollableArea::isPinnedOnSide()
{
  return MEMORY[0x1F4174B60]();
}

uint64_t WebCore::ScrollableArea::scrollAnimator(WebCore::ScrollableArea *this)
{
  return MEMORY[0x1F4174B68](this);
}

uint64_t WebCore::ScrollableArea::edgePinnedState(WebCore::ScrollableArea *this)
{
  return MEMORY[0x1F4174B70](this);
}

uint64_t WebCore::ScrollableArea::scrollbarIntrusion(WebCore::ScrollableArea *this)
{
  return MEMORY[0x1F4174B78](this);
}

uint64_t WebCore::ScrollableArea::visibleContentRect()
{
  return MEMORY[0x1F4174B80]();
}

uint64_t WebCore::ScrollableArea::scrollbarsController(WebCore::ScrollableArea *this)
{
  return MEMORY[0x1F4174B88](this);
}

uint64_t WebCore::ScrollableArea::scrollbarsCanBeActive(WebCore::ScrollableArea *this)
{
  return MEMORY[0x1F4174B90](this);
}

uint64_t WebCore::ScrollableArea::allowsVerticalScrolling(WebCore::ScrollableArea *this)
{
  return MEMORY[0x1F4174B98](this);
}

uint64_t WebCore::ScrollableArea::mouseMovedInContentArea(WebCore::ScrollableArea *this)
{
  return MEMORY[0x1F4174BA0](this);
}

uint64_t WebCore::ScrollableArea::scrollOffsetFromPosition()
{
  return MEMORY[0x1F4174BA8]();
}

uint64_t WebCore::ScrollableArea::allowsHorizontalScrolling(WebCore::ScrollableArea *this)
{
  return MEMORY[0x1F4174BB0](this);
}

uint64_t WebCore::ScrollableArea::getRectToExposeForScrollIntoView()
{
  return MEMORY[0x1F4174BB8]();
}

uint64_t WebCore::ScrollableArea::visibleContentRectIncludingScrollbars()
{
  return MEMORY[0x1F4174BC0]();
}

uint64_t WebCore::SecurityOrigin::canDisplay()
{
  return MEMORY[0x1F4174BC8]();
}

uint64_t WebCore::SecurityOrigin::canRequest()
{
  return MEMORY[0x1F4174BD0]();
}

uint64_t WebCore::SecurityOrigin::toRawString(WebCore::SecurityOrigin *this)
{
  return MEMORY[0x1F4174BD8](this);
}

uint64_t WebCore::SecurityOrigin::isSameSiteAs(WebCore::SecurityOrigin *this, const WebCore::SecurityOrigin *a2)
{
  return MEMORY[0x1F4174BE0](this, a2);
}

uint64_t WebCore::SecurityOrigin::isolatedCopy(WebCore::SecurityOrigin *this)
{
  return MEMORY[0x1F4174BE8](this);
}

uint64_t WebCore::SecurityOrigin::isSameOriginAs(WebCore::SecurityOrigin *this, const WebCore::SecurityOrigin *a2)
{
  return MEMORY[0x1F4174BF0](this, a2);
}

uint64_t WebCore::SecurityOrigin::isSameOriginDomain(WebCore::SecurityOrigin *this, const WebCore::SecurityOrigin *a2)
{
  return MEMORY[0x1F4174BF8](this, a2);
}

uint64_t WebCore::SecurityOrigin::isSameSchemeHostPort(WebCore::SecurityOrigin *this, const WebCore::SecurityOrigin *a2)
{
  return MEMORY[0x1F4174C00](this, a2);
}

uint64_t WebCore::SecurityOrigin::toString(WebCore::SecurityOrigin *this)
{
  return MEMORY[0x1F4174C18](this);
}

uint64_t WebCore::TestReportBody::message(WebCore::TestReportBody *this)
{
  return MEMORY[0x1F4174C28](this);
}

uint64_t WebCore::TileController::contentsScale(WebCore::TileController *this)
{
  return MEMORY[0x1F4174C30](this);
}

uint64_t WebCore::AffineTransform::isIdentity(WebCore::AffineTransform *this)
{
  return MEMORY[0x1F4174C38](this);
}

uint64_t WebCore::AffineTransform::inverse(WebCore::AffineTransform *this)
{
  return MEMORY[0x1F4174C40](this);
}

uint64_t WebCore::AffineTransform::mapRect(WebCore::AffineTransform *this, const WebCore::IntRect *a2)
{
  return MEMORY[0x1F4174C48](this, a2);
}

uint64_t WebCore::AffineTransform::mapRect(WebCore::AffineTransform *this, const WebCore::FloatRect *a2)
{
  return MEMORY[0x1F4174C50](this, a2);
}

uint64_t WebCore::AffineTransform::mapPoint(WebCore::AffineTransform *this, const WebCore::FloatPoint *a2)
{
  return MEMORY[0x1F4174C58](this, a2);
}

uint64_t WebCore::AffineTransform::mapPoint(WebCore::AffineTransform *this, const WebCore::IntPoint *a2)
{
  return MEMORY[0x1F4174C60](this, a2);
}

uint64_t WebCore::AffineTransform::operator CGAffineTransform()
{
  return MEMORY[0x1F4174C68]();
}

uint64_t WebCore::BackgroundFetch::information(WebCore::BackgroundFetch *this)
{
  return MEMORY[0x1F4174C70](this);
}

uint64_t WebCore::CertificateInfo::containsNonRootSHA1SignedCertificate(WebCore::CertificateInfo *this)
{
  return MEMORY[0x1F4174C80](this);
}

uint64_t WebCore::FocusController::focusedOrMainFrame(WebCore::FocusController *this)
{
  return MEMORY[0x1F4174C88](this);
}

uint64_t WebCore::GraphicsContext::scaleFactor(WebCore::GraphicsContext *this)
{
  return MEMORY[0x1F4174C90](this);
}

uint64_t WebCore::GraphicsContext::createScaledImageBuffer()
{
  return MEMORY[0x1F4174CA0]();
}

{
  return MEMORY[0x1F4174CA8]();
}

uint64_t WebCore::HTMLAreaElement::imageElement(WebCore::HTMLAreaElement *this)
{
  return MEMORY[0x1F4174CB8](this);
}

uint64_t WebCore::IDBGetAllResult::keys(WebCore::IDBGetAllResult *this)
{
  return MEMORY[0x1F4174CF8](this);
}

uint64_t WebCore::IDBGetAllResult::values(WebCore::IDBGetAllResult *this)
{
  return MEMORY[0x1F4174D00](this);
}

uint64_t WebCore::PlatformCALayer::canHaveBackingStore(WebCore::PlatformCALayer *this)
{
  return MEMORY[0x1F4174D18](this);
}

uint64_t WebCore::PlatformCALayer::needsPlatformContext(WebCore::PlatformCALayer *this)
{
  return MEMORY[0x1F4174D20](this);
}

uint64_t WebCore::PlatformCALayer::maskLayer(WebCore::PlatformCALayer *this)
{
  return MEMORY[0x1F4174D28](this);
}

uint64_t WebCore::ProcessIdentity::operator BOOL()
{
  return MEMORY[0x1F4174D30]();
}

uint64_t WebCore::ProtectionSpace::getPlatformDataToSerialize(WebCore::ProtectionSpace *this)
{
  return MEMORY[0x1F4174D38](this);
}

uint64_t WebCore::ProtectionSpace::nsSpace(WebCore::ProtectionSpace *this)
{
  return MEMORY[0x1F4174D48](this);
}

uint64_t WebCore::ResourceRequest::nsURLRequest()
{
  return MEMORY[0x1F4174D50]();
}

uint64_t WebCore::ResourceRequest::getRequestDataToSerialize(WebCore::ResourceRequest *this)
{
  return MEMORY[0x1F4174D58](this);
}

uint64_t WebCore::RunLoopObserver::isScheduled(WebCore::RunLoopObserver *this)
{
  return MEMORY[0x1F4174D60](this);
}

uint64_t WebCore::SecurityContext::securityOrigin(WebCore::SecurityContext *this)
{
  return MEMORY[0x1F4174D68](this);
}

uint64_t WebCore::ShareableBitmap::createHandle()
{
  return MEMORY[0x1F4174D70]();
}

uint64_t WebCore::ShareableBitmap::createReadOnlyHandle(WebCore::ShareableBitmap *this)
{
  return MEMORY[0x1F4174D78](this);
}

uint64_t WebCore::ShareableBitmap::span(WebCore::ShareableBitmap *this)
{
  return MEMORY[0x1F4174D80](this);
}

uint64_t WebCore::StyleProperties::mutableCopy(WebCore::StyleProperties *this)
{
  return MEMORY[0x1F4174D88](this);
}

uint64_t WebCore::StyleProperties::propertyAsColor()
{
  return MEMORY[0x1F4174D90]();
}

uint64_t WebCore::StyleProperties::propertyAsValueID()
{
  return MEMORY[0x1F4174D98]();
}

uint64_t WebCore::StyleProperties::getPropertyCSSValue()
{
  return MEMORY[0x1F4174DA0]();
}

uint64_t WebCore::VisiblePosition::absoluteCaretBounds(WebCore::VisiblePosition *this, BOOL *a2)
{
  return MEMORY[0x1F4174DB0](this, a2);
}

uint64_t WebCore::VisiblePosition::absoluteSelectionBoundsForLine(WebCore::VisiblePosition *this)
{
  return MEMORY[0x1F4174DB8](this);
}

uint64_t WebCore::VisiblePosition::next()
{
  return MEMORY[0x1F4174DD0]();
}

uint64_t WebCore::VisiblePosition::previous()
{
  return MEMORY[0x1F4174DE0]();
}

uint64_t WebCore::AttributedString::nsAttributedString(WebCore::AttributedString *this)
{
  return MEMORY[0x1F4174DE8](this);
}

uint64_t WebCore::AttributedString::documentAttributesAsNSDictionary(WebCore::AttributedString *this)
{
  return MEMORY[0x1F4174DF0](this);
}

uint64_t WebCore::BlobRegistryImpl::filesInBlob()
{
  return MEMORY[0x1F4174E00]();
}

uint64_t WebCore::BlobRegistryImpl::getBlobDataFromURL()
{
  return MEMORY[0x1F4174E08]();
}

uint64_t WebCore::FontPlatformData::attributes(WebCore::FontPlatformData *this)
{
  return MEMORY[0x1F4174E20](this);
}

uint64_t WebCore::FontPlatformData::toIPCData(WebCore::FontPlatformData *this)
{
  return MEMORY[0x1F4174E28](this);
}

uint64_t WebCore::HTMLInputElement::isURLField(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174E70](this);
}

uint64_t WebCore::HTMLInputElement::isDateField(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174E78](this);
}

uint64_t WebCore::HTMLInputElement::isTextField(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174E80](this);
}

uint64_t WebCore::HTMLInputElement::isTimeField(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174E88](this);
}

uint64_t WebCore::HTMLInputElement::isWeekField(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174E90](this);
}

uint64_t WebCore::HTMLInputElement::isEmailField(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174EA8](this);
}

uint64_t WebCore::HTMLInputElement::isFileUpload(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174EB0](this);
}

uint64_t WebCore::HTMLInputElement::isMonthField(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174EB8](this);
}

uint64_t WebCore::HTMLInputElement::isTextButton(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174EC0](this);
}

uint64_t WebCore::HTMLInputElement::valueAsColor(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174EC8](this);
}

uint64_t WebCore::HTMLInputElement::visibleValue(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174ED0](this);
}

uint64_t WebCore::HTMLInputElement::isNumberField(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174ED8](this);
}

uint64_t WebCore::HTMLInputElement::isSearchField(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174EE0](this);
}

uint64_t WebCore::HTMLInputElement::valueAsNumber(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174EE8](this);
}

uint64_t WebCore::HTMLInputElement::isColorControl(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174EF0](this);
}

uint64_t WebCore::HTMLInputElement::isSubmitButton(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174EF8](this);
}

uint64_t WebCore::HTMLInputElement::isPasswordField(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174F00](this);
}

uint64_t WebCore::HTMLInputElement::suggestedColors(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174F08](this);
}

uint64_t WebCore::HTMLInputElement::isTelephoneField(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174F10](this);
}

uint64_t WebCore::HTMLInputElement::isDateTimeLocalField(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174F28](this);
}

uint64_t WebCore::HTMLInputElement::dataListButtonElement(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174F30](this);
}

uint64_t WebCore::HTMLInputElement::isFocusingWithDataListDropdown(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174F38](this);
}

uint64_t WebCore::HTMLInputElement::list(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174F48](this);
}

uint64_t WebCore::HTMLInputElement::value(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174F50](this);
}

uint64_t WebCore::HTMLInputElement::isText(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174F68](this);
}

uint64_t WebCore::HTMLInputElement::multiple(WebCore::HTMLInputElement *this)
{
  return MEMORY[0x1F4174F70](this);
}

uint64_t WebCore::HTMLMediaElement::videoLayerSize(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F4174FB0](this);
}

uint64_t WebCore::HTMLMediaElement::playerIdentifier(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F4174FB8](this);
}

uint64_t WebCore::HTMLMediaElement::isVisibleInViewport(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F4174FC0](this);
}

uint64_t WebCore::HTMLMediaElement::paused(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F4174FD8](this);
}

uint64_t WebCore::HTMLMediaElement::seeking(WebCore::HTMLMediaElement *this)
{
  return MEMORY[0x1F4174FE8](this);
}

uint64_t WebCore::HTMLVideoElement::videoWidth(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1F4175020](this);
}

uint64_t WebCore::HTMLVideoElement::videoHeight(WebCore::HTMLVideoElement *this)
{
  return MEMORY[0x1F4175028](this);
}

uint64_t WebCore::HTMLVideoElement::webkitSupportsPresentationMode()
{
  return MEMORY[0x1F4175030]();
}

uint64_t WebCore::NotificationData::dictionaryRepresentation(WebCore::NotificationData *this)
{
  return MEMORY[0x1F4175040](this);
}

uint64_t WebCore::ResourceResponse::nsURLResponse(WebCore::ResourceResponse *this)
{
  return MEMORY[0x1F4175048](this);
}

uint64_t WebCore::SWContextManager::connection(WebCore::SWContextManager *this)
{
  return MEMORY[0x1F4175050](this);
}

uint64_t WebCore::SWContextManager::serviceWorkerThreadProxy()
{
  return MEMORY[0x1F4175058]();
}

uint64_t WebCore::SWContextManager::serviceWorkerThreadProxyFromBackgroundThread()
{
  return MEMORY[0x1F4175060]();
}

uint64_t WebCore::SpeechRecognizer::clientIdentifier(WebCore::SpeechRecognizer *this)
{
  return MEMORY[0x1F4175068](this);
}

uint64_t WebCore::TrackPrivateBase::hasClients(WebCore::TrackPrivateBase *this)
{
  return MEMORY[0x1F4175070](this);
}

uint64_t WebCore::TrackPrivateBase::operator==()
{
  return MEMORY[0x1F4175078]();
}

uint64_t WebCore::UserMediaRequest::topLevelDocumentOrigin(WebCore::UserMediaRequest *this)
{
  return MEMORY[0x1F41750B8](this);
}

uint64_t WebCore::UserMediaRequest::userMediaDocumentOrigin(WebCore::UserMediaRequest *this)
{
  return MEMORY[0x1F41750C0](this);
}

uint64_t WebCore::UserMediaRequest::document(WebCore::UserMediaRequest *this)
{
  return MEMORY[0x1F41750C8](this);
}

uint64_t WebCore::VisibleSelection::firstRange(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1F41750D0](this);
}

uint64_t WebCore::VisibleSelection::hasEditableStyle(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1F41750D8](this);
}

uint64_t WebCore::VisibleSelection::isContentEditable(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1F41750E0](this);
}

uint64_t WebCore::VisibleSelection::isInPasswordField(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1F41750E8](this);
}

uint64_t WebCore::VisibleSelection::toNormalizedRange(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1F41750F0](this);
}

uint64_t WebCore::VisibleSelection::rootEditableElement(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1F41750F8](this);
}

uint64_t WebCore::VisibleSelection::isContentRichlyEditable(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1F4175100](this);
}

uint64_t WebCore::VisibleSelection::canEnableWritingSuggestions(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1F4175108](this);
}

uint64_t WebCore::VisibleSelection::isInAutoFilledAndViewableField(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1F4175110](this);
}

uint64_t WebCore::VisibleSelection::range(WebCore::VisibleSelection *this)
{
  return MEMORY[0x1F4175120](this);
}

uint64_t WebCore::CredentialStorage::originsWithCredentials(WebCore::CredentialStorage *this)
{
  return MEMORY[0x1F4175128](this);
}

uint64_t WebCore::FullscreenManager::fullscreenElement(WebCore::FullscreenManager *this)
{
  return MEMORY[0x1F4175130](this);
}

uint64_t WebCore::GraphicsContextCG::platformContext(WebCore::GraphicsContextCG *this)
{
  return MEMORY[0x1F4175140](this);
}

uint64_t WebCore::HTMLAnchorElement::href(WebCore::HTMLAnchorElement *this)
{
  return MEMORY[0x1F4175148](this);
}

uint64_t WebCore::HTMLOptionElement::displayLabel(WebCore::HTMLOptionElement *this)
{
  return MEMORY[0x1F4175160](this);
}

uint64_t WebCore::HTMLOptionElement::ownerSelectElement(WebCore::HTMLOptionElement *this)
{
  return MEMORY[0x1F4175168](this);
}

uint64_t WebCore::HTMLOptionElement::isDisabledFormControl(WebCore::HTMLOptionElement *this)
{
  return MEMORY[0x1F4175170](this);
}

uint64_t WebCore::HTMLOptionElement::index(WebCore::HTMLOptionElement *this)
{
  return MEMORY[0x1F4175188](this);
}

uint64_t WebCore::HTMLOptionElement::selected()
{
  return MEMORY[0x1F41751A0]();
}

uint64_t WebCore::HTMLSelectElement::selectedIndex(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1F41751B8](this);
}

uint64_t WebCore::HTMLSelectElement::listItems(WebCore::HTMLSelectElement *this)
{
  return MEMORY[0x1F41751D0](this);
}

uint64_t WebCore::LibWebRTCProvider::isEnumeratingAllNetworkInterfacesEnabled(WebCore::LibWebRTCProvider *this)
{
  return MEMORY[0x1F41751D8](this);
}

uint64_t WebCore::MouseRelatedEvent::locationInRootViewCoordinates(WebCore::MouseRelatedEvent *this)
{
  return MEMORY[0x1F41751E0](this);
}

uint64_t WebCore::PublicSuffixStore::publicSuffix(WebCore::PublicSuffixStore *this, const WTF::URL *a2)
{
  return MEMORY[0x1F41751E8](this, a2);
}

uint64_t WebCore::PublicSuffixStore::isPublicSuffix()
{
  return MEMORY[0x1F41751F0]();
}

uint64_t WebCore::PublicSuffixStore::topPrivatelyControlledDomain()
{
  return MEMORY[0x1F41751F8]();
}

uint64_t WebCore::ResourceErrorBase::isolatedCopy(WebCore::ResourceErrorBase *this)
{
  return MEMORY[0x1F4175208](this);
}

uint64_t WebCore::ResourceErrorBase::lazyInit(WebCore::ResourceErrorBase *this)
{
  return MEMORY[0x1F4175210](this);
}

uint64_t WebCore::SQLiteTransaction::wasRolledBackBySqlite(WebCore::SQLiteTransaction *this)
{
  return MEMORY[0x1F4175218](this);
}

uint64_t WebCore::ScrollingTreeNode::isRootNode(WebCore::ScrollingTreeNode *this)
{
  return MEMORY[0x1F4175220](this);
}

uint64_t WebCore::SelectionGeometry::rect(WebCore::SelectionGeometry *this)
{
  return MEMORY[0x1F4175228](this);
}

uint64_t WebCore::SubresourceLoader::originalHeaders(WebCore::SubresourceLoader *this)
{
  return MEMORY[0x1F4175230](this);
}

uint64_t WebCore::DOMWindowExtension::frame(WebCore::DOMWindowExtension *this)
{
  return MEMORY[0x1F4175238](this);
}

uint64_t WebCore::MediaSourcePrivate::hasBufferedData(WebCore::MediaSourcePrivate *this)
{
  return MEMORY[0x1F4175268](this);
}

uint64_t WebCore::MediaSourcePrivate::ensureOnDispatcher()
{
  return MEMORY[0x1F4175270]();
}

uint64_t WebCore::MediaSourcePrivate::client(WebCore::MediaSourcePrivate *this)
{
  return MEMORY[0x1F4175278](this);
}

uint64_t WebCore::MediaSourcePrivate::buffered(WebCore::MediaSourcePrivate *this)
{
  return MEMORY[0x1F4175280](this);
}

uint64_t WebCore::MediaSourcePrivate::duration(WebCore::MediaSourcePrivate *this)
{
  return MEMORY[0x1F4175288](this);
}

uint64_t WebCore::MediaStreamPrivate::hasVideo(WebCore::MediaStreamPrivate *this)
{
  return MEMORY[0x1F4175290](this);
}

uint64_t WebCore::MessagePortChannel::hasAnyMessagesPendingOrInFlight(WebCore::MessagePortChannel *this)
{
  return MEMORY[0x1F4175298](this);
}

uint64_t WebCore::NetworkLoadMetrics::isolatedCopy(WebCore::NetworkLoadMetrics *this)
{
  return MEMORY[0x1F41752A0](this);
}

uint64_t WebCore::ParsedContentRange::headerValue(WebCore::ParsedContentRange *this)
{
  return MEMORY[0x1F41752A8](this);
}

uint64_t WebCore::PlatformPasteboard::readBuffer()
{
  return MEMORY[0x1F41752B0]();
}

uint64_t WebCore::PlatformPasteboard::readString(WebCore::PlatformPasteboard *this, uint64_t a2, const WTF::String *a3)
{
  return MEMORY[0x1F41752B8](this, a2, a3);
}

uint64_t WebCore::PlatformPasteboard::changeCount(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1F41752C0](this);
}

uint64_t WebCore::PlatformPasteboard::bufferForType(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return MEMORY[0x1F41752C8](this, a2);
}

uint64_t WebCore::PlatformPasteboard::numberOfFiles(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1F41752D0](this);
}

uint64_t WebCore::PlatformPasteboard::stringForType(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return MEMORY[0x1F41752D8](this, a2);
}

uint64_t WebCore::PlatformPasteboard::allStringsForType(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return MEMORY[0x1F41752E0](this, a2);
}

uint64_t WebCore::PlatformPasteboard::getPathnamesForType()
{
  return MEMORY[0x1F41752E8]();
}

uint64_t WebCore::PlatformPasteboard::typesSafeForDOMToReadAndWrite(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return MEMORY[0x1F41752F0](this, a2);
}

uint64_t WebCore::PlatformPasteboard::containsStringSafeForDOMToReadForType(WebCore::PlatformPasteboard *this, const WTF::String *a2)
{
  return MEMORY[0x1F41752F8](this, a2);
}

uint64_t WebCore::PlatformPasteboard::count(WebCore::PlatformPasteboard *this)
{
  return MEMORY[0x1F4175300](this);
}

uint64_t WebCore::PlatformPasteboard::readURL(WebCore::PlatformPasteboard *this, uint64_t a2, WTF::String *a3)
{
  return MEMORY[0x1F4175308](this, a2, a3);
}

uint64_t WebCore::PlatformPasteboard::getTypes()
{
  return MEMORY[0x1F4175310]();
}

uint64_t WebCore::PlatformTimeRanges::maximumBufferedTime(WebCore::PlatformTimeRanges *this)
{
  return MEMORY[0x1F4175318](this);
}

uint64_t WebCore::PlatformTimeRanges::end(WebCore::PlatformTimeRanges *this)
{
  return MEMORY[0x1F4175320](this);
}

uint64_t WebCore::PlatformTimeRanges::start(WebCore::PlatformTimeRanges *this)
{
  return MEMORY[0x1F4175328](this);
}

uint64_t WebCore::PlatformTimeRanges::toString(WebCore::PlatformTimeRanges *this)
{
  return MEMORY[0x1F4175330](this);
}

uint64_t WebCore::RenderLayerBacking::contentsBox(WebCore::RenderLayerBacking *this)
{
  return MEMORY[0x1F4175338](this);
}

uint64_t WebCore::RenderLayerBacking::compositedBounds(WebCore::RenderLayerBacking *this)
{
  return MEMORY[0x1F4175340](this);
}

uint64_t WebCore::ScrollingStateTree::rootStateNode(WebCore::ScrollingStateTree *this)
{
  return MEMORY[0x1F4175348](this);
}

uint64_t WebCore::SecurityOriginData::securityOrigin(WebCore::SecurityOriginData *this)
{
  return MEMORY[0x1F4175350](this);
}

uint64_t WebCore::SecurityOriginData::databaseIdentifier(WebCore::SecurityOriginData *this)
{
  return MEMORY[0x1F4175358](this);
}

uint64_t WebCore::SecurityOriginData::toURL(WebCore::SecurityOriginData *this)
{
  return MEMORY[0x1F4175360](this);
}

uint64_t WebCore::SecurityOriginData::toString(WebCore::SecurityOriginData *this)
{
  return MEMORY[0x1F4175368](this);
}

uint64_t WebCore::SharedMemoryHandle::setOwnershipOfMemory()
{
  return MEMORY[0x1F4175370]();
}

uint64_t WebCore::SharedMemoryHandle::takeOwnershipOfMemory()
{
  return MEMORY[0x1F4175378]();
}

uint64_t WebCore::DragCaretController::isContentRichlyEditable(WebCore::DragCaretController *this)
{
  return MEMORY[0x1F41753D0](this);
}

uint64_t WebCore::DragCaretController::caretRectInRootViewCoordinates(WebCore::DragCaretController *this)
{
  return MEMORY[0x1F41753D8](this);
}

uint64_t WebCore::DragCaretController::editableElementRectInRootViewCoordinates(WebCore::DragCaretController *this)
{
  return MEMORY[0x1F41753E0](this);
}

uint64_t WebCore::HTMLOptGroupElement::groupLabelText(WebCore::HTMLOptGroupElement *this)
{
  return MEMORY[0x1F41753E8](this);
}

uint64_t WebCore::HTMLOptGroupElement::ownerSelectElement(WebCore::HTMLOptGroupElement *this)
{
  return MEMORY[0x1F41753F0](this);
}

uint64_t WebCore::HTMLTextAreaElement::value(WebCore::HTMLTextAreaElement *this)
{
  return MEMORY[0x1F4175410](this);
}

uint64_t WebCore::ImageDecoderAVFObjC::frameCount(WebCore::ImageDecoderAVFObjC *this)
{
  return MEMORY[0x1F4175418](this);
}

uint64_t WebCore::ImageDecoderAVFObjC::frameInfos(WebCore::ImageDecoderAVFObjC *this)
{
  return MEMORY[0x1F4175420](this);
}

uint64_t WebCore::ImageDecoderAVFObjC::size(WebCore::ImageDecoderAVFObjC *this)
{
  return MEMORY[0x1F4175428](this);
}

uint64_t WebCore::InspectorController::isUnderTest(WebCore::InspectorController *this)
{
  return MEMORY[0x1F4175430](this);
}

uint64_t WebCore::InspectorController::getHighlight()
{
  return MEMORY[0x1F4175438]();
}

uint64_t WebCore::InspectorController::drawHighlight(WebCore::InspectorController *this, WebCore::GraphicsContext *a2)
{
  return MEMORY[0x1F4175440](this, a2);
}

uint64_t WebCore::NotificationPayload::dictionaryRepresentation(WebCore::NotificationPayload *this)
{
  return MEMORY[0x1F4175448](this);
}

uint64_t WebCore::PaymentSessionError::platformError(WebCore::PaymentSessionError *this)
{
  return MEMORY[0x1F4175450](this);
}

uint64_t WebCore::ProtectionSpaceBase::isPasswordBased(WebCore::ProtectionSpaceBase *this)
{
  return MEMORY[0x1F4175458](this);
}

uint64_t WebCore::ProtectionSpaceBase::isProxy(WebCore::ProtectionSpaceBase *this)
{
  return MEMORY[0x1F4175460](this);
}

uint64_t WebCore::RealtimeMediaSource::intrinsicSize(WebCore::RealtimeMediaSource *this)
{
  return MEMORY[0x1F4175468](this);
}

uint64_t WebCore::RealtimeMediaSource::deviceIDHashSalts(WebCore::RealtimeMediaSource *this)
{
  return MEMORY[0x1F4175470](this);
}

uint64_t WebCore::RequestedScrollData::destinationPosition()
{
  return MEMORY[0x1F4175478]();
}

uint64_t WebCore::ResourceRequestBase::httpMethod(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F4175480](this);
}

uint64_t WebCore::ResourceRequestBase::httpOrigin(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F4175488](this);
}

uint64_t WebCore::ResourceRequestBase::isSameSite(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F4175490](this);
}

uint64_t WebCore::ResourceRequestBase::cachePolicy(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F4175498](this);
}

uint64_t WebCore::ResourceRequestBase::httpReferrer(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F41754A0](this);
}

uint64_t WebCore::ResourceRequestBase::isThirdParty(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F41754A8](this);
}

uint64_t WebCore::ResourceRequestBase::isolatedCopy(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F41754B0](this);
}

uint64_t WebCore::ResourceRequestBase::httpUserAgent(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F41754B8](this);
}

uint64_t WebCore::ResourceRequestBase::isConditional(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F41754C0](this);
}

uint64_t WebCore::ResourceRequestBase::httpContentType(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F41754C8](this);
}

uint64_t WebCore::ResourceRequestBase::httpHeaderField()
{
  return MEMORY[0x1F41754D0]();
}

{
  return MEMORY[0x1F41754D8]();
}

uint64_t WebCore::ResourceRequestBase::timeoutInterval(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F41754E0](this);
}

uint64_t WebCore::ResourceRequestBase::httpHeaderFields(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F41754E8](this);
}

uint64_t WebCore::ResourceRequestBase::redirectedRequest()
{
  return MEMORY[0x1F41754F0]();
}

uint64_t WebCore::ResourceRequestBase::hasHTTPHeaderField()
{
  return MEMORY[0x1F41754F8]();
}

uint64_t WebCore::ResourceRequestBase::firstPartyForCookies(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F4175500](this);
}

uint64_t WebCore::ResourceRequestBase::url(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F4175508](this);
}

uint64_t WebCore::ResourceRequestBase::isNull(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F4175510](this);
}

uint64_t WebCore::ResourceRequestBase::isEmpty(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F4175518](this);
}

uint64_t WebCore::ResourceRequestBase::httpBody(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F4175520](this);
}

uint64_t WebCore::ResourceRequestBase::priority(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F4175528](this);
}

uint64_t WebCore::ResourceRequestBase::hasUpload(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F4175530](this);
}

uint64_t WebCore::ResourceRequestBase::isTopSite(WebCore::ResourceRequestBase *this)
{
  return MEMORY[0x1F4175538](this);
}

uint64_t WebCore::SourceBufferPrivate::isBufferFullFor(WebCore::SourceBufferPrivate *this)
{
  return MEMORY[0x1F4175540](this);
}

uint64_t WebCore::SourceBufferPrivate::ensureOnDispatcher()
{
  return MEMORY[0x1F4175548]();
}

uint64_t WebCore::SourceBufferPrivate::trackBuffersRanges(WebCore::SourceBufferPrivate *this)
{
  return MEMORY[0x1F4175550](this);
}

uint64_t WebCore::SourceBufferPrivate::client(WebCore::SourceBufferPrivate *this)
{
  return MEMORY[0x1F4175558](this);
}

uint64_t WebCore::SourceBufferPrivate::canAppend(WebCore::SourceBufferPrivate *this)
{
  return MEMORY[0x1F4175560](this);
}

uint64_t WebCore::TransformOperations::clone(WebCore::TransformOperations *this)
{
  return MEMORY[0x1F4175568](this);
}

uint64_t WebCore::ByteArrayPixelBuffer::span(WebCore::ByteArrayPixelBuffer *this)
{
  return MEMORY[0x1F4175580](this);
}

uint64_t WebCore::FontAttributeChanges::editAction(WebCore::FontAttributeChanges *this)
{
  return MEMORY[0x1F4175598](this);
}

uint64_t WebCore::FontAttributeChanges::createEditingStyle(WebCore::FontAttributeChanges *this)
{
  return MEMORY[0x1F41755A0](this);
}

uint64_t WebCore::HTMLTableCellElement::cellAbove(WebCore::HTMLTableCellElement *this)
{
  return MEMORY[0x1F41755C0](this);
}

uint64_t WebCore::ImageBufferCGBackend::applyBaseTransform(WebCore::ImageBufferCGBackend *this, WebCore::GraphicsContextCG *a2)
{
  return MEMORY[0x1F41755E0](this, a2);
}

uint64_t WebCore::LowPowerModeNotifier::isLowPowerModeEnabled(WebCore::LowPowerModeNotifier *this)
{
  return MEMORY[0x1F41755E8](this);
}

uint64_t WebCore::ResourceResponseBase::httpVersion(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F41755F8](this);
}

uint64_t WebCore::ResourceResponseBase::isRedirection(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F4175608](this);
}

uint64_t WebCore::ResourceResponseBase::httpStatusCode(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F4175610](this);
}

uint64_t WebCore::ResourceResponseBase::isInHTTPFamily(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F4175618](this);
}

uint64_t WebCore::ResourceResponseBase::getResponseData(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F4175620](this);
}

uint64_t WebCore::ResourceResponseBase::httpHeaderField()
{
  return MEMORY[0x1F4175628]();
}

uint64_t WebCore::ResourceResponseBase::httpHeaderFields(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F4175630](this);
}

uint64_t WebCore::ResourceResponseBase::textEncodingName(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F4175638](this);
}

uint64_t WebCore::ResourceResponseBase::suggestedFilename(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F4175640](this);
}

uint64_t WebCore::ResourceResponseBase::cacheControlMaxAge(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F4175648](this);
}

uint64_t WebCore::ResourceResponseBase::expectedContentLength(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F4175650](this);
}

uint64_t WebCore::ResourceResponseBase::includeCertificateInfo()
{
  return MEMORY[0x1F4175658]();
}

uint64_t WebCore::ResourceResponseBase::hasCacheValidatorFields(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F4175660](this);
}

uint64_t WebCore::ResourceResponseBase::isAttachmentWithFilename(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F4175668](this);
}

uint64_t WebCore::ResourceResponseBase::containsInvalidHTTPHeaders(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F4175670](this);
}

uint64_t WebCore::ResourceResponseBase::cacheControlContainsNoCache(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F4175678](this);
}

uint64_t WebCore::ResourceResponseBase::cacheControlContainsNoStore(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F4175680](this);
}

uint64_t WebCore::ResourceResponseBase::cacheControlStaleWhileRevalidate(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F4175688](this);
}

uint64_t WebCore::ResourceResponseBase::url(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F4175690](this);
}

uint64_t WebCore::ResourceResponseBase::source(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F4175698](this);
}

uint64_t WebCore::ResourceResponseBase::expires(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F41756A0](this);
}

uint64_t WebCore::ResourceResponseBase::isHTTP09(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F41756A8](this);
}

uint64_t WebCore::ResourceResponseBase::mimeType(WebCore::ResourceResponseBase *this)
{
  return MEMORY[0x1F41756B0](this);
}

uint64_t WebCore::ResourceResponseData::isolatedCopy(WebCore::ResourceResponseData *this)
{
  return MEMORY[0x1F41756B8](this);
}

uint64_t WebCore::SWServerRegistration::shouldSoftUpdate()
{
  return MEMORY[0x1F41756C0]();
}

uint64_t WebCore::SWServerRegistration::cookieChangeSubscriptions(WebCore::SWServerRegistration *this)
{
  return MEMORY[0x1F41756C8](this);
}

uint64_t WebCore::SWServerRegistration::data(WebCore::SWServerRegistration *this)
{
  return MEMORY[0x1F41756D0](this);
}

uint64_t WebCore::ScrollingCoordinator::page(WebCore::ScrollingCoordinator *this)
{
  return MEMORY[0x1F41756D8](this);
}

uint64_t WebCore::SharedVideoFrameInfo::storageSize(WebCore::SharedVideoFrameInfo *this)
{
  return MEMORY[0x1F41756E0](this);
}

uint64_t WebCore::SharedVideoFrameInfo::isReadWriteSupported(WebCore::SharedVideoFrameInfo *this)
{
  return MEMORY[0x1F41756E8](this);
}

uint64_t WebCore::SharedVideoFrameInfo::createCompatibleBufferPool(WebCore::SharedVideoFrameInfo *this)
{
  return MEMORY[0x1F41756F0](this);
}

uint64_t WebCore::TransformationMatrix::isInvertible(WebCore::TransformationMatrix *this)
{
  return MEMORY[0x1F41756F8](this);
}

uint64_t WebCore::TransformationMatrix::operator CATransform3D()
{
  return MEMORY[0x1F4175700]();
}

uint64_t WebCore::ARKitBadgeSystemImage::imageIdentifier(WebCore::ARKitBadgeSystemImage *this)
{
  return MEMORY[0x1F4175708](this);
}

uint64_t WebCore::AuthenticatorResponse::attachment(WebCore::AuthenticatorResponse *this)
{
  return MEMORY[0x1F4175710](this);
}

uint64_t WebCore::AuthenticatorResponse::extensions(WebCore::AuthenticatorResponse *this)
{
  return MEMORY[0x1F4175718](this);
}

uint64_t WebCore::AuthenticatorResponse::rawId(WebCore::AuthenticatorResponse *this)
{
  return MEMORY[0x1F4175720](this);
}

uint64_t WebCore::BackForwardController::forwardCount(WebCore::BackForwardController *this)
{
  return MEMORY[0x1F4175728](this);
}

uint64_t WebCore::BackForwardController::backCount(WebCore::BackForwardController *this)
{
  return MEMORY[0x1F4175738](this);
}

uint64_t WebCore::BackgroundFetchEngine::backgroundFetch(WebCore::BackgroundFetchEngine *this, const WebCore::ServiceWorkerRegistrationKey *a2, const WTF::String *a3)
{
  return MEMORY[0x1F4175740](this, a2, a3);
}

uint64_t WebCore::ContentSecurityPolicy::responseHeaders(WebCore::ContentSecurityPolicy *this)
{
  return MEMORY[0x1F4175748](this);
}

uint64_t WebCore::ContentSecurityPolicy::allowFrameAncestors()
{
  return MEMORY[0x1F4175750]();
}

uint64_t WebCore::ContentSecurityPolicy::allowConnectToSource()
{
  return MEMORY[0x1F4175758]();
}

uint64_t WebCore::ContentSecurityPolicy::allowScriptFromSource()
{
  return MEMORY[0x1F4175760]();
}

uint64_t WebCore::ContentSecurityPolicy::allowWorkerFromSource()
{
  return MEMORY[0x1F4175768]();
}

uint64_t WebCore::ContentSecurityPolicy::overridesXFrameOptions(WebCore::ContentSecurityPolicy *this)
{
  return MEMORY[0x1F4175770](this);
}

uint64_t WebCore::ContentSecurityPolicy::upgradeInsecureRequestIfNeeded()
{
  return MEMORY[0x1F4175778]();
}

uint64_t WebCore::DestinationColorSpace::supportsOutput(WebCore::DestinationColorSpace *this)
{
  return MEMORY[0x1F4175780](this);
}

uint64_t WebCore::HTMLAttachmentElement::attachmentType(WebCore::HTMLAttachmentElement *this)
{
  return MEMORY[0x1F4175788](this);
}

uint64_t WebCore::HTMLAttachmentElement::attachmentTitle(WebCore::HTMLAttachmentElement *this)
{
  return MEMORY[0x1F4175790](this);
}

uint64_t WebCore::HTMLAttachmentElement::file(WebCore::HTMLAttachmentElement *this)
{
  return MEMORY[0x1F4175798](this);
}

uint64_t WebCore::MediaKeySystemRequest::topLevelDocumentOrigin(WebCore::MediaKeySystemRequest *this)
{
  return MEMORY[0x1F41757D8](this);
}

uint64_t WebCore::MediaKeySystemRequest::document(WebCore::MediaKeySystemRequest *this)
{
  return MEMORY[0x1F41757E0](this);
}

uint64_t WebCore::NetworkStorageSession::hasCookies()
{
  return MEMORY[0x1F41757E8]();
}

uint64_t WebCore::NetworkStorageSession::cookieStorage(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1F41757F8](this);
}

uint64_t WebCore::NetworkStorageSession::cookiesForDOM()
{
  return MEMORY[0x1F4175800]();
}

uint64_t WebCore::NetworkStorageSession::getRawCookies()
{
  return MEMORY[0x1F4175808]();
}

uint64_t WebCore::NetworkStorageSession::cookiesEnabled()
{
  return MEMORY[0x1F4175810]();
}

uint64_t WebCore::NetworkStorageSession::nsCookieStorage(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1F4175818](this);
}

uint64_t WebCore::NetworkStorageSession::hasStorageAccess()
{
  return MEMORY[0x1F4175820]();
}

uint64_t WebCore::NetworkStorageSession::setCookieFromDOM()
{
  return MEMORY[0x1F4175828]();
}

uint64_t WebCore::NetworkStorageSession::setCookiesFromDOM()
{
  return MEMORY[0x1F4175830]();
}

uint64_t WebCore::NetworkStorageSession::cookieAcceptPolicy(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1F4175838](this);
}

uint64_t WebCore::NetworkStorageSession::shouldBlockCookies()
{
  return MEMORY[0x1F4175840]();
}

{
  return MEMORY[0x1F4175848]();
}

uint64_t WebCore::NetworkStorageSession::cookiesForDOMAsVector()
{
  return MEMORY[0x1F4175850]();
}

uint64_t WebCore::NetworkStorageSession::getAllStorageAccessEntries(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1F4175860](this);
}

uint64_t WebCore::NetworkStorageSession::shouldBlockThirdPartyCookies()
{
  return MEMORY[0x1F4175868]();
}

uint64_t WebCore::NetworkStorageSession::cookieRequestHeaderFieldValue()
{
  return MEMORY[0x1F4175870]();
}

uint64_t WebCore::NetworkStorageSession::trackingPreventionDebugLoggingEnabled(WebCore::NetworkStorageSession *this)
{
  return MEMORY[0x1F4175880](this);
}

uint64_t WebCore::NetworkStorageSession::shouldBlockThirdPartyCookiesButKeepFirstPartyCookiesFor()
{
  return MEMORY[0x1F4175888]();
}

uint64_t WebCore::RemoteCommandListener::supportsSeeking(WebCore::RemoteCommandListener *this)
{
  return MEMORY[0x1F4175890](this);
}

uint64_t WebCore::RemoteCommandListener::supportedCommands(WebCore::RemoteCommandListener *this)
{
  return MEMORY[0x1F4175898](this);
}

uint64_t WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>::closestSnapOffset<WebCore::FloatSize,WebCore::FloatPoint>()
{
  return MEMORY[0x1F41758A0]();
}

uint64_t WebCore::ShareableBitmapHandle::setOwnershipOfMemory()
{
  return MEMORY[0x1F41758A8]();
}

uint64_t WebCore::ShareableBitmapHandle::takeOwnershipOfMemory()
{
  return MEMORY[0x1F41758B0]();
}

uint64_t WebCore::UserContentURLPattern::matchesHost(WebCore::UserContentURLPattern *this, const WTF::String *a2)
{
  return MEMORY[0x1F41758B8](this, a2);
}

uint64_t WebCore::UserContentURLPattern::matchesPath(WebCore::UserContentURLPattern *this, const WTF::String *a2)
{
  return MEMORY[0x1F41758C0](this, a2);
}

uint64_t WebCore::UserContentURLPattern::matchesScheme(WebCore::UserContentURLPattern *this, const WTF::URL *a2)
{
  return MEMORY[0x1F41758D0](this, a2);
}

uint64_t WebCore::UserContentURLPattern::matchesScheme(WebCore::UserContentURLPattern *this, const WebCore::UserContentURLPattern *a2)
{
  return MEMORY[0x1F41758D8](this, a2);
}

uint64_t WebCore::ViewportConfiguration::layoutSize(WebCore::ViewportConfiguration *this)
{
  return MEMORY[0x1F41758E8](this);
}

uint64_t WebCore::ViewportConfiguration::layoutWidth(WebCore::ViewportConfiguration *this)
{
  return MEMORY[0x1F41758F0](this);
}

uint64_t WebCore::ViewportConfiguration::initialScale(WebCore::ViewportConfiguration *this)
{
  return MEMORY[0x1F41758F8](this);
}

uint64_t WebCore::ViewportConfiguration::minimumScale(WebCore::ViewportConfiguration *this)
{
  return MEMORY[0x1F4175900](this);
}

uint64_t WebCore::ViewportConfiguration::allowsUserScaling(WebCore::ViewportConfiguration *this)
{
  return MEMORY[0x1F4175908](this);
}

uint64_t WebCore::ViewportConfiguration::initialScaleIgnoringContentSize(WebCore::ViewportConfiguration *this)
{
  return MEMORY[0x1F4175910](this);
}

uint64_t WebCore::ViewportConfiguration::allowsUserScalingIgnoringAlwaysScalable(WebCore::ViewportConfiguration *this)
{
  return MEMORY[0x1F4175918](this);
}

uint64_t WebCore::WheelEventDeltaFilter::eventCopyWithVelocity()
{
  return MEMORY[0x1F4175920]();
}

uint64_t WebCore::WorkerOrWorkletThread::isCurrent(WebCore::WorkerOrWorkletThread *this)
{
  return MEMORY[0x1F4175928](this);
}

uint64_t WebCore::AcceleratedEffectStack::hasEffects(WebCore::AcceleratedEffectStack *this)
{
  return MEMORY[0x1F4175930](this);
}

uint64_t WebCore::DefaultFilterOperation::representedType(WebCore::DefaultFilterOperation *this)
{
  return MEMORY[0x1F4175938](this);
}

uint64_t WebCore::FontCustomPlatformData::serializedData(WebCore::FontCustomPlatformData *this)
{
  return MEMORY[0x1F4175940](this);
}

uint64_t WebCore::FragmentedSharedBuffer::forEachSegment()
{
  return MEMORY[0x1F4175948]();
}

uint64_t WebCore::FragmentedSharedBuffer::makeContiguous(WebCore::FragmentedSharedBuffer *this)
{
  return MEMORY[0x1F4175950](this);
}

uint64_t WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(WebCore::FragmentedSharedBuffer *this)
{
  return MEMORY[0x1F4175960](this);
}

uint64_t WebCore::FragmentedSharedBuffer::forEachSegmentAsSharedBuffer()
{
  return MEMORY[0x1F4175968]();
}

uint64_t WebCore::FragmentedSharedBuffer::toIPCData(WebCore::FragmentedSharedBuffer *this)
{
  return MEMORY[0x1F4175978](this);
}

uint64_t WebCore::HTMLFormControlElement::autofillData(WebCore::HTMLFormControlElement *this)
{
  return MEMORY[0x1F41759A0](this);
}

uint64_t WebCore::HTMLFormControlElement::shouldAutocorrect(WebCore::HTMLFormControlElement *this)
{
  return MEMORY[0x1F41759A8](this);
}

uint64_t WebCore::HTMLFormControlElement::autocapitalizeType(WebCore::HTMLFormControlElement *this)
{
  return MEMORY[0x1F41759B0](this);
}

uint64_t WebCore::ResourceLoadStatistics::toString(WebCore::ResourceLoadStatistics *this)
{
  return MEMORY[0x1F41759C0](this);
}

uint64_t WebCore::ScriptExecutionContext::globalObject(WebCore::ScriptExecutionContext *this)
{
  return MEMORY[0x1F41759C8](this);
}

uint64_t WebCore::AcceleratedEffectValues::computedTransformationMatrix(WebCore::AcceleratedEffectValues *this, const WebCore::FloatRect *a2)
{
  return MEMORY[0x1F41759D8](this, a2);
}

uint64_t WebCore::AcceleratedEffectValues::clone(WebCore::AcceleratedEffectValues *this)
{
  return MEMORY[0x1F41759E0](this);
}

uint64_t WebCore::FrameLoaderStateMachine::isDisplayingInitialEmptyDocument(WebCore::FrameLoaderStateMachine *this)
{
  return MEMORY[0x1F41759F8](this);
}

uint64_t WebCore::PrivateClickMeasurement::tokenPublicKeyURL(WebCore::PrivateClickMeasurement *this)
{
  return MEMORY[0x1F4175A00](this);
}

uint64_t WebCore::PrivateClickMeasurement::tokenSignatureURL(WebCore::PrivateClickMeasurement *this)
{
  return MEMORY[0x1F4175A08](this);
}

uint64_t WebCore::PrivateClickMeasurement::tokenSignatureJSON(WebCore::PrivateClickMeasurement *this)
{
  return MEMORY[0x1F4175A10](this);
}

uint64_t WebCore::PrivateClickMeasurement::attributionReportJSON(WebCore::PrivateClickMeasurement *this)
{
  return MEMORY[0x1F4175A18](this);
}

uint64_t WebCore::PrivateClickMeasurement::hasHigherPriorityThan(WebCore::PrivateClickMeasurement *this, const WebCore::PrivateClickMeasurement *a2)
{
  return MEMORY[0x1F4175A20](this, a2);
}

uint64_t WebCore::PrivateClickMeasurement::attributionReportClickSourceURL(WebCore::PrivateClickMeasurement *this)
{
  return MEMORY[0x1F4175A28](this);
}

uint64_t WebCore::PrivateClickMeasurement::attributionReportClickDestinationURL(WebCore::PrivateClickMeasurement *this)
{
  return MEMORY[0x1F4175A30](this);
}

uint64_t WebCore::SpeechRecognitionUpdate::error(WebCore::SpeechRecognitionUpdate *this)
{
  return MEMORY[0x1F4175A38](this);
}

uint64_t WebCore::SpeechRecognitionUpdate::result(WebCore::SpeechRecognitionUpdate *this)
{
  return MEMORY[0x1F4175A40](this);
}

uint64_t WebCore::CAAudioStreamDescription::sampleRate(WebCore::CAAudioStreamDescription *this)
{
  return MEMORY[0x1F4175A48](this);
}

uint64_t WebCore::CAAudioStreamDescription::bytesPerFrame(WebCore::CAAudioStreamDescription *this)
{
  return MEMORY[0x1F4175A50](this);
}

uint64_t WebCore::CAAudioStreamDescription::numberOfChannelStreams(WebCore::CAAudioStreamDescription *this)
{
  return MEMORY[0x1F4175A60](this);
}

uint64_t WebCore::CAAudioStreamDescription::operator==()
{
  return MEMORY[0x1F4175A68]();
}

uint64_t WebCore::CachedResourceHandleBase::get(WebCore::CachedResourceHandleBase *this)
{
  return MEMORY[0x1F4175A70](this);
}

uint64_t WebCore::DocumentMarkerController::markersFor()
{
  return MEMORY[0x1F4175A78]();
}

uint64_t WebCore::AsyncScrollingCoordinator::frameViewForScrollingNode()
{
  return MEMORY[0x1F4175A80]();
}

uint64_t WebCore::PlatformSpeechSynthesizer::voiceList(WebCore::PlatformSpeechSynthesizer *this)
{
  return MEMORY[0x1F4175A88](this);
}

uint64_t WebCore::WebSocketChannelInspector::didCloseWebSocket(WebCore::WebSocketChannelInspector *this)
{
  return MEMORY[0x1F4175A90](this);
}

uint64_t WebCore::WebSocketChannelInspector::didCreateWebSocket(WebCore::WebSocketChannelInspector *this, const WTF::URL *a2)
{
  return MEMORY[0x1F4175A98](this, a2);
}

uint64_t WebCore::WebSocketChannelInspector::didSendWebSocketFrame()
{
  return MEMORY[0x1F4175AA8]();
}

uint64_t WebCore::WebSocketChannelInspector::willSendWebSocketHandshakeRequest(WebCore::WebSocketChannelInspector *this, const WebCore::ResourceRequest *a2)
{
  return MEMORY[0x1F4175AB0](this, a2);
}

uint64_t WebCore::WebSocketChannelInspector::didReceiveWebSocketHandshakeResponse(WebCore::WebSocketChannelInspector *this, const WebCore::ResourceResponse *a2)
{
  return MEMORY[0x1F4175AB8](this, a2);
}

uint64_t WebCore::HTMLTextFormControlElement::lastChangeWasUserEdit(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1F4175AD8](this);
}

uint64_t WebCore::HTMLTextFormControlElement::visiblePositionForIndex(WebCore::HTMLTextFormControlElement *this)
{
  return MEMORY[0x1F4175AE0](this);
}

uint64_t WebCore::MediaRecorderPrivateWriter::audioBitRate(WebCore::MediaRecorderPrivateWriter *this)
{
  return MEMORY[0x1F4175AE8](this);
}

uint64_t WebCore::MediaRecorderPrivateWriter::videoBitRate(WebCore::MediaRecorderPrivateWriter *this)
{
  return MEMORY[0x1F4175AF0](this);
}

uint64_t WebCore::MediaRecorderPrivateWriter::mimeType(WebCore::MediaRecorderPrivateWriter *this)
{
  return MEMORY[0x1F4175AF8](this);
}

uint64_t WebCore::MediaTrackConstraintSetMap::isValid(WebCore::MediaTrackConstraintSetMap *this)
{
  return MEMORY[0x1F4175B00](this);
}

uint64_t WebCore::ScrollingTreeScrollingNode::snapOffsetsInfo(WebCore::ScrollingTreeScrollingNode *this)
{
  return MEMORY[0x1F4175B08](this);
}

uint64_t WebCore::ScrollingTreeScrollingNode::currentVerticalSnapPointIndex(WebCore::ScrollingTreeScrollingNode *this)
{
  return MEMORY[0x1F4175B10](this);
}

uint64_t WebCore::ScrollingTreeScrollingNode::currentHorizontalSnapPointIndex(WebCore::ScrollingTreeScrollingNode *this)
{
  return MEMORY[0x1F4175B18](this);
}

uint64_t WebCore::SharedWorkerContextManager::connection(WebCore::SharedWorkerContextManager *this)
{
  return MEMORY[0x1F4175B20](this);
}

uint64_t WebCore::ValidatedFormListedElement::isFocusingWithValidationMessage(WebCore::ValidatedFormListedElement *this)
{
  return MEMORY[0x1F4175B30](this);
}

uint64_t WebCore::AuthenticationChallengeBase::failureResponse(WebCore::AuthenticationChallengeBase *this)
{
  return MEMORY[0x1F4175B38](this);
}

uint64_t WebCore::AuthenticationChallengeBase::protectionSpace(WebCore::AuthenticationChallengeBase *this)
{
  return MEMORY[0x1F4175B40](this);
}

uint64_t WebCore::AuthenticationChallengeBase::proposedCredential(WebCore::AuthenticationChallengeBase *this)
{
  return MEMORY[0x1F4175B48](this);
}

uint64_t WebCore::AuthenticationChallengeBase::previousFailureCount(WebCore::AuthenticationChallengeBase *this)
{
  return MEMORY[0x1F4175B50](this);
}

uint64_t WebCore::AuthenticationChallengeBase::error(WebCore::AuthenticationChallengeBase *this)
{
  return MEMORY[0x1F4175B58](this);
}

uint64_t WebCore::ContentFilterUnblockHandler::needsUIProcess(WebCore::ContentFilterUnblockHandler *this)
{
  return MEMORY[0x1F4175B60](this);
}

uint64_t WebCore::ContentFilterUnblockHandler::canHandleRequest(WebCore::ContentFilterUnblockHandler *this, const WebCore::ResourceRequest *a2)
{
  return MEMORY[0x1F4175B68](this, a2);
}

uint64_t WebCore::ContentFilterUnblockHandler::requestUnblockAsync()
{
  return MEMORY[0x1F4175B70]();
}

uint64_t WebCore::ContentFilterUnblockHandler::webFilterEvaluatorData(WebCore::ContentFilterUnblockHandler *this)
{
  return MEMORY[0x1F4175B78](this);
}

uint64_t WebCore::PlaybackSessionInterfaceIOS::playbackSessionModel(WebCore::PlaybackSessionInterfaceIOS *this)
{
  return MEMORY[0x1F4175B80](this);
}

uint64_t WebCore::RealtimeMediaSourceSettings::difference()
{
  return MEMORY[0x1F4175B88]();
}

uint64_t WebCore::SWServerToContextConnection::server(WebCore::SWServerToContextConnection *this)
{
  return MEMORY[0x1F4175B90](this);
}

uint64_t WebCore::ServiceWorkerRegistrationKey::clientOrigin(WebCore::ServiceWorkerRegistrationKey *this)
{
  return MEMORY[0x1F4175B98](this);
}

uint64_t WebCore::TextTrackRepresentationCocoa::setHidden(WebCore::TextTrackRepresentationCocoa *this)
{
  return MEMORY[0x1F4175BA0](this);
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::didFail(WebCore::LocalSampleBufferDisplayLayer *this)
{
  return MEMORY[0x1F4175BD8](this);
}

uint64_t WebCore::PushSubscriptionSetIdentifier::debugDescription(WebCore::PushSubscriptionSetIdentifier *this)
{
  return MEMORY[0x1F4175BE0](this);
}

uint64_t WebCore::VideoPresentationInterfaceIOS::playerIdentifier(WebCore::VideoPresentationInterfaceIOS *this)
{
  return MEMORY[0x1F4175BE8](this);
}

uint64_t WebCore::MediaPlaybackTargetContextCocoa::outputContext(WebCore::MediaPlaybackTargetContextCocoa *this)
{
  return MEMORY[0x1F4175BF0](this);
}

uint64_t WebCore::PaymentInstallmentConfiguration::platformConfiguration(WebCore::PaymentInstallmentConfiguration *this)
{
  return MEMORY[0x1F4175BF8](this);
}

uint64_t WebCore::PaymentInstallmentConfiguration::applePayInstallmentConfiguration(WebCore::PaymentInstallmentConfiguration *this)
{
  return MEMORY[0x1F4175C00](this);
}

uint64_t WebCore::VideoPresentationInterfaceAVKit::avPlayerViewController(WebCore::VideoPresentationInterfaceAVKit *this)
{
  return MEMORY[0x1F4175C28](this);
}

uint64_t WebCore::VideoPresentationInterfaceAVKit::mayAutomaticallyShowVideoPictureInPicture(WebCore::VideoPresentationInterfaceAVKit *this)
{
  return MEMORY[0x1F4175C30](this);
}

uint64_t WebCore::PlaybackSessionModelMediaElement::legibleMediaSelectedIndex(WebCore::PlaybackSessionModelMediaElement *this)
{
  return MEMORY[0x1F4175C40](this);
}

uint64_t WebCore::ScrollingStateFrameScrollingNode::isMainFrame(WebCore::ScrollingStateFrameScrollingNode *this)
{
  return MEMORY[0x1F4175C48](this);
}

uint64_t WebCore::ApplePayPaymentAuthorizationResult::isFinalState(WebCore::ApplePayPaymentAuthorizationResult *this)
{
  return MEMORY[0x1F4175C58](this);
}

uint64_t WebCore::ScrollingTreeScrollingNodeDelegate::scrollOrigin(WebCore::ScrollingTreeScrollingNodeDelegate *this)
{
  return MEMORY[0x1F4175C60](this);
}

uint64_t WebCore::ScrollingTreeScrollingNodeDelegate::scrollingTree(WebCore::ScrollingTreeScrollingNodeDelegate *this)
{
  return MEMORY[0x1F4175C68](this);
}

uint64_t WebCore::VideoPresentationModelVideoElement::logIdentifier(WebCore::VideoPresentationModelVideoElement *this)
{
  return MEMORY[0x1F4175C70](this);
}

uint64_t WebCore::AuthenticationExtensionsClientInputs::toCBOR(WebCore::AuthenticationExtensionsClientInputs *this)
{
  return MEMORY[0x1F4175C78](this);
}

uint64_t WebCore::AuthenticationExtensionsClientOutputs::toCBOR(WebCore::AuthenticationExtensionsClientOutputs *this)
{
  return MEMORY[0x1F4175C80](this);
}

uint64_t WebCore::PCM::AttributionTriggerData::tokenPublicKeyURL(WebCore::PCM::AttributionTriggerData *this)
{
  return MEMORY[0x1F4175C88](this);
}

uint64_t WebCore::PCM::AttributionTriggerData::tokenSignatureURL(WebCore::PCM::AttributionTriggerData *this)
{
  return MEMORY[0x1F4175C90](this);
}

uint64_t WebCore::PCM::AttributionTriggerData::tokenSignatureJSON(WebCore::PCM::AttributionTriggerData *this)
{
  return MEMORY[0x1F4175C98](this);
}

uint64_t WebCore::Blob::size(WebCore::Blob *this)
{
  return MEMORY[0x1F4175CA8](this);
}

uint64_t WebCore::Font::renderingResourceIdentifier(WebCore::Font *this)
{
  return MEMORY[0x1F4175CB8](this);
}

uint64_t WebCore::Node::shadowHost(WebCore::Node *this)
{
  return MEMORY[0x1F4175CC0](this);
}

uint64_t WebCore::Node::textContent(WebCore::Node *this)
{
  return MEMORY[0x1F4175CD0](this);
}

uint64_t WebCore::Node::isContentEditable(WebCore::Node *this)
{
  return MEMORY[0x1F4175CE0](this);
}

uint64_t WebCore::Node::computeEditability()
{
  return MEMORY[0x1F4175CE8]();
}

uint64_t WebCore::Node::rootEditableElement(WebCore::Node *this)
{
  return MEMORY[0x1F4175D08](this);
}

uint64_t WebCore::Node::containsIncludingShadowDOM(WebCore::Node *this, const WebCore::Node *a2)
{
  return MEMORY[0x1F4175D18](this, a2);
}

uint64_t WebCore::Node::parentElementInComposedTree(WebCore::Node *this)
{
  return MEMORY[0x1F4175D20](this);
}

uint64_t WebCore::Node::willRespondToMouseClickEvents(WebCore::Node *this, const WebCore::RenderStyle *a2)
{
  return MEMORY[0x1F4175D28](this, a2);
}

uint64_t WebCore::Node::isDescendantOrShadowDescendantOf(WebCore::Node *this, const WebCore::Node *a2)
{
  return MEMORY[0x1F4175D30](this, a2);
}

uint64_t WebCore::Page::themeColor(WebCore::Page *this)
{
  return MEMORY[0x1F4175D50](this);
}

uint64_t WebCore::Page::renderTreeSize(WebCore::Page *this)
{
  return MEMORY[0x1F4175D60](this);
}

uint64_t WebCore::Page::forEachDocument()
{
  return MEMORY[0x1F4175D68]();
}

uint64_t WebCore::Page::allowsLoadFromURL()
{
  return MEMORY[0x1F4175D78]();
}

uint64_t WebCore::Page::isVisibleAndActive(WebCore::Page *this)
{
  return MEMORY[0x1F4175D88](this);
}

uint64_t WebCore::Page::protectedMainFrame(WebCore::Page *this)
{
  return MEMORY[0x1F4175D90](this);
}

uint64_t WebCore::Page::sampledPageTopColor(WebCore::Page *this)
{
  return MEMORY[0x1F4175D98](this);
}

uint64_t WebCore::Page::accessibilityTreeData(WebCore::Page *this)
{
  return MEMORY[0x1F4175DA0](this);
}

uint64_t WebCore::Page::wheelEventTestMonitor(WebCore::Page *this)
{
  return MEMORY[0x1F4175DA8](this);
}

uint64_t WebCore::Page::checkedFocusController(WebCore::Page *this)
{
  return MEMORY[0x1F4175DB0](this);
}

uint64_t WebCore::Page::editableElementsInRect(WebCore::Page *this, const WebCore::FloatRect *a2)
{
  return MEMORY[0x1F4175DB8](this, a2);
}

uint64_t WebCore::Page::diagnosticLoggingClient(WebCore::Page *this)
{
  return MEMORY[0x1F4175DC0](this);
}

uint64_t WebCore::Page::isMonitoringWheelEvents(WebCore::Page *this)
{
  return MEMORY[0x1F4175DC8](this);
}

uint64_t WebCore::Page::isAlwaysOnLoggingAllowed(WebCore::Page *this)
{
  return MEMORY[0x1F4175DD0](this);
}

uint64_t WebCore::Page::logMediaDiagnosticMessage()
{
  return MEMORY[0x1F4175DD8]();
}

uint64_t WebCore::Page::isFullscreenManagerEnabled(WebCore::Page *this)
{
  return MEMORY[0x1F4175DE0](this);
}

uint64_t WebCore::Page::pageExtendedBackgroundColor(WebCore::Page *this)
{
  return MEMORY[0x1F4175DE8](this);
}

uint64_t WebCore::Page::hasCachedTextRecognitionResult(WebCore::Page *this, const WebCore::HTMLElement *a2)
{
  return MEMORY[0x1F4175DF0](this, a2);
}

uint64_t WebCore::Page::preferredRenderingUpdateInterval(WebCore::Page *this)
{
  return MEMORY[0x1F4175DF8](this);
}

uint64_t WebCore::Page::reloadExecutionContextsForOrigin()
{
  return MEMORY[0x1F4175E00]();
}

uint64_t WebCore::Page::pageCountAssumingLayoutIsUpToDate(WebCore::Page *this)
{
  return MEMORY[0x1F4175E08](this);
}

uint64_t WebCore::Page::preferredRenderingUpdateFramesPerSecond()
{
  return MEMORY[0x1F4175E20]();
}

uint64_t WebCore::Page::contextRangeForActiveWritingToolsSession(WebCore::Page *this)
{
  return MEMORY[0x1F4175E28](this);
}

uint64_t WebCore::Page::proofreadingSessionSuggestionTextRectsInRootViewCoordinates()
{
  return MEMORY[0x1F4175E30]();
}

uint64_t WebCore::Page::selection(WebCore::Page *this)
{
  return MEMORY[0x1F4175E48](this);
}

uint64_t WebCore::Path::platformPath(WebCore::Path *this)
{
  return MEMORY[0x1F4175E58](this);
}

uint64_t WebCore::Path::fastBoundingRect(WebCore::Path *this)
{
  return MEMORY[0x1F4175E60](this);
}

uint64_t WebCore::Path::isEmpty(WebCore::Path *this)
{
  return MEMORY[0x1F4175E68](this);
}

uint64_t WebCore::Path::segments(WebCore::Path *this)
{
  return MEMORY[0x1F4175E70](this);
}

uint64_t WebCore::Color::data(WebCore::Color *this)
{
  return MEMORY[0x1F4175E80](this);
}

uint64_t WebCore::Color::lightness(WebCore::Color *this)
{
  return MEMORY[0x1F4175E88](this);
}

uint64_t WebCore::Frame::ownerRenderer(WebCore::Frame *this)
{
  return MEMORY[0x1F4175E90](this);
}

uint64_t WebCore::Frame::checkedHistory(WebCore::Frame *this)
{
  return MEMORY[0x1F4175E98](this);
}

uint64_t WebCore::Frame::ownerPermissionsPolicy(WebCore::Frame *this)
{
  return MEMORY[0x1F4175EA0](this);
}

uint64_t WebCore::Frame::pageID(WebCore::Frame *this)
{
  return MEMORY[0x1F4175EA8](this);
}

uint64_t WebCore::Image::toShareableBitmap(WebCore::Image *this)
{
  return MEMORY[0x1F4175EB0](this);
}

uint64_t WebCore::Image::mimeType(WebCore::Image *this)
{
  return MEMORY[0x1F4175EB8](this);
}

uint64_t WebCore::Chrome::windowRect(WebCore::Chrome *this)
{
  return MEMORY[0x1F4175EF8](this);
}

uint64_t WebCore::Cookie::operator NSHTTPCookie *()
{
  return MEMORY[0x1F4175F00]();
}

uint64_t WebCore::Cursor::platformCursor(WebCore::Cursor *this)
{
  return MEMORY[0x1F4175F08](this);
}

uint64_t WebCore::Editor::selectedText(WebCore::Editor *this)
{
  return MEMORY[0x1F4175F18](this);
}

uint64_t WebCore::Editor::compositionRange(WebCore::Editor *this)
{
  return MEMORY[0x1F4175F28](this);
}

uint64_t WebCore::Editor::firstRectForRange()
{
  return MEMORY[0x1F4175F30]();
}

uint64_t WebCore::Editor::nodeBeforeWritingSuggestions(WebCore::Editor *this)
{
  return MEMORY[0x1F4175F38](this);
}

uint64_t WebCore::Editor::applyEditingStyleToBodyElement(WebCore::Editor *this)
{
  return MEMORY[0x1F4175F40](this);
}

uint64_t WebCore::Editor::baseWritingDirectionForSelectionStart(WebCore::Editor *this)
{
  return MEMORY[0x1F4175F48](this);
}

uint64_t WebCore::Editor::canCut(WebCore::Editor *this)
{
  return MEMORY[0x1F4175F50](this);
}

uint64_t WebCore::Editor::client(WebCore::Editor *this)
{
  return MEMORY[0x1F4175F58](this);
}

uint64_t WebCore::Editor::Command::isSupported(WebCore::Editor::Command *this)
{
  return MEMORY[0x1F4175F60](this);
}

uint64_t WebCore::Editor::Command::state()
{
  return MEMORY[0x1F4175F68]();
}

uint64_t WebCore::Editor::Command::execute()
{
  return MEMORY[0x1F4175F78]();
}

uint64_t WebCore::Editor::Command::isEnabled()
{
  return MEMORY[0x1F4175F80]();
}

uint64_t WebCore::Editor::canCopy(WebCore::Editor *this)
{
  return MEMORY[0x1F4175F88](this);
}

uint64_t WebCore::Editor::canEdit(WebCore::Editor *this)
{
  return MEMORY[0x1F4175F90](this);
}

uint64_t WebCore::Length::nonNanCalculatedValue(WebCore::Length *this, float a2)
{
  return MEMORY[0x1F4175F98](this, a2);
}

uint64_t WebCore::Length::ref(WebCore::Length *this)
{
  return MEMORY[0x1F4175FA0](this);
}

uint64_t WebCore::Length::deref(WebCore::Length *this)
{
  return MEMORY[0x1F4175FA8](this);
}

uint64_t WebCore::Length::ipcData(WebCore::Length *this)
{
  return MEMORY[0x1F4175FB0](this);
}

uint64_t WebCore::Quirks::needsYouTubeMouseOutQuirk(WebCore::Quirks *this)
{
  return MEMORY[0x1F4175FB8](this);
}

uint64_t WebCore::Quirks::allowLayeredFullscreenVideos(WebCore::Quirks *this)
{
  return MEMORY[0x1F4175FC0](this);
}

uint64_t WebCore::Quirks::shouldAvoidResizingWhenInputViewBoundsChange(WebCore::Quirks *this)
{
  return MEMORY[0x1F4175FC8](this);
}

uint64_t WebCore::Quirks::shouldAvoidScrollingWhenFocusedContentIsVisible(WebCore::Quirks *this)
{
  return MEMORY[0x1F4175FD0](this);
}

uint64_t WebCore::Quirks::blocksReturnToFullscreenFromPictureInPictureQuirk(WebCore::Quirks *this)
{
  return MEMORY[0x1F4175FD8](this);
}

uint64_t WebCore::Quirks::shouldIgnoreViewportArgumentsToAvoidExcessiveZoom(WebCore::Quirks *this)
{
  return MEMORY[0x1F4175FE0](this);
}

uint64_t WebCore::Quirks::shouldUseEphemeralPartitionedStorageForDOMCookies(WebCore::Quirks *this, const WTF::URL *a2)
{
  return MEMORY[0x1F4175FE8](this, a2);
}

uint64_t WebCore::Quirks::shouldIgnoreAriaForFastPathContentObservationCheck(WebCore::Quirks *this)
{
  return MEMORY[0x1F4175FF0](this);
}

uint64_t WebCore::Quirks::shouldDispatchSyntheticMouseEventsWhenModifyingSelection(WebCore::Quirks *this)
{
  return MEMORY[0x1F4175FF8](this);
}

uint64_t WebCore::Quirks::blocksEnteringStandardFullscreenFromPictureInPictureQuirk(WebCore::Quirks *this)
{
  return MEMORY[0x1F4176000](this);
}

uint64_t WebCore::Quirks::shouldUseLegacySelectPopoverDismissalBehaviorInDataActivation(WebCore::Quirks *this)
{
  return MEMORY[0x1F4176008](this);
}

uint64_t WebCore::Quirks::shouldLayOutAtMinimumWindowWidthWhenIgnoringScalingConstraints(WebCore::Quirks *this)
{
  return MEMORY[0x1F4176010](this);
}

uint64_t WebCore::Quirks::shouldSuppressAutocorrectionAndAutocapitalizationInHiddenEditableAreas(WebCore::Quirks *this)
{
  return MEMORY[0x1F4176018](this);
}

uint64_t WebCore::Region::intersects(WebCore::Region *this, const WebCore::Region *a2)
{
  return MEMORY[0x1F4176020](this, a2);
}

uint64_t WebCore::Region::rects(WebCore::Region *this)
{
  return MEMORY[0x1F4176028](this);
}

uint64_t WebCore::Region::contains(WebCore::Region *this, const WebCore::IntPoint *a2)
{
  return MEMORY[0x1F4176030](this, a2);
}

uint64_t WebCore::Region::contains(WebCore::Region *this, const WebCore::Region *a2)
{
  return MEMORY[0x1F4176038](this, a2);
}

uint64_t WebCore::Region::totalArea(WebCore::Region *this)
{
  return MEMORY[0x1F4176040](this);
}

uint64_t WebCore::Report::url(WebCore::Report *this)
{
  return MEMORY[0x1F4176048](this);
}

uint64_t WebCore::Report::body(WebCore::Report *this)
{
  return MEMORY[0x1F4176050](this);
}

uint64_t WebCore::Report::type(WebCore::Report *this)
{
  return MEMORY[0x1F4176058](this);
}

uint64_t WebCore::Widget::protectedParent(WebCore::Widget *this)
{
  return MEMORY[0x1F4176068](this);
}

uint64_t WebCore::Widget::parent(WebCore::Widget *this)
{
  return MEMORY[0x1F4176070](this);
}

uint64_t WebCore::Widget::frameRect(WebCore::Widget *this)
{
  return MEMORY[0x1F4176078](this);
}

uint64_t WebCore::Element::identifier(WebCore::Element *this)
{
  return MEMORY[0x1F4176090](this);
}

uint64_t WebCore::Element::screenRect(WebCore::Element *this)
{
  return MEMORY[0x1F4176098](this);
}

uint64_t WebCore::Element::getAttribute(WebCore::Element *this, const AtomString *a2)
{
  return MEMORY[0x1F41760A0](this, a2);
}

uint64_t WebCore::Element::getAttribute(WebCore::Element *this, const WebCore::QualifiedName *a2)
{
  return MEMORY[0x1F41760A8](this, a2);
}

uint64_t WebCore::Element::hasAttribute(WebCore::Element *this, const AtomString *a2)
{
  return MEMORY[0x1F41760B0](this, a2);
}

uint64_t WebCore::Element::absoluteLinkURL(WebCore::Element *this)
{
  return MEMORY[0x1F41760D0](this);
}

uint64_t WebCore::Element::getURLAttribute(WebCore::Element *this, const WebCore::QualifiedName *a2)
{
  return MEMORY[0x1F41760D8](this, a2);
}

uint64_t WebCore::Element::userAgentShadowRoot(WebCore::Element *this)
{
  return MEMORY[0x1F41760E0](this);
}

uint64_t WebCore::Element::isWritingSuggestionsEnabled(WebCore::Element *this)
{
  return MEMORY[0x1F41760F0](this);
}

uint64_t WebCore::Element::renderOrDisplayContentsStyle(WebCore::Element *this)
{
  return MEMORY[0x1F4176100](this);
}

uint64_t WebCore::Element::boundingBoxInRootViewCoordinates(WebCore::Element *this)
{
  return MEMORY[0x1F4176108](this);
}

uint64_t WebCore::Element::boundingAbsoluteRectWithoutLayout(WebCore::Element *this)
{
  return MEMORY[0x1F4176110](this);
}

uint64_t WebCore::IntRect::intersects(WebCore::IntRect *this, const WebCore::IntRect *a2)
{
  return MEMORY[0x1F4176128](this, a2);
}

uint64_t WebCore::IntRect::toRectWithExtentsClippedToNumericLimits(WebCore::IntRect *this)
{
  return MEMORY[0x1F4176130](this);
}

uint64_t WebCore::IntRect::isValid(WebCore::IntRect *this)
{
  return MEMORY[0x1F4176138](this);
}

uint64_t WebCore::IntRect::contains(WebCore::IntRect *this, const WebCore::IntRect *a2)
{
  return MEMORY[0x1F4176140](this, a2);
}

uint64_t WebCore::IntRect::operator CGRect()
{
  return MEMORY[0x1F4176148]();
}

uint64_t WebCore::IntSize::operator CGSize()
{
  return MEMORY[0x1F4176150]();
}

uint64_t WebCore::Payment::pkPayment(WebCore::Payment *this)
{
  return MEMORY[0x1F4176158](this);
}

uint64_t WebCore::Document::completeURL()
{
  return MEMORY[0x1F4176180]();
}

uint64_t WebCore::Document::topDocument(WebCore::Document *this)
{
  return MEMORY[0x1F4176198](this);
}

uint64_t WebCore::Document::axObjectCache(WebCore::Document *this)
{
  return MEMORY[0x1F41761B0](this);
}

uint64_t WebCore::Document::isTopDocument(WebCore::Document *this)
{
  return MEMORY[0x1F41761B8](this);
}

uint64_t WebCore::Document::bodyOrFrameset(WebCore::Document *this)
{
  return MEMORY[0x1F41761C0](this);
}

uint64_t WebCore::Document::parentDocument(WebCore::Document *this)
{
  return MEMORY[0x1F41761C8](this);
}

uint64_t WebCore::Document::urlForBindings(WebCore::Document *this)
{
  return MEMORY[0x1F41761D0](this);
}

uint64_t WebCore::Document::viewportArguments(WebCore::Document *this)
{
  return MEMORY[0x1F41761E0](this);
}

uint64_t WebCore::Document::isViewportDocument(WebCore::Document *this)
{
  return MEMORY[0x1F41761E8](this);
}

uint64_t WebCore::Document::endpointURIForToken(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1F41761F0](this, a2);
}

uint64_t WebCore::Document::attachmentForIdentifier(WebCore::Document *this, const WTF::String *a2)
{
  return MEMORY[0x1F4176208](this, a2);
}

uint64_t WebCore::Document::crossOriginOpenerPolicy(WebCore::Document *this)
{
  return MEMORY[0x1F4176210](this);
}

uint64_t WebCore::Document::shouldBypassMainWorldContentSecurityPolicy(WebCore::Document *this)
{
  return MEMORY[0x1F4176248](this);
}

uint64_t WebCore::Document::body(WebCore::Document *this)
{
  return MEMORY[0x1F4176250](this);
}

uint64_t WebCore::Document::loader(WebCore::Document *this)
{
  return MEMORY[0x1F4176268](this);
}

uint64_t WebCore::Document::pageID(WebCore::Document *this)
{
  return MEMORY[0x1F4176270](this);
}

uint64_t WebCore::Document::topOrigin(WebCore::Document *this)
{
  return MEMORY[0x1F41762A0](this);
}

uint64_t WebCore::FormData::isolatedCopy(WebCore::FormData *this)
{
  return MEMORY[0x1F41762B8](this);
}

uint64_t WebCore::FormData::lengthInBytes(WebCore::FormData *this)
{
  return MEMORY[0x1F41762C0](this);
}

uint64_t WebCore::FormData::asSharedBuffer(WebCore::FormData *this)
{
  return MEMORY[0x1F41762C8](this);
}

uint64_t WebCore::FormData::asBlobURL(WebCore::FormData *this)
{
  return MEMORY[0x1F41762D0](this);
}

uint64_t WebCore::IntPoint::constrainedWithin(WebCore::IntPoint *this, const WebCore::IntRect *a2)
{
  return MEMORY[0x1F41762E0](this, a2);
}

uint64_t WebCore::IntPoint::constrainedBetween(WebCore::IntPoint *this, const WebCore::IntPoint *a2, const WebCore::IntPoint *a3)
{
  return MEMORY[0x1F41762E8](this, a2, a3);
}

uint64_t WebCore::IntPoint::operator CGPoint()
{
  return MEMORY[0x1F41762F0]();
}

uint64_t WebCore::Position::downstream()
{
  return MEMORY[0x1F41762F8]();
}

uint64_t WebCore::Position::containerNode(WebCore::Position *this)
{
  return MEMORY[0x1F4176300](this);
}

uint64_t WebCore::Position::computeNodeAfterPosition(WebCore::Position *this)
{
  return MEMORY[0x1F4176308](this);
}

uint64_t WebCore::Position::computeNodeBeforePosition(WebCore::Position *this)
{
  return MEMORY[0x1F4176318](this);
}

uint64_t WebCore::Position::previous()
{
  return MEMORY[0x1F4176328]();
}

uint64_t WebCore::Position::upstream()
{
  return MEMORY[0x1F4176330]();
}

uint64_t WebCore::SWServer::workerByID()
{
  return MEMORY[0x1F4176338]();
}

uint64_t WebCore::SWServer::canHandleScheme()
{
  return MEMORY[0x1F4176340]();
}

uint64_t WebCore::SWServer::serviceWorkerClientWithOriginByID()
{
  return MEMORY[0x1F4176348]();
}

uint64_t WebCore::SWServer::advancedPrivacyProtectionsFromClient(WebCore::SWServer *this, const WebCore::ClientOrigin *a2)
{
  return MEMORY[0x1F4176350](this, a2);
}

uint64_t WebCore::SWServer::topLevelServiceWorkerClientFromPageIdentifier()
{
  return MEMORY[0x1F4176358]();
}

uint64_t WebCore::Settings::showDebugBorders(WebCore::Settings *this)
{
  return MEMORY[0x1F4176360](this);
}

uint64_t WebCore::Settings::showRepaintCounter(WebCore::Settings *this)
{
  return MEMORY[0x1F4176368](this);
}

uint64_t WebCore::FloatQuad::boundingBox(WebCore::FloatQuad *this)
{
  return MEMORY[0x1F4176378](this);
}

uint64_t WebCore::FloatQuad::containsQuad(WebCore::FloatQuad *this, const WebCore::FloatQuad *a2)
{
  return MEMORY[0x1F4176380](this, a2);
}

uint64_t WebCore::FloatQuad::containsPoint(WebCore::FloatQuad *this, const WebCore::FloatPoint *a2)
{
  return MEMORY[0x1F4176388](this, a2);
}

uint64_t WebCore::FloatQuad::isRectilinear(WebCore::FloatQuad *this)
{
  return MEMORY[0x1F4176390](this);
}

uint64_t WebCore::FloatRect::intersects(WebCore::FloatRect *this, const WebCore::FloatRect *a2)
{
  return MEMORY[0x1F4176398](this, a2);
}

uint64_t WebCore::FloatRect::toJSONString(WebCore::FloatRect *this)
{
  return MEMORY[0x1F41763A0](this);
}

uint64_t WebCore::FloatRect::inclusivelyIntersects(WebCore::FloatRect *this, const WebCore::FloatRect *a2)
{
  return MEMORY[0x1F41763A8](this, a2);
}

uint64_t WebCore::FloatRect::contains()
{
  return MEMORY[0x1F41763B0]();
}

uint64_t WebCore::FloatRect::operator CGRect()
{
  return MEMORY[0x1F41763B8]();
}

uint64_t WebCore::FloatSize::toJSONString(WebCore::FloatSize *this)
{
  return MEMORY[0x1F41763C0](this);
}

uint64_t WebCore::FloatSize::operator CGSize()
{
  return MEMORY[0x1F41763C8]();
}

uint64_t WebCore::FrameTree::childCount(WebCore::FrameTree *this)
{
  return MEMORY[0x1F41763D0](this);
}

uint64_t WebCore::FrameTree::uniqueName(WebCore::FrameTree *this)
{
  return MEMORY[0x1F41763D8](this);
}

uint64_t WebCore::FrameTree::scopedChild(WebCore::FrameTree *this)
{
  return MEMORY[0x1F41763E0](this);
}

uint64_t WebCore::FrameTree::traverseNext(WebCore::FrameTree *this, const WebCore::Frame *a2)
{
  return MEMORY[0x1F41763F0](this, a2);
}

uint64_t WebCore::FrameTree::isDescendantOf(WebCore::FrameTree *this, const WebCore::Frame *a2)
{
  return MEMORY[0x1F41763F8](this, a2);
}

uint64_t WebCore::FrameTree::findByUniqueName(WebCore::FrameTree *this, const AtomString *a2, WebCore::Frame *a3)
{
  return MEMORY[0x1F4176400](this, a2, a3);
}

uint64_t WebCore::FrameTree::traverseNextRendered(WebCore::FrameTree *this, const WebCore::Frame *a2)
{
  return MEMORY[0x1F4176410](this, a2);
}

uint64_t WebCore::FrameTree::scopedChildByUniqueName(WebCore::FrameTree *this, const AtomString *a2)
{
  return MEMORY[0x1F4176418](this, a2);
}

uint64_t WebCore::FrameTree::parent(WebCore::FrameTree *this)
{
  return MEMORY[0x1F4176420](this);
}

uint64_t WebCore::FrameView::topContentInset()
{
  return MEMORY[0x1F4176428]();
}

uint64_t WebCore::FrameView::convertFromContainingViewToRenderer(WebCore::FrameView *this, const WebCore::RenderElement *a2, const WebCore::IntRect *a3)
{
  return MEMORY[0x1F4176430](this, a2, a3);
}

uint64_t WebCore::FrameView::convertFromContainingViewToRenderer(WebCore::FrameView *this, const WebCore::RenderElement *a2, const WebCore::IntPoint *a3)
{
  return MEMORY[0x1F4176438](this, a2, a3);
}

uint64_t WebCore::FrameView::convertFromRendererToContainingView(WebCore::FrameView *this, const WebCore::RenderElement *a2, const WebCore::IntRect *a3)
{
  return MEMORY[0x1F4176440](this, a2, a3);
}

uint64_t WebCore::FrameView::convertFromRendererToContainingView(WebCore::FrameView *this, const WebCore::RenderElement *a2, const WebCore::IntPoint *a3)
{
  return MEMORY[0x1F4176448](this, a2, a3);
}

uint64_t WebCore::IDBServer::UniqueIDBDatabase::nameAndVersion(WebCore::IDBServer::UniqueIDBDatabase *this)
{
  return MEMORY[0x1F4176458](this);
}

uint64_t WebCore::IDBServer::UniqueIDBDatabase::hasDataInMemory(WebCore::IDBServer::UniqueIDBDatabase *this)
{
  return MEMORY[0x1F4176460](this);
}

uint64_t WebCore::IDBServer::UniqueIDBDatabase::filePath(WebCore::IDBServer::UniqueIDBDatabase *this)
{
  return MEMORY[0x1F4176468](this);
}

uint64_t WebCore::IDBServer::UniqueIDBDatabaseTransaction::isVersionChange(WebCore::IDBServer::UniqueIDBDatabaseTransaction *this)
{
  return MEMORY[0x1F4176470](this);
}

uint64_t WebCore::IOSurface::bytesPerRow(WebCore::IOSurface *this)
{
  return MEMORY[0x1F4176478](this);
}

uint64_t WebCore::IOSurface::createSendRight(WebCore::IOSurface *this)
{
  return MEMORY[0x1F4176480](this);
}

uint64_t WebCore::IOSurface::asCAIOSurfaceLayerContents(WebCore::IOSurface *this)
{
  return MEMORY[0x1F4176488](this);
}

uint64_t WebCore::IOSurface::isInUse(WebCore::IOSurface *this)
{
  return MEMORY[0x1F4176490](this);
}

uint64_t WebCore::IPAddress::isLoopback(WebCore::IPAddress *this)
{
  return MEMORY[0x1F4176498](this);
}

uint64_t WebCore::IPAddress::isolatedCopy(WebCore::IPAddress *this)
{
  return MEMORY[0x1F41764A0](this);
}

uint64_t WebCore::IPAddress::matchingNetMaskLength(WebCore::IPAddress *this, const WebCore::IPAddress *a2)
{
  return MEMORY[0x1F41764A8](this, a2);
}

uint64_t WebCore::LegacyCDM::mediaPlayer(WebCore::LegacyCDM *this)
{
  return MEMORY[0x1F41764B0](this);
}

uint64_t WebCore::LegacyCDM::supportsMIMEType(WebCore::LegacyCDM *this, const WTF::String *a2)
{
  return MEMORY[0x1F41764B8](this, a2);
}

uint64_t WebCore::RenderBox::borderRadii(WebCore::RenderBox *this)
{
  return MEMORY[0x1F41764D8](this);
}

uint64_t WebCore::RenderBox::clientWidth(WebCore::RenderBox *this)
{
  return MEMORY[0x1F41764E0](this);
}

uint64_t WebCore::RenderBox::clientHeight(WebCore::RenderBox *this)
{
  return MEMORY[0x1F41764E8](this);
}

uint64_t WebCore::RenderBox::absoluteContentQuad(WebCore::RenderBox *this)
{
  return MEMORY[0x1F41764F0](this);
}

uint64_t WebCore::RenderBox::flippedClientBoxRect(WebCore::RenderBox *this)
{
  return MEMORY[0x1F41764F8](this);
}

uint64_t WebCore::TimerBase::nextFireInterval(WebCore::TimerBase *this)
{
  return MEMORY[0x1F4176500](this);
}

uint64_t WebCore::TreeScope::getElementById(WebCore::TreeScope *this, const WTF::String *a2)
{
  return MEMORY[0x1F4176510](this, a2);
}

uint64_t Inspector::FrontendRouter::hasLocalFrontend(Inspector::FrontendRouter *this)
{
  return MEMORY[0x1F40ECC78](this);
}

uint64_t Inspector::FrontendRouter::sendEvent(Inspector::FrontendRouter *this, const WTF::String *a2)
{
  return MEMORY[0x1F40ECC88](this, a2);
}

uint64_t Inspector::ScriptCallStack::firstNonNativeCallFrame(Inspector::ScriptCallStack *this)
{
  return MEMORY[0x1F40ECCE8](this);
}

uint64_t Inspector::RemoteInspectionTarget::inspectable(Inspector::RemoteInspectionTarget *this)
{
  return MEMORY[0x1F40ECD28](this);
}

uint64_t WTF::URL::isolatedCopy()
{
  return MEMORY[0x1F40ECD30]();
}

{
  return MEMORY[0x1F40ECD40]();
}

uint64_t WTF::String::isolatedCopy()
{
  return MEMORY[0x1F40ECD38]();
}

{
  return MEMORY[0x1F40ECD48]();
}

uint64_t WebCore::SecurityOriginData::isolatedCopy()
{
  return MEMORY[0x1F4176530]();
}

{
  return MEMORY[0x1F4176558]();
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x1F417E360](retstr, this);
}

uint64_t WebCore::NotificationData::isolatedCopy()
{
  return MEMORY[0x1F4176538]();
}

uint64_t WebCore::ContentExtensions::Action::isolatedCopy()
{
  return MEMORY[0x1F4176540]();
}

uint64_t WebCore::ContentExtensions::Trigger::isolatedCopy()
{
  return MEMORY[0x1F4176548]();
}

uint64_t WebCore::ServiceWorkerData::isolatedCopy()
{
  return MEMORY[0x1F4176550]();
}

uint64_t WebCore::PrivateClickMeasurement::isolatedCopy()
{
  return MEMORY[0x1F4176560]();
}

uint64_t WebCore::ServiceWorkerClientData::isolatedCopy()
{
  return MEMORY[0x1F4176568]();
}

uint64_t WebCore::ShareableResourceHandle::tryWrapInSharedBuffer()
{
  return MEMORY[0x1F4176570]();
}

uint64_t WebCore::ServiceWorkerContextData::isolatedCopy()
{
  return MEMORY[0x1F4176578]();
}

uint64_t WebCore::ServiceWorkerRegistrationKey::isolatedCopy()
{
  return MEMORY[0x1F4176580]();
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

void std::error_category::~error_category(std::error_category *this)
{
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x1F417E9E0]();
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
}

void *__cdecl std::align(size_t __align, size_t __sz, void **__ptr, size_t *__space)
{
  return (void *)MEMORY[0x1F417EBF0](__align, __sz, __ptr, __space);
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

uint64_t __NSMakeSpecialForwardingCaptureBlock()
{
  return MEMORY[0x1F40D9630]();
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

uint64_t __udivti3()
{
  return MEMORY[0x1F40C9D08]();
}

uint64_t _dyld_register_dlsym_notifier()
{
  return MEMORY[0x1F40C9EF8]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _protocol_getMethodTypeEncoding()
{
  return MEMORY[0x1F41814B8]();
}

uint64_t _set_user_dir_suffix()
{
  return MEMORY[0x1F40CA130]();
}

void abort(void)
{
}

uint32_t arc4random(void)
{
  return MEMORY[0x1F40CA3A8]();
}

float atan2f(float a1, float a2)
{
  MEMORY[0x1F40CA468](a1, a2);
  return result;
}

kern_return_t bootstrap_look_up(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return MEMORY[0x1F40CA548](*(void *)&bp, service_name, sp);
}

void bzero(void *a1, size_t a2)
{
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x1F41814C8](cls, name, imp, types);
}

BOOL class_addProtocol(Class cls, Protocol *protocol)
{
  return MEMORY[0x1F41814D8](cls, protocol);
}

id class_createInstance(Class cls, size_t extraBytes)
{
  return (id)MEMORY[0x1F4181510](cls, extraBytes);
}

Method class_getClassMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1F4181518](cls, name);
}

const char *__cdecl class_getImageName(Class cls)
{
  return (const char *)MEMORY[0x1F4181520](cls);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1F4181528](cls, name);
}

IMP class_getMethodImplementation(Class cls, SEL name)
{
  return (IMP)MEMORY[0x1F4181540](cls, name);
}

const char *__cdecl class_getName(Class cls)
{
  return (const char *)MEMORY[0x1F4181548](cls);
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x1F4181558](cls);
}

BOOL class_isMetaClass(Class cls)
{
  return MEMORY[0x1F4181568](cls);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1F40CB3D8](*(void *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return MEMORY[0x1F40CB438](*(void *)&a1, a2, a3);
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1F40CB440](*(void *)&a1, a2, *(void *)&a3);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

BOOL dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier)
{
  return MEMORY[0x1F40CBA00](data, applier);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA10](buffer, size, queue, destructor);
}

dispatch_data_t dispatch_data_create_concat(dispatch_data_t data1, dispatch_data_t data2)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA20](data1, data2);
}

dispatch_data_t dispatch_data_create_map(dispatch_data_t data, const void **buffer_ptr, size_t *size_ptr)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA30](data, buffer_ptr, size_ptr);
}

dispatch_data_t dispatch_data_create_subrange(dispatch_data_t data, size_t offset, size_t length)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA38](data, offset, length);
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return MEMORY[0x1F40CBA48](data);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

dispatch_io_t dispatch_io_create(dispatch_io_type_t type, dispatch_fd_t fd, dispatch_queue_t queue, void *cleanup_handler)
{
  return (dispatch_io_t)MEMORY[0x1F40CBAD8](type, *(void *)&fd, queue, cleanup_handler);
}

void dispatch_io_read(dispatch_io_t channel, off_t offset, size_t length, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
}

void dispatch_io_set_low_water(dispatch_io_t channel, size_t low_water)
{
}

void dispatch_io_write(dispatch_io_t channel, off_t offset, dispatch_data_t data, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1F40CBCA0](source);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_registration_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x1F40CBDA0](a1, a2);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

BOOL dlopen_preflight(const char *__path)
{
  return MEMORY[0x1F40CBDC0](__path);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

int dup2(int a1, int a2)
{
  return MEMORY[0x1F40CBE00](*(void *)&a1, *(void *)&a2);
}

int execl(const char *__path, const char *__arg0, ...)
{
  return MEMORY[0x1F40CBFB0](__path, __arg0);
}

void exit(int a1)
{
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

uint64_t fileport_makefd()
{
  return MEMORY[0x1F40CC118]();
}

uint64_t fileport_makeport()
{
  return MEMORY[0x1F40CC120]();
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CC1E8](*(void *)&a1, a2);
}

void free(void *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x1F40CC410](a1);
}

int getopt_long(int a1, char *const *a2, const char *a3, const option *a4, int *a5)
{
  return MEMORY[0x1F40CC470](*(void *)&a1, a2, a3, a4, a5);
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

int getsockname(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1F40CC558](*(void *)&a1, a2, a3);
}

float hypotf(float a1, float a2)
{
  MEMORY[0x1F40CC640](a1, a2);
  return result;
}

unsigned int if_nametoindex(const char *a1)
{
  return MEMORY[0x1F40CC650](a1);
}

in_addr_t inet_addr(const char *a1)
{
  return MEMORY[0x1F40CC660](a1);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x1F40CC680](*(void *)&a1, a2, a3);
}

uint64_t kdebug_is_enabled()
{
  return MEMORY[0x1F40CC6F0]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1F40CC700]();
}

int kill(pid_t a1, int a2)
{
  return MEMORY[0x1F40CC728](*(void *)&a1, *(void *)&a2);
}

long double ldexp(long double __x, int __e)
{
  MEMORY[0x1F40CC800](*(void *)&__e, __x);
  return result;
}

long double log2(long double __x)
{
  MEMORY[0x1F40CC8A8](__x);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1F40CC940](*(void *)&error_value);
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1F40CC970](msg, *(void *)&option, *(void *)&send_size, *(void *)&rcv_size, *(void *)&rcv_name, *(void *)&timeout, *(void *)&notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return MEMORY[0x1F40CC9A0](*(void *)&task, *(void *)&right, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1F40CC9B8](*(void *)&task, *(void *)&name);
}

kern_return_t mach_port_guard(ipc_space_t task, mach_port_name_t name, mach_port_context_t guard, BOOLean_t strict)
{
  return MEMORY[0x1F40CC9F8](*(void *)&task, *(void *)&name, guard, *(void *)&strict);
}

kern_return_t mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly)
{
  return MEMORY[0x1F40CCA08](*(void *)&task, *(void *)&name, *(void *)&poly, *(void *)&polyPoly);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x1F40CCA10](*(void *)&task, *(void *)&name, *(void *)&right, *(void *)&delta);
}

kern_return_t mach_port_request_notification(ipc_space_t task, mach_port_name_t name, mach_msg_id_t msgid, mach_port_mscount_t sync, mach_port_t notify, mach_msg_type_name_t notifyPoly, mach_port_t *previous)
{
  return MEMORY[0x1F40CCA28](*(void *)&task, *(void *)&name, *(void *)&msgid, *(void *)&sync, *(void *)&notify, *(void *)&notifyPoly, previous);
}

kern_return_t mach_port_set_attributes(ipc_space_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info, mach_msg_type_number_t port_infoCnt)
{
  return MEMORY[0x1F40CCA30](*(void *)&task, *(void *)&name, *(void *)&flavor, port_info, *(void *)&port_infoCnt);
}

kern_return_t mach_port_unguard(ipc_space_t task, mach_port_name_t name, mach_port_context_t guard)
{
  return MEMORY[0x1F40CCA48](*(void *)&task, *(void *)&name, guard);
}

uint64_t malloc_get_all_zones()
{
  return MEMORY[0x1F40CCB48]();
}

const char *__cdecl malloc_get_zone_name(malloc_zone_t *zone)
{
  return (const char *)MEMORY[0x1F40CCB50](zone);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void malloc_zone_statistics(malloc_zone_t *zone, malloc_statistics_t *stats)
{
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

uint64_t memorystatus_control()
{
  return MEMORY[0x1F40CCD18]();
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1F40CCD40](__s, __smax, *(void *)&__c, __n);
}

IMP method_getImplementation(Method m)
{
  return (IMP)MEMORY[0x1F41815F8](m);
}

const char *__cdecl method_getTypeEncoding(Method m)
{
  return (const char *)MEMORY[0x1F4181618](m);
}

IMP method_setImplementation(Method m, IMP imp)
{
  return (IMP)MEMORY[0x1F4181628](m, imp);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

long double modf(long double __x, long double *__y)
{
  MEMORY[0x1F40CCE48](__y, __x);
  return result;
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

int nanosleep(const timespec *__rqtp, timespec *__rmtp)
{
  return MEMORY[0x1F40CCEA0](__rqtp, __rmtp);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

BOOL notify_is_valid_token(int val)
{
  return MEMORY[0x1F40CD048](*(void *)&val);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1F40CD050](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1F40CD058](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1F40CD088](*(void *)&token, state64);
}

uint64_t nw_activity_activate()
{
  return MEMORY[0x1F40F2870]();
}

uint64_t nw_activity_complete_with_reason()
{
  return MEMORY[0x1F40F2878]();
}

uint64_t nw_activity_create()
{
  return MEMORY[0x1F40F2898]();
}

uint64_t nw_activity_set_parent_activity()
{
  return MEMORY[0x1F40F28E8]();
}

void nw_connection_cancel(nw_connection_t connection)
{
}

nw_path_t nw_connection_copy_current_path(nw_connection_t connection)
{
  return (nw_path_t)MEMORY[0x1F40F2A90](connection);
}

nw_endpoint_t nw_connection_copy_endpoint(nw_connection_t connection)
{
  return (nw_endpoint_t)MEMORY[0x1F40F2AA0](connection);
}

nw_connection_t nw_connection_create(nw_endpoint_t endpoint, nw_parameters_t parameters)
{
  return (nw_connection_t)MEMORY[0x1F40F2AE0](endpoint, parameters);
}

nw_connection_group_t nw_connection_group_create(nw_group_descriptor_t group_descriptor, nw_parameters_t parameters)
{
  return (nw_connection_group_t)MEMORY[0x1F40F2B68](group_descriptor, parameters);
}

nw_connection_t nw_connection_group_extract_connection(nw_connection_group_t group, nw_endpoint_t endpoint, nw_protocol_options_t protocol_options)
{
  return (nw_connection_t)MEMORY[0x1F40F2B70](group, endpoint, protocol_options);
}

void nw_connection_group_send_message(nw_connection_group_t group, dispatch_data_t content, nw_endpoint_t endpoint, nw_content_context_t context, nw_connection_group_send_completion_t completion)
{
}

void nw_connection_group_set_queue(nw_connection_group_t group, dispatch_queue_t queue)
{
}

void nw_connection_group_set_receive_handler(nw_connection_group_t group, uint32_t maximum_message_size, BOOL reject_oversized_messages, nw_connection_group_receive_handler_t receive_handler)
{
}

void nw_connection_group_set_state_changed_handler(nw_connection_group_t group, nw_connection_group_state_changed_handler_t state_changed_handler)
{
}

void nw_connection_group_start(nw_connection_group_t group)
{
}

void nw_connection_receive(nw_connection_t connection, uint32_t minimum_incomplete_length, uint32_t maximum_length, nw_connection_receive_completion_t completion)
{
}

uint64_t nw_connection_reset_traffic_class()
{
  return MEMORY[0x1F40F2C28]();
}

void nw_connection_send(nw_connection_t connection, dispatch_data_t content, nw_content_context_t context, BOOL is_complete, nw_connection_send_completion_t completion)
{
}

void nw_connection_set_queue(nw_connection_t connection, dispatch_queue_t queue)
{
}

void nw_connection_set_state_changed_handler(nw_connection_t connection, nw_connection_state_changed_handler_t handler)
{
}

void nw_connection_start(nw_connection_t connection)
{
}

nw_protocol_metadata_t nw_content_context_copy_protocol_metadata(nw_content_context_t context, nw_protocol_definition_t protocol)
{
  return (nw_protocol_metadata_t)MEMORY[0x1F40F2CF0](context, protocol);
}

BOOL nw_content_context_get_is_final(nw_content_context_t context)
{
  return MEMORY[0x1F40F2D10](context);
}

char *__cdecl nw_endpoint_copy_address_string(nw_endpoint_t endpoint)
{
  return (char *)MEMORY[0x1F40F2E38](endpoint);
}

nw_endpoint_t nw_endpoint_create_host(const char *hostname, const char *port)
{
  return (nw_endpoint_t)MEMORY[0x1F40F2EA8](hostname, port);
}

uint64_t nw_endpoint_create_host_with_numeric_port()
{
  return MEMORY[0x1F40F2EB0]();
}

const sockaddr *__cdecl nw_endpoint_get_address(nw_endpoint_t endpoint)
{
  return (const sockaddr *)MEMORY[0x1F40F2ED0](endpoint);
}

const char *__cdecl nw_endpoint_get_hostname(nw_endpoint_t endpoint)
{
  return (const char *)MEMORY[0x1F40F2F08](endpoint);
}

uint16_t nw_endpoint_get_port(nw_endpoint_t endpoint)
{
  return MEMORY[0x1F40F2F20](endpoint);
}

nw_endpoint_type_t nw_endpoint_get_type(nw_endpoint_t endpoint)
{
  return MEMORY[0x1F40F2F38](endpoint);
}

int nw_error_get_error_code(nw_error_t error)
{
  return MEMORY[0x1F40F2F60](error);
}

nw_group_descriptor_t nw_group_descriptor_create_multiplex(nw_endpoint_t remote_endpoint)
{
  return (nw_group_descriptor_t)MEMORY[0x1F40F31C0](remote_endpoint);
}

uint64_t nw_interface_create_with_name()
{
  return MEMORY[0x1F40F3238]();
}

const char *__cdecl nw_interface_get_name(nw_interface_t interface)
{
  return (const char *)MEMORY[0x1F40F3248](interface);
}

nw_interface_type_t nw_interface_get_type(nw_interface_t interface)
{
  return MEMORY[0x1F40F3268](interface);
}

nw_ip_ecn_flag_t nw_ip_metadata_get_ecn_flag(nw_protocol_metadata_t metadata)
{
  return MEMORY[0x1F40F32C0](metadata);
}

void nw_ip_options_set_version(nw_protocol_options_t options, nw_ip_version_t version)
{
}

void nw_listener_cancel(nw_listener_t listener)
{
}

nw_listener_t nw_listener_create(nw_parameters_t parameters)
{
  return (nw_listener_t)MEMORY[0x1F40F3320](parameters);
}

uint16_t nw_listener_get_port(nw_listener_t listener)
{
  return MEMORY[0x1F40F3338](listener);
}

void nw_listener_set_new_connection_handler(nw_listener_t listener, nw_listener_new_connection_handler_t handler)
{
}

void nw_listener_set_queue(nw_listener_t listener, dispatch_queue_t queue)
{
}

void nw_listener_set_state_changed_handler(nw_listener_t listener, nw_listener_state_changed_handler_t handler)
{
}

void nw_listener_start(nw_listener_t listener)
{
}

uint64_t nw_nat64_does_interface_index_support_nat64()
{
  return MEMORY[0x1F40F33A0]();
}

uint64_t nw_parameters_allow_sharing_port_with_listener()
{
  return MEMORY[0x1F40F33F0]();
}

nw_protocol_stack_t nw_parameters_copy_default_protocol_stack(nw_parameters_t parameters)
{
  return (nw_protocol_stack_t)MEMORY[0x1F40F3418](parameters);
}

uint64_t nw_parameters_create_quic_stream()
{
  return MEMORY[0x1F40F34C8]();
}

nw_parameters_t nw_parameters_create_secure_tcp(nw_parameters_configure_protocol_block_t configure_tls, nw_parameters_configure_protocol_block_t configure_tcp)
{
  return (nw_parameters_t)MEMORY[0x1F40F34D0](configure_tls, configure_tcp);
}

nw_parameters_t nw_parameters_create_secure_udp(nw_parameters_configure_protocol_block_t configure_dtls, nw_parameters_configure_protocol_block_t configure_udp)
{
  return (nw_parameters_t)MEMORY[0x1F40F34E0](configure_dtls, configure_udp);
}

uint64_t nw_parameters_set_account_id()
{
  return MEMORY[0x1F40F35A0]();
}

uint64_t nw_parameters_set_is_third_party_web_content()
{
  return MEMORY[0x1F40F3678]();
}

void nw_parameters_set_local_endpoint(nw_parameters_t parameters, nw_endpoint_t local_endpoint)
{
}

void nw_parameters_set_reuse_local_address(nw_parameters_t parameters, BOOL reuse_local_address)
{
}

uint64_t nw_parameters_set_source_application()
{
  return MEMORY[0x1F40F3788]();
}

uint64_t nw_parameters_set_source_application_by_bundle_id()
{
  return MEMORY[0x1F40F3790]();
}

uint64_t nw_parameters_set_traffic_class()
{
  return MEMORY[0x1F40F37B8]();
}

uint64_t nw_path_copy_interface()
{
  return MEMORY[0x1F40F3828]();
}

void nw_path_enumerate_interfaces(nw_path_t path, nw_path_enumerate_interfaces_block_t enumerate_block)
{
}

nw_protocol_definition_t nw_protocol_copy_ip_definition(void)
{
  return (nw_protocol_definition_t)MEMORY[0x1F40F3A18]();
}

BOOL nw_protocol_metadata_is_ip(nw_protocol_metadata_t metadata)
{
  return MEMORY[0x1F40F3AE8](metadata);
}

nw_protocol_options_t nw_protocol_stack_copy_internet_protocol(nw_protocol_stack_t stack)
{
  return (nw_protocol_options_t)MEMORY[0x1F40F3B58](stack);
}

uint64_t nw_proxy_config_copy_agent_data()
{
  return MEMORY[0x1F40F3BF0]();
}

uint64_t nw_proxy_config_get_identifier()
{
  return MEMORY[0x1F40F3C08]();
}

uint64_t nw_quic_connection_copy_sec_protocol_options()
{
  return MEMORY[0x1F40F3CE0]();
}

uint64_t nw_resolution_report_get_dns_failure_reason()
{
  return MEMORY[0x1F40F3DF8]();
}

uint64_t nw_resolution_report_get_extended_dns_error_extra_text()
{
  return MEMORY[0x1F40F3E00]();
}

uint64_t nw_resolution_report_get_provider_name()
{
  return MEMORY[0x1F40F3E18]();
}

uint64_t nw_settings_get_unified_http_enabled()
{
  return MEMORY[0x1F40F3ED8]();
}

void nw_tcp_options_set_no_delay(nw_protocol_options_t options, BOOL no_delay)
{
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1F4181718](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1F4181778](location);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

Class objc_lookUpClass(const char *name)
{
  return (Class)MEMORY[0x1F4181788](name);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1F4181A58](a1);
}

void *__cdecl object_getIndexedIvars(id a1)
{
  return (void *)MEMORY[0x1F4181A68](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

uint64_t os_eligibility_get_domain_answer()
{
  return MEMORY[0x1F40CD2B0]();
}

uint64_t os_log_copy_message_string()
{
  return MEMORY[0x1F40CD358]();
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

uint64_t os_log_set_hook()
{
  return MEMORY[0x1F40CD390]();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_release(void *object)
{
}

void *__cdecl os_retain(void *object)
{
  return (void *)MEMORY[0x1F40CD548](object);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1F40CD560](log, ptr);
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x1F40CD570]();
}

uint64_t os_trace_get_mode()
{
  return MEMORY[0x1F40CD588]();
}

uint64_t os_trace_set_mode()
{
  return MEMORY[0x1F40CD590]();
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_allows_internal_security_policies()
{
  return MEMORY[0x1F40CD630]();
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

BOOL protocol_conformsToProtocol(Protocol *proto, Protocol *other)
{
  return MEMORY[0x1F4181AE0](proto, other);
}

objc_method_description *__cdecl protocol_copyMethodDescriptionList(Protocol *p, BOOL isRequiredMethod, BOOL isInstanceMethod, unsigned int *outCount)
{
  return (objc_method_description *)MEMORY[0x1F4181AE8](p, isRequiredMethod, isInstanceMethod, outCount);
}

Protocol **__cdecl protocol_copyProtocolList(Protocol *proto, unsigned int *outCount)
{
  return (Protocol **)MEMORY[0x1F4181B00](proto, outCount);
}

objc_method_description protocol_getMethodDescription(Protocol *p, SEL aSel, BOOL isRequiredMethod, BOOL isInstanceMethod)
{
  double v4 = (const char *)MEMORY[0x1F4181B08](p, aSel, isRequiredMethod, isInstanceMethod);
  result.types = v5;
  result.name = v4;
  return result;
}

const char *__cdecl protocol_getName(Protocol *p)
{
  return (const char *)MEMORY[0x1F4181B10](p);
}

uint64_t pthread_set_fixedpriority_self()
{
  return MEMORY[0x1F40CDB40]();
}

int puts(const char *a1)
{
  return MEMORY[0x1F40CDBB8](a1);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1F40CDC98](a1, a2);
}

uint64_t sandbox_check()
{
  return MEMORY[0x1F40CDDD0]();
}

uint64_t sandbox_check_by_audit_token()
{
  return MEMORY[0x1F40CDDD8]();
}

uint64_t sandbox_container_path_for_pid()
{
  return MEMORY[0x1F40CDDE8]();
}

uint64_t sandbox_enable_state_flag()
{
  return MEMORY[0x1F40CDDF0]();
}

uint64_t sandbox_extension_consume()
{
  return MEMORY[0x1F40CDDF8]();
}

uint64_t sandbox_extension_issue_file_to_process()
{
  return MEMORY[0x1F40CDE08]();
}

uint64_t sandbox_extension_issue_iokit_registry_entry_class_to_process()
{
  return MEMORY[0x1F40CDE38]();
}

uint64_t sandbox_extension_issue_mach_to_process()
{
  return MEMORY[0x1F40CDE48]();
}

uint64_t sandbox_extension_release()
{
  return MEMORY[0x1F40CDE50]();
}

void sec_protocol_options_add_tls_application_protocol(sec_protocol_options_t options, const char *application_protocol)
{
}

void sec_protocol_options_set_peer_authentication_required(sec_protocol_options_t options, BOOL peer_authentication_required)
{
}

void sec_protocol_options_set_verify_block(sec_protocol_options_t options, sec_protocol_verify_t verify_block, dispatch_queue_t verify_block_queue)
{
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1F4181B28](sel);
}

BOOL sel_isEqual(SEL lhs, SEL rhs)
{
  return MEMORY[0x1F4181B38](lhs, rhs);
}

kern_return_t semaphore_create(task_t task, semaphore_t *semaphore, int policy, int value)
{
  return MEMORY[0x1F40CDF00](*(void *)&task, semaphore, *(void *)&policy, *(void *)&value);
}

kern_return_t semaphore_destroy(task_t task, semaphore_t semaphore)
{
  return MEMORY[0x1F40CDF08](*(void *)&task, *(void *)&semaphore);
}

kern_return_t semaphore_signal(semaphore_t semaphore)
{
  return MEMORY[0x1F40CDF10](*(void *)&semaphore);
}

kern_return_t semaphore_timedwait(semaphore_t semaphore, mach_timespec_t wait_time)
{
  return ((uint64_t (*)(void, void))MEMORY[0x1F40CDF20])(*(void *)&semaphore, wait_time);
}

kern_return_t semaphore_wait(semaphore_t semaphore)
{
  return MEMORY[0x1F40CDF28](*(void *)&semaphore);
}

int setenv(const char *__name, const char *__value, int __overwrite)
{
  return MEMORY[0x1F40CDF60](__name, __value, *(void *)&__overwrite);
}

int setxattr(const char *path, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1F40CDFD8](path, name, value, size, *(void *)&position, *(void *)&options);
}

long double sin(long double __x)
{
  MEMORY[0x1F40CE058](__x);
  return result;
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x1F40CE090](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181F90](a1, *(void *)&a2, a3, *(void *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1F4181FA8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1F4181FB0](a1, *(void *)&a2, *(void *)&a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x1F4181FB8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x1F4181FC0](a1, *(void *)&a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181FE8](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return MEMORY[0x1F4182068](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1F4182070](a1, *(void *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F4182078](a1, *(void *)&iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F4182088](pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  MEMORY[0x1F4182098](a1, *(void *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A0](a1, *(void *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A8](a1, *(void *)&iCol);
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return (const char *)MEMORY[0x1F41820B0](a1, *(void *)&N);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1F41820C8](a1, *(void *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820D8](a1, *(void *)&iCol);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1F4182198](a1);
}

const char *__cdecl sqlite3_errstr(int a1)
{
  return (const char *)MEMORY[0x1F41821A0](*(void *)&a1);
}

char *__cdecl sqlite3_expanded_sql(sqlite3_stmt *pStmt)
{
  return (char *)MEMORY[0x1F41821B8](pStmt);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41821D8](pStmt);
}

void sqlite3_free(void *a1)
{
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1F4182280](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1F4182290](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41822C0](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1F41823B0](a1);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x1F40CE200](__s1, __n);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1F40CE258](__s1, __s2);
}

uint64_t svm_load_model()
{
  return MEMORY[0x1F41142B0]();
}

uint64_t svm_predict_values()
{
  return MEMORY[0x1F41142B8]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

kern_return_t task_get_special_port(task_inspect_t task, int which_port, mach_port_t *special_port)
{
  return MEMORY[0x1F40CE460](*(void *)&task, *(void *)&which_port, special_port);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1F40CE470](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

kern_return_t task_name_for_pid(mach_port_name_t target_tport, int pid, mach_port_name_t *tn)
{
  return MEMORY[0x1F40CE480](*(void *)&target_tport, *(void *)&pid, tn);
}

UCharDirection u_charDirection(UChar32 c)
{
  return MEMORY[0x1F417F700](*(void *)&c);
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

int unsetenv(const char *a1)
{
  return MEMORY[0x1F40CE5F8](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1F40CE608](*(void *)&a1);
}

void uuid_generate(uuid_t out)
{
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1F40CE6C0](*(void *)&target_task, address, size);
}

uint64_t voucher_replace_default_voucher()
{
  return MEMORY[0x1F40CE770]();
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return (xpc_object_t)MEMORY[0x1F40CE978](activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1F40CE990](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return MEMORY[0x1F40CEA18](xarray, applier);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEA30](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1F40CEA58](xarray);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1F40CEAA8](xarray, index);
}

void xpc_array_set_string(xpc_object_t xarray, size_t index, const char *string)
{
}

void xpc_connection_activate(xpc_connection_t connection)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

uint64_t xpc_connection_copy_invalidation_reason()
{
  return MEMORY[0x1F40CEB98]();
}

xpc_connection_t xpc_connection_create(const char *name, dispatch_queue_t targetq)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBA8](name, targetq);
}

xpc_connection_t xpc_connection_create_from_endpoint(xpc_endpoint_t endpoint)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBC0](endpoint);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBD0](name, targetq, flags);
}

uint64_t xpc_connection_get_audit_token()
{
  return MEMORY[0x1F40CEBE8]();
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x1F40CEC20](connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

uint64_t xpc_connection_set_oneshot_instance()
{
  return MEMORY[0x1F40CECC0]();
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

uint64_t xpc_copy_bootstrap()
{
  return MEMORY[0x1F40CED08]();
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1F40CED90](bytes, length);
}

xpc_object_t xpc_data_create_with_dispatch_data(dispatch_data_t ddata)
{
  return (xpc_object_t)MEMORY[0x1F40CEDA0](ddata);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1F40CEDB0](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1F40CEDC0](xdata);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1F40CEE08](xdict, applier);
}

uint64_t xpc_dictionary_copy_mach_send()
{
  return MEMORY[0x1F40CEE18]();
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

xpc_object_t xpc_dictionary_create_empty(void)
{
  return (xpc_object_t)MEMORY[0x1F40CEE30]();
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1F40CEE40](original);
}

int xpc_dictionary_dup_fd(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEE50](xdict, key);
}

xpc_object_t xpc_dictionary_get_array(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEE68](xdict, key);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEE80](xdict, key);
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return (const void *)MEMORY[0x1F40CEE98](xdict, key, length);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return (xpc_connection_t)MEMORY[0x1F40CEEE0](xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1F40CEEF0](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEF8](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF10](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
}

void xpc_dictionary_set_fd(xpc_object_t xdict, const char *key, int fd)
{
}

uint64_t xpc_dictionary_set_mach_send()
{
  return MEMORY[0x1F40CEF98]();
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_endpoint_t xpc_endpoint_create(xpc_connection_t connection)
{
  return (xpc_endpoint_t)MEMORY[0x1F40CF018](connection);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

void xpc_main(xpc_connection_handler_t handler)
{
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return (const char *)MEMORY[0x1F40CF2C8](xstring);
}

const char *__cdecl xpc_type_get_name(xpc_type_t type)
{
  return (const char *)MEMORY[0x1F40CF310](type);
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_CoreTelephony(double a1)
{
  return a1;
}

double gotLoadHelper_x8__OBJC_CLASS___CoreTelephonyClient(double result)
{
  if (!atomic_load((unsigned int *)&dlopenHelperFlag_CoreTelephony)) {
    return dlopenHelper_CoreTelephony(result);
  }
  return result;
}