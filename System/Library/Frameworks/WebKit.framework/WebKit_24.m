uint64_t WebKit::RemoteVideoCodecFactory::createDecoder(WebKit::LibWebRTCCodecs *a1, uint64_t *a2, void *a3, void *a4)
{
  WebKit::WebProcess *v8;
  WebKit::LibWebRTCCodecs *v9;
  unsigned __int16 v10;
  WebKit::LibWebRTCCodecs *v11;
  uint64_t *v12;
  void *v13;
  void *v14;
  char v15;
  WebKit::WebProcess *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t (*v29)(void);
  WebKit::WebProcess *v30;
  WebKit::WebProcess *v31;
  uint64_t v32;
  uint64_t vars8;

  WebKit::LibWebRTCCodecs::initializeIfNeeded(a1);
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::WebProcess(v30);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v9 = WebKit::WebProcess::libWebRTCCodecs(v8);
  v10 = WebKit::LibWebRTCCodecs::videoCodecTypeFromWebCodec(v9, a1);
  if (v10 <= 0xFFu)
  {
    v11 = a1;
    v12 = a2;
    v13 = a3;
    v14 = a4;
    return MEMORY[0x1F416D1D0](v11, v12, v13, v14);
  }
  v15 = v10;
  {
    v16 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v31 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v16 = (WebKit::WebProcess *)WebKit::WebProcess::WebProcess(v31);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v16;
  }
  v11 = WebKit::WebProcess::libWebRTCCodecs(v16);
  v17 = (uint64_t)v11;
  v19 = a2[2];
  v18 = a2[3];
  v20 = a2[1];
  if (v20)
  {
    if (HIDWORD(v20))
    {
      __break(0xC471u);
      return MEMORY[0x1F416D1D0](v11, v12, v13, v14);
    }
    v21 = *a2;
    v22 = WTF::fastMalloc((WTF *)a2[1]);
    v23 = v22;
    for (i = 0; i != v20; ++i)
      *(unsigned char *)(v22 + i) = *(unsigned char *)(v21 + i);
  }
  else
  {
    v23 = 0;
  }
  v25 = *a3;
  *a3 = 0;
  v26 = *a4;
  *a4 = 0;
  v27 = WTF::fastMalloc((WTF *)0x38);
  *(void *)v27 = &unk_1EE9EE628;
  *(void *)(v27 + 8) = v19;
  *(void *)(v27 + 16) = v18;
  *(void *)(v27 + 24) = v23;
  *(_DWORD *)(v27 + 32) = v20;
  *(_DWORD *)(v27 + 36) = v20;
  *(void *)(v27 + 40) = v25;
  *(void *)(v27 + 48) = v26;
  v32 = v27;
  WebKit::LibWebRTCCodecs::createDecoderInternal(v17, v15, (uint64_t)a1, &v32);
  result = v32;
  if (v32)
  {
    v29 = *(uint64_t (**)(void))(*(void *)v32 + 8);
    return v29();
  }
  return result;
}

void WebKit::RemoteVideoCodecFactory::createEncoder(WebKit::LibWebRTCCodecs *a1, long long *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  WebKit::LibWebRTCCodecs::initializeIfNeeded(a1);
  v10 = &qword_1EB35A000;
  {
    v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v43 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v11 = (WebKit::WebProcess *)WebKit::WebProcess::WebProcess(v43);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
  }
  v12 = WebKit::WebProcess::libWebRTCCodecs(v11);
  unsigned __int16 v13 = WebKit::LibWebRTCCodecs::videoEncoderTypeFromWebCodec(v12, a1);
  if (v13 <= 0xFFu)
  {
    MEMORY[0x1F416D1F0](a1, a2, a3, a4, a5);
    return;
  }
  char v17 = v13;
  v52 = 0;
  uint64_t v53 = 0;
  v51 = &v52;
  if (!(_BYTE)v13)
  {
    unint64_t v24 = WTF::String::find((uint64_t)a1, 0x2Eu, 0, v14, v15, v16);
    if (v24 != -1)
    {
      uint64_t v25 = *(void *)a1;
      if (*(void *)a1)
      {
        unint64_t v26 = *(unsigned int *)(v25 + 4);
        if (v24 != v26)
        {
          if (v24 < v26)
          {
            unint64_t v27 = v24 + 1;
            size_t v28 = v26 - (v24 + 1);
            if (v28 >= 0x7FFFFFFFFFFFFFF8) {
              goto LABEL_51;
            }
            v29 = (char *)(*(void *)(v25 + 8) + v27);
            if (v28 > 0x16)
            {
              uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v28 | 7) != 0x17) {
                uint64_t v31 = v28 | 7;
              }
              uint64_t v45 = v31 + 1;
              unint64_t v46 = v24 + 1;
              v32 = v29;
              v30 = (char *)operator new(v31 + 1);
              v29 = v32;
              unint64_t v27 = v46;
              v49[1] = (void *)v28;
              unint64_t v50 = v45 | 0x8000000000000000;
              v49[0] = v30;
            }
            else
            {
              HIBYTE(v50) = v26 - (v24 + 1);
              v30 = (char *)v49;
            }
            v33 = &v30[v28];
            if (v30 > v29 || v33 <= v29)
            {
              if (v26 != v27) {
                memmove(v30, v29, v28);
              }
              char *v33 = 0;
              std::string::basic_string[abi:sn180100]<0>((char **)__p, "profile-level-id");
              v35 = v52;
              v36 = (void **)&v52;
              v37 = &v52;
              if (!v52) {
                goto LABEL_38;
              }
              v36 = (void **)&v52;
              while (1)
              {
                while (1)
                {
                  v37 = (uint64_t **)v35;
                  v38 = v35 + 4;
                  if ((std::operator<=>[abi:sn180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (void **)v35 + 4) & 0x80) == 0)break; {
                  v35 = *v37;
                  }
                  v36 = (void **)v37;
                  if (!*v37) {
                    goto LABEL_38;
                  }
                }
                if ((std::operator<=>[abi:sn180100]<char,std::char_traits<char>,std::allocator<char>>(v38, __p) & 0x80) == 0)break; {
                v36 = (void **)(v37 + 1);
                }
                v35 = v37[1];
                if (!v35) {
                  goto LABEL_38;
                }
              }
              v39 = (char *)*v36;
              if (!*v36)
              {
LABEL_38:
                v39 = (char *)operator new(0x50uLL);
                v54[1] = (uint64_t)&v52;
                *((_OWORD *)v39 + 2) = *(_OWORD *)__p;
                uint64_t v40 = v48;
                __p[0] = 0;
                __p[1] = 0;
                uint64_t v48 = 0;
                *((void *)v39 + 6) = v40;
                *((void *)v39 + 7) = 0;
                *((void *)v39 + 8) = 0;
                *((void *)v39 + 9) = 0;
                char v55 = 1;
                *(void *)v39 = 0;
                *((void *)v39 + 1) = 0;
                *((void *)v39 + 2) = v37;
                *v36 = v39;
                v41 = (uint64_t *)v39;
                if (*v51)
                {
                  v51 = (uint64_t **)*v51;
                  v41 = (uint64_t *)*v36;
                }
                std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v52, v41);
                ++v53;
                v54[0] = 0;
                std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:sn180100]((uint64_t)v54, 0);
              }
              v42 = (void **)(v39 + 56);
              if (v39[79] < 0) {
                operator delete(*v42);
              }
              *(_OWORD *)v42 = *(_OWORD *)v49;
              *((void *)v39 + 9) = v50;
              HIBYTE(v50) = 0;
              LOBYTE(v49[0]) = 0;
              if (SHIBYTE(v48) < 0)
              {
                operator delete(__p[0]);
                v10 = &qword_1EB35A000;
                if (SHIBYTE(v50) < 0) {
                  operator delete(v49[0]);
                }
              }
              else
              {
                v10 = &qword_1EB35A000;
              }
              goto LABEL_8;
            }
          }
LABEL_50:
          __break(1u);
LABEL_51:
          abort();
        }
      }
      else if (v24)
      {
        goto LABEL_50;
      }
    }
  }
LABEL_8:
  if (*((unsigned char *)v10 + 2272) == 1)
  {
    v18 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v44 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v18 = (WebKit::WebProcess *)WebKit::WebProcess::WebProcess(v44);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v18;
    *((unsigned char *)v10 + 2272) = 1;
  }
  v19 = WebKit::WebProcess::libWebRTCCodecs(v18);
  uint64_t v20 = *a3;
  *a3 = 0;
  uint64_t v21 = *a4;
  *a4 = 0;
  uint64_t v22 = *a5;
  *a5 = 0;
  v23 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v23 = &unk_1EE9EE660;
  v23[1] = v20;
  v23[2] = v21;
  v23[3] = v22;
  v54[0] = (uint64_t)v23;
  WebKit::LibWebRTCCodecs::createEncoderAndWaitUntilInitialized((uint64_t)v19, v17, (uint64_t)a1, &v51, a2, v54);
  if (v54[0]) {
    (*(void (**)(uint64_t))(*(void *)v54[0] + 8))(v54[0]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v51, v52);
}

uint64_t WTF::String::find(uint64_t this, unsigned __int8 a2, unsigned int a3, double a4, double a5, float a6)
{
  uint64_t v6 = *(void *)this;
  if (!*(void *)this) {
    return -1;
  }
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t v8 = *(unsigned int *)(v6 + 4);
  if ((*(unsigned char *)(v6 + 16) & 4) != 0)
  {
    if (v8 > a3)
    {
      unint64_t v16 = v8 - a3;
      uint64_t v17 = 16;
      if (v16 < 0x10) {
        uint64_t v17 = v16;
      }
      if (v17)
      {
        uint64_t v18 = v17;
        v19 = (unsigned __int8 *)(v7 + a3);
        while (*v19 != a2)
        {
          ++v19;
          if (!--v18) {
            goto LABEL_20;
          }
        }
      }
      else
      {
LABEL_20:
        if (v16 < 0x11) {
          return -1;
        }
        v19 = (unsigned __int8 *)memchr((void *)(v7 + a3 + v17), a2, v16 - v17);
        if (!v19) {
          return -1;
        }
      }
      return (uint64_t)&v19[-v7];
    }
    return -1;
  }
  if (v8 <= a3) {
    return -1;
  }
  v9 = (int16x8_t *)(v7 + 2 * a3);
  unint64_t v10 = v7 + 2 * v8;
  unint64_t v11 = v10 - (void)v9;
  if ((uint64_t)(v10 - (void)v9) <= -2)
  {
    __break(1u);
    return this;
  }
  if (v11 <= 0x3E)
  {
    while (v9->i16[0] != a2)
    {
      v9 = (int16x8_t *)((char *)v9 + 2);
      v11 -= 2;
      if (!v11) {
        return -1;
      }
    }
    goto LABEL_26;
  }
  int16x8_t v12 = vdupq_n_s16(a2);
  if ((unint64_t)&v9->u64[1] + 6 >= v10)
  {
    double v14 = (int16x8_t *)(v7 + 2 * a3);
LABEL_23:
    if ((unint64_t)v14 < v10)
    {
      v9 = (int16x8_t *)(v10 - 16);
      int8x16_t v13 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v10 - 16), v12);
      v12.i16[0] = vmaxvq_u16((uint16x8_t)v13);
      if (v12.i32[0]) {
        goto LABEL_25;
      }
    }
    return -1;
  }
  while (1)
  {
    int8x16_t v13 = (int8x16_t)vceqq_s16(*v9, v12);
    LOWORD(a6) = vmaxvq_u16((uint16x8_t)v13);
    if (a6 != 0.0) {
      break;
    }
    double v14 = v9 + 1;
    double v15 = &v9[1].i8[14];
    ++v9;
    if ((unint64_t)v15 >= v10) {
      goto LABEL_23;
    }
  }
LABEL_25:
  v9 = (int16x8_t *)((char *)v9
                   + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_1994F66B0, v13)));
LABEL_26:
  if (v9 == (int16x8_t *)v10) {
    return -1;
  }
  else {
    return ((uint64_t)v9->i64 - v7) >> 1;
  }
}

void WebKit::RemoteVideoDecoder::~RemoteVideoDecoder(uint64_t **this)
{
  *this = (uint64_t *)&unk_1EE9EDB08;
  {
    v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  v2 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WebKit::LibWebRTCCodecs::releaseDecoder((uint64_t)v2, this[1]);
  v4 = (WTF **)this[2];
  this[2] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoDecoderCallbacks,(WTF::DestructionThread)0>::deref(v4, v3);
  }

  MEMORY[0x1F416D1E8](this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteVideoDecoder::~RemoteVideoDecoder(this);

  WTF::fastFree(v1, v2);
}

WTF::StringImpl *WebKit::RemoteVideoDecoder::decode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)(a2 + 40))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    unint64_t v8 = *(void *)(a2 + 24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v10 = *(void *)(v7 + 32);
    if (v10)
    {
      uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.u32[0] > 1uLL)
      {
        unint64_t v3 = *(void *)(a2 + 24);
        if (v10 <= v8) {
          unint64_t v3 = v8 % v10;
        }
      }
      else
      {
        unint64_t v3 = (v10 - 1) & v8;
      }
      int16x8_t v12 = *(void **)(*(void *)(v7 + 24) + 8 * v3);
      if (v12)
      {
        for (i = (void *)*v12; i; i = (void *)*i)
        {
          unint64_t v14 = i[1];
          if (v14 == v8)
          {
            if (i[2] == v8)
            {
              i[3] = v9;
              goto LABEL_74;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
        }
      }
    }
    unint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x20);
    *unint64_t v16 = 0;
    v16[1] = v8;
    v16[2] = v8;
    v16[3] = v9;
    float v17 = (float)(unint64_t)(*(void *)(v7 + 48) + 1);
    float v18 = *(float *)(v7 + 56);
    if (v10 && (float)(v18 * (float)v10) >= v17)
    {
LABEL_64:
      v36 = *(void **)(*(void *)(v7 + 24) + 8 * v3);
      if (v36)
      {
        *unint64_t v16 = *v36;
      }
      else
      {
        *unint64_t v16 = *(void *)(v7 + 40);
        *(void *)(v7 + 40) = v16;
        *(void *)(*(void *)(v7 + 24) + 8 * v3) = v7 + 40;
        if (!*v16)
        {
LABEL_73:
          ++*(void *)(v7 + 48);
          goto LABEL_74;
        }
        unint64_t v37 = *(void *)(*v16 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v37 >= v10) {
            v37 %= v10;
          }
        }
        else
        {
          v37 &= v10 - 1;
        }
        v36 = (void *)(*(void *)(v7 + 24) + 8 * v37);
      }
      void *v36 = v16;
      goto LABEL_73;
    }
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = *(void *)(v7 + 32);
    if (*(void *)&prime > v10) {
      goto LABEL_31;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(v7 + 48) / *(float *)(v7 + 56));
      if (v10 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *(void *)(v7 + 32);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          uint64_t v24 = WTF::fastMalloc((WTF *)(8 * *(void *)&prime));
          uint64_t v25 = *(WTF **)(v7 + 24);
          *(void *)(v7 + 24) = v24;
          if (v25) {
            WTF::fastFree(v25, v23);
          }
          uint64_t v26 = 0;
          *(int8x8_t *)(v7 + 32) = prime;
          do
            *(void *)(*(void *)(v7 + 24) + 8 * v26++) = 0;
          while (*(void *)&prime != v26);
          unint64_t v27 = *(void **)(v7 + 40);
          if (v27)
          {
            unint64_t v28 = v27[1];
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }
            else
            {
              v28 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(v7 + 24) + 8 * v28) = v7 + 40;
            v33 = (void *)*v27;
            if (*v27)
            {
              do
              {
                unint64_t v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(void *)&prime) {
                    v34 %= *(void *)&prime;
                  }
                }
                else
                {
                  v34 &= *(void *)&prime - 1;
                }
                if (v34 != v28)
                {
                  uint64_t v35 = *(void *)(v7 + 24);
                  if (!*(void *)(v35 + 8 * v34))
                  {
                    *(void *)(v35 + 8 * v34) = v27;
                    goto LABEL_55;
                  }
                  *unint64_t v27 = *v33;
                  void *v33 = **(void **)(*(void *)(v7 + 24) + 8 * v34);
                  **(void **)(*(void *)(v7 + 24) + 8 * v34) = v33;
                  v33 = v27;
                }
                unint64_t v34 = v28;
LABEL_55:
                unint64_t v27 = v33;
                v33 = (void *)*v33;
                unint64_t v28 = v34;
              }
              while (v33);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_59;
        }
        unint64_t v46 = *(WTF **)(v7 + 24);
        *(void *)(v7 + 24) = 0;
        if (v46) {
          WTF::fastFree(v46, v15);
        }
        unint64_t v10 = 0;
        *(void *)(v7 + 32) = 0;
      }
    }
LABEL_59:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v8) {
        unint64_t v3 = v8 % v10;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    goto LABEL_64;
  }
LABEL_74:
  {
    v47 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v47);
  }
  v38 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  uint64_t v39 = *(void *)(a1 + 8);
  uint64_t v40 = *(WTF **)(a2 + 24);
  v41 = *(char **)a2;
  size_t v42 = *(void *)(a2 + 8);
  int v43 = *(unsigned __int16 *)(a1 + 24);
  int v44 = *(unsigned __int16 *)(a1 + 26);

  return WebKit::LibWebRTCCodecs::decodeFrame((uint64_t)v38, v39, v40, v41, v42, v43, v44, a3);
}

void *WebKit::RemoteVideoDecoder::flush@<X0>(WebKit::RemoteVideoDecoder *this@<X0>, uint64_t *a2@<X8>)
{
  {
    uint64_t v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  v4 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  uint64_t v5 = *((void *)this + 1);

  return WebKit::LibWebRTCCodecs::flushDecoder((uint64_t)v4, v5, a2);
}

uint64_t WebKit::RemoteVideoDecoder::reset(uint64_t this)
{
  *(unsigned char *)(*(void *)(this + 16) + 16) = 1;
  return this;
}

uint64_t WebKit::RemoteVideoDecoder::close(uint64_t this)
{
  *(unsigned char *)(*(void *)(this + 16) + 16) = 1;
  return this;
}

void WebKit::RemoteVideoEncoder::~RemoteVideoEncoder(uint64_t **this)
{
  *this = (uint64_t *)&unk_1EE9EDB48;
  {
    uint64_t v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  v2 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WebKit::LibWebRTCCodecs::releaseEncoder((uint64_t)v2, this[1]);
  v4 = (WTF *)this[2];
  this[2] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(v4, v3);
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteVideoEncoder::~RemoteVideoEncoder(this);

  WTF::fastFree(v1, v2);
}

unsigned int *WebKit::RemoteVideoEncoder::encode@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  {
    double v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  unint64_t v8 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v13 = a2[3];

  return WebKit::LibWebRTCCodecs::encodeFrame((uint64_t)v8, v9, v10, v11, v12, v13, a3, a4);
}

unsigned int *WebKit::RemoteVideoEncoder::setRates@<X0>(WebKit::RemoteVideoEncoder *this@<X0>, double a2@<D0>, unint64_t a3@<X1>, WebKit::LibWebRTCCodecs::Encoder **a4@<X8>)
{
  {
    uint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  unint64_t v7 = a3 / 0x3E8;
  unint64_t v8 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  uint64_t v9 = (WebKit::LibWebRTCCodecs::Encoder *)*((void *)this + 1);

  return WebKit::LibWebRTCCodecs::setEncodeRates((atomic_uchar *)v8, v9, v7, a2, a4);
}

void *WebKit::RemoteVideoEncoder::flush@<X0>(WebKit::RemoteVideoEncoder *this@<X0>, uint64_t *a2@<X8>)
{
  {
    unint64_t v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  v4 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  uint64_t v5 = (WebKit::LibWebRTCCodecs::Encoder *)*((void *)this + 1);

  return WebKit::LibWebRTCCodecs::flushEncoder((atomic_uchar *)v4, v5, a2);
}

uint64_t WebKit::RemoteVideoEncoder::reset(uint64_t this)
{
  *(unsigned char *)(*(void *)(this + 16) + 24) = 1;
  return this;
}

uint64_t WebKit::RemoteVideoEncoder::close(uint64_t this)
{
  *(unsigned char *)(*(void *)(this + 16) + 24) = 1;
  return this;
}

uint64_t WebKit::RemoteVideoFrameProxy::properties@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(_OWORD *)(a4 + 16) = *(_OWORD *)(a3 + 16);
  *(unsigned char *)(a4 + 32) = *(unsigned char *)(a3 + 32);
  *(_WORD *)(a4 + 34) = *(_WORD *)(a3 + 34);
  float v6 = ceilf((*(float (**)(uint64_t))(*(void *)a3 + 16))(a3));
  uint64_t v8 = 0x7FFFFFFFLL;
  uint64_t v9 = 0x80000000;
  if (v6 > -2147500000.0) {
    uint64_t v9 = (int)v6;
  }
  if (v6 < 2147500000.0) {
    uint64_t v8 = v9;
  }
  float v10 = ceilf(v7);
  if (v10 >= 2147500000.0)
  {
    unint64_t v11 = 0x7FFFFFFF00000000;
  }
  else if (v10 <= -2147500000.0)
  {
    unint64_t v11 = 0x8000000000000000;
  }
  else
  {
    unint64_t v11 = (unint64_t)(int)v10 << 32;
  }
  *(void *)(a4 + 36) = v11 | v8;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3);
  *(_DWORD *)(a4 + 44) = result;
  *(void *)(a4 + 48) = *(void *)(a3 + 36);
  return result;
}

uint64_t WebKit::RemoteVideoFrameProxy::RemoteVideoFrameProxy(uint64_t a1, atomic_uchar *volatile *a2, atomic_uint *a3, uint64_t a4)
{
  uint64_t v8 = (void *)WebCore::VideoFrame::VideoFrame();
  char v9 = 0;
  *uint64_t v8 = &unk_1EE9EDB90;
  v8[6] = 0;
  atomic_uchar *volatile v10 = *a2;
  int v11 = 1;
  atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
  if (v9) {
    MEMORY[0x19972E8D0](v10);
  }
  ++*((void *)v10 + 1);
  atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
  *(void *)(a1 + 56) = a2;
  uint64_t v12 = *(void *)(a4 + 8);
  *(void *)(a1 + 64) = *(void *)a4;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = v12;
  *(unsigned char *)(a1 + 88) = 1;
  *(void *)(a1 + 96) = *(void *)(a4 + 36);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a4 + 44);
  atomic_fetch_add(a3, 1u);
  *(void *)(a1 + 112) = a3;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  return a1;
}

void WebKit::RemoteVideoFrameProxy::~RemoteVideoFrameProxy(WebKit::RemoteVideoFrameProxy *this)
{
  uint64_t v2 = *((void *)this + 7);
  if (v2)
  {
    if (!*((unsigned char *)this + 88))
    {
      __break(1u);
      return;
    }
    uint64_t v3 = *((void *)this + 8);
    uint64_t v4 = *((void *)this + 10);
    *((void *)this + 10) = v4 + 1;
    *(void *)&long long v24 = v3;
    *((void *)&v24 + 1) = v4;
    unint64_t v25 = atomic_exchange((atomic_ullong *volatile)this + 9, 0);
    uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v5 = 1418;
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 66) = (char *)v5 + 16;
    *((void *)v5 + 67) = 512;
    *((void *)v5 + 68) = 0;
    *((void *)v5 + 70) = 0;
    *((void *)v5 + 69) = 0;
    IPC::Encoder::encodeHeader(v5);
    uint64_t v26 = v5;
    IPC::ArgumentCoder<IPC::ObjectIdentifierWriteReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v5, &v24);
    IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v26, 1, 0);
    float v7 = v26;
    uint64_t v26 = 0;
    if (v7)
    {
      IPC::Encoder::~Encoder(v7, v6);
      WTF::fastFree(v21, v22);
    }
  }
  uint64_t v8 = (const void *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v8) {
    CFRelease(v8);
  }
  char v9 = (unsigned int *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v9) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v9);
  }
  atomic_uchar *volatile v10 = (atomic_uchar *volatile *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v10)
  {
    char v11 = 0;
    atomic_uchar *volatile v12 = *v10;
    atomic_compare_exchange_strong_explicit(*v10, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
    if (v11) {
      MEMORY[0x19972E8D0](v12);
    }
    uint64_t v13 = *((void *)v12 + 1);
    uint64_t v14 = v13 - 1;
    *((void *)v12 + 1) = v13 - 1;
    if (v13 == 1)
    {
      uint64_t v23 = *((void *)v12 + 2);
      uint64_t v16 = *((void *)v12 + 3);
      *((void *)v12 + 3) = 0;
      BOOL v15 = v23 == 0;
    }
    else
    {
      BOOL v15 = 0;
      uint64_t v16 = 0;
    }
    int v17 = 1;
    atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v17, 0, memory_order_release, memory_order_relaxed);
    if (v17 == 1)
    {
      if (!v14) {
        goto LABEL_16;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v12);
      if (!v14)
      {
LABEL_16:
        uint64_t v18 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v18 = &unk_1EE9B37E8;
        *(void *)(v18 + 8) = v12;
        *(void *)(v18 + 16) = v16;
        *(unsigned char *)(v18 + 24) = v15;
        *(void *)&long long v24 = v18;
        WTF::ensureOnMainRunLoop();
        uint64_t v19 = v24;
        *(void *)&long long v24 = 0;
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
        }
      }
    }
  }
  unint64_t v20 = (unsigned int *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v20)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v20 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v20 + 2);
      (*(void (**)(unsigned int *))(*(void *)v20 + 8))(v20);
    }
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteVideoFrameProxy::~RemoteVideoFrameProxy(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteVideoFrameProxy::pixelFormat(WebKit::RemoteVideoFrameProxy *this)
{
  return *((unsigned int *)this + 26);
}

uint64_t WebKit::RemoteVideoFrameProxy::pixelBuffer(WebKit::RemoteVideoFrameProxy *this)
{
  do
  {
    v1 = this;
    this = (WebKit::RemoteVideoFrameProxy *)*((void *)this + 6);
  }
  while (this);
  char v2 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v1 + 120, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (WebKit::RemoteVideoFrameProxy *)MEMORY[0x19972E8D0]((char *)v1 + 120);
  }
  uint64_t v3 = *((void *)v1 + 16);
  if (!v3)
  {
    uint64_t v4 = *((void *)v1 + 14);
    if (!v4)
    {
LABEL_37:
      WebCore::createBlackPixelBuffer((WebCore *)*((int *)v1 + 24));
      CFTypeRef v30 = cf;
      CFTypeRef cf = 0;
      uint8x8_t v31 = (const void *)*((void *)v1 + 16);
      *((void *)v1 + 16) = v30;
      if (v31)
      {
        CFRelease(v31);
        CFTypeRef v34 = cf;
        CFTypeRef cf = 0;
        if (v34) {
          CFRelease(v34);
        }
      }
      uint64_t v3 = *((void *)v1 + 16);
      goto LABEL_39;
    }
    *((void *)v1 + 14) = 0;
    char isMainRunLoop = WTF::isMainRunLoop(this);
    {
LABEL_47:
      uint64_t v35 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v35);
    }
    float v6 = (WTF::ApproximateTime *)WebKit::WebProcess::singleton(void)::process;
    if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 764)) {
      char v7 = 0;
    }
    else {
      char v7 = isMainRunLoop;
    }
    if ((v7 & 1) == 0)
    {
      char v15 = *(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 764) == 0;
      LOWORD(v39) = 0;
      BYTE2(v39) = 0;
      uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x18);
      *uint64_t v16 = &unk_1EE9EE710;
      v16[1] = v1;
      v16[2] = &v39;
      CFTypeRef cf = v16;
      WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getVideoFrameBuffer(*(void *)(v4 + 8), (uint64_t)v1, v15, (uint64_t *)&cf);
      CFTypeRef v17 = cf;
      CFTypeRef cf = 0;
      if (v17) {
        (*(void (**)(CFTypeRef))(*(void *)v17 + 8))(v17);
      }
      CFTypeRef cf = (CFTypeRef)0x7FF0000000000000;
      LODWORD(v37) = 0;
      WTF::BinarySemaphore::waitUntil();
LABEL_36:
      WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v4);
      uint64_t v3 = *((void *)v1 + 16);
      if (v3) {
        goto LABEL_39;
      }
      goto LABEL_37;
    }
    uint64_t v8 = (WebKit::RemoteVideoFrameProxy *)*((void *)v1 + 6);
    char v9 = (IPC::Decoder *)*((void *)v1 + 7);
    if (v8)
    {
      if (*((unsigned char *)v8 + 88))
      {
LABEL_13:
        atomic_fetch_add((atomic_ullong *volatile)v8 + 9, 1uLL);
        atomic_uchar *volatile v10 = (const void *)*((void *)v8 + 10);
        char v11 = (const void *)*((void *)v8 + 8);
        WTF::ApproximateTime::now(v6);
        double v13 = v12 + 10.0;
        uint64_t v42 = 0;
        IPC::Connection::createSyncMessageEncoder(3736, 0, &v42, &v41);
        CFTypeRef cf = v11;
        CFTypeRef v37 = v10;
        IPC::ArgumentCoder<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v41, (uint64_t *)&cf);
        IPC::Connection::sendSyncMessage((uint64_t)v9, v42, (uint64_t *)&v41, 0, (uint64_t)&v39, v13);
        int v14 = v40;
        if (v40)
        {
          if (v40 == 1)
          {
            LOBYTE(cf) = (_BYTE)v39;
LABEL_22:
            int v38 = v14;
            int v20 = v14;
            goto LABEL_23;
          }
LABEL_46:
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_47;
        }
        char v9 = v39;
        IPC::Decoder::decode<WTF::RetainPtr<__CVBuffer *>>(v39, (uint64_t)&cf);
        if ((_BYTE)v37)
        {
          if (!v40)
          {
            CFTypeRef v18 = cf;
            uint64_t v19 = v39;
            uint64_t v39 = 0;
            CFTypeRef cf = v19;
            CFTypeRef v37 = v18;
            goto LABEL_22;
          }
          goto LABEL_46;
        }
LABEL_29:
        unint64_t v21 = *(void **)v9;
        uint64_t v24 = *((void *)v9 + 1);
        *(void *)char v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v25 = *((void *)v9 + 3);
        if (v25 && v24) {
          (*(void (**)(uint64_t, void *))(*(void *)v25 + 16))(v25, v21);
        }
        LOBYTE(cf) = 13;
        int v14 = 1;
        int v38 = 1;
        int v20 = v40;
        if (v40 == -1)
        {
LABEL_24:
          uint64_t v22 = v41;
          v41 = 0;
          if (v22)
          {
            IPC::Encoder::~Encoder(v22, v21);
            WTF::fastFree(v26, v27);
            if (v14) {
              goto LABEL_26;
            }
          }
          else if (v14)
          {
LABEL_26:
            uint64_t v23 = 1;
LABEL_35:
            ((void (*)(IPC::Decoder **, CFTypeRef *))off_1EE9EE090[v23])(&v39, &cf);
            goto LABEL_36;
          }
          uint64_t v23 = 0;
          CFTypeRef v28 = v37;
          CFTypeRef v37 = 0;
          uint8x8_t v29 = (const void *)*((void *)v1 + 16);
          *((void *)v1 + 16) = v28;
          if (v29)
          {
            CFRelease(v29);
            uint64_t v23 = 0;
          }
          goto LABEL_35;
        }
LABEL_23:
        ((void (*)(char *, IPC::Decoder **))off_1EE9EE728[v20])(&v43, &v39);
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v8 = v1;
      if (*((unsigned char *)v1 + 88)) {
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_29;
  }
LABEL_39:
  int v32 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v1 + 120, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
  if (v32 != 1) {
    WTF::Lock::unlockSlow((WebKit::RemoteVideoFrameProxy *)((char *)v1 + 120));
  }
  return v3;
}

uint64_t WebKit::RemoteVideoFrameProxy::clone@<X0>(atomic_uint *this@<X0>, void *a2@<X8>)
{
  WTF::fastMalloc((WTF *)0x88);
  uint64_t result = WebCore::VideoFrame::VideoFrame();
  *(void *)uint64_t result = &unk_1EE9EDB90;
  atomic_fetch_add(this + 2, 1u);
  *(void *)(result + 48) = this;
  *(void *)(result + 56) = 0;
  *(unsigned char *)(result + 64) = 0;
  *(unsigned char *)(result + 88) = 0;
  *(void *)(result + 96) = *((void *)this + 12);
  *(_DWORD *)(result + 104) = this[26];
  *(void *)(result + 112) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *a2 = result;
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *(atomic_uchar **)(a1 + 8);
  if (v4) {
    uint64_t v5 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  }
  else {
    uint64_t v5 = 0;
  }
  float v6 = (void *)WTF::fastMalloc((WTF *)0x28);
  *float v6 = &unk_1EE9EE748;
  v6[1] = v3;
  v6[2] = v5;
  v6[3] = a1;
  v6[4] = a1;
  uint64_t v8 = v6;
  WebCore::SourceBufferPrivate::ensureOnDispatcher();
  uint64_t result = (uint64_t)v8;
  if (v8) {
    return (*(uint64_t (**)(void *))(*v8 + 8))(v8);
  }
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::SourceBufferPrivateRemote(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  WebKit::MediaSourcePrivateRemote::queue((WebKit::MediaSourcePrivateRemote *)a1);
  WebCore::SourceBufferPrivate::SourceBufferPrivate();
  *(void *)a1 = &unk_1EE9EDBF0;
  atomic_uchar *volatile v10 = *(atomic_uchar **)(a2 + 24);
  if (v10) {
    atomic_uchar *volatile v10 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v10);
  }
  *(void *)(a1 + 312) = v10;
  *(void *)(a1 + 320) = a2;
  char v11 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v11 = &unk_1EE9B71B0;
  v11[1] = 0;
  uint64_t v12 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v12 = 0;
  *(_OWORD *)(v12 + 8) = xmmword_1994F5F10;
  *(void *)(v12 + 24) = v11;
  v11[2] = v12;
  void *v11 = &unk_1EE9BAE68;
  double v13 = *(atomic_uchar **)(a1 + 8);
  if (v13) {
    double v13 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v13);
  }
  v11[3] = v13;
  v11[4] = a1;
  *(void *)(a1 + 328) = v11;
  *(void *)(a1 + 336) = a3;
  int v14 = *(atomic_uchar **)(a5 + 48);
  if (v14) {
    int v14 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v14);
  }
  *(void *)(a1 + 344) = v14;
  *(void *)(a1 + 352) = a5;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 367) = 0;
  *(_DWORD *)(a1 + 384) = 10000000;
  *(unsigned char *)(a1 + 388) = 1;
  *(unsigned char *)(a1 + 392) = 0;
  uint64_t v15 = a4[29];
  atomic_fetch_add((atomic_uint *volatile)(v15 + 8), 1u);
  *(void *)(a1 + 400) = v15;
  uint64_t v16 = a4[30];
  uint64_t v17 = a4[31] + 1;
  a4[31] = v17;
  unint64_t v18 = v16 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v17;
  *(void *)(a1 + 408) = v18;
  v22[0] = "SourceBufferPrivateRemote";
  v22[1] = 26;
  v22[2] = "SourceBufferPrivateRemote";
  v22[3] = v18;
  if (*(unsigned char *)(v15 + 12)) {
    int v14 = (atomic_uchar *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v22);
  }
  uint64_t v19 = *(void *)(a2 + 32);
  uint64_t v20 = WebKit::MediaSourcePrivateRemote::queue((WebKit::MediaSourcePrivateRemote *)v14);
  IPC::Connection::addWorkQueueMessageReceiver(v19, 0x8Fu, v20, *(void *)(a1 + 328), *(void *)(a1 + 336));
  return a1;
}

uint64_t WebKit::SourceBufferPrivateRemote::logger(WebKit::SourceBufferPrivateRemote *this)
{
  return *((void *)this + 50);
}

char *WebKit::SourceBufferPrivateRemote::logChannel(WebKit::SourceBufferPrivateRemote *this)
{
  return &WebKit2LogMedia;
}

const char *WebKit::SourceBufferPrivateRemote::logClassName(WebKit::SourceBufferPrivateRemote *this)
{
  return "SourceBufferPrivateRemote";
}

uint64_t WebKit::SourceBufferPrivateRemote::logIdentifier(WebKit::SourceBufferPrivateRemote *this)
{
  return *((void *)this + 51);
}

void WebKit::SourceBufferPrivateRemote::~SourceBufferPrivateRemote(WebKit::SourceBufferPrivateRemote *this, void *a2)
{
  uint64_t v3 = *((void *)this + 50);
  uint64_t v4 = *((void *)this + 51);
  v11[0] = "SourceBufferPrivateRemote";
  v11[1] = 26;
  v11[2] = "~SourceBufferPrivateRemote";
  v11[3] = v4;
  if (*(unsigned char *)(v3 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v11);
  }
  uint64_t v5 = (atomic_uchar *)*((void *)this + 39);
  if (v5)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v5, *((void *)this + 40), v11);
    if (v11[0])
    {
      IPC::Connection::removeWorkQueueMessageReceiver(*(void *)(v11[0] + 32), 0x8Fu, *((void *)this + 42));
      uint64_t v6 = v11[0];
      v11[0] = 0;
      if (v6) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 24), a2);
      }
    }
  }
  char v7 = (unsigned int *)*((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7 + 2);
    (*(void (**)(unsigned int *))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = (atomic_uchar *)*((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v8) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v8, a2);
  }
  uint64_t v9 = *((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v9) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v9 + 16), a2);
  }
  atomic_uchar *volatile v10 = (atomic_uchar *)*((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v10) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v10, a2);
  }
  WebCore::SourceBufferPrivate::~SourceBufferPrivate(this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::SourceBufferPrivateRemote::~SourceBufferPrivateRemote(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t *WebKit::SourceBufferPrivateRemote::append@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 32);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 8));
  uint64_t v7 = *a2;
  *a2 = 0;
  v14[0] = 0;
  v14[1] = 0;
  v14[2] = "append";
  v14[3] = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v22, 0, (WTF::Logger::LogSiteIdentifier *)v14);
  uint64_t v8 = v22;
  if (v22)
  {
    atomic_fetch_add((atomic_uint *volatile)(v22 + 8), 1u);
    uint64_t v9 = v22;
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v22 = 0;
  long long v16 = v23;
  long long v17 = v24;
  uint64_t v19 = a1;
  uint64_t v10 = WTF::fastMalloc((WTF *)0x48);
  *(void *)uint64_t v10 = &unk_1EE9EE0C8;
  *(void *)(v10 + 8) = v9;
  uint64_t v15 = 0;
  long long v11 = v17;
  *(_OWORD *)(v10 + 16) = v16;
  *(_OWORD *)(v10 + 32) = v11;
  *(void *)(v10 + 48) = a1;
  *(void *)(v10 + 56) = a1;
  *(void *)(v10 + 64) = v7;
  uint64_t v21 = v10;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 16))(v6, &v21);
  uint64_t v12 = v21;
  uint64_t v21 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v15);
  *a3 = v8;
  return WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v22);
}

void *WebKit::SourceBufferPrivateRemote::abort(WebKit::SourceBufferPrivateRemote *this)
{
  char v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v2 = &unk_1EE9EE770;
  v2[1] = this;
  uint64_t v5 = v2;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*v5 + 8);
    return (void *)v4();
  }
  return result;
}

void *WebKit::SourceBufferPrivateRemote::resetParserState(WebKit::SourceBufferPrivateRemote *this)
{
  char v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v2 = &unk_1EE9EE798;
  v2[1] = this;
  uint64_t v5 = v2;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*v5 + 8);
    return (void *)v4();
  }
  return result;
}

WTF::Lock *WebKit::SourceBufferPrivateRemote::appendInternal@<X0>(uint64_t *a1@<X8>)
{
  char v3 = 4;
  v2[0] = 0;
  v2[1] = 0;
  v2[2] = "appendInternal";
  v2[3] = 0;
  return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>(&v3, (WTF::Logger::LogSiteIdentifier *)v2, a1);
}

void *WebKit::SourceBufferPrivateRemote::removedFromMediaSource(WebKit::SourceBufferPrivateRemote *this)
{
  char v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v2 = &unk_1EE9EE7C0;
  v2[1] = this;
  uint64_t v5 = v2;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*v5 + 8);
    return (void *)v4();
  }
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::isActive(WebKit::SourceBufferPrivateRemote *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 392);
  return v1 & 1;
}

uint64_t WebKit::SourceBufferPrivateRemote::setActive(WebKit::SourceBufferPrivateRemote *this, char a2)
{
  atomic_store(1u, (unsigned __int8 *)this + 392);
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EE9EE7E8;
  *(void *)(v4 + 8) = this;
  *(unsigned char *)(v4 + 16) = a2;
  uint64_t v7 = v4;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, &v7);
  uint64_t result = v7;
  if (v7)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)v7 + 8);
    return v6();
  }
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::canSwitchToType(WebKit::SourceBufferPrivateRemote *this, const WebCore::ContentType *a2)
{
  unsigned __int8 v8 = 0;
  WTF::String::isolatedCopy();
  *(void *)&long long v6 = this;
  *((void *)&v6 + 1) = &v8;
  uint64_t v3 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v3 = &unk_1EE9EE810;
  *(void *)(v3 + 8) = v5;
  *(_OWORD *)(v3 + 16) = v6;
  uint64_t v7 = v3;
  WTF::callOnMainRunLoopAndWait();
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return v8;
}

uint64_t WebKit::SourceBufferPrivateRemote::setMediaSourceEnded(WebKit::SourceBufferPrivateRemote *this, char a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EE9EE848;
  *(void *)(v4 + 8) = this;
  *(unsigned char *)(v4 + 16) = a2;
  uint64_t v7 = v4;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, &v7);
  uint64_t result = v7;
  if (v7)
  {
    long long v6 = *(uint64_t (**)(void))(*(void *)v7 + 8);
    return v6();
  }
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::setMode(uint64_t a1, char a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EE9EE870;
  *(void *)(v4 + 8) = a1;
  *(unsigned char *)(v4 + 16) = a2;
  uint64_t v7 = v4;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher(a1, &v7);
  uint64_t result = v7;
  if (v7)
  {
    long long v6 = *(uint64_t (**)(void))(*(void *)v7 + 8);
    return v6();
  }
  return result;
}

uint64_t *WebKit::SourceBufferPrivateRemote::removeCodedFrames@<X0>(WebKit::SourceBufferPrivateRemote *this@<X0>, const WTF::MediaTime *a2@<X1>, const WTF::MediaTime *a3@<X2>, const WTF::MediaTime *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *((void *)this + 4);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)this + 1);
  uint64_t v11 = *(void *)a2;
  v21[3] = 0;
  v22[0] = v11;
  *(void *)((char *)v22 + 5) = *(void *)((char *)a2 + 5);
  *(void *)((char *)&v33 + 3) = *(void *)a3;
  *((void *)&v33 + 1) = *(void *)((char *)a3 + 5);
  *(void *)((char *)&v32 + 3) = *(void *)a4;
  *((void *)&v32 + 1) = *(void *)((char *)a4 + 5);
  v21[0] = 0;
  v21[1] = 0;
  v21[2] = "removeCodedFrames";
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v29, 0, (WTF::Logger::LogSiteIdentifier *)v21);
  uint64_t v12 = v29;
  if (v29)
  {
    atomic_fetch_add((atomic_uint *volatile)(v29 + 8), 1u);
    uint64_t v13 = v29;
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v29 = 0;
  long long v24 = v30;
  long long v25 = v31;
  *(void *)unint64_t v27 = this;
  *(void *)&v27[8] = v22[0];
  *(void *)&v27[13] = *(void *)((char *)v22 + 5);
  *(_OWORD *)&v27[21] = v33;
  *(_OWORD *)&v27[37] = v32;
  uint64_t v14 = WTF::fastMalloc((WTF *)0x70);
  *(void *)uint64_t v14 = &unk_1EE9EE278;
  *(void *)(v14 + 8) = v13;
  uint64_t v23 = 0;
  long long v15 = v25;
  *(_OWORD *)(v14 + 16) = v24;
  *(_OWORD *)(v14 + 32) = v15;
  *(void *)(v14 + 48) = this;
  uint64_t v16 = *(void *)&v27[45];
  long long v17 = *(_OWORD *)&v27[32];
  long long v18 = *(_OWORD *)v27;
  *(_OWORD *)(v14 + 72) = *(_OWORD *)&v27[16];
  *(_OWORD *)(v14 + 88) = v17;
  *(void *)(v14 + 101) = v16;
  *(_OWORD *)(v14 + 56) = v18;
  uint64_t v28 = v14;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 16))(v10, &v28);
  uint64_t v19 = v28;
  uint64_t v28 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v26 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v23);
  *a5 = v12;
  return WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v29);
}

uint64_t WebKit::SourceBufferPrivateRemote::evictCodedFrames(WebKit::SourceBufferPrivateRemote *this, WTF::String *a2, const WTF::MediaTime *a3)
{
  unint64_t v12 = (unint64_t)a2;
  if (WebKit::SourceBufferPrivateRemote::canAppend((atomic_uchar *)this))
  {
    uint64_t result = WebKit::SourceBufferPrivateRemote::isBufferFullFor(this, a2);
    if (result)
    {
      *(void *)&long long v9 = *(void *)a3;
      *(void *)((char *)&v9 + 5) = *(void *)((char *)a3 + 5);
      uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x28);
      *uint64_t v7 = &unk_1EE9EE898;
      v7[1] = this;
      v7[2] = a2;
      v7[3] = v9;
      *(void *)((char *)v7 + 29) = *(void *)((char *)&v9 + 5);
      uint64_t v11 = v7;
      WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v11);
      if (v11) {
        (*(void (**)(void *))(*v11 + 8))(v11);
      }
      return 0;
    }
  }
  else
  {
    unsigned __int8 v8 = (void *)WTF::fastMalloc((WTF *)0x20);
    *unsigned __int8 v8 = &unk_1EE9EE8C0;
    v8[1] = this;
    v8[2] = &v12;
    v8[3] = a3;
    uint64_t v10 = v8;
    WTF::callOnMainRunLoopAndWait();
    if (v10) {
      (*(void (**)(void *))(*v10 + 8))(v10);
    }
    return WebKit::SourceBufferPrivateRemote::isBufferFullFor(this, (WTF::String *)v12);
  }
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::canAppend(atomic_uchar *this)
{
  char v2 = 0;
  uint64_t v3 = this + 370;
  int v4 = 1;
  atomic_compare_exchange_strong_explicit(this + 370, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this + 370);
  }
  uint64_t canAppend = WebCore::SourceBufferPrivate::canAppend((WebCore::SourceBufferPrivate *)this);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return canAppend;
}

uint64_t WebKit::SourceBufferPrivateRemote::isBufferFullFor(WebKit::SourceBufferPrivateRemote *this, WTF::String *a2)
{
  char v3 = 0;
  v50[1] = *MEMORY[0x1E4F143B8];
  int v4 = (WebKit::SourceBufferPrivateRemote *)((char *)this + 370);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 370, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    MEMORY[0x19972E8D0]((char *)this + 370);
  }
  uint64_t v5 = *((void *)this + 50);
  uint64_t v6 = *((void *)this + 51);
  v35[0] = "SourceBufferPrivateRemote";
  v35[1] = 26;
  v35[2] = "isBufferFullFor";
  v35[3] = v6;
  if (*(unsigned char *)(v5 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v41, (WTF::Logger::LogSiteIdentifier *)v35);
    WTF::String::String((WTF::String *)&v40, "requiredSize:");
    WTF::String::number(a2);
    WTF::String::String((WTF::String *)&v38, " evictionData:");
    WTF::makeString<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,long long,WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(&v37, *((void *)this + 5), *((void *)this + 6), *((void *)this + 7), *((void *)this + 8));
    v36[0] = v40;
    uint64_t v45 = v39;
    *(void *)buf = v41;
    uint64_t v7 = (WTF::StringImpl *)v37;
    uint64_t v43 = v37;
    int v44 = v38;
    uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v36, (uint64_t *)&v45, (uint64_t *)&v44, &v43, &v42);
    if (!v42)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v37 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v9);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v10 = v38;
    int v38 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    uint64_t v11 = v39;
    uint64_t v39 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    unint64_t v12 = v40;
    int v40 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v9);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t v13 = v41;
    v41 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v9);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v14 = qword_1EB358078;
    long long v15 = (WTF *)os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_DEFAULT);
    if (v15)
    {
      WTF::String::utf8();
      long long v17 = v36[0] ? (char *)v36[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = v17;
      _os_log_impl(&dword_1985F2000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      long long v15 = v36[0];
      v36[0] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1) {
          long long v15 = (WTF *)WTF::fastFree(v15, v16);
        }
        else {
          --*(_DWORD *)v15;
        }
      }
    }
    if (WebKit2LogMedia)
    {
      long long v18 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v19 = *v18;
        if (v19) {
          break;
        }
        int v20 = *v18;
        atomic_compare_exchange_strong_explicit(v18, (unsigned __int8 *)&v20, v19 | 1, memory_order_acquire, memory_order_acquire);
        if (v20 == v19)
        {
          long long v32 = v4;
          uint64_t v21 = WTF::Logger::observers(v15);
          uint64_t v22 = *(unsigned int *)(v21 + 12);
          if (v22)
          {
            uint64_t v23 = *(uint64_t **)v21;
            uint64_t v33 = *(void *)v21 + 8 * v22;
            do
            {
              uint64_t v24 = *v23;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)v35);
              int v47 = 0;
              WTF::String::String((WTF::String *)v48, "requiredSize:");
              v48[2] = 0;
              WTF::String::number(a2);
              v48[6] = 0;
              WTF::String::String((WTF::String *)v49, " evictionData:");
              v49[2] = 0;
              WTF::makeString<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,long long,WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(v50, *((void *)this + 5), *((void *)this + 6), *((void *)this + 7), *((void *)this + 8));
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v36, (uint64_t)buf, 5uLL);
              (*(void (**)(uint64_t, char *, void, WTF **))(*(void *)v24 + 16))(v24, &WebKit2LogMedia, 0, v36);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v36, v25);
              for (uint64_t i = 72; i != -8; i -= 16)
              {
                unint64_t v27 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v27)
                {
                  if (*(_DWORD *)v27 == 2) {
                    WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v16);
                  }
                  else {
                    *(_DWORD *)v27 -= 2;
                  }
                }
              }
              ++v23;
            }
            while (v23 != (uint64_t *)v33);
          }
          int v28 = 1;
          atomic_compare_exchange_strong_explicit(v18, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
          int v4 = v32;
          if (v28 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v29 = v42;
    uint64_t v42 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v16);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
  }
  uint64_t isBufferFullFor = WebCore::SourceBufferPrivate::isBufferFullFor(this);
  int v31 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 370, (unsigned __int8 *)&v31, 0, memory_order_release, memory_order_relaxed);
  if (v31 != 1) {
    WTF::Lock::unlockSlow(v4);
  }
  return isBufferFullFor;
}

uint64_t WebKit::SourceBufferPrivateRemote::addTrackBuffer(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v4 = &unk_1EE9EE8F8;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v7 = v4;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher(a1, (uint64_t *)&v7);
  uint64_t result = (uint64_t)v7;
  if (v7)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*v7 + 8);
    return v6();
  }
  return result;
}

void *WebKit::SourceBufferPrivateRemote::resetTrackBuffers(WebKit::SourceBufferPrivateRemote *this)
{
  char v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v2 = &unk_1EE9EE920;
  v2[1] = this;
  uint64_t v5 = v2;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    int v4 = *(uint64_t (**)(void))(*v5 + 8);
    return (void *)v4();
  }
  return result;
}

void *WebKit::SourceBufferPrivateRemote::clearTrackBuffers(atomic_uchar *this)
{
  char v2 = 0;
  char v3 = this + 370;
  int v4 = 1;
  atomic_compare_exchange_strong_explicit(this + 370, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this + 370);
  }
  *((void *)this + 8) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1EE9EE948;
  v5[1] = this;
  unsigned __int8 v8 = v5;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v8);
  uint64_t result = v8;
  if (v8)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*v8 + 8);
    return (void *)v7();
  }
  return result;
}

void *WebKit::SourceBufferPrivateRemote::setAllTrackBuffersNeedRandomAccess(WebKit::SourceBufferPrivateRemote *this)
{
  char v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v2 = &unk_1EE9EE970;
  v2[1] = this;
  uint64_t v5 = v2;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    int v4 = *(uint64_t (**)(void))(*v5 + 8);
    return (void *)v4();
  }
  return result;
}

void *WebKit::SourceBufferPrivateRemote::setGroupStartTimestamp(WebKit::SourceBufferPrivateRemote *this, const WTF::MediaTime *a2)
{
  *(void *)&long long v6 = *(void *)a2;
  *(void *)((char *)&v6 + 5) = *(void *)((char *)a2 + 5);
  char v3 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v3 = &unk_1EE9EE998;
  v3[1] = this;
  v3[2] = v6;
  *(void *)((char *)v3 + 21) = *(void *)((char *)&v6 + 5);
  uint64_t v7 = v3;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v7);
  uint64_t result = v7;
  if (v7)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*v7 + 8);
    return (void *)v5();
  }
  return result;
}

void *WebKit::SourceBufferPrivateRemote::setGroupStartTimestampToEndTimestamp(WebKit::SourceBufferPrivateRemote *this)
{
  char v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v2 = &unk_1EE9EE9C0;
  v2[1] = this;
  uint64_t v5 = v2;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    int v4 = *(uint64_t (**)(void))(*v5 + 8);
    return (void *)v4();
  }
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::setShouldGenerateTimestamps(WebKit::SourceBufferPrivateRemote *this, char a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EE9EE9E8;
  *(void *)(v4 + 8) = this;
  *(unsigned char *)(v4 + 16) = a2;
  uint64_t v7 = v4;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, &v7);
  uint64_t result = v7;
  if (v7)
  {
    long long v6 = *(uint64_t (**)(void))(*(void *)v7 + 8);
    return v6();
  }
  return result;
}

void *WebKit::SourceBufferPrivateRemote::reenqueueMediaIfNeeded(WebKit::SourceBufferPrivateRemote *this, const WTF::MediaTime *a2)
{
  *(void *)&long long v6 = *(void *)a2;
  *(void *)((char *)&v6 + 5) = *(void *)((char *)a2 + 5);
  char v3 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v3 = &unk_1EE9EEA10;
  v3[1] = this;
  v3[2] = v6;
  *(void *)((char *)v3 + 21) = *(void *)((char *)&v6 + 5);
  uint64_t v7 = v3;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v7);
  uint64_t result = v7;
  if (v7)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*v7 + 8);
    return (void *)v5();
  }
  return result;
}

void *WebKit::SourceBufferPrivateRemote::resetTimestampOffsetInTrackBuffers(WebKit::SourceBufferPrivateRemote *this)
{
  char v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v2 = &unk_1EE9EEA38;
  v2[1] = this;
  uint64_t v5 = v2;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*v5 + 8);
    return (void *)v4();
  }
  return result;
}

void *WebKit::SourceBufferPrivateRemote::startChangingType(WebKit::SourceBufferPrivateRemote *this)
{
  char v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v2 = &unk_1EE9EEA60;
  v2[1] = this;
  uint64_t v5 = v2;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*v5 + 8);
    return (void *)v4();
  }
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::timestampOffset(atomic_uchar *this)
{
  char v2 = 0;
  char v3 = this + 370;
  int v4 = 1;
  atomic_compare_exchange_strong_explicit(this + 370, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this + 370);
  }
  uint64_t v5 = *((void *)this + 47);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v5;
}

void *WebKit::SourceBufferPrivateRemote::setTimestampOffset(WebKit::SourceBufferPrivateRemote *this, const WTF::MediaTime *a2)
{
  char v4 = 0;
  uint64_t v5 = (char *)this + 370;
  int v6 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 370, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0]((char *)this + 370);
  }
  uint64_t v7 = *(void *)a2;
  *(void *)((char *)this + 381) = *(void *)((char *)a2 + 5);
  *((void *)this + 47) = v7;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  *(void *)&long long v11 = *(void *)a2;
  *(void *)((char *)&v11 + 5) = *(void *)((char *)a2 + 5);
  unsigned __int8 v8 = (void *)WTF::fastMalloc((WTF *)0x20);
  *unsigned __int8 v8 = &unk_1EE9EEA88;
  v8[1] = this;
  v8[2] = v11;
  *(void *)((char *)v8 + 21) = *(void *)((char *)&v11 + 5);
  unint64_t v12 = v8;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v12);
  uint64_t result = v12;
  if (v12)
  {
    uint64_t v10 = *(uint64_t (**)(void))(*v12 + 8);
    return (void *)v10();
  }
  return result;
}

void *WebKit::SourceBufferPrivateRemote::setAppendWindowStart(WebKit::SourceBufferPrivateRemote *this, const WTF::MediaTime *a2)
{
  *(void *)&long long v6 = *(void *)a2;
  *(void *)((char *)&v6 + 5) = *(void *)((char *)a2 + 5);
  char v3 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v3 = &unk_1EE9EEAB0;
  v3[1] = this;
  v3[2] = v6;
  *(void *)((char *)v3 + 21) = *(void *)((char *)&v6 + 5);
  uint64_t v7 = v3;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v7);
  uint64_t result = v7;
  if (v7)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*v7 + 8);
    return (void *)v5();
  }
  return result;
}

void *WebKit::SourceBufferPrivateRemote::setAppendWindowEnd(WebKit::SourceBufferPrivateRemote *this, const WTF::MediaTime *a2)
{
  *(void *)&long long v6 = *(void *)a2;
  *(void *)((char *)&v6 + 5) = *(void *)((char *)a2 + 5);
  char v3 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v3 = &unk_1EE9EEAD8;
  v3[1] = this;
  v3[2] = v6;
  *(void *)((char *)v3 + 21) = *(void *)((char *)&v6 + 5);
  uint64_t v7 = v3;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v7);
  uint64_t result = v7;
  if (v7)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*v7 + 8);
    return (void *)v5();
  }
  return result;
}

uint64_t *WebKit::SourceBufferPrivateRemote::setMaximumBufferSize@<X0>(atomic_uchar *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char v6 = 0;
  uint64_t v7 = this + 370;
  int v8 = 1;
  atomic_compare_exchange_strong_explicit(this + 370, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x19972E8D0](this + 370);
  }
  *((void *)this + 7) = a2;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  long long v14 = 0uLL;
  long long v15 = "setMaximumBufferSize";
  *(void *)&long long v16 = 0;
  WTF::NativePromiseProducer<void,void,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v19, 0, (WTF::Logger::LogSiteIdentifier *)&v14);
  uint64_t v9 = v19;
  if (v19)
  {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 8), 1u);
    uint64_t v10 = v19;
  }
  else
  {
    uint64_t v10 = 0;
  }
  *a3 = v9;
  *(void *)&long long v14 = this;
  *((void *)&v14 + 1) = a2;
  uint64_t v19 = 0;
  long long v16 = v20;
  long long v17 = v21;
  uint64_t v11 = WTF::fastMalloc((WTF *)0x40);
  *(void *)uint64_t v11 = &unk_1EE9EEB00;
  *(_OWORD *)(v11 + 8) = v14;
  long long v15 = 0;
  *(void *)(v11 + 24) = v10;
  long long v12 = v17;
  *(_OWORD *)(v11 + 32) = v16;
  *(_OWORD *)(v11 + 48) = v12;
  uint64_t v18 = v11;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, &v18);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer((uint64_t *)&v15);
  return WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer(&v19);
}

uint64_t *WebKit::SourceBufferPrivateRemote::computeSeekTime@<X0>(WebKit::SourceBufferPrivateRemote *this@<X0>, const WebCore::SeekTarget *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *((void *)this + 4);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)this + 1);
  long long v7 = *((_OWORD *)a2 + 1);
  long long v18 = *(_OWORD *)a2;
  long long v19 = v7;
  long long v20 = *((_OWORD *)a2 + 2);
  v17[0] = 0;
  v17[1] = 0;
  v17[2] = "computeSeekTime";
  v17[3] = 0;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v27, 0, (WTF::Logger::LogSiteIdentifier *)v17);
  uint64_t v8 = v27;
  if (v27)
  {
    atomic_fetch_add((atomic_uint *volatile)(v27 + 8), 1u);
    uint64_t v9 = v27;
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v27 = 0;
  long long v22 = v28;
  long long v23 = v29;
  *(void *)long long v25 = this;
  *(_OWORD *)&v25[8] = v18;
  *(_OWORD *)&v25[24] = v19;
  *(_OWORD *)&v25[40] = v20;
  uint64_t v10 = WTF::fastMalloc((WTF *)0x70);
  *(void *)uint64_t v10 = &unk_1EE9EE2F0;
  *(void *)(v10 + 8) = v9;
  uint64_t v21 = 0;
  long long v11 = v23;
  *(_OWORD *)(v10 + 16) = v22;
  *(_OWORD *)(v10 + 32) = v11;
  *(void *)(v10 + 48) = this;
  uint64_t v12 = *(void *)&v25[48];
  long long v13 = *(_OWORD *)&v25[32];
  long long v14 = *(_OWORD *)v25;
  *(_OWORD *)(v10 + 72) = *(_OWORD *)&v25[16];
  *(_OWORD *)(v10 + 88) = v13;
  *(void *)(v10 + 104) = v12;
  *(_OWORD *)(v10 + 56) = v14;
  uint64_t v26 = v10;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 16))(v6, &v26);
  uint64_t v15 = v26;
  uint64_t v26 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v24 = 0;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v21);
  *a3 = v8;
  return WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v27);
}

void *WebKit::SourceBufferPrivateRemote::seekToTime(WebKit::SourceBufferPrivateRemote *this, const WTF::MediaTime *a2)
{
  *(void *)&long long v6 = *(void *)a2;
  *(void *)((char *)&v6 + 5) = *(void *)((char *)a2 + 5);
  char v3 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v3 = &unk_1EE9EEBD0;
  v3[1] = this;
  v3[2] = v6;
  *(void *)((char *)v3 + 21) = *(void *)((char *)&v6 + 5);
  long long v7 = v3;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher((uint64_t)this, (uint64_t *)&v7);
  uint64_t result = v7;
  if (v7)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*v7 + 8);
    return (void *)v5();
  }
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::updateTrackIds(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v5 = &unk_1EE9EEBF8;
  v5[1] = a1;
  v5[2] = v3;
  v5[3] = v4;
  uint64_t v8 = v5;
  WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher(a1, (uint64_t *)&v8);
  uint64_t result = (uint64_t)v8;
  if (v8)
  {
    long long v7 = *(uint64_t (**)(void))(*v8 + 8);
    return v7();
  }
  return result;
}

uint64_t *WebKit::SourceBufferPrivateRemote::bufferedSamplesForTrackId@<X0>(WebKit::SourceBufferPrivateRemote *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *((void *)this + 4);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)this + 1);
  v13[0] = 0;
  v13[1] = 0;
  v13[2] = "bufferedSamplesForTrackId";
  v13[3] = 0;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v20, (WTF::Logger::LogSiteIdentifier *)v13);
  uint64_t v7 = v20;
  if (v20)
  {
    atomic_fetch_add((atomic_uint *volatile)(v20 + 8), 1u);
    uint64_t v8 = v20;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v20 = 0;
  long long v15 = v21;
  long long v16 = v22;
  *(void *)&long long v18 = this;
  *((void *)&v18 + 1) = a2;
  uint64_t v9 = WTF::fastMalloc((WTF *)0x48);
  *(void *)uint64_t v9 = &unk_1EE9EE3B8;
  *(void *)(v9 + 8) = v8;
  uint64_t v14 = 0;
  long long v10 = v16;
  *(_OWORD *)(v9 + 16) = v15;
  *(_OWORD *)(v9 + 32) = v10;
  *(void *)(v9 + 48) = this;
  *(_OWORD *)(v9 + 56) = v18;
  uint64_t v19 = v9;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 16))(v6, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v17 = 0;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v14);
  *a3 = v7;
  return WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v20);
}

uint64_t *WebKit::SourceBufferPrivateRemote::enqueuedSamplesForTrackID@<X0>(WebKit::SourceBufferPrivateRemote *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *((void *)this + 4);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)this + 1);
  v13[0] = 0;
  v13[1] = 0;
  v13[2] = "enqueuedSamplesForTrackID";
  v13[3] = 0;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v20, (WTF::Logger::LogSiteIdentifier *)v13);
  uint64_t v7 = v20;
  if (v20)
  {
    atomic_fetch_add((atomic_uint *volatile)(v20 + 8), 1u);
    uint64_t v8 = v20;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v20 = 0;
  long long v15 = v21;
  long long v16 = v22;
  *(void *)&long long v18 = this;
  *((void *)&v18 + 1) = a2;
  uint64_t v9 = WTF::fastMalloc((WTF *)0x48);
  *(void *)uint64_t v9 = &unk_1EE9EE468;
  *(void *)(v9 + 8) = v8;
  uint64_t v14 = 0;
  long long v10 = v16;
  *(_OWORD *)(v9 + 16) = v15;
  *(_OWORD *)(v9 + 32) = v10;
  *(void *)(v9 + 48) = this;
  *(_OWORD *)(v9 + 56) = v18;
  uint64_t v19 = v9;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 16))(v6, &v19);
  uint64_t v11 = v19;
  uint64_t v19 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v17 = 0;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v14);
  *a3 = v7;
  return WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v20);
}

atomic_uchar *WebKit::SourceBufferPrivateRemote::MessageReceiver::client@<X0>(WebKit::SourceBufferPrivateRemote::MessageReceiver *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (atomic_uchar *)*((void *)this + 3);
  if (!result) {
    goto LABEL_8;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 4), &v7);
  uint64_t result = (atomic_uchar *)v7;
  if (!v7) {
    goto LABEL_8;
  }
  uint64_t result = (atomic_uchar *)WebCore::SourceBufferPrivate::client(v7);
  uint64_t v5 = *a2;
  if (!*a2) {
    *a2 = 0;
  }
  uint64_t v6 = v7;
  uint64_t v7 = 0;
  if (v6) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*((atomic_uchar **)v6 + 1));
  }
  if (!v5) {
LABEL_8:
  }
    *a2 = 0;
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::MessageReceiver::takeOwnershipOfMemory(WebKit::MediaSourcePrivateRemote *a1)
{
  WebKit::MediaSourcePrivateRemote::queue(a1);

  return WebCore::SharedMemoryHandle::takeOwnershipOfMemory();
}

atomic_uchar *WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateDidReceiveInitializationSegment(WebKit::MediaSourcePrivateRemote *a1, uint64_t a2, uint64_t *a3)
{
  WebKit::MediaSourcePrivateRemote::queue(a1);
  uint64_t v6 = (atomic_uchar *)*((void *)a1 + 3);
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v6, *((void *)a1 + 4), &v65);
  }
  else {
    uint64_t v65 = 0;
  }
  WebKit::SourceBufferPrivateRemote::MessageReceiver::client(a1, &v64);
  if (!v64)
  {
    *(_WORD *)v58 = 259;
    uint64_t v18 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v18 + 16))(v18, v58);
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 8))(v18);
    goto LABEL_40;
  }
  uint64_t v7 = *(atomic_uchar **)(v65 + 344);
  if (v7)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v7, *(void *)(v65 + 352), &v63);
    if (v63)
    {
      unint64_t v62 = 0;
      long long v60 = 0u;
      long long v61 = 0u;
      *(void *)v58 = *(void *)a2;
      *(void *)&v58[5] = *(void *)(a2 + 5);
      __n128 v54 = 0uLL;
      uint64_t v9 = *(unsigned int *)(a2 + 28);
      if (v9)
      {
        if (v9 >> 28)
        {
          __break(0xC471u);
          goto LABEL_48;
        }
        uint64_t v10 = WTF::fastMalloc((WTF *)(16 * v9));
        v54.n128_u32[2] = v9;
        v54.n128_u64[0] = v10;
        uint64_t v11 = *(unsigned int *)(a2 + 28);
        if (v11)
        {
          uint64_t v12 = *(unint64_t **)(a2 + 16);
          long long v13 = &v12[3 * v11];
          uint64_t v14 = (void *)(v10 + 8);
          unsigned __int32 v15 = ((unint64_t)(8 * v11 - 8) >> 3) + 1;
          do
          {
            WebKit::RemoteMediaDescription::create((WebKit::RemoteMediaDescription *)&v67, (const WebKit::MediaDescriptionInfo *)v12);
            long long v16 = v67;
            WebKit::MediaPlayerPrivateRemote::audioTrackPrivateRemote(v63, v12[2], &v66);
            uint64_t v17 = v66;
            *(v14 - 1) = v16;
            *uint64_t v14 = v17;
            v14 += 2;
            v12 += 3;
          }
          while (v12 != v13);
          uint64_t v10 = v54.n128_u64[0];
          LODWORD(v9) = v54.n128_u32[2];
        }
        else
        {
          unsigned __int32 v15 = v54.n128_u32[3];
        }
      }
      else
      {
        unsigned __int32 v15 = 0;
        uint64_t v10 = 0;
      }
      __n128 v54 = 0uLL;
      uint64_t v59 = v10;
      *(void *)&long long v60 = __PAIR64__(v15, v9);
      WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::AudioTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v8);
      uint64_t v23 = *(unsigned int *)(a2 + 44);
      if (v23)
      {
        if (v23 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x19911586CLL);
        }
        uint64_t v24 = WTF::fastMalloc((WTF *)(16 * v23));
        uint64_t v25 = v24;
        uint64_t v26 = *(unsigned int *)(a2 + 44);
        if (v26)
        {
          uint64_t v27 = *(unint64_t **)(a2 + 32);
          long long v28 = &v27[3 * v26];
          long long v29 = (unsigned int **)(v24 + 8);
          unsigned int v30 = ((unint64_t)(8 * v26 - 8) >> 3) + 1;
          do
          {
            WebKit::RemoteMediaDescription::create((WebKit::RemoteMediaDescription *)&v54, (const WebKit::MediaDescriptionInfo *)v27);
            unint64_t v31 = v54.n128_u64[0];
            WebKit::MediaPlayerPrivateRemote::videoTrackPrivateRemote(v63, v27[2], &v67);
            long long v32 = v67;
            *(v29 - 1) = (unsigned int *)v31;
            WTF::StringImpl *v29 = v32;
            v29 += 2;
            v27 += 3;
          }
          while (v27 != v28);
        }
        else
        {
          unsigned int v30 = 0;
        }
      }
      else
      {
        unsigned int v30 = 0;
        uint64_t v25 = 0;
      }
      __n128 v54 = 0uLL;
      *((void *)&v60 + 1) = v25;
      *(void *)&long long v61 = __PAIR64__(v30, v23);
      WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::AudioTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v22);
      uint64_t v34 = *(unsigned int *)(a2 + 60);
      if (!v34)
      {
        unsigned int v41 = 0;
        uint64_t v36 = 0;
LABEL_34:
        __n128 v54 = 0uLL;
        *((void *)&v61 + 1) = v36;
        unint64_t v62 = __PAIR64__(v41, v34);
        WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::AudioTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v33);
        int v44 = (WebKit::MediaSourcePrivateRemote *)(*(void *(**)(unsigned int **__return_ptr))(*(void *)v64 + 16))(&v67);
        unint64_t v45 = (unint64_t)v67;
        uint64_t v46 = WebKit::MediaSourcePrivateRemote::queue(v44);
        __n128 v54 = 0uLL;
        char v55 = "sourceBufferPrivateDidReceiveInitializationSegment";
        uint64_t v56 = 0;
        WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError> &&)>>(v45, v46 + 32, a3, &v54, v57);
        WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)v57);
        uint64_t v48 = v67;
        v67 = 0;
        if (v48 && atomic_fetch_add((atomic_uint *volatile)v48 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v48 + 2);
          (*(void (**)(unsigned int *))(*(void *)v48 + 16))(v48);
        }
        WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::AudioTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61 + 8, v47);
        WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::AudioTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60 + 8, v49);
        uint64_t result = (atomic_uchar *)WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::AudioTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v50);
        goto LABEL_38;
      }
      if (!(v34 >> 28))
      {
        uint64_t v35 = WTF::fastMalloc((WTF *)(16 * v34));
        uint64_t v36 = v35;
        uint64_t v37 = *(unsigned int *)(a2 + 60);
        if (v37)
        {
          int v38 = *(unint64_t **)(a2 + 48);
          uint64_t v39 = &v38[3 * v37];
          int v40 = (unsigned int **)(v35 + 8);
          unsigned int v41 = ((unint64_t)(8 * v37 - 8) >> 3) + 1;
          do
          {
            WebKit::RemoteMediaDescription::create((WebKit::RemoteMediaDescription *)&v54, (const WebKit::MediaDescriptionInfo *)v38);
            unint64_t v42 = v54.n128_u64[0];
            WebKit::MediaPlayerPrivateRemote::textTrackPrivateRemote(v63, v38[2], &v67);
            uint64_t v43 = v67;
            *(v40 - 1) = (unsigned int *)v42;
            *int v40 = v43;
            v40 += 2;
            v38 += 3;
          }
          while (v38 != v39);
        }
        else
        {
          unsigned int v41 = 0;
        }
        goto LABEL_34;
      }
      __break(0xC471u);
LABEL_48:
      JUMPOUT(0x199115864);
    }
  }
  else
  {
    v63 = 0;
  }
  *(_WORD *)v58 = 259;
  uint64_t v21 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v21 + 16))(v21, v58);
  uint64_t result = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v21 + 8))(v21);
LABEL_38:
  v51 = v63;
  v63 = 0;
  if (v51) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*((atomic_uchar **)v51 + 6));
  }
LABEL_40:
  uint64_t v52 = v64;
  uint64_t v64 = 0;
  if (v52) {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(v52 + 8), v20);
  }
  uint64_t v53 = v65;
  uint64_t v65 = 0;
  if (v53) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v53 + 8));
  }
  return result;
}

atomic_uchar *WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateEvictionDataChanged(WebKit::MediaSourcePrivateRemote *a1, _OWORD *a2)
{
  WebKit::MediaSourcePrivateRemote::queue(a1);
  uint64_t v4 = (atomic_uchar *)*((void *)a1 + 3);
  if (v4)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v4, *((void *)a1 + 4), &v15);
    uint64_t v5 = v15;
    if (v15)
    {
      char v6 = 0;
      uint64_t v7 = (atomic_uchar *)(v15 + 370);
      int v8 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v15 + 370), (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
      if (v6) {
        MEMORY[0x19972E8D0](v5 + 370);
      }
      uint64_t v9 = v15;
      long long v10 = a2[1];
      *(_OWORD *)(v15 + 40) = *a2;
      *(_OWORD *)(v9 + 56) = v10;
      atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
      if (v8 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v7);
      }
      uint64_t v11 = v15;
      uint64_t v15 = 0;
      if (v11) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v11 + 8));
      }
    }
  }
  WebKit::SourceBufferPrivateRemote::MessageReceiver::client(a1, &v15);
  uint64_t result = (atomic_uchar *)v15;
  if (v15)
  {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v15 + 64))(v15, a2);
    uint64_t v14 = v15;
    uint64_t v15 = 0;
    if (v14) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(v14 + 8), v13);
    }
  }
  return result;
}

atomic_uchar *WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateHighestPresentationTimestampChanged(WebKit::SourceBufferPrivateRemote::MessageReceiver *this, const WTF::MediaTime *a2)
{
  WebKit::MediaSourcePrivateRemote::queue(this);
  WebKit::SourceBufferPrivateRemote::MessageReceiver::client(this, (uint64_t *)&v7);
  uint64_t result = v7;
  if (v7)
  {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *, const WTF::MediaTime *))(*(void *)v7 + 40))(v7, a2);
    uint64_t v6 = (uint64_t)v7;
    uint64_t v7 = 0;
    if (v6) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 8), v5);
    }
  }
  return result;
}

unsigned int *WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateDurationChanged(WebKit::MediaSourcePrivateRemote *a1, uint64_t a2, uint64_t *a3)
{
  WebKit::MediaSourcePrivateRemote::queue(a1);
  WebKit::SourceBufferPrivateRemote::MessageReceiver::client(a1, &v17);
  if (v17)
  {
    uint64_t v5 = (WebKit::MediaSourcePrivateRemote *)(*(void *(**)(unsigned int **__return_ptr))(*(void *)v17 + 32))(&v15);
    unint64_t v6 = (unint64_t)v15;
    uint64_t v7 = WebKit::MediaSourcePrivateRemote::queue(v5);
    __n128 v12 = 0uLL;
    long long v13 = "sourceBufferPrivateDurationChanged";
    uint64_t v14 = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(void)>>(v6, v7 + 32, a3, &v12, v16);
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)v16);
    uint64_t result = v15;
    uint64_t v15 = 0;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
    }
    uint64_t v10 = v17;
    uint64_t v17 = 0;
    if (v10) {
      return (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(v10 + 8), v8);
    }
  }
  else
  {
    uint64_t v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return result;
}

unsigned int *WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateBufferedChanged(WebKit::MediaSourcePrivateRemote *a1, uint64_t a2, uint64_t *a3)
{
  WebKit::MediaSourcePrivateRemote::queue(a1);
  WebKit::SourceBufferPrivateRemote::MessageReceiver::client(a1, &v17);
  if (v17)
  {
    uint64_t v5 = (WebKit::MediaSourcePrivateRemote *)(*(void *(**)(unsigned int **__return_ptr))(*(void *)v17 + 24))(&v15);
    unint64_t v6 = (unint64_t)v15;
    uint64_t v7 = WebKit::MediaSourcePrivateRemote::queue(v5);
    __n128 v12 = 0uLL;
    long long v13 = "sourceBufferPrivateBufferedChanged";
    uint64_t v14 = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::whenSettled<WTF::CompletionHandler<void ()(void)>>(v6, v7 + 32, a3, &v12, v16);
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCommand<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)v16);
    uint64_t result = v15;
    uint64_t v15 = 0;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
    }
    uint64_t v10 = v17;
    uint64_t v17 = 0;
    if (v10) {
      return (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(v10 + 8), v8);
    }
  }
  else
  {
    uint64_t v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return result;
}

atomic_uchar *WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateDidDropSample(WebKit::SourceBufferPrivateRemote::MessageReceiver *this)
{
  WebKit::SourceBufferPrivateRemote::MessageReceiver::client(this, (uint64_t *)&v4);
  uint64_t result = v4;
  if (v4)
  {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v4 + 48))(v4);
    uint64_t v3 = (uint64_t)v4;
    uint64_t v4 = 0;
    if (v3) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 8), v2);
    }
  }
  return result;
}

atomic_uchar *WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateDidReceiveRenderingError(WebKit::SourceBufferPrivateRemote::MessageReceiver *this, uint64_t a2)
{
  WebKit::SourceBufferPrivateRemote::MessageReceiver::client(this, (uint64_t *)&v6);
  uint64_t result = v6;
  if (v6)
  {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *, uint64_t))(*(void *)v6 + 56))(v6, a2);
    uint64_t v5 = (uint64_t)v6;
    unint64_t v6 = 0;
    if (v5) {
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivateClient,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 8), v4);
    }
  }
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateShuttingDown(WebKit::MediaSourcePrivateRemote *a1, uint64_t *a2)
{
  WebKit::MediaSourcePrivateRemote::queue(a1);
  uint64_t v4 = (atomic_uchar *)*((void *)a1 + 3);
  if (v4)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v4, *((void *)a1 + 4), &v8);
    uint64_t v5 = v8;
    if (v8)
    {
      atomic_store(1u, (unsigned __int8 *)(v8 + 368));
      uint64_t v8 = 0;
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v5 + 8));
    }
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
}

uint64_t WebKit::SourceBufferPrivateRemote::totalTrackBufferSizeInBytes(WebKit::SourceBufferPrivateRemote *this)
{
  return *((void *)this + 5);
}

uint64_t WebKit::SourceBufferPrivateRemote::memoryPressure(atomic_uchar *volatile *this, const WTF::MediaTime *a2)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 1);
  *(void *)&long long v6 = *(void *)a2;
  *(void *)((char *)&v6 + 5) = *(void *)((char *)a2 + 5);
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v4 = &unk_1EE9EEC90;
  v4[1] = this;
  v4[2] = this;
  v4[3] = v6;
  *(void *)((char *)v4 + 29) = *(void *)((char *)&v6 + 5);
  uint64_t v7 = (uint64_t)v4;
  WebCore::SourceBufferPrivate::ensureOnDispatcher();
  uint64_t result = v7;
  if (v7) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

uint64_t WebKit::SourceBufferPrivateRemote::minimumUpcomingPresentationTimeForTrackID(WebKit::SourceBufferPrivateRemote *this, uint64_t a2)
{
  uint64_t v6 = a2;
  long long v7 = *(_OWORD *)WTF::MediaTime::invalidTime(this);
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v3 = &unk_1EE9EECB8;
  v3[1] = this;
  v3[2] = &v6;
  v3[3] = &v7;
  uint64_t v5 = v3;
  WTF::callOnMainRunLoopAndWait();
  if (v5) {
    (*(void (**)(void *))(*v5 + 8))(v5);
  }
  return v7;
}

uint64_t WebKit::SourceBufferPrivateRemote::setMaximumQueueDepthForTrackID(atomic_uchar *volatile *this, uint64_t a2, uint64_t a3)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 1);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x28);
  *uint64_t v6 = &unk_1EE9EECF0;
  v6[1] = this;
  v6[2] = this;
  v6[3] = a2;
  v6[4] = a3;
  uint64_t v8 = (uint64_t)v6;
  WebCore::SourceBufferPrivate::ensureOnDispatcher();
  uint64_t result = v8;
  if (v8) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::TextTrackPrivateRemote(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v8 = *(unsigned char *)(a4 + 52);
  *(_DWORD *)(a1 + 8) = 1;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 48) = v8;
  *(void *)a1 = &unk_1EE9EDE28;
  uint64_t v9 = *(atomic_uchar **)(a2 + 24);
  if (v9) {
    uint64_t v9 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v9);
  }
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v9);
  *(void *)(a1 + 120) = *(void *)a4;
  *(void *)(a1 + 128) = a3;
  *(_DWORD *)(a1 + 136) = 6;
  *(_WORD *)(a1 + 140) = 1;
  *(unsigned char *)(a1 + 142) = 0;
  WebKit::TextTrackPrivateRemote::updateConfiguration(a1, (uint64_t *)a4, v10);
  return a1;
}

uint64_t *WebKit::TextTrackPrivateRemote::updateConfiguration(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = (WTF::StringImpl *)*a2;
  if (*a2 != *(void *)(a1 + 120))
  {
    *(void *)(a1 + 120) = v5;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v6 = &unk_1EE9EED18;
    v6[1] = v5;
    uint64_t v17 = v6;
    WebCore::TrackPrivateBase::notifyClients();
    if (v17) {
      (*(void (**)(void *))(*v17 + 8))(v17);
    }
  }
  uint64_t v7 = a1 + 72;
  if ((WTF::equal((WTF *)a2[1], *(const WTF::StringImpl **)(a1 + 72), a3) & 1) == 0)
  {
    if (*(void *)v7)
    {
      int v9 = *(_DWORD *)(*(void *)v7 + 4);
      WTF::String::operator=((uint64_t *)(a1 + 72), (WTF::StringImpl **)a2 + 1);
      if (v9)
      {
        WTF::String::isolatedCopy();
        uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v10 = &unk_1EE9EED40;
        uint64_t v18 = v10;
        v10[1] = v16;
        WebCore::TrackPrivateBase::notifyClients();
        if (v18) {
          (*(void (**)(void *))(*v18 + 8))(v18);
        }
        long long v16 = 0;
      }
    }
    else
    {
      WTF::String::operator=((uint64_t *)(a1 + 72), (WTF::StringImpl **)a2 + 1);
    }
  }
  uint64_t v11 = a1 + 80;
  if ((WTF::equal((WTF *)a2[2], *(const WTF::StringImpl **)(a1 + 80), v8) & 1) == 0)
  {
    if (*(void *)v11)
    {
      int v12 = *(_DWORD *)(*(void *)v11 + 4);
      WTF::String::operator=((uint64_t *)(a1 + 80), (WTF::StringImpl **)a2 + 2);
      if (v12)
      {
        WTF::String::isolatedCopy();
        long long v13 = (void *)WTF::fastMalloc((WTF *)0x10);
        *long long v13 = &unk_1EE9EED68;
        uint64_t v19 = v13;
        v13[1] = v16;
        WebCore::TrackPrivateBase::notifyClients();
        if (v19) {
          (*(void (**)(void *))(*v19 + 8))(v19);
        }
      }
    }
    else
    {
      WTF::String::operator=((uint64_t *)(a1 + 80), (WTF::StringImpl **)a2 + 2);
    }
  }
  *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 12);
  uint64_t result = WTF::String::operator=((uint64_t *)(a1 + 96), (WTF::StringImpl **)a2 + 3);
  uint64_t v15 = a2[4];
  *(void *)(a1 + 109) = *(uint64_t *)((char *)a2 + 37);
  *(void *)(a1 + 104) = v15;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)((char *)a2 + 53);
  *(unsigned char *)(a1 + 140) = *((unsigned char *)a2 + 57);
  *(_WORD *)(a1 + 141) = *((_WORD *)a2 + 29);
  return result;
}

atomic_uchar *WebKit::TextTrackPrivateRemote::setMode(uint64_t a1, int a2)
{
  uint64_t result = *(atomic_uchar **)(a1 + 56);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 64), &v17);
    uint64_t v6 = v17;
    if (v17)
    {
      if (*(unsigned __int8 *)(a1 + 49) == a2)
      {
        uint64_t v17 = 0;
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 24), v5);
      }
      uint64_t v7 = *(void *)(v17 + 32);
      uint64_t v8 = *(void *)(a1 + 120);
      uint64_t v9 = *(void *)(a1 + 128);
      uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v10 = 1199;
      *((void *)v10 + 1) = v9;
      *((void *)v10 + 66) = (char *)v10 + 16;
      *((void *)v10 + 67) = 512;
      *((void *)v10 + 68) = 0;
      *((void *)v10 + 70) = 0;
      *((void *)v10 + 69) = 0;
      IPC::Encoder::encodeHeader(v10);
      uint64_t v18 = v10;
      uint64_t v11 = (void *)IPC::Encoder::grow(v10, 8uLL, 8);
      if (v12 <= 7 || (void *v11 = v8, v13 = (unsigned char *)IPC::Encoder::grow(v10, 1uLL, 1), !v14))
      {
        __break(0xC471u);
        JUMPOUT(0x199116550);
      }
      *long long v13 = a2;
      IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v18, 0, 0);
      uint64_t result = (atomic_uchar *)v18;
      uint64_t v18 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v5);
        uint64_t result = (atomic_uchar *)WTF::fastFree(v15, v16);
      }
      *(unsigned char *)(a1 + 49) = a2;
      uint64_t v6 = v17;
      uint64_t v17 = 0;
      if (v6) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 24), v5);
      }
    }
  }
  return result;
}

uint64_t WebCore::InbandTextTrackPrivate::mode(WebCore::InbandTextTrackPrivate *this)
{
  return *((unsigned __int8 *)this + 49);
}

uint64_t WebKit::TextTrackPrivateRemote::addGenericCue(uint64_t a1, void *a2)
{
  char v2 = (_DWORD *)*a2;
  ++*(_DWORD *)*a2;
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EE9EED90;
  v3[1] = v2;
  uint64_t v5 = v3;
  WebCore::TrackPrivateBase::notifyClients();
  uint64_t result = (uint64_t)v5;
  if (v5) {
    return (*(uint64_t (**)(void *))(*v5 + 8))(v5);
  }
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::updateGenericCue(uint64_t a1, void *a2)
{
  char v2 = (_DWORD *)*a2;
  ++*(_DWORD *)*a2;
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EE9EEDB8;
  v3[1] = v2;
  uint64_t v5 = v3;
  WebCore::TrackPrivateBase::notifyClients();
  uint64_t result = (uint64_t)v5;
  if (v5) {
    return (*(uint64_t (**)(void *))(*v5 + 8))(v5);
  }
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::removeGenericCue(uint64_t a1, void *a2)
{
  char v2 = (_DWORD *)*a2;
  ++*(_DWORD *)*a2;
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EE9EEDE0;
  v3[1] = v2;
  uint64_t v5 = v3;
  WebCore::TrackPrivateBase::notifyClients();
  uint64_t result = (uint64_t)v5;
  if (v5) {
    return (*(uint64_t (**)(void *))(*v5 + 8))(v5);
  }
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::parseWebVTTFileHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EE9EEE08;
  v3[1] = a2;
  uint64_t v5 = v3;
  WebCore::TrackPrivateBase::notifyMainThreadClient();
  uint64_t result = (uint64_t)v5;
  if (v5) {
    return (*(uint64_t (**)(void *))(*v5 + 8))(v5);
  }
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::parseWebVTTCueData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EE9EEE30;
  v3[1] = v6;
  uint64_t v5 = v3;
  WebCore::TrackPrivateBase::notifyMainThreadClient();
  uint64_t result = (uint64_t)v5;
  if (v5) {
    return (*(uint64_t (**)(void *))(*v5 + 8))(v5);
  }
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::parseWebVTTCueDataStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EE9EEE58;
  v3[1] = a2;
  uint64_t v5 = v3;
  WebCore::TrackPrivateBase::notifyMainThreadClient();
  uint64_t result = (uint64_t)v5;
  if (v5) {
    return (*(uint64_t (**)(void *))(*v5 + 8))(v5);
  }
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::addDataCue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[0] = a4;
  v10[1] = a5;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v7 = &unk_1EE9EEE80;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = v10;
  uint64_t v9 = v7;
  WebCore::TrackPrivateBase::notifyMainThreadClient();
  uint64_t result = (uint64_t)v9;
  if (v9) {
    return (*(uint64_t (**)(void *))(*v9 + 8))(v9);
  }
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::addDataCueWithType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v9 = &unk_1EE9EEEA8;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  v9[4] = a5;
  uint64_t v11 = v9;
  WebCore::TrackPrivateBase::notifyMainThreadClient();
  uint64_t result = (uint64_t)v11;
  if (v11) {
    return (*(uint64_t (**)(void *))(*v11 + 8))(v11);
  }
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::updateDataCue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v7 = &unk_1EE9EEED0;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  uint64_t v9 = v7;
  WebCore::TrackPrivateBase::notifyMainThreadClient();
  uint64_t result = (uint64_t)v9;
  if (v9) {
    return (*(uint64_t (**)(void *))(*v9 + 8))(v9);
  }
  return result;
}

uint64_t WebKit::TextTrackPrivateRemote::removeDataCue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v7 = &unk_1EE9EEEF8;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  uint64_t v9 = v7;
  WebCore::TrackPrivateBase::notifyMainThreadClient();
  uint64_t result = (uint64_t)v9;
  if (v9) {
    return (*(uint64_t (**)(void *))(*v9 + 8))(v9);
  }
  return result;
}

uint64_t WebKit::VideoTrackPrivateRemote::VideoTrackPrivateRemote(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)a1 = &unk_1EE9EDF00;
  uint64_t v8 = *(atomic_uchar **)(a2 + 24);
  if (v8) {
    uint64_t v8 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v8);
  }
  *(void *)(a1 + 128) = v8;
  *(void *)(a1 + 136) = a2;
  *(unsigned char *)(a1 + 144) = 6;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v8);
  *(void *)(a1 + 192) = *a4;
  *(void *)(a1 + 200) = a3;
  WebKit::VideoTrackPrivateRemote::updateConfiguration(a1, a4, v9);
  return a1;
}

unsigned char *WebKit::VideoTrackPrivateRemote::updateConfiguration(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v5 = (WTF::StringImpl *)*a2;
  if (*a2 != *(void *)(a1 + 192))
  {
    *(void *)(a1 + 192) = v5;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v6 = &unk_1EE9EEF20;
    v6[1] = v5;
    uint64_t v24 = v6;
    WebCore::TrackPrivateBase::notifyClients();
    if (v24) {
      (*(void (**)(void *))(*v24 + 8))(v24);
    }
  }
  uint64_t v7 = a1 + 152;
  if ((WTF::equal((WTF *)a2[1], *(const WTF::StringImpl **)(a1 + 152), a3) & 1) == 0)
  {
    if (*(void *)v7)
    {
      int v9 = *(_DWORD *)(*(void *)v7 + 4);
      WTF::String::operator=((uint64_t *)(a1 + 152), (WTF::StringImpl **)a2 + 1);
      if (v9 && WebCore::TrackPrivateBase::hasClients((WebCore::TrackPrivateBase *)a1))
      {
        WTF::String::isolatedCopy();
        uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v10 = &unk_1EE9EEF48;
        uint64_t v25 = v10;
        v10[1] = v22;
        WebCore::TrackPrivateBase::notifyClients();
        if (v25) {
          (*(void (**)(void *))(*v25 + 8))(v25);
        }
        long long v22 = 0;
      }
    }
    else
    {
      WTF::String::operator=((uint64_t *)(a1 + 152), (WTF::StringImpl **)a2 + 1);
    }
  }
  uint64_t v11 = a1 + 160;
  if ((WTF::equal((WTF *)a2[2], *(const WTF::StringImpl **)(a1 + 160), v8) & 1) == 0)
  {
    if (*(void *)v11)
    {
      int v13 = *(_DWORD *)(*(void *)v11 + 4);
      WTF::String::operator=((uint64_t *)(a1 + 160), (WTF::StringImpl **)a2 + 2);
      if (v13)
      {
        if (WebCore::TrackPrivateBase::hasClients((WebCore::TrackPrivateBase *)a1))
        {
          WTF::String::isolatedCopy();
          uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
          *uint64_t v14 = &unk_1EE9EEF70;
          uint64_t v26 = v14;
          v14[1] = v22;
          WebCore::TrackPrivateBase::notifyClients();
          if (v26) {
            (*(void (**)(void *))(*v26 + 8))(v26);
          }
        }
      }
    }
    else
    {
      WTF::String::operator=((uint64_t *)(a1 + 160), (WTF::StringImpl **)a2 + 2);
    }
  }
  *(_DWORD *)(a1 + 168) = *((_DWORD *)a2 + 10);
  uint64_t v15 = a2[3];
  *(void *)(a1 + 181) = *(uint64_t *)((char *)a2 + 29);
  *(void *)(a1 + 176) = v15;
  *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 45);
  if ((WebCore::operator==((uint64_t)(a2 + 6), a1 + 56, v12) & 1) == 0)
  {
    WTF::String::operator=((uint64_t *)(a1 + 56), a2 + 6);
    long long v16 = *(_OWORD *)(a2 + 9);
    long long v17 = *(_OWORD *)(a2 + 11);
    long long v18 = *(_OWORD *)(a2 + 7);
    *(void *)(a1 + 109) = *(uint64_t *)((char *)a2 + 101);
    *(_OWORD *)(a1 + 80) = v16;
    *(_OWORD *)(a1 + 96) = v17;
    *(_OWORD *)(a1 + 64) = v18;
    uint64_t v19 = *(_DWORD **)(a1 + 56);
    if (v19) {
      *v19 += 2;
    }
    long long v27 = *(_OWORD *)(a1 + 64);
    long long v28 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)long long v29 = *(_OWORD *)(a1 + 96);
    *(void *)&v29[13] = *(void *)(a1 + 109);
    uint64_t v20 = WTF::fastMalloc((WTF *)0x48);
    *(void *)uint64_t v20 = &unk_1EE9EE5C8;
    *(void *)(v20 + 8) = v19;
    *(_OWORD *)(v20 + 16) = v27;
    *(_OWORD *)(v20 + 32) = v28;
    *(_OWORD *)(v20 + 48) = *(_OWORD *)v29;
    *(void *)(v20 + 61) = *(void *)&v29[13];
    uint64_t v23 = (WTF::StringImpl *)v20;
    WebCore::TrackPrivateBase::notifyClients();
    if (v23) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v23 + 8))(v23);
    }
  }
  return WebCore::VideoTrackPrivate::setSelected((unsigned char *)a1, *((unsigned __int8 *)a2 + 44));
}

atomic_uchar *WebKit::VideoTrackPrivateRemote::setSelected(WebKit::VideoTrackPrivateRemote *this, int a2)
{
  uint64_t result = (atomic_uchar *)*((void *)this + 16);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 17), &v16);
    if (v16)
    {
      if ((*(unsigned int (**)(WebKit::VideoTrackPrivateRemote *))(*(void *)this + 128))(this) != a2)
      {
        uint64_t v5 = *(void *)(v16 + 32);
        uint64_t v6 = *((void *)this + 25);
        uint64_t v14 = *((void *)this + 24);
        char v15 = a2;
        uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v7 = 1203;
        *((void *)v7 + 1) = v6;
        *((void *)v7 + 66) = (char *)v7 + 16;
        *((void *)v7 + 67) = 512;
        *((void *)v7 + 68) = 0;
        *((void *)v7 + 70) = 0;
        *((void *)v7 + 69) = 0;
        IPC::Encoder::encodeHeader(v7);
        long long v17 = v7;
        IPC::ArgumentCoder<std::tuple<unsigned long long,BOOL>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,BOOL>,0ul,1ul>(v7, &v14);
        IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v17, 0, 0);
        int v9 = v17;
        long long v17 = 0;
        if (v9)
        {
          IPC::Encoder::~Encoder(v9, v8);
          WTF::fastFree(v12, v13);
        }
      }
      uint64_t result = WebCore::VideoTrackPrivate::setSelected(this, a2);
      uint64_t v11 = v16;
      uint64_t v16 = 0;
      if (v11) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 24), v10);
      }
    }
  }
  return result;
}

unsigned char *WebCore::VideoTrackPrivate::setSelected(unsigned char *this, int a2)
{
  if (this[48] != a2)
  {
    char v2 = a2;
    uint64_t v3 = this;
    this[48] = a2;
    uint64_t v4 = WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v4 = &unk_1EE9EE5A0;
    *(unsigned char *)(v4 + 8) = v2;
    uint64_t v5 = v4;
    WebCore::TrackPrivateBase::notifyClients();
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    this = (unsigned char *)*((void *)v3 + 15);
    if (this) {
      return (unsigned char *)(*(uint64_t (**)(unsigned char *, unsigned char *, void))(*(void *)this + 16))(this, v3, v3[48]);
    }
  }
  return this;
}

void WebKit::WebMediaStrategy::~WebMediaStrategy(WebKit::WebMediaStrategy *this)
{
  WebCore::MediaStrategy::~MediaStrategy(this);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::WebMediaStrategy::createAudioDestination@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>, float a7@<S0>)
{
  int v8 = a5;
  int v9 = a4;
  unsigned __int8 v11 = atomic_load((unsigned __int8 *)(a1 + 9));
  if (v11)
  {
    unint64_t v12 = *a3;
    if (*a3) {
      *(_DWORD *)v12 += 2;
    }
    uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v13 = &unk_1EE9EEF98;
    if (v12) {
      *(_DWORD *)v12 += 2;
    }
    *(void *)(v13 + 8) = v12;
    *(_DWORD *)(v13 + 16) = v9;
    *(_DWORD *)(v13 + 20) = v8;
    *(float *)(v13 + 24) = a7;
    uint64_t v16 = v13;
    WebCore::SharedAudioDestination::create();
    uint64_t result = v16;
    *a6 = v17;
    if (v16) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        return WTF::StringImpl::destroy(v12, v14);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
  else
  {
    return MEMORY[0x1F416E4C0](a2, a3, a4, a5);
  }
  return result;
}

void *WebKit::WebMediaStrategy::createNowPlayingManager@<X0>(WebKit::WebMediaStrategy *this@<X0>, void *a2@<X8>)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)this + 9);
  if (v3)
  {
    uint64_t v4 = (WebCore::NowPlayingManager *)WTF::fastMalloc((WTF *)0xB0);
    *(_OWORD *)uint64_t v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 7) = 0u;
    *((_OWORD *)v4 + 8) = 0u;
    *((_OWORD *)v4 + 9) = 0u;
    *((_OWORD *)v4 + 10) = 0u;
    uint64_t result = (void *)WebCore::NowPlayingManager::NowPlayingManager(v4);
    *uint64_t result = &unk_1EE9EE5F0;
    *a2 = result;
  }
  else
  {
    return (void *)MEMORY[0x1F41748C0]();
  }
  return result;
}

uint64_t WebKit::WebMediaStrategy::hasThreadSafeMediaSourceSupport(WebKit::WebMediaStrategy *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 9);
  return v1 & 1;
}

atomic_uchar *volatile **WebKit::WebMediaStrategy::enableMockMediaSource(WebKit::WebMediaStrategy *this)
{
  char v2 = (WebCore::MediaStrategy *)WebCore::DeprecatedGlobalSettings::setAVFoundationEnabled(0);
  *((unsigned char *)this + 8) = 1;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)this + 9);
  if (v3)
  {
    {
      unint64_t v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v12);
    }
    uint64_t v5 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v13, *(atomic_uchar *volatile **)(v5 + 32));
    uint64_t v6 = v13;
    uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v7 = 46;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 66) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    uint64_t v14 = v7;
    IPC::Connection::sendMessageImpl((uint64_t)v6, (uint64_t *)&v14, 0, 0);
    int v9 = v14;
    uint64_t v14 = 0;
    if (v9)
    {
      IPC::Encoder::~Encoder(v9, v8);
      WTF::fastFree(v10, v11);
    }
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v13);
  }
  else
  {
    return (atomic_uchar *volatile **)WebCore::MediaStrategy::addMockMediaSourceEngine(v2);
  }
}

atomic_uchar *WebKit::RemoteAudioSourceProvider::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x120);
  uint64_t v7 = WebKit::RemoteAudioSourceProvider::RemoteAudioSourceProvider(v6, a1, a2);
  *a3 = v7;
  int v8 = *(atomic_uchar **)(v7 + 256);
  if (v8)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v8, *(void *)(v6 + 264), &v14);
    int v8 = v14;
  }
  else
  {
    uint64_t v14 = 0;
  }
  int v9 = WebKit::GPUProcessConnection::audioSourceProviderManager((WebKit::GPUProcessConnection *)v8);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  uint64_t v13 = v6;
  uint64_t result = (atomic_uchar *)WebKit::RemoteAudioSourceProviderManager::addProvider((uint64_t)v9, &v13);
  if (v13) {
    uint64_t result = (atomic_uchar *)WTF::ThreadSafeRefCounted<WebCore::WebAudioSourceProvider,(WTF::DestructionThread)1>::deref((unsigned int *)(v13 + 8));
  }
  unint64_t v12 = v14;
  uint64_t v14 = 0;
  if (v12) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*((atomic_uchar **)v12 + 3), v11);
  }
  return result;
}

uint64_t WebKit::RemoteAudioSourceProvider::RemoteAudioSourceProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)WebCore::WebAudioSourceProviderCocoa::WebAudioSourceProviderCocoa((WebCore::WebAudioSourceProviderCocoa *)a1);
  *uint64_t v6 = &unk_1EE9EDFA8;
  v6[30] = &unk_1EE9EE010;
  v6[31] = a2;
  {
    long long v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v18);
  }
  uint64_t v7 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  int v8 = *(atomic_uchar **)(v7 + 24);
  if (v8) {
    int v8 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v8);
  }
  *(void *)(a1 + 256) = v8;
  *(void *)(a1 + 264) = v7;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
  atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
  *(void *)(a1 + 272) = v9;
  *(void *)(a1 + 280) = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 40))(a3);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(a1 + 256), *(void *)(a1 + 264), &v19);
  uint64_t v10 = *(void *)(v19 + 32);
  unsigned __int8 v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v11 = 1152;
  *((void *)v11 + 1) = a2;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v20 = v11;
  IPC::Connection::sendMessageImpl(v10, (uint64_t *)&v20, 0, 0);
  uint64_t v13 = v20;
  uint64_t v20 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v12);
    WTF::fastFree(v16, v17);
  }
  uint64_t v14 = v19;
  uint64_t v19 = 0;
  if (v14) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v14 + 24), v12);
  }
  return a1;
}

void WebKit::RemoteAudioSourceProvider::~RemoteAudioSourceProvider(WebKit::RemoteAudioSourceProvider *this, void *a2)
{
  unsigned __int8 v3 = (unsigned int *)*((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (atomic_uchar *)*((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, a2);
  }

  MEMORY[0x1F4171A10](this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteAudioSourceProvider::~RemoteAudioSourceProvider(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::RemoteAudioSourceProvider::~RemoteAudioSourceProvider(WebKit::RemoteAudioSourceProvider *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteAudioSourceProvider::~RemoteAudioSourceProvider((WebKit::RemoteAudioSourceProvider *)((char *)this - 240), a2);

  WTF::fastFree(v2, v3);
}

atomic_uchar *WebKit::RemoteAudioSourceProvider::close(WebKit::RemoteAudioSourceProvider *this)
{
  uint64_t result = (atomic_uchar *)*((void *)this + 32);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 33), &v6);
    uint64_t result = (atomic_uchar *)v6;
    if (v6)
    {
      unsigned __int8 v3 = WebKit::GPUProcessConnection::audioSourceProviderManager(v6);
      uint64_t result = (atomic_uchar *)WebKit::RemoteAudioSourceProviderManager::removeProvider((uint64_t)v3, *((void *)this + 31));
      uint64_t v5 = v6;
      uint64_t v6 = 0;
      if (v5) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*((atomic_uchar **)v5 + 3), v4);
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::RemoteAudioSourceProvider::hasNewClient(void *a1, uint64_t a2)
{
  uint64_t result = (atomic_uchar *)a1[32];
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, a1[33], &v13);
    if (v13)
    {
      uint64_t v5 = *(void *)(v13 + 32);
      BOOL v12 = a2 != 0;
      uint64_t v6 = a1[31];
      uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v7 = 1187;
      *((void *)v7 + 1) = v6;
      *((void *)v7 + 66) = (char *)v7 + 16;
      *((void *)v7 + 67) = 512;
      *((void *)v7 + 68) = 0;
      *((void *)v7 + 70) = 0;
      *((void *)v7 + 69) = 0;
      IPC::Encoder::encodeHeader(v7);
      uint64_t v14 = v7;
      IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v7, (char *)&v12);
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v14, 0, 0);
      uint64_t result = (atomic_uchar *)v14;
      uint64_t v14 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
        uint64_t result = (atomic_uchar *)WTF::fastFree(v10, v11);
      }
      uint64_t v9 = v13;
      uint64_t v13 = 0;
      if (v9) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v9 + 24), v8);
      }
    }
  }
  return result;
}

char *WebKit::RemoteAudioSourceProvider::logChannel(WebKit::RemoteAudioSourceProvider *this)
{
  return &WebKit2LogMedia;
}

char *non-virtual thunk to'WebKit::RemoteAudioSourceProvider::logChannel(WebKit::RemoteAudioSourceProvider *this)
{
  return &WebKit2LogMedia;
}

atomic_uchar *WebKit::RemoteRemoteCommandListener::ref(atomic_uchar **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[10]);
}

atomic_uchar *WebKit::RemoteRemoteCommandListener::deref(atomic_uchar **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRemoteCommandListener,(WTF::DestructionThread)0>(this[10], a2);
}

uint64_t WebKit::RemoteRemoteCommandListener::controlBlock(WebKit::RemoteRemoteCommandListener *this)
{
  return *((void *)this + 10);
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteRemoteCommandListener::ref(atomic_uchar **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[3]);
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteRemoteCommandListener::deref(atomic_uchar **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRemoteCommandListener,(WTF::DestructionThread)0>(this[3], a2);
}

uint64_t non-virtual thunk to'WebKit::RemoteRemoteCommandListener::controlBlock(WebKit::RemoteRemoteCommandListener *this)
{
  return *((void *)this + 3);
}

float WebKit::RemoteVideoFrameProxy::presentationSize(WebKit::RemoteVideoFrameProxy *this)
{
  return (float)*((int *)this + 24);
}

uint64_t WebKit::RemoteVideoFrameProxy::isRemoteProxy(WebKit::RemoteVideoFrameProxy *this)
{
  return 1;
}

uint64_t WebCore::VideoFrame::isLibWebRTC(WebCore::VideoFrame *this)
{
  return 0;
}

uint64_t WebCore::VideoFrame::isCV(WebCore::VideoFrame *this)
{
  return 0;
}

uint64_t WebKit::SourceBufferPrivateRemote::platformType(WebKit::SourceBufferPrivateRemote *this)
{
  return 3;
}

uint64_t WebCore::SourceBufferPrivate::platformMaximumBufferSize(WebCore::SourceBufferPrivate *this)
{
  return 0;
}

uint64_t WebKit::SourceBufferPrivateRemote::sourceBufferLogger(WebKit::SourceBufferPrivateRemote *this)
{
  return *((void *)this + 50);
}

uint64_t WebKit::SourceBufferPrivateRemote::sourceBufferLogIdentifier(WebKit::SourceBufferPrivateRemote *this)
{
  return *((void *)this + 51);
}

uint64_t WebCore::SourceBufferPrivate::waitingForKey(WebCore::SourceBufferPrivate *this)
{
  return 0;
}

uint64_t WebCore::SourceBufferPrivate::timeFudgeFactor(WebCore::SourceBufferPrivate *this)
{
  return MEMORY[0x1F416F390](this);
}

uint64_t WebCore::SourceBufferPrivate::isSeeking(WebCore::SourceBufferPrivate *this)
{
  return 0;
}

uint64_t WebCore::SourceBufferPrivate::isReadyForMoreSamples(WebCore::SourceBufferPrivate *this)
{
  return 0;
}

uint64_t WebCore::SourceBufferPrivate::canSetMinimumUpcomingPresentationTime(WebCore::SourceBufferPrivate *this)
{
  return 0;
}

uint64_t WebCore::SourceBufferPrivate::precheckInitializationSegment()
{
  return 1;
}

uint64_t WebCore::SourceBufferPrivate::isMediaSampleAllowed()
{
  return 1;
}

void WebKit::TextTrackPrivateRemote::~TextTrackPrivateRemote(WebKit::TextTrackPrivateRemote *this, WTF::StringImpl *a2)
{
  unsigned __int8 v3 = (WTF::StringImpl *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (atomic_uchar *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
  }

  WebCore::TrackPrivateBase::~TrackPrivateBase(this, a2);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  atomic_uchar *v6;
  WTF *v7;
  void *v8;
  uint64_t vars8;

  unsigned __int8 v3 = (WTF::StringImpl *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (atomic_uchar *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
  }
  WebCore::TrackPrivateBase::~TrackPrivateBase(this, a2);

  WTF::fastFree(v7, v8);
}

const char *WebCore::InbandTextTrackPrivate::logClassName(WebCore::InbandTextTrackPrivate *this)
{
  return "InbandTextTrackPrivate";
}

uint64_t WebKit::TextTrackPrivateRemote::id(WebKit::TextTrackPrivateRemote *this)
{
  return *((void *)this + 15);
}

WTF::AtomString *WebKit::TextTrackPrivateRemote::label@<X0>(WTF::AtomStringImpl **this@<X0>, WTF::AtomString *a2@<X8>)
{
  return WTF::AtomString::AtomString(a2, this + 9);
}

WTF::AtomString *WebKit::TextTrackPrivateRemote::language@<X0>(WTF::AtomStringImpl **this@<X0>, WTF::AtomString *a2@<X8>)
{
  return WTF::AtomString::AtomString(a2, this + 10);
}

uint64_t WebKit::TextTrackPrivateRemote::trackIndex(WebKit::TextTrackPrivateRemote *this)
{
  return *((unsigned int *)this + 22);
}

void WebCore::InbandTextTrackPrivate::trackUID(uint64_t a1@<X8>)
{
  char v2 = (_DWORD *)*MEMORY[0x1E4F30970];
  if (*MEMORY[0x1E4F30970]) {
    *v2 += 2;
  }
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t WebKit::TextTrackPrivateRemote::startTimeVariance(WebKit::TextTrackPrivateRemote *this)
{
  return *((void *)this + 13);
}

uint64_t WebCore::InbandTextTrackPrivate::type(WebCore::InbandTextTrackPrivate *this)
{
  return 2;
}

uint64_t WebKit::TextTrackPrivateRemote::kind(WebKit::TextTrackPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 136);
}

uint64_t WebKit::TextTrackPrivateRemote::isClosedCaptions(WebKit::TextTrackPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 137);
}

uint64_t WebKit::TextTrackPrivateRemote::isSDH(WebKit::TextTrackPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 138);
}

uint64_t WebKit::TextTrackPrivateRemote::containsOnlyForcedSubtitles(WebKit::TextTrackPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 139);
}

uint64_t WebKit::TextTrackPrivateRemote::isMainProgramContent(WebKit::TextTrackPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 140);
}

uint64_t WebKit::TextTrackPrivateRemote::isEasyToRead(WebKit::TextTrackPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 141);
}

uint64_t WebKit::TextTrackPrivateRemote::isDefault(WebKit::TextTrackPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 142);
}

WTF::AtomString *WebKit::TextTrackPrivateRemote::inBandMetadataTrackDispatchType@<X0>(WTF::AtomStringImpl **this@<X0>, WTF::AtomString *a2@<X8>)
{
  return WTF::AtomString::AtomString(a2, this + 12);
}

void WebKit::VideoTrackPrivateRemote::~VideoTrackPrivateRemote(WebKit::VideoTrackPrivateRemote *this, WTF::StringImpl *a2)
{
  WebKit::VideoTrackPrivateRemote::~VideoTrackPrivateRemote(this, a2);

  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  atomic_uchar *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t vars8;

  *(void *)this = &unk_1EE9EDF00;
  unsigned __int8 v3 = (WTF::StringImpl *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (atomic_uchar *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  }
  *(void *)this = &unk_1EE9EE4F8;
  uint64_t v6 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }

  WebCore::TrackPrivateBase::~TrackPrivateBase(this, a2);
}

const char *WebCore::VideoTrackPrivate::logClassName(WebCore::VideoTrackPrivate *this)
{
  return "VideoTrackPrivate";
}

uint64_t WebKit::VideoTrackPrivateRemote::id(WebKit::VideoTrackPrivateRemote *this)
{
  return *((void *)this + 24);
}

WTF::AtomString *WebKit::VideoTrackPrivateRemote::label@<X0>(WTF::AtomStringImpl **this@<X0>, WTF::AtomString *a2@<X8>)
{
  return WTF::AtomString::AtomString(a2, this + 19);
}

WTF::AtomString *WebKit::VideoTrackPrivateRemote::language@<X0>(WTF::AtomStringImpl **this@<X0>, WTF::AtomString *a2@<X8>)
{
  return WTF::AtomString::AtomString(a2, this + 20);
}

uint64_t WebKit::VideoTrackPrivateRemote::trackIndex(WebKit::VideoTrackPrivateRemote *this)
{
  return *((unsigned int *)this + 42);
}

uint64_t WebKit::VideoTrackPrivateRemote::startTimeVariance(WebKit::VideoTrackPrivateRemote *this)
{
  return *((void *)this + 22);
}

uint64_t WebCore::VideoTrackPrivate::type(WebCore::VideoTrackPrivate *this)
{
  return 0;
}

uint64_t WebCore::VideoTrackPrivate::selected(WebCore::VideoTrackPrivate *this)
{
  return *((unsigned __int8 *)this + 48);
}

uint64_t WebKit::VideoTrackPrivateRemote::kind(WebKit::VideoTrackPrivateRemote *this)
{
  return *((unsigned __int8 *)this + 144);
}

uint64_t WebCore::AudioSourceProvider::isHandlingAVPlayer(WebCore::AudioSourceProvider *this)
{
  return 0;
}

uint64_t WebKit::RemoteAudioSourceProvider::loggerHelper(WebKit::RemoteAudioSourceProvider *this)
{
  return (uint64_t)this + 240;
}

uint64_t WebKit::RemoteAudioSourceProvider::logger(WebKit::RemoteAudioSourceProvider *this)
{
  return *((void *)this + 34);
}

uint64_t WebKit::RemoteAudioSourceProvider::logIdentifier(WebKit::RemoteAudioSourceProvider *this)
{
  return *((void *)this + 35);
}

const char *WebKit::RemoteAudioSourceProvider::logClassName(WebKit::RemoteAudioSourceProvider *this)
{
  return "RemoteAudioSourceProvider";
}

uint64_t non-virtual thunk to'WebKit::RemoteAudioSourceProvider::logger(WebKit::RemoteAudioSourceProvider *this)
{
  return *((void *)this + 4);
}

const char *non-virtual thunk to'WebKit::RemoteAudioSourceProvider::logClassName(WebKit::RemoteAudioSourceProvider *this)
{
  return "RemoteAudioSourceProvider";
}

uint64_t non-virtual thunk to'WebKit::RemoteAudioSourceProvider::logIdentifier(WebKit::RemoteAudioSourceProvider *this)
{
  return *((void *)this + 5);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore12VideoDecoder12DecodedFrameEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, unsigned int **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore12VideoDecoder12DecodedFrameEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages26RemoteVideoFrameObjectHeap11PixelBufferEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = *(const void **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote6appendEONS_3RefIN7WebCore12SharedBufferENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED1Ev(void *a1, void *a2)
{
  *a1 = &unk_1EE9EE0C8;
  unsigned __int8 v3 = (unsigned int *)a1[8];
  a1[8] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  uint64_t v4 = a1[6];
  a1[6] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v4 + 8));
  }
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote6appendEONS_3RefIN7WebCore12SharedBufferENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED0Ev(uint64_t *a1, void *a2)
{
  *a1 = (uint64_t)&unk_1EE9EE0C8;
  unsigned __int8 v3 = (unsigned int *)a1[8];
  a1[8] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  uint64_t v4 = a1[6];
  a1[6] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v4 + 8));
  }
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v5);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote6appendEONS_3RefIN7WebCore12SharedBufferENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 56);
  unsigned __int8 v3 = *(atomic_uchar **)(v2 + 312);
  if (v3)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v3, *(void *)(v2 + 320), &v74);
    if (v74)
    {
      unsigned __int8 v4 = atomic_load((unsigned __int8 *)(v2 + 368));
      if ((v4 & 1) == 0)
      {
        unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v2 + 369));
        if ((v5 & 1) == 0)
        {
          uint64_t v6 = *(void *)(a1 + 64);
          uint64_t v7 = *(void *)(v6 + 48);
          *(void *)(a1 + 64) = 0;
          uint64_t v71 = v7;
          v72 = (unsigned int *)v6;
          v73 = 0;
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v2 + 312), *(void *)(v2 + 320), &v75);
          int v8 = *(os_unfair_lock_s **)(v75 + 32);
          uint64_t v9 = *(void *)(v2 + 336);
          long long v76 = 0uLL;
          *(void *)&long long v77 = "sendWithPromisedReply";
          *((void *)&v77 + 1) = 0;
          uint64_t v10 = WTF::fastMalloc((WTF *)0x98);
          *(_DWORD *)(v10 + 8) = 1;
          *(void *)uint64_t v10 = &unk_1EE9EE0F0;
          long long v11 = v77;
          *(_OWORD *)(v10 + 16) = v76;
          *(_OWORD *)(v10 + 32) = v11;
          *(unsigned char *)(v10 + 48) = 0;
          BOOL v12 = (WTF::Lock *)(v10 + 48);
          *(_DWORD *)(v10 + 96) = 0;
          *(void *)(v10 + 104) = v10 + 120;
          *(void *)(v10 + 112) = 1;
          *(void *)(v10 + 128) = 0;
          *(void *)(v10 + 136) = 0;
          *(_WORD *)(v10 + 144) = 0;
          uint64_t v13 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v10);
          if (*v13)
          {
            uint64_t v14 = v13;
            if (v13[16] >= 4u)
            {
              WTF::String::String((WTF::String *)&v82, "creating ");
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v81, v10);
              *(void *)buf = v82;
              v78 = v81;
              uint64_t result = (unsigned int *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v78, &v83);
              if (!v83)
              {
                __break(0xC471u);
                return result;
              }
              uint64_t v17 = v81;
              v81 = 0;
              if (v17)
              {
                if (*(_DWORD *)v17 == 2) {
                  WTF::StringImpl::destroy(v17, v16);
                }
                else {
                  *(_DWORD *)v17 -= 2;
                }
              }
              uint64_t v21 = v82;
              v82 = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 2) {
                  WTF::StringImpl::destroy(v21, v16);
                }
                else {
                  *(_DWORD *)v21 -= 2;
                }
              }
              long long v22 = *((void *)v14 + 4);
              uint64_t v23 = (WTF *)os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
              if (v23)
              {
                WTF::String::utf8();
                uint64_t v25 = v78 ? (char *)v78 + 16 : 0;
                *(_DWORD *)buf = 136446210;
                *(void *)&buf[4] = v25;
                _os_log_impl(&dword_1985F2000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                uint64_t v23 = v78;
                v78 = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 1) {
                    uint64_t v23 = (WTF *)WTF::fastFree(v23, v24);
                  }
                  else {
                    --*(_DWORD *)v23;
                  }
                }
              }
              if (*v14 && v14[16] >= 4u)
              {
                uint64_t v26 = (atomic_uchar *)MEMORY[0x1E4F30998];
                while (1)
                {
                  int v27 = *v26;
                  if (v27) {
                    break;
                  }
                  int v28 = *v26;
                  atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v28, v27 | 1, memory_order_acquire, memory_order_acquire);
                  if (v28 == v27)
                  {
                    uint64_t v69 = v9;
                    uint64_t v29 = WTF::Logger::observers(v23);
                    uint64_t v30 = *(unsigned int *)(v29 + 12);
                    if (v30)
                    {
                      unint64_t v31 = *(uint64_t **)v29;
                      uint64_t v70 = *(void *)v29 + 8 * v30;
                      do
                      {
                        uint64_t v32 = *v31;
                        *(_DWORD *)buf = 0;
                        WTF::String::String((WTF::String *)&buf[8], "creating ");
                        *(_DWORD *)&buf[16] = 0;
                        WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&buf[24], v10);
                        WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v78, (uint64_t)buf, 2uLL);
                        (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(void *)v32 + 16))(v32, v14, 4, &v78);
                        WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v78, v33);
                        for (uint64_t i = 24; i != -8; i -= 16)
                        {
                          uint64_t v35 = *(WTF::StringImpl **)&buf[i];
                          *(void *)&buf[i] = 0;
                          if (v35)
                          {
                            if (*(_DWORD *)v35 == 2) {
                              WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v24);
                            }
                            else {
                              *(_DWORD *)v35 -= 2;
                            }
                          }
                        }
                        ++v31;
                      }
                      while (v31 != (uint64_t *)v70);
                    }
                    int v36 = 1;
                    atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v36, 0, memory_order_release, memory_order_relaxed);
                    uint64_t v9 = v69;
                    BOOL v12 = (WTF::Lock *)(v10 + 48);
                    if (v36 != 1) {
                      WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                    }
                    break;
                  }
                }
              }
              uint64_t v13 = (unsigned __int8 *)v83;
              v83 = 0;
              if (v13)
              {
                if (*(_DWORD *)v13 == 2) {
                  uint64_t v13 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v13, (WTF::StringImpl *)v24);
                }
                else {
                  *(_DWORD *)v13 -= 2;
                }
              }
            }
          }
          char v37 = 0;
          v78 = (WTF *)v10;
          long long v79 = v76;
          long long v80 = v77;
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v37, 1u, memory_order_acquire, memory_order_acquire);
          if (v37) {
            uint64_t v13 = (unsigned __int8 *)MEMORY[0x19972E8D0](v12);
          }
          int v38 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v13);
          if (*v38 && v38[16] >= 4u) {
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v38, (WTF::Logger::LogSiteIdentifier *)&v76, " runSynchronouslyOnTarget ", v10);
          }
          atomic_store(0, (unsigned __int8 *)(v10 + 145));
          int v39 = 1;
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
          if (v39 != 1) {
            WTF::Lock::unlockSlow(v12);
          }
          int v40 = (atomic_uint *)v78;
          if (v78)
          {
            atomic_fetch_add((atomic_uint *volatile)v78 + 2, 1u);
            unsigned int v41 = v78;
          }
          else
          {
            unsigned int v41 = 0;
          }
          v78 = 0;
          *(_OWORD *)&buf[8] = v79;
          *(_OWORD *)&buf[24] = v80;
          uint64_t v42 = WTF::fastMalloc((WTF *)0x30);
          *(void *)uint64_t v42 = &unk_1EE9EE130;
          *(void *)(v42 + 8) = v41;
          *(void *)buf = 0;
          long long v43 = *(_OWORD *)&buf[24];
          *(_OWORD *)(v42 + 16) = *(_OWORD *)&buf[8];
          *(_OWORD *)(v42 + 32) = v43;
          *(void *)&long long v76 = v42;
          *((void *)&v76 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
          WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::~NativePromiseProducer((uint64_t *)buf);
          int v44 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)int v44 = 1378;
          *((void *)v44 + 1) = v9;
          *((void *)v44 + 66) = (char *)v44 + 16;
          *((void *)v44 + 67) = 512;
          *((void *)v44 + 68) = 0;
          *((void *)v44 + 70) = 0;
          *((void *)v44 + 69) = 0;
          IPC::Encoder::encodeHeader(v44);
          *(void *)buf = v44;
          IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode(v44, (IPC::SharedBufferReference *)&v71);
          IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v8, (IPC::Encoder **)buf, (uint64_t *)&v76, 0, 0);
          uint64_t v46 = *(IPC::Encoder **)buf;
          *(void *)buf = 0;
          if (v46)
          {
            IPC::Encoder::~Encoder(v46, v45);
            WTF::fastFree(v67, v68);
          }
          uint64_t v47 = v76;
          *(void *)&long long v76 = 0;
          if (v47) {
            (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
          }
          WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::~NativePromiseProducer((uint64_t *)&v78);
          uint64_t v49 = v75;
          uint64_t v75 = 0;
          if (v49) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v49 + 24), v48);
          }
          uint64_t v50 = *(void *)(v2 + 32);
          v51 = *(atomic_uchar **)(v2 + 8);
          if (v51) {
            uint64_t v52 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v51);
          }
          else {
            uint64_t v52 = 0;
          }
          long long v76 = 0uLL;
          uint64_t v53 = WTF::fastMalloc((WTF *)0x50);
          (*(void (**)(uint64_t))(*(void *)v50 + 32))(v50);
          __n128 v54 = (void *)WTF::fastMalloc((WTF *)0x18);
          *__n128 v54 = &unk_1EE9EE1F0;
          v54[1] = v52;
          uint64_t v54[2] = v2;
          *(_DWORD *)(v53 + 8) = 1;
          *(void *)(v53 + 16) = v50;
          *(void *)(v53 + 24) = 0;
          *(void *)(v53 + 32) = 0;
          *(void *)(v53 + 40) = "operator()";
          *(void *)(v53 + 48) = 0;
          *(_WORD *)(v53 + 56) = 0;
          *(void *)uint64_t v53 = &unk_1EE9EE218;
          *(void *)(v53 + 64) = 0;
          *(void *)(v53 + 72) = v54;
          atomic_fetch_add(v40 + 2, 1u);
          *(void *)buf = v40;
          *(void *)&buf[8] = v53;
          *(_OWORD *)&buf[16] = v76;
          *(void *)&buf[32] = "operator()";
          uint64_t v85 = 0;
          v78 = 0;
          *(void *)&long long v79 = 0;
          *((void *)&v79 + 1) = "<completion promise>";
          *(void *)&long long v80 = 0;
          char v55 = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
          uint64_t v56 = *(atomic_uint **)WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)v55, 0, (WTF::Logger::LogSiteIdentifier *)&v78);
          if (v56)
          {
            atomic_fetch_add(v56 + 2, 1u);
            uint64_t v53 = *(void *)&buf[8];
          }
          char v57 = 0;
          v83 = (WTF::StringImpl *)v56;
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v53 + 57), (unsigned __int8 *)&v57, 1u, memory_order_acquire, memory_order_acquire);
          if (v57) {
            MEMORY[0x19972E8D0](v53 + 57);
          }
          std::unique_ptr<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>>::reset[abi:sn180100]((uint64_t **)(v53 + 64), v55);
          int v58 = 1;
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v53 + 57), (unsigned __int8 *)&v58, 0, memory_order_release, memory_order_relaxed);
          if (v58 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)(v53 + 57));
          }
          uint64_t v59 = *(WTF **)&buf[8];
          *(void *)&buf[8] = 0;
          v78 = v59;
          WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::maybeSettle(*(uint64_t *)buf, &v78, (WTF::Logger::LogSiteIdentifier *)&buf[16]);
          long long v60 = (unsigned int *)v78;
          v78 = 0;
          if (v60 && atomic_fetch_add((atomic_uint *volatile)v60 + 2, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v60 + 2);
            (*(void (**)(unsigned int *))(*(void *)v60 + 8))(v60);
          }
          long long v61 = *(WTF **)&buf[8];
          if (*(void *)&buf[8])
          {
            *(void *)&buf[8] = 0;
            v78 = v61;
            WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::maybeSettle(*(uint64_t *)buf, &v78, (WTF::Logger::LogSiteIdentifier *)&buf[16]);
            unint64_t v62 = (unsigned int *)v78;
            v78 = 0;
            if (v62 && atomic_fetch_add((atomic_uint *volatile)v62 + 2, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v62 + 2);
              (*(void (**)(unsigned int *))(*(void *)v62 + 8))(v62);
            }
            v63 = *(unsigned int **)&buf[8];
            *(void *)&buf[8] = 0;
            if (v63 && atomic_fetch_add((atomic_uint *volatile)v63 + 2, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v63 + 2);
              (*(void (**)(unsigned int *))(*(void *)v63 + 8))(v63);
            }
          }
          else
          {
            *(void *)&buf[8] = 0;
          }
          uint64_t v64 = *(unsigned int **)buf;
          *(void *)buf = 0;
          if (v64 && atomic_fetch_add((atomic_uint *volatile)v64 + 2, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v64 + 2);
            (*(void (**)(unsigned int *))(*(void *)v64 + 16))(v64);
            if (v40)
            {
LABEL_89:
              if (atomic_fetch_add(v40 + 2, 0xFFFFFFFF) == 1)
              {
                atomic_store(1u, (unsigned int *)v40 + 2);
                (*(void (**)(atomic_uint *))(*(void *)v40 + 16))(v40);
              }
            }
          }
          else if (v40)
          {
            goto LABEL_89;
          }
          uint64_t v65 = v73;
          v73 = 0;
          if (v65) {
            WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v65);
          }
          uint64_t v66 = v72;
          v72 = 0;
          if (v66) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v66, v18);
          }
          goto LABEL_13;
        }
      }
    }
  }
  else
  {
    uint64_t v74 = 0;
  }
  LOBYTE(v78) = 4;
  *(void *)buf = 0;
  *(void *)&buf[8] = 0;
  *(void *)&buf[16] = "operator()";
  *(void *)&buf[24] = 0;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((char *)&v78, (WTF::Logger::LogSiteIdentifier *)buf, (uint64_t *)&v83);
LABEL_13:
  unint64_t v19 = a1 + 8;
  uint64_t v20 = v74;
  uint64_t v74 = 0;
  if (v20) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v20 + 24), v18);
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = 0;
  *(void *)&buf[16] = "invokeAsync proxy";
  *(void *)&buf[24] = 0;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo((atomic_uchar *)v83, v19, (WTF::Logger::LogSiteIdentifier *)buf);
  uint64_t result = (unsigned int *)v83;
  v83 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  unsigned __int8 v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 140);
  if (v4)
  {
    unsigned __int8 v5 = *(uint64_t **)(v1 + 128);
    uint64_t v6 = 40 * v4;
    do
    {
      uint64_t result = *v5;
      if (*v5) {
        uint64_t result = WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::assertIsDead();
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::~NativePromise(unsigned int *a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::~NativePromise(a1);

  return WTF::fastFree(v1, v2);
}

{
  unsigned char *v2;
  BOOL v3;
  unsigned char *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  atomic_uchar *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  void v35[3];

  v35[2] = *MEMORY[0x1E4F143B8];
  char v2 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2) {
    unsigned __int8 v3 = v2[16] >= 4u;
  }
  else {
    unsigned __int8 v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v30, (uint64_t)a1);
    *(void *)buf = v31;
    v29[0] = v30;
    uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    int v7 = v30;
    uint64_t v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    int v8 = v31;
    unint64_t v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t v9 = *((void *)v4 + 4);
    uint64_t v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      WTF::String::utf8();
      BOOL v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&buf[4] = v12;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1) {
          uint64_t v10 = (WTF *)WTF::fastFree(v10, v11);
        }
        else {
          --*(_DWORD *)v10;
        }
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      uint64_t v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        uint64_t v14 = *v13;
        if (v14) {
          break;
        }
        char v15 = *v13;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
        if (v15 == v14)
        {
          uint64_t v16 = WTF::Logger::observers(v10);
          uint64_t v17 = *(unsigned int *)(v16 + 12);
          if (v17)
          {
            long long v18 = *(uint64_t **)v16;
            unint64_t v19 = *(void *)v16 + 8 * v17;
            do
            {
              uint64_t v20 = *v18;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "destroying ");
              uint64_t v34 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v35, (uint64_t)a1);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v20 + 16))(v20, v4, 4, v29);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v23 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2) {
                    WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                  }
                  else {
                    *(_DWORD *)v23 -= 2;
                  }
                }
              }
              ++v18;
            }
            while (v18 != (uint64_t *)v19);
          }
          uint64_t v24 = 1;
          atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
          if (v24 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v25 = v32;
    uint64_t v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 32), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 26), v27);
  int v28 = a1[24];
  if (v28 != -1) {
    ((void (*)(uint8_t *, unsigned int *))off_1EE9EE108[v28])(buf, a1 + 14);
  }
  a1[24] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      uint64_t v4 = WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::~NativePromiseProducer(v4)
         + 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEENS8_9MediaTimeEEEEN3IPC5ErrorELj0EE7Storage8NoResultENSD_ISI_SK_EENS8_8FunctionIFSO_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSN_SO_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::Append,WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>>(WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EE130;
  WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::Append,WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>>(WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9EE130;
  WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::Append,WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>>(WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  v78[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (WTF::NativePromiseBase *)WTF::fastMalloc((WTF *)0x10);
  uint64_t v5 = v4;
  *(void *)uint64_t v4 = &unk_1EE9EE1C8;
  *((void *)v4 + 1) = v3;
  v65[0] = 0;
  v65[1] = 0;
  v65[2] = "operator()";
  v65[3] = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    char v7 = 0;
    int v8 = (atomic_uchar *)(v6 + 48);
    int v9 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v6 + 48), (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      uint64_t v4 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0](v6 + 48);
    }
    int v10 = *(_DWORD *)(v6 + 96);
    atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != 1) {
      uint64_t v4 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
    }
    uint64_t v11 = *(void *)(a1 + 8);
    if (!v10)
    {
      char v12 = 0;
      uint64_t v13 = (WTF::NativePromiseBase *)(v11 + 48);
      uint64_t v66 = (WTF::StringImpl *)(v11 + 48);
      char v67 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v11 + 48), (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
      if (v12) {
        uint64_t v13 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
      }
      uint64_t v14 = (unsigned char *)WTF::NativePromiseBase::logChannel(v13);
      if (*v14)
      {
        char v15 = v14;
        if (v14[16] >= 4u)
        {
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v71, (WTF::Logger::LogSiteIdentifier *)v65);
          WTF::String::String((WTF::String *)&v70, " settling ");
          WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v69, v11);
          WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v72);
          uint64_t v17 = v69;
          uint64_t v69 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v16);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
          long long v43 = v70;
          uint64_t v70 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2) {
              WTF::StringImpl::destroy(v43, v16);
            }
            else {
              *(_DWORD *)v43 -= 2;
            }
          }
          int v44 = v71;
          uint64_t v71 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2) {
              WTF::StringImpl::destroy(v44, v16);
            }
            else {
              *(_DWORD *)v44 -= 2;
            }
          }
          unint64_t v45 = *((void *)v15 + 4);
          uint64_t v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
          if (v46)
          {
            WTF::String::utf8();
            uint64_t v48 = v68[0] ? (char *)v68[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            uint64_t v74 = v48;
            _os_log_impl(&dword_1985F2000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            uint64_t v46 = v68[0];
            v68[0] = 0;
            if (v46)
            {
              if (*(_DWORD *)v46 == 1) {
                uint64_t v46 = (WTF *)WTF::fastFree(v46, v47);
              }
              else {
                --*(_DWORD *)v46;
              }
            }
          }
          if (*v15 && v15[16] >= 4u)
          {
            uint64_t v49 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v50 = *v49;
              if (v50) {
                break;
              }
              int v51 = *v49;
              atomic_compare_exchange_strong_explicit(v49, (unsigned __int8 *)&v51, v50 | 1, memory_order_acquire, memory_order_acquire);
              if (v51 == v50)
              {
                uint64_t v52 = WTF::Logger::observers(v46);
                uint64_t v53 = *(unsigned int *)(v52 + 12);
                if (v53)
                {
                  __n128 v54 = *(uint64_t **)v52;
                  uint64_t v64 = *(void *)v52 + 8 * v53;
                  do
                  {
                    uint64_t v55 = *v54;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v74 + 4), (WTF::Logger::LogSiteIdentifier *)v65);
                    int v75 = 0;
                    WTF::String::String((WTF::String *)&v76, " settling ");
                    int v77 = 0;
                    uint64_t v56 = v11;
                    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v78, v11);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v55 + 16))(v55, v15, 4, v68);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v57);
                    for (uint64_t i = 40; i != -8; i -= 16)
                    {
                      uint64_t v59 = *(WTF::StringImpl **)&buf[i];
                      *(void *)&buf[i] = 0;
                      if (v59)
                      {
                        if (*(_DWORD *)v59 == 2) {
                          WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v47);
                        }
                        else {
                          *(_DWORD *)v59 -= 2;
                        }
                      }
                    }
                    ++v54;
                    uint64_t v11 = v56;
                  }
                  while (v54 != (uint64_t *)v64);
                }
                int v60 = 1;
                atomic_compare_exchange_strong_explicit(v49, (unsigned __int8 *)&v60, 0, memory_order_release, memory_order_relaxed);
                if (v60 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          long long v61 = v72;
          v72 = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2) {
              WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v47);
            }
            else {
              *(_DWORD *)v61 -= 2;
            }
          }
        }
      }
      uint64_t v62 = *(unsigned int *)(v11 + 96);
      if (v62 != -1) {
        ((void (*)(uint8_t *, uint64_t))off_1EE9EE108[v62])(buf, v11 + 56);
      }
      *(void *)(v11 + 56) = v5;
      *(_DWORD *)(v11 + 96) = 2;
      uint64_t result = (WTF::Lock *)WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::dispatchAll(v11, (atomic_uchar *volatile *)&v66);
      if (v67)
      {
        uint64_t result = v66;
        int v63 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v66, (unsigned __int8 *)&v63, 0, memory_order_release, memory_order_relaxed);
        if (v63 != 1) {
          return (WTF::Lock *)WTF::Lock::unlockSlow(result);
        }
      }
      return result;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  long long v18 = (unsigned char *)WTF::NativePromiseBase::logChannel(v4);
  if (*v18)
  {
    unint64_t v19 = v18;
    if (v18[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v72, (WTF::Logger::LogSiteIdentifier *)v65);
      WTF::String::String((WTF::String *)&v71, " ignored already resolved or rejected ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v70, v11);
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, &v66);
      uint64_t v21 = v70;
      uint64_t v70 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2) {
          WTF::StringImpl::destroy(v21, v20);
        }
        else {
          *(_DWORD *)v21 -= 2;
        }
      }
      long long v22 = v71;
      uint64_t v71 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v20);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
      uint64_t v23 = v72;
      v72 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v20);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      uint64_t v24 = *((void *)v19 + 4);
      uint64_t v25 = (WTF *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      if (v25)
      {
        WTF::String::utf8();
        int v27 = v68[0] ? (char *)v68[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        uint64_t v74 = v27;
        _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        uint64_t v25 = v68[0];
        v68[0] = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 1) {
            uint64_t v25 = (WTF *)WTF::fastFree(v25, v26);
          }
          else {
            --*(_DWORD *)v25;
          }
        }
      }
      if (*v19 && v19[16] >= 4u)
      {
        int v28 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v29 = *v28;
          if (v29) {
            break;
          }
          int v30 = *v28;
          atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, v29 | 1, memory_order_acquire, memory_order_acquire);
          if (v30 == v29)
          {
            uint64_t v31 = v11;
            uint64_t v32 = WTF::Logger::observers(v25);
            uint64_t v33 = *(unsigned int *)(v32 + 12);
            if (v33)
            {
              uint64_t v34 = *(uint64_t **)v32;
              uint64_t v35 = *(void *)v32 + 8 * v33;
              do
              {
                uint64_t v36 = *v34;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v74 + 4), (WTF::Logger::LogSiteIdentifier *)v65);
                int v75 = 0;
                WTF::String::String((WTF::String *)&v76, " ignored already resolved or rejected ");
                int v77 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v78, v31);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v68, (uint64_t)buf, 3uLL);
                (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v36 + 16))(v36, v19, 4, v68);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v37);
                for (uint64_t j = 40; j != -8; j -= 16)
                {
                  int v39 = *(WTF::StringImpl **)&buf[j];
                  *(void *)&buf[j] = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2) {
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v26);
                    }
                    else {
                      *(_DWORD *)v39 -= 2;
                    }
                  }
                }
                ++v34;
              }
              while (v34 != (uint64_t *)v35);
            }
            int v40 = 1;
            atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v40, 0, memory_order_release, memory_order_relaxed);
            if (v40 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      unsigned int v41 = v66;
      uint64_t v66 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2) {
          WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v26);
        }
        else {
          *(_DWORD *)v41 -= 2;
        }
      }
    }
  }
  return (WTF::Lock *)(*(uint64_t (**)(WTF::NativePromiseBase *))(*(void *)v5 + 8))(v5);
}

uint64_t WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  int v29 = (atomic_uint *)v30 + 2;
  *(void *)&v30[0] = 1;
  long long v22 = (WTF::NativePromiseBase **)&v24;
  uint64_t v23 = 1;
  uint64_t v4 = *(void **)(a1 + 104);
  if (v4 == (void *)(a1 + 120))
  {
    uint64_t v5 = *(unsigned int *)(a1 + 116);
    memcpy(&v24, v4, 8 * v5);
  }
  else
  {
    *(void *)(a1 + 104) = a1 + 120;
    long long v22 = (WTF::NativePromiseBase **)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 116);
    LODWORD(v23) = *(_DWORD *)(a1 + 112);
  }
  HIDWORD(v23) = v5;
  DWORD1(v30[0]) = 0;
  *(void *)(a1 + 112) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v4);
  uint64_t v6 = *(void *)(a1 + 128);
  uint64_t v19 = v6;
  unsigned int v7 = *(_DWORD *)(a1 + 140);
  int v20 = *(_DWORD *)(a1 + 136);
  unsigned int v21 = v7;
  int v29 = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)&v30[0] = 0;
  *(void *)(a1 + 136) = 0;
  WTF::Vector<WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v8);
  if (HIDWORD(v23))
  {
    int v10 = v22;
    uint64_t v11 = 8 * HIDWORD(v23);
    do
    {
      char v12 = *v10++;
      WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallbackBase::dispatch(v12, a1, a2);
      v11 -= 8;
    }
    while (v11);
  }
  if (v7)
  {
    uint64_t v13 = v6 + 40 * v7;
    uint64_t v14 = a1 + 56;
    do
    {
      char v15 = *(atomic_uint **)v6;
      *(void *)uint64_t v6 = 0;
      int v29 = v15;
      long long v16 = *(_OWORD *)(v6 + 24);
      v30[0] = *(_OWORD *)(v6 + 8);
      v30[1] = v16;
      if (v15)
      {
        atomic_fetch_add(v15 + 2, 1u);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        int v27 = "<chained promise>";
        uint64_t v28 = 0;
        WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::settleAsChainedPromise<WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::Storage>((uint64_t)v15, v14, (WTF::Logger::LogSiteIdentifier *)&v25);
        if (atomic_fetch_add(v15 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v15 + 2);
          (*(void (**)(atomic_uint *))(*(void *)v15 + 16))(v15);
        }
      }
      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        int v27 = "<chained promise>";
        uint64_t v28 = 0;
        WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::settleAsChainedPromise<WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::Storage>(0, v14, (WTF::Logger::LogSiteIdentifier *)&v25);
      }
      WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::~NativePromiseProducer((uint64_t *)&v29);
      v6 += 40;
    }
    while (v6 != v13);
  }
  WTF::Vector<WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v9);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v17);
}

unsigned __int8 *WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, atomic_uchar *volatile *a3)
{
  uint64_t v5 = a1;
  v17[5] = *MEMORY[0x1E4F143B8];
  if (!*((void *)a1 + 2)
    || (int v6 = atomic_load((unsigned __int8 *)(a2 + 145)), v6 == 1)
    && (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(void))(**((void **)a1 + 2) + 24))(*((void *)a1 + 2)),
        a1))
  {
    if (*((unsigned char *)v5 + 56))
    {
      v17[0] = v5;
      uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
      if (*result) {
        BOOL v10 = result[16] >= 4u;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10) {
        return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, a2, (uint64_t)v17, (WTF::NativePromiseBase *)((char *)v5 + 24));
      }
    }
    else
    {
      atomic_uchar *volatile v11 = *a3;
      int v12 = 1;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
      }
      if (WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::hasRunnable(a2))
      {
        WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::takeResultRunnable((uint64_t)&v16, a2);
        uint64_t v13 = v16;
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v16 + 16))(v17, v16);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, void *))(*(void *)v5 + 24))(v5, a2, v17);
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      else
      {
        double v14 = WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::takeResult((uint64_t)v17, a2);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, void *, double))(*(void *)v5 + 24))(v5, a2, v17, v14);
      }
      char v15 = 0;
      uint64_t result = (unsigned __int8 *)*a3;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v15, 1u, memory_order_acquire, memory_order_acquire);
      if (v15) {
        return (unsigned __int8 *)MEMORY[0x19972E8D0]();
      }
    }
  }
  else
  {
    uint64_t v7 = *((void *)v5 + 2);
    atomic_fetch_add((atomic_uint *volatile)v5 + 2, 1u);
    atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
    int v8 = (void *)WTF::fastMalloc((WTF *)0x20);
    *int v8 = &unk_1EE9EE168;
    v8[1] = v5;
    v8[2] = v5;
    v8[3] = a2;
    v17[0] = v8;
    (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, v17);
    uint64_t result = (unsigned __int8 *)v17[0];
    v17[0] = 0;
    if (result) {
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

double WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::takeResult(uint64_t a1, uint64_t a2)
{
  char v4 = 0;
  uint64_t v5 = (atomic_uchar *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a2 + 48);
  }
  if (*(_DWORD *)(a2 + 96) == 1)
  {
    *(unsigned char *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 32) = -1;
    uint64_t v6 = *(unsigned int *)(a2 + 88);
    if (v6 != -1)
    {
      ((void (*)(char *))off_1EE9EE148[v6])(&v12);
      *(_DWORD *)(a1 + 32) = v6;
    }
    int v7 = 1;
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
    }
  }
  else
  {
    uint64_t v9 = std::__throw_bad_variant_access[abi:sn180100]();
    *(void *)&double result = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEN3WTF9MediaTimeEEEEN3IPC5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_0EJSH_SJ_EEEOSZ_EEEDcSR_DpT0_(v9, v10, v11).n128_u64[0];
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEN3WTF9MediaTimeEEEEN3IPC5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_0EJSH_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a2 = *(_WORD *)a3;
  __n128 result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEN3WTF9MediaTimeEEEEN3IPC5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_0EJSH_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EE168;
  char v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EE168;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  char v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  v11[5] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (unsigned char *)*((void *)a1 + 1);
  uint64_t v2 = *((void *)a1 + 3);
  if (v1[56])
  {
    v11[0] = *((void *)a1 + 1);
    __n128 result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(unsigned char *)result) {
      BOOL v4 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)v11, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::hasRunnable(*((void *)a1 + 3));
    uint64_t v7 = *((void *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::takeResultRunnable((uint64_t)&v10, *((void *)a1 + 3));
      uint64_t v8 = v10;
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v10 + 16))(v11, v10);
      (*(void (**)(unsigned char *, uint64_t, void *))(*(void *)v1 + 24))(v1, v7, v11);
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    else
    {
      double v9 = WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::takeResult((uint64_t)v11, *((void *)a1 + 3));
      return (WTF::StringImpl *)(*(uint64_t (**)(unsigned char *, uint64_t, void *, double))(*(void *)v1 + 24))(v1, v7, v11, v9);
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::settleAsChainedPromise<WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  double v14 = v7;
  char v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  uint64_t v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 96);
  uint64_t v11 = *(unsigned int *)(a2 + 40);
  if (v10 == -1)
  {
    if (v11 == -1) {
      goto LABEL_14;
    }
  }
  else if (v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1EE9EE108[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 96) = -1;
    goto LABEL_14;
  }
  uint64_t v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1EE9EE180[v11])(&v16);
LABEL_14:
  __n128 result = (WTF::Lock *)WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::dispatchAll(a1, &v14);
  if (v15)
  {
    __n128 result = v14;
    int v13 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEENS8_9MediaTimeEEEEN3IPC5ErrorELj0EE7Storage8NoResultENSD_ISI_SK_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSN_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 40);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE9EE108[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEENS8_9MediaTimeEEEEN3IPC5ErrorELj0EE7Storage8NoResultENSD_ISI_SK_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSN_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 40);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      uint64_t v7 = v21;
      v21[0] = 0;
      int v22 = -1;
      uint64_t v8 = *(unsigned int *)(a3 + 32);
      if (v8 == -1)
      {
        int v10 = *(_DWORD *)(a2 + 32);
        if (v10 == -1) {
          return result;
        }
        BOOL v9 = (unsigned char *)(a2 + 8);
      }
      else
      {
        __n128 result = ((uint64_t (*)(unsigned char *, unsigned char *, uint64_t))off_1EE9EE148[v8])(v17, v21, a3 + 8);
        int v22 = v8;
        BOOL v9 = (unsigned char *)(a2 + 8);
        int v10 = *(_DWORD *)(a2 + 32);
        if (v10 != -1 && v8 == v10) {
          return ((uint64_t (*)(unsigned char *, unsigned char *, uint64_t))off_1EE9EE198[v8])(v17, v21, a2 + 8);
        }
        if (v8 != 1) {
          goto LABEL_29;
        }
      }
      if (v10 == 1) {
        int v12 = 1;
      }
      else {
        int v12 = v8;
      }
      if (v10 == 1) {
        int v13 = v21;
      }
      else {
        int v13 = v9;
      }
      if (v10 == 1) {
        double v14 = v9;
      }
      else {
        double v14 = v21;
      }
      BOOL v15 = v10 == -1;
      if (v10 == -1) {
        int v10 = -1;
      }
      else {
        int v10 = v12;
      }
      if (!v15)
      {
        uint64_t v7 = v13;
        BOOL v9 = v14;
      }
LABEL_29:
      v17[0] = 0;
      int v18 = -1;
      if (v10 != -1)
      {
        __n128 result = ((uint64_t (*)(char *, unsigned char *, unsigned char *))off_1EE9EE148[v10])(&v19, v17, v9);
        int v18 = v10;
      }
      *((_DWORD *)v9 + 6) = -1;
      uint64_t v16 = *((unsigned int *)v7 + 6);
      if (v16 != -1)
      {
        __n128 result = ((uint64_t (*)(char *, unsigned char *, unsigned char *))off_1EE9EE1A8[v16])(&v19, v9, v7);
        *((_DWORD *)v9 + 6) = v16;
        int v10 = v18;
      }
      *((_DWORD *)v7 + 6) = -1;
      if (v10 != -1)
      {
        __n128 result = ((uint64_t (*)(char *, unsigned char *, unsigned char *))off_1EE9EE1A8[v10])(&v19, v7, v17);
        *((_DWORD *)v7 + 6) = v10;
      }
      return result;
    }
    __n128 result = ((uint64_t (*)(unsigned char *, uint64_t))off_1EE9EE108[v5])(v20, v4);
  }
  *(unsigned char *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 40) = -1;
  *(_DWORD *)(v4 + 32) = -1;
  uint64_t v11 = *(unsigned int *)(a3 + 32);
  if (v11 != -1)
  {
    __n128 result = ((uint64_t (*)(unsigned char *))off_1EE9EE148[v11])(v20);
    *(_DWORD *)(v4 + 32) = v11;
  }
  *(_DWORD *)(v4 + 40) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEENS8_9MediaTimeEEEEN3IPC5ErrorELj0EE7Storage8NoResultENSD_ISI_SK_EENS8_8FunctionIFSO_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISS_LNS0_6_TraitE1EEEEEvOT_EUlRSY_OT0_E_JRNS0_6__baseILSW_1EJSN_SO_SR_EEEOS16_EEEDcSY_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 40);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE9EE108[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 40) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  __n128 result = *a2;
  *a2 = v6;
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJNS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEN3WTF9MediaTimeEEEEN3IPC5ErrorEEE6__swapB8sn180100ERSJ_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJSG_SI_EEESU_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::optional<WebCore::PlatformMediaError>::swap[abi:sn180100]((unsigned char *)a2, (unsigned char *)a3);
  __n128 result = *(__n128 *)(a2 + 8);
  uint64_t v6 = *(void *)(a3 + 13);
  *(void *)(a2 + 8) = *(void *)(a3 + 8);
  *(void *)(a2 + 13) = v6;
  *(void *)(a3 + 13) = *(_OWORD *)&result >> 40;
  *(void *)(a3 + 8) = result.n128_u64[0];
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJNS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEN3WTF9MediaTimeEEEEN3IPC5ErrorEEE6__swapB8sn180100ERSJ_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJSG_SI_EEESU_EEEDcSL_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEN3WTF9MediaTimeEEEEN3IPC5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSH_SJ_EEEEEvRSL_OT_EUlRSQ_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJSH_SJ_EEEOSZ_EEEDcSQ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a2 = *(_WORD *)a3;
  __n128 result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_5tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEN3WTF9MediaTimeEEEEN3IPC5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSH_SJ_EEEEEvRSL_OT_EUlRSQ_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJSH_SJ_EEEOSZ_EEEDcSQ_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::Append,WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>>(WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EE1C8;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::Append,WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>>(WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9EE1C8;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t **WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::Append,WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>>(WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error>>::call@<X0>(uint64_t **result@<X0>, uint64_t a2@<X8>)
{
  char v3 = (IPC::Decoder *)result[1];
  if (!v3)
  {
    *(unsigned char *)(a2 + 8) = 1;
LABEL_14:
    *(_DWORD *)(a2 + 32) = 1;
    return result;
  }
  if (!*(void *)v3)
  {
LABEL_13:
    *(unsigned char *)(a2 + 8) = 13;
    goto LABEL_14;
  }
  IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>(result[1], &v8);
  if (!v9 || (__n128 result = (uint64_t **)IPC::Decoder::decode<WTF::MediaTime>(v3, (uint64_t)&v10), !v11))
  {
    uint64_t v5 = *(void *)v3;
    uint64_t v6 = *((void *)v3 + 1);
    *(void *)char v3 = 0;
    *((void *)v3 + 1) = 0;
    __n128 result = (uint64_t **)*((void *)v3 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      __n128 result = (uint64_t **)((uint64_t (*)(uint64_t **, uint64_t))(*result)[2])(result, v5);
    }
    goto LABEL_13;
  }
  if (v9)
  {
    long long v4 = v10;
    *(_WORD *)(a2 + 8) = v8;
    *(_OWORD *)(a2 + 16) = v4;
    *(_DWORD *)(a2 + 32) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *WTF::NativePromiseProducer<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::assertIsDead(v2);
    char v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__15tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEENS_9MediaTimeEEEEN3IPC5ErrorELj0EE11whenSettledIZZN6WebKit25SourceBufferPrivateRemote6appendEONS_3RefINS8_12SharedBufferENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEEN3__0clEvEUlOT_E_EEDaRNS_34RefCountedSerialFunctionDispatcherEST_RKNS_6Logger17LogSiteIdentifierEEUlONS7_ISC_SE_EEE_NSJ_INS2_IvS9_Lj0EEENSL_IS15_EENSN_IS15_EEEEJS13_EED1Ev(void *a1, void *a2)
{
  char v3 = (atomic_uchar *)a1[1];
  *a1 = &unk_1EE9EE1F0;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__15tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEENS_9MediaTimeEEEEN3IPC5ErrorELj0EE11whenSettledIZZN6WebKit25SourceBufferPrivateRemote6appendEONS_3RefINS8_12SharedBufferENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEEN3__0clEvEUlOT_E_EEDaRNS_34RefCountedSerialFunctionDispatcherEST_RKNS_6Logger17LogSiteIdentifierEEUlONS7_ISC_SE_EEE_NSJ_INS2_IvS9_Lj0EEENSL_IS15_EENSN_IS15_EEEEJS13_EED0Ev(WTF *this, void *a2)
{
  char v3 = (atomic_uchar *)*((void *)this + 1);
  *(void *)this = &unk_1EE9EE1F0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::Lock *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__15tupleIJNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEENS_9MediaTimeEEEEN3IPC5ErrorELj0EE11whenSettledIZZN6WebKit25SourceBufferPrivateRemote6appendEONS_3RefINS8_12SharedBufferENS_12RawPtrTraitsISK_EENS_21DefaultRefDerefTraitsISK_EEEEEN3__0clEvEUlOT_E_EEDaRNS_34RefCountedSerialFunctionDispatcherEST_RKNS_6Logger17LogSiteIdentifierEEUlONS7_ISC_SE_EEE_NSJ_INS2_IvS9_Lj0EEENSL_IS15_EENSN_IS15_EEEEJS13_EE4callES13_@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(_DWORD *)(a2 + 32))
  {
    LOBYTE(v23) = 4;
    long long v20 = 0uLL;
    unsigned int v21 = "operator()";
    uint64_t v22 = 0;
    return WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((char *)&v23, (WTF::Logger::LogSiteIdentifier *)&v20, a3);
  }
  if (*(void *)(a1 + 8))
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(a1 + 8), *(void *)(a1 + 16), &v20);
    if ((void)v20)
    {
      char v6 = 0;
      BOOL v7 = (atomic_uchar *)(v20 + 370);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v20 + 370), (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
      if (v6) {
        MEMORY[0x19972E8D0](v7);
      }
      if (*(_DWORD *)(a2 + 32)) {
        goto LABEL_24;
      }
      uint64_t v8 = v20 + 376;
      uint64_t v9 = *(void *)(a2 + 21);
      *(void *)(v20 + 376) = *(void *)(a2 + 16);
      *(void *)(v8 + 5) = v9;
      int v10 = 1;
      atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
      if (v10 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v7);
      }
      uint64_t v11 = v20;
      *(void *)&long long v20 = 0;
      if (v11) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v11 + 8));
      }
    }
  }
  if (*(_DWORD *)(a2 + 32))
  {
LABEL_24:
    uint64_t v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::Lock *)WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::~ThenCallback(v19);
  }
  long long v20 = 0uLL;
  unsigned int v21 = "operator()";
  uint64_t v22 = 0;
  uint64_t v12 = WTF::fastMalloc((WTF *)0x78);
  uint64_t v13 = WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::NativePromise(v12, &v20);
  char v14 = 0;
  *a3 = v13;
  BOOL v15 = (WTF::Lock *)(v13 + 48);
  uint64_t v23 = v15;
  char v24 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v15, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
  if (v14) {
    BOOL v15 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  uint64_t v16 = (unsigned char *)WTF::NativePromiseBase::logChannel(v15);
  if (*v16 && v16[16] >= 4u) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v16, 4u, (WTF::Logger::LogSiteIdentifier *)&v20, " settling ", v12);
  }
  uint64_t v17 = *(unsigned int *)(v12 + 64);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9EE0A0[v17])(&v25, v12 + 56);
  }
  *(_DWORD *)(v12 + 64) = -1;
  *(_WORD *)(v12 + 56) = *(_WORD *)(a2 + 8);
  int v18 = 1;
  *(_DWORD *)(v12 + 64) = 1;
  __n128 result = (WTF::Lock *)WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::dispatchAll((void *)v12, (atomic_uchar *volatile *)&v23);
  if (v24)
  {
    __n128 result = v23;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v23, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
    if (v18 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::~ThenCallback(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EE218;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9EE248;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9EE218;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9EE248;
  long long v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::disconnect(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v63[1] = *MEMORY[0x1E4F143B8];
  int v5 = *(_DWORD *)(a3 + 32);
  uint64_t v42 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)v42) {
    BOOL v6 = *(unsigned __int8 *)(v42 + 16) >= 4u;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    if (v5) {
      BOOL v7 = "Rejecting";
    }
    else {
      BOOL v7 = "Resolving";
    }
    unsigned int v41 = (char *)v7;
    WTF::String::String((WTF::String *)&v51, v7);
    WTF::String::String((WTF::String *)&v50, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v49, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v48, "[");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v47, a2);
    WTF::String::String((WTF::String *)&v46, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v44, "]");
    uint64_t result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, (uint64_t *)&v45, (uint64_t *)&v44, &v52);
    if (!v52)
    {
      __break(0xC471u);
      return result;
    }
    int v10 = v44;
    int v44 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    uint64_t v11 = v45;
    unint64_t v45 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = v46;
    uint64_t v46 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v9);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t v13 = v47;
    uint64_t v47 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v9);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    char v14 = v48;
    uint64_t v48 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v9);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    BOOL v15 = v49;
    uint64_t v49 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v9);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t v16 = v50;
    int v50 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v9);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = v51;
    int v51 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v9);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    int v18 = *(NSObject **)(v42 + 32);
    uint64_t v19 = (WTF *)os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (v19)
    {
      WTF::String::utf8();
      unsigned int v21 = v43[0] ? (char *)v43[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v21;
      _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v19 = v43[0];
      v43[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1) {
          uint64_t v19 = (WTF *)WTF::fastFree(v19, v20);
        }
        else {
          --*(_DWORD *)v19;
        }
      }
    }
    if (*(unsigned char *)v42 && *(unsigned __int8 *)(v42 + 16) >= 4u)
    {
      uint64_t v22 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v23 = *v22;
        if (v23) {
          break;
        }
        int v24 = *v22;
        atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v24, v23 | 1, memory_order_acquire, memory_order_acquire);
        if (v24 == v23)
        {
          uint64_t v25 = WTF::Logger::observers(v19);
          uint64_t v26 = *(unsigned int *)(v25 + 12);
          if (v26)
          {
            int v27 = *(uint64_t **)v25;
            uint64_t v40 = *(void *)v25 + 8 * v26;
            do
            {
              uint64_t v28 = *v27;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], v41);
              LODWORD(v54) = 0;
              WTF::String::String((WTF::String *)&v55, " then() call made from ");
              int v56 = 0;
              WTF::Logger::LogSiteIdentifier::toString(&v57, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
              int v58 = 0;
              WTF::String::String((WTF::String *)v59, "[");
              v59[2] = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v60, a2);
              int v61 = 0;
              WTF::String::String((WTF::String *)v62, " callback:");
              v62[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v62[6] = 0;
              WTF::String::String((WTF::String *)v63, "]");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v43, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v28 + 16))(v28, v42, 4, v43);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v29);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                uint64_t v31 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v31)
                {
                  if (*(_DWORD *)v31 == 2) {
                    WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v20);
                  }
                  else {
                    *(_DWORD *)v31 -= 2;
                  }
                }
              }
              ++v27;
            }
            while (v27 != (uint64_t *)v40);
          }
          int v32 = 1;
          atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
          if (v32 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v33 = v52;
    uint64_t v52 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v20);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
  char v34 = 0;
  int v35 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v34, 1u, memory_order_acquire, memory_order_acquire);
  if (v34) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  uint64_t v36 = *(uint64_t **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
  if (v35 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  }
  (*(void (**)(WTF **__return_ptr))(**(void **)(a1 + 72) + 16))(v43);
  if (v36)
  {
    *(_OWORD *)buf = 0uLL;
    __n128 v54 = "<chained completion promise>";
    uint64_t v55 = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo((atomic_uchar *)v43[0], (unint64_t)v36, (WTF::Logger::LogSiteIdentifier *)buf);
  }
  char v37 = (unsigned int *)v43[0];
  v43[0] = 0;
  if (v37 && atomic_fetch_add((atomic_uint *volatile)v37 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v37 + 2);
    (*(void (**)(unsigned int *))(*(void *)v37 + 16))(v37);
  }
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v36)
  {
    int v38 = WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(v36);
    return WTF::fastFree((WTF *)v38, v39);
  }
  return result;
}

uint64_t WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(unsigned char *)(result + 56) = 1;
  return result;
}

unsigned __int8 *WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v5 = 0;
  v65[1] = *MEMORY[0x1E4F143B8];
  BOOL v6 = (WTF::Lock *)(a1 + 48);
  long long v43 = v6;
  char v44 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    BOOL v6 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  *(unsigned char *)(a1 + 144) = 1;
  uint64_t v7 = *(unsigned int *)(a1 + 96);
  uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v6);
  uint64_t v42 = result;
  if (*result) {
    BOOL v9 = result[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v53, a3);
    WTF::String::String((WTF::String *)&v52, " invoking maybeSettle() [");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v51, a1);
    WTF::String::String((WTF::String *)&v50, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v48, " isNothing:");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v47);
    WTF::String::String((WTF::String *)&v46, "]");
    uint64_t result = (unsigned __int8 *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, &v54);
    if (!v54)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v11 = v46;
    uint64_t v46 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = v47;
    uint64_t v47 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    uint64_t v13 = v48;
    uint64_t v48 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v10);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    char v14 = v49;
    uint64_t v49 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v10);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    BOOL v15 = v50;
    int v50 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v10);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t v16 = v51;
    int v51 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v10);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = v52;
    uint64_t v52 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v10);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    int v18 = v53;
    uint64_t v53 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v10);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    uint64_t v19 = *((void *)v42 + 4);
    long long v20 = (WTF *)os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      WTF::String::utf8();
      uint64_t v22 = v45[0] ? (char *)v45[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      int v56 = v22;
      _os_log_impl(&dword_1985F2000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      long long v20 = v45[0];
      v45[0] = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1) {
          long long v20 = (WTF *)WTF::fastFree(v20, v21);
        }
        else {
          --*(_DWORD *)v20;
        }
      }
    }
    if (*v42 && v42[16] >= 4u)
    {
      int v23 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v24 = *v23;
        if (v24) {
          break;
        }
        int v25 = *v23;
        atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v25, v24 | 1, memory_order_acquire, memory_order_acquire);
        if (v25 == v24)
        {
          uint64_t v26 = WTF::Logger::observers(v20);
          uint64_t v27 = *(unsigned int *)(v26 + 12);
          if (v27)
          {
            uint64_t v28 = *(uint64_t **)v26;
            uint64_t v40 = *(void *)v26 + 8 * v27;
            do
            {
              uint64_t v29 = v7;
              uint64_t v30 = *v28;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v56 + 4), a3);
              int v57 = 0;
              WTF::String::String((WTF::String *)v58, " invoking maybeSettle() [");
              v58[2] = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v59, a1);
              int v60 = 0;
              WTF::String::String((WTF::String *)v61, " callback:");
              v61[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v61[6] = 0;
              WTF::String::String((WTF::String *)v62, " isNothing:");
              v62[2] = 0;
              WTF::LogArgument<BOOL>::toString<BOOL>(&v63);
              int v64 = 0;
              WTF::String::String((WTF::String *)v65, "]");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v45, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(void *)v30 + 16))(v30, v42, 4, v45);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v31);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                uint64_t v33 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v33)
                {
                  if (*(_DWORD *)v33 == 2) {
                    WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v21);
                  }
                  else {
                    *(_DWORD *)v33 -= 2;
                  }
                }
              }
              ++v28;
              uint64_t v7 = v29;
            }
            while (v28 != (uint64_t *)v40);
          }
          int v34 = 1;
          atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
          if (v34 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = (unsigned __int8 *)v54;
    __n128 v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (*(_DWORD *)(a1 + 96))
  {
    uint64_t result = WTF::NativePromise<std::tuple<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,WTF::MediaTime>,IPC::Error,0u>::ThenCallbackBase::dispatch(*a2, a1, (atomic_uchar *volatile *)&v43);
  }
  else
  {
    uint64_t v35 = *(unsigned int *)(a1 + 116);
    if (v35 == *(_DWORD *)(a1 + 112))
    {
      uint64_t result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 104, v35 + 1, (unint64_t)a2);
      uint64_t v35 = *(unsigned int *)(a1 + 116);
      int v36 = v35 + 1;
      uint64_t v37 = *(void *)(a1 + 104);
      int v38 = *(WTF::NativePromiseBase **)result;
      *(void *)uint64_t result = 0;
    }
    else
    {
      int v36 = v35 + 1;
      uint64_t v37 = *(void *)(a1 + 104);
      int v38 = *a2;
      *a2 = 0;
    }
    *(void *)(v37 + 8 * v35) = v38;
    *(_DWORD *)(a1 + 116) = v36;
  }
  if (v44)
  {
    uint64_t result = (unsigned __int8 *)v43;
    int v39 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v43, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
    if (v39 != 1) {
      return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote17removeCodedFramesERKNS_9MediaTimeES7_S7_E3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9EE278;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote17removeCodedFramesERKNS_9MediaTimeES7_S7_E3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED0Ev(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9EE278;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v3);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote17removeCodedFramesERKNS_9MediaTimeES7_S7_E3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEE4callEv(uint64_t a1)
{
  unint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 56);
  long long v4 = *(atomic_uchar **)(v3 + 312);
  if (!v4)
  {
    uint64_t v27 = 0;
LABEL_14:
    LOBYTE(v30) = 4;
    uint64_t v33 = 0;
    *(void *)&long long v34 = 0;
    *((void *)&v34 + 1) = "operator()";
    *(void *)&long long v35 = 0;
    WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((char *)&v30, (WTF::Logger::LogSiteIdentifier *)&v33, (uint64_t *)&v26);
    goto LABEL_15;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v4, *(void *)(v3 + 320), &v27);
  if (!v27) {
    goto LABEL_14;
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v3 + 368));
  if (v5) {
    goto LABEL_14;
  }
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v3 + 369));
  if (v6) {
    goto LABEL_14;
  }
  uint64_t v7 = a1 + 64;
  uint64_t v8 = a1 + 80;
  uint64_t v9 = a1 + 96;
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v3 + 312), *(void *)(v3 + 320), &v28);
  int v10 = *(os_unfair_lock_s **)(v28 + 32);
  uint64_t v11 = *(void *)(v3 + 336);
  uint64_t v33 = 0;
  *(void *)&long long v34 = 0;
  *((void *)&v34 + 1) = "sendWithPromisedReply";
  *(void *)&long long v35 = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v30, 0, (WTF::Logger::LogSiteIdentifier *)&v33);
  uint64_t v12 = (atomic_uchar *)v30;
  if (v30)
  {
    atomic_fetch_add((atomic_uint *volatile)(v30 + 8), 1u);
    uint64_t v13 = v30;
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v26 = v12;
  uint64_t v30 = 0;
  long long v34 = v31;
  long long v35 = v32;
  uint64_t v14 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v14 = &unk_1EE9EE2A0;
  *(void *)(v14 + 8) = v13;
  uint64_t v33 = 0;
  long long v15 = v35;
  *(_OWORD *)(v14 + 16) = v34;
  *(_OWORD *)(v14 + 32) = v15;
  v29[0] = v14;
  v29[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v33);
  uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v16 = 1386;
  *((void *)v16 + 1) = v11;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  uint64_t v33 = v16;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v16, v7);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v16, v8);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v16, v9);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v10, &v33, v29, 0, 0);
  int v18 = v33;
  uint64_t v33 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v17);
    WTF::fastFree(v24, v25);
  }
  uint64_t v19 = v29[0];
  v29[0] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v30);
  uint64_t v21 = v28;
  uint64_t v28 = 0;
  if (v21) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v21 + 24), v20);
  }
LABEL_15:
  uint64_t v22 = v27;
  uint64_t v27 = 0;
  if (v22) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v22 + 24), v20);
  }
  uint64_t v33 = 0;
  *(void *)&long long v34 = 0;
  *((void *)&v34 + 1) = "invokeAsync proxy";
  *(void *)&long long v35 = 0;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::chainTo(v26, v2, (WTF::Logger::LogSiteIdentifier *)&v33);
  uint64_t result = (unsigned int *)v26;
  uint64_t v26 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::RemoveCodedFrames,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EE2A0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::RemoveCodedFrames,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9EE2A0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::RemoveCodedFrames,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  long long v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9EE2C8;
  v4[1] = v3;
  uint64_t v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  void v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<void,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  uint64_t result = (uint64_t)v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::RemoveCodedFrames,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EE2C8;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::RemoveCodedFrames,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9EE2C8;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::RemoveCodedFrames,WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>>::call@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  unint64_t v2 = *(void **)(result + 8);
  if (v2 && *v2) {
    *a2 = 0;
  }
  else {
    *a2 = 260;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote15computeSeekTimeERKN7WebCore10SeekTargetEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9EE2F0;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote15computeSeekTimeERKN7WebCore10SeekTargetEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED0Ev(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9EE2F0;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v3);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote15computeSeekTimeERKN7WebCore10SeekTargetEE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEE4callEv(uint64_t a1)
{
  v91[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(atomic_uchar **)(v2 + 312);
  if (v3)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v3, *(void *)(v2 + 320), &v79);
    if (v79)
    {
      unsigned __int8 v4 = atomic_load((unsigned __int8 *)(v2 + 368));
      if ((v4 & 1) == 0)
      {
        unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v2 + 369));
        if ((v5 & 1) == 0)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v2 + 312), *(void *)(v2 + 320), &v80);
          unsigned __int8 v6 = (os_unfair_lock_s *)*((void *)v80 + 4);
          uint64_t v7 = *(void *)(v2 + 336);
          *(void *)buf = 0;
          *(void *)&buf[8] = 0;
          *(void *)&uint8_t buf[16] = "sendWithPromisedReply";
          *(void *)&long long v82 = 0;
          WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v68, 0, (WTF::Logger::LogSiteIdentifier *)buf);
          uint64_t v8 = v68;
          if (v68)
          {
            atomic_fetch_add((atomic_uint *volatile)(v68 + 8), 1u);
            uint64_t v9 = v68;
          }
          else
          {
            uint64_t v9 = 0;
          }
          uint64_t v67 = v8;
          uint64_t v68 = 0;
          *(_OWORD *)&buf[8] = v69;
          long long v82 = v70;
          uint64_t v10 = WTF::fastMalloc((WTF *)0x30);
          *(void *)uint64_t v10 = &unk_1EE9EE318;
          *(void *)(v10 + 8) = v9;
          *(void *)buf = 0;
          long long v11 = v82;
          *(_OWORD *)(v10 + 16) = *(_OWORD *)&buf[8];
          *(_OWORD *)(v10 + 32) = v11;
          v71[0] = (WTF *)v10;
          v71[1] = (WTF *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
          WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)buf);
          uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v12 = 1382;
          *((void *)v12 + 1) = v7;
          *((void *)v12 + 66) = (char *)v12 + 16;
          *((void *)v12 + 67) = 512;
          *((void *)v12 + 68) = 0;
          *((void *)v12 + 70) = 0;
          *((void *)v12 + 69) = 0;
          IPC::Encoder::encodeHeader(v12);
          *(void *)buf = v12;
          IPC::ArgumentCoder<WebCore::SeekTarget,void>::encode(v12, a1 + 64);
          IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v6, (IPC::Encoder **)buf, (uint64_t *)v71, 0, 0);
          uint64_t v14 = *(IPC::Encoder **)buf;
          *(void *)buf = 0;
          if (v14)
          {
            IPC::Encoder::~Encoder(v14, v13);
            WTF::fastFree(v63, v64);
          }
          long long v15 = v71[0];
          v71[0] = 0;
          if (v15) {
            (*(void (**)(WTF *))(*(void *)v15 + 8))(v15);
          }
          uint64_t v16 = (WTF::NativePromiseBase *)WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v68);
          int v18 = v80;
          long long v80 = 0;
          if (v18) {
            uint64_t v16 = (WTF::NativePromiseBase *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*((atomic_uchar **)v18 + 3), v17);
          }
          goto LABEL_15;
        }
      }
    }
  }
  else
  {
    long long v79 = 0;
  }
  LOBYTE(v68) = 4;
  *(void *)buf = 0;
  *(void *)&buf[8] = 0;
  *(void *)&uint8_t buf[16] = "operator()";
  *(void *)&long long v82 = 0;
  uint64_t v16 = WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((char *)&v68, (WTF::Logger::LogSiteIdentifier *)buf, &v67);
LABEL_15:
  uint64_t v19 = v79;
  long long v79 = 0;
  if (v19) {
    uint64_t v16 = (WTF::NativePromiseBase *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*((atomic_uchar **)v19 + 3), v17);
  }
  char v20 = 0;
  uint64_t v21 = (atomic_uchar **)(a1 + 8);
  uint64_t v22 = v67;
  uint64_t v68 = 0;
  *(void *)&long long v69 = 0;
  *((void *)&v69 + 1) = "invokeAsync proxy";
  *(void *)&long long v70 = 0;
  int v23 = (atomic_uchar *)(v67 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v67 + 48), (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
  if (v20) {
    uint64_t v16 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0](v23);
  }
  *(unsigned char *)(v22 + 128) = 1;
  int v24 = *v21;
  if (*v21) {
    atomic_fetch_add((atomic_uint *volatile)v24 + 2, 1u);
  }
  int v25 = (unsigned char *)WTF::NativePromiseBase::logChannel(v16);
  if (!*v25) {
    goto LABEL_83;
  }
  uint64_t v26 = v25;
  if (v25[16] < 4u) {
    goto LABEL_83;
  }
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v79, (WTF::Logger::LogSiteIdentifier *)&v68);
  WTF::String::String((WTF::String *)&v78, " invoking chainTo() [");
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v22, &v77);
  WTF::String::String((WTF::String *)&v76, " chainedPromise:");
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)v24, &v75);
  WTF::String::String((WTF::String *)&v74, " isNothing:");
  WTF::LogArgument<BOOL>::toString<BOOL>(&v73);
  WTF::String::String((WTF::String *)&v72, "]");
  uint64_t result = (unsigned int *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v74, (uint64_t *)&v73, (uint64_t *)&v72, &v80);
  if (!v80)
  {
    __break(0xC471u);
    return result;
  }
  uint64_t v29 = v72;
  v72 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v28);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  uint64_t v30 = v73;
  v73 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, v28);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  long long v31 = v74;
  uint64_t v74 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, v28);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  long long v32 = v75;
  int v75 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2) {
      WTF::StringImpl::destroy(v32, v28);
    }
    else {
      *(_DWORD *)v32 -= 2;
    }
  }
  uint64_t v33 = v76;
  uint64_t v76 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, v28);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  long long v34 = v77;
  int v77 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, v28);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  long long v35 = v78;
  v78 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2) {
      WTF::StringImpl::destroy(v35, v28);
    }
    else {
      *(_DWORD *)v35 -= 2;
    }
  }
  int v36 = v79;
  long long v79 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, v28);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
  uint64_t v37 = *((void *)v26 + 4);
  int v38 = (WTF *)os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
  if (v38)
  {
    WTF::String::utf8();
    uint64_t v40 = v71[0] ? (char *)v71[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v40;
    _os_log_impl(&dword_1985F2000, v37, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    int v38 = v71[0];
    v71[0] = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 1) {
        int v38 = (WTF *)WTF::fastFree(v38, v39);
      }
      else {
        --*(_DWORD *)v38;
      }
    }
  }
  if (*v26 && v26[16] >= 4u)
  {
    unsigned int v41 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v42 = *v41;
      if (v42) {
        break;
      }
      int v43 = *v41;
      atomic_compare_exchange_strong_explicit(v41, (unsigned __int8 *)&v43, v42 | 1, memory_order_acquire, memory_order_acquire);
      if (v43 == v42)
      {
        uint64_t v66 = v26;
        uint64_t v44 = WTF::Logger::observers(v38);
        uint64_t v45 = *(unsigned int *)(v44 + 12);
        if (v45)
        {
          uint64_t v46 = *(uint64_t **)v44;
          uint64_t v65 = *(void *)v44 + 8 * v45;
          do
          {
            uint64_t v47 = *v46;
            *(_DWORD *)buf = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)&v68);
            *(_DWORD *)&uint8_t buf[16] = 0;
            WTF::String::String((WTF::String *)&v82, " invoking chainTo() [");
            DWORD2(v82) = 0;
            WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v22, &v83);
            int v84 = 0;
            WTF::String::String((WTF::String *)v85, " chainedPromise:");
            v85[2] = 0;
            WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)v24, &v86);
            int v87 = 0;
            WTF::String::String((WTF::String *)v88, " isNothing:");
            v88[2] = 0;
            WTF::LogArgument<BOOL>::toString<BOOL>(&v89);
            int v90 = 0;
            WTF::String::String((WTF::String *)v91, "]");
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v71, (uint64_t)buf, 8uLL);
            (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v47 + 16))(v47, v66, 4, v71);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v71, v48);
            for (uint64_t i = 120; i != -8; i -= 16)
            {
              int v50 = *(WTF::StringImpl **)&buf[i];
              *(void *)&buf[i] = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2) {
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v39);
                }
                else {
                  *(_DWORD *)v50 -= 2;
                }
              }
            }
            ++v46;
          }
          while (v46 != (uint64_t *)v65);
        }
        int v51 = 1;
        atomic_compare_exchange_strong_explicit(v41, (unsigned __int8 *)&v51, 0, memory_order_release, memory_order_relaxed);
        uint64_t v21 = (atomic_uchar **)(a1 + 8);
        if (v51 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  uint64_t v52 = v80;
  long long v80 = 0;
  if (!v52)
  {
LABEL_83:
    if (v24) {
      goto LABEL_84;
    }
    goto LABEL_86;
  }
  if (*(_DWORD *)v52 != 2)
  {
    *(_DWORD *)v52 -= 2;
    goto LABEL_83;
  }
  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v39);
  if (v24)
  {
LABEL_84:
    if (atomic_fetch_add((atomic_uint *volatile)v24 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v24 + 2);
      (*(void (**)(atomic_uchar *))(*(void *)v24 + 16))(v24);
    }
  }
LABEL_86:
  unsigned __int8 v53 = atomic_load((unsigned __int8 *)(v22 + 129));
  WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::setDispatchMode(*v21, v53, (WTF::Logger::LogSiteIdentifier *)&v68);
  if (*(_DWORD *)(v22 + 80))
  {
    WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleChainedPromise(v22, (uint64_t)v21);
  }
  else
  {
    uint64_t v54 = *(unsigned int *)(v22 + 124);
    if (v54 == *(_DWORD *)(v22 + 120))
    {
      unint64_t v55 = WTF::Vector<WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v22 + 112, v54 + 1, (unint64_t)v21);
      uint64_t v56 = *(void *)(v22 + 112) + 40 * *(unsigned int *)(v22 + 124);
      uint64_t v57 = *(void *)v55;
      *(void *)unint64_t v55 = 0;
      *(void *)uint64_t v56 = v57;
      long long v58 = *(_OWORD *)(v55 + 24);
      *(_OWORD *)(v56 + 8) = *(_OWORD *)(v55 + 8);
      *(_OWORD *)(v56 + 24) = v58;
    }
    else
    {
      uint64_t v59 = *(void *)(v22 + 112) + 40 * v54;
      uint64_t v60 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      *(void *)uint64_t v59 = v60;
      long long v61 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(v59 + 24) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(v59 + 8) = v61;
    }
    ++*(_DWORD *)(v22 + 124);
  }
  int v62 = 1;
  atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v62, 0, memory_order_release, memory_order_relaxed);
  if (v62 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
  }
  uint64_t result = (unsigned int *)v67;
  uint64_t v67 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::ComputeSeekTime,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EE318;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::ComputeSeekTime,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9EE318;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::ComputeSeekTime,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  unsigned __int8 v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9EE340;
  v4[1] = v3;
  uint64_t v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  void v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  uint64_t result = (uint64_t)v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::ComputeSeekTime,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EE340;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::ComputeSeekTime,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9EE340;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::ComputeSeekTime,WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::MediaTime,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = *(uint64_t **)(a1 + 8);
  if (result
    && *result
    && (uint64_t result = (uint64_t *)IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>>>(result, (uint64_t)&v4), v6))
  {
    *(_OWORD *)a2 = v4;
    *(void *)(a2 + 16) = v5;
  }
  else
  {
    *(unsigned char *)a2 = 4;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
  }
  else
  {
    unint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t *WTF::Vector<WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unint64_t v3 = (WTF *)*result;
      unsigned int v4 = *((_DWORD *)result + 3);
      int v5 = 40 * a2;
      uint64_t result = (uint64_t *)WTF::fastMalloc((WTF *)(40 * a2));
      *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x28;
      uint64_t *v2 = (uint64_t)result;
      if (v4)
      {
        unint64_t v7 = result;
        uint64_t result = (uint64_t *)v3;
        do
        {
          uint64_t v8 = *result;
          *uint64_t result = 0;
          *unint64_t v7 = v8;
          long long v9 = *(_OWORD *)(result + 1);
          *(_OWORD *)(v7 + 3) = *(_OWORD *)(result + 3);
          *(_OWORD *)(v7 + 1) = v9;
          uint64_t result = WTF::NativePromiseProducer<WTF::MediaTime,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(result)
                 + 5;
          v7 += 5;
        }
        while (result != (uint64_t *)((char *)v3 + 40 * v4));
      }
      if (v3)
      {
        if ((WTF *)*v2 == v3)
        {
          uint64_t *v2 = 0;
          *((_DWORD *)v2 + 2) = 0;
        }
        return (uint64_t *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x88);
  int v5 = (atomic_uchar *)WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::NativePromise(v4, a2);
  *(void *)a1 = v5;
  long long v6 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 8) = v6;
  WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::setDispatchMode(v5, 0, a2);
  return a1;
}

WTF::StringImpl *WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::setDispatchMode(atomic_uchar *a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5 = (uint64_t)a1;
  char v6 = 0;
  unint64_t v7 = (WTF::Lock *)(a1 + 48);
  atomic_compare_exchange_strong_explicit(a1 + 48, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    a1 = (atomic_uchar *)MEMORY[0x19972E8D0](a1 + 48);
  }
  uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)result) {
    BOOL v9 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    uint64_t result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)result, a3, " runSynchronouslyOnTarget ", v5);
  }
  atomic_store(a2, (unsigned __int8 *)(v5 + 129));
  int v10 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v5 + 48), (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1)
  {
    return (WTF::StringImpl *)WTF::Lock::unlockSlow(v7);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::NativePromise(uint64_t a1, _OWORD *a2)
{
  v33[2] = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9EE368;
  long long v3 = a2[1];
  *(_OWORD *)(a1 + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a1 + 104;
  *(void *)(a1 + 96) = 1;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 128) = 0;
  uint64_t v4 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (!*v4) {
    return a1;
  }
  uint64_t v5 = v4;
  if (v4[16] < 4u) {
    return a1;
  }
  WTF::String::String((WTF::String *)&v29, "creating ");
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a1, &v28);
  *(void *)buf = v29;
  v27[0] = v28;
  uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v27, &v30);
  if (v30)
  {
    uint64_t v8 = v28;
    uint64_t v28 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    BOOL v9 = v29;
    uint64_t v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v7);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    int v10 = *((void *)v5 + 4);
    long long v11 = (WTF *)os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      WTF::String::utf8();
      uint64_t v13 = v27[0] ? (char *)v27[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      long long v11 = v27[0];
      v27[0] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1) {
          long long v11 = (WTF *)WTF::fastFree(v11, v12);
        }
        else {
          --*(_DWORD *)v11;
        }
      }
    }
    if (*v5 && v5[16] >= 4u)
    {
      uint64_t v14 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v15 = *v14;
        if (v15) {
          break;
        }
        int v16 = *v14;
        atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v16, v15 | 1, memory_order_acquire, memory_order_acquire);
        if (v16 == v15)
        {
          uint64_t v17 = WTF::Logger::observers(v11);
          uint64_t v18 = *(unsigned int *)(v17 + 12);
          if (v18)
          {
            uint64_t v19 = *(uint64_t **)v17;
            uint64_t v20 = *(void *)v17 + 8 * v18;
            do
            {
              uint64_t v21 = *v19;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "creating ");
              int v32 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a1, v33);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v27, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v21 + 16))(v21, v5, 4, v27);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v22);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                int v24 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v24)
                {
                  if (*(_DWORD *)v24 == 2) {
                    WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v12);
                  }
                  else {
                    *(_DWORD *)v24 -= 2;
                  }
                }
              }
              ++v19;
            }
            while (v19 != (uint64_t *)v20);
          }
          int v25 = 1;
          atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
          if (v25 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v26 = v30;
    uint64_t v30 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    return a1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  long long v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 124);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(v1 + 112);
    uint64_t v6 = 40 * v4;
    do
    {
      uint64_t result = *v5;
      if (*v5) {
        uint64_t result = WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead();
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromise(unsigned int *a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromise(a1);

  return WTF::fastFree(v1, v2);
}

{
  unsigned char *v2;
  BOOL v3;
  unsigned char *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  atomic_uchar *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  void v35[3];

  v35[2] = *MEMORY[0x1E4F143B8];
  char v2 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2) {
    long long v3 = v2[16] >= 4u;
  }
  else {
    long long v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)a1, &v30);
    *(void *)buf = v31;
    v29[0] = v30;
    uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    int v7 = v30;
    uint64_t v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v8 = v31;
    long long v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    BOOL v9 = *((void *)v4 + 4);
    int v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      WTF::String::utf8();
      uint64_t v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      int v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1) {
          int v10 = (WTF *)WTF::fastFree(v10, v11);
        }
        else {
          --*(_DWORD *)v10;
        }
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      uint64_t v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        uint64_t v14 = *v13;
        if (v14) {
          break;
        }
        int v15 = *v13;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
        if (v15 == v14)
        {
          int v16 = WTF::Logger::observers(v10);
          uint64_t v17 = *(unsigned int *)(v16 + 12);
          if (v17)
          {
            uint64_t v18 = *(uint64_t **)v16;
            uint64_t v19 = *(void *)v16 + 8 * v17;
            do
            {
              uint64_t v20 = *v18;
              *(_DWORD *)buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "destroying ");
              long long v34 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)a1, v35);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v20 + 16))(v20, v4, 4, v29);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                int v23 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2) {
                    WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                  }
                  else {
                    *(_DWORD *)v23 -= 2;
                  }
                }
              }
              ++v18;
            }
            while (v18 != (uint64_t *)v19);
          }
          int v24 = 1;
          atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
          if (v24 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    int v25 = v32;
    int v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 28), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 22), v27);
  uint64_t v28 = a1[20];
  if (v28 != -1) {
    ((void (*)(uint8_t *, unsigned int *))off_1EE9EE380[v28])(buf, a1 + 14);
  }
  a1[20] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      uint64_t v4 = WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(v4)
         + 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 16);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9EE398[v3])(&v5, a2);
  }
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3, uint64_t a4)
{
  v39[2] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v33, this);
  WTF::String::String((WTF::String *)&v32, a3);
  uint64_t v29 = a4;
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, &v31);
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v33, (uint64_t *)&v32, (uint64_t *)&v31, &v34);
  BOOL v9 = v31;
  long long v31 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  int v10 = v32;
  int v32 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  long long v11 = v33;
  uint64_t v33 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v8);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = *(NSObject **)(a1 + 32);
  uint64_t v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    WTF::String::utf8();
    int v15 = v30[0] ? (char *)v30[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    int v36 = v15;
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    uint64_t v13 = v30[0];
    v30[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1) {
        uint64_t v13 = (WTF *)WTF::fastFree(v13, v14);
      }
      else {
        --*(_DWORD *)v13;
      }
    }
  }
  if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    int v16 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v17 = *v16;
      if (v17) {
        break;
      }
      int v18 = *v16;
      atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, v17 | 1, memory_order_acquire, memory_order_acquire);
      if (v18 == v17)
      {
        uint64_t v19 = WTF::Logger::observers(v13);
        uint64_t v20 = *(unsigned int *)(v19 + 12);
        if (v20)
        {
          uint64_t v21 = *(uint64_t **)v19;
          uint64_t v22 = *(void *)v19 + 8 * v20;
          do
          {
            uint64_t v23 = *v21;
            *(_DWORD *)buf = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v36 + 4), this);
            int v37 = 0;
            WTF::String::String((WTF::String *)v38, a3);
            v38[2] = 0;
            WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v29, v39);
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v30, (uint64_t)buf, 3uLL);
            (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v23 + 16))(v23, a1, 4, v30);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v24);
            for (uint64_t i = 40; i != -8; i -= 16)
            {
              uint64_t v26 = *(WTF::StringImpl **)&buf[i];
              *(void *)&buf[i] = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2) {
                  WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v14);
                }
                else {
                  *(_DWORD *)v26 -= 2;
                }
              }
            }
            ++v21;
          }
          while (v21 != (uint64_t *)v22);
        }
        int v27 = 1;
        atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
        if (v27 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  uint64_t result = v34;
  long long v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote25bufferedSamplesForTrackIdEyE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9EE3B8;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote25bufferedSamplesForTrackIdEyE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED0Ev(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9EE3B8;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote25bufferedSamplesForTrackIdEyE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEE4callEv(uint64_t a1)
{
  unint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(atomic_uchar **)(v3 + 312);
  if (!v4)
  {
    uint64_t v26 = 0;
LABEL_14:
    LOBYTE(v29) = 4;
    int v32 = 0;
    *(void *)&long long v33 = 0;
    *((void *)&v33 + 1) = "operator()";
    *(void *)&long long v34 = 0;
    WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((uint64_t *)&v24, &v29, (WTF::Logger::LogSiteIdentifier *)&v32);
    goto LABEL_15;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v4, *(void *)(v3 + 320), &v26);
  if (!v26) {
    goto LABEL_14;
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v3 + 368));
  if (v5) {
    goto LABEL_14;
  }
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v3 + 369));
  if (v6) {
    goto LABEL_14;
  }
  uint64_t v25 = *(void *)(a1 + 64);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v3 + 312), *(void *)(v3 + 320), &v27);
  int v7 = *(os_unfair_lock_s **)(v27 + 32);
  uint64_t v8 = *(void *)(v3 + 336);
  int v32 = 0;
  *(void *)&long long v33 = 0;
  *((void *)&v33 + 1) = "sendWithPromisedReply";
  *(void *)&long long v34 = 0;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v29, (WTF::Logger::LogSiteIdentifier *)&v32);
  BOOL v9 = (atomic_uchar *)v29;
  if (v29)
  {
    atomic_fetch_add((atomic_uint *volatile)(v29 + 8), 1u);
    uint64_t v10 = v29;
  }
  else
  {
    uint64_t v10 = 0;
  }
  int v24 = v9;
  uint64_t v29 = 0;
  long long v33 = v30;
  long long v34 = v31;
  uint64_t v11 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v11 = &unk_1EE9EE418;
  *(void *)(v11 + 8) = v10;
  int v32 = 0;
  long long v12 = v34;
  *(_OWORD *)(v11 + 16) = v33;
  *(_OWORD *)(v11 + 32) = v12;
  v28[0] = v11;
  v28[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v32);
  uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v13 = 1380;
  *((void *)v13 + 1) = v8;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  int v32 = v13;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v13, &v25);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v7, &v32, v28, 0, 0);
  int v15 = v32;
  int v32 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v14);
    WTF::fastFree(v22, v23);
  }
  uint64_t v16 = v28[0];
  v28[0] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v29);
  uint64_t v18 = v27;
  uint64_t v27 = 0;
  if (v18) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v18 + 24), v17);
  }
LABEL_15:
  uint64_t v19 = v26;
  uint64_t v26 = 0;
  if (v19) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v19 + 24), v17);
  }
  uint64_t v20 = (unsigned int *)v24;
  int v32 = 0;
  *(void *)&long long v33 = 0;
  *((void *)&v33 + 1) = "invokeAsync proxy";
  *(void *)&long long v34 = 0;
  uint64_t result = WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::chainTo(v24, v2, (WTF::Logger::LogSiteIdentifier *)&v32);
  int v24 = 0;
  if (v20)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v20 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v20 + 2);
      return (*(uint64_t (**)(unsigned int *))(*(void *)v20 + 16))(v20);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::chainTo(atomic_uchar *a1, unint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v4 = (uint64_t)a1;
  char v5 = 0;
  v71[1] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v6 = a1 + 48;
  atomic_compare_exchange_strong_explicit(a1 + 48, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    a1 = (atomic_uchar *)MEMORY[0x19972E8D0](a1 + 48);
  }
  *(unsigned char *)(v4 + 128) = 1;
  int v7 = *(atomic_uchar **)a2;
  if (*(void *)a2) {
    atomic_fetch_add((atomic_uint *volatile)v7 + 2, 1u);
  }
  uint64_t v8 = *(unsigned int *)(v4 + 80);
  uint64_t v47 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)v47) {
    BOOL v9 = *(unsigned __int8 *)(v47 + 16) >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9) {
    goto LABEL_70;
  }
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v57, a3);
  WTF::String::String((WTF::String *)&v56, " invoking chainTo() [");
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v4, &v55);
  WTF::String::String((WTF::String *)&v54, " chainedPromise:");
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)v7, &v53);
  WTF::String::String((WTF::String *)&v52, " isNothing:");
  WTF::LogArgument<BOOL>::toString<BOOL>(&v51);
  WTF::String::String((WTF::String *)&v50, "]");
  uint64_t result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v57, (uint64_t *)&v56, (uint64_t *)&v55, (uint64_t *)&v54, (uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, &v58);
  if (!v58)
  {
    __break(0xC471u);
    return result;
  }
  long long v12 = v50;
  int v50 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = v51;
  int v51 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = v52;
  uint64_t v52 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v11);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  int v15 = v53;
  unsigned __int8 v53 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2) {
      WTF::StringImpl::destroy(v15, v11);
    }
    else {
      *(_DWORD *)v15 -= 2;
    }
  }
  uint64_t v16 = v54;
  uint64_t v54 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v11);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  int v17 = v55;
  unint64_t v55 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v11);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  uint64_t v18 = v56;
  uint64_t v56 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v11);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
  }
  uint64_t v19 = v57;
  uint64_t v57 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v11);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  uint64_t v20 = *(NSObject **)(v47 + 32);
  uint64_t v21 = (WTF *)os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if (v21)
  {
    WTF::String::utf8();
    uint64_t v23 = v49[0] ? (char *)v49[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    uint64_t v60 = v23;
    _os_log_impl(&dword_1985F2000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    uint64_t v21 = v49[0];
    v49[0] = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1) {
        uint64_t v21 = (WTF *)WTF::fastFree(v21, v22);
      }
      else {
        --*(_DWORD *)v21;
      }
    }
  }
  if (*(unsigned char *)v47 && *(unsigned __int8 *)(v47 + 16) >= 4u)
  {
    int v24 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v25 = *v24;
      if (v25) {
        break;
      }
      int v26 = *v24;
      atomic_compare_exchange_strong_explicit(v24, (unsigned __int8 *)&v26, v25 | 1, memory_order_acquire, memory_order_acquire);
      if (v26 == v25)
      {
        uint64_t v27 = WTF::Logger::observers(v21);
        uint64_t v28 = *(unsigned int *)(v27 + 12);
        if (v28)
        {
          uint64_t v29 = *(uint64_t **)v27;
          uint64_t v46 = *(void *)v27 + 8 * v28;
          do
          {
            uint64_t v30 = v8;
            uint64_t v31 = *v29;
            *(_DWORD *)buf = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v60 + 4), a3);
            int v61 = 0;
            WTF::String::String((WTF::String *)v62, " invoking chainTo() [");
            v62[2] = 0;
            WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v4, &v63);
            int v64 = 0;
            WTF::String::String((WTF::String *)v65, " chainedPromise:");
            v65[2] = 0;
            WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)v7, &v66);
            int v67 = 0;
            WTF::String::String((WTF::String *)v68, " isNothing:");
            v68[2] = 0;
            WTF::LogArgument<BOOL>::toString<BOOL>(&v69);
            int v70 = 0;
            WTF::String::String((WTF::String *)v71, "]");
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v49, (uint64_t)buf, 8uLL);
            (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v31 + 16))(v31, v47, 4, v49);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v49, v32);
            for (uint64_t i = 120; i != -8; i -= 16)
            {
              long long v34 = *(WTF::StringImpl **)&buf[i];
              *(void *)&buf[i] = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2) {
                  WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v22);
                }
                else {
                  *(_DWORD *)v34 -= 2;
                }
              }
            }
            ++v29;
            uint64_t v8 = v30;
          }
          while (v29 != (uint64_t *)v46);
        }
        int v35 = 1;
        atomic_compare_exchange_strong_explicit(v24, (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
        if (v35 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  int v36 = v58;
  long long v58 = 0;
  if (!v36)
  {
LABEL_70:
    if (v7) {
      goto LABEL_71;
    }
    goto LABEL_73;
  }
  if (*(_DWORD *)v36 != 2)
  {
    *(_DWORD *)v36 -= 2;
    goto LABEL_70;
  }
  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v22);
  if (v7)
  {
LABEL_71:
    if (atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v7 + 2);
      (*(void (**)(atomic_uchar *))(*(void *)v7 + 16))(v7);
    }
  }
LABEL_73:
  unsigned __int8 v37 = atomic_load((unsigned __int8 *)(v4 + 129));
  uint64_t result = (uint64_t)WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::setDispatchMode(*(atomic_uchar **)a2, v37, a3);
  if (*(_DWORD *)(v4 + 80))
  {
    uint64_t result = (uint64_t)WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleChainedPromise(v4, a2);
  }
  else
  {
    uint64_t v38 = *(unsigned int *)(v4 + 124);
    if (v38 == *(_DWORD *)(v4 + 120))
    {
      uint64_t result = WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4 + 112, v38 + 1, a2);
      uint64_t v39 = *(void *)(v4 + 112) + 40 * *(unsigned int *)(v4 + 124);
      uint64_t v40 = *(void *)result;
      *(void *)uint64_t result = 0;
      *(void *)uint64_t v39 = v40;
      long long v41 = *(_OWORD *)(result + 24);
      *(_OWORD *)(v39 + 8) = *(_OWORD *)(result + 8);
      *(_OWORD *)(v39 + 24) = v41;
    }
    else
    {
      uint64_t v42 = *(void *)(v4 + 112) + 40 * v38;
      int v43 = *(atomic_uchar **)a2;
      *(void *)a2 = 0;
      *(void *)uint64_t v42 = v43;
      long long v44 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v42 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v42 + 8) = v44;
    }
    ++*(_DWORD *)(v4 + 124);
  }
  int v45 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v45, 0, memory_order_release, memory_order_relaxed);
  if (v45 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

WTF::Lock *WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>(uint64_t *a1, unsigned char *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  v50[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = WTF::fastMalloc((WTF *)0x88);
  uint64_t v7 = WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::NativePromise(v6, a3);
  char v8 = 0;
  *a1 = v7;
  BOOL v9 = (WTF::Lock *)(v7 + 48);
  uint64_t v39 = v9;
  char v40 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    BOOL v9 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  uint64_t v10 = (unsigned char *)WTF::NativePromiseBase::logChannel(v9);
  if (*v10) {
    BOOL v11 = v10[16] >= 4u;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    long long v12 = v10;
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v44, a3);
    WTF::String::String((WTF::String *)&v43, " rejecting ");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v6, &v42);
    WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v44, (uint64_t *)&v43, (uint64_t *)&v42, &v45);
    uint64_t v14 = v42;
    uint64_t v42 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    int v15 = v43;
    int v43 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v13);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t v16 = v44;
    long long v44 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v13);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    int v17 = *((void *)v12 + 4);
    uint64_t v18 = (WTF *)os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    if (v18)
    {
      WTF::String::utf8();
      uint64_t v20 = v41[0] ? (char *)v41[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      uint64_t v47 = v20;
      _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v18 = v41[0];
      v41[0] = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 1) {
          uint64_t v18 = (WTF *)WTF::fastFree(v18, v19);
        }
        else {
          --*(_DWORD *)v18;
        }
      }
    }
    if (*v12 && v12[16] >= 4u)
    {
      uint64_t v21 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v22 = *v21;
        if (v22) {
          break;
        }
        int v23 = *v21;
        atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v23, v22 | 1, memory_order_acquire, memory_order_acquire);
        if (v23 == v22)
        {
          uint64_t v38 = a2;
          uint64_t v24 = WTF::Logger::observers(v18);
          uint64_t v25 = *(unsigned int *)(v24 + 12);
          if (v25)
          {
            int v26 = *(uint64_t **)v24;
            uint64_t v27 = *(void *)v24 + 8 * v25;
            do
            {
              uint64_t v28 = *v26;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v47 + 4), a3);
              int v48 = 0;
              WTF::String::String((WTF::String *)v49, " rejecting ");
              v49[2] = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v6, v50);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v41, (uint64_t)buf, 3uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v28 + 16))(v28, v12, 4, v41);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v29);
              for (uint64_t i = 40; i != -8; i -= 16)
              {
                uint64_t v31 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v31)
                {
                  if (*(_DWORD *)v31 == 2) {
                    WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v19);
                  }
                  else {
                    *(_DWORD *)v31 -= 2;
                  }
                }
              }
              ++v26;
            }
            while (v26 != (uint64_t *)v27);
          }
          int v32 = 1;
          atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
          a2 = v38;
          if (v32 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    long long v33 = v45;
    int v45 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v19);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
  char v34 = *a2;
  uint64_t v35 = *(unsigned int *)(v6 + 80);
  if (v35 != -1) {
    ((void (*)(uint8_t *, uint64_t))off_1EE9EE380[v35])(buf, v6 + 56);
  }
  *(unsigned char *)(v6 + 56) = v34;
  int v36 = 1;
  *(_DWORD *)(v6 + 72) = 1;
  *(_DWORD *)(v6 + 80) = 1;
  uint64_t result = (WTF::Lock *)WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::dispatchAll(v6, (atomic_uchar *volatile *)&v39);
  if (v40)
  {
    uint64_t result = v39;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v39, (unsigned __int8 *)&v36, 0, memory_order_release, memory_order_relaxed);
    if (v36 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  int v17 = &v19;
  uint64_t v18 = 1;
  uint64_t v20 = (WTF::NativePromiseBase **)&v22;
  uint64_t v21 = 1;
  uint64_t v4 = *(void **)(a1 + 88);
  if (v4 == (void *)(a1 + 104))
  {
    uint64_t v5 = *(unsigned int *)(a1 + 100);
    memcpy(&v22, v4, 8 * v5);
  }
  else
  {
    *(void *)(a1 + 88) = a1 + 104;
    uint64_t v20 = (WTF::NativePromiseBase **)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 100);
    LODWORD(v21) = *(_DWORD *)(a1 + 96);
  }
  HIDWORD(v21) = v5;
  HIDWORD(v18) = 0;
  *(void *)(a1 + 96) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v4);
  uint64_t v6 = *(uint64_t **)(a1 + 112);
  int v17 = v6;
  uint64_t v7 = *(unsigned int *)(a1 + 124);
  LODWORD(v18) = *(_DWORD *)(a1 + 120);
  HIDWORD(v18) = v7;
  v16[0] = 0;
  *(void *)(a1 + 112) = 0;
  v16[1] = 0;
  *(void *)(a1 + 120) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v8);
  if (HIDWORD(v21))
  {
    uint64_t v10 = v20;
    uint64_t v11 = 8 * HIDWORD(v21);
    do
    {
      long long v12 = *v10++;
      WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::ThenCallbackBase::dispatch(v12, a1, a2);
      v11 -= 8;
    }
    while (v11);
  }
  if (v7)
  {
    uint64_t v13 = 40 * v7;
    do
    {
      WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleChainedPromise(a1, v6);
      v6 += 5;
      v13 -= 40;
    }
    while (v13);
  }
  WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v9);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v14);
}

uint64_t *WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleChainedPromise(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(atomic_uint **)a2;
  *(void *)a2 = 0;
  BOOL v9 = v2;
  long long v3 = *(_OWORD *)(a2 + 24);
  long long v10 = *(_OWORD *)(a2 + 8);
  long long v11 = v3;
  if (v2)
  {
    atomic_fetch_add(v2 + 2, 1u);
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = "<chained promise>";
    uint64_t v8 = 0;
    WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Storage>((uint64_t)v2, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v5);
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2 + 2);
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = "<chained promise>";
    uint64_t v8 = 0;
    WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Storage>(0, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v5);
  }
  return WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v9);
}

WTF::Lock *WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleAsChainedPromise<WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  uint64_t v14 = v7;
  char v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  uint64_t v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 80);
  uint64_t v11 = *(unsigned int *)(a2 + 24);
  if (v10 == -1)
  {
    if (v11 == -1) {
      goto LABEL_14;
    }
  }
  else if (v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1EE9EE380[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 80) = -1;
    goto LABEL_14;
  }
  uint64_t v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1EE9EE3D0[v11])(&v16);
LABEL_14:
  uint64_t result = (WTF::Lock *)WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::dispatchAll(a1, (atomic_uchar *volatile *)&v14);
  if (v15)
  {
    uint64_t result = v14;
    int v13 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 24);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9EE380[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_15;
  }
  if (v5 != 1)
  {
    ((void (*)(unsigned char *, uint64_t))off_1EE9EE380[v5])(v17, v4);
LABEL_15:
    *(_DWORD *)(v4 + 24) = -1;
    *(unsigned char *)uint64_t v4 = 0;
    *(_DWORD *)(v4 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>,(std::__variant_detail::_Trait)1>>(v4, a3);
    *(_DWORD *)(v4 + 24) = 1;
    return result;
  }
  v15[0] = 0;
  unsigned int v16 = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>,(std::__variant_detail::_Trait)1>>((uint64_t)v15, a3);
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  if (v16 != -1 || v8 != -1)
  {
    BOOL v10 = v16 == -1;
    if (v16 == -1) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = v16;
    }
    if (v8 != -1) {
      BOOL v10 = v11 == v8;
    }
    if (v10)
    {
      uint64_t result = ((uint64_t (*)(unsigned char *, unsigned char *, uint64_t))off_1EE9EE3E8[v11])(v17, v15, a2);
    }
    else
    {
      if (v16 == 1 || v16 == -1)
      {
        long long v12 = v15;
        if (v8 == 1) {
          int v13 = v15;
        }
        else {
          int v13 = (unsigned char *)a2;
        }
        if (v8 == 1) {
          long long v12 = (unsigned char *)a2;
        }
        if (v8 == -1) {
          uint64_t v14 = v15;
        }
        else {
          uint64_t v14 = v13;
        }
        if (v8 != -1) {
          a2 = (uint64_t)v12;
        }
      }
      else
      {
        uint64_t v14 = v15;
      }
      v17[0] = 0;
      int v18 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>,(std::__variant_detail::_Trait)1>>((uint64_t)v17, a2);
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>(a2, (uint64_t)v14);
      uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>((uint64_t)v14, (uint64_t)v17);
      if (v18 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9EE398[v18])(&v19, v17);
      }
    }
  }
  if (v16 != -1) {
    return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9EE398[v16])(v17, v15);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS8_6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISE_SG_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9EE380[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9EE398[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EE3F8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorINS7_6StringELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEN7WebCore18PlatformMediaErrorEEE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SE_EEESQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN3WTF6VectorINS7_6StringELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEEN7WebCore18PlatformMediaErrorEEE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSC_SE_EEESQ_EEEDcSH_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSD_SF_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJSD_SF_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::BufferedSamplesForTrackId,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EE418;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::BufferedSamplesForTrackId,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9EE418;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::BufferedSamplesForTrackId,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (WTF::NativePromiseBase *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9EE440;
  v4[1] = v3;
  char v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  void v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  uint64_t result = (uint64_t)v7;
  if (v7) {
    return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
  }
  return result;
}

unsigned __int8 *WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(WTF::NativePromiseBase *a1, uint64_t *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  v75[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v5 = (uint64_t *)a1;
    char v6 = 0;
    char v7 = (atomic_uchar *)(v3 + 48);
    int v8 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 48), (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (v6) {
      a1 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0](v3 + 48);
    }
    int v9 = *(_DWORD *)(v3 + 80);
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 != 1) {
      a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
    }
    uint64_t v10 = *v5;
    if (!v9)
    {
      char v11 = 0;
      long long v12 = (WTF::NativePromiseBase *)(v10 + 48);
      uint64_t v63 = (WTF::StringImpl *)(v10 + 48);
      char v64 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
      if (v11) {
        long long v12 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
      }
      int v13 = (unsigned char *)WTF::NativePromiseBase::logChannel(v12);
      if (*v13)
      {
        uint64_t v14 = v13;
        if (v13[16] >= 4u)
        {
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v68, a3);
          WTF::String::String((WTF::String *)&v67, " settling ");
          WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v10, &v66);
          WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v68, (uint64_t *)&v67, (uint64_t *)&v66, &v69);
          unsigned int v16 = v66;
          uint64_t v66 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, v15);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
          char v40 = v67;
          int v67 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2) {
              WTF::StringImpl::destroy(v40, v15);
            }
            else {
              *(_DWORD *)v40 -= 2;
            }
          }
          long long v41 = v68;
          uint64_t v68 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2) {
              WTF::StringImpl::destroy(v41, v15);
            }
            else {
              *(_DWORD *)v41 -= 2;
            }
          }
          uint64_t v42 = *((void *)v14 + 4);
          int v43 = (WTF *)os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
          if (v43)
          {
            WTF::String::utf8();
            int v45 = v65[0] ? (char *)v65[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            uint64_t v71 = v45;
            _os_log_impl(&dword_1985F2000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            int v43 = v65[0];
            v65[0] = 0;
            if (v43)
            {
              if (*(_DWORD *)v43 == 1) {
                int v43 = (WTF *)WTF::fastFree(v43, v44);
              }
              else {
                --*(_DWORD *)v43;
              }
            }
          }
          if (*v14 && v14[16] >= 4u)
          {
            uint64_t v46 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v47 = *v46;
              if (v47) {
                break;
              }
              int v48 = *v46;
              atomic_compare_exchange_strong_explicit(v46, (unsigned __int8 *)&v48, v47 | 1, memory_order_acquire, memory_order_acquire);
              if (v48 == v47)
              {
                uint64_t v49 = WTF::Logger::observers(v43);
                uint64_t v50 = *(unsigned int *)(v49 + 12);
                if (v50)
                {
                  int v51 = *(uint64_t **)v49;
                  uint64_t v52 = *(void *)v49 + 8 * v50;
                  do
                  {
                    uint64_t v53 = *v51;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v71 + 4), a3);
                    int v72 = 0;
                    WTF::String::String((WTF::String *)&v73, " settling ");
                    int v74 = 0;
                    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v10, v75);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v65, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v53 + 16))(v53, v14, 4, v65);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v65, v54);
                    for (uint64_t i = 40; i != -8; i -= 16)
                    {
                      uint64_t v56 = *(WTF::StringImpl **)&buf[i];
                      *(void *)&buf[i] = 0;
                      if (v56)
                      {
                        if (*(_DWORD *)v56 == 2) {
                          WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v44);
                        }
                        else {
                          *(_DWORD *)v56 -= 2;
                        }
                      }
                    }
                    ++v51;
                  }
                  while (v51 != (uint64_t *)v52);
                }
                int v57 = 1;
                atomic_compare_exchange_strong_explicit(v46, (unsigned __int8 *)&v57, 0, memory_order_release, memory_order_relaxed);
                if (v57 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          long long v58 = v69;
          uint64_t v69 = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2) {
              WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v44);
            }
            else {
              *(_DWORD *)v58 -= 2;
            }
          }
        }
      }
      uint64_t v59 = *(unsigned int *)(v10 + 80);
      if (v59 != -1) {
        ((void (*)(uint8_t *, uint64_t))off_1EE9EE380[v59])(buf, v10 + 56);
      }
      uint64_t v60 = *a2;
      *a2 = 0;
      *(void *)(v10 + 56) = v60;
      *(_DWORD *)(v10 + 80) = 2;
      uint64_t result = (unsigned __int8 *)WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::dispatchAll(v10, (atomic_uchar *volatile *)&v63);
      if (v64)
      {
        uint64_t result = (unsigned __int8 *)v63;
        int v61 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v63, (unsigned __int8 *)&v61, 0, memory_order_release, memory_order_relaxed);
        if (v61 != 1) {
          return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
        }
      }
      return result;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
  if (*result) {
    BOOL v18 = result[16] >= 4u;
  }
  else {
    BOOL v18 = 0;
  }
  if (v18)
  {
    char v19 = result;
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v69, a3);
    WTF::String::String((WTF::String *)&v68, " ignored already resolved or rejected ");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v10, &v67);
    WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, &v63);
    uint64_t v21 = v67;
    int v67 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v20);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    uint64_t v22 = v68;
    uint64_t v68 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v20);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    int v23 = v69;
    uint64_t v69 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v20);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    uint64_t v24 = *((void *)v19 + 4);
    uint64_t v25 = (WTF *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    if (v25)
    {
      WTF::String::utf8();
      uint64_t v27 = v65[0] ? (char *)v65[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      uint64_t v71 = v27;
      _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v25 = v65[0];
      v65[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1) {
          uint64_t v25 = (WTF *)WTF::fastFree(v25, v26);
        }
        else {
          --*(_DWORD *)v25;
        }
      }
    }
    if (*v19 && v19[16] >= 4u)
    {
      uint64_t v28 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v29 = *v28;
        if (v29) {
          break;
        }
        int v30 = *v28;
        atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, v29 | 1, memory_order_acquire, memory_order_acquire);
        if (v30 == v29)
        {
          uint64_t v31 = WTF::Logger::observers(v25);
          uint64_t v32 = *(unsigned int *)(v31 + 12);
          if (v32)
          {
            long long v33 = *(uint64_t **)v31;
            uint64_t v34 = *(void *)v31 + 8 * v32;
            do
            {
              uint64_t v35 = *v33;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v71 + 4), a3);
              int v72 = 0;
              WTF::String::String((WTF::String *)&v73, " ignored already resolved or rejected ");
              int v74 = 0;
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v10, v75);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v65, (uint64_t)buf, 3uLL);
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(void *)v35 + 16))(v35, v19, 4, v65);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v65, v36);
              for (uint64_t j = 40; j != -8; j -= 16)
              {
                uint64_t v38 = *(WTF::StringImpl **)&buf[j];
                *(void *)&buf[j] = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2) {
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v26);
                  }
                  else {
                    *(_DWORD *)v38 -= 2;
                  }
                }
              }
              ++v33;
            }
            while (v33 != (uint64_t *)v34);
          }
          int v39 = 1;
          atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
          if (v39 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = (unsigned __int8 *)v63;
    uint64_t v63 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v26);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::BufferedSamplesForTrackId,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EE440;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::BufferedSamplesForTrackId,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9EE440;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::BufferedSamplesForTrackId,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::call@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(IPC::Decoder **)(result + 8);
  if (v3
    && *(void *)v3
    && (uint64_t result = IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>>((uint64_t)v4, v3), v6))
  {
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v4);
    if (v6)
    {
      if (v5 != -1) {
        return ((uint64_t (*)(char *, unsigned char *))off_1EE9EE398[v5])(&v7, v4);
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 4;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  int v5 = *(char **)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - (void)v5;
  if (v6 <= v7)
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v22 = *((void *)a2 + 3);
    if (v22)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
        uint64_t v21 = *(char **)a2;
        unint64_t v20 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
      }
    }
    goto LABEL_23;
  }
  int v8 = &v5[v7];
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v20 = v6;
    uint64_t v21 = 0;
LABEL_23:
    unint64_t v6 = 0;
    int v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v23 = *((void *)a2 + 3);
    if (v23)
    {
      if (v20)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v23 + 16))(v23, v21, v20);
        int v5 = *(char **)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        int v5 = 0;
      }
    }
    goto LABEL_24;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_24:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v24 = *((void *)a2 + 3);
    if (v24 && v6) {
      (*(void (**)(uint64_t, char *))(*(void *)v24 + 16))(v24, v5);
    }
    goto LABEL_8;
  }
  if (v9)
  {
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v5, (uint64_t)&v28);
    if (v30)
    {
      v25[0] = v28;
      uint64_t v11 = v29;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      v25[1] = v11;
      int v26 = 0;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v10);
LABEL_16:
      unsigned __int8 v27 = 1;
      *(unsigned char *)a1 = 0;
      *(_DWORD *)(a1 + 16) = -1;
      uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)v25);
      int v19 = v27;
      *(unsigned char *)(a1 + 24) = 1;
      if (!v19) {
        return result;
      }
      if (v26 == -1) {
        return result;
      }
      uint64_t result = ((uint64_t (*)(uint64_t *, void *))off_1EE9EE398[v26])(&v28, v25);
      if (*(unsigned char *)(a1 + 24)) {
        return result;
      }
      goto LABEL_10;
    }
  }
  else
  {
    unsigned __int16 v12 = IPC::Decoder::decode<WebCore::PlatformMediaError>((uint64_t *)a2);
    if (v12 >= 0x100u)
    {
      LOBYTE(v25[0]) = v12;
      int v26 = 1;
      goto LABEL_16;
    }
  }
LABEL_8:
  int v13 = *(char **)a2;
  uint64_t v14 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v15 = *((void *)a2 + 3);
  if (v15 && v14) {
    (*(void (**)(uint64_t, char *))(*(void *)v15 + 16))(v15, v13);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
LABEL_10:
  uint64_t v16 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result && v16)
  {
    BOOL v18 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v18();
  }
  return result;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
  }
  else
  {
    unint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t *WTF::Vector<WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unint64_t v3 = (WTF *)*result;
      unsigned int v4 = *((_DWORD *)result + 3);
      int v5 = 40 * a2;
      uint64_t result = (uint64_t *)WTF::fastMalloc((WTF *)(40 * a2));
      *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x28;
      uint64_t *v2 = (uint64_t)result;
      if (v4)
      {
        unint64_t v7 = result;
        uint64_t result = (uint64_t *)v3;
        do
        {
          uint64_t v8 = *result;
          *uint64_t result = 0;
          *unint64_t v7 = v8;
          long long v9 = *(_OWORD *)(result + 1);
          *(_OWORD *)(v7 + 3) = *(_OWORD *)(result + 3);
          *(_OWORD *)(v7 + 1) = v9;
          uint64_t result = WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(result)
                 + 5;
          v7 += 5;
        }
        while (result != (uint64_t *)((char *)v3 + 40 * v4));
      }
      if (v3)
      {
        if ((WTF *)*v2 == v3)
        {
          uint64_t *v2 = 0;
          *((_DWORD *)v2 + 2) = 0;
        }
        return (uint64_t *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t *WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::assertIsDead(v2);
    unint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote25enqueuedSamplesForTrackIDEyE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9EE468;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote25enqueuedSamplesForTrackIDEyE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEED0Ev(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9EE468;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_L11invokeAsyncIZN6WebKit25SourceBufferPrivateRemote25enqueuedSamplesForTrackIDEyE3__0EEDaRNS_24SerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlvE_vJEE4callEv(uint64_t a1)
{
  unint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 56);
  unsigned int v4 = *(atomic_uchar **)(v3 + 312);
  if (!v4)
  {
    uint64_t v26 = 0;
LABEL_14:
    LOBYTE(v29) = 4;
    uint64_t v32 = 0;
    *(void *)&long long v33 = 0;
    *((void *)&v33 + 1) = "operator()";
    *(void *)&long long v34 = 0;
    WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::createAndReject<WebCore::PlatformMediaError,std::enable_if<true,void>>((uint64_t *)&v24, &v29, (WTF::Logger::LogSiteIdentifier *)&v32);
    goto LABEL_15;
  }
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v4, *(void *)(v3 + 320), &v26);
  if (!v26) {
    goto LABEL_14;
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v3 + 368));
  if (v5) {
    goto LABEL_14;
  }
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v3 + 369));
  if (v6) {
    goto LABEL_14;
  }
  uint64_t v25 = *(void *)(a1 + 64);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v3 + 312), *(void *)(v3 + 320), &v27);
  unint64_t v7 = *(os_unfair_lock_s **)(v27 + 32);
  uint64_t v8 = *(void *)(v3 + 336);
  uint64_t v32 = 0;
  *(void *)&long long v33 = 0;
  *((void *)&v33 + 1) = "sendWithPromisedReply";
  *(void *)&long long v34 = 0;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v29, (WTF::Logger::LogSiteIdentifier *)&v32);
  long long v9 = (atomic_uchar *)v29;
  if (v29)
  {
    atomic_fetch_add((atomic_uint *volatile)(v29 + 8), 1u);
    uint64_t v10 = v29;
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v24 = v9;
  uint64_t v29 = 0;
  long long v33 = v30;
  long long v34 = v31;
  uint64_t v11 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v11 = &unk_1EE9EE490;
  *(void *)(v11 + 8) = v10;
  uint64_t v32 = 0;
  long long v12 = v34;
  *(_OWORD *)(v11 + 16) = v33;
  *(_OWORD *)(v11 + 32) = v12;
  v28[0] = v11;
  v28[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer((uint64_t *)&v32);
  int v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v13 = 1383;
  *((void *)v13 + 1) = v8;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  uint64_t v32 = v13;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v13, &v25);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v7, &v32, v28, 0, 0);
  uint64_t v15 = v32;
  uint64_t v32 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v14);
    WTF::fastFree(v22, v23);
  }
  uint64_t v16 = v28[0];
  v28[0] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(&v29);
  uint64_t v18 = v27;
  uint64_t v27 = 0;
  if (v18) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v18 + 24), v17);
  }
LABEL_15:
  uint64_t v19 = v26;
  uint64_t v26 = 0;
  if (v19) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v19 + 24), v17);
  }
  unint64_t v20 = (unsigned int *)v24;
  uint64_t v32 = 0;
  *(void *)&long long v33 = 0;
  *((void *)&v33 + 1) = "invokeAsync proxy";
  *(void *)&long long v34 = 0;
  uint64_t result = WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::chainTo(v24, v2, (WTF::Logger::LogSiteIdentifier *)&v32);
  uint64_t v24 = 0;
  if (v20)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v20 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v20 + 2);
      return (*(uint64_t (**)(unsigned int *))(*(void *)v20 + 16))(v20);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::EnqueuedSamplesForTrackID,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EE490;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::EnqueuedSamplesForTrackID,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9EE490;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::EnqueuedSamplesForTrackID,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = (WTF::NativePromiseBase *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  unsigned int v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9EE4B8;
  v4[1] = v3;
  unint64_t v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  void v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  uint64_t result = (uint64_t)v7;
  if (v7) {
    return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::EnqueuedSamplesForTrackID,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EE4B8;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::EnqueuedSamplesForTrackID,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9EE4B8;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<WebCore::MediaPromiseConverter,Messages::RemoteSourceBufferProxy::EnqueuedSamplesForTrackID,WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>>(WTF::NativePromise<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::call@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(IPC::Decoder **)(result + 8);
  if (v3
    && *(void *)v3
    && (uint64_t result = IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>>((uint64_t)v4, v3), v6))
  {
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v4);
    if (v6)
    {
      if (v5 != -1) {
        return ((uint64_t (*)(char *, unsigned char *))off_1EE9EE398[v5])(&v7, v4);
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 4;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

void WebCore::VideoTrackPrivate::~VideoTrackPrivate(WebCore::VideoTrackPrivate *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9EE4F8;
  uint64_t v3 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  WebCore::TrackPrivateBase::~TrackPrivateBase(this, a2);
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE9EE4F8;
  uint64_t v3 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WebCore::TrackPrivateBase::~TrackPrivateBase(this, a2);

  WTF::fastFree(v5, v6);
}

uint64_t WebCore::VideoTrackPrivate::kind(WebCore::VideoTrackPrivate *this)
{
  return 6;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore17VideoTrackPrivate11setSelectedEbEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEE4callES8_(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) == 2)
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 56);
    return v5(a2, v4);
  }
  else
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN7WebCore17VideoTrackPrivate16setConfigurationEONS2_31PlatformVideoTrackConfigurationEEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEED1Ev(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9EE5C8;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore17VideoTrackPrivate16setConfigurationEONS2_31PlatformVideoTrackConfigurationEEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9EE5C8;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore17VideoTrackPrivate16setConfigurationEONS2_31PlatformVideoTrackConfigurationEEUlRT_E_vJRNS2_22TrackPrivateBaseClientEEE4callESA_(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) == 2)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 64);
    return v4(a2, a1 + 8);
  }
  else
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::WebMediaStrategy::createNowPlayingManager(void)const::NowPlayingInfoForGPUManager::~NowPlayingInfoForGPUManager(WebCore::NowPlayingManager *a1)
{
  WebCore::NowPlayingManager::~NowPlayingManager(a1);

  return WTF::fastFree(v1, v2);
}

IPC::Encoder *WebKit::WebMediaStrategy::createNowPlayingManager(void)const::NowPlayingInfoForGPUManager::clearNowPlayingInfoPrivate()
{
  {
    char v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  uint64_t result = (IPC::Encoder *)WebKit::WebProcess::singleton(void)::process;
  uint64_t v1 = *(void *)(WebKit::WebProcess::singleton(void)::process + 336);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 32);
    uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v3 = 37;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 66) = (char *)v3 + 16;
    *((void *)v3 + 67) = 512;
    *((void *)v3 + 68) = 0;
    *((void *)v3 + 70) = 0;
    *((void *)v3 + 69) = 0;
    IPC::Encoder::encodeHeader(v3);
    uint64_t v8 = v3;
    IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v8, 0, 0);
    uint64_t result = v8;
    uint64_t v8 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v4);
      return (IPC::Encoder *)WTF::fastFree(v5, v6);
    }
  }
  return result;
}

atomic_uchar *volatile **WebKit::WebMediaStrategy::createNowPlayingManager(void)const::NowPlayingInfoForGPUManager::setNowPlayingInfoPrivate(uint64_t a1, uint64_t a2)
{
  {
    uint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  uint64_t v3 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, *(atomic_uchar *volatile **)(v3 + 32));
  uint64_t v4 = v12;
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 55;
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  int v13 = v5;
  IPC::ArgumentCoder<WebCore::NowPlayingInfo,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl((uint64_t)v4, (uint64_t *)&v13, 0, 0);
  char v7 = v13;
  int v13 = 0;
  if (v7)
  {
    IPC::Encoder::~Encoder(v7, v6);
    WTF::fastFree(v9, v10);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteRemoteCommandListener,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v11 = *((void *)v2 + 2);
    char v7 = (WebKit::RemoteRemoteCommandListener *)*((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v11 != 0;
  }
  else
  {
    char v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7)
  {
    WebKit::RemoteRemoteCommandListener::~RemoteRemoteCommandListener(v7, a2);
    this = (atomic_uchar *)WTF::fastFree(v9, v10);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

WTF **WTF::ThreadSafeRefCounted<WebKit::RemoteVideoDecoderCallbacks,(WTF::DestructionThread)0>::deref(WTF **this, void *a2)
{
  if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
  {
    uint64_t v2 = (WTF *)this;
    atomic_store(1u, (unsigned int *)this);
    char v3 = this[5];
    if (v3)
    {
      do
      {
        uint64_t v4 = *(WTF **)v3;
        WTF::fastFree(v3, a2);
        char v3 = v4;
      }
      while (v4);
    }
    int v5 = (WTF *)*((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    if (v5) {
      WTF::fastFree(v5, a2);
    }
    uint64_t v6 = *((void *)v2 + 1);
    *((void *)v2 + 1) = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    return (WTF **)WTF::fastFree(v2, a2);
  }
  return this;
}

WTF *WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(WTF *this, void *a2)
{
  if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
  {
    uint64_t v2 = this;
    atomic_store(1u, (unsigned int *)this);
    uint64_t v3 = *((void *)this + 2);
    *((void *)v2 + 2) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *((void *)v2 + 1);
    *((void *)v2 + 1) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoCodecFactory::createDecoder(WTF::String const&,WebCore::VideoDecoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoDecoder>,WTF::String> &&)> &&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WebCore::VideoDecoder::DecodedFrame,WTF::String> &&)> &&)::$_0,void,WebKit::LibWebRTCCodecs::Decoder *>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9EE628;
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  int v5 = *(WTF **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoCodecFactory::createDecoder(WTF::String const&,WebCore::VideoDecoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoDecoder>,WTF::String> &&)> &&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WebCore::VideoDecoder::DecodedFrame,WTF::String> &&)> &&)::$_0,void,WebKit::LibWebRTCCodecs::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EE628;
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  int v5 = (WTF *)*((void *)this + 3);
  if (v5)
  {
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v5, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF **WTF::Detail::CallableWrapper<WebKit::RemoteVideoCodecFactory::createDecoder(WTF::String const&,WebCore::VideoDecoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoDecoder>,WTF::String> &&)> &&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WebCore::VideoDecoder::DecodedFrame,WTF::String> &&)> &&)::$_0,void,WebKit::LibWebRTCCodecs::Decoder *>::call(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(_DWORD *)(a1 + 36))
    {
      {
        uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v18);
      }
      uint64_t v4 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
      WebKit::LibWebRTCCodecs::setDecoderFormatDescription((uint64_t)v4, a2, *(void *)(a1 + 24), *(unsigned int *)(a1 + 36), *(_WORD *)(a1 + 8), *(_WORD *)(a1 + 16));
    }
    uint64_t v5 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)uint64_t v5 = 1;
    uint64_t v6 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    *(void *)(v5 + 8) = v6;
    *(unsigned char *)(v5 + 16) = 0;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_DWORD *)(v5 + 56) = 1065353216;
    atomic_fetch_add((atomic_uint *volatile)v5, 1u);
    char v7 = (WebCore::VideoDecoder *)WTF::fastMalloc((WTF *)0x20);
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = WebCore::VideoDecoder::VideoDecoder(v7);
    *(void *)uint64_t v10 = &unk_1EE9EDB08;
    *(void *)(v10 + 8) = a2;
    *(void *)(v10 + 16) = v5;
    *(_WORD *)(v10 + 24) = v8;
    *(_WORD *)(v10 + 26) = v9;
    {
      int v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v17);
    }
    uint64_t v11 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    uint64_t v12 = *((void *)v7 + 1);
    int v13 = (atomic_uint *)*((void *)v7 + 2);
    atomic_fetch_add(v13, 1u);
    uint64_t v14 = (WebCore::VideoDecoder *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v14 = &unk_1EE9EE698;
    *((void *)v14 + 1) = v13;
    uint64_t v19 = v14;
    WebKit::LibWebRTCCodecs::registerDecodedVideoFrameCallback((uint64_t)v11, v12, (uint64_t *)&v19);
    if (v19) {
      (*(void (**)(WebCore::VideoDecoder *))(*(void *)v19 + 8))(v19);
    }
    uint64_t v19 = v7;
    int v20 = 0;
    (*(void (**)(void, WebCore::VideoDecoder **))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v19);
    if (v20 != -1) {
      ((void (*)(char *, WebCore::VideoDecoder **))off_1EE9EE640[v20])(&v21, &v19);
    }
    return WTF::ThreadSafeRefCounted<WebKit::RemoteVideoDecoderCallbacks,(WTF::DestructionThread)0>::deref((WTF **)v5, v15);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v20 = 1;
    uint64_t result = (WTF **)(*(uint64_t (**)(void, WebCore::VideoDecoder **))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v19);
    if (v20 != -1) {
      return (WTF **)((uint64_t (*)(char *, WebCore::VideoDecoder **))off_1EE9EE640[v20])(&v21, &v19);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12VideoDecoderEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12VideoDecoderEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteVideoCodecFactory::createEncoder(WTF::String const&,WebCore::VideoEncoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoEncoder>,WTF::String> &&)> &&,WTF::Function<void ()(WebCore::VideoEncoderActiveConfiguration &&)> &&,WTF::Function<void ()(WebCore::VideoEncoder::EncodedFrame &&)> &&)::$_0,void,WebKit::LibWebRTCCodecs::Encoder *>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EE660;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoCodecFactory::createEncoder(WTF::String const&,WebCore::VideoEncoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoEncoder>,WTF::String> &&)> &&,WTF::Function<void ()(WebCore::VideoEncoderActiveConfiguration &&)> &&,WTF::Function<void ()(WebCore::VideoEncoder::EncodedFrame &&)> &&)::$_0,void,WebKit::LibWebRTCCodecs::Encoder *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EE660;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::RemoteVideoCodecFactory::createEncoder(WTF::String const&,WebCore::VideoEncoder::Config const&,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::UniqueRef<WebCore::VideoEncoder>,WTF::String> &&)> &&,WTF::Function<void ()(WebCore::VideoEncoderActiveConfiguration &&)> &&,WTF::Function<void ()(WebCore::VideoEncoder::EncodedFrame &&)> &&)::$_0,void,WebKit::LibWebRTCCodecs::Encoder *>::call(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)uint64_t v4 = 1;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    *(void *)(v4 + 8) = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    *(void *)(v4 + 16) = v6;
    *(unsigned char *)(v4 + 24) = 0;
    atomic_fetch_add((atomic_uint *volatile)v4, 1u);
    char v7 = (void *)WTF::fastMalloc((WTF *)0x18);
    *char v7 = &unk_1EE9EDB48;
    v7[1] = a2;
    v7[2] = v4;
    {
      uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v18);
    }
    uint64_t v8 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    uint64_t v9 = v7[1];
    uint64_t v10 = (atomic_uint *)v7[2];
    atomic_fetch_add(v10, 1u);
    uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v11 = &unk_1EE9EE6C0;
    v11[1] = v10;
    int v20 = v11;
    WebKit::LibWebRTCCodecs::registerEncodedVideoFrameCallback((uint64_t)v8, v9, (uint64_t *)&v20);
    if (v20) {
      (*(void (**)(void *))(*v20 + 8))(v20);
    }
    {
      uint64_t v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v19);
    }
    uint64_t v12 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    uint64_t v13 = v7[1];
    uint64_t v14 = (atomic_uint *)v7[2];
    atomic_fetch_add(v14, 1u);
    uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v15 = &unk_1EE9EE6E8;
    v15[1] = v14;
    int v20 = v15;
    WebKit::LibWebRTCCodecs::registerEncoderDescriptionCallback((uint64_t)v12, v13, (uint64_t *)&v20);
    if (v20) {
      (*(void (**)(void *))(*v20 + 8))(v20);
    }
    int v20 = v7;
    int v21 = 0;
    (*(void (**)(void, void **))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &v20);
    if (v21 != -1) {
      ((void (*)(char *, void **))off_1EE9EE678[v21])(&v22, &v20);
    }
    return WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref((WTF *)v4, v16);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v21 = 1;
    uint64_t result = (WTF *)(*(uint64_t (**)(void, void **))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &v20);
    if (v21 != -1) {
      return (WTF *)((uint64_t (*)(char *, void **))off_1EE9EE678[v21])(&v22, &v20);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12VideoEncoderEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12VideoEncoderEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteVideoDecoder::RemoteVideoDecoder(WebKit::LibWebRTCCodecs::Decoder &,WTF::Ref<WebKit::RemoteVideoDecoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoDecoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoDecoderCallbacks>> &&,unsigned short,unsigned short)::$_0,void,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,long long>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (WTF **)a1[1];
  *a1 = &unk_1EE9EE698;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoDecoderCallbacks,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoDecoder::RemoteVideoDecoder(WebKit::LibWebRTCCodecs::Decoder &,WTF::Ref<WebKit::RemoteVideoDecoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoDecoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoDecoderCallbacks>> &&,unsigned short,unsigned short)::$_0,void,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,long long>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (WTF **)*((void *)this + 1);
  *(void *)this = &unk_1EE9EE698;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoDecoderCallbacks,(WTF::DestructionThread)0>::deref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoDecoder::RemoteVideoDecoder(WebKit::LibWebRTCCodecs::Decoder &,WTF::Ref<WebKit::RemoteVideoDecoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoDecoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoDecoderCallbacks>> &&,unsigned short,unsigned short)::$_0,void,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore>,WTF::DefaultRefDerefTraits<WebCore>> &&,long long>::call(uint64_t result, uint64_t *a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(result + 8);
  if (*(unsigned char *)(v3 + 16)) {
    return result;
  }
  uint64_t v5 = *a2;
  if (!*a2)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    int v25 = 1;
    goto LABEL_23;
  }
  int8x8_t v7 = *(int8x8_t *)(v3 + 32);
  if (!*(void *)&v7) {
    goto LABEL_21;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = a3;
    if (*(void *)&v7 <= a3) {
      unint64_t v9 = a3 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v7 - 1) & a3;
  }
  uint64_t v10 = *(void *)(v3 + 24);
  uint64_t v11 = *(WTF ***)(v10 + 8 * v9);
  if (!v11 || (uint64_t v12 = *v11) == 0)
  {
LABEL_21:
    uint64_t v15 = 0;
    goto LABEL_22;
  }
  uint64_t v13 = *(void *)&v7 - 1;
  while (1)
  {
    unint64_t v14 = *((void *)v12 + 1);
    if (v14 == a3) {
      break;
    }
    if (v8.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v7) {
        v14 %= *(void *)&v7;
      }
    }
    else
    {
      v14 &= v13;
    }
    if (v14 != v9) {
      goto LABEL_21;
    }
LABEL_20:
    uint64_t v12 = *(WTF **)v12;
    if (!v12) {
      goto LABEL_21;
    }
  }
  if (*((void *)v12 + 2) != a3) {
    goto LABEL_20;
  }
  uint64_t v15 = *((void *)v12 + 3);
  uint64_t v16 = *(WTF **)v12;
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v17 = a3;
    if (*(void *)&v7 <= a3) {
      unint64_t v17 = a3 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v17 = v13 & a3;
  }
  uint64_t v18 = *(WTF **)(v10 + 8 * v17);
  do
  {
    uint64_t v19 = (WTF **)v18;
    uint64_t v18 = *(WTF **)v18;
  }
  while (v18 != v12);
  if (v19 == (WTF **)(v3 + 40)) {
    goto LABEL_43;
  }
  unint64_t v20 = (unint64_t)v19[1];
  if (v8.u32[0] > 1uLL)
  {
    if (v20 >= *(void *)&v7) {
      v20 %= *(void *)&v7;
    }
  }
  else
  {
    v20 &= v13;
  }
  if (v20 == v17)
  {
LABEL_45:
    if (v16)
    {
      unint64_t v21 = *((void *)v16 + 1);
      goto LABEL_47;
    }
  }
  else
  {
LABEL_43:
    if (!v16) {
      goto LABEL_44;
    }
    unint64_t v21 = *((void *)v16 + 1);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v22 = *((void *)v16 + 1);
      if (v21 >= *(void *)&v7) {
        unint64_t v22 = v21 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v22 = v21 & v13;
    }
    if (v22 != v17)
    {
LABEL_44:
      *(void *)(v10 + 8 * v17) = 0;
      uint64_t v16 = *(WTF **)v12;
      goto LABEL_45;
    }
LABEL_47:
    if (v8.u32[0] > 1uLL)
    {
      if (v21 >= *(void *)&v7) {
        v21 %= *(void *)&v7;
      }
    }
    else
    {
      v21 &= v13;
    }
    if (v21 != v17)
    {
      *(void *)(*(void *)(v3 + 24) + 8 * v21) = v19;
      uint64_t v16 = *(WTF **)v12;
    }
  }
  WebKit::WebProcess *v19 = v16;
  *(void *)uint64_t v12 = 0;
  --*(void *)(v3 + 48);
  WTF::fastFree(v12, a2);
  uint64_t v5 = *a2;
LABEL_22:
  *a2 = 0;
  v23[0] = v5;
  v23[1] = a3;
  v23[2] = v15;
  char v24 = 1;
  int v25 = 0;
LABEL_23:
  uint64_t result = (*(uint64_t (**)(void, void *))(**(void **)(v3 + 8) + 16))(*(void *)(v3 + 8), v23);
  if (v25 != -1) {
    return ((uint64_t (*)(char *, void *))off_1EE9EE080[v25])(&v26, v23);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::RemoteVideoEncoder(WebKit::LibWebRTCCodecs::Encoder &,WTF::Ref<WebKit::RemoteVideoEncoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoEncoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoEncoderCallbacks>> &&)::$_0,void,std::span<unsigned char const,18446744073709551615ul>,BOOL,long long,WebKit::RemoteVideoEncoder::RemoteVideoEncoder(WebKit::LibWebRTCCodecs::Encoder &,WTF::Ref<WebKit::RemoteVideoEncoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoEncoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoEncoderCallbacks>> &&)::$_0::optional<unsigned long long>,std::span<unsigned char const,18446744073709551615ul><unsigned int>>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (WTF *)a1[1];
  *a1 = &unk_1EE9EE6C0;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::RemoteVideoEncoder(WebKit::LibWebRTCCodecs::Encoder &,WTF::Ref<WebKit::RemoteVideoEncoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoEncoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoEncoderCallbacks>> &&)::$_0,void,std::span<unsigned char const,18446744073709551615ul>,BOOL,long long,WebKit::RemoteVideoEncoder::RemoteVideoEncoder(WebKit::LibWebRTCCodecs::Encoder &,WTF::Ref<WebKit::RemoteVideoEncoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoEncoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoEncoderCallbacks>> &&)::$_0::optional<unsigned long long>,std::span<unsigned char const,18446744073709551615ul><unsigned int>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (WTF *)*((void *)this + 1);
  *(void *)this = &unk_1EE9EE6C0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::RemoteVideoEncoder(WebKit::LibWebRTCCodecs::Encoder &,WTF::Ref<WebKit::RemoteVideoEncoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoEncoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoEncoderCallbacks>> &&)::$_0,void,std::span<unsigned char const,18446744073709551615ul>,BOOL,long long,WebKit::RemoteVideoEncoder::RemoteVideoEncoder(WebKit::LibWebRTCCodecs::Encoder &,WTF::Ref<WebKit::RemoteVideoEncoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoEncoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoEncoderCallbacks>> &&)::$_0::optional<unsigned long long>,std::span<unsigned char const,18446744073709551615ul><unsigned int>>::call(WTF *result, uint64_t a2, WTF *this, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v14 = *((void *)result + 1);
  if (this)
  {
    if ((unint64_t)this >> 32)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v16 = (WTF *)WTF::fastMalloc(this);
    uint64_t v18 = 0;
    do
    {
      *((unsigned char *)v18 + (void)v16) = *((unsigned char *)v18 + a2);
      uint64_t v18 = (WTF *)((char *)v18 + 1);
    }
    while (this != v18);
    if (*(unsigned char *)(v14 + 24))
    {
      return (WTF *)WTF::fastFree(v16, v17);
    }
  }
  else
  {
    if (*(unsigned char *)(v14 + 24)) {
      return result;
    }
    uint64_t v16 = 0;
  }
  unint64_t v20 = v16;
  int v21 = (int)this;
  int v22 = (int)this;
  char v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  char v26 = a7;
  int v27 = a8;
  char v28 = BYTE4(a8);
  (*(void (**)(void, WTF **))(**(void **)(v14 + 16) + 16))(*(void *)(v14 + 16), &v20);
  uint64_t result = v20;
  if (v20)
  {
    unint64_t v20 = 0;
    int v21 = 0;
    return (WTF *)WTF::fastFree(result, v19);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::RemoteVideoEncoder(WebKit::LibWebRTCCodecs::Encoder &,WTF::Ref<WebKit::RemoteVideoEncoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoEncoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoEncoderCallbacks>> &&)::$_1,void,WebCore::VideoEncoderActiveConfiguration &&>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (WTF *)a1[1];
  *a1 = &unk_1EE9EE6E8;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::RemoteVideoEncoder(WebKit::LibWebRTCCodecs::Encoder &,WTF::Ref<WebKit::RemoteVideoEncoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoEncoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoEncoderCallbacks>> &&)::$_1,void,WebCore::VideoEncoderActiveConfiguration &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (WTF *)*((void *)this + 1);
  *(void *)this = &unk_1EE9EE6E8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoEncoderCallbacks,(WTF::DestructionThread)0>::deref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoEncoder::RemoteVideoEncoder(WebKit::LibWebRTCCodecs::Encoder &,WTF::Ref<WebKit::RemoteVideoEncoderCallbacks,WTF::RawPtrTraits<WebKit::RemoteVideoEncoderCallbacks>,WTF::DefaultRefDerefTraits<WebKit::RemoteVideoEncoderCallbacks>> &&)::$_1,void,WebCore::VideoEncoderActiveConfiguration &&>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (!*(unsigned char *)(v1 + 24)) {
    return (*(uint64_t (**)(void))(**(void **)(v1 + 8) + 16))();
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameProxy::pixelBuffer(void)::$_0,void,WTF::RetainPtr<__CVBuffer *> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(const void **)(v4 + 128);
  *(void *)(v4 + 128) = v3;
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(WTF::BinarySemaphore **)(a1 + 16);

  return WTF::BinarySemaphore::signal(v6);
}

void *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9EE748;
  uint64_t v3 = (atomic_uchar *)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EE748;
  uint64_t v3 = (atomic_uchar *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::ensureWeakOnDispatcher(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t result = *(atomic_uchar **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 24), &v10);
    if (v10)
    {
      uint64_t result = *(atomic_uchar **)(v3 + 312);
      if (result)
      {
        uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(v3 + 320), &v9);
        if (v9)
        {
          unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v3 + 368));
          if ((v5 & 1) == 0)
          {
            unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v3 + 369));
            if ((v6 & 1) == 0) {
              uint64_t result = (atomic_uchar *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
            }
          }
          uint64_t v7 = v9;
          uint64_t v9 = 0;
          if (v7) {
            uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 24), v4);
          }
        }
      }
      uint64_t v8 = v10;
      uint64_t v10 = 0;
      if (v8) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v8 + 8));
      }
    }
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::abort(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v1 + 312), *(void *)(v1 + 320), &v10);
  uint64_t v2 = *(void *)(v10 + 32);
  uint64_t v3 = *(void *)(v1 + 336);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1376;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v11 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 24), v5);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::resetParserState(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v1 + 312), *(void *)(v1 + 320), &v10);
  uint64_t v2 = *(void *)(v10 + 32);
  uint64_t v3 = *(void *)(v1 + 336);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1388;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v11 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 24), v5);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::removedFromMediaSource(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  atomic_store(1u, (unsigned __int8 *)(v1 + 369));
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v1 + 312), *(void *)(v1 + 320), &v10);
  uint64_t v2 = *(void *)(v10 + 32);
  uint64_t v3 = *(void *)(v1 + 336);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1387;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v11 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 24), v5);
  }
  return result;
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setActive(BOOL)::$_0,void>::call(atomic_uchar *result)
{
  uint64_t v1 = *((void *)result + 1);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = result;
    char v4 = 0;
    uint64_t v5 = *(void *)(v1 + 24);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      uint64_t result = (atomic_uchar *)MEMORY[0x19972E8D0](v2);
    }
    if (*(void *)(v2 + 24)) {
      ++*(void *)(v2 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    int v6 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 == 1)
    {
      if (!v5) {
        return result;
      }
    }
    else
    {
      uint64_t result = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
      if (!v5) {
        return result;
      }
    }
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v1 + 312), *(void *)(v1 + 320), &v16);
    uint64_t v7 = *(void *)(v16 + 32);
    atomic_uchar v15 = v3[16];
    uint64_t v8 = *(void *)(v1 + 336);
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 1392;
    *((void *)v9 + 1) = v8;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    unint64_t v17 = v9;
    IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v9, &v15);
    IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v17, 0, 0);
    uint64_t v11 = v17;
    unint64_t v17 = 0;
    if (v11)
    {
      IPC::Encoder::~Encoder(v11, v10);
      WTF::fastFree(v13, v14);
    }
    uint64_t v12 = v16;
    uint64_t v16 = 0;
    if (v12) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v12 + 24), v10);
    }
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSourcePrivate,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 8), v10);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::canSwitchToType(WebCore::ContentType const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9EE810;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::canSwitchToType(WebCore::ContentType const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9EE810;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::canSwitchToType(WebCore::ContentType const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = *(atomic_uchar **)(v2 + 312);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(v2 + 320), &v23);
    if (v23)
    {
      unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v2 + 368));
      if (v5 & 1) != 0 || (unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v2 + 369)), (v6))
      {
LABEL_21:
        uint64_t v15 = v23;
        uint64_t v23 = 0;
        if (v15) {
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v15 + 24), v4);
        }
        return result;
      }
      WebCore::ContentType::ContentType((WebCore::ContentType *)v22, (const WTF::String *)(a1 + 8));
      uint64_t v7 = *(void *)(v23 + 32);
      uint64_t v8 = *(void *)(v2 + 336);
      uint64_t v28 = 0;
      IPC::Connection::createSyncMessageEncoder(3732, v8, &v28, &v27);
      IPC::ArgumentCoder<WebCore::ContentType,void>::encode(v27, (uint64_t)v22);
      IPC::Connection::sendSyncMessage(v7, v28, (uint64_t *)&v27, 0, (uint64_t)&v25, INFINITY);
      if (v26)
      {
        if (v26 == 1)
        {
          LOBYTE(v19) = (_BYTE)v25;
          int v9 = 1;
          int v21 = 1;
          int v10 = 1;
          goto LABEL_12;
        }
      }
      else
      {
        __int16 v24 = 0;
        IPC::Decoder::operator>><std::tuple<BOOL>>(v25, &v24);
        if (!HIBYTE(v24))
        {
          LOBYTE(v19) = 13;
          int v9 = 1;
          int v21 = 1;
          int v10 = v26;
          if (v26 == -1)
          {
LABEL_13:
            uint64_t v13 = v27;
            int v27 = 0;
            if (v13)
            {
              IPC::Encoder::~Encoder(v13, v11);
              WTF::fastFree(v16, v17);
            }
            char v14 = v20;
            if (v9) {
              char v14 = 0;
            }
            **(unsigned char **)(a1 + 24) = v14;
            ((void (*)(uint64_t **, uint64_t **))off_1EE9EE828[v9])(&v25, &v19);
            uint64_t result = (atomic_uchar *)v22[0];
            v22[0] = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2) {
                uint64_t result = (atomic_uchar *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v4);
              }
              else {
                *(_DWORD *)result -= 2;
              }
            }
            goto LABEL_21;
          }
LABEL_12:
          ((void (*)(__int16 *, uint64_t **))off_1EE9EE728[v10])(&v24, &v25);
          goto LABEL_13;
        }
        int v10 = v26;
        if (!v26)
        {
          int v9 = 0;
          uint64_t v12 = v25;
          uint64_t v25 = 0;
          uint64_t v19 = v12;
          char v20 = v24;
          int v21 = 0;
          goto LABEL_12;
        }
      }
      uint64_t v18 = std::__throw_bad_variant_access[abi:sn180100]();
      return (atomic_uchar *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteSourceBufferProxy15CanSwitchToTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(v18);
    }
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteSourceBufferProxy15CanSwitchToTypeEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setMediaSourceEnded(BOOL)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v2 + 312), *(void *)(v2 + 320), &v12);
  uint64_t v3 = *(void *)(v12 + 32);
  char v11 = *(unsigned char *)(a1 + 16);
  uint64_t v4 = *(void *)(v2 + 336);
  unsigned __int8 v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v5 = 1400;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v5, &v11);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  if (v8) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 24), v6);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setMode(WebCore::SourceBufferAppendMode)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v2 + 312), *(void *)(v2 + 320), &v14);
  uint64_t v3 = *(void *)(v14 + 32);
  uint64_t v4 = *(void *)(v2 + 336);
  unsigned __int8 v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v5 = 1401;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v15 = v5;
  char v6 = *(unsigned char *)(a1 + 16);
  uint64_t v7 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v8)
  {
    *uint64_t v7 = v6;
    IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v15, 0, 0);
    uint64_t result = (uint64_t)v15;
    uint64_t v15 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v9);
      uint64_t result = WTF::fastFree(v12, v13);
    }
    uint64_t v11 = v14;
    uint64_t v14 = 0;
    if (v11) {
      return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 24), v9);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::evictCodedFrames(unsigned long long,WTF::MediaTime const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v2 + 312), *(void *)(v2 + 320), &v12);
  uint64_t v3 = *(void *)(v12 + 32);
  v11[0] = *(void *)(a1 + 16);
  v11[1] = a1 + 24;
  uint64_t v4 = *(void *)(v2 + 336);
  unsigned __int8 v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v5 = 1379;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::MediaTime const&>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,WTF::MediaTime const&>,0ul,1ul>(v5, v11);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  if (v8) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 24), v6);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::MediaTime const&>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,WTF::MediaTime const&>,0ul,1ul>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unsigned __int8 v5 = (void *)IPC::Encoder::grow(a1, 8uLL, 8);
  if (v6 <= 7)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    void *v5 = v4;
    uint64_t v7 = a2[1];
    return IPC::ArgumentCoder<WTF::MediaTime,void>::encode(a1, v7);
  }
  return result;
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::evictCodedFrames(unsigned long long,WTF::MediaTime const&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t result = *(atomic_uchar **)(v2 + 312);
  if (result)
  {
    unint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(v2 + 320), &v55);
    if (v55)
    {
      unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v2 + 368));
      if (v5) {
        goto LABEL_47;
      }
      unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v2 + 369));
      if (v6) {
        goto LABEL_47;
      }
      uint64_t v7 = *(void *)(v55 + 32);
      uint64_t v8 = *(void *)(a1 + 24);
      v50[0] = **(void **)(a1 + 16);
      v50[1] = v8;
      uint64_t v9 = *(void *)(v2 + 336);
      uint64_t v64 = 0;
      IPC::Connection::createSyncMessageEncoder(3733, v9, &v64, &v63);
      IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::MediaTime const&>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,WTF::MediaTime const&>,0ul,1ul>(v63, v50);
      IPC::Connection::sendSyncMessage(v7, v64, (uint64_t *)&v63, 0, (uint64_t)&v61, INFINITY);
      if (v62)
      {
        if (v62 != 1) {
          goto LABEL_54;
        }
        LOBYTE(v51) = (_BYTE)v61;
        int v11 = 1;
        int v54 = 1;
        int v12 = 1;
LABEL_23:
        ((void (*)(long long *, IPC::Decoder **))off_1EE9EE728[v12])(&v65, &v61);
LABEL_24:
        uint64_t v29 = v63;
        uint64_t v63 = 0;
        if (v29)
        {
          IPC::Encoder::~Encoder(v29, v22);
          WTF::fastFree(v31, v32);
          if (v11) {
            goto LABEL_26;
          }
        }
        else if (v11)
        {
LABEL_26:
          int v30 = 1;
LABEL_46:
          unint64_t result = (atomic_uchar *)((uint64_t (*)(WTF **, WTF **))off_1EE9EE8D8[v30])(&v56, &v51);
LABEL_47:
          uint64_t v46 = v55;
          uint64_t v55 = 0;
          if (v46) {
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v46 + 24), v4);
          }
          return result;
        }
        unint64_t result = (atomic_uchar *)WebCore::SourceBufferPrivate::client((uint64_t *)&v61, (WebCore::SourceBufferPrivate *)v2);
        if (!v61)
        {
LABEL_45:
          int v30 = v54;
          if (v54 == -1) {
            goto LABEL_47;
          }
          goto LABEL_46;
        }
        char v33 = 0;
        uint64_t v56 = 0;
        uint64_t v57 = 0;
        long long v34 = (atomic_uchar *)(v2 + 370);
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 370), (unsigned __int8 *)&v33, 1u, memory_order_acquire, memory_order_acquire);
        if (v33) {
          MEMORY[0x19972E8D0](v2 + 370);
        }
        if (!v54)
        {
          uint64_t v35 = v52;
          uint64_t v36 = *(void *)v53;
          uint64_t v52 = 0;
          *(void *)uint64_t v53 = 0;
          *(_OWORD *)uint64_t v66 = *(_OWORD *)&v53[8];
          *(_OWORD *)&v66[16] = *(_OWORD *)&v53[24];
          unsigned __int8 v37 = v56;
          if (HIDWORD(v57))
          {
            uint64_t v38 = 16 * HIDWORD(v57);
            int v39 = v56;
            do
            {
              char v40 = *(WTF **)v39;
              if (*(void *)v39)
              {
                *(void *)int v39 = 0;
                *((_DWORD *)v39 + 2) = 0;
                WTF::fastFree(v40, v4);
              }
              int v39 = (WTF *)((char *)v39 + 16);
              v38 -= 16;
            }
            while (v38);
          }
          long long v41 = (_OWORD *)(v2 + 40);
          if (v37) {
            WTF::fastFree(v37, v4);
          }
          long long v65 = 0uLL;
          uint64_t v56 = v35;
          uint64_t v57 = v36;
          long long v42 = *(_OWORD *)&v66[16];
          _OWORD *v41 = *(_OWORD *)v66;
          v41[1] = v42;
          WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v4);
          int v43 = 1;
          atomic_compare_exchange_strong_explicit(v34, (unsigned __int8 *)&v43, 0, memory_order_release, memory_order_relaxed);
          if (v43 != 1) {
            WTF::Lock::unlockSlow((WTF::Lock *)v34);
          }
          (*(void (**)(long long *__return_ptr))(*(void *)v61 + 24))(&v65);
          uint64_t v14 = (atomic_uint *)v65;
          *(void *)&long long v65 = 0;
          if (!v14) {
            goto LABEL_43;
          }
          unint64_t v17 = (unsigned int *)(v14 + 2);
          unsigned int add = atomic_fetch_add(v14 + 2, 0xFFFFFFFF);
          if (add != 1) {
            goto LABEL_43;
          }
          goto LABEL_53;
        }
LABEL_54:
        uint64_t v49 = std::__throw_bad_variant_access[abi:sn180100]();
        return (atomic_uchar *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteSourceBufferProxy16EvictCodedFramesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(v49);
      }
      uint64_t v13 = v61;
      IPC::Decoder::decode<WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v61, v10, (uint64_t)&v56);
      if ((_BYTE)v58)
      {
        uint64_t v14 = (atomic_uint *)IPC::Decoder::decode<WebCore::SourceBufferEvictionData>(v13, (uint64_t)&v65);
        if (v66[16])
        {
          unint64_t v17 = (unsigned int *)v58;
          if (!(_BYTE)v58)
          {
            __break(1u);
LABEL_53:
            atomic_store(add, v17);
            (*(void (**)(atomic_uint *))(*(void *)v14 + 16))(v14);
LABEL_43:
            unint64_t result = (atomic_uchar *)WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v44);
            int v45 = v61;
            int v61 = 0;
            if (v45) {
              unint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivateClient,(WTF::DestructionThread)0>(*((atomic_uchar **)v45 + 1), v4);
            }
            goto LABEL_45;
          }
          uint64_t v18 = v56;
          uint64_t v56 = 0;
          int v51 = v18;
          *(_OWORD *)uint64_t v53 = v65;
          *(_OWORD *)&v53[16] = *(_OWORD *)v66;
          v53[32] = 1;
          uint64_t v19 = v57;
          uint64_t v57 = 0;
          WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v15);
          char v20 = v51;
          int v51 = 0;
          uint64_t v56 = v20;
          uint64_t v52 = 0;
          uint64_t v57 = v19;
          long long v58 = *(_OWORD *)v53;
          long long v59 = *(_OWORD *)&v53[16];
          char v60 = 1;
          WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v21);
          if (v60)
          {
            if (v62) {
              goto LABEL_54;
            }
            uint64_t v23 = v61;
            int v61 = 0;
            __int16 v24 = v56;
            uint64_t v56 = 0;
            *(_OWORD *)&v66[8] = v58;
            *(_OWORD *)&v66[24] = v59;
            long long v65 = 0uLL;
            int v51 = v23;
            uint64_t v52 = v24;
            *(void *)uint64_t v66 = 0;
            uint64_t v25 = v57;
            uint64_t v57 = 0;
            *(void *)uint64_t v53 = v25;
            *(_OWORD *)&v53[8] = v58;
            *(_OWORD *)&v53[24] = v59;
            int v54 = 0;
            WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65 + 8, v22);
            int v26 = (IPC::Decoder *)v65;
            *(void *)&long long v65 = 0;
            if (v26)
            {
              IPC::Decoder::~Decoder(v26);
              WTF::fastFree(v47, v48);
            }
            if (v60) {
              WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v22);
            }
            int v11 = 0;
LABEL_22:
            int v12 = v62;
            if (v62 == -1) {
              goto LABEL_24;
            }
            goto LABEL_23;
          }
LABEL_21:
          LOBYTE(v51) = 13;
          int v11 = 1;
          int v54 = 1;
          goto LABEL_22;
        }
        if ((_BYTE)v58) {
          WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v15);
        }
      }
      int v22 = *(void **)v13;
      uint64_t v27 = *((void *)v13 + 1);
      *(void *)uint64_t v13 = 0;
      *((void *)v13 + 1) = 0;
      uint64_t v28 = *((void *)v13 + 3);
      if (v28 && v27) {
        (*(void (**)(uint64_t, void *))(*(void *)v28 + 16))(v28, v22);
      }
      goto LABEL_21;
    }
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteSourceBufferProxy16EvictCodedFramesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::addTrackBuffer(unsigned long long,WTF::RefPtr<WebCore::MediaDescription,WTF::RawPtrTraits<WebCore::MediaDescription>,WTF::DefaultRefDerefTraits<WebCore::MediaDescription>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v2 + 312), *(void *)(v2 + 320), &v12);
  uint64_t v3 = *(void *)(v12 + 32);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v2 + 336);
  unsigned __int8 v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v5 = 1377;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, &v11);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v13, 0, 0);
  unint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    unint64_t result = (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  if (v8) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 24), v6);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::resetTrackBuffers(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v1 + 312), *(void *)(v1 + 320), &v10);
  uint64_t v2 = *(void *)(v10 + 32);
  uint64_t v3 = *(void *)(v1 + 336);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1390;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v11 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  unint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    unint64_t result = (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 24), v5);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::clearTrackBuffers(BOOL)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v1 + 312), *(void *)(v1 + 320), &v10);
  uint64_t v2 = *(void *)(v10 + 32);
  uint64_t v3 = *(void *)(v1 + 336);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1381;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v11 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  unint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    unint64_t result = (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 24), v5);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setAllTrackBuffersNeedRandomAccess(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v1 + 312), *(void *)(v1 + 320), &v10);
  uint64_t v2 = *(void *)(v10 + 32);
  uint64_t v3 = *(void *)(v1 + 336);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1393;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v11 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  unint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    unint64_t result = (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 24), v5);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setGroupStartTimestamp(WTF::MediaTime const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v2 + 312), *(void *)(v2 + 320), &v11);
  uint64_t v3 = *(void *)(v11 + 32);
  uint64_t v4 = *(void *)(v2 + 336);
  unsigned __int8 v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v5 = 1396;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v5, a1 + 16);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v12, 0, 0);
  unint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    unint64_t result = (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  uint64_t v8 = v11;
  uint64_t v11 = 0;
  if (v8) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 24), v6);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setGroupStartTimestampToEndTimestamp(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v1 + 312), *(void *)(v1 + 320), &v10);
  uint64_t v2 = *(void *)(v10 + 32);
  uint64_t v3 = *(void *)(v1 + 336);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1397;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v11 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  unint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    unint64_t result = (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 24), v5);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setShouldGenerateTimestamps(BOOL)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v2 + 312), *(void *)(v2 + 320), &v12);
  uint64_t v3 = *(void *)(v12 + 32);
  char v11 = *(unsigned char *)(a1 + 16);
  uint64_t v4 = *(void *)(v2 + 336);
  unsigned __int8 v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v5 = 1402;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v5, &v11);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v13, 0, 0);
  unint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    unint64_t result = (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  if (v8) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 24), v6);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::reenqueueMediaIfNeeded(WTF::MediaTime const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v2 + 312), *(void *)(v2 + 320), &v11);
  uint64_t v3 = *(void *)(v11 + 32);
  uint64_t v4 = *(void *)(v2 + 336);
  unsigned __int8 v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v5 = 1385;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v5, a1 + 16);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v12, 0, 0);
  unint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    unint64_t result = (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  uint64_t v8 = v11;
  uint64_t v11 = 0;
  if (v8) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 24), v6);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::resetTimestampOffsetInTrackBuffers(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v1 + 312), *(void *)(v1 + 320), &v10);
  uint64_t v2 = *(void *)(v10 + 32);
  uint64_t v3 = *(void *)(v1 + 336);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1389;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v11 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  unint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    unint64_t result = (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 24), v5);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::startChangingType(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v1 + 312), *(void *)(v1 + 320), &v10);
  uint64_t v2 = *(void *)(v10 + 32);
  uint64_t v3 = *(void *)(v1 + 336);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1404;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v11 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  unint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    unint64_t result = (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v7 + 24), v5);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setTimestampOffset(WTF::MediaTime const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v2 + 312), *(void *)(v2 + 320), &v11);
  uint64_t v3 = *(void *)(v11 + 32);
  uint64_t v4 = *(void *)(v2 + 336);
  unsigned __int8 v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v5 = 1403;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v5, a1 + 16);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v12, 0, 0);
  unint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    unint64_t result = (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  uint64_t v8 = v11;
  uint64_t v11 = 0;
  if (v8) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 24), v6);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setAppendWindowStart(WTF::MediaTime const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v2 + 312), *(void *)(v2 + 320), &v11);
  uint64_t v3 = *(void *)(v11 + 32);
  uint64_t v4 = *(void *)(v2 + 336);
  unsigned __int8 v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v5 = 1395;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v5, a1 + 16);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v12, 0, 0);
  unint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    unint64_t result = (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  uint64_t v8 = v11;
  uint64_t v11 = 0;
  if (v8) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 24), v6);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setAppendWindowEnd(WTF::MediaTime const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v2 + 312), *(void *)(v2 + 320), &v11);
  uint64_t v3 = *(void *)(v11 + 32);
  uint64_t v4 = *(void *)(v2 + 336);
  unsigned __int8 v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned __int8 v5 = 1394;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v5, a1 + 16);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v12, 0, 0);
  unint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    unint64_t result = (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  uint64_t v8 = v11;
  uint64_t v11 = 0;
  if (v8) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 24), v6);
  }
  return result;
}

uint64_t *WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2) {
    goto LABEL_14;
  }
  BOOL isSettled = WTF::NativePromise<void,void,0u>::isSettled(v2);
  if (!isSettled)
  {
    uint64_t v4 = *a1;
    unsigned __int8 v5 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
    if (*v5) {
      BOOL v6 = v5[16] >= 4u;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6) {
      WTF::Logger::log<char [10],WTF::NativePromise<void,void,0u>>((uint64_t)v5, 4u, "Non settled AutoRejectProducer, reject with default value", v4);
    }
    v9[0] = 0;
    v9[1] = 0;
    v9[2] = "~NativePromiseProducer";
    v9[3] = 0;
    WTF::NativePromiseProducer<void,void,16u>::reject<std::enable_if<true,void>>(a1, (WTF::NativePromiseBase *)v9);
  }
  if (*a1)
  {
    WTF::NativePromise<void,void,0u>::assertIsDead(*a1);
    uint64_t v7 = (unsigned int *)*a1;
    *a1 = 0;
    if (v7 && atomic_fetch_add((atomic_uint *volatile)v7 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(void *)v7 + 16))(v7);
    }
  }
  else
  {
LABEL_14:
    *a1 = 0;
  }
  return a1;
}

WTF::StringImpl *WTF::NativePromiseProducer<void,void,16u>::reject<std::enable_if<true,void>>(uint64_t *a1, WTF::NativePromiseBase *a2)
{
  uint64_t isSettled = *a1;
  if (isSettled)
  {
    uint64_t isSettled = WTF::NativePromise<void,void,0u>::isSettled(isSettled);
    uint64_t v5 = *a1;
    if (!isSettled)
    {
      return WTF::NativePromise<void,void,0u>::reject<std::enable_if<true,void>>(v5, a2);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  unint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
  if (*(unsigned char *)result) {
    BOOL v7 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)result, 4u, a2, " ignored already resolved or rejected ", v5);
  }
  return result;
}

WTF::Lock *WTF::NativePromise<void,void,0u>::reject<std::enable_if<true,void>>(uint64_t a1, WTF::NativePromiseBase *a2)
{
  char v4 = 0;
  uint64_t v8 = (WTF::Lock *)(a1 + 48);
  char v9 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0]();
  }
  WTF::NativePromiseBase::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,void,0u>>(a2, " rejecting ", a1);
  uint64_t v5 = *(unsigned int *)(a1 + 64);
  if (v5 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9EE4D0[v5])(&v10, a1 + 56);
  }
  int v6 = 1;
  *(unsigned char *)(a1 + 57) = 1;
  *(_DWORD *)(a1 + 64) = 1;
  unint64_t result = (WTF::Lock *)WTF::NativePromise<void,void,0u>::dispatchAll(a1, (atomic_uchar *volatile *)&v8);
  if (v9)
  {
    unint64_t result = v8;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v8, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setMaximumBufferSize(unsigned long)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EEB00;
  WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer(a1 + 3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setMaximumBufferSize(unsigned long)::$_0,void>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9EEB00;
  WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer(a1 + 3);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setMaximumBufferSize(unsigned long)::$_0,void>::call(uint64_t a1)
{
  v81[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v3 + 312), *(void *)(v3 + 320), v60);
  char v4 = (os_unfair_lock_s *)*((void *)v60[0] + 4);
  uint64_t v5 = *(void *)(v3 + 336);
  *(void *)buf = 0;
  *(void *)&buf[8] = 0;
  *(void *)&uint8_t buf[16] = "sendWithPromisedReply";
  *(void *)&unsigned char buf[24] = 0;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v61, 0, (WTF::Logger::LogSiteIdentifier *)buf);
  int v6 = v61;
  if (v61)
  {
    atomic_fetch_add((atomic_uint *volatile)v61 + 2, 1u);
    BOOL v7 = v61;
  }
  else
  {
    BOOL v7 = 0;
  }
  int v61 = 0;
  *(_OWORD *)&buf[8] = v62;
  *(_OWORD *)&unsigned char buf[24] = v63;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v8 = &unk_1EE9EEB40;
  *(void *)(v8 + 8) = v7;
  *(void *)buf = 0;
  long long v9 = *(_OWORD *)&buf[24];
  *(_OWORD *)(v8 + 16) = *(_OWORD *)&buf[8];
  *(_OWORD *)(v8 + 32) = v9;
  uint64_t v56 = v8;
  uint64_t v57 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer((uint64_t *)buf);
  char v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v10 = 1398;
  *((void *)v10 + 1) = v5;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  *(void *)buf = v10;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v10, v2);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v4, (IPC::Encoder **)buf, &v56, 0, 0);
  uint64_t v12 = *(IPC::Encoder **)buf;
  *(void *)buf = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v11);
    WTF::fastFree(v34, v35);
  }
  uint64_t v13 = v56;
  uint64_t v56 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer((uint64_t *)&v61);
  uint64_t v15 = v60[0];
  v60[0] = 0;
  if (v15) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*((atomic_uchar **)v15 + 3), v14);
  }
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  long long v58 = "operator()";
  uint64_t v59 = 0;
  uint64_t v16 = *(atomic_uint **)(a1 + 24);
  if (v16) {
    atomic_fetch_add(v16 + 2, 1u);
  }
  BOOL isSettled = WTF::NativePromise<void,void,0u>::isSettled((uint64_t)v6);
  uint64_t v18 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
  if (!*v18) {
    goto LABEL_73;
  }
  uint64_t v19 = v18;
  if (v18[16] < 4u) {
    goto LABEL_73;
  }
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v71, (WTF::Logger::LogSiteIdentifier *)&v56);
  WTF::String::String((WTF::String *)&v70, " invoking chainTo() [");
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString((uint64_t)v6, &v69);
  WTF::String::String((WTF::String *)&v68, " chainedPromise:");
  WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString((uint64_t)v16, &v67);
  WTF::String::String((WTF::String *)&v66, " isSettled:");
  WTF::LogArgument<BOOL>::toString<BOOL>(&v65);
  WTF::String::String((WTF::String *)&v64, "]");
  uint64_t result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, (uint64_t *)&v66, (uint64_t *)&v65, (uint64_t *)&v64, v60);
  if (!v60[0])
  {
    __break(0xC471u);
    return result;
  }
  int v22 = v64;
  uint64_t v64 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v21);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  uint64_t v23 = v65;
  long long v65 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v21);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  __int16 v24 = v66;
  uint64_t v66 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v21);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  uint64_t v25 = v67;
  int v67 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v21);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  int v26 = v68;
  uint64_t v68 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v21);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  uint64_t v27 = v69;
  uint64_t v69 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v21);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  uint64_t v28 = v70;
  int v70 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, v21);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  uint64_t v29 = v71;
  uint64_t v71 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v21);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  int v30 = *((void *)v19 + 4);
  long long v31 = (WTF *)os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
  if (v31)
  {
    WTF::String::utf8();
    char v33 = v61 ? (char *)v61 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v33;
    _os_log_impl(&dword_1985F2000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    long long v31 = v61;
    int v61 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1) {
        long long v31 = (WTF *)WTF::fastFree(v31, v32);
      }
      else {
        --*(_DWORD *)v31;
      }
    }
  }
  if (*v19 && v19[16] >= 4u)
  {
    uint64_t v36 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v37 = *v36;
      if (v37) {
        break;
      }
      int v38 = *v36;
      atomic_compare_exchange_strong_explicit(v36, (unsigned __int8 *)&v38, v37 | 1, memory_order_acquire, memory_order_acquire);
      if (v38 == v37)
      {
        uint64_t v55 = (uint64_t)v6;
        uint64_t v39 = WTF::Logger::observers(v31);
        uint64_t v40 = *(unsigned int *)(v39 + 12);
        if (v40)
        {
          long long v41 = *(uint64_t **)v39;
          uint64_t v54 = *(void *)v39 + 8 * v40;
          do
          {
            uint64_t v42 = *v41;
            *(_DWORD *)buf = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf[8], (WTF::Logger::LogSiteIdentifier *)&v56);
            *(_DWORD *)&uint8_t buf[16] = 0;
            WTF::String::String((WTF::String *)&buf[24], " invoking chainTo() [");
            *(_DWORD *)&buf[32] = 0;
            WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v55, &v73);
            int v74 = 0;
            WTF::String::String((WTF::String *)v75, " chainedPromise:");
            v75[2] = 0;
            WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString((uint64_t)v16, &v76);
            int v77 = 0;
            WTF::String::String((WTF::String *)v78, " isSettled:");
            v78[2] = 0;
            WTF::LogArgument<BOOL>::toString<BOOL>(&v79);
            int v80 = 0;
            WTF::String::String((WTF::String *)v81, "]");
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v61, (uint64_t)buf, 8uLL);
            (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v42 + 16))(v42, v19, 4, &v61);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v43);
            for (uint64_t i = 120; i != -8; i -= 16)
            {
              int v45 = *(WTF::StringImpl **)&buf[i];
              *(void *)&buf[i] = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2) {
                  WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v32);
                }
                else {
                  *(_DWORD *)v45 -= 2;
                }
              }
            }
            ++v41;
          }
          while (v41 != (uint64_t *)v54);
        }
        int v46 = 1;
        atomic_compare_exchange_strong_explicit(v36, (unsigned __int8 *)&v46, 0, memory_order_release, memory_order_relaxed);
        int v6 = (WTF *)v55;
        if (v46 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  int v47 = v60[0];
  v60[0] = 0;
  if (!v47)
  {
LABEL_73:
    if (v16) {
      goto LABEL_74;
    }
    goto LABEL_76;
  }
  if (*(_DWORD *)v47 != 2)
  {
    *(_DWORD *)v47 -= 2;
    goto LABEL_73;
  }
  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v32);
  if (v16)
  {
LABEL_74:
    if (atomic_fetch_add(v16 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v16 + 2);
      (*(void (**)(atomic_uint *))(*(void *)v16 + 16))(v16);
    }
  }
LABEL_76:
  unsigned __int8 v48 = atomic_load((unsigned __int8 *)v6 + 113);
  WTF::NativePromise<void,void,0u>::setDispatchMode(*(atomic_uchar **)(a1 + 24), v48, (WTF::Logger::LogSiteIdentifier *)&v56);
  uint64_t v49 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  long long v50 = *(_OWORD *)(a1 + 48);
  long long v62 = *(_OWORD *)(a1 + 32);
  long long v63 = v50;
  v60[0] = 0;
  v60[1] = 0;
  uint64_t v51 = WTF::fastMalloc((WTF *)0x50);
  uint64_t v52 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v52 = &unk_1EE9EEBA8;
  *(void *)(v52 + 8) = v49;
  int v61 = 0;
  long long v53 = v63;
  *(_OWORD *)(v52 + 16) = v62;
  *(_OWORD *)(v52 + 32) = v53;
  *(_DWORD *)(v51 + 8) = 1;
  *(void *)(v51 + 16) = 0;
  *(void *)(v51 + 24) = 0;
  *(void *)(v51 + 32) = 0;
  *(void *)(v51 + 40) = "chainTo";
  *(void *)(v51 + 48) = 0;
  *(_WORD *)(v51 + 56) = 0;
  *(void *)uint64_t v51 = &unk_1EE9EF040;
  *(void *)(v51 + 64) = 0;
  *(void *)(v51 + 72) = v52;
  atomic_fetch_add((atomic_uint *volatile)v6 + 2, 1u);
  *(void *)buf = v6;
  *(void *)&buf[8] = v51;
  *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)v60;
  *(void *)&buf[32] = "chainTo";
  uint64_t v73 = 0;
  WTF::NativePromise<void,IPC::Error,0u>::ThenCommand<WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)buf);
  uint64_t result = (uint64_t)WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer((uint64_t *)&v61);
  if (atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v6 + 2);
    return (*(uint64_t (**)(WTF *))(*(void *)v6 + 16))(v6);
  }
  return result;
}

uint64_t WTF::NativePromiseProducer<void,IPC::Error,0u>::NativePromiseProducer<std::enable_if<true,void>>(uint64_t a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x78);
  BOOL v7 = (atomic_uchar *)WTF::NativePromise<void,IPC::Error,0u>::NativePromise(v6, a3);
  *(void *)a1 = v7;
  long long v8 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 24) = *((_OWORD *)a3 + 1);
  *(_OWORD *)(a1 + 8) = v8;
  WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::setDispatchMode(v7, a2, a3);
  return a1;
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::NativePromise(uint64_t a1, _OWORD *a2)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9EEFF0;
  long long v3 = a2[1];
  *(_OWORD *)(a1 + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a1 + 88;
  *(void *)(a1 + 80) = 1;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 112) = 0;
  char v4 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v4 && v4[16] >= 4u) {
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v4, 4u, "creating ", a1);
  }
  return a1;
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  long long v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 108);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(v1 + 96);
    uint64_t v6 = 40 * v4;
    do
    {
      uint64_t result = *v5;
      if (*v5) {
        uint64_t result = WTF::NativePromise<void,IPC::Error,0u>::assertIsDead();
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::~NativePromise(unsigned int *a1)
{
  uint64_t v1 = WTF::NativePromise<void,IPC::Error,0u>::~NativePromise(a1);

  return WTF::fastFree((WTF *)v1, v2);
}

unsigned int *WTF::NativePromise<void,IPC::Error,0u>::~NativePromise(unsigned int *a1)
{
  char v2 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2) {
    BOOL v3 = v2[16] >= 4u;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v2, 4u, "destroying ", (uint64_t)a1);
  }
  WTF::NativePromise<void,IPC::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<void,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), v4);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 18), v5);
  uint64_t v6 = a1[16];
  if (v6 != -1) {
    ((void (*)(char *, unsigned int *))off_1EE9EEB18[v6])(&v8, a1 + 14);
  }
  a1[16] = -1;
  return a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      uint64_t v4 = WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIvN3IPC5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSE_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::SetMaximumBufferSize,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EEB40;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::SetMaximumBufferSize,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9EEB40;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::SetMaximumBufferSize,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  char v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9EEB80;
  v4[1] = v3;
  int v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  void v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  uint64_t result = (uint64_t)v7;
  int v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WTF::NativePromiseProducer<void,IPC::Error,0u>::settleWithFunction<std::enable_if<true,void>>(uint64_t *a1, uint64_t *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t isSettled = *a1;
  if (isSettled)
  {
    uint64_t isSettled = WTF::NativePromise<void,void,0u>::isSettled(isSettled);
    uint64_t v7 = *a1;
    if (!isSettled)
    {
      return WTF::NativePromise<void,IPC::Error,0u>::settleWithFunction(v7, a2, a3);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
  if (*(unsigned char *)result) {
    BOOL v9 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)result, 4u, a3, " ignored already resolved or rejected ", v7);
  }
  return result;
}

WTF::Lock *WTF::NativePromise<void,IPC::Error,0u>::settleWithFunction(uint64_t a1, uint64_t *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  uint64_t v14 = v7;
  char v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  char v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " settling ", a1);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 64);
  if (v10 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9EEB18[v10])(&v16, a1 + 56);
  }
  uint64_t v11 = *a2;
  *a2 = 0;
  *(void *)(a1 + 56) = v11;
  *(_DWORD *)(a1 + 64) = 2;
  uint64_t result = (WTF::Lock *)WTF::NativePromise<void,IPC::Error,0u>::dispatchAll((void *)a1, (atomic_uchar *volatile *)&v14);
  if (v15)
  {
    uint64_t result = v14;
    int v13 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::dispatchAll(void *__dst, atomic_uchar *volatile *a2)
{
  uint64_t v5 = __dst + 9;
  uint64_t v4 = (void *)__dst[9];
  char v20 = &v22;
  uint64_t v21 = 1;
  uint64_t v23 = (WTF::NativePromiseBase **)&v25;
  uint64_t v24 = 1;
  if (v4 == __dst + 11)
  {
    uint64_t v7 = *((unsigned int *)__dst + 21);
    memcpy(&v25, v4, 8 * v7);
  }
  else
  {
    __dst[9] = __dst + 11;
    uint64_t v23 = (WTF::NativePromiseBase **)v4;
    int v6 = *((_DWORD *)__dst + 20);
    LODWORD(v7) = *((_DWORD *)__dst + 21);
    *((_DWORD *)__dst + 20) = 1;
    LODWORD(v24) = v6;
  }
  *((_DWORD *)__dst + 21) = 0;
  HIDWORD(v24) = v7;
  WTF::VectorBuffer<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::FastMalloc>::adopt(v5, &v20);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v8);
  uint64_t v9 = __dst[12];
  char v20 = (uint64_t *)v9;
  uint64_t v10 = *((unsigned int *)__dst + 27);
  LODWORD(v21) = *((_DWORD *)__dst + 26);
  HIDWORD(v21) = v10;
  v19[0] = 0;
  __dst[12] = 0;
  v19[1] = 0;
  __dst[13] = 0;
  WTF::Vector<WTF::NativePromiseProducer<void,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v11);
  if (HIDWORD(v24))
  {
    int v13 = v23;
    uint64_t v14 = 8 * HIDWORD(v24);
    do
    {
      char v15 = *v13++;
      WTF::NativePromise<void,IPC::Error,0u>::ThenCallbackBase::dispatch(v15, (uint64_t)__dst, a2);
      v14 -= 8;
    }
    while (v14);
  }
  if (v10)
  {
    uint64_t v16 = 40 * v10;
    do
    {
      WTF::NativePromise<void,IPC::Error,0u>::settleChainedPromise((uint64_t)__dst, v9);
      v9 += 40;
      v16 -= 40;
    }
    while (v16);
  }
  WTF::Vector<WTF::NativePromiseProducer<void,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v12);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v17);
}

unsigned __int8 *WTF::NativePromise<void,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, atomic_uchar *volatile *a3)
{
  uint64_t v5 = a1;
  if (!*((void *)a1 + 2)
    || (int v6 = atomic_load((unsigned __int8 *)(a2 + 113)), v6 == 1)
    && (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(void))(**((void **)a1 + 2) + 24))(*((void *)a1 + 2)),
        a1))
  {
    if (*((unsigned char *)v5 + 56))
    {
      unint64_t v17 = (unsigned __int8 *)v5;
      uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
      if (*result) {
        BOOL v10 = result[16] >= 4u;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10) {
        return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)&v17, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
      }
    }
    else
    {
      atomic_uchar *volatile v11 = *a3;
      int v12 = 1;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
      }
      if (WTF::NativePromise<void,void,0u>::hasRunnable(a2))
      {
        WTF::NativePromise<void,void,0u>::takeResultRunnable(a2, &v17);
        (*(void (**)(unsigned char *__return_ptr))(*(void *)v17 + 16))(v16);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned char *))(*(void *)v5 + 24))(v5, a2, v16);
        int v13 = v17;
        unint64_t v17 = 0;
        if (v13) {
          (*(void (**)(unsigned __int8 *))(*(void *)v13 + 8))(v13);
        }
      }
      else
      {
        WTF::NativePromise<void,void,0u>::takeResult(a2, &v17, v15);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(void *)v5 + 24))(v5, a2, &v17);
      }
      char v14 = 0;
      uint64_t result = (unsigned __int8 *)*a3;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
      if (v14) {
        return (unsigned __int8 *)MEMORY[0x19972E8D0]();
      }
    }
  }
  else
  {
    uint64_t v7 = *((void *)v5 + 2);
    atomic_fetch_add((atomic_uint *volatile)v5 + 2, 1u);
    atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
    char v8 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
    *(void *)char v8 = &unk_1EE9EF018;
    *((void *)v8 + 1) = v5;
    *((void *)v8 + 2) = v5;
    *((void *)v8 + 3) = a2;
    unint64_t v17 = v8;
    (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)v7 + 16))(v7, &v17);
    uint64_t result = v17;
    unint64_t v17 = 0;
    if (result) {
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t *WTF::NativePromise<void,IPC::Error,0u>::settleChainedPromise(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v9 = v2;
  long long v3 = *(_OWORD *)(a2 + 24);
  long long v10 = *(_OWORD *)(a2 + 8);
  long long v11 = v3;
  if (v2)
  {
    atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = "<chained promise>";
    uint64_t v8 = 0;
    WTF::NativePromise<void,IPC::Error,0u>::settleAsChainedPromise<WTF::NativePromise<void,IPC::Error,0u>::Storage>((atomic_uchar *)v2, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v5);
    if (atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(v2 + 8));
      (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = "<chained promise>";
    uint64_t v8 = 0;
    WTF::NativePromise<void,IPC::Error,0u>::settleAsChainedPromise<WTF::NativePromise<void,IPC::Error,0u>::Storage>(0, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v5);
  }
  return WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(&v9);
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<void,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EF018;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  long long v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<void,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EF018;
  long long v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::NativePromise<void,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<void,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

unsigned __int8 *WTF::NativePromise<void,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[2];
  if (*(unsigned char *)(*a1 + 56))
  {
    long long v10 = (unsigned __int8 *)*a1;
    uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
    if (*result) {
      BOOL v4 = result[16] >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)&v10, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<void,void,0u>::hasRunnable(a1[2]);
    uint64_t v7 = a1[2];
    if (hasRunnable)
    {
      WTF::NativePromise<void,void,0u>::takeResultRunnable(a1[2], &v10);
      (*(void (**)(unsigned char *__return_ptr))(*(void *)v10 + 16))(v9);
      (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v1 + 24))(v1, v7, v9);
      uint64_t result = v10;
      long long v10 = 0;
      if (result) {
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
      }
    }
    else
    {
      WTF::NativePromise<void,void,0u>::takeResult(a1[2], &v10, v8);
      return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 **))(*(void *)v1 + 24))(v1, v7, &v10);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::settleAsChainedPromise<WTF::NativePromise<void,IPC::Error,0u>::Storage>(atomic_uchar *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = a1 + 48;
  int v12 = (WTF::Lock *)v7;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (atomic_uchar *)MEMORY[0x19972E8D0]();
  }
  uint64_t v8 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", (uint64_t)a1);
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,IPC::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,IPC::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<void,IPC::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,IPC::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>,(std::__variant_detail::_Trait)1>>((uint64_t)(a1 + 56), a2);
  WTF::NativePromise<void,IPC::Error,0u>::dispatchAll(a1);
  uint64_t result = (uint64_t)v12;
  int v11 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v12, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    return WTF::Lock::unlockSlow(v12);
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,IPC::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,IPC::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<void,IPC::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,IPC::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9EEB18[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1EE9EEB58[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN3IPC5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 8);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9EEB18[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

unsigned char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN3IPC5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(unsigned char **a1, unsigned char *a2, __int16 *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,IPC::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,IPC::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<void,IPC::Error>,std::experimental::fundamentals_v3::expected<void,IPC::Error>>(*a1, a2, a3);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvN3IPC5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,IPC::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,IPC::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>(*a1, a2, a3);
}

unsigned char *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,IPC::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,IPC::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<void,IPC::Error>,std::experimental::fundamentals_v3::expected<void,IPC::Error>>(unsigned char *result, unsigned char *a2, __int16 *a3)
{
  uint64_t v4 = result;
  uint64_t v5 = *((unsigned int *)result + 2);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      __int16 v6 = *a3;
      return std::optional<WebCore::PlatformMediaError>::swap[abi:sn180100](&v6, a2);
    }
    uint64_t result = (unsigned char *)((uint64_t (*)(char *, unsigned char *))off_1EE9EEB18[v5])(&v7, result);
  }
  *((_DWORD *)v4 + 2) = -1;
  *(_WORD *)uint64_t v4 = *a3;
  *((_DWORD *)v4 + 2) = 1;
  return result;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<void,IPC::Error,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<void,IPC::Error>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<void,IPC::Error> ()(void)>>(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = result;
  uint64_t v5 = result[2];
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1EE9EEB18[v5])(&v9, result);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    v4[2] = 2;
    return result;
  }
  __int16 v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    char v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (unsigned int *)v7();
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::SetMaximumBufferSize,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,IPC::Error>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EEB80;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::SetMaximumBufferSize,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,IPC::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9EEB80;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::RemoteSourceBufferProxy::SetMaximumBufferSize,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,IPC::Error>>::call@<X0>(uint64_t result@<X0>, __int16 *a2@<X8>)
{
  uint64_t v2 = *(void **)(result + 8);
  if (v2)
  {
    if (*v2)
    {
      *a2 = 0;
      return result;
    }
    __int16 v3 = 269;
  }
  else
  {
    __int16 v3 = 257;
  }
  *a2 = v3;
  return result;
}

uint64_t *WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<void,IPC::Error,0u>::assertIsDead(v2);
    __int16 v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<void WTF::NativePromise<void,IPC::Error,0u>::chainTo<void,void,16u>(WTF::NativePromiseProducer<void,void,16u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1},void,std::experimental::fundamentals_v3::expected<void,IPC::Error> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EEBA8;
  WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::NativePromise<void,IPC::Error,0u>::chainTo<void,void,16u>(WTF::NativePromiseProducer<void,void,16u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1},void,std::experimental::fundamentals_v3::expected<void,IPC::Error> &&>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9EEBA8;
  WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<void WTF::NativePromise<void,IPC::Error,0u>::chainTo<void,void,16u>(WTF::NativePromiseProducer<void,void,16u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1},void,std::experimental::fundamentals_v3::expected<void,IPC::Error> &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (*(unsigned char *)(a2 + 1))
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    __int16 v6 = "operator()";
    uint64_t v7 = 0;
    return WTF::NativePromiseProducer<void,void,16u>::reject<std::enable_if<true,void>>(v2, (WTF::NativePromiseBase *)&v4);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    __int16 v6 = "operator()";
    uint64_t v7 = 0;
    return WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v2, (WTF::NativePromiseBase *)&v4);
  }
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EF040;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9EEFC0;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9EF040;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9EEFC0;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(unsigned __int8 *)(a3 + 1);
  v16[0] = a1;
  uint64_t v7 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7) {
    BOOL v8 = v7[16] >= 4u;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    if (v6) {
      char v9 = "Rejecting";
    }
    else {
      char v9 = "Resolving";
    }
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [2]>((uint64_t)v7, 4u, v9, " then() call made from ", (WTF::Logger::LogSiteIdentifier *)(a1 + 24), "[", a2, " callback:", (uint64_t)v16, "]");
  }
  char v10 = 0;
  int v11 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
  if (v10) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  int v12 = *(uint64_t **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), a3);
  if (v12)
  {
    v16[0] = 0;
    v16[1] = 0;
    unsigned char v16[2] = "<chained completion promise>";
    __n128 v16[3] = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v12, (WTF::NativePromiseBase *)v16);
  }
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v12)
  {
    char v14 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v12);
    return WTF::fastFree((WTF *)v14, v15);
  }
  return result;
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(unsigned char *)(result + 56) = 1;
  return result;
}

uint64_t *WTF::NativePromise<void,IPC::Error,0u>::ThenCommand<WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<false,void>>::~ThenCommand(uint64_t *a1)
{
  uint64_t v2 = (WTF::NativePromiseBase *)a1[1];
  if (v2)
  {
    uint64_t v3 = *a1;
    a1[1] = 0;
    BOOL v8 = v2;
    WTF::NativePromise<void,IPC::Error,0u>::maybeSettle(v3, &v8, (WTF::Logger::LogSiteIdentifier *)(a1 + 2));
    uint64_t v4 = (unsigned int *)v8;
    BOOL v8 = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = (unsigned int *)a1[1];
    a1[1] = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
    }
  }
  else
  {
    a1[1] = 0;
  }
  int v6 = (unsigned int *)*a1;
  *a1 = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
  }
  return a1;
}

unsigned __int8 *WTF::NativePromise<void,IPC::Error,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  unint64_t v17 = v7;
  char v18 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  *(unsigned char *)(a1 + 112) = 1;
  uint64_t v16 = *a2;
  BOOL v15 = *(_DWORD *)(a1 + 64) == 0;
  uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v7);
  if (*result) {
    BOOL v9 = result[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    uint64_t result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [26],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [12],BOOL,char [2]>((uint64_t)result, 4u, a3, " invoking maybeSettle() [", a1, " callback:", (int)&v16, " isNothing:", (uint64_t)&v15, "]");
  }
  if (*(_DWORD *)(a1 + 64))
  {
    uint64_t result = WTF::NativePromise<void,IPC::Error,0u>::ThenCallbackBase::dispatch(*a2, a1, (atomic_uchar *volatile *)&v17);
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a1 + 84);
    if (v10 == *(_DWORD *)(a1 + 80))
    {
      uint64_t result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 72, v10 + 1, (unint64_t)a2);
      uint64_t v10 = *(unsigned int *)(a1 + 84);
      int v11 = v10 + 1;
      uint64_t v12 = *(void *)(a1 + 72);
      int v13 = *(WTF::NativePromiseBase **)result;
      *(void *)uint64_t result = 0;
    }
    else
    {
      int v11 = v10 + 1;
      uint64_t v12 = *(void *)(a1 + 72);
      int v13 = *a2;
      *a2 = 0;
    }
    *(void *)(v12 + 8 * v10) = v13;
    *(_DWORD *)(a1 + 84) = v11;
  }
  if (v18)
  {
    uint64_t result = (unsigned __int8 *)v17;
    int v14 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 != 1) {
      return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
    }
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::seekToTime(WTF::MediaTime const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v2 + 312), *(void *)(v2 + 320), &v11);
  uint64_t v3 = *(void *)(v11 + 32);
  uint64_t v4 = *(void *)(v2 + 336);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1391;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v5, a1 + 16);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  uint64_t v8 = v11;
  uint64_t v11 = 0;
  if (v8) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 24), v6);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::updateTrackIds(WTF::Vector<std::pair<unsigned long long,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9EEBF8;
  uint64_t v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::updateTrackIds(WTF::Vector<std::pair<unsigned long long,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EEBF8;
  uint64_t v3 = (WTF *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::updateTrackIds(WTF::Vector<std::pair<unsigned long long,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(v2 + 312), *(void *)(v2 + 320), &v14);
  uint64_t v3 = *(void *)(v14 + 32);
  uint64_t v4 = *(void *)(v2 + 336);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1405;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  BOOL v15 = v5;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a1 + 28));
  uint64_t v6 = *(unsigned int *)(a1 + 28);
  if (v6)
  {
    uint64_t v7 = *(uint64_t **)(a1 + 16);
    uint64_t v8 = &v7[2 * v6];
    do
    {
      IPC::ArgumentCoder<unsigned long long,void>::encode<IPC::Encoder>(v5, *v7);
      IPC::ArgumentCoder<unsigned long long,void>::encode<IPC::Encoder>(v5, v7[1]);
      v7 += 2;
    }
    while (v7 != v8);
  }
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v15, 0, 0);
  uint64_t result = v15;
  BOOL v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  uint64_t v11 = v14;
  uint64_t v14 = 0;
  if (v11) {
    return (IPC::Encoder *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 24), v9);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::SourceBufferPrivateClient::InitializationSegment::AudioTrackInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::SourceBufferPrivateClient::InitializationSegment::AudioTrackInformation>::destruct(*(unsigned int **)a1, (unsigned int *)(*(void *)a1 + 16 * v3));
  }
  uint64_t v4 = *(unsigned int **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

unsigned int *WTF::VectorDestructor<true,WebCore::SourceBufferPrivateClient::InitializationSegment::AudioTrackInformation>::destruct(unsigned int *result, unsigned int *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (unsigned int **)result;
    do
    {
      uint64_t v4 = v3[1];
      v3[1] = 0;
      if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
      }
      uint64_t result = *v3;
      WTF *v3 = 0;
      if (result)
      {
        if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result + 2);
          uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
        }
      }
      v3 += 2;
    }
    while (v3 != (unsigned int **)a2);
  }
  return result;
}

uint64_t WebKit::RemoteMediaDescription::create(WebKit::RemoteMediaDescription *this, const WebKit::MediaDescriptionInfo *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
  uint64_t result = WTF::String::isolatedCopy();
  *(_DWORD *)(v4 + 8) = 1;
  *(void *)(v4 + 16) = v6;
  *(void *)uint64_t v4 = &unk_1EE9EEC20;
  *(unsigned char *)(v4 + 24) = *((unsigned char *)a2 + 8);
  *(_WORD *)(v4 + 25) = *(_WORD *)((char *)a2 + 9);
  *(void *)this = v4;
  return result;
}

void WebKit::RemoteMediaDescription::~RemoteMediaDescription(WebKit::RemoteMediaDescription *this, WTF::StringImpl *a2)
{
  WebCore::MediaDescription::~MediaDescription(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::RemoteMediaDescription::isVideo(WebKit::RemoteMediaDescription *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t WebKit::RemoteMediaDescription::isAudio(WebKit::RemoteMediaDescription *this)
{
  return *((unsigned __int8 *)this + 25);
}

uint64_t WebKit::RemoteMediaDescription::isText(WebKit::RemoteMediaDescription *this)
{
  return *((unsigned __int8 *)this + 26);
}

void WebCore::MediaDescription::~MediaDescription(WebCore::MediaDescription *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9EEC58;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::memoryPressure(WTF::MediaTime const&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EEC90;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::memoryPressure(WTF::MediaTime const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EEC90;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::memoryPressure(WTF::MediaTime const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = *(atomic_uchar **)(v2 + 312);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(v2 + 320), &v13);
    if (v13)
    {
      unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v2 + 368));
      if ((v5 & 1) == 0)
      {
        unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v2 + 369));
        if ((v6 & 1) == 0)
        {
          uint64_t v7 = *(void *)(v13 + 32);
          uint64_t v8 = *(void *)(v2 + 336);
          BOOL v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)BOOL v9 = 1384;
          *((void *)v9 + 1) = v8;
          *((void *)v9 + 66) = (char *)v9 + 16;
          *((void *)v9 + 67) = 512;
          *((void *)v9 + 68) = 0;
          *((void *)v9 + 70) = 0;
          *((void *)v9 + 69) = 0;
          IPC::Encoder::encodeHeader(v9);
          uint64_t v14 = v9;
          IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v9, a1 + 24);
          IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v14, 0, 0);
          uint64_t result = (atomic_uchar *)v14;
          uint64_t v14 = 0;
          if (result)
          {
            IPC::Encoder::~Encoder((IPC::Encoder *)result, v4);
            uint64_t result = (atomic_uchar *)WTF::fastFree(v11, v12);
          }
        }
      }
      uint64_t v10 = v13;
      uint64_t v13 = 0;
      if (v10) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v10 + 24), v4);
      }
    }
  }
  return result;
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::minimumUpcomingPresentationTimeForTrackID(unsigned long long)::$_0,void>::call(uint64_t a1)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t result = *(atomic_uchar **)(v2 + 312);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(v2 + 320), &v27);
    if (v27)
    {
      unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v2 + 368));
      if (v5 & 1) != 0 || (unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v2 + 369)), (v6))
      {
LABEL_20:
        uint64_t v21 = v27;
        uint64_t v27 = 0;
        if (v21) {
          return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v21 + 24), v4);
        }
        return result;
      }
      uint64_t v7 = *(void *)(v27 + 32);
      uint64_t v24 = **(void **)(a1 + 16);
      uint64_t v8 = *(void *)(v2 + 336);
      uint64_t v31 = 0;
      IPC::Connection::createSyncMessageEncoder(3734, v8, &v31, &v30);
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v30, &v24);
      IPC::Connection::sendSyncMessage(v7, v31, (uint64_t *)&v30, 0, (uint64_t)&v28, INFINITY);
      if (v29)
      {
        if (v29 == 1)
        {
          v25[0] = (_BYTE)v28;
          int v9 = 1;
          int v26 = 1;
          int v10 = 1;
          goto LABEL_12;
        }
      }
      else
      {
        IPC::Decoder::decode<std::tuple<WTF::MediaTime>>(v28, (uint64_t)v25);
        if (!v25[16])
        {
          v25[0] = 13;
          int v9 = 1;
          int v26 = 1;
          int v10 = v29;
          if (v29 == -1)
          {
LABEL_13:
            uint64_t v14 = v30;
            int v30 = 0;
            if (v14)
            {
              IPC::Encoder::~Encoder(v14, v11);
              uint64_t v14 = (IPC::Encoder *)WTF::fastFree(v22, v23);
            }
            uint64_t v15 = WTF::MediaTime::invalidTime(v14);
            uint64_t v16 = (uint64_t *)&v25[8];
            unint64_t v17 = (uint64_t *)&v25[16];
            if (v9) {
              uint64_t v16 = (uint64_t *)v15;
            }
            uint64_t v18 = *v16;
            uint64_t v19 = *(void *)(a1 + 24);
            if (v9) {
              unint64_t v17 = (uint64_t *)(v15 + 8);
            }
            uint64_t v20 = *v17;
            *(void *)uint64_t v19 = v18;
            *(_DWORD *)(v19 + 8) = v20;
            *(unsigned char *)(v19 + 12) = BYTE4(v20);
            uint64_t result = (atomic_uchar *)((uint64_t (*)(IPC::Decoder **, unsigned char *))off_1EE9EECD0[v9])(&v28, v25);
            goto LABEL_20;
          }
LABEL_12:
          ((void (*)(void *, IPC::Decoder **))off_1EE9EE728[v10])(v32, &v28);
          goto LABEL_13;
        }
        char v12 = v25[0];
        v32[0] = *(void *)&v25[1];
        *(void *)((char *)v32 + 7) = *(void *)&v25[8];
        int v10 = v29;
        if (!v29)
        {
          int v9 = 0;
          uint64_t v13 = v28;
          uint64_t v28 = 0;
          *(void *)&v25[9] = v32[0];
          *(void *)&v25[16] = *(void *)((char *)v32 + 7);
          *(void *)uint64_t v25 = v13;
          v25[8] = v12;
          int v26 = 0;
          goto LABEL_12;
        }
      }
      std::__throw_bad_variant_access[abi:sn180100]();
    }
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteSourceBufferProxy41MinimumUpcomingPresentationTimeForTrackIDEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

void *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setMaximumQueueDepthForTrackID(unsigned long long,unsigned long long)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EECF0;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setMaximumQueueDepthForTrackID(unsigned long long,unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EECF0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SourceBufferPrivate,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::SourceBufferPrivateRemote::setMaximumQueueDepthForTrackID(unsigned long long,unsigned long long)::$_0,void>::call(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t result = *(atomic_uchar **)(v2 + 312);
  if (result)
  {
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(v2 + 320), &v19);
    if (v19)
    {
      unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v2 + 368));
      if ((v5 & 1) == 0)
      {
        unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v2 + 369));
        if ((v6 & 1) == 0)
        {
          uint64_t v7 = *(void *)(v19 + 32);
          uint64_t v9 = a1[3];
          uint64_t v8 = a1[4];
          uint64_t v10 = *(void *)(v2 + 336);
          uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)uint64_t v11 = 1399;
          *((void *)v11 + 1) = v10;
          *((void *)v11 + 66) = (char *)v11 + 16;
          *((void *)v11 + 67) = 512;
          *((void *)v11 + 68) = 0;
          *((void *)v11 + 70) = 0;
          *((void *)v11 + 69) = 0;
          IPC::Encoder::encodeHeader(v11);
          uint64_t v20 = v11;
          char v12 = (void *)IPC::Encoder::grow(v11, 8uLL, 8);
          if (v13 <= 7 || (void *v12 = v9, v14 = (void *)IPC::Encoder::grow(v11, 8uLL, 8), v15 <= 7))
          {
            __break(0xC471u);
            JUMPOUT(0x19912615CLL);
          }
          *uint64_t v14 = v8;
          IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v20, 0, 0);
          uint64_t result = (atomic_uchar *)v20;
          uint64_t v20 = 0;
          if (result)
          {
            IPC::Encoder::~Encoder((IPC::Encoder *)result, v4);
            uint64_t result = (atomic_uchar *)WTF::fastFree(v17, v18);
          }
        }
      }
      uint64_t v16 = v19;
      uint64_t v19 = 0;
      if (v16) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v16 + 24), v4);
      }
    }
  }
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,long long,WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(void *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5 = a5;
  unint64_t v7 = a3;
  int v10 = 0;
  v50[4] = *MEMORY[0x1E4F143B8];
  unint64_t v11 = a2;
  do
  {
    ++v10;
    BOOL v12 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v12);
  if ((a3 & 0x8000000000000000) != 0)
  {
    unint64_t v15 = -(uint64_t)a3;
    int v13 = 1;
    do
    {
      ++v13;
      BOOL v16 = v15 >= 0xA;
      v15 /= 0xAuLL;
    }
    while (v16);
  }
  else
  {
    int v13 = 0;
    unint64_t v14 = a3;
    do
    {
      ++v13;
      BOOL v12 = v14 > 9;
      v14 /= 0xAuLL;
    }
    while (v12);
  }
  int v17 = 0;
  unint64_t v18 = a4;
  do
  {
    ++v17;
    BOOL v12 = v18 > 9;
    v18 /= 0xAuLL;
  }
  while (v12);
  int v19 = 0;
  unint64_t v20 = a5;
  do
  {
    ++v19;
    BOOL v12 = v20 > 9;
    v20 /= 0xAuLL;
  }
  while (v12);
  uint64_t result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(14, v10, 15, v13, 19, v17, 12, v19, (uint64_t)v48, 2);
  if (v48[0]) {
    goto LABEL_56;
  }
  unsigned int v22 = v49;
  if (!v49)
  {
    uint64_t v47 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    *a1 = v47;
    return result;
  }
  if ((v49 & 0x80000000) != 0 || (uint64_t result = WTF::tryFastCompactMalloc((WTF *)(v49 + 20)), (v23 = v50[0]) == 0))
  {
LABEL_56:
    *a1 = 0;
    __break(0xC471u);
    return result;
  }
  uint64_t v24 = 0;
  *(_DWORD *)v50[0] = 2;
  *(_DWORD *)(v23 + 4) = v22;
  qmemcpy((void *)(v23 + 20), "{ contentSize:", 14);
  *(void *)(v23 + 8) = v23 + 20;
  *(_DWORD *)(v23 + 16) = 4;
  unint64_t v25 = a2;
  do
  {
    *((unsigned char *)&v50[3] + v24--) = (v25 % 0xA) | 0x30;
    BOOL v12 = v25 > 9;
    v25 /= 0xAuLL;
  }
  while (v12);
  if (v24 + 26 <= 25) {
    uint64_t result = (uint64_t)memcpy((void *)(v23 + 34), (char *)&v50[3] + v24 + 1, -v24);
  }
  unsigned int v26 = 0;
  do
  {
    ++v26;
    BOOL v12 = a2 > 9;
    a2 /= 0xAuLL;
  }
  while (v12);
  uint64_t v27 = (char *)(v23 + 34 + v26);
  qmemcpy(v27, " evictableData:", 15);
  uint64_t v28 = v27 + 15;
  uint64_t v29 = 0;
  if ((v7 & 0x8000000000000000) != 0)
  {
    unint64_t v33 = -(uint64_t)v7;
    do
    {
      *((unsigned char *)&v50[3] + v29--) = (v33 % 0xA) | 0x30;
      BOOL v12 = v33 > 9;
      v33 /= 0xAuLL;
    }
    while (v12);
    uint64_t v34 = v29 + 24;
    uint64_t v31 = (char *)&v50[3] + v29;
    *uint64_t v31 = 45;
    if (v29 + 26 <= 26)
    {
      if (v34 <= 24) {
        uint64_t v34 = 24;
      }
      size_t v32 = v34 - v29 - 23;
      goto LABEL_34;
    }
  }
  else
  {
    unint64_t v30 = v7;
    do
    {
      *((unsigned char *)&v50[3] + v29--) = (v30 % 0xA) | 0x30;
      BOOL v12 = v30 > 9;
      v30 /= 0xAuLL;
    }
    while (v12);
    if (v29 + 26 <= 25)
    {
      uint64_t v31 = (char *)&v50[3] + v29 + 1;
      size_t v32 = -v29;
LABEL_34:
      uint64_t result = (uint64_t)memcpy(v28, v31, v32);
    }
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
    unint64_t v36 = -(uint64_t)v7;
    unsigned int v35 = 1;
    do
    {
      ++v35;
      BOOL v16 = v36 >= 0xA;
      v36 /= 0xAuLL;
    }
    while (v16);
  }
  else
  {
    unsigned int v35 = 0;
    do
    {
      ++v35;
      BOOL v12 = v7 > 9;
      v7 /= 0xAuLL;
    }
    while (v12);
  }
  uint64_t v37 = 0;
  int v38 = &v28[v35];
  *(_OWORD *)int v38 = *(_OWORD *)" maximumBufferSize:";
  *(_DWORD *)(v38 + 15) = 979729001;
  unint64_t v39 = a4;
  do
  {
    *((unsigned char *)&v50[3] + v37--) = (v39 % 0xA) | 0x30;
    BOOL v12 = v39 > 9;
    v39 /= 0xAuLL;
  }
  while (v12);
  uint64_t v40 = v38 + 19;
  if (v37 + 26 <= 25) {
    uint64_t result = (uint64_t)memcpy(v40, (char *)&v50[3] + v37 + 1, -v37);
  }
  int v41 = 0;
  do
  {
    ++v41;
    BOOL v12 = a4 > 9;
    a4 /= 0xAuLL;
  }
  while (v12);
  uint64_t v42 = 0;
  int v43 = &v40[v41];
  *(void *)int v43 = *(void *)" numSamples:";
  *((_DWORD *)v43 + 2) = 980641132;
  unint64_t v44 = v5;
  do
  {
    *((unsigned char *)&v50[3] + v42--) = (v44 % 0xA) | 0x30;
    BOOL v12 = v44 > 9;
    v44 /= 0xAuLL;
  }
  while (v12);
  int v45 = v43 + 12;
  if (v42 + 26 <= 25) {
    uint64_t result = (uint64_t)memcpy(v45, (char *)&v50[3] + v42 + 1, -v42);
  }
  int v46 = 0;
  do
  {
    ++v46;
    BOOL v16 = v5 >= 0xA;
    v5 /= 0xAuLL;
  }
  while (v16);
  *(_WORD *)&v45[v46] = 32032;
  *a1 = v23;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateConfiguration(WebKit::TextTrackPrivateRemoteConfiguration &&)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateConfiguration(WebKit::TextTrackPrivateRemoteConfiguration &&)::$_1,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9EED40;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateConfiguration(WebKit::TextTrackPrivateRemoteConfiguration &&)::$_1,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9EED40;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateConfiguration(WebKit::TextTrackPrivateRemoteConfiguration &&)::$_1,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  WTF::AtomString::AtomString((WTF::AtomString *)&v5, (WTF::AtomStringImpl **)(a1 + 8));
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)a2 + 32))(a2, &v5);
  uint64_t result = v5;
  unint64_t v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateConfiguration(WebKit::TextTrackPrivateRemoteConfiguration &&)::$_2,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9EED68;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateConfiguration(WebKit::TextTrackPrivateRemoteConfiguration &&)::$_2,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9EED68;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateConfiguration(WebKit::TextTrackPrivateRemoteConfiguration &&)::$_2,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  WTF::AtomString::AtomString((WTF::AtomString *)&v5, (WTF::AtomStringImpl **)(a1 + 8));
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)a2 + 40))(a2, &v5);
  uint64_t result = v5;
  unint64_t v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::addGenericCue(WTF::Ref<WebCore::InbandGenericCue,WTF::RawPtrTraits<WebCore::InbandGenericCue>,WTF::DefaultRefDerefTraits<WebCore::InbandGenericCue>>)::$_0,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9EED90;
  a1[1] = 0;
  if (v3) {
    WTF::RefCounted<WebCore::InbandGenericCue>::deref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::addGenericCue(WTF::Ref<WebCore::InbandGenericCue,WTF::RawPtrTraits<WebCore::InbandGenericCue>,WTF::DefaultRefDerefTraits<WebCore::InbandGenericCue>>)::$_0,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9EED90;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::RefCounted<WebCore::InbandGenericCue>::deref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::addGenericCue(WTF::Ref<WebCore::InbandGenericCue,WTF::RawPtrTraits<WebCore::InbandGenericCue>,WTF::DefaultRefDerefTraits<WebCore::InbandGenericCue>>)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2))
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88);
    return v5(a2, v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateGenericCue(WTF::Ref<WebCore::InbandGenericCue,WTF::RawPtrTraits<WebCore::InbandGenericCue>,WTF::DefaultRefDerefTraits<WebCore::InbandGenericCue>>)::$_0,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9EEDB8;
  a1[1] = 0;
  if (v3) {
    WTF::RefCounted<WebCore::InbandGenericCue>::deref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateGenericCue(WTF::Ref<WebCore::InbandGenericCue,WTF::RawPtrTraits<WebCore::InbandGenericCue>,WTF::DefaultRefDerefTraits<WebCore::InbandGenericCue>>)::$_0,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9EEDB8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::RefCounted<WebCore::InbandGenericCue>::deref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateGenericCue(WTF::Ref<WebCore::InbandGenericCue,WTF::RawPtrTraits<WebCore::InbandGenericCue>,WTF::DefaultRefDerefTraits<WebCore::InbandGenericCue>>)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2))
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 96);
    return v5(a2, v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::removeGenericCue(WTF::Ref<WebCore::InbandGenericCue,WTF::RawPtrTraits<WebCore::InbandGenericCue>,WTF::DefaultRefDerefTraits<WebCore::InbandGenericCue>>)::$_0,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9EEDE0;
  a1[1] = 0;
  if (v3) {
    WTF::RefCounted<WebCore::InbandGenericCue>::deref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::removeGenericCue(WTF::Ref<WebCore::InbandGenericCue,WTF::RawPtrTraits<WebCore::InbandGenericCue>,WTF::DefaultRefDerefTraits<WebCore::InbandGenericCue>>)::$_0,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9EEDE0;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::RefCounted<WebCore::InbandGenericCue>::deref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::removeGenericCue(WTF::Ref<WebCore::InbandGenericCue,WTF::RawPtrTraits<WebCore::InbandGenericCue>,WTF::DefaultRefDerefTraits<WebCore::InbandGenericCue>>)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2))
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104);
    return v5(a2, v4);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::parseWebVTTFileHeader(WTF::String &&)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2))
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 112);
    return v5(a2, v4);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::parseWebVTTCueData(std::span<unsigned char const,18446744073709551615ul>)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2))
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  else
  {
    uint64_t v4 = *(uint64_t **)(a1 + 8);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 120);
    return v7(a2, v5, v6);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::parseWebVTTCueDataStruct(WebCore::ISOWebVTTCue &&)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2))
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 128);
    return v5(a2, v4);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::addDataCue(WTF::MediaTime &&,WTF::MediaTime &,std::span<unsigned char const,18446744073709551615ul>)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(void *a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2))
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  else
  {
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
    uint64_t v6 = (uint64_t *)a1[3];
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 56);
    return v9(a2, v4, v5, v7, v8);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::addDataCueWithType(WTF::MediaTime &&,WTF::MediaTime &,WebCore::SerializedPlatformDataCueValue &&,WTF::String &&)::$_0,void,WTF::MediaTime &&::TrackPrivateBaseClient &>::call(void *a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2))
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  else
  {
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
    WebCore::SerializedPlatformDataCue::create();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void))(*(void *)a2 + 64))(a2, v4, v5, &v7, a1[4]);
    uint64_t result = v7;
    uint64_t v7 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      else {
        --*(_DWORD *)(result + 8);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::updateDataCue(WTF::MediaTime &&,WTF::MediaTime &,WebCore::SerializedPlatformDataCueValue &&)::$_0,void,WTF::MediaTime &&::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2))
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    WebCore::SerializedPlatformDataCue::create();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, v4, v5);
    uint64_t result = (uint64_t)v7;
    if (v7)
    {
      if (v7[2] == 1) {
        return (*(uint64_t (**)())(*(void *)v7 + 8))();
      }
      else {
        --v7[2];
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::TextTrackPrivateRemote::removeDataCue(WTF::MediaTime &&,WTF::MediaTime &,WebCore::SerializedPlatformDataCueValue &&)::$_0,void,WTF::MediaTime &&::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2))
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    WebCore::SerializedPlatformDataCue::create();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 80))(a2, v4, v5);
    uint64_t result = (uint64_t)v7;
    if (v7)
    {
      if (v7[2] == 1) {
        return (*(uint64_t (**)())(*(void *)v7 + 8))();
      }
      else {
        --v7[2];
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoTrackPrivateRemote::updateConfiguration(WebKit::VideoTrackPrivateRemoteConfiguration &&)::$_0,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::VideoTrackPrivateRemote::updateConfiguration(WebKit::VideoTrackPrivateRemoteConfiguration &&)::$_1,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9EEF48;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoTrackPrivateRemote::updateConfiguration(WebKit::VideoTrackPrivateRemoteConfiguration &&)::$_1,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9EEF48;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::VideoTrackPrivateRemote::updateConfiguration(WebKit::VideoTrackPrivateRemoteConfiguration &&)::$_1,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  WTF::AtomString::AtomString((WTF::AtomString *)&v5, (WTF::AtomStringImpl **)(a1 + 8));
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)a2 + 32))(a2, &v5);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::VideoTrackPrivateRemote::updateConfiguration(WebKit::VideoTrackPrivateRemoteConfiguration &&)::$_2,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9EEF70;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoTrackPrivateRemote::updateConfiguration(WebKit::VideoTrackPrivateRemoteConfiguration &&)::$_2,void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9EEF70;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::VideoTrackPrivateRemote::updateConfiguration(WebKit::VideoTrackPrivateRemoteConfiguration &&)::$_2,void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  WTF::AtomString::AtomString((WTF::AtomString *)&v5, (WTF::AtomStringImpl **)(a1 + 8));
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)a2 + 40))(a2, &v5);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebMediaStrategy::createAudioDestination(WebCore::AudioIOCallback &,WTF::String const&,unsigned int,unsigned int,float)::$_0,WTF::Ref<WebCore::AudioDestination,WTF::RawPtrTraits<WebCore::AudioDestination>,WTF::DefaultRefDerefTraits<WebCore::AudioDestination>>,WebCore::AudioIOCallback &>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9EEF98;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebMediaStrategy::createAudioDestination(WebCore::AudioIOCallback &,WTF::String const&,unsigned int,unsigned int,float)::$_0,WTF::Ref<WebCore::AudioDestination,WTF::RawPtrTraits<WebCore::AudioDestination>,WTF::DefaultRefDerefTraits<WebCore::AudioDestination>>,WebCore::AudioIOCallback &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9EEF98;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebMediaStrategy::createAudioDestination(WebCore::AudioIOCallback &,WTF::String const&,unsigned int,unsigned int,float)::$_0,WTF::Ref<WebCore::AudioDestination,WTF::RawPtrTraits<WebCore::AudioDestination>,WTF::DefaultRefDerefTraits<WebCore::AudioDestination>>,WebCore::AudioIOCallback &>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = (_DWORD **)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 16);
  uint64_t v7 = WTF::fastMalloc((WTF *)0x100);
  uint64_t result = WebKit::RemoteAudioDestinationProxy::RemoteAudioDestinationProxy(v7, a2, v5, v6);
  *a3 = result;
  return result;
}

WebKit::RemoteAudioSourceProviderManager *WebKit::RemoteAudioSourceProviderManager::RemoteAudioSourceProviderManager(WebKit::RemoteAudioSourceProviderManager *this)
{
  *(void *)this = &unk_1EE9B71B0;
  *((void *)this + 1) = 0;
  uint64_t v2 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_1994F5F10;
  *(void *)(v2 + 24) = this;
  *((void *)this + 2) = v2;
  *(void *)this = &unk_1EE9EF070;
  WTF::WorkQueue::create();
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  return this;
}

void WebKit::RemoteAudioSourceProviderManager::~RemoteAudioSourceProviderManager(WebKit::RemoteAudioSourceProviderManager *this, void *a2)
{
  *(void *)this = &unk_1EE9EF070;
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (WebCore::WebAudioBufferList ***)(v3 + 8);
      do
      {
        if (*(v5 - 1) != (WebCore::WebAudioBufferList **)-1)
        {
          int v6 = *v5;
          WTF::StringImpl *v5 = 0;
          if (v6) {
            std::default_delete<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>::operator()[abi:sn180100](v6);
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v7 = (atomic_uchar *volatile *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v7)
  {
    char v8 = 0;
    atomic_uchar *volatile v9 = *v7;
    atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
    if (v8) {
      MEMORY[0x19972E8D0](v9);
    }
    uint64_t v10 = *((void *)v9 + 1);
    uint64_t v11 = v10 - 1;
    *((void *)v9 + 1) = v10 - 1;
    if (v10 == 1)
    {
      uint64_t v17 = *((void *)v9 + 2);
      uint64_t v13 = *((void *)v9 + 3);
      *((void *)v9 + 3) = 0;
      BOOL v12 = v17 == 0;
    }
    else
    {
      BOOL v12 = 0;
      uint64_t v13 = 0;
    }
    int v14 = 1;
    atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 == 1)
    {
      if (v11) {
        goto LABEL_18;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      if (v11) {
        goto LABEL_18;
      }
    }
    uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v15 = &unk_1EE9B37E8;
    *(void *)(v15 + 8) = v9;
    *(void *)(v15 + 16) = v13;
    *(unsigned char *)(v15 + 24) = v12;
    uint64_t v18 = v15;
    WTF::ensureOnMainRunLoop();
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
LABEL_18:
  uint64_t v16 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 56))(v16);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteAudioSourceProviderManager::~RemoteAudioSourceProviderManager(this, a2);

  WTF::fastFree(v2, v3);
}

void WebKit::RemoteAudioSourceProviderManager::setConnection(WebKit::RemoteAudioSourceProviderManager *this, atomic_uchar *volatile *a2)
{
  uint64_t v4 = (atomic_uchar *volatile **)((char *)this + 32);
  uint64_t v3 = (IPC::Connection *)*((void *)this + 4);
  if (v3 != (IPC::Connection *)a2)
  {
    if (v3) {
      IPC::Connection::removeWorkQueueMessageReceiver((uint64_t)v3, 0x3Bu, 0);
    }
    WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::operator=(v4, a2);
    int v6 = *v4;
    if (*v4)
    {
      uint64_t v7 = *((void *)this + 3);
      IPC::Connection::addWorkQueueMessageReceiver((uint64_t)v6, 0x3Bu, v7, (uint64_t)this, 0);
    }
  }
}

uint64_t WebKit::RemoteAudioSourceProviderManager::addProvider(uint64_t a1, uint64_t *a2)
{
  {
    atomic_uchar *volatile v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v9);
  }
  uint64_t v4 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WebKit::RemoteAudioSourceProviderManager::setConnection((WebKit::RemoteAudioSourceProviderManager *)a1, *(atomic_uchar *volatile **)(v4 + 32));
  uint64_t v5 = *(void *)(a1 + 24);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v7 = &unk_1EE9EF740;
  v7[1] = a1;
  v7[2] = a1;
  v7[3] = v6;
  uint64_t v10 = v7;
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, &v10);
  uint64_t result = (uint64_t)v10;
  uint64_t v10 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::RemoteAudioSourceProviderManager::removeProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 16));
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v5 = &unk_1EE9EF768;
  v5[1] = a1;
  v5[2] = a1;
  v5[3] = a2;
  uint64_t v7 = v5;
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 32))(v4, &v7);
  uint64_t result = (uint64_t)v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void WebKit::RemoteAudioSourceProviderManager::audioStorageChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v6, a2);
  if (v6) {
    uint64_t v8 = v6 + 16 * *(unsigned int *)(v6 - 4);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 == v7)
  {
    uint64_t v16 = qword_1EB358078;
    if (os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v21 = 134217984;
      *(void *)&void v21[4] = a2;
      _os_log_error_impl(&dword_1985F2000, v16, OS_LOG_TYPE_ERROR, "Unable to find provider %llu for storageChanged", v21, 0xCu);
    }
  }
  else
  {
    uint64_t v9 = *(void *)(v7 + 8);
    std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((WebCore::WebAudioBufferList **)(v9 + 104), 0);
    WebCore::SharedMemoryHandle::takeOwnershipOfMemory();
    WebKit::ConsumerSharedCARingBuffer::map((WebCore::CAAudioStreamDescription *)a4, (WebCore::CARingBuffer **)v21);
    uint64_t v10 = *(WebCore::CARingBuffer **)(v9 + 96);
    uint64_t v11 = *(void *)v21;
    *(void *)uint64_t v21 = 0;
    *(void *)(v9 + 96) = v11;
    if (v10)
    {
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](v9 + 96, v10);
      BOOL v12 = *(WebCore::CARingBuffer **)v21;
      *(void *)uint64_t v21 = 0;
      if (v12) {
        std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)v21, v12);
      }
      uint64_t v11 = *(void *)(v9 + 96);
    }
    if (v11)
    {
      if (*(unsigned char *)(v9 + 88))
      {
        long long v13 = *(_OWORD *)(a4 + 8);
        long long v14 = *(_OWORD *)(a4 + 24);
        *(void *)(v9 + 48) = *(void *)(a4 + 40);
        *(_OWORD *)(v9 + 16) = v13;
        *(_OWORD *)(v9 + 32) = v14;
        long long v15 = *(_OWORD *)(a4 + 48);
        *(void *)(v9 + 72) = *(void *)(a4 + 64);
        *(_OWORD *)(v9 + 56) = v15;
        *(_DWORD *)(v9 + 80) = *(_DWORD *)(a4 + 72);
      }
      else
      {
        *(void *)(v9 + 8) = MEMORY[0x1E4FB6B98] + 16;
        *(_OWORD *)(v9 + 16) = *(_OWORD *)(a4 + 8);
        long long v17 = *(_OWORD *)(a4 + 24);
        long long v18 = *(_OWORD *)(a4 + 40);
        long long v19 = *(_OWORD *)(a4 + 56);
        *(_DWORD *)(v9 + 80) = *(_DWORD *)(a4 + 72);
        *(_OWORD *)(v9 + 48) = v18;
        *(_OWORD *)(v9 + 64) = v19;
        *(_OWORD *)(v9 + 32) = v17;
        *(unsigned char *)(v9 + 88) = 1;
      }
      unint64_t v20 = (WebCore::WebAudioBufferList *)WTF::fastMalloc((WTF *)0x48);
      MEMORY[0x1997346F0](v20, a4);
      std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((WebCore::WebAudioBufferList **)(v9 + 104), v20);
    }
  }
}

void WebKit::RemoteAudioSourceProviderManager::audioSamplesAvailable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v6, a2);
  if (v6) {
    uint64_t v8 = v6 + 16 * *(unsigned int *)(v6 - 4);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 == v7)
  {
    BOOL v12 = qword_1EB358078;
    if (!os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v16 = 134217984;
    uint64_t v17 = a2;
    long long v13 = "Unable to find provider %llu for audioSamplesAvailable";
LABEL_18:
    _os_log_error_impl(&dword_1985F2000, v12, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v16, 0xCu);
    return;
  }
  uint64_t v9 = *(uint64_t **)(v7 + 8);
  if (!v9[13])
  {
    BOOL v12 = qword_1EB358078;
    if (!os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_ERROR)) {
      return;
    }
    uint64_t v14 = *(void *)(*v9 + 248);
    int v16 = 134217984;
    uint64_t v17 = v14;
    long long v13 = "buffer for audio provider %llu is null";
    goto LABEL_18;
  }
  if (!*((unsigned char *)v9 + 88)) {
    goto LABEL_20;
  }
  if ((WebCore::WebAudioBufferList::isSupportedDescription() & 1) == 0)
  {
    BOOL v12 = qword_1EB358078;
    if (!os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_ERROR)) {
      return;
    }
    uint64_t v15 = *(void *)(*v9 + 248);
    int v16 = 134217984;
    uint64_t v17 = v15;
    long long v13 = "Unable to support description with given number of frames for audio provider %llu";
    goto LABEL_18;
  }
  WebCore::WebAudioBufferList::setSampleCount((WebCore::WebAudioBufferList *)v9[13]);
  WebCore::CARingBuffer::fetch();
  if (!*((unsigned char *)v9 + 88)) {
LABEL_20:
  }
    __break(1u);
  uint64_t v10 = v9[13];
  uint64_t v11 = *v9;

  MEMORY[0x1F4171A00](v11, v10, v9 + 1, a4);
}

uint64_t WebKit::RemoteImageDecoderAVFManager::ensureGPUProcessConnection(WebKit::RemoteImageDecoderAVFManager *this)
{
  uint64_t v3 = (char *)this + 40;
  uint64_t v2 = (atomic_uchar *)*((void *)this + 5);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v2, *((void *)this + 6), &v14);
    uint64_t v5 = v14;
    if (v14)
    {
      uint64_t v14 = 0;
LABEL_13:
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 24), v4);
      return v5;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  {
    long long v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v7 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  char v8 = 0;
  uint64_t v9 = *(void *)(v7 + 24);
  int v10 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    MEMORY[0x19972E8D0](v9);
  }
  ++*(void *)(v9 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
  uint64_t v11 = v14;
  uint64_t v14 = v7;
  if (v11) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 24), v6);
  }
  WTF::ThreadSafeWeakPtr<WebKit::GPUProcessConnection>::operator=<WebKit::GPUProcessConnection>((uint64_t)v3, &v14);
  WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v14 + 184, (uint64_t)this);
  char v16 = 88;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)(v14 + 40), &v16, (uint64_t)this + 8, &v15);
  uint64_t v5 = v14;
  uint64_t v14 = 0;
  if (v5) {
    goto LABEL_13;
  }
  return v5;
}

void WebKit::RemoteImageDecoderAVF::~RemoteImageDecoderAVF(WebKit::RemoteImageDecoderAVF *this, void *a2)
{
  uint64_t v4 = (uint64_t *)((char *)this + 48);
  uint64_t v3 = *((void *)this + 6);
  uint64_t v5 = (void *)*((void *)this + 5);
  uint64_t v6 = v5 + 4;
  uint64_t v7 = v5[4];
  if (v7)
  {
    unsigned int v8 = *(_DWORD *)(v7 - 8);
    unint64_t v9 = (v3 + ~(v3 << 32)) ^ ((unint64_t)(v3 + ~(v3 << 32)) >> 22);
    unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    uint64_t v12 = v8 & ((v11 >> 31) ^ v11);
    uint64_t v13 = *(void *)(v7 + 16 * v12);
    if (v13 != v3)
    {
      int v14 = 1;
      while (v13)
      {
        uint64_t v12 = (v12 + v14) & v8;
        uint64_t v13 = *(void *)(v7 + 16 * v12);
        ++v14;
        if (v13 == v3) {
          goto LABEL_8;
        }
      }
      uint64_t v12 = *(unsigned int *)(v7 - 4);
    }
LABEL_8:
    if (v12 != *(_DWORD *)(v7 - 4))
    {
      uint64_t v15 = (void *)(v7 + 16 * v12);
      char v16 = (unsigned int *)v15[1];
      v15[1] = 0;
      uint64_t v17 = *v6;
      if (!*v6 || (v17 += 16 * *(unsigned int *)(v17 - 4), (void *)v17 != v15))
      {
        if ((void *)v17 != v15)
        {
          *uint64_t v15 = -1;
          v15[1] = 0;
          ++*(_DWORD *)(*v6 - 16);
          uint64_t v18 = *v6;
          int v19 = *v6 ? *(_DWORD *)(v18 - 12) - 1 : -1;
          *(_DWORD *)(v18 - 12) = v19;
          uint64_t v20 = *v6;
          if (*v6)
          {
            unsigned int v21 = 6 * *(_DWORD *)(v20 - 12);
            unsigned int v22 = *(_DWORD *)(v20 - 4);
            if (v21 < v22 && v22 >= 9) {
              WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v6, v22 >> 1, 0);
            }
          }
        }
      }
      if (v16 && atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, a2);
      }
    }
  }
  uint64_t v24 = (atomic_uchar *)v5[5];
  if (v24)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v24, v5[6], &v42);
    if (v42)
    {
      uint64_t v25 = *(void *)(v42 + 32);
      unsigned int v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unsigned int v26 = 1127;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 66) = (char *)v26 + 16;
      *((void *)v26 + 67) = 512;
      *((void *)v26 + 68) = 0;
      *((void *)v26 + 70) = 0;
      *((void *)v26 + 69) = 0;
      IPC::Encoder::encodeHeader(v26);
      int v43 = v26;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v26, v4);
      IPC::Connection::sendMessageImpl(v25, (uint64_t *)&v43, 0, 0);
      uint64_t v27 = v43;
      int v43 = 0;
      if (v27)
      {
        IPC::Encoder::~Encoder(v27, a2);
        WTF::fastFree(v40, v41);
      }
      uint64_t v28 = v42;
      uint64_t v42 = 0;
      if (v28) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v28 + 24), a2);
      }
    }
  }
  uint64_t v29 = (WTF *)*((void *)this + 12);
  if (v29)
  {
    *((void *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v29, a2);
  }
  uint64_t v30 = *((void *)this + 11);
  if (v30)
  {
    uint64_t v31 = *(unsigned int *)(v30 - 4);
    if (v31)
    {
      size_t v32 = (const void **)(v30 + 8);
      do
      {
        if (*((_DWORD *)v32 - 2) != 2147483646)
        {
          unint64_t v33 = *v32;
          void *v32 = 0;
          if (v33) {
            CFRelease(v33);
          }
        }
        v32 += 2;
        --v31;
      }
      while (v31);
    }
    WTF::fastFree((WTF *)(v30 - 16), a2);
  }
  uint64_t v34 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  unsigned int v35 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2) {
      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v35 -= 2;
    }
  }
  unint64_t v36 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2) {
      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v36 -= 2;
    }
  }
  uint64_t v37 = (atomic_uchar *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v37) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v37, a2);
  }
  uint64_t v38 = *((void *)this + 2);
  if (v38)
  {
    *(void *)(v38 + 8) = 0;
    unint64_t v39 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v39 && atomic_fetch_add((atomic_uint *volatile)v39, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v39);
      WTF::fastFree((WTF *)v39, a2);
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }

  MEMORY[0x1F416CEE0](this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteImageDecoderAVF::~RemoteImageDecoderAVF(this, a2);

  WTF::fastFree(v2, v3);
}

BOOL WebKit::RemoteImageDecoderAVF::canDecodeType(WebKit::RemoteImageDecoderAVF *this, const WTF::String *a2)
{
  uint64_t v3 = (WebCore::MIMETypeCache *)WebCore::AVAssetMIMETypeCache::singleton(this);
  return WebCore::MIMETypeCache::canDecodeType(v3, this) != 0;
}

uint64_t WebKit::RemoteImageDecoderAVF::supportsMediaType(WebCore::AVAssetMIMETypeCache *a1)
{
  if (a1 != 1) {
    return 0;
  }
  uint64_t v2 = WebCore::AVAssetMIMETypeCache::singleton(a1);
  return MEMORY[0x1F4175578](v2);
}

uint64_t WebKit::RemoteImageDecoderAVF::encodedDataStatus(WebKit::RemoteImageDecoderAVF *this)
{
  if (*((void *)this + 14)) {
    return 4;
  }
  if (*((unsigned char *)this + 128)) {
    return 3;
  }
  if (*((unsigned char *)this + 132)) {
    return 2;
  }
  return 1;
}

uint64_t WebKit::RemoteImageDecoderAVF::setEncodedDataStatusChangeCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v3;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WebKit::RemoteImageDecoderAVF::size(WebKit::RemoteImageDecoderAVF *this)
{
  if (*((unsigned char *)this + 128)) {
    return *((void *)this + 15);
  }
  else {
    return 0;
  }
}

uint64_t WebKit::RemoteImageDecoderAVF::frameCount(WebKit::RemoteImageDecoderAVF *this)
{
  return *((void *)this + 14);
}

uint64_t WebKit::RemoteImageDecoderAVF::repetitionCount(WebKit::RemoteImageDecoderAVF *this)
{
  if (*((void *)this + 14) <= 1uLL) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t WebKit::RemoteImageDecoderAVF::uti@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 64);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WebKit::RemoteImageDecoderAVF::filenameExtension(WebKit::RemoteImageDecoderAVF *this)
{
  return MEMORY[0x1F416E9B0]((char *)this + 56);
}

uint64_t WebKit::RemoteImageDecoderAVF::frameSizeAtIndex(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128)) {
    return *(void *)(a1 + 120);
  }
  else {
    return 0;
  }
}

BOOL WebKit::RemoteImageDecoderAVF::frameIsCompleteAtIndex(WebKit::RemoteImageDecoderAVF *this, unint64_t a2)
{
  return *((void *)this + 14) > a2;
}

double WebKit::RemoteImageDecoderAVF::frameDurationAtIndex(WebKit::RemoteImageDecoderAVF *this, unint64_t a2)
{
  unint64_t v2 = *((unsigned int *)this + 27);
  double result = 0.0;
  if (v2) {
    BOOL v4 = v2 > a2;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    return *(double *)(*((void *)this + 12) + 16 * a2 + 8);
  }
  return result;
}

BOOL WebKit::RemoteImageDecoderAVF::frameHasAlphaAtIndex(WebKit::RemoteImageDecoderAVF *this, unint64_t a2)
{
  unint64_t v2 = *((unsigned int *)this + 27);
  if (v2) {
    BOOL v3 = v2 > a2;
  }
  else {
    BOOL v3 = 0;
  }
  return v3 && *(unsigned char *)(*((void *)this + 12) + 16 * a2) != 0;
}

uint64_t WebKit::RemoteImageDecoderAVF::frameBytesAtIndex(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128)) {
    unint64_t v1 = *(void *)(a1 + 120);
  }
  else {
    unint64_t v1 = 0;
  }
  unint64_t v2 = HIDWORD(v1);
  if ((v1 & 0x80000000) != 0) {
    LODWORD(v1) = -(int)v1;
  }
  if ((v2 & 0x80000000) != 0) {
    LODWORD(v2) = -(int)v2;
  }
  unint64_t v3 = v1 * (unint64_t)v2;
  if ((v3 & 0xFFFFFFFF00000000) != 0 || v3 >> 30)
  {
    __break(0xC471u);
    JUMPOUT(0x199128788);
  }
  return (4 * v3);
}

void *WebKit::RemoteImageDecoderAVF::createFrameImageAtIndex@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v3 = a2;
  uint64_t v12 = a2;
  uint64_t v6 = *(void *)(a1 + 88);
  if (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<int>>,int>(v6, a2))
  {
    return WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<int>>,int>(a3, v6, v3);
  }
  else
  {
    unsigned int v8 = (void *)WTF::fastMalloc((WTF *)0x18);
    *unsigned int v8 = &unk_1EE9EF790;
    v8[1] = a1;
    v8[2] = &v12;
    unint64_t v11 = v8;
    WTF::callOnMainRunLoopAndWait();
    if (v11) {
      (*(void (**)(void *))(*v11 + 8))(v11);
    }
    int v9 = v12;
    uint64_t v10 = *(void *)(a1 + 88);
    double result = (void *)WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<int>>,int>(v10, v12);
    if (result) {
      return WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<int>>,int>(a3, v10, v9);
    }
    else {
      *a3 = 0;
    }
  }
  return result;
}

atomic_uchar *WebKit::RemoteImageDecoderAVF::setExpectedContentSize(WebKit::RemoteImageDecoderAVF *this, uint64_t a2)
{
  double result = (atomic_uchar *)*((void *)this + 3);
  if (result)
  {
    double result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 4), &v11);
    if (v11)
    {
      uint64_t v5 = *(void *)(v11 + 32);
      uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v6 = 1128;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 66) = (char *)v6 + 16;
      *((void *)v6 + 67) = 512;
      *((void *)v6 + 68) = 0;
      *((void *)v6 + 70) = 0;
      *((void *)v6 + 69) = 0;
      IPC::Encoder::encodeHeader(v6);
      uint64_t v12 = v6;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, (uint64_t *)this + 6);
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v6, a2);
      IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v12, 0, 0);
      double result = (atomic_uchar *)v12;
      uint64_t v12 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v7);
        double result = (atomic_uchar *)WTF::fastFree(v9, v10);
      }
      uint64_t v8 = v11;
      uint64_t v11 = 0;
      if (v8) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v8 + 24), v7);
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::RemoteImageDecoderAVF::setData(WebKit::RemoteImageDecoderAVF *this, const WebCore::FragmentedSharedBuffer *a2, char a3)
{
  double result = (atomic_uchar *)*((void *)this + 3);
  if (!result) {
    return result;
  }
  double result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 4), &v86);
  if (!v86) {
    return result;
  }
  uint64_t v9 = *(void *)(v86 + 32);
  uint64_t v10 = (WebKit::RemoteImageDecoderAVF *)((char *)this + 48);
  uint64_t v76 = *((void *)a2 + 6);
  int v77 = (atomic_uchar *)a2;
  atomic_fetch_add((atomic_uint *volatile)a2, 1u);
  v78 = 0;
  uint64_t v90 = 0;
  IPC::Connection::createSyncMessageEncoder(3713, 0, &v90, &v89);
  uint64_t v11 = v89;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v89, (uint64_t *)this + 6);
  IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode(v11, (IPC::SharedBufferReference *)&v76);
  uint64_t v12 = (unsigned char *)IPC::Encoder::grow(v11, 1uLL, 1);
  if (!v13) {
    goto LABEL_121;
  }
  unsigned char *v12 = a3;
  IPC::Connection::sendSyncMessage(v9, v90, (uint64_t *)&v89, 0, (uint64_t)&v87, INFINITY);
  int v15 = v88;
  if (!v88)
  {
    char v16 = v87;
    unint64_t v17 = v87[1];
    unint64_t v18 = *v87;
    unint64_t v19 = ((v87[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v87;
    if (v17 < v19 || v17 - v19 <= 7)
    {
      unint64_t v24 = 0;
      unint64_t v25 = 0;
      *int v87 = 0;
      v16[1] = 0;
      unint64_t v54 = v16[3];
      if (v54)
      {
        if (v17)
        {
LABEL_67:
          (*(void (**)(unint64_t))(*(void *)v54 + 16))(v54);
LABEL_97:
          unint64_t v25 = *v16;
          unint64_t v24 = v16[1];
          goto LABEL_98;
        }
        goto LABEL_71;
      }
      goto LABEL_98;
    }
    unsigned int v21 = (uint64_t *)(v18 + v19);
    v87[2] = (unint64_t)(v21 + 1);
    if (!v18)
    {
      unint64_t v24 = v17;
      unint64_t v25 = 0;
      goto LABEL_98;
    }
    uint64_t v3 = *v21;
    unsigned int v22 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(v16);
    if (!v23) {
      goto LABEL_97;
    }
    unint64_t v24 = v16[1];
    unint64_t v25 = *v16;
    unint64_t v26 = v16[2] - *v16;
    if (v24 <= v26)
    {
      unint64_t v55 = 0;
      *char v16 = 0;
      v16[1] = 0;
      unint64_t v56 = v16[3];
      if (v56)
      {
        if (v24)
        {
          (*(void (**)(unint64_t))(*(void *)v56 + 16))(v56);
          unint64_t v55 = v16[1];
        }
        else
        {
          unint64_t v55 = 0;
        }
      }
    }
    else
    {
      uint64_t v27 = (unsigned __int8 *)(v25 + v26);
      unsigned char v16[2] = (unint64_t)(v27 + 1);
      if (v25)
      {
        unsigned int v28 = *v27;
        if (v28 >= 2) {
          goto LABEL_98;
        }
        BOOL v4 = v28 != 0;
        if (v24 <= (unint64_t)&v27[-v25 + 1])
        {
          unint64_t v57 = 0;
          *char v16 = 0;
          v16[1] = 0;
          unint64_t v58 = v16[3];
          if (v58)
          {
            (*(void (**)(unint64_t))(*(void *)v58 + 16))(v58);
            unint64_t v57 = 0;
            unint64_t v73 = *v16;
            unint64_t v74 = v16[1];
            unint64_t v75 = v16[3];
            *char v16 = 0;
            v16[1] = 0;
            if (v75)
            {
              if (v74)
              {
                (*(void (**)(unint64_t, unint64_t))(*(void *)v75 + 16))(v75, v73);
                unint64_t v57 = v16[1];
              }
            }
          }
        }
        else
        {
          uint64_t v29 = v27 + 2;
          unsigned char v16[2] = (unint64_t)(v27 + 2);
          unsigned int v30 = v27[1];
          if (v30 < 2)
          {
            uint64_t v11 = (IPC::Encoder *)v22;
            if (!v30)
            {
              if (!v88)
              {
                unint64_t v39 = v87;
                int v87 = 0;
                LOBYTE(v82) = 0;
                *(void *)&long long v79 = v39;
                *((void *)&v79 + 1) = v3;
                int v80 = v22;
                BOOL v81 = v28 != 0;
                unsigned __int8 v84 = 0;
                goto LABEL_38;
              }
              goto LABEL_108;
            }
            unint64_t v31 = ((unint64_t)(v29 + 7) & 0xFFFFFFFFFFFFFFF8) - v25;
            if (v24 < v31 || v24 - v31 <= 7)
            {
              *char v16 = 0;
              v16[1] = 0;
              unint64_t v59 = v16[3];
              if (v59)
              {
                (*(void (**)(unint64_t))(*(void *)v59 + 16))(v59);
                unint64_t v60 = *v16;
                unint64_t v61 = v16[1];
                unint64_t v62 = v16[3];
                *char v16 = 0;
                v16[1] = 0;
                if (v62)
                {
                  if (v61) {
                    (*(void (**)(unint64_t, unint64_t))(*(void *)v62 + 16))(v62, v60);
                  }
                }
              }
            }
            else
            {
              size_t v32 = (unint64_t *)((unint64_t)(v29 + 7) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v33 = *v32;
              unsigned char v16[2] = (unint64_t)(v32 + 1);
              v91 = 0;
              uint64_t v92 = 0;
              if (v33 >= 0x10000)
              {
                uint64_t v10 = 0;
                LODWORD(v34) = 0;
                while (1)
                {
                  IPC::Decoder::decode<WebCore::ImageDecoderFrameInfo>((uint64_t)&v79, (uint64_t *)v16);
                  if (!(_BYTE)v80) {
                    break;
                  }
                  if (v34 == v92)
                  {
                    long long v63 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v91, v34 + 1, (unint64_t)&v79);
                    int v64 = HIDWORD(v92);
                    uint64_t v10 = v91;
                    *((_OWORD *)v91 + HIDWORD(v92)) = *v63;
                  }
                  else
                  {
                    *((_OWORD *)v10 + v34) = v79;
                    int v64 = HIDWORD(v92);
                  }
                  uint64_t v34 = (v64 + 1);
                  HIDWORD(v92) = v64 + 1;
                  if (!--v33)
                  {
                    int v38 = v92;
                    if (v92 <= v34) {
                      goto LABEL_111;
                    }
                    if (!v34) {
                      goto LABEL_109;
                    }
                    if (!(v34 >> 28))
                    {
                      uint64_t v65 = WTF::fastMalloc((WTF *)(16 * v34));
                      LODWORD(v92) = v34;
                      v91 = (WTF *)v65;
                      if ((WTF *)v65 != v10)
                      {
                        uint64_t v66 = 0;
                        do
                        {
                          *(_OWORD *)(v65 + v66) = *(_OWORD *)((char *)v10 + v66);
                          v66 += 16;
                        }
                        while (16 * v34 != v66);
                        int v38 = v34;
                        if (!v10) {
                          goto LABEL_111;
                        }
                        goto LABEL_110;
                      }
                      goto LABEL_109;
                    }
LABEL_121:
                    __break(0xC471u);
                    JUMPOUT(0x199128D94);
                  }
                }
                uint64_t v10 = v91;
                if (!v91) {
                  goto LABEL_96;
                }
              }
              else
              {
                if (!v33)
                {
                  int v38 = v88;
                  if (!v88)
                  {
                    LODWORD(v34) = 0;
                    uint64_t v10 = 0;
LABEL_37:
                    uint64_t v40 = v87;
                    int v87 = 0;
                    long long v82 = v10;
                    unint64_t v83 = __PAIR64__(v34, v38);
                    *(void *)&long long v79 = v40;
                    *((void *)&v79 + 1) = v3;
                    int v80 = v11;
                    BOOL v81 = v4;
                    unsigned __int8 v84 = 1;
                    goto LABEL_38;
                  }
                  do
                  {
LABEL_108:
                    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_109:
                    v91 = 0;
                    LODWORD(v92) = 0;
LABEL_110:
                    WTF::fastFree(v10, v35);
                    int v38 = v92;
                    LODWORD(v34) = HIDWORD(v92);
LABEL_111:
                    uint64_t v10 = v91;
LABEL_31:
                    ;
                  }
                  while (v88);
                  goto LABEL_37;
                }
                uint64_t v10 = (WTF *)WTF::fastMalloc((WTF *)(16 * v33));
                LODWORD(v34) = 0;
                LODWORD(v92) = v33;
                v91 = v10;
                while (1)
                {
                  IPC::Decoder::decode<WebCore::ImageDecoderFrameInfo>((uint64_t)&v79, (uint64_t *)v16);
                  if (!(_BYTE)v80) {
                    break;
                  }
                  if (v34 == v92)
                  {
                    unint64_t v36 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v91, v34 + 1, (unint64_t)&v79);
                    int v37 = HIDWORD(v92);
                    uint64_t v10 = v91;
                    *((_OWORD *)v91 + HIDWORD(v92)) = *v36;
                  }
                  else
                  {
                    *((_OWORD *)v10 + v34) = v79;
                    int v37 = HIDWORD(v92);
                  }
                  LODWORD(v34) = v37 + 1;
                  HIDWORD(v92) = v37 + 1;
                  if (!--v33)
                  {
                    int v38 = v92;
                    goto LABEL_31;
                  }
                }
              }
              v91 = 0;
              LODWORD(v92) = 0;
              WTF::fastFree(v10, v35);
            }
LABEL_96:
            unint64_t v67 = *v16;
            unint64_t v68 = v16[1];
            *char v16 = 0;
            v16[1] = 0;
            unint64_t v69 = v16[3];
            if (v69 && v68) {
              (*(void (**)(unint64_t, unint64_t))(*(void *)v69 + 16))(v69, v67);
            }
            goto LABEL_97;
          }
          unint64_t v57 = v24;
        }
        *char v16 = 0;
        v16[1] = 0;
        unint64_t v54 = v16[3];
        if (!v54 || !v57) {
          goto LABEL_97;
        }
        goto LABEL_67;
      }
      unint64_t v55 = v24;
    }
    unint64_t v24 = 0;
    unint64_t v25 = 0;
    *char v16 = 0;
    v16[1] = 0;
    unint64_t v54 = v16[3];
    if (v54)
    {
      if (v55) {
        goto LABEL_67;
      }
LABEL_71:
      unint64_t v24 = 0;
      unint64_t v25 = 0;
    }
LABEL_98:
    *char v16 = 0;
    v16[1] = 0;
    unint64_t v70 = v16[3];
    if (v70 && v24) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v70 + 16))(v70, v25);
    }
    uint64_t v42 = (void *)*v16;
    unint64_t v71 = v16[1];
    *char v16 = 0;
    v16[1] = 0;
    unint64_t v72 = v16[3];
    if (v72 && v71) {
      (*(void (**)(unint64_t, void *))(*(void *)v72 + 16))(v72, v42);
    }
    LOBYTE(v79) = 13;
    int v15 = 1;
    int v85 = 1;
    int v41 = v88;
    if (v88 == -1) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  if (v88 != 1) {
    goto LABEL_108;
  }
  LOBYTE(v79) = (_BYTE)v87;
LABEL_38:
  int v85 = v15;
  int v41 = v15;
LABEL_39:
  ((void (*)(WTF **, unint64_t **))off_1EE9EF7A8[v41])(&v91, &v87);
LABEL_40:
  int v43 = v89;
  uint64_t v89 = 0;
  if (v43)
  {
    IPC::Encoder::~Encoder(v43, v42);
    WTF::fastFree(v52, v53);
  }
  unint64_t v44 = v78;
  v78 = 0;
  if (v44) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v44);
  }
  double result = v77;
  int v77 = 0;
  if (result) {
    double result = (atomic_uchar *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v42);
  }
  if (v15 != -1)
  {
    if (!v15)
    {
      uint64_t v46 = *((void *)&v79 + 1);
      int v45 = v80;
      int v47 = v84;
      if (v84)
      {
        unsigned __int8 v48 = v82;
        unint64_t v14 = v83;
        long long v82 = 0;
        unint64_t v83 = 0;
      }
      else
      {
        unsigned __int8 v48 = 0;
      }
      BOOL v49 = v81;
      *((unsigned char *)this + 72) = a3;
      *((void *)this + 14) = v46;
      if ((int)v45 >= 1 && SHIDWORD(v45) >= 1)
      {
        if (!*((unsigned char *)this + 128)) {
          *((unsigned char *)this + 128) = 1;
        }
        *((void *)this + 15) = v45;
      }
      *((unsigned char *)this + 132) = v49;
      if (v47)
      {
        long long v50 = (WTF *)*((void *)this + 12);
        *((void *)this + 12) = v48;
        *((void *)this + 13) = v14;
        if (v50) {
          WTF::fastFree(v50, v42);
        }
      }
      int v15 = 0;
    }
    double result = (atomic_uchar *)((uint64_t (*)(uint64_t *, long long *))off_1EE9EF408[v15])(&v76, &v79);
  }
  uint64_t v51 = v86;
  uint64_t v86 = 0;
  if (v51) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v51 + 24), v42);
  }
  return result;
}

atomic_uchar *WebKit::RemoteImageDecoderAVF::clearFrameBufferCache(WebKit::RemoteImageDecoderAVF *this, uint64_t a2)
{
  unint64_t v4 = a2 + 1;
  unint64_t v5 = *((void *)this + 14);
  if (v5 >= a2 + 1) {
    unint64_t v5 = a2 + 1;
  }
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = (uint64_t *)((char *)this + 88);
    do
    {
      uint64_t v8 = *v7;
      if (*v7)
      {
        unsigned int v9 = *(_DWORD *)(v8 - 8);
        unsigned int v10 = 9 * ((~(v6 << 15) + v6) ^ ((~(v6 << 15) + v6) >> 10));
        unsigned int v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
        uint64_t v12 = v9 & (v11 ^ HIWORD(v11));
        int v13 = *(_DWORD *)(v8 + 16 * v12);
        if (v13 != v6)
        {
          int v14 = 1;
          while (v13 != 0x7FFFFFFF)
          {
            uint64_t v12 = (v12 + v14) & v9;
            int v13 = *(_DWORD *)(v8 + 16 * v12);
            ++v14;
            if (v13 == v6) {
              goto LABEL_12;
            }
          }
          uint64_t v12 = *(unsigned int *)(v8 - 4);
        }
LABEL_12:
        if (v12 != *(_DWORD *)(v8 - 4))
        {
          uint64_t v15 = v8 + 16 * v12;
          *(_DWORD *)uint64_t v15 = 2147483646;
          char v16 = *(const void **)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16) {
            CFRelease(v16);
          }
          ++*(_DWORD *)(*v7 - 16);
          uint64_t v17 = *v7;
          if (*v7) {
            int v18 = *(_DWORD *)(v17 - 12) - 1;
          }
          else {
            int v18 = -1;
          }
          *(_DWORD *)(v17 - 12) = v18;
          uint64_t v19 = *v7;
          if (*v7)
          {
            unsigned int v20 = 6 * *(_DWORD *)(v19 - 12);
            unsigned int v21 = *(_DWORD *)(v19 - 4);
            if (v20 < v21 && v21 >= 9) {
              WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash((uint64_t *)this + 11, v21 >> 1, 0);
            }
          }
        }
      }
      ++v6;
      unint64_t v23 = *((void *)this + 14);
      if (v23 >= v4) {
        unint64_t v23 = v4;
      }
    }
    while (v6 < v23);
  }
  double result = (atomic_uchar *)*((void *)this + 3);
  if (result)
  {
    double result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 4), &v31);
    if (v31)
    {
      uint64_t v25 = *(void *)(v31 + 32);
      unint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)unint64_t v26 = 1126;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 66) = (char *)v26 + 16;
      *((void *)v26 + 67) = 512;
      *((void *)v26 + 68) = 0;
      *((void *)v26 + 70) = 0;
      *((void *)v26 + 69) = 0;
      IPC::Encoder::encodeHeader(v26);
      size_t v32 = v26;
      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v26, (uint64_t *)this + 6);
      IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v26, a2);
      IPC::Connection::sendMessageImpl(v25, (uint64_t *)&v32, 0, 0);
      double result = (atomic_uchar *)v32;
      size_t v32 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v27);
        double result = (atomic_uchar *)WTF::fastFree(v29, v30);
      }
      uint64_t v28 = v31;
      uint64_t v31 = 0;
      if (v28) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v28 + 24), v27);
      }
    }
  }
  return result;
}

void WebKit::RemoteImageDecoderAVFManager::~RemoteImageDecoderAVFManager(WebKit::RemoteImageDecoderAVFManager *this, void *a2)
{
  uint64_t v3 = (atomic_uchar *)*((void *)this + 5);
  if (v3)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v3, *((void *)this + 6), &v7);
    if (v7)
    {
      IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(v7 + 40), 0x58u);
      uint64_t v4 = v7;
      uint64_t v7 = 0;
      if (v4) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 24), a2);
      }
    }
    unint64_t v5 = (atomic_uchar *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (v5) {
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
    }
  }
  else
  {
    *((void *)this + 5) = 0;
  }
  uint64_t v6 = *((void *)this + 4);
  if (v6) {
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v6, a2);
  }
  *((void *)this + 1) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteImageDecoderAVFManager::~RemoteImageDecoderAVFManager(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::RemoteImageDecoderAVFManager::~RemoteImageDecoderAVFManager(WebKit::RemoteImageDecoderAVFManager *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteImageDecoderAVFManager::~RemoteImageDecoderAVFManager((WebKit::RemoteImageDecoderAVFManager *)((char *)this - 8), a2);

  WTF::fastFree(v2, v3);
}

atomic_uchar *WebKit::RemoteImageDecoderAVFManager::gpuProcessConnectionDidClose(WebKit::RemoteImageDecoderAVFManager *this, WebKit::GPUProcessConnection *a2)
{
  double result = (atomic_uchar *)*((void *)this + 5);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *((void *)this + 6), &v6);
    if (v6)
    {
      IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(v6 + 40), 0x58u);
      uint64_t v5 = v6;
      uint64_t v6 = 0;
      if (v5) {
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 24), v4);
      }
    }
    double result = (atomic_uchar *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (result) {
      double result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v4);
    }
  }
  else
  {
    *((void *)this + 5) = 0;
  }
  *((void *)this + 6) = 0;
  return result;
}

void *WebKit::RemoteImageDecoderAVFManager::encodedDataStatusChanged(void *result, uint64_t *a2, uint64_t a3, int *a4, int a5)
{
  uint64_t v5 = result[4];
  if (v5)
  {
    uint64_t v6 = *a2;
    unsigned int v7 = *(_DWORD *)(v5 - 8);
    unint64_t v8 = *a2 + ~(*a2 << 32);
    unint64_t v9 = 9
       * (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) ^ (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) >> 8));
    unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    uint64_t v11 = v7 & ((v10 >> 31) ^ v10);
    uint64_t v12 = *(void *)(v5 + 16 * v11);
    if (v12 == *a2)
    {
LABEL_3:
      uint64_t v13 = *(void *)(v5 + 16 * v11 + 8);
      if (v13)
      {
        atomic_fetch_add((atomic_uint *volatile)v13, 1u);
        uint64_t v14 = *(void *)(v13 + 8);
        if (v14)
        {
          *(void *)(v14 + 112) = a3;
          if (*a4 >= 1 && a4[1] >= 1)
          {
            uint64_t v15 = *(void *)a4;
            if (!*(unsigned char *)(v14 + 128)) {
              *(unsigned char *)(v14 + 128) = 1;
            }
            *(void *)(v14 + 120) = v15;
          }
          *(unsigned char *)(v14 + 132) = a5;
          double result = *(void **)(v14 + 80);
          if (result)
          {
            if (a3)
            {
              uint64_t v16 = 4;
            }
            else
            {
              int v21 = *(unsigned __int8 *)(v14 + 128);
              if (a5) {
                unsigned int v22 = 2;
              }
              else {
                unsigned int v22 = 1;
              }
              if (v21) {
                uint64_t v16 = 3;
              }
              else {
                uint64_t v16 = v22;
              }
            }
            double result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v16);
          }
        }
        if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v13);
          return (void *)WTF::fastFree((WTF *)v13, a2);
        }
      }
    }
    else
    {
      int v17 = 1;
      uint64_t v18 = *(void *)(v5 + 16 * v11);
      unsigned int v19 = v11;
      while (v18)
      {
        unsigned int v19 = (v19 + v17) & v7;
        uint64_t v18 = *(void *)(v5 + 16 * v19);
        ++v17;
        if (v18 == v6)
        {
          if (v12 == v6) {
            goto LABEL_3;
          }
          int v20 = 1;
          while (v12)
          {
            uint64_t v11 = (v11 + v20) & v7;
            uint64_t v12 = *(void *)(v5 + 16 * v11);
            ++v20;
            if (v12 == v6) {
              goto LABEL_3;
            }
          }
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteMediaSessionHelper::ensureConnection(WebKit::RemoteMediaSessionHelper *this)
{
  uint64_t v3 = (char *)this + 80;
  unint64_t v2 = (atomic_uchar *)*((void *)this + 10);
  if (v2)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v2, *((void *)this + 11), &v20);
    uint64_t v5 = v20;
    if (v20) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  {
    unsigned int v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v19);
  }
  uint64_t v7 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  char v8 = 0;
  uint64_t v9 = *(void *)(v7 + 24);
  int v10 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    MEMORY[0x19972E8D0](v9);
  }
  ++*(void *)(v9 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v9, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
  uint64_t v11 = v20;
  uint64_t v20 = v7;
  if (v11) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 24), v6);
  }
  WTF::ThreadSafeWeakPtr<WebKit::GPUProcessConnection>::operator=<WebKit::GPUProcessConnection>((uint64_t)v3, &v20);
  WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v20 + 184, (uint64_t)this + 72);
  char v22 = 103;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)(v20 + 40), &v22, (uint64_t)this + 56, (unsigned int **)v21);
  uint64_t v12 = *(void *)(v20 + 32);
  uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v13 = 47;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  v21[0] = v13;
  IPC::Connection::sendMessageImpl(v12, (uint64_t *)v21, 0, 0);
  uint64_t v14 = v21[0];
  v21[0] = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v4);
    WTF::fastFree(v17, v18);
  }
  uint64_t v5 = v20;
LABEL_15:
  uint64_t v20 = 0;
  uint64_t v15 = *(void *)(v5 + 32);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 24), v4);
  return v15;
}

atomic_uchar *WebKit::RemoteMediaSessionHelper::gpuProcessConnectionDidClose(WebKit::RemoteMediaSessionHelper *this, WebKit::GPUProcessConnection *a2)
{
  IPC::MessageReceiverMap::removeMessageReceiver((WebKit::GPUProcessConnection *)((char *)a2 + 40), (WebKit::RemoteMediaSessionHelper *)((char *)this + 56));
  double result = (atomic_uchar *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (result) {
    double result = WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v3);
  }
  *((void *)this + 11) = 0;
  return result;
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteMediaSessionHelper::gpuProcessConnectionDidClose(WebKit::RemoteMediaSessionHelper *this, WebKit::GPUProcessConnection *a2)
{
  return WebKit::RemoteMediaSessionHelper::gpuProcessConnectionDidClose((WebKit::RemoteMediaSessionHelper *)((char *)this - 72), a2);
}

IPC::Encoder *WebKit::RemoteMediaSessionHelper::startMonitoringWirelessRoutesInternal(WebKit::RemoteMediaSessionHelper *this)
{
  uint64_t v1 = WebKit::RemoteMediaSessionHelper::ensureConnection(this);
  unint64_t v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v2 = 1238;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 66) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 68) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 69) = 0;
  IPC::Encoder::encodeHeader(v2);
  uint64_t v7 = v2;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
  double result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaSessionHelper::stopMonitoringWirelessRoutesInternal(WebKit::RemoteMediaSessionHelper *this)
{
  uint64_t v1 = WebKit::RemoteMediaSessionHelper::ensureConnection(this);
  unint64_t v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v2 = 1239;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 66) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 68) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 69) = 0;
  IPC::Encoder::encodeHeader(v2);
  uint64_t v7 = v2;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
  double result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteMediaSessionHelper::providePresentingApplicationPID(WebKit::RemoteMediaSessionHelper *a1, int a2)
{
  int v8 = a2;
  uint64_t v2 = WebKit::RemoteMediaSessionHelper::ensureConnection(a1);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1237;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v9 = v3;
  IPC::Encoder::operator<<<int>(v3, &v8);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  double result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

_DWORD *WebKit::RemoteMediaSessionHelper::activeVideoRouteDidChange(int a1, int a2, WebKit::MediaPlaybackTargetContextSerialized *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  WebKit::MediaPlaybackTargetContextSerialized::platformContext(this, (uint64_t)v8);
  int v3 = v9;
  if (v9 == 1) {
    return (_DWORD *)((uint64_t (*)(_DWORD **, unsigned char *))off_1EE9EF428[v3])(&v7, v8);
  }
  if (v9)
  {
    uint64_t v5 = (WebKit::LibWebRTCCodecs *)std::__throw_bad_variant_access[abi:sn180100]();
    return (_DWORD *)WebKit::LibWebRTCCodecs::videoCodecTypeFromWebCodec(v5, v6);
  }
  WebCore::MediaPlaybackTargetCocoa::create();
  WebCore::MediaSessionHelper::activeVideoRouteDidChange();
  double result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    if (result[2] == 1) {
      double result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
    else {
      --result[2];
    }
  }
  int v3 = v9;
  if (v9 != -1) {
    return (_DWORD *)((uint64_t (*)(_DWORD **, unsigned char *))off_1EE9EF428[v3])(&v7, v8);
  }
  return result;
}

uint64_t WebKit::LibWebRTCCodecs::videoCodecTypeFromWebCodec(WebKit::LibWebRTCCodecs *this, const WTF::String *a2)
{
  if (!*(void *)a2) {
    goto LABEL_20;
  }
  if (WTF::StringImpl::startsWith())
  {
    unsigned __int8 v4 = 0;
LABEL_4:
    int v5 = 1;
    return v4 | (v5 << 8);
  }
  if (!*(void *)a2) {
    goto LABEL_20;
  }
  if (!WTF::StringImpl::startsWith())
  {
    if (*(void *)a2)
    {
      if (WTF::StringImpl::startsWith())
      {
        int v5 = *((unsigned __int8 *)this + 135);
        if (*((unsigned char *)this + 135)) {
          unsigned __int8 v4 = 3;
        }
        else {
          unsigned __int8 v4 = 0;
        }
        return v4 | (v5 << 8);
      }
      if (*(void *)a2
        && ((WTF::StringImpl::startsWith() & 1) != 0 || *(void *)a2 && (WTF::StringImpl::startsWith() & 1) != 0))
      {
        unsigned __int8 v4 = 1;
        goto LABEL_4;
      }
    }
LABEL_20:
    unsigned __int8 v4 = 0;
    int v5 = 0;
    return v4 | (v5 << 8);
  }
  uint64_t v6 = 128;
  if (!*((unsigned char *)this + 129)) {
    uint64_t v6 = 130;
  }
  int v5 = *((unsigned __int8 *)this + v6);
  unsigned __int8 v4 = 2 * v5;
  return v4 | (v5 << 8);
}

uint64_t WebKit::LibWebRTCCodecs::videoEncoderTypeFromWebCodec(WebKit::LibWebRTCCodecs *this, const WTF::String *a2)
{
  if (!*(void *)a2) {
    goto LABEL_11;
  }
  if ((WTF::StringImpl::startsWith() & 1) == 0)
  {
    if (*(void *)a2
      && ((WTF::StringImpl::startsWith() & 1) != 0 || *(void *)a2 && (WTF::StringImpl::startsWith() & 1) != 0))
    {
      int v3 = 1;
      goto LABEL_9;
    }
LABEL_11:
    int v3 = 0;
    int v4 = 0;
    return v3 | (v4 << 8);
  }
  int v3 = 0;
LABEL_9:
  int v4 = 1;
  return v3 | (v4 << 8);
}

void WebKit::LibWebRTCCodecs::initializeIfNeeded(WebKit::LibWebRTCCodecs *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&WebKit::LibWebRTCCodecs::initializeIfNeeded(void)::doInitializationOnce, memory_order_acquire) != -1)
  {
    int v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&WebKit::LibWebRTCCodecs::initializeIfNeeded(void)::doInitializationOnce, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::LibWebRTCCodecs::initializeIfNeeded(void)::$_0 &&>>);
  }
}

void WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionOnMainThreadWithLock(WebKit::LibWebRTCCodecs *this)
{
  char v1 = (atomic_uchar *volatile **)((char *)this + 64);
  if (!*((void *)this + 8))
  {
    {
      int v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v9);
    }
    uint64_t v3 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    WTF::Ref<WebKit::GPUProcessConnection,WTF::RawPtrTraits<WebKit::GPUProcessConnection>,WTF::DefaultRefDerefTraits<WebKit::GPUProcessConnection>>::Ref(&v11, v3);
    WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>((uint64_t)v11 + 184, (uint64_t)this + 24);
    WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::operator=(v1, *((atomic_uchar *volatile **)v11 + 4));
    int v4 = (atomic_uint *)WebKit::GPUProcessConnection::videoFrameObjectHeapProxy(v11);
    atomic_fetch_add(v4, 1u);
    int v5 = (unsigned int *)*((void *)this + 9);
    *((void *)this + 9) = v4;
    if (v5) {
      WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v5);
    }
    IPC::Connection::addWorkQueueMessageReceiver(*((void *)this + 8), 0x14u, *((void *)this + 12), (uint64_t)this, 0);
    if (*((unsigned char *)this + 132))
    {
      uint64_t v7 = *((void *)this + 8);
      uint64_t v10 = (char *)this + 131;
      IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetRTCLoggingLevel>(v7, &v10, 0, 0, 0);
    }
    int v8 = v11;
    uint64_t v11 = 0;
    if (v8) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*((atomic_uchar **)v8 + 3), v6);
    }
  }
}

uint64_t IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetRTCLoggingLevel>(uint64_t a1, char **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 130;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  int v17 = v10;
  IPC::ArgumentCoder<WTFLogChannelState,void>::encode<IPC::Encoder>(v10, **a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  int v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t *WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionAndDispatchToThread(uint64_t a1, uint64_t *a2)
{
  char v4 = 0;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  int v5 = (atomic_uchar *)(a1 + 57);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  if (*(void *)(a1 + 64))
  {
    double result = (uint64_t *)(*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 96) + 32))(*(void *)(a1 + 96), a2);
  }
  else
  {
    double result = (uint64_t *)(a1 + 80);
    uint64_t v7 = *(unsigned int *)(a1 + 92);
    if (v7 == *(_DWORD *)(a1 + 88))
    {
      double result = (uint64_t *)WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v7 + 1, (unint64_t)a2);
      a2 = result;
      uint64_t v7 = *(unsigned int *)(a1 + 92);
      int v8 = (void *)(*(void *)(a1 + 80) + 8 * v7);
    }
    else
    {
      int v8 = (void *)(*result + 8 * v7);
    }
    uint64_t v9 = *a2;
    *a2 = 0;
    *int v8 = v9;
    *(_DWORD *)(a1 + 92) = v7 + 1;
    if (!v7)
    {
      uint64_t v10 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
      uint64_t *v10 = (uint64_t)&unk_1EE9EF8A0;
      v10[1] = a1;
      uint64_t v12 = v10;
      WTF::callOnMainRunLoop();
      double result = v12;
      if (v12) {
        double result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v12 + 8))(v12);
      }
    }
  }
  int v11 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return result;
}

void WebKit::LibWebRTCCodecs::~LibWebRTCCodecs(WebKit::LibWebRTCCodecs *this, void *a2)
{
  *(void *)this = &unk_1EE9EF210;
  *((void *)this + 3) = &unk_1EE9EF268;
  uint64_t v3 = (const void *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, a2);
  uint64_t v6 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v6) {
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v6);
  }
  uint64_t v7 = (atomic_uchar *volatile *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v7)
  {
    char v8 = 0;
    atomic_uchar *volatile v9 = *v7;
    atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
    if (v8) {
      MEMORY[0x19972E8D0](v9);
    }
    uint64_t v10 = *((void *)v9 + 1);
    uint64_t v11 = v10 - 1;
    *((void *)v9 + 1) = v10 - 1;
    if (v10 == 1)
    {
      uint64_t v22 = *((void *)v9 + 2);
      uint64_t v13 = *((void *)v9 + 3);
      *((void *)v9 + 3) = 0;
      BOOL v12 = v22 == 0;
    }
    else
    {
      BOOL v12 = 0;
      uint64_t v13 = 0;
    }
    int v14 = 1;
    atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 == 1)
    {
      if (v11) {
        goto LABEL_16;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      if (v11) {
        goto LABEL_16;
      }
    }
    uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v15 = &unk_1EE9B37E8;
    *(void *)(v15 + 8) = v9;
    *(void *)(v15 + 16) = v13;
    *(unsigned char *)(v15 + 24) = v12;
    uint64_t v23 = v15;
    WTF::ensureOnMainRunLoop();
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
  }
LABEL_16:
  uint64_t v16 = *((void *)this + 6);
  if (v16)
  {
    uint64_t v17 = *(unsigned int *)(v16 - 4);
    if (v17)
    {
      uint64_t v18 = (WebKit::LibWebRTCCodecs::Encoder **)(v16 + 8);
      do
      {
        if (*(v18 - 1) != (WebKit::LibWebRTCCodecs::Encoder *)-1) {
          std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>::reset[abi:sn180100](v18, 0);
        }
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v16 - 16), v5);
  }
  uint64_t v19 = *((void *)this + 4);
  if (v19)
  {
    uint64_t v20 = *(unsigned int *)(v19 - 4);
    if (v20)
    {
      int v21 = (WebKit::LibWebRTCCodecs::Decoder **)(v19 + 8);
      do
      {
        if (*(v21 - 1) != (WebKit::LibWebRTCCodecs::Decoder *)-1) {
          std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>::reset[abi:sn180100](v21, 0);
        }
        v21 += 2;
        --v20;
      }
      while (v20);
    }
    WTF::fastFree((WTF *)(v19 - 16), v5);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::LibWebRTCCodecs::~LibWebRTCCodecs(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::LibWebRTCCodecs::~LibWebRTCCodecs(WebKit::LibWebRTCCodecs *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::LibWebRTCCodecs::~LibWebRTCCodecs((WebKit::LibWebRTCCodecs *)((char *)this - 24), a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::createVideoDecoder(WebKit *this, const webrtc::SdpVideoFormat *a2)
{
  {
    uint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  uint64_t v2 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WTF::String::fromUTF8();
  if (!v13) {
    return 0;
  }
  if (WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v13, "H264"))
  {
    uint64_t v3 = (uint64_t)v2;
    char v4 = 0;
LABEL_15:
    uint64_t Decoder = WebKit::LibWebRTCCodecs::createDecoder(v3, v4);
    goto LABEL_16;
  }
  if (WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v13, "H265"))
  {
    uint64_t v3 = (uint64_t)v2;
    char v4 = 1;
    goto LABEL_15;
  }
  if (WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v13, "VP9"))
  {
    int v5 = (char *)v2 + 128;
    if (!*((unsigned char *)v2 + 129)) {
      int v5 = (char *)v2 + 130;
    }
    if (*v5)
    {
      uint64_t v3 = (uint64_t)v2;
      char v4 = 2;
      goto LABEL_15;
    }
  }
  BOOL v6 = WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v13, "AV1");
  if (v6)
  {
    if (*((unsigned char *)v2 + 135))
    {
      uint64_t v3 = (uint64_t)v2;
      char v4 = 3;
      goto LABEL_15;
    }
    WebCore::createLibWebRTCDav1dDecoder(&v12, (WebCore *)v6);
    uint64_t Decoder = v12;
  }
  else
  {
    uint64_t Decoder = 0;
  }
LABEL_16:
  atomic_uchar *volatile v9 = v13;
  uint64_t v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  return Decoder;
}

uint64_t WebKit::releaseVideoDecoder(WebKit *this, void *a2)
{
  {
    int v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  uint64_t v3 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WebKit::LibWebRTCCodecs::releaseDecoder((uint64_t)v3, (uint64_t *)this);
  return 0;
}

uint64_t WebKit::decodeVideoFrame(WebKit *this, void *a2, char *a3, const unsigned __int8 *a4, int a5, int a6)
{
  unsigned int v10 = a2;
  {
    uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  uint64_t v12 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WebKit::LibWebRTCCodecs::decodeFrameInternal((uint64_t)v12, (uint64_t)this, (WTF *)v10, a3, (size_t)a4, a5, a6, (uint64_t *)&v16);
  uint64_t v13 = v16;
  uint64_t v16 = 0;
  if (v13 && atomic_fetch_add((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v13 + 2);
    (*(void (**)(unsigned int *))(*(void *)v13 + 16))(v13);
  }
  if (v13) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t WebKit::registerDecodeCompleteCallback(atomic_uchar *this, void *a2, void *a3)
{
  {
    char v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  char v5 = 0;
  int v6 = 1;
  atomic_compare_exchange_strong_explicit(this + 40, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](this + 40);
  }
  *((void *)this + 3) = a2;
  atomic_compare_exchange_strong_explicit(this + 40, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(this + 40));
  }
  return 0;
}

WTF::StringImpl *WebKit::createVideoEncoder(WebKit *this, const webrtc::SdpVideoFormat *a2)
{
  uint64_t v3 = *((unsigned __int8 *)this + 23);
  char v4 = this;
  uint64_t v5 = v3;
  if (*((char *)this + 23) < 0)
  {
    uint64_t v5 = *((void *)this + 1);
    if (v5 < 0) {
      goto LABEL_38;
    }
    char v4 = *(WebKit **)this;
    if (v5 && v4 == 0) {
      goto LABEL_38;
    }
  }
  if (v5 == 4 && *(_DWORD *)v4 == 875967048) {
    goto LABEL_28;
  }
  uint64_t v7 = this;
  uint64_t v8 = *((unsigned __int8 *)this + 23);
  if ((v3 & 0x80) != 0)
  {
    uint64_t v8 = *((void *)this + 1);
    if (v8 < 0) {
      goto LABEL_38;
    }
    uint64_t v7 = *(WebKit **)this;
    if (v8)
    {
      if (!v7) {
        goto LABEL_38;
      }
    }
  }
  if (v8 == 4 && *(_DWORD *)v7 == 875967080)
  {
LABEL_28:
    char v13 = 0;
    goto LABEL_30;
  }
  atomic_uchar *volatile v9 = this;
  uint64_t v10 = *((unsigned __int8 *)this + 23);
  if ((v3 & 0x80) != 0)
  {
    uint64_t v10 = *((void *)this + 1);
    if (v10 < 0 || (atomic_uchar *volatile v9 = *(WebKit **)this, v10) && !v9)
    {
LABEL_38:
      __break(1u);
LABEL_39:
      uint64_t v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v19);
    }
  }
  if (v10 != 4 || *(_DWORD *)v9 != 892744264)
  {
    uint64_t v11 = this;
    if ((v3 & 0x80) == 0
      || (v3 = *((void *)this + 1), (v3 & 0x8000000000000000) == 0) && ((uint64_t v11 = *(WebKit **)this, !v3) || v11))
    {
      if (v3 != 4 || *(_DWORD *)v11 != 892744296) {
        return 0;
      }
      goto LABEL_29;
    }
    goto LABEL_38;
  }
LABEL_29:
  char v13 = 1;
LABEL_30:
    goto LABEL_39;
  int v14 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  int v21 = 0;
  uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v15 = &unk_1EE9EFB20;
  uint64_t v20 = v15;
  EncoderInternal = WebKit::LibWebRTCCodecs::createEncoderInternal((uint64_t)v14, v13, (uint64_t)&v21, (void *)this + 3, 1, 1, 0, (uint64_t *)&v20);
  if (v20) {
    (*(void (**)(void *))(*v20 + 8))(v20);
  }
  uint64_t v17 = v21;
  int v21 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v16);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  return EncoderInternal;
}

uint64_t WebKit::releaseVideoEncoder(WebKit *this, void *a2)
{
  {
    uint64_t v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  uint64_t v3 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WebKit::LibWebRTCCodecs::releaseEncoder((uint64_t)v3, (uint64_t *)this);
  return 0;
}

uint64_t WebKit::initializeVideoEncoder(uint64_t *a1, uint64_t a2)
{
  {
    uint64_t v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  char v4 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  int v5 = *(_DWORD *)(a2 + 4);
  uint64_t v6 = *a1;
  long long v11 = *(_OWORD *)(a2 + 8);
  uint64_t v7 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v7 = &unk_1EE9EFC60;
  *(void *)(v7 + 8) = v4;
  *(void *)(v7 + 16) = v6;
  *(_DWORD *)(v7 + 24) = v5;
  *(_OWORD *)(v7 + 28) = v11;
  uint64_t v12 = v7;
  WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionAndDispatchToThread((uint64_t)v4, &v12);
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return 0;
}

uint64_t WebKit::encodeVideoFrame(WebKit *this, uint64_t *a2, const webrtc::VideoFrame *a3)
{
  char v3 = (char)a3;
  {
    uint64_t v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v27);
  }
  uint64_t v6 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  uint64_t v7 = v6;
  int v8 = *((_DWORD *)a2 + 18);
  switch(v8)
  {
    case 90:
      __int16 v9 = 90;
      break;
    case 270:
      __int16 v9 = 270;
      break;
    case 180:
      __int16 v9 = 180;
      break;
    default:
      __int16 v9 = 0;
      break;
  }
  uint64_t v10 = WTF::MediaTime::createWithDouble(v6, (double)a2[4] / 1000.0 / 1000.0);
  uint64_t v12 = v11;
  char v13 = 0;
  uint64_t v14 = *((unsigned int *)a2 + 4);
  v47[0] = 0;
  v47[1] = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7 + 40, (unsigned __int8 *)&v13, 1u, memory_order_acquire, memory_order_acquire);
  if (v13) {
    MEMORY[0x19972E8D0]((char *)v7 + 40);
  }
  if (!*((void *)this + 12)) {
    goto LABEL_21;
  }
  uint64_t v28 = v14;
  uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v15 = &unk_1EE9EFC88;
  v15[1] = this;
  int v37 = v15;
  uint64_t v16 = (WebKit *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v16 = &unk_1EE9EFCB0;
  *((void *)v16 + 1) = this;
  uint64_t v31 = v16;
  WebKit::SharedVideoFrameWriter::writeBuffer((void *)this + 13, (webrtc::VideoFrame *)a2, (uint64_t *)&v37, &v31, (uint64_t)v44);
  (*(void (**)(WebKit *))(*(void *)v16 + 8))(v16);
  (*(void (**)(void *))(*v15 + 8))(v15);
  if (v46)
  {
    int v37 = (void *)v10;
    int v38 = v12;
    char v39 = BYTE4(v12);
    char v40 = 0;
    __int16 v41 = v9;
    v42[0] = 0;
    int v43 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)v42, (uint64_t)v44);
    uint64_t v17 = (os_unfair_lock_s *)*((void *)this + 12);
    uint64_t v31 = this;
    size_t v32 = (uint64_t *)&v37;
    *(void *)&long long v33 = v28;
    *((void *)&v33 + 1) = v47;
    LOBYTE(v34) = v3;
    IPC::Connection::sendWithPromisedReply<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::EncodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>((uint64_t *)&v36, v17, (uint64_t)&v31);
    uint64_t v18 = (uint64_t)v36;
    uint64_t v19 = *((void *)v7 + 12);
    long long v30 = 0uLL;
    uint64_t v20 = WTF::fastMalloc((WTF *)0x50);
    uint64_t v21 = *(void *)(v19 + 32);
    v19 += 32;
    (*(void (**)(uint64_t))(v21 + 32))(v19);
    uint64_t v22 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v22 = &unk_1EE9EFD28;
    *(_DWORD *)(v20 + 8) = 1;
    *(void *)(v20 + 16) = v19;
    *(void *)(v20 + 24) = 0;
    *(void *)(v20 + 32) = 0;
    *(void *)(v20 + 40) = "encodeFrameInternal";
    *(void *)(v20 + 48) = 0;
    *(_WORD *)(v20 + 56) = 0;
    *(void *)uint64_t v20 = &unk_1EE9EF548;
    *(void *)(v20 + 64) = 0;
    *(void *)(v20 + 72) = v22;
    atomic_fetch_add((atomic_uint *volatile)(v18 + 8), 1u);
    uint64_t v31 = (WebKit *)v18;
    size_t v32 = (uint64_t *)v20;
    long long v33 = v30;
    uint64_t v34 = "encodeFrameInternal";
    uint64_t v35 = 0;
    WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCommand<WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,WTF::String,0u>>>::completionPromise(&v29, (uint64_t *)&v31);
    WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCommand<WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,WTF::String,0u>>>::~ThenCommand((uint64_t *)&v31);
    uint64_t v23 = v36;
    unint64_t v36 = 0;
    if (v23 && atomic_fetch_add((atomic_uint *volatile)v23 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v23 + 2);
      (*(void (**)(unsigned int *))(*(void *)v23 + 16))(v23);
    }
    if (v43 != -1) {
      ((void (*)(WebKit **, unsigned char *))off_1EE9EF700[v43])(&v31, v42);
    }
    if (v46 && v45 != -1) {
      ((void (*)(void **, unsigned char *))off_1EE9EF700[v45])(&v37, v44);
    }
  }
  else
  {
LABEL_21:
    uint64_t v29 = 0;
  }
  int v24 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7 + 40, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
  if (v24 != 1) {
    WTF::Lock::unlockSlow((WebKit::LibWebRTCCodecs *)((char *)v7 + 40));
  }
  uint64_t v25 = v29;
  uint64_t v29 = 0;
  if (v25 && atomic_fetch_add((atomic_uint *volatile)v25 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v25 + 2);
    (*(void (**)(unsigned int *))(*(void *)v25 + 16))(v25);
  }
  if (v25) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t WebKit::registerEncodeCompleteCallback(atomic_uchar *this, void *a2, void *a3)
{
  {
    int v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  char v5 = 0;
  int v6 = 1;
  atomic_compare_exchange_strong_explicit(this + 88, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](this + 88);
  }
  *((void *)this + 8) = a2;
  atomic_compare_exchange_strong_explicit(this + 88, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(this + 88));
  }
  return 0;
}

unsigned int *WebKit::setEncodeRatesCallback(WebKit::LibWebRTCCodecs::Encoder *a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a2 + 176) / 0x3E8u;
  unsigned int v4 = (*(double *)(a2 + 344) + 0.5);
  {
    int v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  char v5 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WebKit::LibWebRTCCodecs::setEncodeRates((atomic_uchar *)v5, a1, v3, v4, &v9);
  double result = (unsigned int *)v9;
  __int16 v9 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (unsigned int *)v7();
  }
  return result;
}

uint64_t WebKit::LibWebRTCCodecs::createDecoder(uint64_t a1, char a2)
{
  uint64_t v10 = 0;
  unsigned int v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9EF8C8;
  __int16 v9 = v4;
  uint64_t DecoderInternal = WebKit::LibWebRTCCodecs::createDecoderInternal(a1, a2, (uint64_t)&v10, (uint64_t *)&v9);
  if (v9) {
    (*(void (**)(void *))(*v9 + 8))(v9);
  }
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  return DecoderInternal;
}

uint64_t WebKit::LibWebRTCCodecs::createDecoderInternal(uint64_t a1, char a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = WTF::fastMalloc((WTF *)0x48);
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(void *)(v7 + 64) = 0;
  *(void *)uint64_t v7 = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(unsigned char *)(v7 + 8) = a2;
  WTF::String::isolatedCopy();
  __int16 v9 = v17;
  uint64_t v17 = 0;
  uint64_t v10 = *(WTF::StringImpl **)(v7 + 16);
  *(void *)(v7 + 16) = v9;
  if (v10)
  {
    int v11 = *(_DWORD *)v10 - 2;
    if (*(_DWORD *)v10 != 2) {
      goto LABEL_5;
    }
    WTF::StringImpl::destroy(v10, v8);
    uint64_t v10 = v17;
    uint64_t v17 = 0;
    if (!v10) {
      goto LABEL_6;
    }
    int v11 = *(_DWORD *)v10 - 2;
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v12);
    }
    else {
LABEL_5:
    }
      *(_DWORD *)uint64_t v10 = v11;
  }
LABEL_6:
  uint64_t v13 = *a4;
  *a4 = 0;
  uint64_t v14 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v14 = &unk_1EE9EF8F0;
  *((void *)v14 + 1) = a1;
  *((void *)v14 + 2) = v7;
  *((void *)v14 + 3) = v13;
  uint64_t v17 = v14;
  WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionAndDispatchToThread(a1, (uint64_t *)&v17);
  uint64_t v15 = v17;
  uint64_t v17 = 0;
  if (v15) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v15 + 8))(v15);
  }
  return v7;
}

uint64_t WebKit::LibWebRTCCodecs::releaseDecoder(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned int v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v4 = &unk_1EE9EF9B8;
  v4[1] = a1;
  v4[2] = v3;
  uint64_t v7 = v4;
  WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionAndDispatchToThread(a1, (uint64_t *)&v7);
  uint64_t v5 = (uint64_t)v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return 0;
}

void *WebKit::LibWebRTCCodecs::flushDecoder@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char v6 = 0;
  uint64_t v7 = (atomic_uchar *)(a1 + 57);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  int v8 = *(os_unfair_lock_s **)(a2 + 48);
  if (v8) {
    BOOL v9 = *(unsigned char *)(a2 + 41) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    unint64_t v26 = 0;
    *(void *)uint64_t v27 = 0;
    *(void *)&v27[8] = "sendWithPromisedReply";
    *(void *)&v27[16] = 0;
    WTF::NativePromiseProducer<void,IPC::Error,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)v30, 0, (WTF::Logger::LogSiteIdentifier *)&v26);
    int v11 = (atomic_uint *)v30[0];
    if (v30[0])
    {
      atomic_fetch_add((atomic_uint *volatile)(v30[0] + 8), 1u);
      uint64_t v12 = v30[0];
    }
    else
    {
      uint64_t v12 = 0;
    }
    v30[0] = 0;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)&v30[1];
    *(_OWORD *)&v27[16] = *(_OWORD *)&v30[3];
    uint64_t v13 = WTF::fastMalloc((WTF *)0x30);
    *(void *)uint64_t v13 = &unk_1EE9EF9E0;
    *(void *)(v13 + 8) = v12;
    unint64_t v26 = 0;
    long long v14 = *(_OWORD *)&v27[16];
    *(_OWORD *)(v13 + 16) = *(_OWORD *)v27;
    *(_OWORD *)(v13 + 32) = v14;
    v29[0] = v13;
    v29[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer((uint64_t *)&v26);
    uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v15 = 122;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 66) = (char *)v15 + 16;
    *((void *)v15 + 67) = 512;
    *((void *)v15 + 68) = 0;
    *((void *)v15 + 70) = 0;
    *((void *)v15 + 69) = 0;
    IPC::Encoder::encodeHeader(v15);
    unint64_t v26 = v15;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v15, (uint64_t *)a2);
    IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v8, &v26, v29, 0, 0);
    uint64_t v17 = v26;
    unint64_t v26 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v16);
      WTF::fastFree(v24, v25);
    }
    uint64_t v18 = v29[0];
    v29[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(v30);
    uint64_t v19 = *(void *)(a1 + 96);
    *(_OWORD *)long long v30 = 0uLL;
    uint64_t v20 = WTF::fastMalloc((WTF *)0x50);
    uint64_t v21 = *(void *)(v19 + 32);
    v19 += 32;
    (*(void (**)(uint64_t))(v21 + 32))(v19);
    uint64_t v22 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v22 = &unk_1EE9EF448;
    *(_DWORD *)(v20 + 8) = 1;
    *(void *)(v20 + 16) = v19;
    *(void *)(v20 + 24) = 0;
    *(void *)(v20 + 32) = 0;
    *(void *)(v20 + 40) = "flushDecoder";
    *(void *)(v20 + 48) = 0;
    *(_WORD *)(v20 + 56) = 0;
    *(void *)uint64_t v20 = &unk_1EE9EF470;
    *(void *)(v20 + 64) = 0;
    *(void *)(v20 + 72) = v22;
    atomic_fetch_add(v11 + 2, 1u);
    unint64_t v26 = (IPC::Encoder *)v11;
    *(void *)uint64_t v27 = v20;
    *(_OWORD *)&v27[8] = *(_OWORD *)v30;
    *(void *)&v27[24] = "flushDecoder";
    uint64_t v28 = 0;
    WTF::NativePromise<void,IPC::Error,0u>::ThenCommand<WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>>::completionPromise(a3, (uint64_t *)&v26);
    double result = WTF::NativePromise<void,IPC::Error,0u>::ThenCommand<WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)&v26);
    if (v11 && atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v11 + 2);
      double result = (void *)(*(uint64_t (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
    }
  }
  else
  {
    unint64_t v26 = 0;
    *(void *)uint64_t v27 = 0;
    *(void *)&v27[8] = "flushDecoder";
    *(void *)&v27[16] = 0;
    double result = WTF::NativePromise<void,void,0u>::createAndResolve<std::enable_if<true,void>>((WTF::NativePromiseBase *)&v26, a3);
  }
  int v23 = 1;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
  if (v23 != 1) {
    return (void *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  return result;
}

uint64_t WebKit::LibWebRTCCodecs::setDecoderFormatDescription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6)
{
  char v9 = 0;
  v16[0] = a3;
  v16[1] = a4;
  uint64_t v10 = (atomic_uchar *)(a1 + 57);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
  if (v9) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  uint64_t result = *(void *)(a2 + 48);
  if (result)
  {
    v13[0] = a2;
    v13[1] = v16;
    __int16 v14 = a5;
    __int16 v15 = a6;
    uint64_t result = IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetDecoderFormatDescription>(result, (uint64_t)v13, 0, 0, 0);
  }
  int v12 = 1;
  atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
  if (v12 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetDecoderFormatDescription>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 127;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::span<unsigned char const,18446744073709551615ul> const&,unsigned short,unsigned short>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::span<unsigned char const,18446744073709551615ul> const&,unsigned short,unsigned short>,0ul,1ul,2ul,3ul>(v10, a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t *WebKit::LibWebRTCCodecs::sendFrameToDecode(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, size_t a6, int a7, int a8)
{
  if (a8 | a7)
  {
    if (*(unsigned char *)(a3 + 8) == 2)
    {
      __int16 v14 = a8;
      __int16 v15 = a7;
      uint64_t v16 = *(void *)(a3 + 48);
      uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v17 = 129;
      *((void *)v17 + 1) = 0;
      *((void *)v17 + 66) = (char *)v17 + 16;
      *((void *)v17 + 67) = 512;
      *((void *)v17 + 68) = 0;
      *((void *)v17 + 70) = 0;
      *((void *)v17 + 69) = 0;
      IPC::Encoder::encodeHeader(v17);
      int v38 = v17;
      IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v17, (uint64_t *)a3);
      IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v17, v15);
      IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v17, v14);
      IPC::Connection::sendMessageImpl(v16, (uint64_t *)&v38, 0, 0);
      uint64_t v19 = v38;
      int v38 = 0;
      if (v19)
      {
        IPC::Encoder::~Encoder(v19, v18);
        WTF::fastFree(v36, v37);
      }
    }
  }
  uint64_t v20 = *(os_unfair_lock_s **)(a3 + 48);
  int v38 = 0;
  *(void *)char v39 = 0;
  *(void *)&v39[8] = "sendWithPromisedReply";
  *(void *)&v39[16] = 0;
  WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)v42, (WTF::Logger::LogSiteIdentifier *)&v38);
  uint64_t v21 = (atomic_uint *)v42[0];
  if (v42[0])
  {
    atomic_fetch_add((atomic_uint *volatile)(v42[0] + 8), 1u);
    uint64_t v22 = v42[0];
  }
  else
  {
    uint64_t v22 = 0;
  }
  v42[0] = 0;
  *(_OWORD *)char v39 = *(_OWORD *)&v42[1];
  *(_OWORD *)&v39[16] = *(_OWORD *)&v42[3];
  uint64_t v23 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v23 = &unk_1EE9EFA70;
  *(void *)(v23 + 8) = v22;
  int v38 = 0;
  long long v24 = *(_OWORD *)&v39[16];
  *(_OWORD *)(v23 + 16) = *(_OWORD *)v39;
  *(_OWORD *)(v23 + 32) = v24;
  v41[0] = v23;
  v41[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::~NativePromiseProducer((uint64_t *)&v38);
  uint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v25 = 120;
  *((void *)v25 + 1) = 0;
  *((void *)v25 + 66) = (char *)v25 + 16;
  *((void *)v25 + 67) = 512;
  *((void *)v25 + 68) = 0;
  *((void *)v25 + 70) = 0;
  *((void *)v25 + 69) = 0;
  IPC::Encoder::encodeHeader(v25);
  int v38 = v25;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v25, (uint64_t *)a3);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v25, a4);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v25, a5, a6);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(v20, &v38, v41, 0, 0);
  uint64_t v27 = v38;
  int v38 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v34, v35);
  }
  uint64_t v28 = v41[0];
  v41[0] = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::~NativePromiseProducer(v42);
  uint64_t v29 = *(void *)(a2 + 96);
  *(_OWORD *)uint64_t v42 = 0uLL;
  uint64_t v30 = WTF::fastMalloc((WTF *)0x50);
  uint64_t v31 = *(void *)(v29 + 32);
  v29 += 32;
  (*(void (**)(uint64_t))(v31 + 32))(v29);
  size_t v32 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v32 = &unk_1EE9EF4A0;
  *(_DWORD *)(v30 + 8) = 1;
  *(void *)(v30 + 16) = v29;
  *(void *)(v30 + 24) = 0;
  *(void *)(v30 + 32) = 0;
  *(void *)(v30 + 40) = "sendFrameToDecode";
  *(void *)(v30 + 48) = 0;
  *(_WORD *)(v30 + 56) = 0;
  *(void *)uint64_t v30 = &unk_1EE9EF548;
  *(void *)(v30 + 64) = 0;
  *(void *)(v30 + 72) = v32;
  atomic_fetch_add(v21 + 2, 1u);
  int v38 = (IPC::Encoder *)v21;
  *(void *)char v39 = v30;
  *(_OWORD *)&v39[8] = *(_OWORD *)v42;
  *(void *)&v39[24] = "sendFrameToDecode";
  uint64_t v40 = 0;
  WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCommand<WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,WTF::String,0u>>>::completionPromise(a1, (uint64_t *)&v38);
  uint64_t result = WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCommand<WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,WTF::String,0u>>>::~ThenCommand((uint64_t *)&v38);
  if (v21)
  {
    if (atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v21 + 2);
      return (uint64_t *)(*(uint64_t (**)(atomic_uint *))(*(void *)v21 + 16))(v21);
    }
  }
  return result;
}

uint64_t WebKit::LibWebRTCCodecs::decodeFrameInternal@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, WTF *a3@<X2>, char *a4@<X3>, size_t a5@<X4>, int a6@<W5>, int a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v14 = result;
  char v16 = 0;
  uint64_t v17 = (atomic_uchar *)(result + 57);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 57), (unsigned __int8 *)&v16, 1u, memory_order_acquire, memory_order_acquire);
  if (v16) {
    uint64_t result = MEMORY[0x19972E8D0](result + 57);
  }
  if (*(unsigned char *)(a2 + 41))
  {
    *(unsigned char *)(a2 + 41) = 0;
    *a8 = 0;
  }
  else if (*(void *)(a2 + 48))
  {
    uint64_t result = (uint64_t)WebKit::LibWebRTCCodecs::sendFrameToDecode(a8, v14, a2, (uint64_t)a3, a4, a5, a6, a7);
  }
  else
  {
    v40[0] = 0;
    v40[1] = 0;
    *(void *)&long long v41 = "decodeFrameInternal";
    *((void *)&v41 + 1) = 0;
    uint64_t v18 = WTF::fastMalloc((WTF *)0x80);
    char v46 = (atomic_uchar *)WTF::NativePromise<void,WTF::String,0u>::NativePromise(v18, v40);
    long long v47 = *(_OWORD *)v40;
    long long v48 = v41;
    uint64_t v49 = 0;
    uint64_t result = (uint64_t)WTF::NativePromise<void,WTF::String,0u>::setDispatchMode(v46, 0, (WTF::Logger::LogSiteIdentifier *)v40);
    atomic_fetch_add((atomic_uint *volatile)(v18 + 8), 1u);
    v40[1] = 0;
    LODWORD(v41) = 0;
    v40[0] = a3;
    DWORD1(v41) = a5;
    if (a5)
    {
      if (HIDWORD(a5))
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v20 = (WTF *)WTF::fastMalloc((WTF *)a5);
      LODWORD(v41) = a5;
      v40[1] = v20;
      do
      {
        char v21 = *a4++;
        *(unsigned char *)uint64_t v20 = v21;
        uint64_t v20 = (WTF *)((char *)v20 + 1);
        --a5;
      }
      while (a5);
    }
    long long v43 = v47;
    uint64_t v22 = (unsigned int *)(a2 + 56);
    WORD4(v41) = a6;
    WORD5(v41) = a7;
    uint64_t v42 = v46;
    long long v44 = v48;
    uint64_t v45 = v49;
    char v46 = 0;
    uint64_t v49 = 0;
    uint64_t v23 = *(unsigned int *)(a2 + 68);
    if (v23 == *(_DWORD *)(a2 + 64))
    {
      unint64_t v24 = WTF::Vector<WebKit::LibWebRTCCodecs::Decoder::EncodedFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v22, v23 + 1, (unint64_t)v40);
      uint64_t v25 = *(void *)(a2 + 56) + 80 * *(unsigned int *)(a2 + 68);
      uint64_t v26 = *(void *)v24;
      *(void *)(v25 + 8) = 0;
      *(void *)(v25 + 16) = 0;
      *(void *)uint64_t v25 = v26;
      uint64_t v27 = *(void *)(v24 + 8);
      *(void *)(v24 + 8) = 0;
      *(void *)(v25 + 8) = v27;
      LODWORD(v27) = *(_DWORD *)(v24 + 16);
      *(_DWORD *)(v24 + 16) = 0;
      *(_DWORD *)(v25 + 16) = v27;
      LODWORD(v27) = *(_DWORD *)(v24 + 20);
      *(_DWORD *)(v24 + 20) = 0;
      *(_DWORD *)(v25 + 20) = v27;
      *(_DWORD *)(v25 + 24) = *(_DWORD *)(v24 + 24);
      uint64_t v28 = *(void *)(v24 + 32);
      *(void *)(v24 + 32) = 0;
      *(void *)(v25 + 32) = v28;
      long long v29 = *(_OWORD *)(v24 + 40);
      *(_OWORD *)(v25 + 56) = *(_OWORD *)(v24 + 56);
      *(_OWORD *)(v25 + 40) = v29;
      uint64_t v30 = (void *)(v25 + 72);
      uint64_t v31 = (uint64_t *)(v24 + 72);
    }
    else
    {
      uint64_t v31 = &v45;
      uint64_t v32 = *(void *)v22 + 80 * v23;
      *(void *)(v32 + 8) = 0;
      *(void *)(v32 + 16) = 0;
      *(void *)uint64_t v32 = a3;
      long long v33 = v40[1];
      v40[1] = 0;
      *(void *)(v32 + 8) = v33;
      LODWORD(v33) = v41;
      LODWORD(v41) = 0;
      *(_DWORD *)(v32 + 16) = v33;
      LODWORD(v33) = DWORD1(v41);
      DWORD1(v41) = 0;
      *(void *)(v32 + 20) = __PAIR64__(DWORD2(v41), v33);
      uint64_t v34 = v42;
      uint64_t v42 = 0;
      *(void *)(v32 + 32) = v34;
      long long v35 = v43;
      *(_OWORD *)(v32 + 56) = v44;
      *(_OWORD *)(v32 + 40) = v35;
      uint64_t v30 = (void *)(v32 + 72);
    }
    uint64_t v36 = *v31;
    *uint64_t v31 = 0;
    void *v30 = v36;
    ++*(_DWORD *)(a2 + 68);
    WTF::NativePromiseProducer<void,WTF::String,16u>::~NativePromiseProducer((uint64_t *)&v42, v19);
    int v38 = v40[1];
    if (v40[1])
    {
      v40[1] = 0;
      LODWORD(v41) = 0;
      WTF::fastFree(v38, v37);
    }
    *a8 = v18;
    uint64_t result = WTF::NativePromiseProducer<void,WTF::String,16u>::~NativePromiseProducer((uint64_t *)&v46, (WTF::StringImpl *)v37);
  }
  int v39 = 1;
  atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
  if (v39 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v17);
  }
  return result;
}

WTF::StringImpl *WebKit::LibWebRTCCodecs::decodeFrame@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF *a3@<X2>, char *a4@<X3>, size_t a5@<X4>, int a6@<W5>, int a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t result = (WTF::StringImpl *)WebKit::LibWebRTCCodecs::decodeFrameInternal(a1, a2, a3, a4, a5, a6, a7, &v12);
  if (v12)
  {
    *a8 = v12;
  }
  else
  {
    *(void *)&long long v11 = "Decoding task did not complete";
    *((void *)&v11 + 1) = 31;
    v10[0] = 0;
    v10[1] = 0;
    void v10[2] = "decodeFrame";
    v10[3] = 0;
    return WTF::NativePromise<void,WTF::String,0u>::createAndReject<WTF::ASCIILiteral,std::enable_if<true,void>>(&v11, (WTF::Logger::LogSiteIdentifier *)v10, a8);
  }
  return result;
}

WTF::StringImpl *WTF::NativePromise<void,WTF::String,0u>::createAndReject<WTF::ASCIILiteral,std::enable_if<true,void>>@<X0>(long long *a1@<X0>, WTF::Logger::LogSiteIdentifier *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x80);
  uint64_t v7 = WTF::NativePromise<void,WTF::String,0u>::NativePromise(v6, a2);
  *a3 = v7;

  return WTF::NativePromise<void,WTF::String,0u>::reject<WTF::ASCIILiteral,std::enable_if<true,void>>(v7, a1, a2);
}

uint64_t WebKit::LibWebRTCCodecs::registerDecodedVideoFrameCallback(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v5 = 0;
  uint64_t v6 = (atomic_uchar *)(a2 + 40);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 40), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a2 + 40);
  }
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t result = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v7;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  int v9 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

atomic_uint *WebKit::LibWebRTCCodecs::failedDecoding(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t result = (atomic_uint *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), &v8);
  if (result)
  {
    uint64_t v3 = result;
    char v4 = 0;
    *((unsigned char *)result + 41) = 1;
    char v5 = (atomic_uchar *)(result + 10);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)result + 40, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      MEMORY[0x19972E8D0](result + 10);
    }
    uint64_t result = (atomic_uint *)*((void *)v3 + 4);
    if (result)
    {
      uint64_t v7 = 0;
      (*(void (**)(atomic_uint *, atomic_uint **, void))(*(void *)result + 16))(result, &v7, 0);
      uint64_t result = v7;
      uint64_t v7 = 0;
      if (result)
      {
        if (atomic_fetch_add(result + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)result + 2);
          uint64_t result = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result);
        }
      }
    }
    int v6 = 1;
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1) {
      return (atomic_uint *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
    }
  }
  return result;
}

webrtc *WebKit::LibWebRTCCodecs::completedDecoding(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  char v9 = 0;
  *(void *)uint64_t v32 = a2;
  uint64_t v10 = (atomic_uchar *)(a1 + 57);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
  if (v9) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  WebKit::LibWebRTCCodecs::protectedConnection(&v33, *(atomic_uchar *volatile **)(a1 + 64));
  long long v11 = v33;
  long long v33 = 0;
  uint64_t v34 = v11;
  uint64_t v12 = *(atomic_uint **)(a1 + 72);
  if (v12)
  {
    atomic_fetch_add(v12, 1u);
    uint64_t v13 = v33;
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = WTF::fastMalloc((WTF *)0x88);
  WebKit::RemoteVideoFrameProxy::RemoteVideoFrameProxy(v14, v11, v12, a5);
  WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v12);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v34);
  long long v33 = 0;
  if (v13)
  {
    char v15 = 0;
    atomic_uchar *volatile v16 = *v13;
    atomic_compare_exchange_strong_explicit(*v13, (unsigned __int8 *)&v15, 1u, memory_order_acquire, memory_order_acquire);
    if (v15) {
      MEMORY[0x19972E8D0](v16);
    }
    uint64_t v17 = *((void *)v16 + 1);
    uint64_t v18 = v17 - 1;
    *((void *)v16 + 1) = v17 - 1;
    if (v17 == 1)
    {
      uint64_t v31 = *((void *)v16 + 2);
      uint64_t v20 = *((void *)v16 + 3);
      *((void *)v16 + 3) = 0;
      BOOL v19 = v31 == 0;
    }
    else
    {
      BOOL v19 = 0;
      uint64_t v20 = 0;
    }
    int v21 = 1;
    atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
    if (v21 == 1)
    {
      if (v18) {
        goto LABEL_14;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v16);
      if (v18) {
        goto LABEL_14;
      }
    }
    uint64_t v22 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v22 = &unk_1EE9B37E8;
    *(void *)(v22 + 8) = v16;
    *(void *)(v22 + 16) = v20;
    *(unsigned char *)(v22 + 24) = v19;
    long long v35 = (webrtc *)v22;
    WTF::ensureOnMainRunLoop();
    uint64_t v23 = v35;
    long long v35 = 0;
    if (v23) {
      (*(void (**)(webrtc *))(*(void *)v23 + 8))(v23);
    }
  }
LABEL_14:
  int v24 = 1;
  atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
  if (v24 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
  uint64_t result = (webrtc *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), v32);
  if (result)
  {
    uint64_t v26 = (char *)result + 40;
    do
    {
      int v27 = *v26;
      if (v27) {
        goto LABEL_29;
      }
      int v28 = *v26;
      atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v28, v27 | 1, memory_order_acquire, memory_order_acquire);
    }
    while (v28 != v27);
    uint64_t v29 = *((void *)result + 4);
    if (v29)
    {
      long long v35 = (webrtc *)v14;
      (*(void (**)(uint64_t, webrtc **, void *))(*(void *)v29 + 16))(v29, &v35, a3);
      uint64_t result = v35;
      long long v35 = 0;
      if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)result + 2);
        uint64_t result = (webrtc *)(*(uint64_t (**)(webrtc *))(*(void *)result + 8))(result);
      }
    }
    else
    {
      uint64_t result = (webrtc *)*((void *)result + 3);
      if (!result)
      {
LABEL_27:
        int v30 = 1;
        atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v30, 0, memory_order_release, memory_order_relaxed);
        if (v30 == 1)
        {
          if (!v14) {
            return result;
          }
          goto LABEL_29;
        }
        uint64_t result = (webrtc *)WTF::Lock::unlockSlow((WTF::Lock *)v26);
        if (v14) {
          goto LABEL_29;
        }
        return result;
      }
      uint64_t result = (webrtc *)webrtc::videoDecoderTaskComplete(result, a3, (a4 / 1000), v14, WebKit::LibWebRTCCodecs::completedDecoding(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,long long,long long,WebKit::RemoteVideoFrameProxyProperties &&)::$_0::__invoke<void>, (__CVBuffer *(*)(void *))WebKit::LibWebRTCCodecs::completedDecoding(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,long long,long long,WebKit::RemoteVideoFrameProxyProperties &&)::$_1::__invoke<void>, (void (*)(void *))*(unsigned int *)(v14 + 96), *(_DWORD *)(v14 + 100), v32[0]);
    }
    uint64_t v14 = 0;
    goto LABEL_27;
  }
LABEL_29:
  if (atomic_fetch_add((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)(v14 + 8));
    return (webrtc *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  return result;
}

atomic_uchar *WebKit::LibWebRTCCodecs::completedDecodingCV(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t *a5)
{
  uint64_t v18 = a2;
  uint64_t result = (atomic_uchar *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), &v18);
  if (result)
  {
    uint64_t v10 = result;
    long long v11 = result + 40;
    while (1)
    {
      int v12 = *v11;
      if (v12) {
        break;
      }
      int v13 = *v11;
      atomic_compare_exchange_strong_explicit(v11, (unsigned __int8 *)&v13, v12 | 1, memory_order_acquire, memory_order_acquire);
      if (v13 == v12)
      {
        if (*a5)
        {
          if (*((void *)result + 4))
          {
            WebCore::VideoFrameCV::create();
            uint64_t v17 = v16;
            (*(void (**)(void, unsigned int **, void *))(**((void **)v10 + 4) + 16))(*((void *)v10 + 4), &v17, a3);
            uint64_t v14 = v17;
            uint64_t v17 = 0;
            if (v14 && atomic_fetch_add((atomic_uint *volatile)v14 + 2, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v14 + 2);
              (*(void (**)(unsigned int *))(*(void *)v14 + 8))(v14);
            }
            uint64_t result = 0;
          }
          else
          {
            uint64_t result = (atomic_uchar *)*((void *)result + 3);
            if (result) {
              uint64_t result = (atomic_uchar *)webrtc::videoDecoderTaskComplete((webrtc *)result, a3, (a4 / 1000), *a5, v9);
            }
          }
        }
        int v15 = 1;
        atomic_compare_exchange_strong_explicit(v11, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
        if (v15 != 1) {
          return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
        }
        return result;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::LibWebRTCCodecs::createEncoderInternal(uint64_t a1, char a2, uint64_t a3, void *a4, char a5, char a6, char a7, uint64_t *a8)
{
  uint64_t v15 = WTF::fastMalloc((WTF *)0x88);
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 96) = 0u;
  *(_OWORD *)(v15 + 112) = 0u;
  *(void *)(v15 + 128) = 0;
  WebKit::SharedVideoFrameWriter::SharedVideoFrameWriter((WebKit::SharedVideoFrameWriter *)(v15 + 104));
  *(_DWORD *)(v15 + 128) = 65792;
  *(void *)uint64_t v15 = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(unsigned char *)(v15 + 8) = a2;
  *(unsigned char *)(v15 + 129) = a6;
  *(unsigned char *)(v15 + 130) = a5;
  WTF::String::isolatedCopy();
  uint64_t result = *(WTF::StringImpl **)(v15 + 16);
  *(void *)(v15 + 16) = v34;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v16);
      uint64_t result = 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  *(unsigned char *)(v15 + 131) = a7;
  unint64_t v18 = a4[2];
  if (v18)
  {
    if (v18 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v19 = WTF::fastMalloc((WTF *)(16 * v18));
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v22 = (void *)*a4;
  uint64_t v20 = a4 + 1;
  int v21 = v22;
  if (v22 == v20)
  {
    unsigned int v23 = 0;
  }
  else
  {
    unsigned int v23 = 0;
    do
    {
      WTF::String::fromUTF8();
      WTF::String::fromUTF8();
      uint64_t v24 = v37[0];
      uint64_t v25 = (void *)(v19 + 16 * v23);
      *uint64_t v25 = 0;
      v25[1] = v24;
      uint64_t v26 = (void *)v21[1];
      if (v26)
      {
        do
        {
          int v27 = v26;
          uint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          int v27 = (void *)v21[2];
          BOOL v28 = *v27 == (void)v21;
          int v21 = v27;
        }
        while (!v28);
      }
      ++v23;
      int v21 = v27;
    }
    while (v27 != v20);
  }
  v37[0] = 0;
  v37[1] = 0;
  uint64_t v29 = *a8;
  *a8 = 0;
  uint64_t v30 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v30 = &unk_1EE9EFB70;
  *(void *)(v30 + 8) = a1;
  *(void *)(v30 + 16) = v15;
  *(void *)(v30 + 24) = v19;
  v35[0] = 0;
  v35[1] = 0;
  *(_DWORD *)(v30 + 32) = v18;
  *(_DWORD *)(v30 + 36) = v23;
  *(void *)(v30 + 40) = v29;
  uint64_t v36 = v30;
  WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionAndDispatchToThread(a1, &v36);
  uint64_t v32 = v36;
  uint64_t v36 = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  v35[2] = 0;
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v31);
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v33);
  return (WTF::StringImpl *)v15;
}

uint64_t WebKit::LibWebRTCCodecs::createEncoderAndWaitUntilInitialized(uint64_t a1, char a2, uint64_t a3, void *a4, long long *a5, uint64_t *a6)
{
  char v10 = *((unsigned char *)a5 + 40);
  char v11 = *((unsigned char *)a5 + 16);
  char v12 = *((unsigned char *)a5 + 41);
  long long v17 = *a5;
  *(_OWORD *)unint64_t v18 = a5[1];
  *(_OWORD *)&v18[10] = *(long long *)((char *)a5 + 26);
  uint64_t v13 = *a6;
  *a6 = 0;
  uint64_t v14 = WTF::fastMalloc((WTF *)0x40);
  *(void *)uint64_t v14 = &unk_1EE9EFB48;
  *(_OWORD *)(v14 + 8) = v17;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)v18;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)&v18[16];
  *(void *)(v14 + 56) = v13;
  uint64_t v19 = v14;
  WebKit::LibWebRTCCodecs::createEncoderInternal(a1, a2, a3, a4, v10, v11, v12, &v19);
  uint64_t result = v19;
  if (v19)
  {
    atomic_uchar *volatile v16 = *(uint64_t (**)(void))(*(void *)v19 + 8);
    return v16();
  }
  return result;
}

uint64_t WebKit::LibWebRTCCodecs::releaseEncoder(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v4 = &unk_1EE9EFC38;
  v4[1] = a1;
  v4[2] = v3;
  uint64_t v7 = v4;
  WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionAndDispatchToThread(a1, (uint64_t *)&v7);
  uint64_t v5 = (uint64_t)v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return 0;
}

uint64_t WebKit::LibWebRTCCodecs::initializeEncoderInternal(atomic_uchar *this, WebKit::LibWebRTCCodecs::Encoder *a2, __int16 a3, __int16 a4, int a5, int a6, int a7, int a8)
{
  int v27 = a5;
  int v25 = a7;
  int v26 = a6;
  int v12 = *((unsigned __int8 *)a2 + 60);
  *((_WORD *)a2 + 20) = a3;
  *((_WORD *)a2 + 21) = a4;
  *((_DWORD *)a2 + 11) = a5;
  *((_DWORD *)a2 + 12) = a6;
  *((_DWORD *)a2 + 13) = a7;
  *((_DWORD *)a2 + 14) = a8;
  if (!v12) {
    *((unsigned char *)a2 + 60) = 1;
  }
  char v13 = 0;
  uint64_t v14 = this + 40;
  int v15 = 1;
  atomic_compare_exchange_strong_explicit(this + 40, (unsigned __int8 *)&v13, 1u, memory_order_acquire, memory_order_acquire);
  if (v13) {
    MEMORY[0x19972E8D0](this + 40);
  }
  uint64_t v16 = *((void *)a2 + 12);
  unint64_t v18 = a2;
  __int16 v19 = a3;
  __int16 v20 = a4;
  int v21 = &v27;
  uint64_t v22 = &v26;
  unsigned int v23 = &v25;
  int v24 = a8;
  uint64_t result = IPC::Connection::send<Messages::LibWebRTCCodecsProxy::InitializeEncoder>(v16, (uint64_t)&v18);
  atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
  if (v15 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v14);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::LibWebRTCCodecsProxy::InitializeEncoder>(uint64_t a1, uint64_t a2)
{
  char v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v4 = 124;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  int v15 = v4;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, *(uint64_t **)a2);
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v4, *(_WORD *)(a2 + 8));
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v4, *(_WORD *)(a2 + 10));
  uint64_t v5 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v4, *(int **)(a2 + 16));
  int v6 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v5, *(int **)(a2 + 24));
  uint64_t v7 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v6, *(int **)(a2 + 32));
  int v8 = *(_DWORD *)(a2 + 40);
  char v9 = (_DWORD *)IPC::Encoder::grow(v7, 4uLL, 4);
  if (v10 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    _DWORD *v9 = v8;
    IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v15, 0, 0);
    uint64_t result = (uint64_t)v15;
    int v15 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v11);
      return WTF::fastFree(v13, v14);
    }
  }
  return result;
}

unsigned int *WebKit::LibWebRTCCodecs::encodeFrame@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t result = (unsigned int *)WebKit::LibWebRTCCodecs::encodeFrameInternal<WebCore::VideoFrame>(a1, a2, a3, a7, *(_WORD *)(a3 + 34), *(void *)(a3 + 16), *(void *)(a3 + 24), a4, &v12, a5, a6);
  if (v12)
  {
    *a8 = (uint64_t)v12;
  }
  else
  {
    *(void *)&long long v11 = "Encoding task did not complete";
    *((void *)&v11 + 1) = 31;
    v10[0] = 0;
    v10[1] = 0;
    void v10[2] = "encodeFrame";
    v10[3] = 0;
    WTF::NativePromise<void,WTF::String,0u>::createAndReject<WTF::ASCIILiteral,std::enable_if<true,void>>(&v11, (WTF::Logger::LogSiteIdentifier *)v10, a8);
    uint64_t result = v12;
    int v12 = 0;
    if (result)
    {
      if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
      }
    }
  }
  return result;
}

uint64_t WebKit::LibWebRTCCodecs::encodeFrameInternal<WebCore::VideoFrame>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, __int16 a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v18 = result;
  char v20 = 0;
  v50[0] = a10;
  v50[1] = a11;
  int v21 = (atomic_uchar *)(result + 40);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 40), (unsigned __int8 *)&v20, 1u, memory_order_acquire, memory_order_acquire);
  if (v20) {
    uint64_t result = MEMORY[0x19972E8D0](result + 40);
  }
  if (*(void *)(a2 + 96))
  {
    char v31 = a4;
    uint64_t v32 = a8;
    long long v33 = a9;
    uint64_t v22 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v22 = &unk_1EE9EFD50;
    v22[1] = a2;
    uint64_t v40 = v22;
    unsigned int v23 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v23 = &unk_1EE9EFD78;
    v23[1] = a2;
    uint64_t v34 = v23;
    WebKit::SharedVideoFrameWriter::writeBuffer((void *)(a2 + 104), a3, (uint64_t *)&v40, &v34, (uint64_t)v47);
    (*(void (**)(void *))(*v23 + 8))(v23);
    uint64_t result = (*(uint64_t (**)(void *))(*v22 + 8))(v22);
    if (v49)
    {
      uint64_t v40 = (void *)a6;
      int v41 = a7;
      char v42 = BYTE4(a7);
      char v43 = 0;
      __int16 v44 = a5;
      v45[0] = 0;
      int v46 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)v45, (uint64_t)v47);
      int v24 = *(os_unfair_lock_s **)(a2 + 96);
      uint64_t v34 = (void *)a2;
      long long v35 = (uint64_t *)&v40;
      *(void *)&long long v36 = v32;
      *((void *)&v36 + 1) = v50;
      LOBYTE(v37) = v31;
      IPC::Connection::sendWithPromisedReply<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::EncodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(&v39, v24, (uint64_t)&v34);
      uint64_t v25 = v39;
      uint64_t v26 = *(void *)(v18 + 96);
      uint64_t v27 = WTF::fastMalloc((WTF *)0x50);
      uint64_t v28 = *(void *)(v26 + 32);
      v26 += 32;
      (*(void (**)(uint64_t))(v28 + 32))(v26);
      uint64_t v29 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v29 = &unk_1EE9EFDA0;
      *(_DWORD *)(v27 + 8) = 1;
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0;
      *(void *)(v27 + 40) = "encodeFrameInternal";
      *(void *)(v27 + 48) = 0;
      *(_WORD *)(v27 + 56) = 0;
      *(void *)uint64_t v27 = &unk_1EE9EF548;
      *(void *)(v27 + 64) = 0;
      *(void *)(v27 + 72) = v29;
      atomic_fetch_add((atomic_uint *volatile)(v25 + 8), 1u);
      uint64_t v34 = (void *)v25;
      long long v35 = (uint64_t *)v27;
      long long v36 = 0uLL;
      int v37 = "encodeFrameInternal";
      uint64_t v38 = 0;
      WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCommand<WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,WTF::String,0u>>>::completionPromise(v33, (uint64_t *)&v34);
      WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCommand<WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,WTF::String,0u>>>::~ThenCommand((uint64_t *)&v34);
      uint64_t result = v39;
      uint64_t v39 = 0;
      if (result && atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)(result + 8));
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      }
      if (v46 != -1) {
        uint64_t result = ((uint64_t (*)(void **, unsigned char *))off_1EE9EF700[v46])(&v34, v45);
      }
      if (v49 && v48 != -1) {
        uint64_t result = ((uint64_t (*)(void **, unsigned char *))off_1EE9EF700[v48])(&v40, v47);
      }
    }
    else
    {
      *a9 = 0;
    }
  }
  else
  {
    *a9 = 0;
  }
  int v30 = 1;
  atomic_compare_exchange_strong_explicit(v21, (unsigned __int8 *)&v30, 0, memory_order_release, memory_order_relaxed);
  if (v30 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v21);
  }
  return result;
}

void *WebKit::LibWebRTCCodecs::flushEncoder@<X0>(atomic_uchar *this@<X0>, WebKit::LibWebRTCCodecs::Encoder *a2@<X1>, uint64_t *a3@<X8>)
{
  char v6 = 0;
  uint64_t v7 = this + 40;
  atomic_compare_exchange_strong_explicit(this + 40, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x19972E8D0](this + 40);
  }
  int v8 = (atomic_uchar *volatile *)*((void *)a2 + 12);
  if (!v8)
  {
    int v37 = 0;
    *(void *)uint64_t v38 = 0;
    *(void *)&v38[8] = "flushEncoder";
    *(void *)&v38[16] = 0;
    uint64_t result = WTF::NativePromise<void,void,0u>::createAndResolve<std::enable_if<true,void>>((WTF::NativePromiseBase *)&v37, a3);
    goto LABEL_25;
  }
  char v9 = 0;
  atomic_uchar *volatile v10 = *v8;
  int v11 = 1;
  atomic_compare_exchange_strong_explicit(*v8, (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
  if (v9) {
    MEMORY[0x19972E8D0](v10);
  }
  ++*((void *)v10 + 1);
  atomic_compare_exchange_strong_explicit(v10, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
  int v37 = 0;
  *(void *)uint64_t v38 = 0;
  *(void *)&v38[8] = "sendWithPromisedReply";
  *(void *)&v38[16] = 0;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)v41, 0, (WTF::Logger::LogSiteIdentifier *)&v37);
  int v12 = (atomic_uint *)v41[0];
  if (v41[0])
  {
    atomic_fetch_add((atomic_uint *volatile)(v41[0] + 8), 1u);
    uint64_t v13 = v41[0];
  }
  else
  {
    uint64_t v13 = 0;
  }
  v41[0] = 0;
  *(_OWORD *)uint64_t v38 = *(_OWORD *)&v41[1];
  *(_OWORD *)&v38[16] = *(_OWORD *)&v41[3];
  uint64_t v14 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v14 = &unk_1EE9EFDC8;
  *(void *)(v14 + 8) = v13;
  int v37 = 0;
  long long v15 = *(_OWORD *)&v38[16];
  *(_OWORD *)(v14 + 16) = *(_OWORD *)v38;
  *(_OWORD *)(v14 + 32) = v15;
  v40[0] = v14;
  v40[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer((uint64_t *)&v37);
  uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v16 = 123;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  int v37 = v16;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v16, (uint64_t *)a2);
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher((os_unfair_lock_s *)v8, &v37, v40, 0, 0);
  uint64_t v18 = v37;
  int v37 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v17);
    WTF::fastFree(v34, v35);
  }
  uint64_t v19 = v40[0];
  v40[0] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(v41);
  uint64_t v20 = *((void *)this + 12);
  *(_OWORD *)int v41 = 0uLL;
  uint64_t v21 = WTF::fastMalloc((WTF *)0x50);
  uint64_t v22 = *(void *)(v20 + 32);
  v20 += 32;
  (*(void (**)(uint64_t))(v22 + 32))(v20);
  unsigned int v23 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v23 = &unk_1EE9EF5A8;
  *(_DWORD *)(v21 + 8) = 1;
  *(void *)(v21 + 16) = v20;
  *(void *)(v21 + 24) = 0;
  *(void *)(v21 + 32) = 0;
  *(void *)(v21 + 40) = "flushEncoder";
  *(void *)(v21 + 48) = 0;
  *(_WORD *)(v21 + 56) = 0;
  *(void *)uint64_t v21 = &unk_1EE9EF470;
  *(void *)(v21 + 64) = 0;
  *(void *)(v21 + 72) = v23;
  atomic_fetch_add(v12 + 2, 1u);
  int v37 = (IPC::Encoder *)v12;
  *(void *)uint64_t v38 = v21;
  *(_OWORD *)&v38[8] = *(_OWORD *)v41;
  *(void *)&v38[24] = "flushEncoder";
  uint64_t v39 = 0;
  WTF::NativePromise<void,IPC::Error,0u>::ThenCommand<WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>>::completionPromise(a3, (uint64_t *)&v37);
  uint64_t result = WTF::NativePromise<void,IPC::Error,0u>::ThenCommand<WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)&v37);
  if (v12 && atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v12 + 2);
    uint64_t result = (void *)(*(uint64_t (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
  }
  char v25 = 0;
  atomic_uchar *volatile v26 = *v8;
  atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v25, 1u, memory_order_acquire, memory_order_acquire);
  if (v25) {
    uint64_t result = (void *)MEMORY[0x19972E8D0](v26);
  }
  uint64_t v27 = *((void *)v26 + 1);
  uint64_t v28 = v27 - 1;
  *((void *)v26 + 1) = v27 - 1;
  if (v27 == 1)
  {
    uint64_t v36 = *((void *)v26 + 2);
    uint64_t v30 = *((void *)v26 + 3);
    *((void *)v26 + 3) = 0;
    BOOL v29 = v36 == 0;
  }
  else
  {
    BOOL v29 = 0;
    uint64_t v30 = 0;
  }
  int v31 = 1;
  atomic_compare_exchange_strong_explicit(v26, (unsigned __int8 *)&v31, 0, memory_order_release, memory_order_relaxed);
  if (v31 == 1)
  {
    if (v28) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t result = (void *)WTF::Lock::unlockSlow((WTF::Lock *)v26);
    if (v28) {
      goto LABEL_25;
    }
  }
  uint64_t v32 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v32 = &unk_1EE9B37E8;
  *(void *)(v32 + 8) = v26;
  *(void *)(v32 + 16) = v30;
  *(unsigned char *)(v32 + 24) = v29;
  int v37 = (IPC::Encoder *)v32;
  WTF::ensureOnMainRunLoop();
  uint64_t result = v37;
  int v37 = 0;
  if (result) {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*(void *)result + 8))(result);
  }
LABEL_25:
  int v33 = 1;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
  if (v33 != 1) {
    return (void *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  return result;
}

uint64_t WebKit::LibWebRTCCodecs::registerEncodedVideoFrameCallback(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v5 = 0;
  char v6 = (atomic_uchar *)(a2 + 88);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 88), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a2 + 88);
  }
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t result = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = v7;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  int v9 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

uint64_t WebKit::LibWebRTCCodecs::registerEncoderDescriptionCallback(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v5 = 0;
  char v6 = (atomic_uchar *)(a2 + 88);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 88), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a2 + 88);
  }
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t result = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = v7;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  int v9 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

unsigned int *WebKit::LibWebRTCCodecs::setEncodeRates@<X0>(atomic_uchar *this@<X0>, WebKit::LibWebRTCCodecs::Encoder *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, WebKit::LibWebRTCCodecs::Encoder **a5@<X8>)
{
  char v10 = 0;
  int v11 = this + 40;
  atomic_compare_exchange_strong_explicit(this + 40, (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
  if (v10) {
    MEMORY[0x19972E8D0](this + 40);
  }
  int v12 = (os_unfair_lock_s *)*((void *)a2 + 12);
  if (v12)
  {
    *((unsigned char *)a2 + 128) = 1;
    uint64_t v34 = a2;
    *(void *)&long long v35 = __PAIR64__(a4, a3);
    IPC::Connection::sendWithPromisedReply<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::SetEncodeRates,WTF::NativePromise<void,IPC::Error,0u>>((uint64_t *)&v28, v12, (uint64_t)&v34);
    uint64_t v13 = (uint64_t)v28;
    uint64_t v14 = *((void *)this + 12);
    long long v27 = 0uLL;
    uint64_t v15 = WTF::fastMalloc((WTF *)0x50);
    uint64_t v16 = *(void *)(v14 + 32);
    v14 += 32;
    (*(void (**)(uint64_t))(v16 + 32))(v14);
    long long v17 = (void *)WTF::fastMalloc((WTF *)0x10);
    *long long v17 = &unk_1EE9EF5D0;
    *(_DWORD *)(v15 + 8) = 1;
    *(void *)(v15 + 16) = v14;
    *(void *)(v15 + 24) = 0;
    *(void *)(v15 + 32) = 0;
    *(void *)(v15 + 40) = "setEncodeRates";
    *(void *)(v15 + 48) = 0;
    *(_WORD *)(v15 + 56) = 0;
    *(void *)uint64_t v15 = &unk_1EE9EF470;
    *(void *)(v15 + 64) = 0;
    *(void *)(v15 + 72) = v17;
    atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
    *(void *)&long long v29 = v13;
    *((void *)&v29 + 1) = v15;
    long long v30 = v27;
    int v31 = "setEncodeRates";
    *(void *)&long long v32 = 0;
    WTF::NativePromise<void,IPC::Error,0u>::ThenCommand<WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>>::completionPromise(a5, (uint64_t *)&v29);
    WTF::NativePromise<void,IPC::Error,0u>::ThenCommand<WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<false,void>>::~ThenCommand((uint64_t *)&v29);
    uint64_t result = v28;
    uint64_t v28 = 0;
    if (result && atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 16))(result);
    }
  }
  else
  {
    long long v29 = 0uLL;
    *(void *)&long long v30 = "setEncodeRates";
    *((void *)&v30 + 1) = 0;
    WTF::NativePromiseProducer<void,void,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v34, 0, (WTF::Logger::LogSiteIdentifier *)&v29);
    uint64_t v19 = v34;
    if (v34)
    {
      atomic_fetch_add((atomic_uint *volatile)v34 + 2, 1u);
      uint64_t v20 = v34;
    }
    else
    {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(void *)a2;
    *a5 = v19;
    *(void *)&long long v29 = this;
    *((void *)&v29 + 1) = (char *)a2 + 128;
    *(void *)&long long v30 = v21;
    *((void *)&v30 + 1) = __PAIR64__(a4, a3);
    uint64_t v34 = 0;
    long long v32 = v35;
    long long v33 = v36;
    uint64_t v22 = WTF::fastMalloc((WTF *)0x50);
    *(void *)uint64_t v22 = &unk_1EE9EFE68;
    long long v23 = v29;
    *(_OWORD *)(v22 + 24) = v30;
    *(_OWORD *)(v22 + 8) = v23;
    int v31 = 0;
    *(void *)(v22 + 40) = v20;
    long long v24 = v33;
    *(_OWORD *)(v22 + 48) = v32;
    *(_OWORD *)(v22 + 64) = v24;
    *(void *)&long long v27 = v22;
    WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionAndDispatchToThread((uint64_t)this, (uint64_t *)&v27);
    uint64_t v25 = v27;
    *(void *)&long long v27 = 0;
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
    WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer((uint64_t *)&v31);
    uint64_t result = (unsigned int *)WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer((uint64_t *)&v34);
  }
  int v26 = 1;
  atomic_compare_exchange_strong_explicit(v11, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
  if (v26 != 1) {
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
  }
  return result;
}

uint64_t *IPC::Connection::sendWithPromisedReply<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::SetEncodeRates,WTF::NativePromise<void,IPC::Error,0u>>(uint64_t *a1, os_unfair_lock_s *a2, uint64_t a3)
{
  long long v27 = 0;
  *(void *)&long long v28 = 0;
  *((void *)&v28 + 1) = "sendWithPromisedReply";
  *(void *)&long long v29 = 0;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v24, 0, (WTF::Logger::LogSiteIdentifier *)&v27);
  uint64_t v6 = v24;
  if (v24)
  {
    atomic_fetch_add((atomic_uint *volatile)(v24 + 8), 1u);
    uint64_t v7 = v24;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a1 = v6;
  uint64_t v24 = 0;
  long long v28 = v25;
  long long v29 = v26;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v8 = &unk_1EE9EFE18;
  *(void *)(v8 + 8) = v7;
  long long v27 = 0;
  long long v9 = v29;
  *(_OWORD *)(v8 + 16) = v28;
  *(_OWORD *)(v8 + 32) = v9;
  v23[0] = v8;
  v23[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer((uint64_t *)&v27);
  char v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v10 = 128;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  long long v27 = v10;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v10, *(uint64_t **)a3);
  int v11 = *(_DWORD *)(a3 + 8);
  int v12 = (_DWORD *)IPC::Encoder::grow(v10, 4uLL, 4);
  if (v13 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19912DB28);
  }
  _DWORD *v12 = v11;
  int v14 = *(_DWORD *)(a3 + 12);
  uint64_t v15 = (_DWORD *)IPC::Encoder::grow(v10, 4uLL, 4);
  if (v16 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x19912DB48);
  }
  *uint64_t v15 = v14;
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(a2, &v27, v23, 0, 0);
  uint64_t v18 = v27;
  long long v27 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v17);
    WTF::fastFree(v21, v22);
  }
  uint64_t v19 = v23[0];
  v23[0] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  return WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(&v24);
}

uint64_t WebKit::LibWebRTCCodecs::completedEncoding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 48), a2);
  if (result)
  {
    long long v9 = (atomic_uchar *)(result + 88);
    while (1)
    {
      int v10 = *v9;
      if (v10) {
        break;
      }
      int v11 = *v9;
      atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v11, v10 | 1, memory_order_acquire, memory_order_acquire);
      if (v11 == v10)
      {
        uint64_t v12 = *(void *)(result + 72);
        if (v12)
        {
          int v13 = *(_DWORD *)(a5 + 60);
          uint64_t v14 = v13 & 0xFFFFFF00;
          unint64_t v15 = (unint64_t)(v13 & 0x80000000) >> 31;
          BOOL v16 = v13 < 0;
          if (v13 < 0) {
            uint64_t v17 = 0;
          }
          else {
            uint64_t v17 = *(_DWORD *)(a5 + 60);
          }
          if (v16) {
            uint64_t v14 = 0;
          }
          uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, BOOL, void, void, void, unint64_t))(*(void *)v12 + 16))(*(void *)(result + 72), a3, a4, *(_DWORD *)(a5 + 48) == 3, *(void *)(a5 + 8), *(void *)(a5 + 16), *(void *)(a5 + 24), (v14 & 0xFFFFFFFEFFFFFFFFLL | ((v15 & 1) << 32) | v17) ^ 0x100000000);
        }
        else if (*(void *)(result + 64))
        {
          uint64_t result = webrtc::encoderVideoTaskComplete();
        }
        int v18 = 1;
        atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
        if (v18 != 1)
        {
          return WTF::Lock::unlockSlow((WTF::Lock *)v9);
        }
        return result;
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::LibWebRTCCodecs::setEncodingConfiguration(uint64_t a1, uint64_t a2, char *a3, WTF *a4, uint64_t a5, char a6)
{
  uint64_t result = (atomic_uchar *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 48), a2);
  if (result)
  {
    int v11 = result;
    uint64_t v12 = result + 88;
    while (1)
    {
      int v13 = *v12;
      if (v13) {
        break;
      }
      int v14 = *v12;
      atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v14, v13 | 1, memory_order_acquire, memory_order_acquire);
      if (v14 == v13)
      {
        if (*((void *)result + 10))
        {
          LOBYTE(v39) = 0;
          char v41 = 0;
          if (a4)
          {
            int v26 = (int)a4;
            if ((unint64_t)a4 >> 32)
            {
              __break(0xC471u);
              return result;
            }
            unint64_t v15 = (WTF::StringImpl *)WTF::fastMalloc(a4);
            int v25 = (int)a4;
            uint64_t v24 = v15;
            do
            {
              char v16 = *a3++;
              *(unsigned char *)unint64_t v15 = v16;
              unint64_t v15 = (WTF::StringImpl *)((char *)v15 + 1);
              a4 = (WTF *)((char *)a4 - 1);
            }
            while (a4);
            std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)&v39, (uint64_t)&v24);
            int v18 = v24;
            if (v24)
            {
              uint64_t v24 = 0;
              int v25 = 0;
              WTF::fastFree(v18, v17);
            }
            BOOL v19 = v41 == 0;
          }
          else
          {
            BOOL v19 = 1;
          }
          char v27 = 0;
          char v28 = 0;
          char v29 = 0;
          char v30 = 0;
          char v31 = 0;
          char v32 = 0;
          char v33 = 0;
          LOBYTE(v34) = 0;
          char v36 = 0;
          uint64_t v24 = 0;
          LOBYTE(v25) = 0;
          if (!v19)
          {
            uint64_t v34 = v39;
            uint64_t v20 = v40;
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v35 = v20;
            char v36 = 1;
          }
          uint64_t v37 = a5;
          char v38 = a6;
          (*(void (**)(void, WTF::StringImpl **))(**((void **)v11 + 10) + 16))(*((void *)v11 + 10), &v24);
          if (v36)
          {
            long long v23 = v34;
            if (v34)
            {
              uint64_t v34 = 0;
              LODWORD(v35) = 0;
              WTF::fastFree(v23, v21);
            }
          }
          uint64_t result = (atomic_uchar *)v24;
          uint64_t v24 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              uint64_t result = (atomic_uchar *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v21);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
          if (v41)
          {
            uint64_t result = (atomic_uchar *)v39;
            if (v39)
            {
              uint64_t v39 = 0;
              LODWORD(v40) = 0;
              uint64_t result = (atomic_uchar *)WTF::fastFree((WTF *)result, v21);
            }
          }
        }
        int v22 = 1;
        atomic_compare_exchange_strong_explicit(v12, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
        if (v22 != 1) {
          return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
        }
        return result;
      }
    }
  }
  return result;
}

void WebKit::LibWebRTCCodecs::gpuProcessConnectionDidClose(WebKit::LibWebRTCCodecs *this, WebKit::GPUProcessConnection *a2)
{
  char v3 = 0;
  char v4 = (char *)this + 57;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 57, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    MEMORY[0x19972E8D0]((char *)this + 57, a2);
  }
  char v5 = (uint64_t *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  IPC::Connection::removeWorkQueueMessageReceiver((uint64_t)v5, 0x14u, 0);
  if (v5)
  {
    char v6 = 0;
    uint64_t v7 = *v5;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (v6) {
      MEMORY[0x19972E8D0](v7);
    }
    uint64_t v8 = *(void *)(v7 + 8);
    uint64_t v9 = v8 - 1;
    *(void *)(v7 + 8) = v8 - 1;
    if (v8 == 1)
    {
      uint64_t v24 = *(void *)(v7 + 16);
      uint64_t v11 = *(void *)(v7 + 24);
      *(void *)(v7 + 24) = 0;
      BOOL v10 = v24 == 0;
    }
    else
    {
      BOOL v10 = 0;
      uint64_t v11 = 0;
    }
    int v12 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 == 1)
    {
      if (v9) {
        goto LABEL_12;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
      if (v9) {
        goto LABEL_12;
      }
    }
    uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v13 = &unk_1EE9B37E8;
    *(void *)(v13 + 8) = v7;
    *(void *)(v13 + 16) = v11;
    *(unsigned char *)(v13 + 24) = v10;
    int v25 = (void *)v13;
    WTF::ensureOnMainRunLoop();
    int v14 = v25;
    int v25 = 0;
    if (v14) {
      (*(void (**)(void *))(*v14 + 8))(v14);
    }
  }
LABEL_12:
  unsigned __int8 v15 = atomic_load((unsigned __int8 *)this + 56);
  if (v15)
  {
    WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionOnMainThreadWithLock(this);
    uint64_t v16 = *((void *)this + 12);
    uint64_t v17 = (atomic_uchar *volatile *)*((void *)this + 8);
    if (v17)
    {
      char v18 = 0;
      atomic_uchar *volatile v19 = *v17;
      int v20 = 1;
      atomic_compare_exchange_strong_explicit(*v17, (unsigned __int8 *)&v18, 1u, memory_order_acquire, memory_order_acquire);
      if (v18) {
        MEMORY[0x19972E8D0](v19);
      }
      ++*((void *)v19 + 1);
      atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v20, 0, memory_order_release, memory_order_relaxed);
      if (v20 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v19);
      }
    }
    uint64_t v21 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v21 = &unk_1EE9EFEB8;
    v21[1] = this;
    v21[2] = v17;
    int v25 = v21;
    (*(void (**)(uint64_t, void **))(*(void *)v16 + 32))(v16, &v25);
    int v22 = v25;
    int v25 = 0;
    if (v22) {
      (*(void (**)(void *))(*v22 + 8))(v22);
    }
  }
  int v23 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
  if (v23 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
}

void non-virtual thunk to'WebKit::LibWebRTCCodecs::gpuProcessConnectionDidClose(WebKit::LibWebRTCCodecs *this, WebKit::GPUProcessConnection *a2)
{
}

uint64_t WebKit::LibWebRTCCodecs::setLoggingLevel(uint64_t a1, __int16 a2)
{
  char v3 = 0;
  char v8 = a2;
  *(_WORD *)(a1 + 131) = a2 | 0x100;
  char v4 = (atomic_uchar *)(a1 + 57);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    uint64_t v7 = &v8;
    uint64_t result = IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetRTCLoggingLevel>(result, &v7, 0, 0, 0);
  }
  int v6 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  return result;
}

uint64_t WebKit::LibWebRTCCodecs::setEncoderConnection(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  char v3 = *(atomic_uchar *volatile **)(result + 96);
  *(void *)(result + 96) = v2;
  if (v3)
  {
    char v4 = 0;
    atomic_uchar *volatile v5 = *v3;
    atomic_compare_exchange_strong_explicit(*v3, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      uint64_t result = MEMORY[0x19972E8D0](v5);
    }
    uint64_t v6 = *((void *)v5 + 1);
    uint64_t v7 = v6 - 1;
    *((void *)v5 + 1) = v6 - 1;
    if (v6 == 1)
    {
      uint64_t v12 = *((void *)v5 + 2);
      uint64_t v9 = *((void *)v5 + 3);
      *((void *)v5 + 3) = 0;
      BOOL v8 = v12 == 0;
    }
    else
    {
      BOOL v8 = 0;
      uint64_t v9 = 0;
    }
    int v10 = 1;
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 == 1)
    {
      if (v7) {
        return result;
      }
    }
    else
    {
      uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (v7) {
        return result;
      }
    }
    uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v11 = &unk_1EE9B37E8;
    *(void *)(v11 + 8) = v5;
    *(void *)(v11 + 16) = v9;
    *(unsigned char *)(v11 + 24) = v8;
    uint64_t v13 = v11;
    WTF::ensureOnMainRunLoop();
    uint64_t result = v13;
    if (v13) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  return result;
}

unsigned int *WebKit::LibWebRTCCodecs::setDecoderConnection(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v3 = (uint64_t)a2;
  v113[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a3;
  *a3 = 0;
  atomic_uchar *volatile v5 = (atomic_uchar *volatile *)*((void *)a2 + 6);
  *((void *)a2 + 6) = v4;
  if (v5)
  {
    char v6 = 0;
    atomic_uchar *volatile v7 = *v5;
    atomic_compare_exchange_strong_explicit(*v5, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (v6) {
      MEMORY[0x19972E8D0](v7);
    }
    uint64_t v8 = *((void *)v7 + 1);
    uint64_t v9 = v8 - 1;
    *((void *)v7 + 1) = v8 - 1;
    if (v8 == 1)
    {
      uint64_t v72 = *((void *)v7 + 2);
      uint64_t v11 = *((void *)v7 + 3);
      *((void *)v7 + 3) = 0;
      BOOL v10 = v72 == 0;
    }
    else
    {
      BOOL v10 = 0;
      uint64_t v11 = 0;
    }
    int v12 = 1;
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 == 1)
    {
      if (!v9) {
        goto LABEL_8;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
      if (!v9)
      {
LABEL_8:
        uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v13 = &unk_1EE9B37E8;
        *(void *)(v13 + 8) = v7;
        *(void *)(v13 + 16) = v11;
        *(unsigned char *)(v13 + 24) = v10;
        *(void *)&long long buf = v13;
        WTF::ensureOnMainRunLoop();
        uint64_t v14 = buf;
        *(void *)&long long buf = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
      }
    }
  }
  uint64_t v15 = *(void *)(v3 + 56);
  uint64_t v78 = v15;
  unsigned int v16 = *(_DWORD *)(v3 + 68);
  int v79 = *(_DWORD *)(v3 + 64);
  unsigned int v80 = v16;
  *(void *)&long long buf = 0;
  *(void *)(v3 + 56) = 0;
  *((void *)&buf + 1) = 0;
  *(void *)(v3 + 64) = 0;
  WTF::Vector<WebKit::LibWebRTCCodecs::Decoder::EncodedFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&buf, a2);
  uint64_t v18 = a1;
  if (!v16) {
    return WTF::Vector<WebKit::LibWebRTCCodecs::Decoder::EncodedFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v78, v17);
  }
  uint64_t v75 = v15 + 80 * v16;
  uint64_t v73 = v3;
  while (1)
  {
    WebKit::LibWebRTCCodecs::sendFrameToDecode(&v77, v18, v3, *(void *)v15, *(const void **)(v15 + 8), *(unsigned int *)(v15 + 20), *(unsigned __int16 *)(v15 + 24), *(unsigned __int16 *)(v15 + 26));
    uint64_t v19 = (uint64_t)v77;
    v76[0] = 0;
    v76[1] = 0;
    v76[2] = "setDecoderConnection";
    v76[3] = 0;
    int v20 = *(atomic_uint **)(v15 + 32);
    if (v20) {
      atomic_fetch_add(v20 + 2, 1u);
    }
    BOOL isSettled = WTF::NativePromise<void,WTF::String,0u>::isSettled(v19);
    LOBYTE(buf) = isSettled;
    int v22 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
    if (*v22 && v22[16] >= 4u) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [22],WTF::NativePromise<void,WTF::String,0u>,char [17],WTF::NativePromise<void,WTF::String,0u>,char [12],BOOL,char [2]>((uint64_t)v22, (WTF::Logger::LogSiteIdentifier *)v76, v19, (uint64_t)v20, " isSettled:");
    }
    if (v20 && atomic_fetch_add(v20 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v20 + 2);
      (*(void (**)(atomic_uint *))(*(void *)v20 + 16))(v20);
    }
    unsigned __int8 v23 = atomic_load((unsigned __int8 *)(v19 + 121));
    WTF::NativePromise<void,WTF::String,0u>::setDispatchMode(*(atomic_uchar **)(v15 + 32), v23, (WTF::Logger::LogSiteIdentifier *)v76);
    uint64_t v24 = *(void *)(v15 + 32);
    *(void *)(v15 + 32) = 0;
    long long v25 = *(_OWORD *)(v15 + 56);
    long long v83 = *(_OWORD *)(v15 + 40);
    long long v84 = v25;
    uint64_t v26 = *(void *)(v15 + 72);
    *(void *)(v15 + 72) = 0;
    long long v81 = 0uLL;
    uint64_t v27 = WTF::fastMalloc((WTF *)0x50);
    uint64_t v28 = WTF::fastMalloc((WTF *)0x38);
    char v29 = 0;
    *(void *)uint64_t v28 = &unk_1EE9EFF30;
    *(void *)(v28 + 8) = v24;
    long long v30 = v84;
    *(_OWORD *)(v28 + 16) = v83;
    *(_OWORD *)(v28 + 32) = v30;
    uint64_t v82 = 0;
    uint64_t v85 = 0;
    *(void *)(v28 + 48) = v26;
    *(_DWORD *)(v27 + 8) = 1;
    *(void *)(v27 + 16) = 0;
    *(void *)(v27 + 24) = 0;
    *(void *)(v27 + 32) = 0;
    *(void *)(v27 + 40) = "chainTo";
    *(void *)(v27 + 48) = 0;
    *(_WORD *)(v27 + 56) = 0;
    *(void *)uint64_t v27 = &unk_1EE9EFF58;
    *(void *)(v27 + 64) = 0;
    *(void *)(v27 + 72) = v28;
    atomic_fetch_add((atomic_uint *volatile)(v19 + 8), 1u);
    long long v88 = v81;
    uint64_t v89 = "chainTo";
    uint64_t v90 = 0;
    uint64_t v86 = (unsigned int *)v19;
    int v87 = 0;
    char v31 = (WTF::NativePromiseBase *)(v19 + 48);
    v91 = (WTF::NativePromiseBase *)v27;
    uint64_t v92 = (WTF::Lock *)(v19 + 48);
    char v93 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v19 + 48), (unsigned __int8 *)&v29, 1u, memory_order_acquire, memory_order_acquire);
    if (v29) {
      char v31 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
    }
    *(unsigned char *)(v19 + 120) = 1;
    char v32 = (unsigned char *)WTF::NativePromiseBase::logChannel(v31);
    if (*v32)
    {
      uint64_t v34 = v32;
      if (v32[16] >= 4u) {
        break;
      }
    }
LABEL_84:
    if (*(_DWORD *)(v19 + 72))
    {
      WTF::NativePromise<void,WTF::String,0u>::ThenCallbackBase::dispatch(v91, v19, (atomic_uchar *volatile *)&v92);
    }
    else
    {
      uint64_t v61 = *(unsigned int *)(v19 + 92);
      if (v61 == *(_DWORD *)(v19 + 88))
      {
        unint64_t v62 = (WTF::NativePromiseBase **)WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v19 + 80, v61 + 1, (unint64_t)&v91);
        uint64_t v61 = *(unsigned int *)(v19 + 92);
        int v63 = v61 + 1;
        uint64_t v64 = *(void *)(v19 + 80);
        uint64_t v65 = *v62;
        *unint64_t v62 = 0;
      }
      else
      {
        int v63 = v61 + 1;
        uint64_t v64 = *(void *)(v19 + 80);
        uint64_t v65 = v91;
        v91 = 0;
      }
      *(void *)(v64 + 8 * v61) = v65;
      *(_DWORD *)(v19 + 92) = v63;
    }
    if (v93)
    {
      uint64_t v66 = v92;
      int v67 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v92, (unsigned __int8 *)&v67, 0, memory_order_release, memory_order_relaxed);
      if (v67 != 1) {
        WTF::Lock::unlockSlow(v66);
      }
    }
    unint64_t v68 = (unsigned int *)v91;
    v91 = 0;
    if (v68 && atomic_fetch_add((atomic_uint *volatile)v68 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v68 + 2);
      (*(void (**)(unsigned int *))(*(void *)v68 + 8))(v68);
    }
    unint64_t v69 = v87;
    int v87 = 0;
    if (v69 && atomic_fetch_add((atomic_uint *volatile)v69 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v69 + 2);
      (*(void (**)(unsigned int *))(*(void *)v69 + 8))(v69);
    }
    unint64_t v70 = v86;
    uint64_t v86 = 0;
    if (v70 && atomic_fetch_add((atomic_uint *volatile)v70 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v70 + 2);
      (*(void (**)(unsigned int *))(*(void *)v70 + 16))(v70);
    }
    WTF::NativePromiseProducer<void,WTF::String,16u>::~NativePromiseProducer(&v82, v33);
    unint64_t v71 = v77;
    int v77 = 0;
    if (v71)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v71 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v71 + 2);
        (*(void (**)(unsigned int *))(*(void *)v71 + 16))(v71);
      }
    }
    v15 += 80;
    if (v15 == v75) {
      return WTF::Vector<WebKit::LibWebRTCCodecs::Decoder::EncodedFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v78, v17);
    }
  }
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v102, (WTF::Logger::LogSiteIdentifier *)&v88);
  WTF::String::String((WTF::String *)&v101, " invoking maybeSettle() [");
  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v100, v19);
  WTF::String::String((WTF::String *)&v99, " callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v97, " isNothing:");
  WTF::LogArgument<BOOL>::toString<BOOL>(&v96);
  WTF::String::String((WTF::String *)&v95, "]");
  uint64_t result = (unsigned int *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v102, (uint64_t *)&v101, (uint64_t *)&v100, (uint64_t *)&v99, (uint64_t *)&v98, (uint64_t *)&v97, (uint64_t *)&v96, (uint64_t *)&v95, &v103);
  if (v103)
  {
    uint64_t v37 = v95;
    v95 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2) {
        WTF::StringImpl::destroy(v37, v36);
      }
      else {
        *(_DWORD *)v37 -= 2;
      }
    }
    char v38 = v96;
    v96 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2) {
        WTF::StringImpl::destroy(v38, v36);
      }
      else {
        *(_DWORD *)v38 -= 2;
      }
    }
    uint64_t v39 = v97;
    v97 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2) {
        WTF::StringImpl::destroy(v39, v36);
      }
      else {
        *(_DWORD *)v39 -= 2;
      }
    }
    uint64_t v40 = v98;
    v98 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, v36);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
    }
    char v41 = v99;
    v99 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2) {
        WTF::StringImpl::destroy(v41, v36);
      }
      else {
        *(_DWORD *)v41 -= 2;
      }
    }
    char v42 = v100;
    v100 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2) {
        WTF::StringImpl::destroy(v42, v36);
      }
      else {
        *(_DWORD *)v42 -= 2;
      }
    }
    char v43 = v101;
    v101 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2) {
        WTF::StringImpl::destroy(v43, v36);
      }
      else {
        *(_DWORD *)v43 -= 2;
      }
    }
    __int16 v44 = v102;
    v102 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy(v44, v36);
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
    uint64_t v45 = *((void *)v34 + 4);
    int v46 = (WTF *)os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
    if (v46)
    {
      WTF::String::utf8();
      long long v47 = v94[0] ? (char *)v94[0] + 16 : 0;
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v47;
      _os_log_impl(&dword_1985F2000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      int v46 = v94[0];
      v94[0] = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 1) {
          int v46 = (WTF *)WTF::fastFree(v46, v33);
        }
        else {
          --*(_DWORD *)v46;
        }
      }
    }
    int v48 = (atomic_uchar *)MEMORY[0x1E4F30998];
    if (*v34 && v34[16] >= 4u)
    {
      while (1)
      {
        int v49 = *v48;
        if (v49) {
          break;
        }
        int v50 = *v48;
        atomic_compare_exchange_strong_explicit(v48, (unsigned __int8 *)&v50, v49 | 1, memory_order_acquire, memory_order_acquire);
        if (v50 == v49)
        {
          uint64_t v51 = WTF::Logger::observers(v46);
          uint64_t v52 = *(unsigned int *)(v51 + 12);
          if (v52)
          {
            long long v53 = *(uint64_t **)v51;
            uint64_t v54 = *(void *)v51 + 8 * v52;
            do
            {
              uint64_t v55 = *v53;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&buf + 1, (WTF::Logger::LogSiteIdentifier *)&v88);
              int v105 = 0;
              WTF::String::String((WTF::String *)v106, " invoking maybeSettle() [");
              v106[2] = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v107, v19);
              int v108 = 0;
              WTF::String::String((WTF::String *)v109, " callback:");
              v109[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v109[6] = 0;
              WTF::String::String((WTF::String *)v110, " isNothing:");
              v110[2] = 0;
              WTF::LogArgument<BOOL>::toString<BOOL>(&v111);
              int v112 = 0;
              WTF::String::String((WTF::String *)v113, "]");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v94, (uint64_t)&buf, 8uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v55 + 16))(v55, v34, 4, v94);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v94, v56);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                unint64_t v58 = *(WTF::StringImpl **)((char *)&buf + i);
                *(void *)((char *)&buf + i) = 0;
                if (v58)
                {
                  if (*(_DWORD *)v58 == 2) {
                    WTF::StringImpl::destroy(v58, v33);
                  }
                  else {
                    *(_DWORD *)v58 -= 2;
                  }
                }
              }
              ++v53;
            }
            while (v53 != (uint64_t *)v54);
          }
          int v59 = 1;
          atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v59, 0, memory_order_release, memory_order_relaxed);
          uint64_t v3 = v73;
          uint64_t v18 = a1;
          if (v59 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    unint64_t v60 = v103;
    v103 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2) {
        WTF::StringImpl::destroy(v60, v33);
      }
      else {
        *(_DWORD *)v60 -= 2;
      }
    }
    goto LABEL_84;
  }
  __break(0xC471u);
  return result;
}

IPC::Encoder *WebKit::MediaRecorderPrivate::startRecording(uint64_t a1, WebCore::MediaStreamPrivate *a2)
{
  uint64_t v4 = WebCore::MediaRecorderPrivate::selectTracks(*(WebCore::MediaRecorderPrivate **)(a1 + 72), a2);
  uint64_t v6 = v5;
  atomic_uchar *volatile v7 = *(os_unfair_lock_s **)(a1 + 80);
  uint64_t v24 = *(void *)(a1 + 64);
  BOOL v8 = v4 != 0;
  BOOL v9 = v5 != 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 56), a1);
  BOOL v10 = *(atomic_uint **)(a1 + 56);
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
  if (v4) {
    ++*(_DWORD *)(v4 + 8);
  }
  if (v6) {
    ++*(_DWORD *)(v6 + 8);
  }
  uint64_t v11 = *(void *)a2;
  *(void *)a2 = 0;
  int v12 = (void *)WTF::fastMalloc((WTF *)0x28);
  void *v12 = &unk_1EE9EFFB8;
  v12[1] = v10;
  v12[2] = v4;
  v12[3] = v6;
  v12[4] = v11;
  uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v14 = 1204;
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 66) = (char *)v14 + 16;
  *((void *)v14 + 67) = 512;
  *((void *)v14 + 68) = 0;
  *((void *)v14 + 70) = 0;
  *((void *)v14 + 69) = 0;
  IPC::Encoder::encodeHeader(v14);
  uint64_t v26 = v14;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v14, &v24);
  uint64_t v15 = (unsigned char *)IPC::Encoder::grow(v14, 1uLL, 1);
  if (!v16 || (*uint64_t v15 = v8, v17 = (unsigned char *)IPC::Encoder::grow(v14, 1uLL, 1), !v18))
  {
    __break(0xC471u);
    JUMPOUT(0x19912EEC4);
  }
  *uint64_t v17 = v9;
  IPC::ArgumentCoder<WebCore::MediaRecorderPrivateOptions,void>::encode(v14, (uint64_t *)(a1 + 200));
  v25[0] = (uint64_t)v12;
  v25[1] = v13;
  IPC::Connection::sendMessageWithAsyncReply(v7, &v26, v25, 0, 0);
  uint64_t v20 = v25[0];
  v25[0] = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t result = v26;
  uint64_t v26 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  return result;
}

void WebKit::MediaRecorderPrivate::~MediaRecorderPrivate(WebKit::MediaRecorderPrivate *this)
{
  uint64_t v2 = (atomic_uchar *volatile **)((char *)this + 80);
  uint64_t v3 = *((void *)this + 10);
  uint64_t v24 = *((void *)this + 8);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1205;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  long long v25 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, &v24);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v25, 0, 0);
  uint64_t v6 = v25;
  long long v25 = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v22, v23);
  }
  atomic_uchar *volatile v7 = (unsigned int *)*((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v7) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v7);
  }
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)this + 32, 0);
  uint64_t v9 = *((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v9) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v9 + 8), v8);
  }
  BOOL v10 = (WTF::StringImpl *)*((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((WebCore::WebAudioBufferList **)this + 23, 0);
  if (*((unsigned char *)this + 176)) {
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebKit::MediaRecorderPrivate *)((char *)this + 96));
  }
  uint64_t v11 = (WebCore::CARingBuffer *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v11) {
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](this + 88, v11);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v2);
  uint64_t v13 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 16) == 1)
    {
      uint64_t v14 = (WTF *)MEMORY[0x199734240](v13, v12);
      WTF::fastFree(v14, v15);
    }
    else
    {
      --*(_DWORD *)(v13 + 16);
    }
  }
  uint64_t v16 = *((void *)this + 7);
  if (v16)
  {
    *(void *)(v16 + 8) = 0;
    uint64_t v17 = (unsigned int *)*((void *)this + 7);
    *((void *)this + 7) = 0;
    if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v12);
    }
  }
  else
  {
    *((void *)this + 7) = 0;
  }
  *(void *)this = &unk_1EE9EF5F8;
  *((void *)this + 1) = &unk_1EE9EF670;
  if (*((void *)this + 3)) {
    WebCore::RealtimeMediaSource::removeAudioSampleObserver();
  }
  if (*((void *)this + 4)) {
    WebCore::RealtimeMediaSource::removeVideoFrameObserver();
  }
  uint64_t v18 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 144))(v18);
  }
  uint64_t v19 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 144))(v19);
  }
  uint64_t v20 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 144))(v20);
  }
  uint64_t v21 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 144))(v21);
  }
}

void non-virtual thunk to'WebKit::MediaRecorderPrivate::~MediaRecorderPrivate(WebKit::MediaRecorderPrivate *this)
{
}

{
  WebKit::MediaRecorderPrivate::operator delete((WebKit::MediaRecorderPrivate *)((char *)this - 8));
}

double WebKit::MediaRecorderPrivate::operator delete(WebKit::MediaRecorderPrivate *a1)
{
  WebKit::MediaRecorderPrivate::~MediaRecorderPrivate(a1);
  if (*(_DWORD *)(v1 + 16))
  {
    *(void *)(v1 + 272) = 0;
    double result = 0.0;
    *(_OWORD *)(v1 + 240) = 0u;
    *(_OWORD *)(v1 + 256) = 0u;
    *(_OWORD *)(v1 + 208) = 0u;
    *(_OWORD *)(v1 + 224) = 0u;
    *(_OWORD *)(v1 + 176) = 0u;
    *(_OWORD *)(v1 + 192) = 0u;
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 128) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)uint64_t v1 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
  return result;
}

IPC::Encoder *WebKit::MediaRecorderPrivate::videoFrameAvailable(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 21))
  {
    if (*(unsigned char *)(a1 + 244))
    {
      unint64_t v4 = *(void *)(a1 + 236);
    }
    else
    {
      float v10 = (*(float (**)(uint64_t))(*(void *)a2 + 16))(a2);
      unint64_t v4 = (int)v10 | ((unint64_t)(int)v11 << 32);
      if (!*(unsigned char *)(a1 + 244)) {
        *(unsigned char *)(a1 + 244) = 1;
      }
      *(void *)(a1 + 236) = v4;
    }
    long long v14 = *(_OWORD *)(a2 + 16);
    char v15 = *(unsigned char *)(a2 + 32);
    __int16 v16 = *(_WORD *)(a2 + 34);
    unint64_t v17 = v4;
    unsigned int v18 = 3;
    uint64_t v12 = *(void *)(a1 + 80);
    uint64_t v20 = &v14;
    double result = IPC::Connection::send<Messages::RemoteMediaRecorder::VideoFrameAvailable>(v12, (uint64_t *)&v20, *(void *)(a1 + 64));
    uint64_t v9 = v18;
    if (v18 != -1) {
      return (IPC::Encoder *)((uint64_t (*)(long long **, unint64_t *))off_1EE9EF700[v9])(&v20, &v17);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 236) = 0;
    *(unsigned char *)(a1 + 244) = 0;
    uint64_t v5 = (long long *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v5 = &unk_1EE9EFFE0;
    *((void *)v5 + 1) = a1;
    uint64_t v20 = v5;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v6 = &unk_1EE9F0008;
    v6[1] = a1;
    uint64_t v13 = v6;
    WebKit::SharedVideoFrameWriter::write((void *)(a1 + 256), a2, (uint64_t *)&v20, &v13, (uint64_t)&v14);
    (*(void (**)(void *))(*v6 + 8))(v6);
    double result = (IPC::Encoder *)(*(uint64_t (**)(long long *))(*(void *)v5 + 8))(v5);
    if (v19)
    {
      uint64_t v8 = *(void *)(a1 + 80);
      uint64_t v20 = &v14;
      double result = IPC::Connection::send<Messages::RemoteMediaRecorder::VideoFrameAvailable>(v8, (uint64_t *)&v20, *(void *)(a1 + 64));
      if (v19)
      {
        uint64_t v9 = v18;
        if (v18 != -1) {
          return (IPC::Encoder *)((uint64_t (*)(long long **, unint64_t *))off_1EE9EF700[v9])(&v20, &v17);
        }
      }
    }
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::MediaRecorderPrivate::videoFrameAvailable(uint64_t a1, uint64_t a2)
{
  return WebKit::MediaRecorderPrivate::videoFrameAvailable(a1 - 8, a2);
}

IPC::Encoder *WebKit::MediaRecorderPrivate::audioSamplesAvailable(uint64_t a1, uint64_t a2, const AudioBufferList **a3, uint64_t a4, uint64_t a5)
{
  float v10 = (WebCore::CAAudioStreamDescription *)(a1 + 96);
  if (!*(unsigned char *)(a1 + 176) || (WebCore::CAAudioStreamDescription::operator==() & 1) == 0)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 16))(a4);
    if (*(_DWORD *)(v11 + 16) != 1)
    {
      uint64_t v38 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)WebKit::MediaRecorderPrivate::fetchData(v38);
    }
    std::optional<WebCore::CAAudioStreamDescription>::operator=[abi:sn180100]<AudioStreamBasicDescription const&,void>(v10, *(const AudioStreamBasicDescription **)(v11 + 8));
    if (!*(unsigned char *)(a1 + 176)) {
      goto LABEL_26;
    }
    WebCore::CAAudioStreamDescription::sampleRate(v10);
    *(void *)(a1 + 192) = (unint64_t)(v12 + v12);
    if (!*(unsigned char *)(a1 + 176)) {
      goto LABEL_26;
    }
    uint64_t v13 = (const AudioStreamBasicDescription *)WebCore::CAAudioStreamDescription::streamDescription(v10);
    WebCore::CAAudioStreamDescription::CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v41, v13);
    WebKit::ProducerSharedCARingBuffer::allocate((WebKit::ProducerSharedCARingBuffer *)v41, *(const WebCore::CAAudioStreamDescription **)(a1 + 192), (uint64_t)v42);
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v41);
    if (!v44)
    {
      __break(0xC471u);
      JUMPOUT(0x19912F800);
    }
    long long v14 = (WebCore::CARingBuffer *)v42[0];
    v42[0] = 0;
    uint64_t v39 = v14;
    WTF::MachSendRight::MachSendRight();
    *(_OWORD *)&v40[8] = v43;
    char v15 = *(WebCore::CARingBuffer **)(a1 + 88);
    __int16 v16 = v39;
    uint64_t v39 = 0;
    *(void *)(a1 + 88) = v16;
    if (v15) {
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](a1 + 88, v15);
    }
    uint64_t v17 = *(void *)(a1 + 80);
    WebCore::CAAudioStreamDescription::CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v41, v13);
    uint64_t v18 = *(void *)(a1 + 64);
    char v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v19 = 1207;
    *((void *)v19 + 1) = v18;
    *((void *)v19 + 66) = (char *)v19 + 16;
    *((void *)v19 + 67) = 512;
    *((void *)v19 + 68) = 0;
    *((void *)v19 + 70) = 0;
    *((void *)v19 + 69) = 0;
    IPC::Encoder::encodeHeader(v19);
    uint64_t v45 = v19;
    IPC::ArgumentCoder<WebKit::ConsumerSharedCARingBufferHandle,void>::encode(v19, (unint64_t)v40);
    uint64_t v20 = WebCore::CAAudioStreamDescription::streamDescription((WebCore::CAAudioStreamDescription *)v41);
    IPC::ArgumentCoder<AudioStreamBasicDescription,void>::encode(v19, v20);
    IPC::Connection::sendMessageImpl(v17, (uint64_t *)&v45, 0, 0);
    int v22 = v45;
    uint64_t v45 = 0;
    if (v22)
    {
      IPC::Encoder::~Encoder(v22, v21);
      WTF::fastFree(v36, v37);
    }
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v41);
    std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((WebCore::WebAudioBufferList **)(a1 + 184), 0);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v40);
    unsigned __int8 v23 = v39;
    uint64_t v39 = 0;
    if (v23) {
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)&v39, v23);
    }
    std::__optional_destruct_base<WebKit::ProducerSharedCARingBuffer::Pair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v42);
  }
  if (*(unsigned char *)(a1 + 20))
  {
    uint64_t v24 = *(WebCore::WebAudioBufferList **)(a1 + 184);
    if (v24)
    {
      WebCore::WebAudioBufferList::setSampleCount(v24);
LABEL_21:
      WebCore::WebAudioBufferList::zeroFlatBuffer(*(WebCore::WebAudioBufferList **)(a1 + 184));
      long long v25 = *(WebCore::CARingBuffer **)(a1 + 88);
      a3 = *(const AudioBufferList ***)(a1 + 184);
      goto LABEL_22;
    }
    if (*(unsigned char *)(a1 + 176))
    {
      uint64_t v26 = (WebCore::WebAudioBufferList *)WTF::fastMalloc((WTF *)0x48);
      WebCore::WebAudioBufferList::WebAudioBufferList();
      std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((WebCore::WebAudioBufferList **)(a1 + 184), v26);
      goto LABEL_21;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  long long v25 = *(WebCore::CARingBuffer **)(a1 + 88);
  if (((unsigned int (*)(const AudioBufferList **))(*a3)->mBuffers[0].mData)(a3) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19912F6A8);
  }
LABEL_22:
  WebCore::CARingBuffer::store(v25, a3[5]);
  uint64_t v27 = *(void *)(a1 + 80);
  uint64_t v28 = *(void *)(a1 + 64);
  char v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v29 = 1206;
  *((void *)v29 + 1) = v28;
  *((void *)v29 + 66) = (char *)v29 + 16;
  *((void *)v29 + 67) = 512;
  *((void *)v29 + 68) = 0;
  *((void *)v29 + 70) = 0;
  *((void *)v29 + 69) = 0;
  IPC::Encoder::encodeHeader(v29);
  v41[0] = v29;
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v29, a2);
  long long v30 = (void *)IPC::Encoder::grow(v29, 8uLL, 8);
  if (v31 <= 7)
  {
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x19912F7E0);
  }
  void *v30 = a5;
  IPC::Connection::sendMessageImpl(v27, (uint64_t *)v41, 0, 0);
  double result = v41[0];
  v41[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v32);
    return (IPC::Encoder *)WTF::fastFree(v34, v35);
  }
  return result;
}

IPC::Encoder *WebKit::MediaRecorderPrivate::fetchData(WebKit::MediaRecorderPrivate *a1, uint64_t *a2)
{
  uint64_t v3 = (os_unfair_lock_s *)*((void *)a1 + 10);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = (_DWORD *)*WebKit::MediaRecorderPrivate::mimeType(a1);
  if (v5) {
    *v5 += 2;
  }
  uint64_t v6 = *((void *)a1 + 8);
  atomic_uchar *volatile v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  *atomic_uchar *volatile v7 = &unk_1EE9F0030;
  v7[1] = v4;
  v7[2] = v5;
  uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 1208;
  *((void *)v9 + 1) = v6;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  v15[1] = v8;
  __int16 v16 = v9;
  v15[0] = (uint64_t)v7;
  IPC::Connection::sendMessageWithAsyncReply(v3, &v16, v15, 0, 0);
  uint64_t v11 = v15[0];
  v15[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  double result = v16;
  __int16 v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t *WebKit::MediaRecorderPrivate::mimeType(WebKit::MediaRecorderPrivate *this)
{
  if ((_MergedGlobals_175 & 1) == 0)
  {
    _MergedGlobals_33 += 2;
    qword_1E93CF968 = (uint64_t)&_MergedGlobals_33;
    _MergedGlobals_175 = 1;
  }
  if ((byte_1E93CF961 & 1) == 0)
  {
    dword_1EB353190 += 2;
    qword_1E93CF970 = &dword_1EB353190;
    byte_1E93CF961 = 1;
  }
  if (*((unsigned char *)this + 232)) {
    return &qword_1E93CF970;
  }
  else {
    return &qword_1E93CF968;
  }
}

IPC::Encoder *WebKit::MediaRecorderPrivate::stopRecording(uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)(a1 + 233) = 1;
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1EE9F0058;
  v5[1] = v4;
  uint64_t v6 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  atomic_uchar *volatile v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)atomic_uchar *volatile v7 = 1213;
  *((void *)v7 + 1) = v3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  v13[1] = v6;
  long long v14 = v7;
  v13[0] = (uint64_t)v5;
  IPC::Connection::sendMessageWithAsyncReply(v2, &v14, v13, 0, 0);
  uint64_t v9 = v13[0];
  v13[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  double result = v14;
  long long v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

IPC::Encoder *WebKit::MediaRecorderPrivate::pauseRecording(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1EE9F0080;
  v5[1] = v4;
  uint64_t v6 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  atomic_uchar *volatile v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)atomic_uchar *volatile v7 = 1209;
  *((void *)v7 + 1) = v3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  v13[1] = v6;
  long long v14 = v7;
  v13[0] = (uint64_t)v5;
  IPC::Connection::sendMessageWithAsyncReply(v2, &v14, v13, 0, 0);
  uint64_t v9 = v13[0];
  v13[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  double result = v14;
  long long v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

IPC::Encoder *WebKit::MediaRecorderPrivate::resumeRecording(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1EE9F00A8;
  v5[1] = v4;
  uint64_t v6 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  atomic_uchar *volatile v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)atomic_uchar *volatile v7 = 1210;
  *((void *)v7 + 1) = v3;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  v13[1] = v6;
  long long v14 = v7;
  v13[0] = (uint64_t)v5;
  IPC::Connection::sendMessageWithAsyncReply(v2, &v14, v13, 0, 0);
  uint64_t v9 = v13[0];
  v13[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  double result = v14;
  long long v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

WTF::ThreadSafeWeakPtrControlBlock *WebKit::MediaRecorderProvider::createMediaRecorderPrivate@<X0>(uint64_t a1@<X0>, WebCore::MediaStreamPrivate *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 48);
  if (v7 && (*(unsigned char *)(*(void *)(v7 + 112) + 725) & 2) != 0)
  {
    uint64_t v8 = WTF::fastMalloc((WTF *)0x118);
    *(_DWORD *)(v8 + 16) = 0;
    *(void *)uint64_t v8 = &unk_1EE9EF5F8;
    *(void *)(v8 + 8) = &unk_1EE9EF670;
    *(_WORD *)(v8 + 20) = 0;
    *(_OWORD *)(v8 + 24) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    *(void *)(v8 + 56) = 0;
    *(void *)(v8 + 64) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    *(void *)uint64_t v8 = &unk_1EE9EF2A8;
    *(void *)(v8 + 8) = &unk_1EE9EF328;
    ++*((_DWORD *)a2 + 4);
    *(void *)(v8 + 72) = a2;
    {
      __int16 v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v16);
    }
    uint64_t v9 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)(v8 + 80), *(atomic_uchar *volatile **)(v9 + 32));
    *(void *)(v8 + 88) = 0;
    *(unsigned char *)(v8 + 96) = 0;
    *(unsigned char *)(v8 + 176) = 0;
    *(void *)(v8 + 184) = 0;
    *(void *)(v8 + 192) = 0;
    float v10 = *(_DWORD **)a3;
    if (*(void *)a3) {
      *v10 += 2;
    }
    *(void *)(v8 + 200) = v10;
    long long v11 = *(_OWORD *)(a3 + 8);
    *(void *)(v8 + 221) = *(void *)(a3 + 21);
    *(_OWORD *)(v8 + 208) = v11;
    *(unsigned char *)(v8 + 232) = WebCore::MediaStreamPrivate::hasVideo(a2);
    *(unsigned char *)(v8 + 233) = 0;
    *(unsigned char *)(v8 + 236) = 0;
    *(unsigned char *)(v8 + 244) = 0;
    double v12 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v12 = &unk_1EE9ED2E0;
    uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
    *(unsigned char *)uint64_t v13 = 0;
    *(_OWORD *)(v13 + 8) = xmmword_1994F5F10;
    *(void *)(v13 + 24) = v12;
    void *v12 = &unk_1EE9EF6A8;
    v12[1] = v13;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 56), v8);
    long long v14 = *(atomic_uint **)(v8 + 56);
    if (v14) {
      atomic_fetch_add(v14, 1u);
    }
    v12[2] = v14;
    *(void *)(v8 + 248) = v12;
    WebKit::SharedVideoFrameWriter::SharedVideoFrameWriter((WebKit::SharedVideoFrameWriter *)(v8 + 256));
    {
      uint64_t v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v17);
    }
    uint64_t v15 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    double result = WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v15 + 184, *(void *)(v8 + 248));
    *a4 = v8;
  }
  else
  {
    return (WTF::ThreadSafeWeakPtrControlBlock *)MEMORY[0x1F4170090]();
  }
  return result;
}

void WebKit::RemoteVideoFrameObjectHeapProxyProcessor::create(WebKit::RemoteVideoFrameObjectHeapProxyProcessor *this@<X0>, WebKit::RemoteVideoFrameObjectHeapProxyProcessor **a2@<X8>)
{
  uint64_t v5 = (WebKit::RemoteVideoFrameObjectHeapProxyProcessor *)WTF::fastMalloc((WTF *)0xC0);
  uint64_t v6 = WebKit::RemoteVideoFrameObjectHeapProxyProcessor::RemoteVideoFrameObjectHeapProxyProcessor(v5, this);
  *a2 = v6;

  WebKit::RemoteVideoFrameObjectHeapProxyProcessor::initialize(v6);
}

void WebKit::RemoteVideoFrameObjectHeapProxyProcessor::initialize(WebKit::RemoteVideoFrameObjectHeapProxyProcessor *this)
{
  char v2 = 0;
  __int16 v16 = 0;
  uint64_t v3 = (char *)this + 32;
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 32, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0]((char *)this + 32);
  }
  WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::operator=(&v16, (atomic_uchar *volatile **)this + 5);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  IPC::Connection::addWorkQueueMessageReceiver((uint64_t)v16, 0x82u, *((void *)this + 8), (uint64_t)this, 0);
  uint64_t v5 = v16;
  __int16 v16 = 0;
  if (v5)
  {
    char v6 = 0;
    atomic_uchar *volatile v7 = *v5;
    atomic_compare_exchange_strong_explicit(*v5, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (v6) {
      MEMORY[0x19972E8D0](v7);
    }
    uint64_t v8 = *((void *)v7 + 1);
    uint64_t v9 = v8 - 1;
    *((void *)v7 + 1) = v8 - 1;
    if (v8 == 1)
    {
      uint64_t v15 = *((void *)v7 + 2);
      uint64_t v11 = *((void *)v7 + 3);
      *((void *)v7 + 3) = 0;
      BOOL v10 = v15 == 0;
    }
    else
    {
      BOOL v10 = 0;
      uint64_t v11 = 0;
    }
    int v12 = 1;
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 == 1)
    {
      if (v9) {
        return;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
      if (v9) {
        return;
      }
    }
    uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v13 = &unk_1EE9B37E8;
    *(void *)(v13 + 8) = v7;
    *(void *)(v13 + 16) = v11;
    *(unsigned char *)(v13 + 24) = v10;
    uint64_t v17 = v13;
    WTF::ensureOnMainRunLoop();
    uint64_t v14 = v17;
    uint64_t v17 = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
}

WebKit::RemoteVideoFrameObjectHeapProxyProcessor *WebKit::RemoteVideoFrameObjectHeapProxyProcessor::RemoteVideoFrameObjectHeapProxyProcessor(WebKit::RemoteVideoFrameObjectHeapProxyProcessor *this, WebKit::GPUProcessConnection *a2)
{
  *(void *)this = &unk_1EE9B71B0;
  *((void *)this + 1) = 0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
  char v5 = 0;
  *(unsigned char *)uint64_t v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_1994F5F10;
  *(void *)(v4 + 24) = this;
  *(void *)this = &unk_1EE9EF350;
  *((void *)this + 2) = v4;
  *((void *)this + 3) = &unk_1EE9EF3A8;
  *((unsigned char *)this + 32) = 0;
  char v6 = (atomic_uchar *volatile *)*((void *)a2 + 4);
  atomic_uchar *volatile v7 = *v6;
  int v8 = 1;
  atomic_compare_exchange_strong_explicit(*v6, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](v7);
  }
  ++*((void *)v7 + 1);
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  *((void *)this + 5) = v6;
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 7) = 0;
  WTF::WorkQueue::create();
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  *((unsigned char *)this + 84) = 0;
  *((unsigned char *)this + 88) = 0;
  *((unsigned char *)this + 96) = 0;
  *((void *)this + 18) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 0;
  WebKit::SharedVideoFrameWriter::SharedVideoFrameWriter((WebKit::RemoteVideoFrameObjectHeapProxyProcessor *)((char *)this + 152));
  *(_DWORD *)((char *)this + 183) = 0;
  *((void *)this + 22) = 0;
  WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>((uint64_t)a2 + 184, (uint64_t)this + 24);
  return this;
}

void WebKit::RemoteVideoFrameObjectHeapProxyProcessor::~RemoteVideoFrameObjectHeapProxyProcessor(WebKit::RemoteVideoFrameObjectHeapProxyProcessor *this)
{
  *(void *)this = &unk_1EE9EF350;
  *((void *)this + 3) = &unk_1EE9EF3A8;
  WebKit::RemoteVideoFrameObjectHeapProxyProcessor::clearCallbacks((atomic_uchar *)this);
  char v2 = (const void *)*((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (unsigned int *)*((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  }
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)this + 19, 0);
  WebKit::SharedVideoFrameReader::~SharedVideoFrameReader((WebKit::RemoteVideoFrameObjectHeapProxyProcessor *)((char *)this + 72));
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 56))(v5);
  }
  uint64_t v6 = *((void *)this + 7);
  if (v6) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::deallocateTable(v6, v4);
  }
  atomic_uchar *volatile v7 = (atomic_uchar *volatile *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v7)
  {
    char v8 = 0;
    atomic_uchar *volatile v9 = *v7;
    atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
    if (v8) {
      MEMORY[0x19972E8D0](v9);
    }
    uint64_t v10 = *((void *)v9 + 1);
    uint64_t v11 = v10 - 1;
    *((void *)v9 + 1) = v10 - 1;
    if (v10 == 1)
    {
      uint64_t v16 = *((void *)v9 + 2);
      uint64_t v13 = *((void *)v9 + 3);
      *((void *)v9 + 3) = 0;
      BOOL v12 = v16 == 0;
    }
    else
    {
      BOOL v12 = 0;
      uint64_t v13 = 0;
    }
    int v14 = 1;
    atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 == 1)
    {
      if (v11) {
        goto LABEL_18;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      if (v11) {
        goto LABEL_18;
      }
    }
    uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v15 = &unk_1EE9B37E8;
    *(void *)(v15 + 8) = v9;
    *(void *)(v15 + 16) = v13;
    *(unsigned char *)(v15 + 24) = v12;
    uint64_t v17 = v15;
    WTF::ensureOnMainRunLoop();
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
LABEL_18:
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteVideoFrameObjectHeapProxyProcessor::~RemoteVideoFrameObjectHeapProxyProcessor(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteVideoFrameObjectHeapProxyProcessor::clearCallbacks(atomic_uchar *this)
{
  char v2 = 0;
  uint64_t v3 = this + 48;
  int v4 = 1;
  atomic_compare_exchange_strong_explicit(this + 48, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this + 48);
  }
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  uint64_t v6 = *((void *)this + 8);
  (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
  atomic_uchar *volatile v7 = (void *)WTF::fastMalloc((WTF *)0x18);
  *atomic_uchar *volatile v7 = &unk_1EE9F00D0;
  v7[1] = v6;
  v7[2] = v5;
  uint64_t v9 = (uint64_t)v7;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 32))(v6, &v9);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void non-virtual thunk to'WebKit::RemoteVideoFrameObjectHeapProxyProcessor::~RemoteVideoFrameObjectHeapProxyProcessor(WebKit::RemoteVideoFrameObjectHeapProxyProcessor *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteVideoFrameObjectHeapProxyProcessor::~RemoteVideoFrameObjectHeapProxyProcessor((WebKit::RemoteVideoFrameObjectHeapProxyProcessor *)((char *)this - 24));

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteVideoFrameObjectHeapProxyProcessor::gpuProcessConnectionDidClose(WebKit::RemoteVideoFrameObjectHeapProxyProcessor *this, WebKit::GPUProcessConnection *a2)
{
  *((unsigned char *)this + 169) = 1;
  MEMORY[0x1997420B0](*(unsigned int *)(*((void *)this + 19) + 4));
  char v4 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 32, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0]((char *)this + 32);
  }
  uint64_t v5 = (atomic_uchar *volatile *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5)
  {
    char v6 = 0;
    atomic_uchar *volatile v7 = *v5;
    atomic_compare_exchange_strong_explicit(*v5, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (v6) {
      MEMORY[0x19972E8D0](v7);
    }
    uint64_t v8 = *((void *)v7 + 1);
    uint64_t v9 = v8 - 1;
    *((void *)v7 + 1) = v8 - 1;
    if (v8 == 1)
    {
      uint64_t v16 = *((void *)v7 + 2);
      uint64_t v11 = *((void *)v7 + 3);
      *((void *)v7 + 3) = 0;
      BOOL v10 = v16 == 0;
    }
    else
    {
      BOOL v10 = 0;
      uint64_t v11 = 0;
    }
    int v12 = 1;
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 == 1)
    {
      if (v9) {
        goto LABEL_12;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
      if (v9) {
        goto LABEL_12;
      }
    }
    uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v13 = &unk_1EE9B37E8;
    *(void *)(v13 + 8) = v7;
    *(void *)(v13 + 16) = v11;
    *(unsigned char *)(v13 + 24) = v10;
    uint64_t v17 = v13;
    WTF::ensureOnMainRunLoop();
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
LABEL_12:
  int v14 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 32, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
  if (v14 != 1) {
    WTF::Lock::unlockSlow((WebKit::RemoteVideoFrameObjectHeapProxyProcessor *)((char *)this + 32));
  }
  IPC::Connection::removeWorkQueueMessageReceiver(*((void *)a2 + 4), 0x82u, 0);
  return WebKit::RemoteVideoFrameObjectHeapProxyProcessor::clearCallbacks((atomic_uchar *)this);
}

uint64_t non-virtual thunk to'WebKit::RemoteVideoFrameObjectHeapProxyProcessor::gpuProcessConnectionDidClose(WebKit::RemoteVideoFrameObjectHeapProxyProcessor *this, WebKit::GPUProcessConnection *a2)
{
  return WebKit::RemoteVideoFrameObjectHeapProxyProcessor::gpuProcessConnectionDidClose((WebKit::RemoteVideoFrameObjectHeapProxyProcessor *)((char *)this - 24), a2);
}

IPC::Semaphore *WebKit::RemoteVideoFrameObjectHeapProxyProcessor::setSharedVideoFrameSemaphore(uint64_t a1, IPC::Semaphore *a2)
{
  return std::optional<IPC::Semaphore>::operator=[abi:sn180100]<IPC::Semaphore,void>((IPC::Semaphore *)(a1 + 88), a2);
}

BOOL WebKit::RemoteVideoFrameObjectHeapProxyProcessor::setSharedVideoFrameMemory(uint64_t a1)
{
  return WebKit::SharedVideoFrameReader::setSharedMemory(a1 + 72);
}

void WebKit::RemoteVideoFrameObjectHeapProxyProcessor::takeCallback(void *a1, uint64_t a2, uint64_t a3)
{
  char v6 = 0;
  atomic_uchar *volatile v7 = (atomic_uchar *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x19972E8D0](a2 + 48);
  }
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v9 = (uint64_t *)(a2 + 56);
  uint64_t v8 = v10;
  if (!v10) {
    goto LABEL_11;
  }
  unsigned int v11 = *(_DWORD *)(v8 - 8);
  unint64_t v12 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  uint64_t v15 = v11 & ((v14 >> 31) ^ v14);
  uint64_t v16 = *(void *)(v8 + 16 * v15);
  if (v16 != a3)
  {
    int v17 = 1;
    while (v16)
    {
      uint64_t v15 = (v15 + v17) & v11;
      uint64_t v16 = *(void *)(v8 + 16 * v15);
      ++v17;
      if (v16 == a3) {
        goto LABEL_10;
      }
    }
    uint64_t v15 = *(unsigned int *)(v8 - 4);
  }
LABEL_10:
  if (v15 != *(_DWORD *)(v8 - 4))
  {
    char v19 = (void *)(v8 + 16 * v15);
    uint64_t v20 = v19[1];
    v19[1] = 0;
    *a1 = v20;
    uint64_t v21 = *v9;
    if (!*v9 || (v21 += 16 * *(unsigned int *)(v21 - 4), (void *)v21 != v19))
    {
      if ((void *)v21 != v19)
      {
        void *v19 = -1;
        v19[1] = 0;
        ++*(_DWORD *)(*v9 - 16);
        uint64_t v22 = *v9;
        int v23 = *v9 ? *(_DWORD *)(v22 - 12) - 1 : -1;
        *(_DWORD *)(v22 - 12) = v23;
        uint64_t v24 = *v9;
        if (*v9)
        {
          unsigned int v25 = 6 * *(_DWORD *)(v24 - 12);
          unsigned int v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9) {
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(v9, v26 >> 1);
          }
        }
      }
    }
  }
  else
  {
LABEL_11:
    *a1 = 0;
  }
  int v18 = 1;
  atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
  if (v18 != 1)
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
}

void WebKit::RemoteVideoFrameObjectHeapProxyProcessor::newVideoFrameBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = 0;
  if (*(unsigned char *)(a3 + 24))
  {
    ((void (*)(const void **__return_ptr, uint64_t, uint64_t))WebKit::SharedVideoFrameReader::readBuffer)(&v7, a1 + 72, a3);
    uint64_t v5 = v7;
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v5 = 0;
  }
  WebKit::RemoteVideoFrameObjectHeapProxyProcessor::takeCallback(&v7, a1, a2);
  char v6 = v7;
  if (v7)
  {
    (*(void (**)(const void *, const void **))(*(void *)v7 + 16))(v7, &v8);
    (*(void (**)(const void *))(*(void *)v6 + 8))(v6);
    uint64_t v5 = v8;
  }
  uint64_t v8 = 0;
  if (v5) {
    CFRelease(v5);
  }
}

uint64_t WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getVideoFrameBuffer(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  char v8 = 0;
  uint64_t v9 = (atomic_uchar *)(a1 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    goto LABEL_63;
  }
  while (1)
  {
    uint64_t v10 = *(void *)(a2 + 48);
    if (v10)
    {
      if (!*(unsigned char *)(v10 + 88)) {
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v10 = a2;
      if (!*(unsigned char *)(a2 + 88)) {
        goto LABEL_62;
      }
    }
    unsigned int v11 = (uint64_t *)(a1 + 56);
    uint64_t v12 = *(void *)(v10 + 64);
    uint64_t v13 = *(void *)(a1 + 56);
    if (v13
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand((uint64_t *)(a1 + 56)),
          (uint64_t v13 = *v11) != 0))
    {
      int v14 = *(_DWORD *)(v13 - 8);
    }
    else
    {
      int v14 = 0;
    }
    unint64_t v15 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
    unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    unsigned int v18 = v14 & ((v17 >> 31) ^ v17);
    char v19 = (void *)(v13 + 16 * v18);
    uint64_t v20 = *v19;
    if (*v19)
    {
      uint64_t v21 = 0;
      int v22 = 1;
      while (v20 != v12)
      {
        if (v20 == -1) {
          uint64_t v21 = v19;
        }
        unsigned int v18 = (v18 + v22) & v14;
        char v19 = (void *)(v13 + 16 * v18);
        uint64_t v20 = *v19;
        ++v22;
        if (!*v19)
        {
          if (v21)
          {
            *uint64_t v21 = 0;
            v21[1] = 0;
            --*(_DWORD *)(*v11 - 16);
            char v19 = v21;
          }
          goto LABEL_17;
        }
      }
    }
    else
    {
LABEL_17:
      void *v19 = v12;
      uint64_t v23 = *a4;
      *a4 = 0;
      uint64_t v24 = v19[1];
      v19[1] = v23;
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      }
      uint64_t v25 = *v11;
      if (*v11) {
        int v26 = *(_DWORD *)(v25 - 12) + 1;
      }
      else {
        int v26 = 1;
      }
      *(_DWORD *)(v25 - 12) = v26;
      uint64_t v27 = *v11;
      if (*v11) {
        int v28 = *(_DWORD *)(v27 - 12);
      }
      else {
        int v28 = 0;
      }
      uint64_t v29 = (*(_DWORD *)(v27 - 16) + v28);
      unint64_t v30 = *(unsigned int *)(v27 - 4);
      if (v30 <= 0x400)
      {
        if (3 * v30 > 4 * v29) {
          goto LABEL_28;
        }
LABEL_27:
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand((uint64_t *)(a1 + 56));
        goto LABEL_28;
      }
      if (v30 <= 2 * v29) {
        goto LABEL_27;
      }
    }
LABEL_28:
    int v31 = 1;
    atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v31, 0, memory_order_release, memory_order_relaxed);
    if (v31 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
    }
    char v32 = 0;
    unint64_t v57 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 32), (unsigned __int8 *)&v32, 1u, memory_order_acquire, memory_order_acquire);
    if (v32) {
      MEMORY[0x19972E8D0](a1 + 32);
    }
    WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::operator=(&v57, (atomic_uchar *volatile **)(a1 + 40));
    int v33 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 32), (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
    if (v33 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 32));
    }
    uint64_t v9 = (atomic_uchar *)v57;
    if (v57) {
      break;
    }
    uint64_t v35 = *(void *)(a2 + 48);
    if (v35)
    {
      a2 = *(void *)(a2 + 48);
      if (*(unsigned char *)(v35 + 88)) {
        goto LABEL_47;
      }
    }
    else if (*(unsigned char *)(a2 + 88))
    {
LABEL_47:
      WebKit::RemoteVideoFrameObjectHeapProxyProcessor::takeCallback(v59, a1, *(void *)(a2 + 64));
      CFTypeRef cf = 0;
      uint64_t v45 = v59[0];
      (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v59[0] + 16))(v59[0], &cf);
      CFTypeRef v46 = cf;
      CFTypeRef cf = 0;
      if (v46) {
        CFRelease(v46);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 8))(v45);
      goto LABEL_50;
    }
LABEL_62:
    __break(1u);
LABEL_63:
    MEMORY[0x19972E8D0](v9);
  }
  uint64_t v34 = *(void *)(a2 + 48);
  if (v34)
  {
    a2 = *(void *)(a2 + 48);
    if (*(unsigned char *)(v34 + 88)) {
      goto LABEL_42;
    }
    goto LABEL_62;
  }
  if (!*(unsigned char *)(a2 + 88)) {
    goto LABEL_62;
  }
LABEL_42:
  atomic_fetch_add((atomic_ullong *volatile)(a2 + 72), 1uLL);
  uint64_t v36 = *(void *)(a2 + 80);
  uint64_t v37 = *(void *)(a2 + 64);
  uint64_t v38 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v38 = 1417;
  *((void *)v38 + 1) = 0;
  *((void *)v38 + 66) = (char *)v38 + 16;
  *((void *)v38 + 67) = 512;
  *((void *)v38 + 68) = 0;
  *((void *)v38 + 70) = 0;
  *((void *)v38 + 69) = 0;
  IPC::Encoder::encodeHeader(v38);
  CFTypeRef cf = v38;
  v59[0] = v37;
  v59[1] = v36;
  IPC::ArgumentCoder<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v38, v59);
  uint64_t v39 = (unsigned char *)IPC::Encoder::grow(v38, 1uLL, 1);
  if (!v40)
  {
    uint64_t result = 831;
    __break(0xC471u);
    return result;
  }
  unsigned char *v39 = a3;
  IPC::Connection::sendMessageImpl((uint64_t)v9, (uint64_t *)&cf, 1, 0);
  uint64_t result = (uint64_t)cf;
  CFTypeRef cf = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v41);
    uint64_t result = WTF::fastFree(v43, v44);
  }
LABEL_50:
  long long v47 = v57;
  unint64_t v57 = 0;
  if (!v47) {
    return result;
  }
  char v48 = 0;
  atomic_uchar *volatile v49 = *v47;
  atomic_compare_exchange_strong_explicit(*v47, (unsigned __int8 *)&v48, 1u, memory_order_acquire, memory_order_acquire);
  if (v48) {
    uint64_t result = MEMORY[0x19972E8D0](v49);
  }
  uint64_t v50 = *((void *)v49 + 1);
  uint64_t v51 = v50 - 1;
  *((void *)v49 + 1) = v50 - 1;
  if (v50 == 1)
  {
    uint64_t v56 = *((void *)v49 + 2);
    uint64_t v53 = *((void *)v49 + 3);
    *((void *)v49 + 3) = 0;
    BOOL v52 = v56 == 0;
  }
  else
  {
    BOOL v52 = 0;
    uint64_t v53 = 0;
  }
  int v54 = 1;
  atomic_compare_exchange_strong_explicit(v49, (unsigned __int8 *)&v54, 0, memory_order_release, memory_order_relaxed);
  if (v54 == 1)
  {
    if (v51) {
      return result;
    }
  }
  else
  {
    uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v49);
    if (v51) {
      return result;
    }
  }
  uint64_t v55 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v55 = &unk_1EE9B37E8;
  *(void *)(v55 + 8) = v49;
  *(void *)(v55 + 16) = v53;
  *(unsigned char *)(v55 + 24) = v52;
  v59[0] = v55;
  WTF::ensureOnMainRunLoop();
  uint64_t result = v59[0];
  v59[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::RemoteVideoFrameObjectHeapProxyProcessor::newConvertedVideoFrameBuffer(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    ((void (*)(CFTypeRef *__return_ptr, uint64_t))WebKit::SharedVideoFrameReader::readBuffer)(&cf, a1 + 72);
    CFTypeRef v3 = cf;
    CFTypeRef cf = 0;
    char v4 = *(const void **)(a1 + 176);
    *(void *)(a1 + 176) = v3;
    if (v4)
    {
      CFRelease(v4);
      CFTypeRef v6 = cf;
      CFTypeRef cf = 0;
      if (v6) {
        CFRelease(v6);
      }
    }
  }
  return WTF::BinarySemaphore::signal((WTF::BinarySemaphore *)(a1 + 184));
}

void WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getNativeImage(IPC::Semaphore **this@<X0>, const WebCore::VideoFrame *a2@<X1>, void *a3@<X8>)
{
  {
LABEL_41:
    int v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v26);
  }
  CFTypeRef v6 = *(CFTypeRef *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                    + 32);
  if (*((unsigned char *)this + 169))
  {
    atomic_uchar *volatile v7 = (IPC::Semaphore *)WTF::fastMalloc((WTF *)8);
    IPC::Semaphore::Semaphore(v7);
    std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100](this + 19, v7);
    char v8 = (unsigned int *)this[20];
    this[20] = 0;
    if (v8) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v8);
    }
    *((unsigned char *)this + 170) = 0;
    *((_WORD *)this + 84) = 0;
  }
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9F00F8;
  v9[1] = v6;
  int v28 = v9;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v10 = &unk_1EE9F0120;
  v10[1] = v6;
  CFTypeRef cf = v10;
  WebKit::SharedVideoFrameWriter::write(this + 19, (uint64_t)a2, (uint64_t *)&v28, &cf, (uint64_t)v31);
  (*(void (**)(void *))(*v10 + 8))(v10);
  unsigned int v11 = (WTF::ApproximateTime *)(*(uint64_t (**)(void *))(*v9 + 8))(v9);
  if (!v34)
  {
    *a3 = 0;
    return;
  }
  WTF::ApproximateTime::now(v11);
  double v13 = v12 + 3.0;
  uint64_t v40 = 0;
  IPC::Connection::createSyncMessageEncoder(3735, 0, &v40, &v39);
  IPC::ArgumentCoder<WebKit::SharedVideoFrame,void>::encode(v39, (uint64_t)v31);
  IPC::Connection::sendSyncMessage((uint64_t)v6, v40, (uint64_t *)&v39, 0, (uint64_t)&cf, v13);
  if (!v38)
  {
    LOBYTE(v35) = 0;
    char v36 = 0;
    IPC::Decoder::operator>><std::tuple<WebCore::DestinationColorSpace>>((uint64_t *)cf, &v35);
    if (!v36)
    {
      LOBYTE(v28) = 13;
      int v14 = 1;
      int v30 = 1;
      int v15 = v38;
      if (v38 == -1) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    int v15 = v38;
    if (!v38)
    {
      int v14 = 0;
      unint64_t v17 = cf;
      CFTypeRef cf = 0;
      CFTypeRef v6 = v35;
      int v28 = v17;
      CFTypeRef v29 = v35;
      int v30 = 0;
      goto LABEL_15;
    }
    goto LABEL_40;
  }
  if (v38 != 1)
  {
LABEL_40:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_41;
  }
  LOBYTE(v28) = (_BYTE)cf;
  int v14 = 1;
  int v30 = 1;
  int v15 = 1;
LABEL_15:
  ((void (*)(CFTypeRef *, CFTypeRef *))off_1EE9EF7A8[v15])(&v35, &cf);
LABEL_16:
  unsigned int v18 = v39;
  uint64_t v39 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v16);
    unsigned int v18 = (IPC::Encoder *)WTF::fastFree(v19, v20);
    if (v14) {
      goto LABEL_18;
    }
LABEL_20:
    uint64_t v21 = *(const void **)WebCore::DestinationColorSpace::SRGB(v18);
    CFTypeRef v27 = v21;
    if (v21) {
      CFRetain(v21);
    }
    WebCore::DestinationColorSpace::DestinationColorSpace();
    CFTypeRef v29 = 0;
    CFTypeRef v22 = cf;
    CFTypeRef cf = 0;
    if (v22) {
      CFRelease(v22);
    }
    if (v27) {
      CFRelease(v27);
    }
    CFTypeRef cf = (CFTypeRef)0x7FF0000000000000;
    int v38 = 0;
    WTF::BinarySemaphore::waitUntil();
    uint64_t v23 = this[22];
    this[22] = 0;
    CFTypeRef cf = v23;
    if (v23)
    {
      WebCore::PixelBufferConformerCV::imageFrom32BGRAPixelBuffer();
      WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      WebCore::NativeImage::create();
      CFTypeRef v24 = v35;
      CFTypeRef v35 = 0;
      if (v24) {
        CFRelease(v24);
      }
      CFTypeRef v25 = cf;
      CFTypeRef cf = 0;
      if (v25) {
        CFRelease(v25);
      }
    }
    else
    {
      *a3 = 0;
    }
    if (v6) {
      CFRelease(v6);
    }
    goto LABEL_34;
  }
  if (!v14) {
    goto LABEL_20;
  }
LABEL_18:
  *((unsigned char *)this + 169) = 1;
  MEMORY[0x1997420B0](*((unsigned int *)this[19] + 1));
  *a3 = 0;
LABEL_34:
  if (v30 != -1) {
    ((void (*)(CFTypeRef *, void **))off_1EE9EF720[v30])(&cf, &v28);
  }
  if (v34)
  {
    if (v33 != -1) {
      ((void (*)(void **, uint64_t *))off_1EE9EF700[v33])(&v28, &v32);
    }
  }
}

uint64_t WebKit::RemoteImageDecoderAVF::bytesDecodedToDetermineProperties(WebKit::RemoteImageDecoderAVF *this)
{
  return 0;
}

BOOL WebCore::ImageDecoder::isSizeAvailable(WebCore::ImageDecoder *this)
{
  return (*(int (**)(WebCore::ImageDecoder *))(*(void *)this + 24))(this) > 2;
}

uint64_t WebCore::ImageDecoder::primaryFrameIndex(WebCore::ImageDecoder *this)
{
  return 0;
}

void WebKit::RemoteImageDecoderAVF::accessibilityDescription(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::RemoteImageDecoderAVF::hotSpot(WebKit::RemoteImageDecoderAVF *this)
{
  return 0;
}

uint64_t WebCore::ImageDecoder::frameOrientationAtIndex(WebCore::ImageDecoder *this)
{
  return 1;
}

uint64_t WebCore::ImageDecoder::frameDensityCorrectedSizeAtIndex(WebCore::ImageDecoder *this)
{
  return 0;
}

uint64_t WebKit::RemoteImageDecoderAVF::isAllDataReceived(WebKit::RemoteImageDecoderAVF *this)
{
  return *((unsigned __int8 *)this + 72);
}

uint64_t WebKit::RemoteImageDecoderAVFManager::ref(uint64_t this)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(this + 24);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    this = MEMORY[0x19972E8D0](v2);
  }
  ++*(void *)(v2 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  return this;
}

atomic_uchar *WebKit::RemoteImageDecoderAVFManager::deref(atomic_uchar **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::RemoteImageDecoderAVFManager,(WTF::DestructionThread)0>(this[3], a2);
}

uint64_t WebKit::RemoteImageDecoderAVFManager::controlBlock(WebKit::RemoteImageDecoderAVFManager *this)
{
  return *((void *)this + 3);
}

atomic_uchar *volatile *WebKit::LibWebRTCCodecs::ref(atomic_uchar *volatile *this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 2);
}

atomic_uchar *WebKit::LibWebRTCCodecs::deref(atomic_uchar **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(this[2], a2);
}

uint64_t WebKit::LibWebRTCCodecs::controlBlock(WebKit::LibWebRTCCodecs *this)
{
  return *((void *)this + 2);
}

atomic_uchar *volatile *non-virtual thunk to'WebKit::LibWebRTCCodecs::ref(atomic_uchar *volatile *this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this - 1);
}

atomic_uchar *non-virtual thunk to'WebKit::LibWebRTCCodecs::deref(atomic_uchar **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(this - 1), a2);
}

uint64_t non-virtual thunk to'WebKit::LibWebRTCCodecs::controlBlock(WebKit::LibWebRTCCodecs *this)
{
  return *((void *)this - 1);
}

uint64_t WebCore::MediaRecorderPrivate::ptrCount(WebCore::MediaRecorderPrivate *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t WebCore::MediaRecorderPrivate::ptrCountWithoutThreadCheck(WebCore::MediaRecorderPrivate *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t WebCore::MediaRecorderPrivate::incrementPtrCount(uint64_t this)
{
  return this;
}

uint64_t WebCore::MediaRecorderPrivate::decrementPtrCount(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 16);
  if (v1)
  {
    *(_DWORD *)(this + ++*(_DWORD *)(this + 16) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

atomic_uchar *volatile *WebKit::RemoteVideoFrameObjectHeapProxyProcessor::ref(atomic_uchar *volatile *this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 2);
}

atomic_uchar *WebKit::RemoteVideoFrameObjectHeapProxyProcessor::deref(atomic_uchar **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(this[2], a2);
}

uint64_t WebKit::RemoteVideoFrameObjectHeapProxyProcessor::controlBlock(WebKit::RemoteVideoFrameObjectHeapProxyProcessor *this)
{
  return *((void *)this + 2);
}

atomic_uchar *volatile *non-virtual thunk to'WebKit::RemoteVideoFrameObjectHeapProxyProcessor::ref(atomic_uchar *volatile *this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this - 1);
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteVideoFrameObjectHeapProxyProcessor::deref(atomic_uchar **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(this - 1), a2);
}

uint64_t non-virtual thunk to'WebKit::RemoteVideoFrameObjectHeapProxyProcessor::controlBlock(WebKit::RemoteVideoFrameObjectHeapProxyProcessor *this)
{
  return *((void *)this - 1);
}

uint64_t std::default_delete<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>::operator()[abi:sn180100](WebCore::WebAudioBufferList **a1)
{
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100](a1 + 13, 0);
  uint64_t v2 = a1[12];
  a1[12] = 0;
  if (v2) {
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](a1 + 96, v2);
  }
  if (*((unsigned char *)a1 + 88)) {
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)(a1 + 1));
  }
  int v3 = *a1;
  *a1 = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::WebAudioSourceProvider,(WTF::DestructionThread)1>::deref((unsigned int *)v3 + 2);
  }

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages26RemoteImageDecoderAVFProxy7SetDataEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 48))
  {
    int v3 = *(WTF **)(a2 + 32);
    if (v3)
    {
      *(void *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 40) = 0;
      WTF::fastFree(v3, (void *)a2);
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages26RemoteImageDecoderAVFProxy13CreateDecoderEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

WebKit::LibWebRTCCodecs::Decoder *std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>::reset[abi:sn180100](WebKit::LibWebRTCCodecs::Decoder **a1, WTF::StringImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::LibWebRTCCodecs::Decoder::~Decoder(result, a2);
    return (WebKit::LibWebRTCCodecs::Decoder *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebKit::LibWebRTCCodecs::Decoder::~Decoder(WebKit::LibWebRTCCodecs::Decoder *this, WTF::StringImpl *a2)
{
  WTF::Vector<WebKit::LibWebRTCCodecs::Decoder::EncodedFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 14, a2);
  char v4 = (atomic_uchar *volatile *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4)
  {
    char v5 = 0;
    atomic_uchar *volatile v6 = *v4;
    atomic_compare_exchange_strong_explicit(*v4, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5) {
      MEMORY[0x19972E8D0](v6);
    }
    uint64_t v7 = *((void *)v6 + 1);
    uint64_t v8 = v7 - 1;
    *((void *)v6 + 1) = v7 - 1;
    if (v7 == 1)
    {
      uint64_t v15 = *((void *)v6 + 2);
      uint64_t v10 = *((void *)v6 + 3);
      *((void *)v6 + 3) = 0;
      BOOL v9 = v15 == 0;
    }
    else
    {
      BOOL v9 = 0;
      uint64_t v10 = 0;
    }
    int v11 = 1;
    atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
    if (v11 == 1)
    {
      if (v8) {
        goto LABEL_10;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
      if (v8) {
        goto LABEL_10;
      }
    }
    uint64_t v12 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v12 = &unk_1EE9B37E8;
    *(void *)(v12 + 8) = v6;
    *(void *)(v12 + ++*(_DWORD *)(this + 16) = v10;
    *(unsigned char *)(v12 + 24) = v9;
    uint64_t v16 = v12;
    WTF::ensureOnMainRunLoop();
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
LABEL_10:
  uint64_t v13 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  int v14 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v3);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
}

WTF::Lock *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN3IPC5ErrorELj0EE11whenSettledIZN6WebKit15LibWebRTCCodecs12flushDecoderERNS8_7DecoderEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefINS2_IvvLj0EEENS_12RawPtrTraitsISS_EENS_21DefaultRefDerefTraitsISS_EEEEJSP_EE4callESP_@<X0>(uint64_t *a1@<X8>)
{
  v2[0] = 0;
  v2[1] = 0;
  v2[2] = "operator()";
  v2[3] = 0;
  return WTF::NativePromise<void,void,0u>::createAndResolve<std::enable_if<true,void>>((WTF::NativePromiseBase *)v2, a1);
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>::~ThenCallback(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EF470;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9EEFC0;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9EF470;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9EEFC0;
  char v4 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>::disconnect(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 1);
  v16[0] = a1;
  atomic_uchar *volatile v6 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v6) {
    BOOL v7 = v6[16] >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (v5) {
      uint64_t v8 = "Rejecting";
    }
    else {
      uint64_t v8 = "Resolving";
    }
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [11],void const*,char [2]>((uint64_t)v6, 4u, v8, " then() call made from ", (WTF::Logger::LogSiteIdentifier *)(a1 + 24), "[", a2, " callback:", (uint64_t)v16, "]");
  }
  char v9 = 0;
  int v10 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
  if (v9) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  int v11 = *(uint64_t **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  }
  (*(void (**)(atomic_uchar **__return_ptr))(**(void **)(a1 + 72) + 16))(&v17);
  if (v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    void v16[2] = "<chained completion promise>";
    __n128 v16[3] = 0;
    WTF::NativePromise<void,void,0u>::chainTo(v17, (unint64_t)v11, (WTF::Logger::LogSiteIdentifier *)v16);
  }
  uint64_t v12 = (unsigned int *)v17;
  unint64_t v17 = 0;
  if (v12 && atomic_fetch_add((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v12 + 2);
    (*(void (**)(unsigned int *))(*(void *)v12 + 16))(v12);
  }
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v11)
  {
    int v14 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v11);
    return WTF::fastFree((WTF *)v14, v15);
  }
  return result;
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIbN3IPC5ErrorELj0EE11whenSettledIZN6WebKit15LibWebRTCCodecs17sendFrameToDecodeERNS8_7DecoderExNSt3__14spanIKhLm18446744073709551615EEEttE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIbS4_EEE_NS_3RefINS2_IvNS_6StringELj0EEENS_12RawPtrTraitsISX_EENS_21DefaultRefDerefTraitsISX_EEEEJST_EE4callEST_@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 4))
  {
    uint64_t v2 = "Decoding task did not complete";
    uint64_t v3 = 31;
LABEL_3:
    *(void *)&long long v9 = v2;
    *((void *)&v9 + 1) = v3;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    BOOL v7 = "operator()";
    uint64_t v8 = 0;
    return WTF::NativePromise<void,WTF::String,0u>::createAndReject<WTF::ASCIILiteral,std::enable_if<true,void>>(&v9, (WTF::Logger::LogSiteIdentifier *)&v5, a2);
  }
  if (!*(unsigned char *)a1)
  {
    uint64_t v2 = "Decoding task failed";
    uint64_t v3 = 21;
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  BOOL v7 = "operator()";
  uint64_t v8 = 0;
  return WTF::NativePromise<void,WTF::String,0u>::createAndResolve<std::enable_if<true,void>>(a2, (WTF::Logger::LogSiteIdentifier *)&v5);
}

WTF::Lock *WTF::NativePromise<void,WTF::String,0u>::createAndResolve<std::enable_if<true,void>>(uint64_t *a1, WTF::Logger::LogSiteIdentifier *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x80);
  uint64_t v5 = WTF::NativePromise<void,WTF::String,0u>::NativePromise(v4, a2);
  *a1 = v5;

  return WTF::NativePromise<void,WTF::String,0u>::resolve<std::enable_if<true,void>>(v5, a2);
}

WTF::Lock *WTF::NativePromise<void,WTF::String,0u>::resolve<std::enable_if<true,void>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *a2)
{
  char v4 = 0;
  uint64_t v5 = (WTF::Lock *)(a1 + 48);
  int v11 = v5;
  char v12 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v5, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t v5 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  uint64_t v6 = (unsigned char *)WTF::NativePromiseBase::logChannel(v5);
  if (*v6) {
    BOOL v7 = v6[16] >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v6, a2, " resolving ", a1);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 72);
  if (v8 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9EF4E0[v8])(&v13, a1 + 56);
  }
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  int v9 = 1;
  *(_DWORD *)(a1 + 72) = 1;
  uint64_t result = (WTF::Lock *)WTF::NativePromise<void,WTF::String,0u>::dispatchAll(a1, (atomic_uchar *volatile *)&v11);
  if (v12)
  {
    uint64_t result = v11;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v11, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<void,WTF::String,0u>::NativePromise(uint64_t a1, _OWORD *a2)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9EF4C8;
  long long v3 = a2[1];
  *(_OWORD *)(a1 + ++*(_DWORD *)(this + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 96;
  *(void *)(a1 + 88) = 1;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  char v4 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v4 && v4[16] >= 4u) {
    WTF::Logger::log<char [10],WTF::NativePromise<void,WTF::String,0u>>((uint64_t)v4, 4u, "creating ", a1);
  }
  return a1;
}

uint64_t WTF::NativePromise<void,WTF::String,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  long long v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 116);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(v1 + 104);
    uint64_t v6 = 40 * v4;
    do
    {
      uint64_t result = *v5;
      if (*v5) {
        uint64_t result = WTF::NativePromise<void,WTF::String,0u>::assertIsDead();
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WTF::NativePromise<void,WTF::String,0u>::~NativePromise(unsigned int *a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<void,WTF::String,0u>::~NativePromise(a1);

  return WTF::fastFree(v1, v2);
}

{
  unsigned char *v2;
  BOOL v3;
  unsigned char *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  atomic_uchar *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  void v35[3];

  v35[2] = *MEMORY[0x1E4F143B8];
  char v2 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2) {
    long long v3 = v2[16] >= 4u;
  }
  else {
    long long v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v30, (uint64_t)a1);
    *(void *)long long buf = v31;
    v29[0] = v30;
    uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    int v7 = v30;
    int v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v8 = v31;
    int v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    int v9 = *((void *)v4 + 4);
    int v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      WTF::String::utf8();
      char v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      int v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1) {
          int v10 = (WTF *)WTF::fastFree(v10, v11);
        }
        else {
          --*(_DWORD *)v10;
        }
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      char v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v14 = *v13;
        if (v14) {
          break;
        }
        uint64_t v15 = *v13;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
        if (v15 == v14)
        {
          uint64_t v16 = WTF::Logger::observers(v10);
          unint64_t v17 = *(unsigned int *)(v16 + 12);
          if (v17)
          {
            unsigned int v18 = *(uint64_t **)v16;
            char v19 = *(void *)v16 + 8 * v17;
            do
            {
              uint64_t v20 = *v18;
              *(_DWORD *)long long buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "destroying ");
              char v34 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v35, (uint64_t)a1);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v20 + 16))(v20, v4, 4, v29);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v23 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2) {
                    WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                  }
                  else {
                    *(_DWORD *)v23 -= 2;
                  }
                }
              }
              ++v18;
            }
            while (v18 != (uint64_t *)v19);
          }
          CFTypeRef v24 = 1;
          atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
          if (v24 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    CFTypeRef v25 = v32;
    uint64_t v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  WTF::NativePromise<void,WTF::String,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<void,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 26), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 20), v27);
  int v28 = a1[18];
  if (v28 != -1) {
    ((void (*)(uint8_t *, unsigned int *))off_1EE9EF4E0[v28])(buf, a1 + 14);
  }
  a1[18] = -1;
  return (uint64_t)a1;
}

WTF::StringImpl *WTF::Logger::log<char [10],WTF::NativePromise<void,WTF::String,0u>>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  WTF::String::String((WTF::String *)&v30, a3);
  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v29, a4);
  *(void *)long long buf = v30;
  v28[0] = v29;
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
  if (v31)
  {
    int v9 = v29;
    CFTypeRef v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    int v10 = v30;
    int v30 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    int v11 = *(NSObject **)(a1 + 32);
    char v12 = (WTF *)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      WTF::String::utf8();
      int v14 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      char v12 = v28[0];
      v28[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1) {
          char v12 = (WTF *)WTF::fastFree(v12, v13);
        }
        else {
          --*(_DWORD *)v12;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      uint64_t v15 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v16 = *v15;
        if (v16) {
          break;
        }
        int v17 = *v15;
        atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v17, v16 | 1, memory_order_acquire, memory_order_acquire);
        if (v17 == v16)
        {
          uint64_t v18 = WTF::Logger::observers(v12);
          uint64_t v19 = *(unsigned int *)(v18 + 12);
          if (v19)
          {
            uint64_t v20 = *(uint64_t **)v18;
            uint64_t v21 = *(void *)v18 + 8 * v19;
            do
            {
              uint64_t v22 = *v20;
              *(_DWORD *)long long buf = 0;
              WTF::String::String((WTF::String *)&buf[8], a3);
              int v33 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v34, a4);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v22 + 16))(v22, a1, a2, v28);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v23);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                CFTypeRef v25 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v25)
                {
                  if (*(_DWORD *)v25 == 2) {
                    WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v13);
                  }
                  else {
                    *(_DWORD *)v25 -= 2;
                  }
                }
              }
              ++v20;
            }
            while (v20 != (uint64_t *)v21);
          }
          int v26 = 1;
          atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
          if (v26 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v31;
    int v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<void,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      uint64_t v4 = WTF::NativePromiseProducer<void,WTF::String,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t *WTF::NativePromiseProducer<void,WTF::String,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<void,WTF::String,0u>::assertIsDead(v2);
    uint64_t v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIvNS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSA_EENS8_8FunctionIFSH_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSD_SH_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIvNS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSA_EENS8_8FunctionIFSH_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSD_SH_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<void,WTF::String,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  int v17 = &v19;
  uint64_t v18 = 1;
  uint64_t v20 = (WTF::NativePromiseBase **)&v22;
  uint64_t v21 = 1;
  uint64_t v4 = *(void **)(a1 + 80);
  if (v4 == (void *)(a1 + 96))
  {
    uint64_t v5 = *(unsigned int *)(a1 + 92);
    memcpy(&v22, v4, 8 * v5);
  }
  else
  {
    *(void *)(a1 + 80) = a1 + 96;
    uint64_t v20 = (WTF::NativePromiseBase **)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 92);
    LODWORD(v21) = *(_DWORD *)(a1 + 88);
  }
  HIDWORD(v21) = v5;
  HIDWORD(v18) = 0;
  *(void *)(a1 + 88) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v4);
  uint64_t v6 = *(void *)(a1 + 104);
  int v17 = (uint64_t *)v6;
  uint64_t v7 = *(unsigned int *)(a1 + 116);
  LODWORD(v18) = *(_DWORD *)(a1 + 112);
  HIDWORD(v18) = v7;
  v16[0] = 0;
  *(void *)(a1 + 104) = 0;
  v16[1] = 0;
  *(void *)(a1 + 112) = 0;
  WTF::Vector<WTF::NativePromiseProducer<void,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v8);
  if (HIDWORD(v21))
  {
    int v10 = v20;
    uint64_t v11 = 8 * HIDWORD(v21);
    do
    {
      char v12 = *v10++;
      WTF::NativePromise<void,WTF::String,0u>::ThenCallbackBase::dispatch(v12, a1, a2);
      v11 -= 8;
    }
    while (v11);
  }
  if (v7)
  {
    uint64_t v13 = 40 * v7;
    do
    {
      WTF::NativePromise<void,WTF::String,0u>::settleChainedPromise(a1, v6);
      v6 += 40;
      v13 -= 40;
    }
    while (v13);
  }
  WTF::Vector<WTF::NativePromiseProducer<void,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v9);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v14);
}

unsigned __int8 *WTF::NativePromise<void,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, atomic_uchar *volatile *a3)
{
  uint64_t v5 = (atomic_uint *)a1;
  if (!*((void *)a1 + 2)
    || (int v6 = atomic_load((unsigned __int8 *)(a2 + 121)), v6 == 1)
    && (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(void))(**((void **)a1 + 2) + 24))(*((void *)a1 + 2)),
        a1))
  {
    if (*((unsigned char *)v5 + 56))
    {
      uint64_t v20 = (WTF::StringImpl *)v5;
      uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
      if (*result) {
        BOOL v10 = result[16] >= 4u;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10) {
        return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, a2, (uint64_t)&v20, (WTF::Logger::LogSiteIdentifier *)(v5 + 6));
      }
    }
    else
    {
      atomic_uchar *volatile v11 = *a3;
      int v12 = 1;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
      }
      if (WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(a2))
      {
        WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v19, a2);
        uint64_t v13 = v19;
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(void *)v19 + 16))(&v20, v19);
        (*(void (**)(atomic_uint *, uint64_t, WTF::StringImpl **))(*(void *)v5 + 24))(v5, a2, &v20);
        if (v21)
        {
          uint64_t v15 = v20;
          uint64_t v20 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v14);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
        }
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      else
      {
        WTF::NativePromise<void,WTF::String,0u>::takeResult(&v20, a2);
        (*(void (**)(atomic_uint *, uint64_t, WTF::StringImpl **))(*(void *)v5 + 24))(v5, a2, &v20);
        if (v21)
        {
          int v17 = v20;
          uint64_t v20 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v16);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
        }
      }
      char v18 = 0;
      uint64_t result = (unsigned __int8 *)*a3;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v18, 1u, memory_order_acquire, memory_order_acquire);
      if (v18) {
        return (unsigned __int8 *)MEMORY[0x19972E8D0]();
      }
    }
  }
  else
  {
    uint64_t v7 = *((void *)v5 + 2);
    atomic_fetch_add(v5 + 2, 1u);
    atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
    uint64_t v8 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v8 = &unk_1EE9EF508;
    *((void *)v8 + 1) = v5;
    *((void *)v8 + 2) = v5;
    *((void *)v8 + 3) = a2;
    uint64_t v20 = v8;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v7 + 16))(v7, &v20);
    uint64_t result = (unsigned __int8 *)v20;
    uint64_t v20 = 0;
    if (result) {
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t *WTF::NativePromise<void,WTF::String,0u>::settleChainedPromise(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(atomic_uint **)a2;
  *(void *)a2 = 0;
  int v9 = v2;
  long long v3 = *(_OWORD *)(a2 + 24);
  long long v10 = *(_OWORD *)(a2 + 8);
  long long v11 = v3;
  if (v2)
  {
    atomic_fetch_add(v2 + 2, 1u);
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = "<chained promise>";
    uint64_t v8 = 0;
    WTF::NativePromise<void,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<void,WTF::String,0u>::Storage>((uint64_t)v2, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v5);
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v2 + 2);
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = "<chained promise>";
    uint64_t v8 = 0;
    WTF::NativePromise<void,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<void,WTF::String,0u>::Storage>(0, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v5);
  }
  return WTF::NativePromiseProducer<void,WTF::String,0u>::~NativePromiseProducer((uint64_t *)&v9);
}

void *WTF::NativePromise<void,WTF::String,0u>::takeResult(void *result, uint64_t a2)
{
  long long v3 = result;
  char v4 = 0;
  uint64_t v5 = (atomic_uchar *)(a2 + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a2 + 48), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    uint64_t result = (void *)MEMORY[0x19972E8D0](a2 + 48);
  }
  if (*(_DWORD *)(a2 + 72) == 1)
  {
    unsigned char *v3 = 0;
    v3[8] = 0;
    if (*(unsigned char *)(a2 + 64))
    {
      uint64_t v6 = *(void *)(a2 + 56);
      *(void *)(a2 + 56) = 0;
      *(void *)long long v3 = v6;
      v3[8] = 1;
    }
    int v7 = 1;
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != 1)
    {
      return (void *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
    }
  }
  else
  {
    uint64_t v8 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Detail::CallableWrapper<WTF::NativePromise<void,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(v8);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EF508;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  long long v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<void,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EF508;
  long long v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  char v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::NativePromise<void,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<void,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1[56])
  {
    uint64_t v13 = *(WTF::StringImpl **)(a1 + 8);
    uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
    if (*result) {
      BOOL v4 = result[16] >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)&v13, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::hasRunnable(*(void *)(a1 + 24));
    uint64_t v7 = *(void *)(a1 + 24);
    if (hasRunnable)
    {
      WTF::NativePromise<WTF::String,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v12, v7);
      uint64_t v8 = v12;
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(void *)v12 + 16))(&v13, v12);
      (*(void (**)(unsigned char *, uint64_t, WTF::StringImpl **))(*(void *)v1 + 24))(v1, v7, &v13);
      if (v14)
      {
        long long v10 = v13;
        uint64_t v13 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2) {
            WTF::StringImpl::destroy(v10, v9);
          }
          else {
            *(_DWORD *)v10 -= 2;
          }
        }
      }
      return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<void,WTF::String,0u>::takeResult(&v13, v7);
      uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(unsigned char *, uint64_t, WTF::StringImpl **))(*(void *)v1 + 24))(v1, v7, &v13);
      if (v14)
      {
        uint64_t result = (unsigned __int8 *)v13;
        uint64_t v13 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<void,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<void,WTF::String,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  char v14 = v7;
  char v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  uint64_t v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 72);
  uint64_t v11 = *(unsigned int *)(a2 + 16);
  if (v10 == -1)
  {
    if (v11 == -1) {
      goto LABEL_14;
    }
  }
  else if (v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1EE9EF4E0[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 72) = -1;
    goto LABEL_14;
  }
  uint64_t v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1EE9EF520[v11])(&v16);
LABEL_14:
  uint64_t result = (WTF::Lock *)WTF::NativePromise<void,WTF::String,0u>::dispatchAll(a1, &v14);
  if (v15)
  {
    uint64_t result = v14;
    int v13 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvNS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSA_EENS8_8FunctionIFSH_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSD_SH_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 16);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9EF4E0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + ++*(_DWORD *)(this + 16) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvNS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSA_EENS8_8FunctionIFSH_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSD_SH_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9EF4E0[v5])(&v9, v4);
LABEL_8:
    *(unsigned char *)uint64_t v4 = 0;
    *(unsigned char *)(v4 + 8) = 0;
    if (*((unsigned char *)a3 + 8))
    {
      uint64_t v7 = *a3;
      *a3 = 0;
      *(void *)uint64_t v4 = v7;
      *(unsigned char *)(v4 + 8) = 1;
    }
    *(_DWORD *)(v4 + ++*(_DWORD *)(this + 16) = 1;
    return result;
  }
  if (!*((unsigned char *)a3 + 8))
  {
    if (!*((unsigned char *)a2 + 8)) {
      return result;
    }
    char v6 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    uint64_t result = std::__optional_destruct_base<WTF::String,false>::reset[abi:sn180100]((uint64_t)a2);
    if (!v6) {
      return result;
    }
    goto LABEL_14;
  }
  uint64_t v8 = *a3;
  *a3 = 0;
  if (!*((unsigned char *)a2 + 8))
  {
    *(void *)a2 = v8;
    *((unsigned char *)a2 + 8) = 1;
    return result;
  }
  char v6 = *(WTF::StringImpl **)a2;
  *(void *)a2 = v8;
  if (v6)
  {
LABEL_14:
    if (*(_DWORD *)v6 == 2)
    {
      return WTF::StringImpl::destroy(v6, a2);
    }
    else
    {
      *(_DWORD *)v6 -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIvNS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIvSA_EENS8_8FunctionIFSH_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSD_SH_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 16);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9EF4E0[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + ++*(_DWORD *)(this + 16) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

uint64_t WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,WTF::String,0u>>::~ThenCallback(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EF548;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,WTF::String,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9EF578;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9EF548;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,WTF::String,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9EF578;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,WTF::String,0u>>::disconnect(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,WTF::String,0u>>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v79[1] = *MEMORY[0x1E4F143B8];
  int v5 = *(_DWORD *)(a3 + 4);
  uint64_t v58 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)v58) {
    BOOL v6 = *(unsigned __int8 *)(v58 + 16) >= 4u;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    if (v5) {
      uint64_t v7 = "Rejecting";
    }
    else {
      uint64_t v7 = "Resolving";
    }
    unint64_t v57 = (char *)v7;
    WTF::String::String((WTF::String *)&v67, v7);
    WTF::String::String((WTF::String *)&v66, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v65, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v64, "[");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v63, a2);
    WTF::String::String((WTF::String *)&v62, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v60, "]");
    uint64_t result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v67, (uint64_t *)&v66, (uint64_t *)&v65, (uint64_t *)&v64, (uint64_t *)&v63, (uint64_t *)&v62, (uint64_t *)&v61, (uint64_t *)&v60, &v68);
    if (!v68)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v10 = v60;
    unint64_t v60 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    uint64_t v11 = v61;
    uint64_t v61 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = v62;
    unint64_t v62 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v9);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    int v13 = v63;
    int v63 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v9);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    char v14 = v64;
    uint64_t v64 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v9);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    char v15 = v65;
    uint64_t v65 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v9);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t v16 = v66;
    uint64_t v66 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v9);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    int v17 = v67;
    int v67 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v9);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    char v18 = *(NSObject **)(v58 + 32);
    uint64_t v19 = (WTF *)os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (v19)
    {
      WTF::String::utf8();
      char v21 = v59[0] ? (char *)v59[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v21;
      _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v19 = v59[0];
      v59[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1) {
          uint64_t v19 = (WTF *)WTF::fastFree(v19, v20);
        }
        else {
          --*(_DWORD *)v19;
        }
      }
    }
    if (*(unsigned char *)v58 && *(unsigned __int8 *)(v58 + 16) >= 4u)
    {
      uint64_t v22 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v23 = *v22;
        if (v23) {
          break;
        }
        int v24 = *v22;
        atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v24, v23 | 1, memory_order_acquire, memory_order_acquire);
        if (v24 == v23)
        {
          uint64_t v25 = WTF::Logger::observers(v19);
          uint64_t v26 = *(unsigned int *)(v25 + 12);
          if (v26)
          {
            CFTypeRef v27 = *(uint64_t **)v25;
            uint64_t v56 = *(void *)v25 + 8 * v26;
            do
            {
              uint64_t v28 = *v27;
              *(_DWORD *)long long buf = 0;
              WTF::String::String((WTF::String *)&buf[8], v57);
              LODWORD(v70) = 0;
              WTF::String::String((WTF::String *)&v71, " then() call made from ");
              int v72 = 0;
              WTF::Logger::LogSiteIdentifier::toString(&v73, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
              int v74 = 0;
              WTF::String::String((WTF::String *)v75, "[");
              v75[2] = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v76, a2);
              int v77 = 0;
              WTF::String::String((WTF::String *)v78, " callback:");
              v78[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v78[6] = 0;
              WTF::String::String((WTF::String *)v79, "]");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v59, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v28 + 16))(v28, v58, 4, v59);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v59, v29);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                int v31 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v31)
                {
                  if (*(_DWORD *)v31 == 2) {
                    WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v20);
                  }
                  else {
                    *(_DWORD *)v31 -= 2;
                  }
                }
              }
              ++v27;
            }
            while (v27 != (uint64_t *)v56);
          }
          int v32 = 1;
          atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
          if (v32 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    int v33 = v68;
    unint64_t v68 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v20);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
  char v34 = 0;
  int v35 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v34, 1u, memory_order_acquire, memory_order_acquire);
  if (v34) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  unint64_t v36 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,WTF::String,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v35, 0, memory_order_release, memory_order_relaxed);
  if (v35 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  }
  uint64_t v37 = (WTF::NativePromiseBase *)(*(void *(**)(WTF **__return_ptr))(**(void **)(a1 + 72) + 16))(v59);
  if (v36)
  {
    char v38 = 0;
    uint64_t v39 = v59[0];
    *(_OWORD *)long long buf = 0uLL;
    unint64_t v70 = "<chained completion promise>";
    uint64_t v71 = 0;
    uint64_t v40 = (char *)v59[0] + 48;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v59[0] + 48, (unsigned __int8 *)&v38, 1u, memory_order_acquire, memory_order_acquire);
    if (v38) {
      uint64_t v37 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0](v40);
    }
    *((unsigned char *)v39 + 120) = 1;
    char v41 = *(atomic_uchar **)v36;
    if (*(void *)v36) {
      atomic_fetch_add((atomic_uint *volatile)v41 + 2, 1u);
    }
    LOBYTE(v68) = *((_DWORD *)v39 + 18) == 0;
    char v42 = (unsigned char *)WTF::NativePromiseBase::logChannel(v37);
    if (*v42 && v42[16] >= 4u) {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [22],WTF::NativePromise<void,WTF::String,0u>,char [17],WTF::NativePromise<void,WTF::String,0u>,char [12],BOOL,char [2]>((uint64_t)v42, (WTF::Logger::LogSiteIdentifier *)buf, (uint64_t)v39, (uint64_t)v41, " isNothing:");
    }
    if (v41 && atomic_fetch_add((atomic_uint *volatile)v41 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v41 + 2);
      (*(void (**)(atomic_uchar *))(*(void *)v41 + 16))(v41);
    }
    unsigned __int8 v43 = atomic_load((unsigned __int8 *)v39 + 121);
    WTF::NativePromise<void,WTF::String,0u>::setDispatchMode(*(atomic_uchar **)v36, v43, (WTF::Logger::LogSiteIdentifier *)buf);
    if (*((_DWORD *)v39 + 18))
    {
      WTF::NativePromise<void,WTF::String,0u>::settleChainedPromise((uint64_t)v39, v36);
    }
    else
    {
      uint64_t v44 = *((unsigned int *)v39 + 29);
      if (v44 == *((_DWORD *)v39 + 28))
      {
        unint64_t v45 = WTF::Vector<WTF::NativePromiseProducer<void,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39 + 104, v44 + 1, v36);
        uint64_t v46 = *((void *)v39 + 13) + 40 * *((unsigned int *)v39 + 29);
        uint64_t v47 = *(void *)v45;
        *(void *)unint64_t v45 = 0;
        *(void *)uint64_t v46 = v47;
        long long v48 = *(_OWORD *)(v45 + 24);
        *(_OWORD *)(v46 + 8) = *(_OWORD *)(v45 + 8);
        *(_OWORD *)(v46 + 24) = v48;
      }
      else
      {
        uint64_t v49 = *((void *)v39 + 13) + 40 * v44;
        uint64_t v50 = *(atomic_uchar **)v36;
        *(void *)unint64_t v36 = 0;
        *(void *)uint64_t v49 = v50;
        long long v51 = *(_OWORD *)(v36 + 8);
        *(_OWORD *)(v49 + 24) = *(_OWORD *)(v36 + 24);
        *(_OWORD *)(v49 + 8) = v51;
      }
      ++*((_DWORD *)v39 + 29);
    }
    int v52 = 1;
    atomic_compare_exchange_strong_explicit(v40, (unsigned __int8 *)&v52, 0, memory_order_release, memory_order_relaxed);
    if (v52 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v40);
    }
  }
  uint64_t v53 = (unsigned int *)v59[0];
  v59[0] = 0;
  if (v53 && atomic_fetch_add((atomic_uint *volatile)v53 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v53 + 2);
    (*(void (**)(unsigned int *))(*(void *)v53 + 16))(v53);
  }
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v36)
  {
    int v54 = WTF::NativePromiseProducer<void,WTF::String,0u>::~NativePromiseProducer((uint64_t *)v36);
    return WTF::fastFree((WTF *)v54, v55);
  }
  return result;
}

uint64_t WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(unsigned char *)(result + 56) = 1;
  return result;
}

uint64_t *std::unique_ptr<WTF::NativePromiseProducer<void,WTF::String,0u>>::reset[abi:sn180100](uint64_t **a1, uint64_t *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    uint64_t v4 = WTF::NativePromiseProducer<void,WTF::String,0u>::~NativePromiseProducer(result);
    return (uint64_t *)WTF::fastFree((WTF *)v4, v5);
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [22],WTF::NativePromise<void,WTF::String,0u>,char [17],WTF::NativePromise<void,WTF::String,0u>,char [12],BOOL,char [2]>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, uint64_t a3, uint64_t a4, const char *a5)
{
  v58[1] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v44, this);
  WTF::String::String((WTF::String *)&v43, " invoking chainTo() [");
  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v42, a3);
  WTF::String::String((WTF::String *)&v41, " chainedPromise:");
  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v40, a4);
  WTF::String::String((WTF::String *)&v39, a5);
  WTF::LogArgument<BOOL>::toString<BOOL>(&v38);
  WTF::String::String((WTF::String *)&v37, "]");
  uint64_t result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v44, (uint64_t *)&v43, (uint64_t *)&v42, (uint64_t *)&v41, (uint64_t *)&v40, (uint64_t *)&v39, (uint64_t *)&v38, (uint64_t *)&v37, &v45);
  if (v45)
  {
    uint64_t v10 = v37;
    uint64_t v37 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    uint64_t v11 = v38;
    char v38 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v9);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = v39;
    uint64_t v39 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v9);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    int v13 = v40;
    uint64_t v40 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v9);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    char v14 = v41;
    char v41 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v9);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    char v15 = v42;
    char v42 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v9);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t v16 = v43;
    unsigned __int8 v43 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v9);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    int v17 = v44;
    uint64_t v44 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v9);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    char v18 = *(NSObject **)(a1 + 32);
    uint64_t v19 = (WTF *)os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (v19)
    {
      WTF::String::utf8();
      char v21 = v36[0] ? (char *)v36[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      uint64_t v47 = v21;
      _os_log_impl(&dword_1985F2000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v19 = v36[0];
      v36[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1) {
          uint64_t v19 = (WTF *)WTF::fastFree(v19, v20);
        }
        else {
          --*(_DWORD *)v19;
        }
      }
    }
    if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
    {
      uint64_t v22 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v23 = *v22;
        if (v23) {
          break;
        }
        int v24 = *v22;
        atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v24, v23 | 1, memory_order_acquire, memory_order_acquire);
        if (v24 == v23)
        {
          uint64_t v25 = WTF::Logger::observers(v19);
          uint64_t v26 = *(unsigned int *)(v25 + 12);
          if (v26)
          {
            CFTypeRef v27 = *(uint64_t **)v25;
            uint64_t v33 = *(void *)v25 + 8 * v26;
            do
            {
              uint64_t v28 = *v27;
              *(_DWORD *)long long buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v47 + 4), this);
              int v48 = 0;
              WTF::String::String((WTF::String *)v49, " invoking chainTo() [");
              v49[2] = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v50, a3);
              int v51 = 0;
              WTF::String::String((WTF::String *)v52, " chainedPromise:");
              v52[2] = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v53, a4);
              int v54 = 0;
              WTF::String::String((WTF::String *)v55, a5);
              v55[2] = 0;
              WTF::LogArgument<BOOL>::toString<BOOL>(&v56);
              int v57 = 0;
              WTF::String::String((WTF::String *)v58, "]");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v36, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v28 + 16))(v28, a1, 4, v36);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v36, v29);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                int v31 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v31)
                {
                  if (*(_DWORD *)v31 == 2) {
                    WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v20);
                  }
                  else {
                    *(_DWORD *)v31 -= 2;
                  }
                }
              }
              ++v27;
            }
            while (v27 != (uint64_t *)v33);
          }
          int v32 = 1;
          atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
          if (v32 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = v45;
    unint64_t v45 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v20);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WTF::NativePromise<void,WTF::String,0u>::setDispatchMode(atomic_uchar *a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5 = (uint64_t)a1;
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  atomic_compare_exchange_strong_explicit(a1 + 48, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    a1 = (atomic_uchar *)MEMORY[0x19972E8D0](a1 + 48);
  }
  uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)result) {
    BOOL v9 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    uint64_t result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)result, a3, " runSynchronouslyOnTarget ", v5);
  }
  atomic_store(a2, (unsigned __int8 *)(v5 + 121));
  int v10 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v5 + 48), (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1)
  {
    return (WTF::StringImpl *)WTF::Lock::unlockSlow(v7);
  }
  return result;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<void,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::NativePromiseProducer<void,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
  }
  else
  {
    unint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::NativePromiseProducer<void,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t *WTF::Vector<WTF::NativePromiseProducer<void,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      unint64_t v3 = (WTF *)*result;
      unsigned int v4 = *((_DWORD *)result + 3);
      int v5 = 40 * a2;
      uint64_t result = (uint64_t *)WTF::fastMalloc((WTF *)(40 * a2));
      *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x28;
      uint64_t *v2 = (uint64_t)result;
      if (v4)
      {
        unint64_t v7 = result;
        uint64_t result = (uint64_t *)v3;
        do
        {
          uint64_t v8 = *result;
          *uint64_t result = 0;
          *unint64_t v7 = v8;
          long long v9 = *(_OWORD *)(result + 1);
          *(_OWORD *)(v7 + 3) = *(_OWORD *)(result + 3);
          *(_OWORD *)(v7 + 1) = v9;
          uint64_t result = WTF::NativePromiseProducer<void,WTF::String,0u>::~NativePromiseProducer(result) + 5;
          v7 += 5;
        }
        while (result != (uint64_t *)((char *)v3 + 40 * v4));
      }
      if (v3)
      {
        if ((WTF *)*v2 == v3)
        {
          uint64_t *v2 = 0;
          *((_DWORD *)v2 + 2) = 0;
        }
        return (uint64_t *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

atomic_uchar *volatile **WebKit::LibWebRTCCodecs::protectedConnection(atomic_uchar *volatile **this, atomic_uchar *volatile *a2)
{
  unint64_t v3 = this;
  if (a2)
  {
    char v4 = 0;
    atomic_uchar *volatile v5 = *a2;
    int v6 = 1;
    atomic_compare_exchange_strong_explicit(*a2, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      this = (atomic_uchar *volatile **)MEMORY[0x19972E8D0](v5);
    }
    ++*((void *)v5 + 1);
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != 1) {
      this = (atomic_uchar *volatile **)WTF::Lock::unlockSlow((WTF::Lock *)v5);
    }
  }
  WTF *v3 = a2;
  return this;
}

unsigned int *WebKit::LibWebRTCCodecs::completedDecoding(WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,long long,long long,WebKit::RemoteVideoFrameProxyProperties &&)::$_1::__invoke<void>(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result + 2);
    return (unsigned int *)(*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

WebKit::LibWebRTCCodecs::Encoder *std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>::reset[abi:sn180100](WebKit::LibWebRTCCodecs::Encoder **a1, WebKit::LibWebRTCCodecs::Encoder *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::LibWebRTCCodecs::Encoder::~Encoder(result);
    return (WebKit::LibWebRTCCodecs::Encoder *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebKit::LibWebRTCCodecs::Encoder::~Encoder(WebKit::LibWebRTCCodecs::Encoder *this)
{
  uint64_t v2 = (IPC::Semaphore **)((char *)this + 104);
  unint64_t v3 = (unsigned int *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  }
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100](v2, 0);
  atomic_uchar *volatile v5 = (atomic_uchar *volatile *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v5)
  {
    char v6 = 0;
    atomic_uchar *volatile v7 = *v5;
    atomic_compare_exchange_strong_explicit(*v5, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (v6) {
      MEMORY[0x19972E8D0](v7);
    }
    uint64_t v8 = *((void *)v7 + 1);
    uint64_t v9 = v8 - 1;
    *((void *)v7 + 1) = v8 - 1;
    if (v8 == 1)
    {
      uint64_t v18 = *((void *)v7 + 2);
      uint64_t v11 = *((void *)v7 + 3);
      *((void *)v7 + 3) = 0;
      BOOL v10 = v18 == 0;
    }
    else
    {
      BOOL v10 = 0;
      uint64_t v11 = 0;
    }
    int v12 = 1;
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 == 1)
    {
      if (v9) {
        goto LABEL_12;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
      if (v9) {
        goto LABEL_12;
      }
    }
    uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v13 = &unk_1EE9B37E8;
    *(void *)(v13 + 8) = v7;
    *(void *)(v13 + ++*(_DWORD *)(this + 16) = v11;
    *(unsigned char *)(v13 + 24) = v10;
    uint64_t v19 = v13;
    WTF::ensureOnMainRunLoop();
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
LABEL_12:
  uint64_t v14 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, v4);
  int v17 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v16);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
}

WTF::Lock *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN3IPC5ErrorELj0EE11whenSettledIZN6WebKit15LibWebRTCCodecs12flushEncoderERNS8_7EncoderEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefINS2_IvvLj0EEENS_12RawPtrTraitsISS_EENS_21DefaultRefDerefTraitsISS_EEEEJSP_EE4callESP_@<X0>(uint64_t *a1@<X8>)
{
  v2[0] = 0;
  v2[1] = 0;
  v2[2] = "operator()";
  v2[3] = 0;
  return WTF::NativePromise<void,void,0u>::createAndResolve<std::enable_if<true,void>>((WTF::NativePromiseBase *)v2, a1);
}

WTF::Lock *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN3IPC5ErrorELj0EE11whenSettledIZN6WebKit15LibWebRTCCodecs14setEncodeRatesERNS8_7EncoderEjjE3__1EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_NS_3RefINS2_IvvLj0EEENS_12RawPtrTraitsISS_EENS_21DefaultRefDerefTraitsISS_EEEEJSP_EE4callESP_@<X0>(uint64_t *a1@<X8>)
{
  v2[0] = 0;
  v2[1] = 0;
  v2[2] = "operator()";
  v2[3] = 0;
  return WTF::NativePromise<void,void,0u>::createAndResolve<std::enable_if<true,void>>((WTF::NativePromiseBase *)v2, a1);
}

uint64_t WebCore::MediaRecorderPrivate::startRecording(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = *(_DWORD **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  if (v3) {
    *v3 += 2;
  }
  v6[0] = v3;
  int v7 = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, void *, void, void))(*(void *)v4 + 16))(v4, v6, 0, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  if (v7 != -1) {
    return ((uint64_t (*)(char *, void *))off_1EE9EF688[v7])(&v8, v6);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver::~MediaRecorderPrivateGPUProcessDidCloseObserver(WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver *this, void *a2)
{
  unint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  uint64_t vars8;

  unint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  WTF::fastFree(this, a2);
}

uint64_t WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver::ref(uint64_t this)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(this + 8);
  int v3 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    this = MEMORY[0x19972E8D0](v2);
  }
  ++*(void *)(v2 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v2, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  return this;
}

atomic_uchar *WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver::deref(atomic_uchar **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver,(WTF::DestructionThread)0>(this[1], a2);
}

uint64_t WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver::controlBlock(WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver *this)
{
  return *((void *)this + 1);
}

uint64_t WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver::gpuProcessConnectionDidClose(WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver *this, WebKit::GPUProcessConnection *a2)
{
  uint64_t v2 = (atomic_uint *)*((void *)this + 2);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  int v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EE9EF6E8;
  v3[1] = v2;
  uint64_t v5 = (uint64_t)v3;
  WTF::callOnMainRunLoop();
  uint64_t result = v5;
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return result;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v10 = *((void *)v2 + 2);
    int v7 = (WTF *)*((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v10 != 0;
  }
  else
  {
    int v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7)
  {
    uint64_t v9 = (unsigned int *)*((void *)v7 + 2);
    *((void *)v7 + 2) = 0;
    if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
    this = (atomic_uchar *)WTF::fastFree(v7, a2);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

void *WTF::Detail::CallableWrapper<WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver::gpuProcessConnectionDidClose(WebKit::GPUProcessConnection &)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  char v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9EF6E8;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver::gpuProcessConnectionDidClose(WebKit::GPUProcessConnection &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  char v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9EF6E8;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::MediaRecorderPrivateGPUProcessDidCloseObserver::gpuProcessConnectionDidClose(WebKit::GPUProcessConnection &)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      *(unsigned char *)(v2 + 273) = 1;
      JUMPOUT(0x1997420B0);
    }
  }
  return result;
}

_DWORD *WTF::RefCounted<WebCore::MediaStreamTrackPrivate>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    uint64_t v1 = (WTF *)MEMORY[0x1997378D0](result - 2);
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages26RemoteVideoFrameObjectHeap18ConvertFrameBufferEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderManager::addProvider(WTF::Ref<WebKit::RemoteAudioSourceProvider,WTF::RawPtrTraits<WebKit::RemoteAudioSourceProvider>,WTF::DefaultRefDerefTraits<WebKit::RemoteAudioSourceProvider>> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9EF740;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::WebAudioSourceProvider,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderManager::addProvider(WTF::Ref<WebKit::RemoteAudioSourceProvider,WTF::RawPtrTraits<WebKit::RemoteAudioSourceProvider>,WTF::DefaultRefDerefTraits<WebKit::RemoteAudioSourceProvider>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EF740;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::WebAudioSourceProvider,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

WebCore::WebAudioBufferList **WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderManager::addProvider(WTF::Ref<WebKit::RemoteAudioSourceProvider,WTF::RawPtrTraits<WebKit::RemoteAudioSourceProvider>,WTF::DefaultRefDerefTraits<WebKit::RemoteAudioSourceProvider>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 248);
  uint64_t v4 = WTF::fastMalloc((WTF *)0x70);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  *(void *)uint64_t v4 = v5;
  *(unsigned char *)(v4 + 8) = 0;
  *(unsigned char *)(v4 + 88) = 0;
  *(void *)(v4 + 96) = 0;
  *(void *)(v4 + 104) = 0;
  uint64_t v8 = *(void *)(v2 + 40);
  int v7 = (uint64_t *)(v2 + 40);
  uint64_t v6 = v8;
  if (v8
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v7),
        (uint64_t v6 = *v7) != 0))
  {
    int v9 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unint64_t v10 = (v3 + ~(v3 << 32)) ^ ((unint64_t)(v3 + ~(v3 << 32)) >> 22);
  unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v9 & ((v12 >> 31) ^ v12);
  uint64_t v14 = (void *)(v6 + 16 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    while (v15 != v3)
    {
      if (v15 == -1) {
        uint64_t v16 = v14;
      }
      unsigned int v13 = (v13 + v17) & v9;
      uint64_t v14 = (void *)(v6 + 16 * v13);
      uint64_t v15 = *v14;
      ++v17;
      if (!*v14)
      {
        if (v16)
        {
          *uint64_t v16 = 0;
          v16[1] = 0;
          --*(_DWORD *)(*v7 - 16);
          uint64_t v14 = v16;
        }
        goto LABEL_12;
      }
    }
    return (WebCore::WebAudioBufferList **)std::default_delete<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>::operator()[abi:sn180100]((WebCore::WebAudioBufferList **)v4);
  }
  else
  {
LABEL_12:
    uint64_t result = (WebCore::WebAudioBufferList **)v14[1];
    *uint64_t v14 = v3;
    v14[1] = v4;
    if (result) {
      uint64_t result = (WebCore::WebAudioBufferList **)std::default_delete<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>::operator()[abi:sn180100](result);
    }
    uint64_t v19 = *v7;
    if (*v7) {
      int v20 = *(_DWORD *)(v19 - 12) + 1;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(v19 - 12) = v20;
    uint64_t v21 = *v7;
    if (*v7) {
      int v22 = *(_DWORD *)(v21 - 12);
    }
    else {
      int v22 = 0;
    }
    uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
    unint64_t v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 > 2 * v23) {
        return result;
      }
    }
    else if (3 * v24 > 4 * v23)
    {
      return result;
    }
    return (WebCore::WebAudioBufferList **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v7);
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      unint64_t v10 = (uint64_t *)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          uint64_t v23 = (uint64_t *)(v14 + 16 * v21);
          unint64_t v24 = (WebCore::WebAudioBufferList **)v23[1];
          v23[1] = 0;
          if (v24) {
            std::default_delete<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>::operator()[abi:sn180100](v24);
          }
          uint64_t *v23 = *v10;
          uint64_t v25 = v4 + 16 * v9;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          v23[1] = v26;
          unsigned int v13 = *(WebCore::WebAudioBufferList ***)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (!v13) {
            goto LABEL_19;
          }
LABEL_18:
          std::default_delete<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>::operator()[abi:sn180100](v13);
          goto LABEL_19;
        }
        uint64_t v12 = v4 + 16 * v9;
        unsigned int v13 = *(WebCore::WebAudioBufferList ***)(v12 + 8);
        *(void *)(v12 + 8) = 0;
        if (v13) {
          goto LABEL_18;
        }
      }
LABEL_19:
      if (++v9 == v5) {
        goto LABEL_22;
      }
    }
  }
  if (v4)
  {
LABEL_22:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderManager::removeProvider(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9EF768;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderManager::removeProvider(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EF768;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 16), a2);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteAudioSourceProviderManager::removeProvider(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v1 + 40);
  int v2 = (uint64_t *)(v1 + 40);
  uint64_t v3 = v4;
  uint64_t result = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4, *(void *)(a1 + 24));
  if (v4)
  {
    int v6 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    int v6 = 0;
  }
  if (v6 != result)
  {
    int v7 = (WebCore::WebAudioBufferList **)result[1];
    *uint64_t result = -1;
    result[1] = 0;
    if (v7) {
      uint64_t result = (void *)std::default_delete<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>::operator()[abi:sn180100](v7);
    }
    ++*(_DWORD *)(*v2 - 16);
    uint64_t v8 = *v2;
    if (*v2) {
      int v9 = *(_DWORD *)(v8 - 12) - 1;
    }
    else {
      int v9 = -1;
    }
    *(_DWORD *)(v8 - 12) = v9;
    uint64_t v10 = *v2;
    if (*v2)
    {
      unsigned int v11 = 6 * *(_DWORD *)(v10 - 12);
      unsigned int v12 = *(_DWORD *)(v10 - 4);
      if (v11 < v12 && v12 >= 9)
      {
        return (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteAudioSourceProviderManager::RemoteAudio>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v2, v12 >> 1);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<int>>,int>(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 - 8);
  unsigned int v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  uint64_t v4 = v2 & (((v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11)) ^ (((v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11)) >> 16));
  int v5 = *(_DWORD *)(a1 + 16 * v4);
  if (v5 == a2) {
    return 1;
  }
  int v7 = 1;
  do
  {
    BOOL v6 = v5 != 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      break;
    }
    LODWORD(v4) = (v4 + v7) & v2;
    int v5 = *(_DWORD *)(a1 + 16 * v4);
    ++v7;
  }
  while (v5 != a2);
  return v6;
}

void *WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<int>>,int>(void *result, uint64_t a2, int a3)
{
  if (!a2)
  {
LABEL_8:
    *uint64_t result = 0;
    return result;
  }
  unsigned int v3 = *(_DWORD *)(a2 - 8);
  unsigned int v4 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  unsigned int v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  uint64_t v6 = v3 & (v5 ^ HIWORD(v5));
  int v7 = *(_DWORD *)(a2 + 16 * v6);
  if (v7 != a3)
  {
    int v8 = 1;
    while (v7 != 0x7FFFFFFF)
    {
      uint64_t v6 = (v6 + v8) & v3;
      int v7 = *(_DWORD *)(a2 + 16 * v6);
      ++v8;
      if (v7 == a3) {
        goto LABEL_6;
      }
    }
    goto LABEL_8;
  }
LABEL_6:
  int v9 = *(const void **)(a2 + 16 * v6 + 8);
  *uint64_t result = v9;
  if (v9) {
    return CFRetain(v9);
  }
  return result;
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::RemoteImageDecoderAVF::createFrameImageAtIndex(unsigned long,WebCore::SubsamplingLevel,WebCore::DecodingOptions const&)::$_0,void>::call(uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
  uint64_t result = (atomic_uchar *)v2[3];
  if (!result) {
    return result;
  }
  uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, v2[4], &v48);
  if (!v48) {
    return result;
  }
  uint64_t v4 = *(void *)(v48 + 32);
  uint64_t v5 = **(void **)(a1 + 16);
  uint64_t v55 = 0;
  IPC::Connection::createSyncMessageEncoder(3712, 0, &v55, &v54);
  uint64_t v6 = v54;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v54, v2 + 6);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v6, v5);
  IPC::Connection::sendSyncMessage(v4, v55, (uint64_t *)&v54, 0, (uint64_t)&cf, INFINITY);
  if (!v53)
  {
    LOBYTE(v49[0]) = 0;
    char v51 = 0;
    IPC::Decoder::operator>><std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>((uint64_t *)cf, (WTF::MachSendRight *)v49);
    if (v51)
    {
      if (v53) {
        goto LABEL_60;
      }
      int v9 = (IPC::Decoder *)cf;
      CFTypeRef cf = 0;
      uint64_t v56 = v9;
      v57[0] = 0;
      char v59 = 0;
      if (v50)
      {
        WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v57, (uint64_t)v49);
        char v59 = 1;
        uint64_t v10 = v56;
        uint64_t v56 = 0;
        uint64_t v44 = v10;
        v45[0] = 0;
        char v46 = 0;
        WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v45, (uint64_t)v57);
        char v46 = 1;
      }
      else
      {
        uint64_t v56 = 0;
        uint64_t v44 = v9;
        v45[0] = 0;
        char v46 = 0;
      }
      int v47 = 0;
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v57);
      unsigned int v11 = v56;
      uint64_t v56 = 0;
      if (v11)
      {
        IPC::Decoder::~Decoder(v11);
        WTF::fastFree(v40, v41);
      }
      if (v51) {
        std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v49);
      }
    }
    else
    {
      LOBYTE(v44) = 13;
      int v47 = 1;
    }
    int v7 = v53;
    if (v53 == -1) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v53 != 1)
  {
LABEL_60:
    char v42 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return (atomic_uchar *)WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::expand(v42, v43);
  }
  LOBYTE(v44) = (_BYTE)cf;
  int v7 = 1;
  int v47 = 1;
LABEL_17:
  ((void (*)(IPC::Decoder **, CFTypeRef *))off_1EE9EF7A8[v7])(&v56, &cf);
LABEL_18:
  unsigned int v12 = v54;
  int v54 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v8);
    WTF::fastFree(v33, v34);
  }
  if (!v47)
  {
    LOBYTE(v56) = 0;
    char v58 = 0;
    if (!v46) {
      goto LABEL_22;
    }
    WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)&v56, (uint64_t)v45);
    char v58 = 1;
    int v15 = (const void *)WebCore::SharedMemoryHandle::takeOwnershipOfMemory();
    if (!v58)
    {
      __break(1u);
LABEL_59:
      CFRelease(v15);
LABEL_53:
      uint64_t v39 = v49[0];
      v49[0] = 0;
      if (v39) {
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v39, v17);
      }
      goto LABEL_22;
    }
    WebCore::ShareableBitmap::create();
    if (!v49[0]) {
      goto LABEL_22;
    }
    int v16 = **(_DWORD **)(a1 + 16);
    WebCore::ShareableBitmap::makeCGImage();
    uint64_t v20 = v2[11];
    unsigned int v19 = v2 + 11;
    uint64_t v18 = v20;
    if (v20
      || (WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::expand(v19, 0), (uint64_t v18 = *v19) != 0))
    {
      int v21 = *(_DWORD *)(v18 - 8);
    }
    else
    {
      int v21 = 0;
    }
    unsigned int v22 = 9 * ((~(v16 << 15) + v16) ^ ((~(v16 << 15) + v16) >> 10));
    unsigned int v23 = (v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11);
    unsigned int v24 = v21 & (v23 ^ HIWORD(v23));
    uint64_t v25 = v18 + 16 * v24;
    int v26 = *(_DWORD *)v25;
    if (*(_DWORD *)v25 != 0x7FFFFFFF)
    {
      uint64_t v27 = 0;
      int v28 = 1;
      while (v26 != v16)
      {
        if (v26 == 2147483646) {
          uint64_t v27 = v25;
        }
        unsigned int v24 = (v24 + v28) & v21;
        uint64_t v25 = v18 + 16 * v24;
        int v26 = *(_DWORD *)v25;
        ++v28;
        if (*(_DWORD *)v25 == 0x7FFFFFFF)
        {
          if (v27)
          {
            *(_DWORD *)uint64_t v27 = 0x7FFFFFFF;
            *(void *)(v27 + 8) = 0;
            --*(_DWORD *)(*v19 - 16);
            uint64_t v25 = v27;
          }
          goto LABEL_41;
        }
      }
LABEL_52:
      int v15 = cf;
      CFTypeRef cf = 0;
      if (!v15) {
        goto LABEL_53;
      }
      goto LABEL_59;
    }
LABEL_41:
    *(_DWORD *)uint64_t v25 = v16;
    CFTypeRef v29 = cf;
    CFTypeRef cf = 0;
    int v30 = *(const void **)(v25 + 8);
    *(void *)(v25 + 8) = v29;
    if (v30) {
      CFRelease(v30);
    }
    uint64_t v31 = *v19;
    if (*v19) {
      int v32 = *(_DWORD *)(v31 - 12) + 1;
    }
    else {
      int v32 = 1;
    }
    *(_DWORD *)(v31 - 12) = v32;
    uint64_t v35 = *v19;
    if (*v19) {
      int v36 = *(_DWORD *)(v35 - 12);
    }
    else {
      int v36 = 0;
    }
    uint64_t v37 = (*(_DWORD *)(v35 - 16) + v36);
    unint64_t v38 = *(unsigned int *)(v35 - 4);
    if (v38 > 0x400)
    {
      if (v38 > 2 * v37) {
        goto LABEL_52;
      }
    }
    else if (3 * v38 > 4 * v37)
    {
      goto LABEL_52;
    }
    WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::expand(v19, v25);
    goto LABEL_52;
  }
  LOBYTE(v56) = 0;
  char v58 = 0;
LABEL_22:
  uint64_t result = (atomic_uchar *)std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v56);
  if (v47 != -1) {
    uint64_t result = (atomic_uchar *)((uint64_t (*)(atomic_uchar *, IPC::Decoder **))off_1EE9EF7B8[v47])(result, &v44);
  }
  uint64_t v14 = v48;
  uint64_t v48 = 0;
  if (v14) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v14 + 24), v13);
  }
  return result;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RetainPtr<CGImage *>>>,WTF::IntHash<int>,WTF::HashMap<int,WTF::RetainPtr<CGImage *>,WTF::IntHash<int>,WTF::UnsignedWithZeroKeyHashTraits<int>,WTF::HashTraits<WTF::RetainPtr<CGImage *>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<int>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v5 - 4);
    int v8 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    uint64_t v11 = a2;
    unsigned int v12 = (void *)(result + 24);
    do
    {
      *((_DWORD *)v12 - 2) = 0x7FFFFFFF;
      void *v12 = 0;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = a3;
    while (1)
    {
      int v15 = (int *)(v5 + 16 * v13);
      int v16 = *v15;
      if (*v15 != 2147483646)
      {
        if (v16 != 0x7FFFFFFF)
        {
          uint64_t v19 = *a1;
          if (*a1) {
            int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            int v20 = 0;
          }
          int v21 = 0;
          unsigned int v22 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
          unsigned int v23 = ((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) ^ (((v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11)) >> 16);
          do
          {
            uint64_t v24 = v23 & v20;
            unsigned int v23 = ++v21 + v24;
          }
          while (*(_DWORD *)(v19 + 16 * v24) != 0x7FFFFFFF);
          uint64_t v25 = v19 + 16 * v24;
          int v26 = *(const void **)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (v26)
          {
            uint64_t v30 = v14;
            CFRelease(v26);
            uint64_t v14 = v30;
          }
          *(_DWORD *)uint64_t v25 = *v15;
          uint64_t v27 = v5 + 16 * v13;
          uint64_t v28 = *(void *)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          *(void *)(v25 + 8) = v28;
          uint64_t v18 = *(const void **)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          if (!v18) {
            goto LABEL_22;
          }
LABEL_21:
          uint64_t v29 = v14;
          CFRelease(v18);
          uint64_t v14 = v29;
          goto LABEL_22;
        }
        uint64_t v17 = v5 + 16 * v13;
        uint64_t v18 = *(const void **)(v17 + 8);
        *(void *)(v17 + 8) = 0;
        if (v18) {
          goto LABEL_21;
        }
      }
LABEL_22:
      if (++v13 == v7) {
        goto LABEL_25;
      }
    }
  }
  if (v5)
  {
LABEL_25:
    return WTF::fastFree((WTF *)(v5 - 16), v10);
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages26RemoteImageDecoderAVFProxy23CreateFrameImageAtIndexEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)(a2 + 1));

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

uint64_t IPC::Decoder::decode<WebCore::ImageDecoderFrameInfo>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ImageDecoderFrameInfo,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 16))
  {
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<BOOL (*)(WebCore::ImageDecoder::MediaType),BOOL,WebCore::ImageDecoder::MediaType>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL (*)(WTF::String const&),BOOL,WTF::String const&>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

void WTF::Detail::CallableWrapper<WebKit::RemoteImageDecoderAVFManager::setUseGPUProcess(BOOL)::$_0,WTF::RefPtr<WebCore::ImageDecoder,WTF::RawPtrTraits<WebCore::ImageDecoder>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoder>>,WebCore::FragmentedSharedBuffer &,WTF::String const&,WebCore::AlphaOption,WebCore::GammaAndColorProfileOption>::call(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  int v7 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = *(void *)(WebKit::RemoteImageDecoderAVFManager::ensureGPUProcessConnection((WebKit::RemoteImageDecoderAVFManager *)v7)
                 + 32);
  uint64_t v63 = *(void *)(a2 + 48);
  uint64_t v64 = (unsigned int *)a2;
  atomic_fetch_add((atomic_uint *volatile)a2, 1u);
  uint64_t v65 = 0;
  uint64_t v73 = 0;
  IPC::Connection::createSyncMessageEncoder(3711, 0, &v73, &v72);
  int v9 = v72;
  IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode(v72, (IPC::SharedBufferReference *)&v63);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a3);
  IPC::Connection::sendSyncMessage(v8, v73, (uint64_t *)&v72, 0, (uint64_t)&v70, INFINITY);
  int v10 = v71;
  if (!v71)
  {
    int v9 = v70;
    unint64_t v11 = *((void *)v70 + 1);
    unsigned int v12 = *(char **)v70;
    unint64_t v13 = *((void *)v70 + 2) - *(void *)v70;
    if (v11 <= v13)
    {
      unint64_t v54 = 0;
      uint64_t v55 = 0;
      *(void *)unint64_t v70 = 0;
      *((void *)v9 + 1) = 0;
      uint64_t v56 = *((void *)v9 + 3);
      if (v56)
      {
        if (v11)
        {
          (*(void (**)(uint64_t))(*(void *)v56 + 16))(v56);
          uint64_t v55 = *(char **)v9;
          unint64_t v54 = *((void *)v9 + 1);
        }
        else
        {
          unint64_t v54 = 0;
          uint64_t v55 = 0;
        }
      }
    }
    else
    {
      uint64_t v14 = &v12[v13];
      *((void *)v70 + 2) = v14 + 1;
      if (v12)
      {
        unsigned int v15 = *v14;
        if (v15 < 2)
        {
          if (v15)
          {
            unint64_t v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v9);
            if (!v17) {
              goto LABEL_68;
            }
            if (v71) {
              goto LABEL_75;
            }
            LOBYTE(v15) = 1;
            int v9 = v70;
          }
          else
          {
            unint64_t v16 = 0;
          }
          unint64_t v70 = 0;
          HIBYTE(v67) = HIBYTE(v16);
          *(_WORD *)((char *)&v67 + 5) = HIDWORD(v16) >> 8;
          *(_DWORD *)((char *)&v67 + 1) = v16 >> 8;
          char v68 = v15;
          uint64_t v66 = v9;
          LOBYTE(v67) = v16;
          goto LABEL_13;
        }
LABEL_67:
        *(void *)int v9 = 0;
        *((void *)v9 + 1) = 0;
        uint64_t v58 = *((void *)v9 + 3);
        if (!v58) {
          goto LABEL_68;
        }
        goto LABEL_76;
      }
      unint64_t v54 = v11;
      uint64_t v55 = 0;
    }
    unint64_t v11 = 0;
    unsigned int v12 = 0;
    *(void *)int v9 = 0;
    *((void *)v9 + 1) = 0;
    uint64_t v57 = *((void *)v9 + 3);
    if (v57)
    {
      if (v54)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v57 + 16))(v57, v55, v54);
        unsigned int v12 = *(char **)v9;
        unint64_t v11 = *((void *)v9 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        unsigned int v12 = 0;
      }
    }
    goto LABEL_67;
  }
  if (v71 == 1)
  {
    LOBYTE(v66) = (_BYTE)v70;
LABEL_13:
    int v69 = v10;
    int v18 = v10;
LABEL_14:
    ((void (*)(char *, IPC::Encoder **))off_1EE9EF7A8[v18])(&v74, &v70);
    goto LABEL_15;
  }
LABEL_75:
  uint64_t v58 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_76:
  if (v11) {
    (*(void (**)(uint64_t, char *))(*(void *)v58 + 16))(v58, v12);
  }
LABEL_68:
  uint64_t v19 = *(char **)v9;
  uint64_t v59 = *((void *)v9 + 1);
  *(void *)int v9 = 0;
  *((void *)v9 + 1) = 0;
  uint64_t v60 = *((void *)v9 + 3);
  if (v60)
  {
    if (v59)
    {
      (*(void (**)(uint64_t, char *))(*(void *)v60 + 16))(v60, v19);
      uint64_t v19 = *(char **)v9;
      uint64_t v61 = *((void *)v9 + 1);
      uint64_t v62 = *((void *)v9 + 3);
      *(void *)int v9 = 0;
      *((void *)v9 + 1) = 0;
      if (v62)
      {
        if (v61) {
          (*(void (**)(uint64_t, char *))(*(void *)v62 + 16))(v62, v19);
        }
      }
    }
  }
  LOBYTE(v66) = 13;
  int v10 = 1;
  int v69 = 1;
  int v18 = v71;
  if (v71 != -1) {
    goto LABEL_14;
  }
LABEL_15:
  int v20 = v72;
  int v72 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v19);
    WTF::fastFree(v52, v53);
  }
  int v21 = v65;
  uint64_t v65 = 0;
  if (v21) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v21);
  }
  unsigned int v22 = v64;
  uint64_t v64 = 0;
  if (v22) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v22, v19);
  }
  uint64_t v23 = 0;
  if (v10) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v67;
  }
  if (v10 || !v68) {
    goto LABEL_60;
  }
  uint64_t v23 = WTF::fastMalloc((WTF *)0x88);
  uint64_t v25 = (void *)WebCore::ImageDecoder::ImageDecoder((WebCore::ImageDecoder *)v23);
  uint64_t v25[2] = 0;
  *uint64_t v25 = &unk_1EE9EF0A8;
  uint64_t v27 = WebKit::RemoteImageDecoderAVFManager::ensureGPUProcessConnection((WebKit::RemoteImageDecoderAVFManager *)v7);
  uint64_t v28 = *(atomic_uchar **)(v27 + 24);
  if (v28) {
    uint64_t v28 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v28);
  }
  *(void *)(v23 + 24) = v28;
  *(void *)(v23 + 32) = v27;
  *(void *)(v23 + 40) = v7;
  *(void *)(v23 + 48) = v24;
  uint64_t v29 = (_DWORD *)*a3;
  if (*a3) {
    *v29 += 2;
  }
  *(void *)(v23 + 56) = v29;
  WebCore::UTIFromMIMEType((uint64_t *)(v23 + 64), (WebCore *)a3, v26);
  *(unsigned char *)(v23 + 72) = 0;
  *(unsigned char *)(v23 + 128) = 0;
  *(unsigned char *)(v23 + 132) = 0;
  *(_OWORD *)(v23 + 80) = 0u;
  *(_OWORD *)(v23 + 96) = 0u;
  *(_OWORD *)(v23 + 105) = 0u;
  uint64_t v33 = v7[4];
  int v32 = v7 + 4;
  uint64_t v31 = v33;
  if (v33
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v32, 0), (uint64_t v31 = *v32) != 0))
  {
    int v34 = *(_DWORD *)(v31 - 8);
  }
  else
  {
    int v34 = 0;
  }
  unint64_t v35 = (v24 + ~(v24 << 32)) ^ ((unint64_t)(v24 + ~(v24 << 32)) >> 22);
  unint64_t v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
  unint64_t v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
  unsigned int v38 = v34 & ((v37 >> 31) ^ v37);
  uint64_t v39 = (void *)(v31 + 16 * v38);
  uint64_t v40 = *v39;
  if (!*v39)
  {
LABEL_41:
    void *v39 = v24;
    uint64_t v43 = *(void *)(v23 + 16);
    if (v43) {
      goto LABEL_46;
    }
    uint64_t v43 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v43 = 1;
    *(void *)(v43 + 8) = v23;
    uint64_t v44 = *(unsigned int **)(v23 + 16);
    *(void *)(v23 + ++*(_DWORD *)(this + 16) = v43;
    if (!v44) {
      goto LABEL_46;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v44, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v44);
      WTF::fastFree((WTF *)v44, v30);
    }
    uint64_t v43 = *(void *)(v23 + 16);
    if (v43) {
LABEL_46:
    }
      atomic_fetch_add((atomic_uint *volatile)v43, 1u);
    unint64_t v45 = (unsigned int *)v39[1];
    v39[1] = v43;
    if (v45 && atomic_fetch_add((atomic_uint *volatile)v45, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v45);
      WTF::fastFree((WTF *)v45, v30);
    }
    uint64_t v46 = *v32;
    if (*v32) {
      int v47 = *(_DWORD *)(v46 - 12) + 1;
    }
    else {
      int v47 = 1;
    }
    *(_DWORD *)(v46 - 12) = v47;
    uint64_t v48 = *v32;
    if (*v32) {
      int v49 = *(_DWORD *)(v48 - 12);
    }
    else {
      int v49 = 0;
    }
    uint64_t v50 = (*(_DWORD *)(v48 - 16) + v49);
    unint64_t v51 = *(unsigned int *)(v48 - 4);
    if (v51 > 0x400)
    {
      if (v51 > 2 * v50) {
        goto LABEL_59;
      }
    }
    else if (3 * v51 > 4 * v50)
    {
      goto LABEL_59;
    }
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v32, (uint64_t)v39);
    goto LABEL_59;
  }
  char v41 = 0;
  int v42 = 1;
  while (v40 != v24)
  {
    if (v40 == -1) {
      char v41 = v39;
    }
    unsigned int v38 = (v38 + v42) & v34;
    uint64_t v39 = (void *)(v31 + 16 * v38);
    uint64_t v40 = *v39;
    ++v42;
    if (!*v39)
    {
      if (v41)
      {
        void *v41 = 0;
        v41[1] = 0;
        --*(_DWORD *)(*v32 - 16);
        uint64_t v39 = v41;
      }
      goto LABEL_41;
    }
  }
LABEL_59:
  int v10 = v69;
  if (v69 != -1) {
LABEL_60:
  }
    ((void (*)(uint64_t *, IPC::Encoder **))off_1EE9EF418[v10])(&v63, &v66);
  *a4 = v23;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::LibWebRTCCodecs::initializeIfNeeded(void)::$_0 &&>>()
{
  v0 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v0 = &unk_1EE9EF878;
  int v2 = v0;
  WTF::callOnMainRunLoopAndWait();
  uint64_t result = (uint64_t)v2;
  if (v2) {
    return (*(uint64_t (**)(void *))(*v2 + 8))(v2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::initializeIfNeeded(void)::$_0::operator() const(void)::{lambda(void)#1},void>::call()
{
  {
    int v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  v0 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);

  return WebKit::GPUProcessConnection::waitForDidInitialize(v0);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionAndDispatchToThread(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 57), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
  if (v1) {
    MEMORY[0x19972E8D0](v2 + 57);
  }
  WebKit::LibWebRTCCodecs::ensureGPUProcessConnectionOnMainThreadWithLock((WebKit::LibWebRTCCodecs *)v2);
  uint64_t v3 = *(void *)(v2 + 80);
  uint64_t v11 = v3;
  uint64_t v4 = *(unsigned int *)(v2 + 92);
  int v12 = *(_DWORD *)(v2 + 88);
  int v13 = v4;
  v10[0] = 0;
  *(void *)(v2 + 80) = 0;
  v10[1] = 0;
  *(void *)(v2 + 88) = 0;
  WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v5);
  if (v4)
  {
    uint64_t v7 = 8 * v4;
    do
    {
      (*(void (**)(void, uint64_t))(**(void **)(v2 + 96) + 32))(*(void *)(v2 + 96), v3);
      v3 += 8;
      v7 -= 8;
    }
    while (v7);
  }
  uint64_t result = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v6);
  int v9 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v2 + 57), (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 57));
  }
  return result;
}

unsigned int *WTF::Vector<WebKit::LibWebRTCCodecs::Decoder::EncodedFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v4 = 80 * v3;
    uint64_t v5 = (uint64_t *)(*(void *)a1 + 32);
    do
    {
      WTF::NativePromiseProducer<void,WTF::String,16u>::~NativePromiseProducer(v5, a2);
      uint64_t v6 = (WTF *)*(v5 - 3);
      if (v6)
      {
        *(v5 - 3) = 0;
        *((_DWORD *)v5 - 4) = 0;
        WTF::fastFree(v6, a2);
      }
      v5 += 10;
      v4 -= 80;
    }
    while (v4);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createDecoderInternal(WebCore::VideoCodecType,WTF::String const&,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Decoder *)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EF8F0;
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>::reset[abi:sn180100]((WebKit::LibWebRTCCodecs::Decoder **)(a1 + 16), 0);
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9EF8F0;
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>::reset[abi:sn180100]((WebKit::LibWebRTCCodecs::Decoder **)(a1 + 16), 0);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createDecoderInternal(WebCore::VideoCodecType,WTF::String const&,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Decoder *)> &&)::$_0,void>::call(void *a1)
{
  char v2 = 0;
  uint64_t v3 = a1[1];
  uint64_t v4 = (atomic_uchar *)(v3 + 57);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 57), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](v3 + 57);
  }
  uint64_t v5 = a1[2];
  WebKit::LibWebRTCCodecs::protectedConnection(&v59, *(atomic_uchar *volatile **)(v3 + 64));
  uint64_t v6 = (os_unfair_lock_s *)v59;
  char v7 = *(unsigned char *)(v3 + 134);
  char v8 = *(unsigned char *)(v3 + 136);
  uint64_t v9 = a1[3];
  uint64_t v10 = *(void *)a1[2];
  a1[3] = 0;
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v11 = &unk_1EE9EF990;
  v11[1] = v10;
  uint64_t v11[2] = v9;
  uint64_t v60 = v11;
  WebKit::createRemoteDecoder(v5, v6, v7, v8, (uint64_t *)&v60);
  if (v60) {
    (*(void (**)(void *))(*v60 + 8))(v60);
  }
  char v12 = 0;
  uint64_t v59 = 0;
  uint64_t v13 = *(void *)&v6->_os_unfair_lock_opaque;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v13, (unsigned __int8 *)&v12, 1u, memory_order_acquire, memory_order_acquire);
  if (v12) {
    MEMORY[0x19972E8D0](v13);
  }
  uint64_t v14 = *(void *)(v13 + 8);
  uint64_t v15 = v14 - 1;
  *(void *)(v13 + 8) = v14 - 1;
  if (v14 == 1)
  {
    uint64_t v57 = *(void *)(v13 + 16);
    uint64_t v17 = *(void *)(v13 + 24);
    *(void *)(v13 + 24) = 0;
    BOOL v16 = v57 == 0;
  }
  else
  {
    BOOL v16 = 0;
    uint64_t v17 = 0;
  }
  int v18 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v13, (unsigned __int8 *)&v18, 0, memory_order_release, memory_order_relaxed);
  if (v18 == 1)
  {
    if (v15) {
      goto LABEL_13;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v15) {
      goto LABEL_13;
    }
  }
  uint64_t v19 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v19 = &unk_1EE9B37E8;
  *(void *)(v19 + 8) = v13;
  *(void *)(v19 + ++*(_DWORD *)(this + 16) = v17;
  *(unsigned char *)(v19 + 24) = v16;
  uint64_t v60 = (void *)v19;
  WTF::ensureOnMainRunLoop();
  uint64_t v20 = (uint64_t)v60;
  uint64_t v60 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
LABEL_13:
  int v21 = (WTF::StringImpl *)a1[2];
  unsigned int v22 = *(atomic_uchar *volatile **)(v3 + 64);
  if (v22)
  {
    char v23 = 0;
    atomic_uchar *volatile v24 = *v22;
    int v25 = 1;
    atomic_compare_exchange_strong_explicit(*v22, (unsigned __int8 *)&v23, 1u, memory_order_acquire, memory_order_acquire);
    if (v23) {
      MEMORY[0x19972E8D0](v24);
    }
    ++*((void *)v24 + 1);
    atomic_compare_exchange_strong_explicit(v24, (unsigned __int8 *)&v25, 0, memory_order_release, memory_order_relaxed);
    if (v25 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v24);
    }
  }
  uint64_t v59 = v22;
  uint64_t result = (uint64_t)WebKit::LibWebRTCCodecs::setDecoderConnection(v3, v21, (uint64_t *)&v59);
  uint64_t v27 = v59;
  uint64_t v59 = 0;
  if (v27)
  {
    char v28 = 0;
    atomic_uchar *volatile v29 = *v27;
    atomic_compare_exchange_strong_explicit(*v27, (unsigned __int8 *)&v28, 1u, memory_order_acquire, memory_order_acquire);
    if (v28) {
      uint64_t result = MEMORY[0x19972E8D0](v29);
    }
    uint64_t v30 = *((void *)v29 + 1);
    uint64_t v31 = v30 - 1;
    *((void *)v29 + 1) = v30 - 1;
    if (v30 == 1)
    {
      uint64_t v58 = *((void *)v29 + 2);
      uint64_t v33 = *((void *)v29 + 3);
      *((void *)v29 + 3) = 0;
      BOOL v32 = v58 == 0;
    }
    else
    {
      BOOL v32 = 0;
      uint64_t v33 = 0;
    }
    int v34 = 1;
    atomic_compare_exchange_strong_explicit(v29, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
    if (v34 == 1)
    {
      if (v31) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v29);
      if (v31) {
        goto LABEL_27;
      }
    }
    uint64_t v35 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v35 = &unk_1EE9B37E8;
    *(void *)(v35 + 8) = v29;
    *(void *)(v35 + ++*(_DWORD *)(this + 16) = v33;
    *(unsigned char *)(v35 + 24) = v32;
    uint64_t v60 = (void *)v35;
    WTF::ensureOnMainRunLoop();
    uint64_t result = (uint64_t)v60;
    uint64_t v60 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
LABEL_27:
  unint64_t v36 = *(WebKit::LibWebRTCCodecs::Decoder **)a1[2];
  uint64_t v39 = *(void *)(v3 + 32);
  unsigned int v38 = (uint64_t *)(v3 + 32);
  uint64_t v37 = v39;
  if (v39
    || (uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v38),
        (uint64_t v37 = *v38) != 0))
  {
    int v40 = *(_DWORD *)(v37 - 8);
  }
  else
  {
    int v40 = 0;
  }
  unint64_t v41 = ((unint64_t)v36 + ~((void)v36 << 32)) ^ (((unint64_t)v36 + ~((void)v36 << 32)) >> 22);
  unint64_t v42 = 9 * ((v41 + ~(v41 << 13)) ^ ((v41 + ~(v41 << 13)) >> 8));
  unint64_t v43 = (v42 ^ (v42 >> 15)) + ~((v42 ^ (v42 >> 15)) << 27);
  unsigned int v44 = v40 & ((v43 >> 31) ^ v43);
  unint64_t v45 = (WebKit::LibWebRTCCodecs::Decoder **)(v37 + 16 * v44);
  uint64_t v46 = *v45;
  if (!*v45)
  {
LABEL_38:
    *unint64_t v45 = v36;
    int v49 = (WTF::StringImpl *)a1[2];
    a1[2] = 0;
    uint64_t result = (uint64_t)std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>::reset[abi:sn180100](v45 + 1, v49);
    uint64_t v50 = *v38;
    if (*v38) {
      int v51 = *(_DWORD *)(v50 - 12) + 1;
    }
    else {
      int v51 = 1;
    }
    *(_DWORD *)(v50 - 12) = v51;
    uint64_t v52 = *v38;
    if (*v38) {
      int v53 = *(_DWORD *)(v52 - 12);
    }
    else {
      int v53 = 0;
    }
    uint64_t v54 = (*(_DWORD *)(v52 - 16) + v53);
    unint64_t v55 = *(unsigned int *)(v52 - 4);
    if (v55 > 0x400)
    {
      if (v55 > 2 * v54) {
        goto LABEL_47;
      }
    }
    else if (3 * v55 > 4 * v54)
    {
      goto LABEL_47;
    }
    uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v38);
    goto LABEL_47;
  }
  int v47 = 0;
  int v48 = 1;
  while (v46 != v36)
  {
    if (v46 == (WebKit::LibWebRTCCodecs::Decoder *)-1) {
      int v47 = v45;
    }
    unsigned int v44 = (v44 + v48) & v40;
    unint64_t v45 = (WebKit::LibWebRTCCodecs::Decoder **)(v37 + 16 * v44);
    uint64_t v46 = *v45;
    ++v48;
    if (!*v45)
    {
      if (v47)
      {
        char *v47 = 0;
        v47[1] = 0;
        --*(_DWORD *)(*v38 - 16);
        unint64_t v45 = v47;
      }
      goto LABEL_38;
    }
  }
LABEL_47:
  int v56 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v56, 0, memory_order_release, memory_order_relaxed);
  if (v56 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  return result;
}

uint64_t WebKit::createRemoteDecoder(uint64_t a1, os_unfair_lock_s *a2, char a3, char a4, uint64_t *a5)
{
  char v10 = *(unsigned char *)(a1 + 8);
  uint64_t v11 = (uint64_t *)(a1 + 16);
  {
    uint64_t v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v27);
  }
  uint64_t v12 = *((void *)WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
        + 12);
  uint64_t v13 = *a5;
  *a5 = 0;
  uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v14 = &unk_1EE9EF918;
  v14[1] = v13;
  uint64_t v15 = *(void *)(v12 + 32);
  v12 += 32;
  (*(void (**)(uint64_t))(v15 + 32))(v12);
  BOOL v16 = (void *)WTF::fastMalloc((WTF *)0x18);
  *BOOL v16 = &unk_1EE9EF940;
  v16[1] = v14;
  void v16[2] = v12;
  v29[0] = (uint64_t)v16;
  v29[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v17 = 118;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  char v28 = v17;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v17, (uint64_t *)a1);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v17, v10);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, v11);
  int v18 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1);
  if (!v19)
  {
    __break(0xC471u);
    JUMPOUT(0x199136C90);
  }
  unsigned char *v18 = a3;
  uint64_t v20 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x199136CB0);
  }
  *uint64_t v20 = a4;
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(a2, &v28, v29, 0, 0);
  char v23 = v28;
  char v28 = 0;
  if (v23)
  {
    IPC::Encoder::~Encoder(v23, v22);
    WTF::fastFree(v25, v26);
  }
  uint64_t result = v29[0];
  v29[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::LibWebRTCCodecsProxy::CreateDecoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EF918;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::LibWebRTCCodecsProxy::CreateDecoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EF918;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::LibWebRTCCodecsProxy::CreateDecoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2) > 0xFFu)
    {
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 16);
      goto LABEL_7;
    }
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v7 = a2[3];
    if (v7 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
    }
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 16);
LABEL_7:

  return v4();
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateDecoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1},void,std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EF940;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateDecoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1},void,std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EF940;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateDecoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1},void,std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v5 = &unk_1EE9EF968;
  v5[1] = v3;
  v5[2] = v4;
  uint64_t v7 = v5;
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 16))(v2, &v7);
  uint64_t result = (uint64_t)v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateDecoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1}::operator()(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EF968;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  void *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9EF968;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateDecoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1}::operator()(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createDecoderInternal(WebCore::VideoCodecType,WTF::String const&,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Decoder *)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EF990;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createDecoderInternal(WebCore::VideoCodecType,WTF::String const&,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Decoder *)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EF990;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createDecoderInternal(WebCore::VideoCodecType,WTF::String const&,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Decoder *)> &&)::$_0::operator()(void)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1, char a2)
{
  if (a2)
  {
    {
      uint64_t v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v6);
    }
    uint64_t v3 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)v3 + 4, (void *)(a1 + 8));
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 16);
  }
  else
  {
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 16);
  }

  return v4();
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      char v10 = (uint64_t *)(v4 + 16 * i);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v12 = *a1;
          if (*a1) {
            int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            int v13 = 0;
          }
          unint64_t v14 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
          int v18 = 1;
          do
          {
            unsigned int v19 = v17;
            uint64_t v20 = *(void *)(v12 + 16 * v17);
            unsigned int v17 = (v17 + v18++) & v13;
          }
          while (v20);
          uint64_t v21 = v12 + 16 * v19;
          std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>::reset[abi:sn180100]((WebKit::LibWebRTCCodecs::Decoder **)(v21 + 8), 0);
          *(void *)uint64_t v21 = *v10;
          uint64_t v22 = v4 + 16 * i;
          uint64_t v23 = *(void *)(v22 + 8);
          v22 += 8;
          *(void *)uint64_t v22 = 0;
          *(void *)(v21 + 8) = v23;
          std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>::reset[abi:sn180100]((WebKit::LibWebRTCCodecs::Decoder **)v22, 0);
        }
        else
        {
          std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>::reset[abi:sn180100]((WebKit::LibWebRTCCodecs::Decoder **)(v4 + 16 * i + 8), 0);
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::releaseDecoder(WebKit::LibWebRTCCodecs::Decoder &)::$_0,void>::call(uint64_t result)
{
  int v2 = (uint64_t *)(result + 16);
  uint64_t v1 = *(void *)(result + 16);
  uint64_t v3 = *(void *)(result + 8);
  int v5 = (uint64_t *)(v3 + 32);
  uint64_t v4 = *(void *)(v3 + 32);
  if (v4)
  {
    unsigned int v6 = *(_DWORD *)(v4 - 8);
    unint64_t v7 = (v1 + ~(v1 << 32)) ^ ((unint64_t)(v1 + ~(v1 << 32)) >> 22);
    unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    uint64_t v10 = v6 & ((v9 >> 31) ^ v9);
    uint64_t v11 = *(void *)(v4 + 16 * v10);
    if (v11 != v1)
    {
      int v12 = 1;
      while (v11)
      {
        uint64_t v10 = (v10 + v12) & v6;
        uint64_t v11 = *(void *)(v4 + 16 * v10);
        ++v12;
        if (v11 == v1) {
          goto LABEL_8;
        }
      }
      uint64_t v10 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v10 != *(_DWORD *)(v4 - 4))
    {
      int v13 = (void *)(v4 + 16 * v10);
      uint64_t result = (uint64_t)(v13 + 1);
      unint64_t v14 = (WebKit::LibWebRTCCodecs::Decoder *)v13[1];
      v13[1] = 0;
      uint64_t v15 = *v5;
      if (!*v5 || (v15 += 16 * *(unsigned int *)(v15 - 4), (void *)v15 != v13))
      {
        if ((void *)v15 != v13)
        {
          *int v13 = -1;
          uint64_t result = (uint64_t)std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>::reset[abi:sn180100]((WebKit::LibWebRTCCodecs::Decoder **)result, 0);
          ++*(_DWORD *)(*v5 - 16);
          uint64_t v16 = *v5;
          int v17 = *v5 ? *(_DWORD *)(v16 - 12) - 1 : -1;
          *(_DWORD *)(v16 - 12) = v17;
          uint64_t v18 = *v5;
          if (*v5)
          {
            unsigned int v19 = 6 * *(_DWORD *)(v18 - 12);
            unsigned int v20 = *(_DWORD *)(v18 - 4);
            if (v19 < v20 && v20 >= 9) {
              uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Decoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v5, v20 >> 1);
            }
          }
        }
      }
      if (v14)
      {
        char v22 = 0;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 57), (unsigned __int8 *)&v22, 1u, memory_order_acquire, memory_order_acquire);
        if (v22) {
          MEMORY[0x19972E8D0](v3 + 57);
        }
        uint64_t v23 = *((void *)v14 + 6);
        atomic_uchar *volatile v24 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)atomic_uchar *volatile v24 = 125;
        *((void *)v24 + 1) = 0;
        *((void *)v24 + 66) = (char *)v24 + 16;
        *((void *)v24 + 67) = 512;
        *((void *)v24 + 68) = 0;
        *((void *)v24 + 70) = 0;
        *((void *)v24 + 69) = 0;
        IPC::Encoder::encodeHeader(v24);
        uint64_t v33 = v24;
        IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v24, v2);
        IPC::Connection::sendMessageImpl(v23, (uint64_t *)&v33, 0, 0);
        int v26 = v33;
        uint64_t v33 = 0;
        if (v26)
        {
          IPC::Encoder::~Encoder(v26, v25);
          WTF::fastFree(v31, v32);
        }
        uint64_t v27 = *(void *)(v3 + 48);
        if ((!v27 || !*(_DWORD *)(v27 - 12)) && (!*v5 || !*(_DWORD *)(*v5 - 12))) {
          atomic_store(0, (unsigned __int8 *)(v3 + 56));
        }
        int v28 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 57), (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
        if (v28 != 1) {
          WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 57));
        }
        WebKit::LibWebRTCCodecs::Decoder::~Decoder(v14, (WTF::StringImpl *)v25);
        return WTF::fastFree(v29, v30);
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushDecoder,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EF9E0;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushDecoder,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9EF9E0;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushDecoder,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  int v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9EFA08;
  v4[1] = v3;
  unint64_t v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  void v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  uint64_t result = (uint64_t)v7;
  unint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushDecoder,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,IPC::Error>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EFA08;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushDecoder,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,IPC::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9EFA08;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushDecoder,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,IPC::Error>>::call@<X0>(uint64_t result@<X0>, __int16 *a2@<X8>)
{
  int v2 = *(void **)(result + 8);
  if (v2)
  {
    if (*v2)
    {
      *a2 = 0;
      return result;
    }
    __int16 v3 = 269;
  }
  else
  {
    __int16 v3 = 257;
  }
  *a2 = v3;
  return result;
}

unsigned int *WTF::NativePromise<void,IPC::Error,0u>::ThenCommand<WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>>::completionPromise(void *a1, uint64_t *a2)
{
  v12[0] = 0;
  v12[1] = 0;
  v12[2] = (WTF::NativePromiseBase *)"<completion promise>";
  v12[3] = 0;
  uint64_t v4 = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
  uint64_t v5 = *(void *)WTF::NativePromiseProducer<void,void,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)v4, 0, (WTF::Logger::LogSiteIdentifier *)v12);
  if (v5) {
    atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
  }
  char v6 = 0;
  *a1 = v5;
  uint64_t v7 = a2[1];
  int v8 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v7 + 57), (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    MEMORY[0x19972E8D0](v7 + 57);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(v7 + 64), v4);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v7 + 57), (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(v7 + 57));
  }
  uint64_t v9 = *a2;
  uint64_t v10 = (WTF::NativePromiseBase *)a2[1];
  a2[1] = 0;
  v12[0] = v10;
  WTF::NativePromise<void,IPC::Error,0u>::maybeSettle(v9, v12, (WTF::Logger::LogSiteIdentifier *)(a2 + 2));
  uint64_t result = (unsigned int *)v12[0];
  v12[0] = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::span<unsigned char const,18446744073709551615ul> const&,unsigned short,unsigned short>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::VideoDecoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::span<unsigned char const,18446744073709551615ul> const&,unsigned short,unsigned short>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, **(const void ***)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, *(_WORD *)(a2 + 16));
  __int16 v4 = *(_WORD *)(a2 + 18);

  return IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::NativePromiseProducer<std::enable_if<true,void>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *a2)
{
  uint64_t v40[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)(v4 + 8) = 1;
  *(void *)uint64_t v4 = &unk_1EE9EFA30;
  long long v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v4 + ++*(_DWORD *)(this + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 32) = v5;
  *(unsigned char *)(v4 + 48) = 0;
  char v6 = (WTF::Lock *)(v4 + 48);
  *(_DWORD *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = v4 + 88;
  *(void *)(v4 + 80) = 1;
  *(void *)(v4 + 96) = 0;
  *(void *)(v4 + 104) = 0;
  *(_WORD *)(v4 + 112) = 0;
  uint64_t v7 = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v4);
  if (*v7)
  {
    int v8 = v7;
    if (v7[16] >= 4u)
    {
      WTF::String::String((WTF::String *)&v36, "creating ");
      WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v35, v4);
      *(void *)long long buf = v36;
      v34[0] = v35;
      uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v34, &v37);
      if (!v37)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v11 = v35;
      uint64_t v35 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      int v12 = v36;
      unint64_t v36 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v10);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
      int v13 = *((void *)v8 + 4);
      unint64_t v14 = (WTF *)os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        WTF::String::utf8();
        uint64_t v16 = v34[0] ? (char *)v34[0] + 16 : 0;
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        unint64_t v14 = v34[0];
        v34[0] = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1) {
            unint64_t v14 = (WTF *)WTF::fastFree(v14, v15);
          }
          else {
            --*(_DWORD *)v14;
          }
        }
      }
      if (*v8 && v8[16] >= 4u)
      {
        int v17 = (atomic_uchar *)MEMORY[0x1E4F30998];
        while (1)
        {
          int v18 = *v17;
          if (v18) {
            break;
          }
          int v19 = *v17;
          atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v19, v18 | 1, memory_order_acquire, memory_order_acquire);
          if (v19 == v18)
          {
            uint64_t v33 = a1;
            uint64_t v20 = WTF::Logger::observers(v14);
            uint64_t v21 = *(unsigned int *)(v20 + 12);
            if (v21)
            {
              char v22 = *(uint64_t **)v20;
              uint64_t v23 = *(void *)v20 + 8 * v21;
              do
              {
                uint64_t v24 = *v22;
                *(_DWORD *)long long buf = 0;
                WTF::String::String((WTF::String *)&buf[8], "creating ");
                int v39 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v40, v4);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v34, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(void *)v24 + 16))(v24, v8, 4, v34);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v34, v25);
                for (uint64_t i = 24; i != -8; i -= 16)
                {
                  uint64_t v27 = *(WTF::StringImpl **)&buf[i];
                  *(void *)&buf[i] = 0;
                  if (v27)
                  {
                    if (*(_DWORD *)v27 == 2) {
                      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v15);
                    }
                    else {
                      *(_DWORD *)v27 -= 2;
                    }
                  }
                }
                ++v22;
              }
              while (v22 != (uint64_t *)v23);
            }
            int v28 = 1;
            atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
            char v6 = (WTF::Lock *)(v4 + 48);
            a1 = v33;
            if (v28 != 1) {
              WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
            }
            break;
          }
        }
      }
      uint64_t v7 = (unsigned __int8 *)v37;
      uint64_t v37 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          uint64_t v7 = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)v7, (WTF::StringImpl *)v15);
        }
        else {
          *(_DWORD *)v7 -= 2;
        }
      }
    }
  }
  char v29 = 0;
  *(void *)a1 = v4;
  long long v30 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 8) = v30;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 48), (unsigned __int8 *)&v29, 1u, memory_order_acquire, memory_order_acquire);
  if (v29) {
    uint64_t v7 = (unsigned __int8 *)MEMORY[0x19972E8D0](v6);
  }
  uint64_t v31 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
  if (*v31 && v31[16] >= 4u) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v31, a2, " runSynchronouslyOnTarget ", v4);
  }
  atomic_store(0, (unsigned __int8 *)(v4 + 113));
  int v32 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 48), (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
  if (v32 != 1) {
    WTF::Lock::unlockSlow(v6);
  }
  return a1;
}

uint64_t WTF::NativePromise<BOOL,IPC::Error,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  __int16 v3 = (atomic_uchar *)(result + 48);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    uint64_t result = MEMORY[0x19972E8D0](result + 48);
  }
  uint64_t v4 = *(unsigned int *)(v1 + 108);
  if (v4)
  {
    long long v5 = *(uint64_t **)(v1 + 96);
    uint64_t v6 = 40 * v4;
    do
    {
      uint64_t result = *v5;
      if (*v5) {
        uint64_t result = WTF::NativePromise<BOOL,IPC::Error,0u>::assertIsDead();
      }
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WTF::NativePromise<BOOL,IPC::Error,0u>::~NativePromise(unsigned int *a1)
{
  uint64_t v1 = (WTF *)WTF::NativePromise<BOOL,IPC::Error,0u>::~NativePromise(a1);

  return WTF::fastFree(v1, v2);
}

{
  unsigned char *v2;
  BOOL v3;
  unsigned char *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  WTF *v10;
  void *v11;
  char *v12;
  atomic_uchar *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  WTF *v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[16];
  int v34;
  void v35[3];

  v35[2] = *MEMORY[0x1E4F143B8];
  char v2 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2) {
    __int16 v3 = v2[16] >= 4u;
  }
  else {
    __int16 v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = v2;
    WTF::String::String((WTF::String *)&v31, "destroying ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v30, (uint64_t)a1);
    *(void *)long long buf = v31;
    v29[0] = v30;
    uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v29, &v32);
    if (!v32)
    {
      __break(0xC471u);
      return result;
    }
    int v7 = v30;
    long long v30 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    int v8 = v31;
    uint64_t v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t v9 = *((void *)v4 + 4);
    uint64_t v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      WTF::String::utf8();
      int v12 = v29[0] ? (char *)v29[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v10 = v29[0];
      v29[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1) {
          uint64_t v10 = (WTF *)WTF::fastFree(v10, v11);
        }
        else {
          --*(_DWORD *)v10;
        }
      }
    }
    if (*v4 && v4[16] >= 4u)
    {
      int v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        unint64_t v14 = *v13;
        if (v14) {
          break;
        }
        uint64_t v15 = *v13;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
        if (v15 == v14)
        {
          uint64_t v16 = WTF::Logger::observers(v10);
          int v17 = *(unsigned int *)(v16 + 12);
          if (v17)
          {
            int v18 = *(uint64_t **)v16;
            int v19 = *(void *)v16 + 8 * v17;
            do
            {
              uint64_t v20 = *v18;
              *(_DWORD *)long long buf = 0;
              WTF::String::String((WTF::String *)&buf[8], "destroying ");
              int v34 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v35, (uint64_t)a1);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v29, (uint64_t)buf, 2uLL);
              (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v20 + 16))(v20, v4, 4, v29);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
              for (uint64_t i = 24; i != -8; i -= 16)
              {
                uint64_t v23 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2) {
                    WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                  }
                  else {
                    *(_DWORD *)v23 -= 2;
                  }
                }
              }
              ++v18;
            }
            while (v18 != (uint64_t *)v19);
          }
          uint64_t v24 = 1;
          atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
          if (v24 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    int v25 = v32;
    int v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v11);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  WTF::NativePromise<BOOL,IPC::Error,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<BOOL,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), v26);
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 18), v27);
  int v28 = a1[16];
  if (v28 != -1) {
    ((void (*)(uint8_t *, unsigned int *))off_1EE9EFA48[v28])(buf, a1 + 14);
  }
  a1[16] = -1;
  return (uint64_t)a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<BOOL,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(uint64_t **)a1;
    uint64_t v5 = 40 * v3;
    do
    {
      uint64_t v4 = WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::~NativePromiseProducer(v4) + 5;
      v5 -= 40;
    }
    while (v5);
  }
  uint64_t v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIbN3IPC5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSB_EENS8_8FunctionIFSI_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSE_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::DecodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(WTF::NativePromise<BOOL,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EFA70;
  WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::DecodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(WTF::NativePromise<BOOL,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9EFA70;
  WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::DecodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(WTF::NativePromise<BOOL,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  char v2 = (WTF::NativePromiseBase *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9EFAF8;
  v4[1] = v3;
  int v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  void v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  uint64_t result = (uint64_t)v7;
  if (v7) {
    return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
  }
  return result;
}

unsigned __int8 *WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::settleWithFunction<std::enable_if<true,void>>(WTF::NativePromiseBase *a1, uint64_t *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  v75[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v5 = (uint64_t *)a1;
    char v6 = 0;
    int v7 = (atomic_uchar *)(v3 + 48);
    int v8 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 48), (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (v6) {
      a1 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0](v3 + 48);
    }
    int v9 = *(_DWORD *)(v3 + 64);
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 != 1) {
      a1 = (WTF::NativePromiseBase *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
    }
    uint64_t v10 = *v5;
    if (!v9)
    {
      char v11 = 0;
      int v12 = (WTF::NativePromiseBase *)(v10 + 48);
      uint64_t v63 = (WTF::StringImpl *)(v10 + 48);
      char v64 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 48), (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
      if (v11) {
        int v12 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
      }
      int v13 = (unsigned char *)WTF::NativePromiseBase::logChannel(v12);
      if (*v13)
      {
        unint64_t v14 = v13;
        if (v13[16] >= 4u)
        {
          WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v68, a3);
          WTF::String::String((WTF::String *)&v67, " settling ");
          WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v66, v10);
          WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v68, (uint64_t *)&v67, (uint64_t *)&v66, &v69);
          uint64_t v16 = v66;
          uint64_t v66 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, v15);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
          int v40 = v67;
          uint64_t v67 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2) {
              WTF::StringImpl::destroy(v40, v15);
            }
            else {
              *(_DWORD *)v40 -= 2;
            }
          }
          unint64_t v41 = v68;
          char v68 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2) {
              WTF::StringImpl::destroy(v41, v15);
            }
            else {
              *(_DWORD *)v41 -= 2;
            }
          }
          unint64_t v42 = *((void *)v14 + 4);
          unint64_t v43 = (WTF *)os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
          if (v43)
          {
            WTF::String::utf8();
            unint64_t v45 = v65[0] ? (char *)v65[0] + 16 : 0;
            *(_DWORD *)long long buf = 136446210;
            int v71 = v45;
            _os_log_impl(&dword_1985F2000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            unint64_t v43 = v65[0];
            v65[0] = 0;
            if (v43)
            {
              if (*(_DWORD *)v43 == 1) {
                unint64_t v43 = (WTF *)WTF::fastFree(v43, v44);
              }
              else {
                --*(_DWORD *)v43;
              }
            }
          }
          if (*v14 && v14[16] >= 4u)
          {
            uint64_t v46 = (atomic_uchar *)MEMORY[0x1E4F30998];
            while (1)
            {
              int v47 = *v46;
              if (v47) {
                break;
              }
              int v48 = *v46;
              atomic_compare_exchange_strong_explicit(v46, (unsigned __int8 *)&v48, v47 | 1, memory_order_acquire, memory_order_acquire);
              if (v48 == v47)
              {
                uint64_t v49 = WTF::Logger::observers(v43);
                uint64_t v50 = *(unsigned int *)(v49 + 12);
                if (v50)
                {
                  int v51 = *(uint64_t **)v49;
                  uint64_t v52 = *(void *)v49 + 8 * v50;
                  do
                  {
                    uint64_t v53 = *v51;
                    *(_DWORD *)long long buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v71 + 4), a3);
                    int v72 = 0;
                    WTF::String::String((WTF::String *)&v73, " settling ");
                    int v74 = 0;
                    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v75, v10);
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v65, (uint64_t)buf, 3uLL);
                    (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v53 + 16))(v53, v14, 4, v65);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v65, v54);
                    for (uint64_t i = 40; i != -8; i -= 16)
                    {
                      int v56 = *(WTF::StringImpl **)&buf[i];
                      *(void *)&buf[i] = 0;
                      if (v56)
                      {
                        if (*(_DWORD *)v56 == 2) {
                          WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v44);
                        }
                        else {
                          *(_DWORD *)v56 -= 2;
                        }
                      }
                    }
                    ++v51;
                  }
                  while (v51 != (uint64_t *)v52);
                }
                int v57 = 1;
                atomic_compare_exchange_strong_explicit(v46, (unsigned __int8 *)&v57, 0, memory_order_release, memory_order_relaxed);
                if (v57 != 1) {
                  WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
                }
                break;
              }
            }
          }
          uint64_t v58 = v69;
          int v69 = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2) {
              WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v44);
            }
            else {
              *(_DWORD *)v58 -= 2;
            }
          }
        }
      }
      uint64_t v59 = *(unsigned int *)(v10 + 64);
      if (v59 != -1) {
        ((void (*)(uint8_t *, uint64_t))off_1EE9EFA48[v59])(buf, v10 + 56);
      }
      uint64_t v60 = *a2;
      *a2 = 0;
      *(void *)(v10 + 56) = v60;
      *(_DWORD *)(v10 + 64) = 2;
      uint64_t result = (unsigned __int8 *)WTF::NativePromise<BOOL,IPC::Error,0u>::dispatchAll(v10, (atomic_uchar *volatile *)&v63);
      if (v64)
      {
        uint64_t result = (unsigned __int8 *)v63;
        int v61 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v63, (unsigned __int8 *)&v61, 0, memory_order_release, memory_order_relaxed);
        if (v61 != 1) {
          return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
        }
      }
      return result;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
  if (*result) {
    BOOL v18 = result[16] >= 4u;
  }
  else {
    BOOL v18 = 0;
  }
  if (v18)
  {
    int v19 = result;
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v69, a3);
    WTF::String::String((WTF::String *)&v68, " ignored already resolved or rejected ");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v67, v10);
    WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, &v63);
    uint64_t v21 = v67;
    uint64_t v67 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v20);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    char v22 = v68;
    char v68 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v20);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    uint64_t v23 = v69;
    int v69 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v20);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    uint64_t v24 = *((void *)v19 + 4);
    int v25 = (WTF *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    if (v25)
    {
      WTF::String::utf8();
      uint64_t v27 = v65[0] ? (char *)v65[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      int v71 = v27;
      _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      int v25 = v65[0];
      v65[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1) {
          int v25 = (WTF *)WTF::fastFree(v25, v26);
        }
        else {
          --*(_DWORD *)v25;
        }
      }
    }
    if (*v19 && v19[16] >= 4u)
    {
      int v28 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v29 = *v28;
        if (v29) {
          break;
        }
        int v30 = *v28;
        atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v30, v29 | 1, memory_order_acquire, memory_order_acquire);
        if (v30 == v29)
        {
          uint64_t v31 = WTF::Logger::observers(v25);
          uint64_t v32 = *(unsigned int *)(v31 + 12);
          if (v32)
          {
            uint64_t v33 = *(uint64_t **)v31;
            uint64_t v34 = *(void *)v31 + 8 * v32;
            do
            {
              uint64_t v35 = *v33;
              *(_DWORD *)long long buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v71 + 4), a3);
              int v72 = 0;
              WTF::String::String((WTF::String *)&v73, " ignored already resolved or rejected ");
              int v74 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v75, v10);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v65, (uint64_t)buf, 3uLL);
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(void *)v35 + 16))(v35, v19, 4, v65);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v65, v36);
              for (uint64_t j = 40; j != -8; j -= 16)
              {
                unsigned int v38 = *(WTF::StringImpl **)&buf[j];
                *(void *)&buf[j] = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2) {
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v26);
                  }
                  else {
                    *(_DWORD *)v38 -= 2;
                  }
                }
              }
              ++v33;
            }
            while (v33 != (uint64_t *)v34);
          }
          int v39 = 1;
          atomic_compare_exchange_strong_explicit(v28, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
          if (v39 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = (unsigned __int8 *)v63;
    uint64_t v63 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v26);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WTF::NativePromise<BOOL,IPC::Error,0u>::dispatchAll(uint64_t a1, atomic_uchar *volatile *a2)
{
  int v29 = (atomic_uint *)v30 + 2;
  *(void *)&v30[0] = 1;
  char v22 = (WTF::NativePromiseBase **)&v24;
  uint64_t v23 = 1;
  uint64_t v4 = *(void **)(a1 + 72);
  if (v4 == (void *)(a1 + 88))
  {
    uint64_t v5 = *(unsigned int *)(a1 + 84);
    memcpy(&v24, v4, 8 * v5);
  }
  else
  {
    *(void *)(a1 + 72) = a1 + 88;
    char v22 = (WTF::NativePromiseBase **)v4;
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
    LODWORD(v23) = *(_DWORD *)(a1 + 80);
  }
  HIDWORD(v23) = v5;
  DWORD1(v30[0]) = 0;
  *(void *)(a1 + 80) = 1;
  WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v4);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v19 = v6;
  unsigned int v7 = *(_DWORD *)(a1 + 108);
  int v20 = *(_DWORD *)(a1 + 104);
  unsigned int v21 = v7;
  int v29 = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)&v30[0] = 0;
  *(void *)(a1 + 104) = 0;
  WTF::Vector<WTF::NativePromiseProducer<BOOL,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v8);
  if (HIDWORD(v23))
  {
    uint64_t v10 = v22;
    uint64_t v11 = 8 * HIDWORD(v23);
    do
    {
      int v12 = *v10++;
      WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallbackBase::dispatch(v12, a1, a2);
      v11 -= 8;
    }
    while (v11);
  }
  if (v7)
  {
    uint64_t v13 = v6 + 40 * v7;
    uint64_t v14 = a1 + 56;
    do
    {
      uint64_t v15 = *(atomic_uint **)v6;
      *(void *)uint64_t v6 = 0;
      int v29 = v15;
      long long v16 = *(_OWORD *)(v6 + 24);
      v30[0] = *(_OWORD *)(v6 + 8);
      v30[1] = v16;
      if (v15)
      {
        atomic_fetch_add(v15 + 2, 1u);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = "<chained promise>";
        uint64_t v28 = 0;
        WTF::NativePromise<BOOL,IPC::Error,0u>::settleAsChainedPromise<WTF::NativePromise<BOOL,IPC::Error,0u>::Storage>((uint64_t)v15, v14, (WTF::Logger::LogSiteIdentifier *)&v25);
        if (atomic_fetch_add(v15 + 2, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v15 + 2);
          (*(void (**)(atomic_uint *))(*(void *)v15 + 16))(v15);
        }
      }
      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = "<chained promise>";
        uint64_t v28 = 0;
        WTF::NativePromise<BOOL,IPC::Error,0u>::settleAsChainedPromise<WTF::NativePromise<BOOL,IPC::Error,0u>::Storage>(0, v14, (WTF::Logger::LogSiteIdentifier *)&v25);
      }
      WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::~NativePromiseProducer((uint64_t *)&v29);
      v6 += 40;
    }
    while (v6 != v13);
  }
  WTF::Vector<WTF::NativePromiseProducer<BOOL,IPC::Error,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v9);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebKit::PlatformExtensionCapabilityGrants,WebKit::ExtensionCapabilityGrantError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v17);
}

unsigned __int8 *WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, atomic_uchar *volatile *a3)
{
  uint64_t v5 = a1;
  if (!*((void *)a1 + 2)
    || (int v6 = atomic_load((unsigned __int8 *)(a2 + 113)), v6 == 1)
    && (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(void))(**((void **)a1 + 2) + 24))(*((void *)a1 + 2)),
        a1))
  {
    if (*((unsigned char *)v5 + 56))
    {
      long long v16 = (unsigned __int8 *)v5;
      uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
      if (*result) {
        BOOL v10 = result[16] >= 4u;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10) {
        return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, a2, (uint64_t)&v16, (WTF::NativePromiseBase *)((char *)v5 + 24));
      }
    }
    else
    {
      atomic_uchar *volatile v11 = *a3;
      int v12 = 1;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v11);
      }
      if (WTF::NativePromise<void,void,0u>::hasRunnable(a2))
      {
        WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v15, a2);
        uint64_t v13 = v15;
        (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(void *)v15 + 16))(&v16, v15);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(void *)v5 + 24))(v5, a2, &v16);
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      else
      {
        WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResult(&v16, a2);
        (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(void *)v5 + 24))(v5, a2, &v16);
      }
      char v14 = 0;
      uint64_t result = (unsigned __int8 *)*a3;
      atomic_compare_exchange_strong_explicit(*a3, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
      if (v14) {
        return (unsigned __int8 *)MEMORY[0x19972E8D0]();
      }
    }
  }
  else
  {
    uint64_t v7 = *((void *)v5 + 2);
    atomic_fetch_add((atomic_uint *volatile)v5 + 2, 1u);
    atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
    int v8 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
    *(void *)int v8 = &unk_1EE9EFA98;
    *((void *)v8 + 1) = v5;
    *((void *)v8 + 2) = v5;
    *((void *)v8 + 3) = a2;
    long long v16 = v8;
    (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)v7 + 16))(v7, &v16);
    uint64_t result = v16;
    long long v16 = 0;
    if (result) {
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EFA98;
  char v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EFA98;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<BOOL,IPC::Error,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(WTF::NativePromiseBase *a1)
{
  uint64_t v1 = (unsigned char *)*((void *)a1 + 1);
  uint64_t v2 = *((void *)a1 + 3);
  if (v1[56])
  {
    uint64_t v10 = *((void *)a1 + 1);
    uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(unsigned char *)result) {
      BOOL v4 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4) {
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, v2, (uint64_t)&v10, (WTF::Logger::LogSiteIdentifier *)(v1 + 24));
    }
  }
  else
  {
    BOOL hasRunnable = WTF::NativePromise<void,void,0u>::hasRunnable(*((void *)a1 + 3));
    uint64_t v7 = *((void *)a1 + 3);
    if (hasRunnable)
    {
      WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResultRunnable((uint64_t)&v9, *((void *)a1 + 3));
      uint64_t v8 = v9;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v9 + 16))(&v10, v9);
      (*(void (**)(unsigned char *, uint64_t, uint64_t *))(*(void *)v1 + 24))(v1, v7, &v10);
      return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    else
    {
      WTF::NativePromise<BOOL,WebCore::DOMCacheEngine::Error,0u>::takeResult(&v10, *((void *)a1 + 3));
      return (WTF::StringImpl *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *))(*(void *)v1 + 24))(v1, v7, &v10);
    }
  }
  return result;
}

WTF::Lock *WTF::NativePromise<BOOL,IPC::Error,0u>::settleAsChainedPromise<WTF::NativePromise<BOOL,IPC::Error,0u>::Storage>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  char v14 = v7;
  char v15 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  uint64_t v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " settling chained promise ", a1);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 64);
  uint64_t v11 = *(unsigned int *)(a2 + 8);
  if (v10 == -1)
  {
    if (v11 == -1) {
      goto LABEL_14;
    }
  }
  else if (v11 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))off_1EE9EFA48[v10])(&v16, a1 + 56);
    *(_DWORD *)(a1 + 64) = -1;
    goto LABEL_14;
  }
  uint64_t v16 = a1 + 56;
  ((void (*)(uint64_t *))off_1EE9EFAB0[v11])(&v16);
LABEL_14:
  uint64_t result = (WTF::Lock *)WTF::NativePromise<BOOL,IPC::Error,0u>::dispatchAll(a1, &v14);
  if (v15)
  {
    uint64_t result = v14;
    int v13 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v14, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != 1) {
      return (WTF::Lock *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN3IPC5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 8);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9EFA48[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN3IPC5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_15;
  }
  if (v5 != 1)
  {
    uint64_t result = ((uint64_t (*)(unint64_t *, uint64_t))off_1EE9EFA48[v5])(&v21, v4);
LABEL_15:
    *(_DWORD *)(v4 + 8) = -1;
    *(void *)uint64_t v4 = *a3;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  unint64_t v20 = *a3;
  char v6 = (_DWORD *)a2 + 1;
  uint64_t v7 = *((unsigned int *)a2 + 1);
  if (HIDWORD(v20) != -1 || v7 != -1)
  {
    BOOL v9 = HIDWORD(v20) == -1;
    if (HIDWORD(v20) == -1) {
      uint64_t v10 = -1;
    }
    else {
      uint64_t v10 = HIDWORD(v20);
    }
    if (v7 != -1) {
      BOOL v9 = v10 == v7;
    }
    if (v9)
    {
      return ((uint64_t (*)(unint64_t *, unint64_t *, unint64_t *))off_1EE9EFAC8[v10])(&v21, &v20, a2);
    }
    else
    {
      BOOL v12 = (HIDWORD(v20) - 2) < 0xFFFFFFFD || (v7 + 1) < 3;
      BOOL v13 = !v12;
      if (v12) {
        char v14 = &v20;
      }
      else {
        char v14 = a2;
      }
      if (!v12) {
        a2 = &v20;
      }
      unint64_t v15 = *a2;
      unint64_t v21 = *a2;
      if (v13) {
        uint64_t v16 = (_DWORD *)&v20 + 1;
      }
      else {
        uint64_t v16 = v6;
      }
      *((_DWORD *)a2 + 1) = -1;
      if (v13) {
        int v17 = v6;
      }
      else {
        int v17 = (_DWORD *)&v20 + 1;
      }
      uint64_t v18 = *((unsigned int *)v14 + 1);
      unint64_t v19 = HIDWORD(v15);
      if (v18 != -1)
      {
        uint64_t result = ((uint64_t (*)(char *))off_1EE9EFAD8[v18])(&v22);
        *uint64_t v16 = v18;
      }
      *int v17 = -1;
      if (v19 != -1)
      {
        uint64_t result = ((uint64_t (*)(char *, unint64_t *, unint64_t *))off_1EE9EFAD8[v19])(&v22, v14, &v21);
        *int v17 = v19;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIbN3IPC5ErrorELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedIbSB_EENS8_8FunctionIFSI_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSE_SI_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 8);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 2)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9EFA48[v5])(&v9, v4);
LABEL_8:
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)uint64_t v4 = v8;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t result = *a2;
  *a2 = v6;
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v7();
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJbN3IPC5ErrorEEE6__swapB8sn180100ERS9_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbS8_EEESK_EEEDcSB_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJbN3IPC5ErrorEEE6__swapB8sn180100ERS9_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbS8_EEESK_EEEDcSB_DpT0_(uint64_t a1, char *a2, char *a3)
{
  char v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN3IPC5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJbS9_EEEEEvRSB_OT_EUlRSG_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbS9_EEEOSP_EEEDcSG_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN3IPC5ErrorEEEEE19__generic_constructB8sn180100INS0_6__implIJbS9_EEEEEvRSB_OT_EUlRSG_OT0_E_JRNS0_6__baseILNS0_6_TraitE0EJbS9_EEEOSP_EEEDcSG_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::DecodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(WTF::NativePromise<BOOL,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<BOOL,IPC::Error>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EFAF8;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::DecodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(WTF::NativePromise<BOOL,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<BOOL,IPC::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9EFAF8;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::DecodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(WTF::NativePromise<BOOL,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<BOOL,IPC::Error>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
  {
    uint64_t result = 1;
    int v5 = 1;
    goto LABEL_8;
  }
  if (!*v3)
  {
LABEL_7:
    int v5 = 1;
    uint64_t result = 13;
    goto LABEL_8;
  }
  uint64_t result = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(*(void **)(a1 + 8));
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v6 = *v3;
    uint64_t v7 = v3[1];
    uint64_t *v3 = 0;
    v3[1] = 0;
    uint64_t v8 = v3[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
    goto LABEL_7;
  }
  int v5 = 0;
LABEL_8:
  *(unsigned char *)a2 = result;
  *(_DWORD *)(a2 + 4) = v5;
  return result;
}

uint64_t *WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<BOOL,IPC::Error,0u>::assertIsDead(v2);
    char v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WTF::StringImpl *WTF::NativePromise<void,WTF::String,0u>::reject<WTF::ASCIILiteral,std::enable_if<true,void>>(uint64_t a1, long long *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v6 = 0;
  uint64_t v7 = (WTF::Lock *)(a1 + 48);
  int v17 = v7;
  char v18 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t v7 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  uint64_t v8 = (unsigned char *)WTF::NativePromiseBase::logChannel(v7);
  if (*v8) {
    BOOL v9 = v8[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v8, a3, " rejecting ", a1);
  }
  long long v15 = *a2;
  WTF::NeverDestroyed<WTF::String,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&v16, (uint64_t)&v15);
  uint64_t v10 = *(unsigned int *)(a1 + 72);
  if (v10 != -1) {
    ((void (*)(char *, uint64_t))off_1EE9EF4E0[v10])(&v19, a1 + 56);
  }
  uint64_t v11 = v16;
  uint64_t v16 = 0;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = 1;
  *(_DWORD *)(a1 + 72) = 1;
  WTF::NativePromise<void,WTF::String,0u>::dispatchAll(a1, (atomic_uchar *volatile *)&v17);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  if (v18)
  {
    uint64_t result = v17;
    int v14 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 != 1) {
      return (WTF::StringImpl *)WTF::Lock::unlockSlow(result);
    }
  }
  return result;
}

uint64_t *WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCommand<WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,WTF::String,0u>>>::~ThenCommand(uint64_t *a1)
{
  uint64_t v2 = (WTF::NativePromiseBase *)a1[1];
  if (v2)
  {
    uint64_t v3 = *a1;
    a1[1] = 0;
    uint64_t v8 = v2;
    WTF::NativePromise<BOOL,IPC::Error,0u>::maybeSettle(v3, &v8, (WTF::Logger::LogSiteIdentifier *)(a1 + 2));
    uint64_t v4 = (unsigned int *)v8;
    uint64_t v8 = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
    }
    int v5 = (unsigned int *)a1[1];
    a1[1] = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
    }
  }
  else
  {
    a1[1] = 0;
  }
  char v6 = (unsigned int *)*a1;
  *a1 = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
  }
  return a1;
}

unsigned __int8 *WTF::NativePromise<BOOL,IPC::Error,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  char v5 = 0;
  v65[1] = *MEMORY[0x1E4F143B8];
  char v6 = (WTF::Lock *)(a1 + 48);
  unint64_t v43 = v6;
  char v44 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v6, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    char v6 = (WTF::Lock *)MEMORY[0x19972E8D0]();
  }
  *(unsigned char *)(a1 + 112) = 1;
  uint64_t v7 = *(unsigned int *)(a1 + 64);
  uint64_t result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v6);
  unint64_t v42 = result;
  if (*result) {
    BOOL v9 = result[16] >= 4u;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v53, a3);
    WTF::String::String((WTF::String *)&v52, " invoking maybeSettle() [");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v51, a1);
    WTF::String::String((WTF::String *)&v50, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v48, " isNothing:");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v47);
    WTF::String::String((WTF::String *)&v46, "]");
    uint64_t result = (unsigned __int8 *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, &v54);
    if (!v54)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v11 = v46;
    uint64_t v46 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    BOOL v12 = v47;
    int v47 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    BOOL v13 = v48;
    int v48 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v10);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    int v14 = v49;
    uint64_t v49 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v10);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    long long v15 = v50;
    uint64_t v50 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v10);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t v16 = v51;
    int v51 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v10);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    int v17 = v52;
    uint64_t v52 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v10);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    char v18 = v53;
    uint64_t v53 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v10);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    char v19 = *((void *)v42 + 4);
    unint64_t v20 = (WTF *)os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      WTF::String::utf8();
      char v22 = v45[0] ? (char *)v45[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      int v56 = v22;
      _os_log_impl(&dword_1985F2000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      unint64_t v20 = v45[0];
      v45[0] = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1) {
          unint64_t v20 = (WTF *)WTF::fastFree(v20, v21);
        }
        else {
          --*(_DWORD *)v20;
        }
      }
    }
    if (*v42 && v42[16] >= 4u)
    {
      uint64_t v23 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v24 = *v23;
        if (v24) {
          break;
        }
        int v25 = *v23;
        atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v25, v24 | 1, memory_order_acquire, memory_order_acquire);
        if (v25 == v24)
        {
          uint64_t v26 = WTF::Logger::observers(v20);
          uint64_t v27 = *(unsigned int *)(v26 + 12);
          if (v27)
          {
            uint64_t v28 = *(uint64_t **)v26;
            uint64_t v40 = *(void *)v26 + 8 * v27;
            do
            {
              uint64_t v29 = v7;
              uint64_t v30 = *v28;
              *(_DWORD *)long long buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v56 + 4), a3);
              int v57 = 0;
              WTF::String::String((WTF::String *)v58, " invoking maybeSettle() [");
              v58[2] = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v59, a1);
              int v60 = 0;
              WTF::String::String((WTF::String *)v61, " callback:");
              v61[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v61[6] = 0;
              WTF::String::String((WTF::String *)v62, " isNothing:");
              v62[2] = 0;
              WTF::LogArgument<BOOL>::toString<BOOL>(&v63);
              int v64 = 0;
              WTF::String::String((WTF::String *)v65, "]");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v45, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(void *)v30 + 16))(v30, v42, 4, v45);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v31);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                uint64_t v33 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v33)
                {
                  if (*(_DWORD *)v33 == 2) {
                    WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v21);
                  }
                  else {
                    *(_DWORD *)v33 -= 2;
                  }
                }
              }
              ++v28;
              uint64_t v7 = v29;
            }
            while (v28 != (uint64_t *)v40);
          }
          int v34 = 1;
          atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v34, 0, memory_order_release, memory_order_relaxed);
          if (v34 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t result = (unsigned __int8 *)v54;
    uint64_t v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  if (*(_DWORD *)(a1 + 64))
  {
    uint64_t result = WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallbackBase::dispatch(*a2, a1, (atomic_uchar *volatile *)&v43);
  }
  else
  {
    uint64_t v35 = *(unsigned int *)(a1 + 84);
    if (v35 == *(_DWORD *)(a1 + 80))
    {
      uint64_t result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 72, v35 + 1, (unint64_t)a2);
      uint64_t v35 = *(unsigned int *)(a1 + 84);
      int v36 = v35 + 1;
      uint64_t v37 = *(void *)(a1 + 72);
      unsigned int v38 = *(WTF::NativePromiseBase **)result;
      *(void *)uint64_t result = 0;
    }
    else
    {
      int v36 = v35 + 1;
      uint64_t v37 = *(void *)(a1 + 72);
      unsigned int v38 = *a2;
      *a2 = 0;
    }
    *(void *)(v37 + 8 * v35) = v38;
    *(_DWORD *)(a1 + 84) = v36;
  }
  if (v44)
  {
    uint64_t result = (unsigned __int8 *)v43;
    int v39 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v43, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
    if (v39 != 1) {
      return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
    }
  }
  return result;
}

unsigned int *WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCommand<WTF::NativePromise<BOOL,IPC::Error,0u>::ThenCallback<true,WTF::NativePromise<void,WTF::String,0u>>>::completionPromise(void *a1, uint64_t *a2)
{
  long long v15 = 0uLL;
  *(void *)&long long v16 = "<completion promise>";
  *((void *)&v16 + 1) = 0;
  uint64_t v4 = WTF::fastMalloc((WTF *)0x28);
  uint64_t v5 = WTF::fastMalloc((WTF *)0x80);
  char v6 = (atomic_uchar *)WTF::NativePromise<void,WTF::String,0u>::NativePromise(v5, &v15);
  *(void *)uint64_t v4 = v6;
  long long v7 = v15;
  *(_OWORD *)(v4 + 24) = v16;
  *(_OWORD *)(v4 + 8) = v7;
  WTF::NativePromise<void,WTF::String,0u>::setDispatchMode(v6, 0, (WTF::Logger::LogSiteIdentifier *)&v15);
  uint64_t v8 = *(void *)v4;
  if (*(void *)v4) {
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
  }
  char v9 = 0;
  *a1 = v8;
  uint64_t v10 = a2[1];
  int v11 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 57), (unsigned __int8 *)&v9, 1u, memory_order_acquire, memory_order_acquire);
  if (v9) {
    MEMORY[0x19972E8D0](v10 + 57);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,WTF::String,0u>>::reset[abi:sn180100]((uint64_t **)(v10 + 64), (uint64_t *)v4);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v10 + 57), (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 57));
  }
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  a2[1] = 0;
  *(void *)&long long v15 = v13;
  WTF::NativePromise<BOOL,IPC::Error,0u>::maybeSettle(v12, (WTF::NativePromiseBase **)&v15, (WTF::Logger::LogSiteIdentifier *)(a2 + 2));
  uint64_t result = (unsigned int *)v15;
  *(void *)&long long v15 = 0;
  if (result)
  {
    if (atomic_fetch_add((atomic_uint *volatile)result + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::NativePromiseProducer<void,WTF::String,16u>::~NativePromiseProducer(uint64_t *a1, WTF::StringImpl *a2)
{
  v38[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  if (v3)
  {
    BOOL isSettled = WTF::NativePromise<void,WTF::String,0u>::isSettled(v3);
    if (!isSettled)
    {
      uint64_t v5 = *a1;
      char v6 = (unsigned char *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
      if (*v6) {
        BOOL v7 = v6[16] >= 4u;
      }
      else {
        BOOL v7 = 0;
      }
      if (v7)
      {
        uint64_t v8 = v6;
        WTF::String::String((WTF::String *)&v34, "Non settled AutoRejectProducer, reject with default value");
        WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v33, v5);
        *(void *)long long buf = v34;
        v32[0] = v33;
        uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v32, &v35);
        if (!v35)
        {
          __break(0xC471u);
          return result;
        }
        int v11 = v33;
        uint64_t v33 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2) {
            WTF::StringImpl::destroy(v11, v10);
          }
          else {
            *(_DWORD *)v11 -= 2;
          }
        }
        uint64_t v12 = v34;
        int v34 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v10);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
        uint64_t v13 = *((void *)v8 + 4);
        int v14 = (WTF *)os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        if (v14)
        {
          WTF::String::utf8();
          long long v16 = v32[0] ? (char *)v32[0] + 16 : 0;
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = v16;
          _os_log_impl(&dword_1985F2000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          int v14 = v32[0];
          v32[0] = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 1) {
              int v14 = (WTF *)WTF::fastFree(v14, v15);
            }
            else {
              --*(_DWORD *)v14;
            }
          }
        }
        if (*v8 && v8[16] >= 4u)
        {
          int v17 = (atomic_uchar *)MEMORY[0x1E4F30998];
          while (1)
          {
            int v18 = *v17;
            if (v18) {
              break;
            }
            int v19 = *v17;
            atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v19, v18 | 1, memory_order_acquire, memory_order_acquire);
            if (v19 == v18)
            {
              uint64_t v20 = WTF::Logger::observers(v14);
              uint64_t v21 = *(unsigned int *)(v20 + 12);
              if (v21)
              {
                char v22 = *(uint64_t **)v20;
                uint64_t v23 = *(void *)v20 + 8 * v21;
                do
                {
                  uint64_t v24 = *v22;
                  *(_DWORD *)long long buf = 0;
                  WTF::String::String((WTF::String *)&buf[8], "Non settled AutoRejectProducer, reject with default value");
                  LODWORD(v37) = 0;
                  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v38, v5);
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v32, (uint64_t)buf, 2uLL);
                  (*(void (**)(uint64_t, unsigned char *, uint64_t, WTF **))(*(void *)v24 + 16))(v24, v8, 4, v32);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v32, v25);
                  for (uint64_t i = 24; i != -8; i -= 16)
                  {
                    uint64_t v27 = *(WTF::StringImpl **)&buf[i];
                    *(void *)&buf[i] = 0;
                    if (v27)
                    {
                      if (*(_DWORD *)v27 == 2) {
                        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v15);
                      }
                      else {
                        *(_DWORD *)v27 -= 2;
                      }
                    }
                  }
                  ++v22;
                }
                while (v22 != (uint64_t *)v23);
              }
              int v28 = 1;
              atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v28, 0, memory_order_release, memory_order_relaxed);
              if (v28 != 1) {
                WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
              }
              break;
            }
          }
        }
        uint64_t v29 = v35;
        uint64_t v35 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2) {
            WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v15);
          }
          else {
            *(_DWORD *)v29 -= 2;
          }
        }
      }
      *(_OWORD *)long long buf = 0uLL;
      uint64_t v37 = "~NativePromiseProducer";
      v38[0] = 0;
      WTF::NativePromiseProducer<void,WTF::String,16u>::reject<WTF::String,std::enable_if<true,void>>(a1, (uint64_t)(a1 + 5), (WTF::Logger::LogSiteIdentifier *)buf);
    }
    if (*a1) {
      WTF::NativePromise<void,WTF::String,0u>::assertIsDead(*a1);
    }
  }
  uint64_t v30 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2) {
      WTF::StringImpl::destroy(v30, a2);
    }
    else {
      *(_DWORD *)v30 -= 2;
    }
  }
  uint64_t v31 = (unsigned int *)*a1;
  *a1 = 0;
  if (v31)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v31 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v31 + 2);
      (*(void (**)(unsigned int *))(*(void *)v31 + 16))(v31);
    }
  }
  return (uint64_t)a1;
}

BOOL WTF::NativePromise<void,WTF::String,0u>::isSettled(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = (atomic_uchar *)(a1 + 48);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 48), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](a1 + 48);
  }
  int v5 = *(_DWORD *)(a1 + 72);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return v5 != 0;
}

WTF::StringImpl *WTF::NativePromiseProducer<void,WTF::String,16u>::reject<WTF::String,std::enable_if<true,void>>(uint64_t *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t isSettled = *a1;
  if (isSettled)
  {
    uint64_t isSettled = WTF::NativePromise<void,WTF::String,0u>::isSettled(isSettled);
    uint64_t v6 = *a1;
    if (!isSettled)
    {
      char v7 = 0;
      uint64_t v8 = (WTF::NativePromiseBase *)(v6 + 48);
      long long v15 = (WTF::Lock *)(v6 + 48);
      char v16 = 1;
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v6 + 48), (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
      if (v7) {
        uint64_t v8 = (WTF::NativePromiseBase *)MEMORY[0x19972E8D0]();
      }
      char v9 = (unsigned char *)WTF::NativePromiseBase::logChannel(v8);
      if (*v9 && v9[16] >= 4u) {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::DOMCacheEngine::CacheIdentifierOperationResult,WebCore::DOMCacheEngine::Error,0u>>((uint64_t)v9, a3, " rejecting ", v6);
      }
      WTF::String::isolatedCopy();
      uint64_t v10 = *(unsigned int *)(v6 + 72);
      if (v10 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9EF4E0[v10])(&v17, v6 + 56);
      }
      *(void *)(v6 + 56) = v14;
      *(unsigned char *)(v6 + 64) = 1;
      *(_DWORD *)(v6 + 72) = 1;
      WTF::NativePromise<void,WTF::String,0u>::dispatchAll(v6, (atomic_uchar *volatile *)&v15);
      uint64_t result = 0;
      if (v16)
      {
        uint64_t result = v15;
        int v13 = 1;
        atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v15, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
        if (v13 != 1) {
          return (WTF::StringImpl *)WTF::Lock::unlockSlow(result);
        }
      }
      return result;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
  if (*(unsigned char *)result) {
    BOOL v12 = *((unsigned __int8 *)result + 16) >= 4u;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,WTF::String,0u>>((uint64_t)result, a3, v6);
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,WTF::String,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, uint64_t a3)
{
  void v37[2] = *MEMORY[0x1E4F143B8];
  WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v31, this);
  WTF::String::String((WTF::String *)&v30, " ignored already resolved or rejected ");
  uint64_t v27 = a3;
  WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v29, a3);
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v31, (uint64_t *)&v30, (uint64_t *)&v29, &v32);
  uint64_t v6 = v29;
  uint64_t v29 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  char v7 = v30;
  uint64_t v30 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = v31;
  uint64_t v31 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  char v9 = *(NSObject **)(a1 + 32);
  uint64_t v10 = (WTF *)os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    WTF::String::utf8();
    BOOL v12 = v28[0] ? (char *)v28[0] + 16 : 0;
    *(_DWORD *)long long buf = 136446210;
    int v34 = v12;
    _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    uint64_t v10 = v28[0];
    v28[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1) {
        uint64_t v10 = (WTF *)WTF::fastFree(v10, v11);
      }
      else {
        --*(_DWORD *)v10;
      }
    }
  }
  if (*(unsigned char *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    int v13 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v14 = *v13;
      if (v14) {
        break;
      }
      int v15 = *v13;
      atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v15, v14 | 1, memory_order_acquire, memory_order_acquire);
      if (v15 == v14)
      {
        uint64_t v16 = WTF::Logger::observers(v10);
        uint64_t v17 = *(unsigned int *)(v16 + 12);
        if (v17)
        {
          int v18 = *(uint64_t **)v16;
          uint64_t v19 = *(void *)v16 + 8 * v17;
          do
          {
            uint64_t v20 = *v18;
            *(_DWORD *)long long buf = 0;
            WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v34 + 4), this);
            int v35 = 0;
            WTF::String::String((WTF::String *)v36, " ignored already resolved or rejected ");
            v36[2] = 0;
            WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(v37, v27);
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 3uLL);
            (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v20 + 16))(v20, a1, 4, v28);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v21);
            for (uint64_t i = 40; i != -8; i -= 16)
            {
              uint64_t v23 = *(WTF::StringImpl **)&buf[i];
              *(void *)&buf[i] = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2) {
                  WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
                }
                else {
                  *(_DWORD *)v23 -= 2;
                }
              }
            }
            ++v18;
          }
          while (v18 != (uint64_t *)v19);
        }
        int v24 = 1;
        atomic_compare_exchange_strong_explicit(v13, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
        if (v24 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  uint64_t result = v32;
  uint64_t v32 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unint64_t WTF::Vector<WebKit::LibWebRTCCodecs::Decoder::EncodedFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 80 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::LibWebRTCCodecs::Decoder::EncodedFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::LibWebRTCCodecs::Decoder::EncodedFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebKit::LibWebRTCCodecs::Decoder::EncodedFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    if (a2 >= 0x3333334)
    {
      __break(0xC471u);
    }
    else
    {
      char v2 = result;
      unint64_t v3 = *(WTF **)result;
      uint64_t v4 = result[3];
      int v5 = 80 * a2;
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(80 * a2));
      v2[2] = (v5 & 0xFFFFFFF0) / 0x50;
      *(void *)char v2 = result;
      if (v4)
      {
        unint64_t v7 = result;
        unint64_t v8 = 0;
        uint64_t v9 = 80 * v4;
        do
        {
          unint64_t v10 = &v7[v8 / 4];
          int v11 = (char *)v3 + v8;
          uint64_t v12 = *(void *)((char *)v3 + v8);
          *((void *)v10 + 1) = 0;
          *((void *)v10 + 2) = 0;
          *(void *)unint64_t v10 = v12;
          uint64_t v13 = *(void *)((char *)v3 + v8 + 8);
          *((void *)v11 + 1) = 0;
          *((void *)v10 + 1) = v13;
          LODWORD(v13) = *(_DWORD *)((char *)v3 + v8 + 16);
          *((_DWORD *)v11 + 4) = 0;
          void v10[4] = v13;
          LODWORD(v13) = *(_DWORD *)((char *)v3 + v8 + 20);
          *((_DWORD *)v11 + 5) = 0;
          v10[5] = v13;
          v10[6] = *(_DWORD *)((char *)v3 + v8 + 24);
          int v14 = (uint64_t *)((char *)v3 + v8 + 32);
          uint64_t v15 = *v14;
          *int v14 = 0;
          *((void *)v10 + 4) = v15;
          long long v16 = *(_OWORD *)((char *)v3 + v8 + 40);
          *(_OWORD *)(v10 + 14) = *(_OWORD *)((char *)v3 + v8 + 56);
          *(_OWORD *)(v10 + 10) = v16;
          uint64_t v17 = *(void *)((char *)v3 + v8 + 72);
          *((void *)v11 + 9) = 0;
          *((void *)v10 + 9) = v17;
          WTF::NativePromiseProducer<void,WTF::String,16u>::~NativePromiseProducer(v14, v6);
          uint64_t result = *(unsigned int **)((char *)v3 + v8 + 8);
          if (result)
          {
            *((void *)v11 + 1) = 0;
            *((_DWORD *)v11 + 4) = 0;
            uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v8 += 80;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(void *)char v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createEncoderAndWaitUntilInitialized(WebCore::VideoCodecType,WTF::String const&,std::map<std::string,std::string> const&,WebCore::VideoEncoder::Config const&,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Encoder *)> &&)::$_0,void,WebKit::LibWebRTCCodecs::Encoder *>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EFB48;
  uint64_t v2 = a1[7];
  a1[7] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createEncoderAndWaitUntilInitialized(WebCore::VideoCodecType,WTF::String const&,std::map<std::string,std::string> const&,WebCore::VideoEncoder::Config const&,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Encoder *)> &&)::$_0,void,WebKit::LibWebRTCCodecs::Encoder *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EFB48;
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createEncoderAndWaitUntilInitialized(WebCore::VideoCodecType,WTF::String const&,std::map<std::string,std::string> const&,WebCore::VideoEncoder::Config const&,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Encoder *)> &&)::$_0,void,WebKit::LibWebRTCCodecs::Encoder *>::call(uint64_t a1, WebKit::LibWebRTCCodecs::Encoder *a2)
{
  if (a2)
  {
    {
      uint64_t v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v9);
    }
    uint64_t v4 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    WebKit::LibWebRTCCodecs::initializeEncoderInternal((atomic_uchar *)v4, a2, *(_WORD *)(a1 + 8), *(_WORD *)(a1 + 16), *(void *)(a1 + 32) / 0x3E8uLL, (unint64_t)((((*(void *)(a1 + 32) >> 2) & 0x1FFFFFFFFFFFFFFFLL) * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4, 0, *(double *)(a1 + 40));
    {
      unint64_t v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v10);
    }
    int v5 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    WebKit::LibWebRTCCodecs::setEncodeRates((atomic_uchar *)v5, a2, *(void *)(a1 + 32) / 0x3E8uLL, *(double *)(a1 + 40), &v11);
    uint64_t v6 = (unsigned int *)v11;
    int v11 = 0;
    if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(void *)v6 + 16))(v6);
    }
  }
  unint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 56) + 16);

  return v7();
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createEncoderInternal(WebCore::VideoCodecType,WTF::String const&,std::map<std::string,std::string> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Encoder *)> &&)::$_1,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9EFB70;
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
  std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>::reset[abi:sn180100]((WebKit::LibWebRTCCodecs::Encoder **)(a1 + 16), 0);
  return a1;
}

{
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9EFB70;
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
  std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>::reset[abi:sn180100]((WebKit::LibWebRTCCodecs::Encoder **)(a1 + 16), 0);

  return WTF::fastFree((WTF *)a1, v4);
}

atomic_uchar *volatile **WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createEncoderInternal(WebCore::VideoCodecType,WTF::String const&,std::map<std::string,std::string> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Encoder *)> &&)::$_1,void>::call(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 57), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](v3 + 57);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v53, *(atomic_uchar *volatile **)(v3 + 64));
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 57), (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 57));
  }
  char v5 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 40), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](v3 + 40);
  }
  uint64_t v6 = *(uint64_t **)(a1 + 16);
  unint64_t v7 = (os_unfair_lock_s *)v53;
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  unint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v10 = &unk_1EE9EFC10;
  v10[1] = v8;
  void v10[2] = v9;
  uint64_t v54 = v10;
  WebKit::createRemoteEncoder((uint64_t)v6, v7, a1 + 24, (uint64_t *)&v54);
  if (v54) {
    (*(void (**)(void *))(*v54 + 8))(v54);
  }
  char v11 = 0;
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = v53;
  atomic_uchar *volatile v14 = *v53;
  int v15 = 1;
  atomic_compare_exchange_strong_explicit(*v53, (unsigned __int8 *)&v11, 1u, memory_order_acquire, memory_order_acquire);
  if (v11) {
    MEMORY[0x19972E8D0](v14);
  }
  ++*((void *)v14 + 1);
  atomic_compare_exchange_strong_explicit(v14, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
  if (v15 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
  }
  uint64_t v52 = v13;
  WebKit::LibWebRTCCodecs::setEncoderConnection(v12, (uint64_t *)&v52);
  long long v16 = v52;
  uint64_t v52 = 0;
  if (v16)
  {
    char v17 = 0;
    atomic_uchar *volatile v18 = *v16;
    atomic_compare_exchange_strong_explicit(*v16, (unsigned __int8 *)&v17, 1u, memory_order_acquire, memory_order_acquire);
    if (v17) {
      MEMORY[0x19972E8D0](v18);
    }
    uint64_t v19 = *((void *)v18 + 1);
    uint64_t v20 = v19 - 1;
    *((void *)v18 + 1) = v19 - 1;
    if (v19 == 1)
    {
      uint64_t v51 = *((void *)v18 + 2);
      uint64_t v22 = *((void *)v18 + 3);
      *((void *)v18 + 3) = 0;
      BOOL v21 = v51 == 0;
    }
    else
    {
      BOOL v21 = 0;
      uint64_t v22 = 0;
    }
    int v23 = 1;
    atomic_compare_exchange_strong_explicit(v18, (unsigned __int8 *)&v23, 0, memory_order_release, memory_order_relaxed);
    if (v23 == 1)
    {
      if (v20) {
        goto LABEL_22;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v18);
      if (v20) {
        goto LABEL_22;
      }
    }
    uint64_t v24 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v24 = &unk_1EE9B37E8;
    *(void *)(v24 + 8) = v18;
    *(void *)(v24 + ++*(_DWORD *)(this + 16) = v22;
    *(unsigned char *)(v24 + 24) = v21;
    uint64_t v54 = (void *)v24;
    WTF::ensureOnMainRunLoop();
    uint64_t v25 = (uint64_t)v54;
    uint64_t v54 = 0;
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
  }
LABEL_22:
  int v26 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 40), (unsigned __int8 *)&v26, 0, memory_order_release, memory_order_relaxed);
  if (v26 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 40));
  }
  uint64_t v27 = *(void *)(a1 + 16);
  int v28 = (WTF::StringImpl **)(v27 + 24);
  uint64_t v29 = *(unsigned int *)(v27 + 36);
  if (v29) {
    WTF::VectorDestructor<true,WebCore::HTTPHeaderField>::destruct(*v28, (WTF::StringImpl *)((char *)*v28 + 16 * v29));
  }
  WTF::VectorBuffer<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::FastMalloc>::adopt((uint64_t)v28, (_DWORD *)(a1 + 24));
  uint64_t v30 = **(WebKit::LibWebRTCCodecs::Encoder ***)(a1 + 16);
  uint64_t v33 = *(void *)(v3 + 48);
  uint64_t v32 = (uint64_t *)(v3 + 48);
  uint64_t v31 = v33;
  if (v33
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v32),
        (uint64_t v31 = *v32) != 0))
  {
    int v34 = *(_DWORD *)(v31 - 8);
  }
  else
  {
    int v34 = 0;
  }
  unint64_t v35 = ((unint64_t)v30 + ~((void)v30 << 32)) ^ (((unint64_t)v30 + ~((void)v30 << 32)) >> 22);
  unint64_t v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
  unint64_t v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
  unsigned int v38 = v34 & ((v37 >> 31) ^ v37);
  int v39 = (WebKit::LibWebRTCCodecs::Encoder **)(v31 + 16 * v38);
  uint64_t v40 = *v39;
  if (!*v39)
  {
LABEL_37:
    void *v39 = v30;
    unint64_t v43 = *(WebKit::LibWebRTCCodecs::Encoder **)(a1 + 16);
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>::reset[abi:sn180100](v39 + 1, v43);
    uint64_t v44 = *v32;
    if (*v32) {
      int v45 = *(_DWORD *)(v44 - 12) + 1;
    }
    else {
      int v45 = 1;
    }
    *(_DWORD *)(v44 - 12) = v45;
    uint64_t v46 = *v32;
    if (*v32) {
      int v47 = *(_DWORD *)(v46 - 12);
    }
    else {
      int v47 = 0;
    }
    uint64_t v48 = (*(_DWORD *)(v46 - 16) + v47);
    unint64_t v49 = *(unsigned int *)(v46 - 4);
    if (v49 > 0x400)
    {
      if (v49 > 2 * v48) {
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v53);
      }
    }
    else if (3 * v49 > 4 * v48)
    {
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v53);
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v32);
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v53);
  }
  unint64_t v41 = 0;
  int v42 = 1;
  while (v40 != v30)
  {
    if (v40 == (WebKit::LibWebRTCCodecs::Encoder *)-1) {
      unint64_t v41 = v39;
    }
    unsigned int v38 = (v38 + v42) & v34;
    int v39 = (WebKit::LibWebRTCCodecs::Encoder **)(v31 + 16 * v38);
    uint64_t v40 = *v39;
    ++v42;
    if (!*v39)
    {
      if (v41)
      {
        WTF::StringImpl *v41 = 0;
        v41[1] = 0;
        --*(_DWORD *)(*v32 - 16);
        int v39 = v41;
      }
      goto LABEL_37;
    }
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v53);
}

uint64_t WebKit::createRemoteEncoder(uint64_t a1, os_unfair_lock_s *a2, uint64_t a3, uint64_t *a4)
{
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v8 = (uint64_t *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 130);
  char v10 = *(unsigned char *)(a1 + 129);
  char v11 = *(unsigned char *)(a1 + 131);
  {
    uint64_t v29 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v29);
  }
  uint64_t v12 = *((void *)WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
        + 12);
  uint64_t v13 = *a4;
  *a4 = 0;
  atomic_uchar *volatile v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *atomic_uchar *volatile v14 = &unk_1EE9EFB98;
  v14[1] = v13;
  uint64_t v15 = *(void *)(v12 + 32);
  v12 += 32;
  (*(void (**)(uint64_t))(v15 + 32))(v12);
  long long v16 = (void *)WTF::fastMalloc((WTF *)0x18);
  *long long v16 = &unk_1EE9EFBC0;
  v16[1] = v14;
  void v16[2] = v12;
  v32[0] = (uint64_t)v16;
  v32[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v17 = 119;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  uint64_t v31 = v17;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v17, (uint64_t *)a1);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v17, v7);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, v8);
  IPC::VectorArgumentCoder<false,WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v17, a3);
  atomic_uchar *volatile v18 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1);
  if (!v19)
  {
    __break(0xC471u);
    JUMPOUT(0x19913B840);
  }
  unsigned char *v18 = v9;
  uint64_t v20 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x19913B860);
  }
  *uint64_t v20 = v10;
  uint64_t v22 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1);
  if (!v23)
  {
    __break(0xC471u);
    JUMPOUT(0x19913B880);
  }
  *uint64_t v22 = v11;
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(a2, &v31, v32, 0, 0);
  uint64_t v25 = v31;
  uint64_t v31 = 0;
  if (v25)
  {
    IPC::Encoder::~Encoder(v25, v24);
    WTF::fastFree(v27, v28);
  }
  uint64_t result = v32[0];
  v32[0] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::LibWebRTCCodecsProxy::CreateEncoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9EFB98;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::LibWebRTCCodecsProxy::CreateEncoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9EFB98;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::LibWebRTCCodecsProxy::CreateEncoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2) > 0xFFu)
    {
      int v4 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 16);
      goto LABEL_7;
    }
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v7 = a2[3];
    if (v7 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
    }
  }
  int v4 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 16);
LABEL_7:

  return v4();
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateEncoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1},void,std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EFBC0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateEncoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1},void,std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EFBC0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateEncoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1},void,std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v5 = &unk_1EE9EFBE8;
  v5[1] = v3;
  v5[2] = v4;
  uint64_t v7 = v5;
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 16))(v2, &v7);
  uint64_t result = (uint64_t)v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateEncoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1}::operator()(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EFBE8;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  void *v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9EFBE8;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<Messages::LibWebRTCCodecsProxy::CreateEncoder,WTF::Function<void ()(BOOL)>>(WTF::Function<void ()(BOOL)> &&,WTF::RefCountedSerialFunctionDispatcher &)::{lambda(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>> &&)#1}::operator()(std::unique_ptr<IPC::Decoder,WTF::RefCountedSerialFunctionDispatcher &::default_delete<std::unique_ptr>>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createEncoderInternal(WebCore::VideoCodecType,WTF::String const&,std::map<std::string,std::string> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Encoder *)> &&)::$_1::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EFC10;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createEncoderInternal(WebCore::VideoCodecType,WTF::String const&,std::map<std::string,std::string> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Encoder *)> &&)::$_1::operator()(void)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EFC10;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::createEncoderInternal(WebCore::VideoCodecType,WTF::String const&,std::map<std::string,std::string> const&,BOOL,BOOL,WebCore::VideoEncoderScalabilityMode,WTF::Function<void ()(WebKit::LibWebRTCCodecs::Encoder *)> &&)::$_1::operator()(void)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1, char a2)
{
  if (a2)
  {
    {
      uint64_t v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v6);
    }
    uint64_t v3 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*((void *)v3 + 6), *(void *)(a1 + 8));
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 16);
  }
  else
  {
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 16);
  }

  return v4();
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      char v10 = (uint64_t *)(v4 + 16 * i);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v12 = *a1;
          if (*a1) {
            int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            int v13 = 0;
          }
          unint64_t v14 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
          int v18 = 1;
          do
          {
            unsigned int v19 = v17;
            uint64_t v20 = *(void *)(v12 + 16 * v17);
            unsigned int v17 = (v17 + v18++) & v13;
          }
          while (v20);
          uint64_t v21 = v12 + 16 * v19;
          std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>::reset[abi:sn180100]((WebKit::LibWebRTCCodecs::Encoder **)(v21 + 8), 0);
          *(void *)uint64_t v21 = *v10;
          uint64_t v22 = v4 + 16 * i;
          uint64_t v23 = *(void *)(v22 + 8);
          v22 += 8;
          *(void *)uint64_t v22 = 0;
          *(void *)(v21 + 8) = v23;
          std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>::reset[abi:sn180100]((WebKit::LibWebRTCCodecs::Encoder **)v22, 0);
        }
        else
        {
          std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>::reset[abi:sn180100]((WebKit::LibWebRTCCodecs::Encoder **)(v4 + 16 * i + 8), 0);
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::releaseEncoder(WebKit::LibWebRTCCodecs::Encoder &)::$_0,void>::call(uint64_t a1)
{
  int v2 = (uint64_t *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  int v5 = (uint64_t *)(v3 + 48);
  uint64_t v4 = *(void *)(v3 + 48);
  if (!v4) {
    goto LABEL_9;
  }
  unsigned int v6 = *(_DWORD *)(v4 - 8);
  unint64_t v7 = (v1 + ~(v1 << 32)) ^ ((unint64_t)(v1 + ~(v1 << 32)) >> 22);
  unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  uint64_t v10 = v6 & ((v9 >> 31) ^ v9);
  uint64_t v11 = *(void *)(v4 + 16 * v10);
  if (v11 != v1)
  {
    int v12 = 1;
    while (v11)
    {
      uint64_t v10 = (v10 + v12) & v6;
      uint64_t v11 = *(void *)(v4 + 16 * v10);
      ++v12;
      if (v11 == v1) {
        goto LABEL_8;
      }
    }
    uint64_t v10 = *(unsigned int *)(v4 - 4);
  }
LABEL_8:
  if (v10 != *(_DWORD *)(v4 - 4))
  {
    uint64_t v24 = v4 + 16 * v10;
    int v13 = *(WebKit::LibWebRTCCodecs::Encoder **)(v24 + 8);
    *(void *)(v24 + 8) = 0;
    uint64_t v25 = *v5;
    if (!*v5 || (v25 += 16 * *(unsigned int *)(v25 - 4), v25 != v24))
    {
      if (v25 != v24)
      {
        *(void *)uint64_t v24 = -1;
        std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>::reset[abi:sn180100]((WebKit::LibWebRTCCodecs::Encoder **)(v24 + 8), 0);
        ++*(_DWORD *)(*v5 - 16);
        uint64_t v26 = *v5;
        int v27 = *v5 ? *(_DWORD *)(v26 - 12) - 1 : -1;
        *(_DWORD *)(v26 - 12) = v27;
        uint64_t v30 = *v5;
        if (*v5)
        {
          unsigned int v31 = 6 * *(_DWORD *)(v30 - 12);
          unsigned int v32 = *(_DWORD *)(v30 - 4);
          if (v31 < v32 && v32 >= 9) {
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::LibWebRTCCodecs::Encoder>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::VideoEncoderIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v5, v32 >> 1);
          }
        }
      }
    }
  }
  else
  {
LABEL_9:
    int v13 = 0;
  }
  char v14 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 40), (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
  if (v14) {
    MEMORY[0x19972E8D0](v3 + 40);
  }
  uint64_t v15 = *((void *)v13 + 12);
  unint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v16 = 126;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  int v34 = v16;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v16, v2);
  IPC::Connection::sendMessageImpl(v15, (uint64_t *)&v34, 0, 0);
  int v18 = v34;
  int v34 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v17);
    WTF::fastFree(v28, v29);
  }
  if (!*v5 || !*(_DWORD *)(*v5 - 12))
  {
    uint64_t v19 = *(void *)(v3 + 32);
    if (!v19 || !*(_DWORD *)(v19 - 12)) {
      atomic_store(0, (unsigned __int8 *)(v3 + 56));
    }
  }
  int v20 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 40), (unsigned __int8 *)&v20, 0, memory_order_release, memory_order_relaxed);
  if (v20 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 40));
  }
  WebKit::LibWebRTCCodecs::Encoder::~Encoder(v13);
  return WTF::fastFree(v21, v22);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::initializeEncoder(WebKit::LibWebRTCCodecs::Encoder &,unsigned short,unsigned short,unsigned int,unsigned int,unsigned int,unsigned int)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (WebKit::LibWebRTCCodecs::Encoder *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(v2 + 48), *(void *)(a1 + 16));
  __int16 v4 = *(_WORD *)(a1 + 24);
  __int16 v5 = *(_WORD *)(a1 + 26);
  int v6 = *(_DWORD *)(a1 + 28);
  int v7 = *(_DWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 36);
  int v9 = *(_DWORD *)(a1 + 40);

  return WebKit::LibWebRTCCodecs::initializeEncoderInternal((atomic_uchar *)v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t *IPC::Connection::sendWithPromisedReply<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::EncodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(uint64_t *a1, os_unfair_lock_s *a2, uint64_t a3)
{
  uint64_t v24 = 0;
  *(void *)&long long v25 = 0;
  *((void *)&v25 + 1) = "sendWithPromisedReply";
  *(void *)&long long v26 = 0;
  WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v21, (WTF::Logger::LogSiteIdentifier *)&v24);
  uint64_t v6 = v21;
  if (v21)
  {
    atomic_fetch_add((atomic_uint *volatile)(v21 + 8), 1u);
    uint64_t v7 = v21;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a1 = v6;
  uint64_t v21 = 0;
  long long v25 = v22;
  long long v26 = v23;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v8 = &unk_1EE9EFCD8;
  *(void *)(v8 + 8) = v7;
  uint64_t v24 = 0;
  long long v9 = v26;
  *(_OWORD *)(v8 + ++*(_DWORD *)(this + 16) = v25;
  *(_OWORD *)(v8 + 32) = v9;
  v20[0] = v8;
  v20[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::~NativePromiseProducer((uint64_t *)&v24);
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 121;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v24 = v10;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v10, *(uint64_t **)a3);
  IPC::ArgumentCoder<WebKit::SharedVideoFrame,void>::encode(v10, *(void *)(a3 + 8));
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v10, *(void *)(a3 + 16));
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long> const&>(v10, *(void *)(a3 + 24));
  char v11 = *(unsigned char *)(a3 + 32);
  int v12 = (unsigned char *)IPC::Encoder::grow(v10, 1uLL, 1);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x19913C670);
  }
  unsigned char *v12 = v11;
  IPC::Connection::sendMessageWithAsyncReplyWithDispatcher(a2, &v24, v20, 0, 0);
  uint64_t v15 = v24;
  uint64_t v24 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v14);
    WTF::fastFree(v18, v19);
  }
  uint64_t v16 = v20[0];
  v20[0] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  return WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::~NativePromiseProducer(&v21);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WTF::RefPtr<WTF::NativePromise<void,WTF::String,0u>,WTF::RawPtrTraits<WTF::NativePromise<void,WTF::String,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WTF::String,0u>>> WebKit::LibWebRTCCodecs::encodeFrameInternal<webrtc::VideoFrame>(WebKit::LibWebRTCCodecs::Encoder &,webrtc::VideoFrame const&,BOOL,WebCore::VideoFrameRotation,WTF::MediaTime,long long,std::optional<unsigned long long>)::{lambda(webrtc::VideoFrame&)#1},void,IPC::Semaphore &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 96);
  v5[0] = v2;
  v5[1] = a2;
  return IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetSharedVideoFrameSemaphore>(v3, (uint64_t)v5);
}

IPC::Encoder *IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetSharedVideoFrameSemaphore>(uint64_t a1, uint64_t a2)
{
  __int16 v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v4 = 132;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  long long v9 = v4;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, *(uint64_t **)a2);
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode((uint64_t)v4, *(IPC::Semaphore **)(a2 + 8));
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  long long v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WTF::RefPtr<WTF::NativePromise<void,WTF::String,0u>,WTF::RawPtrTraits<WTF::NativePromise<void,WTF::String,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WTF::String,0u>>> WebKit::LibWebRTCCodecs::encodeFrameInternal<webrtc::VideoFrame>(WebKit::LibWebRTCCodecs::Encoder &,webrtc::VideoFrame const&,BOOL,WebCore::VideoFrameRotation,WTF::MediaTime,long long,std::optional<unsigned long long>)::{lambda(WebCore::SharedMemoryHandle &&)#1},void,WebCore::SharedMemoryHandle &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 96);
  v5[0] = v2;
  v5[1] = a2;
  return IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetSharedVideoFrameMemory>(v3, (uint64_t)v5);
}

IPC::Encoder *IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetSharedVideoFrameMemory>(uint64_t a1, uint64_t a2)
{
  __int16 v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v4 = 131;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  long long v9 = v4;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(v4, *(void *)(a2 + 8));
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  long long v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::EncodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(WTF::NativePromise<BOOL,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EFCD8;
  WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::EncodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(WTF::NativePromise<BOOL,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9EFCD8;
  WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::EncodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(WTF::NativePromise<BOOL,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (WTF::NativePromiseBase *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  __int16 v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9EFD00;
  v4[1] = v3;
  uint64_t v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  void v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<BOOL,IPC::Error,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  uint64_t result = (uint64_t)v7;
  if (v7) {
    return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::EncodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(WTF::NativePromise<BOOL,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<BOOL,IPC::Error>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EFD00;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::EncodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(WTF::NativePromise<BOOL,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<BOOL,IPC::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9EFD00;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::EncodeFrame,WTF::NativePromise<BOOL,IPC::Error,0u>>(WTF::NativePromise<BOOL,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<BOOL,IPC::Error>>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
  {
    uint64_t result = 1;
    int v5 = 1;
    goto LABEL_8;
  }
  if (!*v3)
  {
LABEL_7:
    int v5 = 1;
    uint64_t result = 13;
    goto LABEL_8;
  }
  uint64_t result = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(*(void **)(a1 + 8));
  if ((unsigned __int16)result <= 0xFFu)
  {
    uint64_t v6 = *v3;
    uint64_t v7 = v3[1];
    uint64_t *v3 = 0;
    v3[1] = 0;
    uint64_t v8 = v3[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
    goto LABEL_7;
  }
  int v5 = 0;
LABEL_8:
  *(unsigned char *)a2 = result;
  *(_DWORD *)(a2 + 4) = v5;
  return result;
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIbN3IPC5ErrorELj0EE11whenSettledIZN6WebKit15LibWebRTCCodecs19encodeFrameInternalIN6webrtc10VideoFrameEEENS_6RefPtrINS2_IvNS_6StringELj0EEENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEERNS8_7EncoderERKT_bN7WebCore18VideoFrameRotationENS_9MediaTimeExNSt3__18optionalIyEEEUlOSM_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESV_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIbS4_EEE_NS_3RefISE_SG_SI_EEJS18_EE4callES18_@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 4))
  {
    uint64_t v2 = "Encoding task did not complete";
    uint64_t v3 = 31;
LABEL_3:
    *(void *)&long long v9 = v2;
    *((void *)&v9 + 1) = v3;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = "operator()";
    uint64_t v8 = 0;
    return WTF::NativePromise<void,WTF::String,0u>::createAndReject<WTF::ASCIILiteral,std::enable_if<true,void>>(&v9, (WTF::Logger::LogSiteIdentifier *)&v5, a2);
  }
  if (!*(unsigned char *)a1)
  {
    uint64_t v2 = "Encoding task failed";
    uint64_t v3 = 21;
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = "operator()";
  uint64_t v8 = 0;
  return WTF::NativePromise<void,WTF::String,0u>::createAndResolve<std::enable_if<true,void>>(a2, (WTF::Logger::LogSiteIdentifier *)&v5);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WTF::RefPtr<WTF::NativePromise<void,WTF::String,0u>,WTF::RawPtrTraits<WTF::NativePromise<void,WTF::String,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WTF::String,0u>>> WebKit::LibWebRTCCodecs::encodeFrameInternal<WebCore::VideoFrame>(WebKit::LibWebRTCCodecs::Encoder &,WebCore::VideoFrame const&,BOOL,WebCore::VideoFrameRotation,WTF::MediaTime,long long,std::optional<unsigned long long>)::{lambda(WebCore::VideoFrame&)#1},void,IPC::Semaphore &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 96);
  v5[0] = v2;
  v5[1] = a2;
  return IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetSharedVideoFrameSemaphore>(v3, (uint64_t)v5);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WTF::RefPtr<WTF::NativePromise<void,WTF::String,0u>,WTF::RawPtrTraits<WTF::NativePromise<void,WTF::String,0u>>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WTF::String,0u>>> WebKit::LibWebRTCCodecs::encodeFrameInternal<WebCore::VideoFrame>(WebKit::LibWebRTCCodecs::Encoder &,WebCore::VideoFrame const&,BOOL,WebCore::VideoFrameRotation,WTF::MediaTime,long long,std::optional<unsigned long long>)::{lambda(WebCore::SharedMemoryHandle &&)#1},void,WebCore::SharedMemoryHandle &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 96);
  v5[0] = v2;
  v5[1] = a2;
  return IPC::Connection::send<Messages::LibWebRTCCodecsProxy::SetSharedVideoFrameMemory>(v3, (uint64_t)v5);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIbN3IPC5ErrorELj0EE11whenSettledIZN6WebKit15LibWebRTCCodecs19encodeFrameInternalIN7WebCore10VideoFrameEEENS_6RefPtrINS2_IvNS_6StringELj0EEENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEERNS8_7EncoderERKT_bNSA_18VideoFrameRotationENS_9MediaTimeExNSt3__18optionalIyEEEUlOSM_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESU_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIbS4_EEE_NS_3RefISE_SG_SI_EEJS17_EE4callES17_@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 4))
  {
    uint64_t v2 = "Encoding task did not complete";
    uint64_t v3 = 31;
LABEL_3:
    *(void *)&long long v9 = v2;
    *((void *)&v9 + 1) = v3;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = "operator()";
    uint64_t v8 = 0;
    return WTF::NativePromise<void,WTF::String,0u>::createAndReject<WTF::ASCIILiteral,std::enable_if<true,void>>(&v9, (WTF::Logger::LogSiteIdentifier *)&v5, a2);
  }
  if (!*(unsigned char *)a1)
  {
    uint64_t v2 = "Encoding task failed";
    uint64_t v3 = 21;
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = "operator()";
  uint64_t v8 = 0;
  return WTF::NativePromise<void,WTF::String,0u>::createAndResolve<std::enable_if<true,void>>(a2, (WTF::Logger::LogSiteIdentifier *)&v5);
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushEncoder,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EFDC8;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushEncoder,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9EFDC8;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushEncoder,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  __int16 v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9EFDF0;
  v4[1] = v3;
  uint64_t v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  void v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  uint64_t result = (uint64_t)v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushEncoder,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,IPC::Error>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EFDF0;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushEncoder,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,IPC::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9EFDF0;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::FlushEncoder,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,IPC::Error>>::call@<X0>(uint64_t result@<X0>, __int16 *a2@<X8>)
{
  uint64_t v2 = *(void **)(result + 8);
  if (v2)
  {
    if (*v2)
    {
      *a2 = 0;
      return result;
    }
    __int16 v3 = 269;
  }
  else
  {
    __int16 v3 = 257;
  }
  *a2 = v3;
  return result;
}

void *WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::SetEncodeRates,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EFE18;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::SetEncodeRates,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9EFE18;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::SetEncodeRates,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1},void,std::unique_ptr<IPC::Decoder> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  __int16 v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9EFE40;
  v4[1] = v3;
  uint64_t v7 = v4;
  v6[0] = 0;
  v6[1] = 0;
  void v6[2] = "operator()";
  v6[3] = 0;
  WTF::NativePromiseProducer<void,IPC::Error,0u>::settleWithFunction<std::enable_if<true,void>>(v2, (uint64_t *)&v7, (WTF::Logger::LogSiteIdentifier *)v6);
  uint64_t result = (uint64_t)v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::SetEncodeRates,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,IPC::Error>>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EFE40;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::SetEncodeRates,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,IPC::Error>>::~CallableWrapper(IPC::Decoder **a1)
{
  *a1 = (IPC::Decoder *)&unk_1EE9EFE40;
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<IPC::Connection::AsyncReplyHandlerWithDispatcher IPC::Connection::makeAsyncReplyHandlerWithDispatcher<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::SetEncodeRates,WTF::NativePromise<void,IPC::Error,0u>>(WTF::NativePromise<void,IPC::Error,0u>::Producer &&)::{lambda(std::unique_ptr<IPC::Decoder> &&)#1}::operator()(std::unique_ptr<IPC::Decoder> &)::{lambda(void)#1},std::experimental::fundamentals_v3::expected<void,IPC::Error>>::call@<X0>(uint64_t result@<X0>, __int16 *a2@<X8>)
{
  uint64_t v2 = *(void **)(result + 8);
  if (v2)
  {
    if (*v2)
    {
      *a2 = 0;
      return result;
    }
    __int16 v3 = 269;
  }
  else
  {
    __int16 v3 = 257;
  }
  *a2 = v3;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::setEncodeRates(WebKit::LibWebRTCCodecs::Encoder &,unsigned int,unsigned int)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EFE68;
  WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer(a1 + 5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::setEncodeRates(WebKit::LibWebRTCCodecs::Encoder &,unsigned int,unsigned int)::$_0,void>::~CallableWrapper(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9EFE68;
  WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer(a1 + 5);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::setEncodeRates(WebKit::LibWebRTCCodecs::Encoder &,unsigned int,unsigned int)::$_0,void>::call(uint64_t result)
{
  int v1 = **(unsigned __int8 **)(result + 16);
  if (!**(unsigned char **)(result + 16))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 8);
    __int16 v4 = (atomic_uchar *)(v3 + 57);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 57), (unsigned __int8 *)&v1, 1u, memory_order_acquire, memory_order_acquire);
    if (v1) {
      MEMORY[0x19972E8D0](v3 + 57);
    }
    uint64_t v5 = *(os_unfair_lock_s **)(v3 + 64);
    v19[0] = v2 + 24;
    v19[1] = *(void *)(v2 + 32);
    IPC::Connection::sendWithPromisedReply<IPC::Connection::NoOpPromiseConverter,Messages::LibWebRTCCodecsProxy::SetEncodeRates,WTF::NativePromise<void,IPC::Error,0u>>(&v20, v5, (uint64_t)v19);
    long long v6 = *(_OWORD *)(v2 + 64);
    long long v17 = *(_OWORD *)(v2 + 48);
    long long v7 = v17;
    long long v18 = v6;
    uint64_t v8 = v20;
    uint64_t v9 = *(void *)(v3 + 96);
    uint64_t v10 = *(void *)(v2 + 40);
    *(void *)(v2 + 40) = 0;
    uint64_t v16 = 0;
    long long v26 = v7;
    long long v27 = *(_OWORD *)(v2 + 64);
    uint64_t v11 = WTF::fastMalloc((WTF *)0x50);
    uint64_t v12 = *(void *)(v9 + 32);
    v9 += 32;
    (*(void (**)(uint64_t))(v12 + 32))(v9);
    uint64_t v13 = WTF::fastMalloc((WTF *)0x30);
    *(void *)uint64_t v13 = &unk_1EE9EFE90;
    *(void *)(v13 + 8) = v10;
    uint64_t v25 = 0;
    long long v14 = v27;
    *(_OWORD *)(v13 + ++*(_DWORD *)(this + 16) = v26;
    *(_OWORD *)(v13 + 32) = v14;
    *(_DWORD *)(v11 + 8) = 1;
    *(void *)(v11 + ++*(_DWORD *)(this + 16) = v9;
    *(void *)(v11 + 24) = 0;
    *(void *)(v11 + 32) = 0;
    *(void *)(v11 + 40) = "operator()";
    *(void *)(v11 + 48) = 0;
    *(_WORD *)(v11 + 56) = 0;
    *(void *)uint64_t v11 = &unk_1EE9EF040;
    *(void *)(v11 + 64) = 0;
    *(void *)(v11 + 72) = v13;
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
    v21[0] = v8;
    v21[1] = v11;
    long long v22 = 0uLL;
    long long v23 = "operator()";
    uint64_t v24 = 0;
    WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer(&v25);
    WTF::NativePromise<void,IPC::Error,0u>::ThenCommand<WTF::NativePromise<void,IPC::Error,0u>::ThenCallback<false,void>>::~ThenCommand(v21);
    WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer(&v16);
    uint64_t result = v20;
    uint64_t v20 = 0;
    if (result && atomic_fetch_add((atomic_uint *volatile)(result + 8), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)(result + 8));
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    }
    int v15 = 1;
    atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v15, 0, memory_order_release, memory_order_relaxed);
    if (v15 != 1) {
      return WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN3IPC5ErrorELj0EE11whenSettledIZZN6WebKit15LibWebRTCCodecs14setEncodeRatesERNS8_7EncoderEjjEN3__0clEvEUlOT_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESD_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSQ_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9EFE90;
  WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN3IPC5ErrorELj0EE11whenSettledIZZN6WebKit15LibWebRTCCodecs14setEncodeRatesERNS8_7EncoderEjjEN3__0clEvEUlOT_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESD_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSQ_EED0Ev(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EE9EFE90;
  WTF::NativePromiseProducer<void,void,16u>::~NativePromiseProducer(a1 + 1);

  return WTF::fastFree((WTF *)a1, v2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvN3IPC5ErrorELj0EE11whenSettledIZZN6WebKit15LibWebRTCCodecs14setEncodeRatesERNS8_7EncoderEjjEN3__0clEvEUlOT_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESD_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvS4_EEE_vJSQ_EE4callESQ_(uint64_t a1)
{
  v2[0] = 0;
  v2[1] = 0;
  v2[2] = "operator()";
  v2[3] = 0;
  return WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>((uint64_t *)(a1 + 8), (WTF::NativePromiseBase *)v2);
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::gpuProcessConnectionDidClose(WebKit::GPUProcessConnection &)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9EFEB8;
  uint64_t v2 = (atomic_uchar *volatile *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    char v3 = 0;
    atomic_uchar *volatile v4 = *v2;
    atomic_compare_exchange_strong_explicit(*v2, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
    if (v3) {
      MEMORY[0x19972E8D0](v4);
    }
    uint64_t v5 = *((void *)v4 + 1);
    uint64_t v6 = v5 - 1;
    *((void *)v4 + 1) = v5 - 1;
    if (v5 == 1)
    {
      uint64_t v12 = *((void *)v4 + 2);
      uint64_t v8 = *((void *)v4 + 3);
      *((void *)v4 + 3) = 0;
      BOOL v7 = v12 == 0;
    }
    else
    {
      BOOL v7 = 0;
      uint64_t v8 = 0;
    }
    int v9 = 1;
    atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 == 1)
    {
      if (v6) {
        return a1;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
      if (v6) {
        return a1;
      }
    }
    uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v10 = &unk_1EE9B37E8;
    *(void *)(v10 + 8) = v4;
    *(void *)(v10 + ++*(_DWORD *)(this + 16) = v8;
    *(unsigned char *)(v10 + 24) = v7;
    uint64_t v13 = v10;
    WTF::ensureOnMainRunLoop();
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::gpuProcessConnectionDidClose(WebKit::GPUProcessConnection &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EFEB8;
  char v3 = (atomic_uchar *volatile *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    char v4 = 0;
    atomic_uchar *volatile v5 = *v3;
    atomic_compare_exchange_strong_explicit(*v3, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      MEMORY[0x19972E8D0](v5);
    }
    uint64_t v6 = *((void *)v5 + 1);
    uint64_t v7 = v6 - 1;
    *((void *)v5 + 1) = v6 - 1;
    if (v6 == 1)
    {
      uint64_t v13 = *((void *)v5 + 2);
      uint64_t v9 = *((void *)v5 + 3);
      *((void *)v5 + 3) = 0;
      BOOL v8 = v13 == 0;
    }
    else
    {
      BOOL v8 = 0;
      uint64_t v9 = 0;
    }
    int v10 = 1;
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 == 1)
    {
      if (v7) {
        return WTF::fastFree(this, a2);
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (v7) {
        return WTF::fastFree(this, a2);
      }
    }
    uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v11 = &unk_1EE9B37E8;
    *(void *)(v11 + 8) = v5;
    *(void *)(v11 + ++*(_DWORD *)(this + 16) = v9;
    *(unsigned char *)(v11 + 24) = v8;
    uint64_t v14 = v11;
    WTF::ensureOnMainRunLoop();
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::LibWebRTCCodecs::gpuProcessConnectionDidClose(WebKit::GPUProcessConnection &)::$_0,void>::call(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 57), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](v3 + 57);
  }
  uint64_t v4 = *(void *)(v3 + 32);
  if (!v4)
  {
    uint64_t v7 = 0;
    uint64_t v5 = 0;
LABEL_12:
    uint64_t v6 = (void *)(v4 + 16 * v5);
    goto LABEL_13;
  }
  uint64_t v5 = *(unsigned int *)(v4 - 4);
  uint64_t v6 = (void *)(v4 + 16 * v5);
  if (!*(_DWORD *)(v4 - 12))
  {
    uint64_t v7 = (void *)(v4 + 16 * v5);
    goto LABEL_12;
  }
  uint64_t v7 = *(void **)(v3 + 32);
  if (v5)
  {
    uint64_t v8 = 16 * v5;
    uint64_t v7 = *(void **)(v3 + 32);
    while ((unint64_t)(*v7 + 1) <= 1)
    {
      v7 += 2;
      v8 -= 16;
      if (!v8)
      {
        uint64_t v7 = v6;
        break;
      }
    }
  }
LABEL_13:
  uint64_t v76 = (WTF::Lock *)(v3 + 57);
  if (v4) {
    uint64_t v9 = (void *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  }
  else {
    uint64_t v9 = 0;
  }
  while (v7 != v9)
  {
    uint64_t v10 = v7[1];
    uint64_t v11 = *(os_unfair_lock_s **)(a1 + 16);
    char v12 = *(unsigned char *)(v3 + 134);
    char v13 = *(unsigned char *)(v3 + 136);
    uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v14 = &unk_1EE9EFEE0;
    int v77 = v14;
    WebKit::createRemoteDecoder(v10, v11, v12, v13, (uint64_t *)&v77);
    if (v77) {
      (*(void (**)(void *))(*v77 + 8))(v77);
    }
    int v15 = (WTF::StringImpl *)v7[1];
    uint64_t v16 = *(atomic_uchar *volatile **)(a1 + 16);
    if (v16)
    {
      char v17 = 0;
      atomic_uchar *volatile v18 = *v16;
      atomic_compare_exchange_strong_explicit(*v16, (unsigned __int8 *)&v17, 1u, memory_order_acquire, memory_order_acquire);
      if (v17) {
        MEMORY[0x19972E8D0](v18);
      }
      ++*((void *)v18 + 1);
      int v19 = 1;
      atomic_compare_exchange_strong_explicit(v18, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
      if (v19 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v18);
      }
    }
    long long v83 = v16;
    WebKit::LibWebRTCCodecs::setDecoderConnection(v3, v15, (uint64_t *)&v83);
    uint64_t v20 = v83;
    long long v83 = 0;
    if (!v20) {
      goto LABEL_33;
    }
    char v21 = 0;
    atomic_uchar *volatile v22 = *v20;
    atomic_compare_exchange_strong_explicit(*v20, (unsigned __int8 *)&v21, 1u, memory_order_acquire, memory_order_acquire);
    if (v21) {
      MEMORY[0x19972E8D0](v22);
    }
    uint64_t v23 = *((void *)v22 + 1);
    uint64_t v24 = v23 - 1;
    *((void *)v22 + 1) = v23 - 1;
    if (v23 == 1)
    {
      uint64_t v31 = *((void *)v22 + 2);
      uint64_t v26 = *((void *)v22 + 3);
      *((void *)v22 + 3) = 0;
      BOOL v25 = v31 == 0;
    }
    else
    {
      BOOL v25 = 0;
      uint64_t v26 = 0;
    }
    int v27 = 1;
    atomic_compare_exchange_strong_explicit(v22, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
    if (v27 == 1)
    {
      if (!v24) {
        goto LABEL_31;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v22);
      if (!v24)
      {
LABEL_31:
        uint64_t v28 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v28 = &unk_1EE9B37E8;
        *(void *)(v28 + 8) = v22;
        *(void *)(v28 + ++*(_DWORD *)(this + 16) = v26;
        *(unsigned char *)(v28 + 24) = v25;
        int v77 = (void *)v28;
        WTF::ensureOnMainRunLoop();
        uint64_t v29 = (uint64_t)v77;
        int v77 = 0;
        if (v29) {
          (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
        }
      }
    }
LABEL_33:
    uint64_t v30 = v7 + 2;
    uint64_t v7 = v6;
    if (v30 != v6)
    {
      uint64_t v7 = v30;
      while ((unint64_t)(*v7 + 1) <= 1)
      {
        v7 += 2;
        if (v7 == v6)
        {
          uint64_t v7 = v6;
          break;
        }
      }
    }
  }
  int v32 = 1;
  uint64_t result = (unsigned int *)(v3 + 57);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v76, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
  if (v32 != 1) {
    uint64_t result = (unsigned int *)WTF::Lock::unlockSlow(v76);
  }
  uint64_t v34 = *(void *)(v3 + 48);
  if (v34)
  {
    uint64_t v35 = *(unsigned int *)(v34 - 4);
    unint64_t v36 = (void *)(v34 + 16 * v35);
    if (*(_DWORD *)(v34 - 12))
    {
      unint64_t v37 = *(void **)(v3 + 48);
      if (v35)
      {
        uint64_t v38 = 16 * v35;
        unint64_t v37 = *(void **)(v3 + 48);
        while ((unint64_t)(*v37 + 1) <= 1)
        {
          v37 += 2;
          v38 -= 16;
          if (!v38)
          {
            unint64_t v37 = v36;
            goto LABEL_52;
          }
        }
      }
      goto LABEL_52;
    }
    unint64_t v37 = (void *)(v34 + 16 * v35);
  }
  else
  {
    unint64_t v37 = 0;
    uint64_t v35 = 0;
  }
  unint64_t v36 = (void *)(v34 + 16 * v35);
  if (v34)
  {
LABEL_52:
    int v39 = (void *)(v34 + 16 * *(unsigned int *)(v34 - 4));
    goto LABEL_57;
  }
  int v39 = 0;
LABEL_57:
  while (v37 != v39)
  {
    uint64_t v40 = v37[1];
    *(unsigned char *)(v40 + 121) = 1;
    uint64_t result = (unsigned int *)MEMORY[0x1997420B0](*(unsigned int *)(*(void *)(v40 + 104) + 4));
    unint64_t v41 = v37 + 2;
    unint64_t v37 = v36;
    if (v41 != v36)
    {
      unint64_t v37 = v41;
      while ((unint64_t)(*v37 + 1) <= 1)
      {
        v37 += 2;
        if (v37 == v36)
        {
          unint64_t v37 = v36;
          break;
        }
      }
    }
  }
  char v42 = 0;
  unint64_t v43 = (atomic_uchar *)(v3 + 40);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v3 + 40), (unsigned __int8 *)&v42, 1u, memory_order_acquire, memory_order_acquire);
  if (v42) {
    uint64_t result = (unsigned int *)MEMORY[0x19972E8D0](v3 + 40);
  }
  uint64_t v44 = *(void *)(v3 + 48);
  if (v44)
  {
    uint64_t v45 = *(unsigned int *)(v44 - 4);
    uint64_t v46 = (void *)(v44 + 16 * v45);
    if (*(_DWORD *)(v44 - 12))
    {
      int v47 = *(void **)(v3 + 48);
      if (v45)
      {
        uint64_t v48 = 16 * v45;
        int v47 = *(void **)(v3 + 48);
        while ((unint64_t)(*v47 + 1) <= 1)
        {
          v47 += 2;
          v48 -= 16;
          if (!v48)
          {
            int v47 = v46;
            goto LABEL_73;
          }
        }
      }
      goto LABEL_73;
    }
    int v47 = (void *)(v44 + 16 * v45);
  }
  else
  {
    int v47 = 0;
    uint64_t v45 = 0;
  }
  uint64_t v46 = (void *)(v44 + 16 * v45);
  if (v44)
  {
LABEL_73:
    unint64_t v49 = (void *)(v44 + 16 * *(unsigned int *)(v44 - 4));
    goto LABEL_78;
  }
  unint64_t v49 = 0;
LABEL_78:
  while (v47 != v49)
  {
    uint64_t v50 = v47[1];
    uint64_t v51 = *(os_unfair_lock_s **)(a1 + 16);
    uint64_t v52 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v52 = &unk_1EE9EFF08;
    int v77 = v52;
    WebKit::createRemoteEncoder(v50, v51, v50 + 24, (uint64_t *)&v77);
    if (v77) {
      (*(void (**)(void *))(*v77 + 8))(v77);
    }
    uint64_t v53 = v47[1];
    if (*(unsigned char *)(v53 + 60))
    {
      uint64_t v54 = *(void *)(a1 + 16);
      int v55 = *(_DWORD *)(v53 + 40);
      int v56 = *(_DWORD *)(v53 + 56);
      int v77 = (void *)v47[1];
      int v78 = v55;
      uint64_t v79 = v53 + 44;
      uint64_t v80 = v53 + 48;
      uint64_t v81 = v53 + 52;
      int v82 = v56;
      IPC::Connection::send<Messages::LibWebRTCCodecsProxy::InitializeEncoder>(v54, (uint64_t)&v77);
      uint64_t v53 = v47[1];
    }
    int v57 = *(atomic_uchar *volatile **)(a1 + 16);
    if (v57)
    {
      char v58 = 0;
      atomic_uchar *volatile v59 = *v57;
      atomic_compare_exchange_strong_explicit(*v57, (unsigned __int8 *)&v58, 1u, memory_order_acquire, memory_order_acquire);
      if (v58) {
        MEMORY[0x19972E8D0](v59);
      }
      ++*((void *)v59 + 1);
      int v60 = 1;
      atomic_compare_exchange_strong_explicit(v59, (unsigned __int8 *)&v60, 0, memory_order_release, memory_order_relaxed);
      if (v60 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v59);
      }
    }
    long long v83 = v57;
    WebKit::LibWebRTCCodecs::setEncoderConnection(v53, (uint64_t *)&v83);
    int v61 = v83;
    long long v83 = 0;
    if (!v61) {
      goto LABEL_97;
    }
    char v62 = 0;
    atomic_uchar *volatile v63 = *v61;
    atomic_compare_exchange_strong_explicit(*v61, (unsigned __int8 *)&v62, 1u, memory_order_acquire, memory_order_acquire);
    if (v62) {
      MEMORY[0x19972E8D0](v63);
    }
    uint64_t v64 = *((void *)v63 + 1);
    uint64_t v65 = v64 - 1;
    *((void *)v63 + 1) = v64 - 1;
    if (v64 == 1)
    {
      uint64_t v74 = *((void *)v63 + 2);
      uint64_t v67 = *((void *)v63 + 3);
      *((void *)v63 + 3) = 0;
      BOOL v66 = v74 == 0;
    }
    else
    {
      BOOL v66 = 0;
      uint64_t v67 = 0;
    }
    int v68 = 1;
    atomic_compare_exchange_strong_explicit(v63, (unsigned __int8 *)&v68, 0, memory_order_release, memory_order_relaxed);
    if (v68 == 1)
    {
      if (!v65) {
        goto LABEL_95;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v63);
      if (!v65)
      {
LABEL_95:
        uint64_t v69 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v69 = &unk_1EE9B37E8;
        *(void *)(v69 + 8) = v63;
        *(void *)(v69 + ++*(_DWORD *)(this + 16) = v67;
        *(unsigned char *)(v69 + 24) = v66;
        int v77 = (void *)v69;
        WTF::ensureOnMainRunLoop();
        uint64_t v70 = (uint64_t)v77;
        int v77 = 0;
        if (v70) {
          (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
        }
      }
    }
LABEL_97:
    int v71 = (IPC::Semaphore *)WTF::fastMalloc((WTF *)8);
    IPC::Semaphore::Semaphore(v71);
    uint64_t v72 = v47[1];
    std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)(v72 + 104), v71);
    uint64_t result = *(unsigned int **)(v72 + 112);
    *(void *)(v72 + 112) = 0;
    if (result) {
      uint64_t result = WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
    }
    *(unsigned char *)(v72 + 122) = 0;
    *(_WORD *)(v72 + 120) = 0;
    uint64_t v73 = v47 + 2;
    int v47 = v46;
    if (v73 != v46)
    {
      int v47 = v73;
      while ((unint64_t)(*v47 + 1) <= 1)
      {
        v47 += 2;
        if (v47 == v46)
        {
          int v47 = v46;
          break;
        }
      }
    }
  }
  int v75 = 1;
  atomic_compare_exchange_strong_explicit(v43, (unsigned __int8 *)&v75, 0, memory_order_release, memory_order_relaxed);
  if (v75 != 1) {
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v43);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<void WTF::NativePromise<void,WTF::String,0u>::chainTo<void,WTF::String,16u>(WTF::NativePromiseProducer<void,WTF::String,16u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1},void,std::experimental::fundamentals_v3::expected<void,WTF::String> &&>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9EFF30;
  WTF::NativePromiseProducer<void,WTF::String,16u>::~NativePromiseProducer(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::NativePromise<void,WTF::String,0u>::chainTo<void,WTF::String,16u>(WTF::NativePromiseProducer<void,WTF::String,16u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1},void,std::experimental::fundamentals_v3::expected<void,WTF::String> &&>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  *a1 = (uint64_t)&unk_1EE9EFF30;
  WTF::NativePromiseProducer<void,WTF::String,16u>::~NativePromiseProducer(a1 + 1, a2);

  return WTF::fastFree((WTF *)a1, v3);
}

WTF::Lock *WTF::Detail::CallableWrapper<void WTF::NativePromise<void,WTF::String,0u>::chainTo<void,WTF::String,16u>(WTF::NativePromiseProducer<void,WTF::String,16u> &&,WTF::Logger::LogSiteIdentifier const&)::{lambda(void&&)#1},void,std::experimental::fundamentals_v3::expected<void,WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  char v2 = (uint64_t *)(a1 + 8);
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = "operator()";
    uint64_t v10 = 0;
    return WTF::NativePromiseProducer<void,WTF::String,16u>::reject<WTF::String,std::enable_if<true,void>>((uint64_t *)(a1 + 8), a2, (WTF::Logger::LogSiteIdentifier *)&v7);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = "operator()";
    uint64_t v10 = 0;
    uint64_t isSettled = *v2;
    if (*v2)
    {
      uint64_t isSettled = WTF::NativePromise<void,WTF::String,0u>::isSettled(isSettled);
      uint64_t v5 = *v2;
      if (!isSettled) {
        return WTF::NativePromise<void,WTF::String,0u>::resolve<std::enable_if<true,void>>(v5, (WTF::Logger::LogSiteIdentifier *)&v7);
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    uint64_t result = (WTF::Lock *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
    if (*(unsigned char *)result) {
      BOOL v6 = *((unsigned __int8 *)result + 16) >= 4u;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6) {
      return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,WTF::String,0u>>((uint64_t)result, (WTF::Logger::LogSiteIdentifier *)&v7, v5);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<void,WTF::String,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9EFF58;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9EFF88;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9EFF58;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(void *)a1 = &unk_1EE9EFF88;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<void,WTF::String,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::NativePromise<void,WTF::String,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v63[1] = *MEMORY[0x1E4F143B8];
  int v6 = *(unsigned __int8 *)(a3 + 8);
  uint64_t v42 = WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*(unsigned char *)v42) {
    BOOL v7 = *(unsigned __int8 *)(v42 + 16) >= 4u;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (v6) {
      uint64_t v8 = "Rejecting";
    }
    else {
      uint64_t v8 = "Resolving";
    }
    unint64_t v41 = (char *)v8;
    WTF::String::String((WTF::String *)&v51, v8);
    WTF::String::String((WTF::String *)&v50, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v49, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v48, "[");
    WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v47, a2);
    WTF::String::String((WTF::String *)&v46, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v44, "]");
    uint64_t result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, (uint64_t *)&v45, (uint64_t *)&v44, &v52);
    if (!v52)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v11 = v44;
    uint64_t v44 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    char v12 = v45;
    uint64_t v45 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v10);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    char v13 = v46;
    uint64_t v46 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v10);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v14 = v47;
    int v47 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v10);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    int v15 = v48;
    uint64_t v48 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v10);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t v16 = v49;
    unint64_t v49 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v10);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    char v17 = v50;
    uint64_t v50 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v10);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    atomic_uchar *volatile v18 = v51;
    uint64_t v51 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v10);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    int v19 = *(NSObject **)(v42 + 32);
    uint64_t v20 = (WTF *)os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      WTF::String::utf8();
      atomic_uchar *volatile v22 = v43[0] ? (char *)v43[0] + 16 : 0;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v22;
      _os_log_impl(&dword_1985F2000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      uint64_t v20 = v43[0];
      v43[0] = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1) {
          uint64_t v20 = (WTF *)WTF::fastFree(v20, v21);
        }
        else {
          --*(_DWORD *)v20;
        }
      }
    }
    if (*(unsigned char *)v42 && *(unsigned __int8 *)(v42 + 16) >= 4u)
    {
      uint64_t v23 = (atomic_uchar *)MEMORY[0x1E4F30998];
      while (1)
      {
        int v24 = *v23;
        if (v24) {
          break;
        }
        int v25 = *v23;
        atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v25, v24 | 1, memory_order_acquire, memory_order_acquire);
        if (v25 == v24)
        {
          uint64_t v26 = WTF::Logger::observers(v20);
          uint64_t v27 = *(unsigned int *)(v26 + 12);
          if (v27)
          {
            uint64_t v28 = *(uint64_t **)v26;
            uint64_t v40 = *(void *)v26 + 8 * v27;
            do
            {
              uint64_t v29 = *v28;
              *(_DWORD *)long long buf = 0;
              WTF::String::String((WTF::String *)&buf[8], v41);
              LODWORD(v54) = 0;
              WTF::String::String((WTF::String *)&v55, " then() call made from ");
              int v56 = 0;
              WTF::Logger::LogSiteIdentifier::toString(&v57, (WTF::Logger::LogSiteIdentifier *)(a1 + 24));
              int v58 = 0;
              WTF::String::String((WTF::String *)v59, "[");
              uint64_t v59[2] = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>>::toString(&v60, a2);
              int v61 = 0;
              WTF::String::String((WTF::String *)v62, " callback:");
              v62[2] = 0;
              WTF::LogArgument<void const*>::toString();
              v62[6] = 0;
              WTF::String::String((WTF::String *)v63, "]");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v43, (uint64_t)buf, 8uLL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(void *)v29 + 16))(v29, v42, 4, v43);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v30);
              for (uint64_t i = 120; i != -8; i -= 16)
              {
                int v32 = *(WTF::StringImpl **)&buf[i];
                *(void *)&buf[i] = 0;
                if (v32)
                {
                  if (*(_DWORD *)v32 == 2) {
                    WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v21);
                  }
                  else {
                    *(_DWORD *)v32 -= 2;
                  }
                }
              }
              ++v28;
            }
            while (v28 != (uint64_t *)v40);
          }
          int v33 = 1;
          atomic_compare_exchange_strong_explicit(v23, (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
          if (v33 != 1) {
            WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
          }
          break;
        }
      }
    }
    uint64_t v34 = v52;
    uint64_t v52 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2) {
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v34 -= 2;
      }
    }
  }
  char v35 = 0;
  int v36 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v35, 1u, memory_order_acquire, memory_order_acquire);
  if (v35) {
    MEMORY[0x19972E8D0](a1 + 57);
  }
  unint64_t v37 = *(uint64_t **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 57), (unsigned __int8 *)&v36, 0, memory_order_release, memory_order_relaxed);
  if (v36 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), a3);
  if (v37)
  {
    *(_OWORD *)long long buf = 0uLL;
    uint64_t v54 = "<chained completion promise>";
    uint64_t v55 = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v37, (WTF::NativePromiseBase *)buf);
  }
  uint64_t result = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (v37)
  {
    uint64_t v38 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v37);
    return WTF::fastFree((WTF *)v38, v39);
  }
  return result;
}

uint64_t WTF::NativePromise<void,WTF::String,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(unsigned char *)(result + 56) = 1;
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorderManager::CreateRecorder,WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0>(WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0)#1},void,WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9EFFB8;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    WTF::RefCounted<WebCore::MediaStreamTrackPrivate>::deref((_DWORD *)(v4 + 8));
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    WTF::RefCounted<WebCore::MediaStreamTrackPrivate>::deref((_DWORD *)(v5 + 8));
  }
  int v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorderManager::CreateRecorder,WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0>(WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0)#1},void,WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9EFFB8;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    WTF::RefCounted<WebCore::MediaStreamTrackPrivate>::deref((_DWORD *)(v4 + 8));
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    WTF::RefCounted<WebCore::MediaStreamTrackPrivate>::deref((_DWORD *)(v5 + 8));
  }
  int v6 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorderManager::CreateRecorder,WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0>(WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0)#1},void,WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::optional<WebCore::ExceptionData>>(a2, (uint64_t)v38);
    if (!v41)
    {
      v31[0] = 0;
      char v37 = 0;
      goto LABEL_28;
    }
    int v6 = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v42);
    if (!v43)
    {
      int v16 = 0;
      v31[0] = 0;
      char v37 = 0;
LABEL_31:
      if (!v41 || !v40 || (v23 = v39, int v39 = 0, !v23))
      {
LABEL_36:
        if (v16)
        {
LABEL_37:
          WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(v4, v31, &v34, v3, v2);
          return (WTF::StringImpl *)std::__optional_destruct_base<std::tuple<std::optional<WebCore::ExceptionData>,WTF::String,unsigned int,unsigned int>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v31, v24);
        }
        goto LABEL_28;
      }
      if (*(_DWORD *)v23 != 2)
      {
        *(_DWORD *)v23 -= 2;
        goto LABEL_36;
      }
      WTF::StringImpl::destroy(v23, v7);
      if (v16) {
        goto LABEL_37;
      }
LABEL_28:
      uint64_t v20 = (WTF::StringImpl *)*a2;
      uint64_t v21 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v22 = a2[3];
      if (v22)
      {
        if (v21) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v22 + 16))(v22, v20);
        }
      }
      std::__optional_destruct_base<std::tuple<std::optional<WebCore::ExceptionData>,WTF::String,unsigned int,unsigned int>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v31, v20);
      return IPC::Connection::cancelReply<Messages::RemoteMediaRecorderManager::CreateRecorder,WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0>(v4);
    }
    unint64_t v8 = a2[1];
    BOOL v7 = (WTF::StringImpl *)*a2;
    unint64_t v9 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
    if (v8 >= v9 && v8 - v9 > 3)
    {
      uint64_t v11 = (unsigned int *)((char *)v7 + v9);
      a2[2] = (uint64_t)(v11 + 1);
      if (!v7)
      {
        uint64_t v25 = v8;
        uint64_t v26 = 0;
        goto LABEL_44;
      }
      unint64_t v12 = (((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (void)v7;
      if (v8 < v12 || v8 - v12 <= 3)
      {
        *a2 = 0;
        a2[1] = 0;
        uint64_t v28 = a2[3];
        if (v28)
        {
          if (v8)
          {
            (*(void (**)(uint64_t))(*(void *)v28 + 16))(v28);
            BOOL v7 = (WTF::StringImpl *)*a2;
            uint64_t v29 = a2[1];
            uint64_t v30 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            if (v30)
            {
              if (v29) {
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v30 + 16))(v30, v7);
              }
            }
          }
        }
        goto LABEL_48;
      }
      uint64_t v3 = *v11;
      uint64_t v2 = *(unsigned int *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      a2[2] = (((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      if (v41)
      {
        v31[0] = 0;
        char v33 = 0;
        if (v40)
        {
          v31[0] = v38[0];
          uint64_t v14 = v39;
          int v39 = 0;
          int v32 = v14;
          char v33 = 1;
        }
        uint64_t v15 = (uint64_t)v42;
        uint64_t v42 = 0;
        uint64_t v34 = v15;
        int v35 = v3;
        int v36 = v2;
        int v16 = 1;
        goto LABEL_20;
      }
      __break(1u);
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      *a2 = 0;
      a2[1] = 0;
      int v6 = (IPC::Decoder *)a2[3];
      if (!v6) {
        goto LABEL_44;
      }
    }
    if (v8)
    {
      (*(void (**)(IPC::Decoder *))(*(void *)v6 + 16))(v6);
      uint64_t v26 = *a2;
      uint64_t v25 = a2[1];
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = 0;
    }
LABEL_44:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v27 = a2[3];
    if (v27 && v25) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v26, v25);
    }
LABEL_48:
    int v16 = 0;
    v31[0] = 0;
LABEL_20:
    char v37 = v16;
    if (v43)
    {
      char v17 = v42;
      uint64_t v42 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2) {
          WTF::StringImpl::destroy(v17, v7);
        }
        else {
          *(_DWORD *)v17 -= 2;
        }
      }
    }
    goto LABEL_31;
  }
  atomic_uchar *volatile v18 = (void *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::RemoteMediaRecorderManager::CreateRecorder,WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0>(v18);
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::RemoteMediaRecorderManager::CreateRecorder,WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0>(void *a1)
{
  v4[0] = 0;
  char v6 = 0;
  uint64_t v3 = 0;
  WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(a1, v4, (uint64_t *)&v3, 0, 0);
  uint64_t result = v3;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  if (v6)
  {
    uint64_t result = v5;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
      {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
      }
      else
      {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::optional<WebCore::ExceptionData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ExceptionData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t *)a1[3];
    if (result && v5 != 0)
    {
      BOOL v7 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v7();
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebCore::ExceptionData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      uint64_t v15 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t result = v15;
        uint64_t v11 = *v15;
        unint64_t v10 = v15[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_12;
  }
  char v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v10 = v3;
    uint64_t v11 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v13 = result[3];
    if (v13)
    {
      uint64_t v14 = result;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        uint64_t result = v14;
        uint64_t v4 = *v14;
        unint64_t v3 = v14[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      uint64_t result = (uint64_t *)IPC::Decoder::decode<WebCore::ExceptionData>(result, (uint64_t)v16);
      char v8 = v18;
      if (v18)
      {
        char v8 = v16[0];
        *(void *)(a2 + 8) = v17;
        char v9 = 1;
        *(unsigned char *)(a2 + ++*(_DWORD *)(this + 16) = 1;
      }
      else
      {
        char v9 = 0;
      }
      *(unsigned char *)a2 = v8;
      *(unsigned char *)(a2 + 24) = v9;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + ++*(_DWORD *)(this + 16) = 0;
      *(unsigned char *)(a2 + 24) = 1;
    }
    return result;
  }
LABEL_13:
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t result = (uint64_t *)result[3];
  if (result && v3) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

uint64_t WebKit::MediaRecorderPrivate::startRecording(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&,unsigned int,unsigned int)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(void *a1, char *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (!*a1 || (uint64_t v6 = *(void *)(*a1 + 8)) == 0)
  {
    LOBYTE(v23) = 8;
    uint64_t v24 = 0;
    goto LABEL_6;
  }
  if (a2[16])
  {
    char v7 = *a2;
    uint64_t v8 = *((void *)a2 + 1);
    *((void *)a2 + 1) = 0;
    LOBYTE(v23) = v7;
    uint64_t v24 = v8;
LABEL_6:
    int v25 = 1;
    uint64_t v9 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t, uint64_t *, void, void))(*(void *)v9 + 16))(v9, &v23, 0, 0);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
    goto LABEL_7;
  }
  if (*(unsigned char *)(v6 + 233)) {
    goto LABEL_28;
  }
  uint64_t v14 = (WebCore::MediaStreamTrackPrivate *)a1[1];
  if (v14)
  {
    uint64_t v15 = WebCore::MediaStreamTrackPrivate::source(v14);
    (*(void (**)(uint64_t))(*(void *)v15 + 136))(v15);
    if (*(void *)(v6 + 24))
    {
      WebCore::RealtimeMediaSource::removeAudioSampleObserver();
      uint64_t v16 = *(void *)(v6 + 24);
      *(void *)(v6 + 24) = v15;
      if (v16)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 144))(v16);
        if (!*(void *)(v6 + 24)) {
          goto LABEL_18;
        }
      }
    }
    else
    {
      *(void *)(v6 + 24) = v15;
    }
    WebCore::RealtimeMediaSource::addAudioSampleObserver();
  }
LABEL_18:
  uint64_t v17 = (WebCore::MediaStreamTrackPrivate *)a1[2];
  if (v17)
  {
    if (*a1) {
      uint64_t v18 = *(void *)(*a1 + 8);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = WebCore::MediaStreamTrackPrivate::source(v17);
    (*(void (**)(uint64_t))(*(void *)v19 + 136))(v19);
    if (*(void *)(v18 + 32))
    {
      WebCore::RealtimeMediaSource::removeVideoFrameObserver();
      uint64_t v20 = *(void *)(v18 + 32);
      *(void *)(v18 + 32) = v19;
      if (v20)
      {
        (*(void (**)(uint64_t))(*(void *)v20 + 144))(v20);
        if (!*(void *)(v18 + 32)) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      *(void *)(v18 + 32) = v19;
    }
    WebCore::RealtimeMediaSource::addVideoFrameObserver();
  }
LABEL_28:
  uint64_t v21 = *a3;
  *a3 = 0;
  uint64_t v23 = v21;
  int v25 = 0;
  uint64_t v22 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v22 + 16))(v22, &v23, a4, a5);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 8))(v22);
LABEL_7:
  if (v25 != -1) {
    return ((uint64_t (*)(char *, uint64_t *))off_1EE9EF688[v25])(&v26, &v23);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<std::optional<WebCore::ExceptionData>,WTF::String,unsigned int,unsigned int>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    unint64_t v3 = *(WTF::StringImpl **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
    }
  }
  return a1;
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteMediaRecorder::VideoFrameAvailable>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1214;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<WebKit::SharedVideoFrame,void>::encode(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::MediaRecorderPrivate::videoFrameAvailable(WebCore::VideoFrame &,WebCore::VideoFrameTimeMetadata)::$_0,void,IPC::Semaphore &>::call(uint64_t a1, IPC::Semaphore *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1212;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode((uint64_t)v6, a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::MediaRecorderPrivate::videoFrameAvailable(WebCore::VideoFrame &,WebCore::VideoFrameTimeMetadata)::$_1,void,WebCore::SharedMemoryHandle &&>::call(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1211;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(v6, a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::FetchData,WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0>(WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0)#1},void,WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F0030;
  uint64_t v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::FetchData,WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0>(WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0)#1},void,WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F0030;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::FetchData,WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0>(WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0)#1},void,WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t **)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)v22);
    if (!v23)
    {
LABEL_19:
      uint64_t v19 = *a2;
      uint64_t v20 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v21 = a2[3];
      if (v21)
      {
        if (v20) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19);
        }
      }
      return IPC::Connection::cancelReply<Messages::RemoteMediaRecorder::FetchData,WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0>(v2);
    }
    unint64_t v5 = a2[1];
    uint64_t v6 = *a2;
    unint64_t v7 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v5 < v7 || v5 - v7 <= 7)
    {
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v17 = a2[3];
      if (v17)
      {
        if (v5)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v6, v5);
          uint64_t v16 = *a2;
          unint64_t v15 = a2[1];
        }
        else
        {
          unint64_t v15 = 0;
          uint64_t v16 = 0;
        }
      }
      goto LABEL_18;
    }
    uint64_t v9 = (double *)(v6 + v7);
    a2[2] = (uint64_t)(v9 + 1);
    if (!v6)
    {
      unint64_t v15 = v5;
      uint64_t v16 = 0;
LABEL_18:
      *a2 = 0;
      a2[1] = 0;
      uint64_t v18 = a2[3];
      if (v18 && v15) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
      }
      goto LABEL_19;
    }
    double v10 = *v9;
    v22[0] = 0;
    if (v22[1]) {
      WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul> &>(v22);
    }
    uint64_t v11 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, void *, uint64_t, double))(*(void *)v11 + 16))(v11, v22, a1 + 16, v10);
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t result = (unsigned int *)v22[0];
    v22[0] = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v12);
    }
  }
  else
  {
    uint64_t v14 = (uint64_t **)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::RemoteMediaRecorder::FetchData,WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0>(v14);
  }
  return result;
}

unsigned int *IPC::Connection::cancelReply<Messages::RemoteMediaRecorder::FetchData,WebKit::MediaRecorderPrivate::fetchData(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>> &&,WTF::String const&,double)> &&)::$_0>(uint64_t **a1)
{
  unint64_t v5 = 0;
  int v1 = *a1;
  uint64_t v2 = **a1;
  *a1 = 0;
  (*(void (**)(uint64_t *, unsigned int **, uint64_t **, double))(v2 + 16))(v1, &v5, a1 + 1, 0.0);
  (*(void (**)(uint64_t *))(*v1 + 8))(v1);
  uint64_t result = v5;
  unint64_t v5 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v3);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::StopRecording,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F0058;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::StopRecording,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F0058;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::StopRecording,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::Pause,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F0080;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::Pause,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F0080;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::Pause,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::Resume,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F00A8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::Resume,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F00A8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteMediaRecorder::Resume,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameObjectHeapProxyProcessor::clearCallbacks(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F00D0;
  uint64_t v3 = a1[2];
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::deallocateTable(v3, a2);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameObjectHeapProxyProcessor::clearCallbacks(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F00D0;
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameObjectHeapProxyProcessor::clearCallbacks(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1)
  {
    uint64_t v4 = 0;
    uint64_t v2 = 0;
LABEL_10:
    uint64_t v3 = v1 + 16 * v2;
    goto LABEL_11;
  }
  uint64_t v2 = *(unsigned int *)(v1 - 4);
  uint64_t v3 = v1 + 16 * v2;
  if (!*(_DWORD *)(v1 - 12))
  {
    uint64_t v4 = v1 + 16 * v2;
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v5 = 16 * v2;
    uint64_t v4 = *(void *)(a1 + 16);
    while ((unint64_t)(*(void *)v4 + 1) <= 1)
    {
      v4 += 16;
      v5 -= 16;
      if (!v5)
      {
        uint64_t v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1) {
    uint64_t v6 = v1 + 16 * *(unsigned int *)(v1 - 4);
  }
  else {
    uint64_t v6 = 0;
  }
  while (v4 != v6)
  {
    CFTypeRef cf = 0;
    (*(void (**)(void, CFTypeRef *))(**(void **)(v4 + 8) + 16))(*(void *)(v4 + 8), &cf);
    CFTypeRef v7 = cf;
    CFTypeRef cf = 0;
    if (v7) {
      CFRelease(v7);
    }
    uint64_t v8 = v4 + 16;
    uint64_t v4 = v3;
    if (v8 != v3)
    {
      uint64_t v4 = v8;
      while ((unint64_t)(*(void *)v4 + 1) <= 1)
      {
        v4 += 16;
        if (v4 == v3)
        {
          uint64_t v4 = v3;
          break;
        }
      }
    }
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 16 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v5;
    while (1)
    {
      uint64_t v13 = (uint64_t *)(v4 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          char v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = v26[1];
          v26[1] = 0;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
          *char v26 = *v13;
          uint64_t v28 = v4 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v16 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (!v16) {
            goto LABEL_21;
          }
LABEL_20:
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          goto LABEL_21;
        }
        uint64_t v15 = v4 + 16 * v11;
        uint64_t v16 = *(void *)(v15 + 8);
        *(void *)(v15 + 8) = 0;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if (++v11 == v12) {
        goto LABEL_24;
      }
    }
  }
  if (v4)
  {
LABEL_24:
    WTF::fastFree((WTF *)(v4 - 16), v8);
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(WTF::RetainPtr<__CVBuffer *> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(WTF::RetainPtr<__CVBuffer *> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(WTF::RetainPtr<__CVBuffer *> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1, v3);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getNativeImage(WebCore::VideoFrame const&)::$_0,void,IPC::Semaphore &>::call(uint64_t a1, IPC::Semaphore *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1420;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode((uint64_t)v4, a2);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getNativeImage(WebCore::VideoFrame const&)::$_1,void,WebCore::SharedMemoryHandle &&>::call(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1419;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(v4, a2);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::SampleBufferDisplayLayer::SampleBufferDisplayLayer(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_1994F5F10;
  *(void *)(v6 + 24) = a1;
  *(void *)a1 = &unk_1EE9F03E8;
  *(void *)(a1 + 8) = v6;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  uint64_t v7 = *(atomic_uint **)(a3 + 8);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = v7;
  *(void *)(a1 + 24) = &unk_1EE9B71B0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = &unk_1EE9ED2E0;
  uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)a1 = &unk_1EE9F0148;
  *(void *)(a1 + 24) = &unk_1EE9F0210;
  *(void *)(a1 + 40) = &unk_1EE9F0248;
  *(void *)(a1 + 48) = IdentifierInternal;
  {
    unint64_t v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v21);
  }
  uint64_t v9 = WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  uint64_t v10 = *(atomic_uchar **)(v9 + 24);
  if (v10) {
    uint64_t v10 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v10);
  }
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v9;
  uint64_t v11 = *a2;
  if (*a2) {
    goto LABEL_11;
  }
  uint64_t v11 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v11 = 1;
  *(void *)(v11 + 8) = a2;
  uint64_t v13 = (unsigned int *)*a2;
  *a2 = v11;
  if (!v13) {
    goto LABEL_11;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, v12);
  }
  uint64_t v11 = *a2;
  if (*a2) {
LABEL_11:
  }
    atomic_fetch_add((atomic_uint *volatile)v11, 1u);
  *(void *)(a1 + 72) = v11;
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(*(atomic_uchar **)(a1 + 56), *(void *)(a1 + 64), v22);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)(a1 + 80), *(atomic_uchar *volatile **)(v22[0] + 32));
  uint64_t v15 = v22[0];
  v22[0] = 0;
  if (v15) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v15 + 24), v14);
  }
  *(void *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 0;
  WebKit::SharedVideoFrameWriter::SharedVideoFrameWriter((WebKit::SharedVideoFrameWriter *)(a1 + 104));
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 132) = 0;
  uint64_t v23 = *(void *)(a1 + 48);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::SampleBufferDisplayLayer,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::SampleBufferDisplayLayer,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::SampleBufferDisplayLayer&>(a2 + 1, &v23, a1, (uint64_t)v22);
  uint64_t v16 = *(atomic_uchar **)(a1 + 56);
  if (v16)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(v16, *(void *)(a1 + 64), v22);
    uint64_t v17 = v22[0];
  }
  else
  {
    uint64_t v17 = 0;
    v22[0] = 0;
  }
  WTF::ThreadSafeWeakHashSet<WebKit::GPUProcessConnection::Client>::add<WebKit::GPUProcessConnection::Client,(void *)0>(v17 + 184, a1 + 40);
  uint64_t v19 = v22[0];
  v22[0] = 0;
  if (v19) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(atomic_uchar **)(v19 + 24), v18);
  }
  return a1;
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::initialize(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v9 = *(os_unfair_lock_s **)(a1 + 80);
  uint64_t v29 = *(void *)(a1 + 48);
  uint64_t v30 = a3;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 && (uint64_t v11 = *(void *)(v10 + 8)) != 0) {
    char v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11);
  }
  else {
    char v12 = 0;
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 32), a1 + 24);
  uint64_t v13 = *(atomic_uint **)(a1 + 32);
  if (v13) {
    atomic_fetch_add(v13, 1u);
  }
  uint64_t v14 = *a5;
  *a5 = 0;
  uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v15 = &unk_1EE9F05A0;
  v15[1] = a1;
  uint64_t v15[2] = v13;
  v15[3] = v14;
  uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v17 = 1348;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  int v32 = v17;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v17, &v29);
  int v18 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1);
  if (!v19) {
    goto LABEL_17;
  }
  unsigned char *v18 = a2;
  IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v17, (int *)&v30);
  unint64_t v20 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1);
  if (!v21)
  {
    __break(0xC471u);
    JUMPOUT(0x199140714);
  }
  *unint64_t v20 = a4;
  unsigned int v22 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1);
  if (!v23)
  {
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x1991406F4);
  }
  *unsigned int v22 = v12;
  v31[0] = (uint64_t)v15;
  v31[1] = v16;
  IPC::Connection::sendMessageWithAsyncReply(v9, &v32, v31, 0, 0);
  uint64_t v25 = v31[0];
  v31[0] = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t result = v32;
  int v32 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v24);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  return result;
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::setLogIdentifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 48);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 1356;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::SampleBufferDisplayLayer::~SampleBufferDisplayLayer(WebKit::SampleBufferDisplayLayer *this)
{
  int v2 = (atomic_uchar *volatile **)((char *)this + 80);
  uint64_t v3 = *((void *)this + 10);
  uint64_t v38 = *((void *)this + 6);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1349;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  int v39 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, &v38);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v39, 0, 0);
  uint64_t v6 = v39;
  int v39 = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v20, v21);
  }
  uint64_t v7 = *((void *)this + 9);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8)
    {
      uint64_t v11 = *(void *)(v8 + 8);
      uint64_t v9 = (uint64_t *)(v8 + 8);
      uint64_t v10 = v11;
      if (v11)
      {
        uint64_t v12 = *((void *)this + 6);
        unsigned int v13 = *(_DWORD *)(v10 - 8);
        unint64_t v14 = (v12 + ~(v12 << 32)) ^ ((unint64_t)(v12 + ~(v12 << 32)) >> 22);
        unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
        unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
        uint64_t v17 = v13 & ((v16 >> 31) ^ v16);
        uint64_t v18 = *(void *)(v10 + 16 * v17);
        if (v18 != v12)
        {
          int v19 = 1;
          while (v18)
          {
            uint64_t v17 = (v17 + v19) & v13;
            uint64_t v18 = *(void *)(v10 + 16 * v17);
            ++v19;
            if (v18 == v12) {
              goto LABEL_12;
            }
          }
          uint64_t v17 = *(unsigned int *)(v10 - 4);
        }
LABEL_12:
        if (v17 != *(_DWORD *)(v10 - 4))
        {
          unsigned int v22 = (void *)(v10 + 16 * v17);
          uint64_t v23 = (unsigned int *)v22[1];
          *unsigned int v22 = -1;
          v22[1] = 0;
          if (v23 && atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v23);
            char v37 = v9;
            WTF::fastFree((WTF *)v23, v5);
            uint64_t v9 = v37;
          }
          ++*(_DWORD *)(*v9 - 16);
          uint64_t v24 = *v9;
          if (*v9) {
            int v25 = *(_DWORD *)(v24 - 12) - 1;
          }
          else {
            int v25 = -1;
          }
          *(_DWORD *)(v24 - 12) = v25;
          uint64_t v26 = *v9;
          if (*v9)
          {
            unsigned int v27 = 6 * *(_DWORD *)(v26 - 12);
            unsigned int v28 = *(_DWORD *)(v26 - 4);
            if (v27 < v28 && v28 >= 9) {
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v9, v28 >> 1, 0);
            }
          }
        }
      }
    }
  }
  uint64_t v30 = (unsigned int *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v30) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v30);
  }
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)this + 13, 0);
  uint64_t v31 = (const void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v31) {
    CFRelease(v31);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v2);
  char v33 = (unsigned int *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v33 && atomic_fetch_add((atomic_uint *volatile)v33, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v33);
    WTF::fastFree((WTF *)v33, v32);
  }
  uint64_t v34 = (atomic_uchar *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v34) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v34, v32);
  }
  *((void *)this + 3) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 4, v32);
  *(void *)this = &unk_1EE9F03E8;
  int v36 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v36)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v36, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v36);
      WTF::fastFree((WTF *)v36, v35);
    }
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::SampleBufferDisplayLayer::~SampleBufferDisplayLayer(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::SampleBufferDisplayLayer::~SampleBufferDisplayLayer(WebKit::SampleBufferDisplayLayer *this)
{
}

{
  WebKit::SampleBufferDisplayLayer::~SampleBufferDisplayLayer((WebKit::SampleBufferDisplayLayer *)((char *)this - 40));
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::SampleBufferDisplayLayer::~SampleBufferDisplayLayer((WebKit::SampleBufferDisplayLayer *)((char *)this - 24));

  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::SampleBufferDisplayLayer::~SampleBufferDisplayLayer((WebKit::SampleBufferDisplayLayer *)((char *)this - 40));

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::SampleBufferDisplayLayer::didFail(WebKit::SampleBufferDisplayLayer *this)
{
  return *((unsigned __int8 *)this + 96);
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::updateDisplayMode(WebKit::SampleBufferDisplayLayer *this, char a2, char a3)
{
  uint64_t v5 = *((void *)this + 10);
  uint64_t v6 = *((void *)this + 6);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1360;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unint64_t v16 = v7;
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (!v9 || (*uint64_t v8 = a2, v10 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1), !v11))
  {
    __break(0xC471u);
    JUMPOUT(0x199140C44);
  }
  unsigned char *v10 = a3;
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v16, 0, 0);
  uint64_t result = v16;
  unint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::updateBoundsAndPosition(uint64_t a1, unint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  v17.origin.x = a3;
  v17.origin.y = a4;
  v17.size.width = a5;
  v17.size.height = a6;
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v16 = *(void *)(a1 + 48);
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v15, &v17);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 56;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v18 = v10;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, &v16);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v10, v15);
  IPC::ArgumentCoder<std::optional<WTF::MachSendRight>,void>::encode<IPC::Encoder,std::optional<WTF::MachSendRight>>(v10, a2);
  IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v18, 0, 0);
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::flush(WebKit::SampleBufferDisplayLayer *this)
{
  uint64_t v1 = *((void *)this + 10);
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1352;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::flushAndRemoveImage(WebKit::SampleBufferDisplayLayer *this)
{
  uint64_t v1 = *((void *)this + 10);
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1353;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::play(WebKit::SampleBufferDisplayLayer *this)
{
  *((unsigned char *)this + 97) = 0;
  uint64_t v1 = *((void *)this + 10);
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1355;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::pause(WebKit::SampleBufferDisplayLayer *this)
{
  *((unsigned char *)this + 97) = 1;
  uint64_t v1 = *((void *)this + 10);
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1354;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::enqueueBlackFrameFrom(WebKit::SampleBufferDisplayLayer *this, const WebCore::VideoFrame *a2)
{
  float v4 = (*(float (**)(const WebCore::VideoFrame *))(*(void *)a2 + 16))(a2);
  long long v9 = *((_OWORD *)a2 + 1);
  char v10 = 0;
  __int16 v11 = *((_WORD *)a2 + 17);
  unint64_t v12 = (int)v4 | ((unint64_t)(int)v5 << 32);
  int v13 = 3;
  uint64_t v6 = *((void *)this + 10);
  uint64_t v8 = &v9;
  uint64_t result = IPC::Connection::send<Messages::RemoteSampleBufferDisplayLayer::EnqueueVideoFrame>(v6, (uint64_t *)&v8, *((void *)this + 6));
  if (v13 != -1) {
    return (IPC::Encoder *)((uint64_t (*)(long long **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSM_EEEDcOSN_DpOT0____fmatrix_1[v13])(&v8, &v12);
  }
  return result;
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::enqueueVideoFrame(IPC::Encoder *this, WebCore::VideoFrame *a2)
{
  if (!*((unsigned char *)this + 97))
  {
    uint64_t v3 = (uint64_t)this;
    float v4 = (void *)((char *)this + 104);
    float v5 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v5 = &unk_1EE9F05C8;
    v5[1] = v3;
    long long v9 = v5;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v6 = &unk_1EE9F05F0;
    v6[1] = v3;
    uint64_t v8 = v6;
    WebKit::SharedVideoFrameWriter::write(v4, (uint64_t)a2, (uint64_t *)&v9, &v8, (uint64_t)v10);
    (*(void (**)(void *))(*v6 + 8))(v6);
    this = (IPC::Encoder *)(*(uint64_t (**)(void *))(*v5 + 8))(v5);
    if (v13)
    {
      uint64_t v7 = *(void *)(v3 + 80);
      long long v9 = v10;
      this = IPC::Connection::send<Messages::RemoteSampleBufferDisplayLayer::EnqueueVideoFrame>(v7, (uint64_t *)&v9, *(void *)(v3 + 48));
      if (v13)
      {
        if (v12 != -1) {
          return (IPC::Encoder *)((uint64_t (*)(unsigned char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSM_EEEDcOSN_DpOT0____fmatrix_1[v12])(&v9, &v11);
        }
      }
    }
  }
  return this;
}

void WebKit::SharedVideoFrameWriter::write(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  WebKit::SharedVideoFrameWriter::writeBuffer(a1, a2, a3, a4, (uint64_t)v11);
  if (v13)
  {
    long long v7 = *(_OWORD *)(a2 + 16);
    LOBYTE(v8) = *(unsigned char *)(a2 + 32);
    HIWORD(v8) = *(_WORD *)(a2 + 34);
    v9[0] = 0;
    int v10 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)v9, (uint64_t)v11);
    *(_OWORD *)a5 = v7;
    *(_DWORD *)(a5 + ++*(_DWORD *)(this + 16) = v8;
    *(unsigned char *)(a5 + 24) = 0;
    *(_DWORD *)(a5 + 40) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>(a5 + 24, (uint64_t)v9);
    *(unsigned char *)(a5 + 48) = 1;
    if (v10 != -1) {
      ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSM_EEEDcOSN_DpOT0____fmatrix_1[v10])(&v14, v9);
    }
    if (v13)
    {
      if (v12 != -1) {
        ((void (*)(long long *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS8_33SupportsObjectIdentifierNullStateE1EEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSM_EEEDcOSN_DpOT0____fmatrix_1[v12])(&v7, v11);
      }
    }
  }
  else
  {
    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 48) = 0;
  }
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::clearVideoFrames(WebKit::SampleBufferDisplayLayer *this)
{
  uint64_t v1 = *((void *)this + 10);
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1350;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  int v8 = v3;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  int v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t WebKit::SampleBufferDisplayLayer::rootLayer(WebKit::SampleBufferDisplayLayer *this)
{
  uint64_t result = *((void *)this + 11);
  if (!result)
  {
    if (*((unsigned char *)this + 132))
    {
      WebKit::LayerHostingContext::createPlatformLayerForHostingContext((WebKit::LayerHostingContext *)*((unsigned int *)this + 32), &cf);
      CFTypeRef v3 = cf;
      CFTypeRef cf = 0;
      float v4 = (const void *)*((void *)this + 11);
      *((void *)this + 11) = v3;
      if (v4)
      {
        CFRelease(v4);
        CFTypeRef v5 = cf;
        CFTypeRef cf = 0;
        if (v5) {
          CFRelease(v5);
        }
      }
      return *((void *)this + 11);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebKit::SampleBufferDisplayLayer::setDidFail(uint64_t this, char a2)
{
  *(unsigned char *)(this + 96) = a2;
  uint64_t v2 = *(void *)(this + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = this;
      (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
      if (*(unsigned char *)(v4 + 96)) {
        (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
      }
      CFTypeRef v5 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 32);
      return v5(v3);
    }
  }
  return this;
}

uint64_t WebKit::SampleBufferDisplayLayer::gpuProcessConnectionDidClose(uint64_t a1)
{
  *(unsigned char *)(a1 + 121) = 1;
  MEMORY[0x1997420B0](*(unsigned int *)(*(void *)(a1 + 104) + 4));

  return WebKit::SampleBufferDisplayLayer::setDidFail(a1, 1);
}

void WebKit::SharedVideoFrameWriter::disable(WebKit::SharedVideoFrameWriter *this)
{
  *((unsigned char *)this + 17) = 1;
  JUMPOUT(0x1997420B0);
}

uint64_t non-virtual thunk to'WebKit::SampleBufferDisplayLayer::gpuProcessConnectionDidClose(uint64_t a1)
{
  uint64_t v1 = a1 - 40;
  *(unsigned char *)(a1 + 81) = 1;
  MEMORY[0x1997420B0](*(unsigned int *)(*(void *)(a1 + 64) + 4));

  return WebKit::SampleBufferDisplayLayer::setDidFail(v1, 1);
}

IPC::Encoder *WebKit::SampleBufferDisplayLayer::setShouldMaintainAspectRatio(WebKit::SampleBufferDisplayLayer *this, char a2)
{
  uint64_t v2 = *((void *)this + 10);
  char v9 = a2;
  uint64_t v3 = *((void *)this + 6);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1359;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  int v10 = v4;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v4, &v9);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::SampleBufferDisplayLayerManager::didReceiveLayerMessage(atomic_uint **this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v8 = *((void *)a3 + 8);
  if (v8 == -1)
  {
    uint64_t result = 151;
    __break(0xC471u);
    return result;
  }
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(this + 1, &v8, (atomic_uint **)&v9);
  uint64_t result = (uint64_t)v9;
  if (v9)
  {
    uint64_t v7 = *((void *)v9 + 1);
    char v9 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) != 1)
    {
      if (!v7) {
        return result;
      }
      return WebKit::SampleBufferDisplayLayer::didReceiveMessage(v7 - 24, a2, a3);
    }
    atomic_store(1u, (unsigned int *)result);
    uint64_t result = WTF::fastFree((WTF *)result, v5);
    if (v7) {
      return WebKit::SampleBufferDisplayLayer::didReceiveMessage(v7 - 24, a2, a3);
    }
  }
  return result;
}

uint64_t *WebKit::SampleBufferDisplayLayerManager::createLayer@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x88);
  WebKit::SampleBufferDisplayLayer::SampleBufferDisplayLayer(v6, a1, a2);
  uint64_t v9 = *(void *)(v6 + 48);
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::SampleBufferDisplayLayer,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::SampleBufferDisplayLayer,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::SampleBufferDisplayLayer&>(a1 + 1, &v9, v6, (uint64_t)&v8);
  *a3 = v6;
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::SampleBufferDisplayLayer,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::SampleBufferDisplayLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::SampleBufferDisplayLayer,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::SampleBufferDisplayLayer&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = *(unsigned int *)(v8 - 4);
        }
        char v29 = 0;
        uint64_t v30 = v8 + 16 * v24;
        goto LABEL_34;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      uint64_t *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v18;
    }
  }
  *uint64_t v16 = v11;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 32), a3 + 24);
  uint64_t v21 = *(atomic_uint **)(a3 + 32);
  if (v21) {
    atomic_fetch_add(v21, 1u);
  }
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v21;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
  }
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v25 = *v6;
  if (*v6) {
    int v26 = *(_DWORD *)(v25 - 12);
  }
  else {
    int v26 = 0;
  }
  uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
  unint64_t v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_27:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
      uint64_t v16 = result;
      uint64_t v25 = *v6;
      if (*v6) {
        unint64_t v28 = *(unsigned int *)(v25 - 4);
      }
      else {
        unint64_t v28 = 0;
      }
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_27;
  }
  uint64_t v30 = v25 + 16 * v28;
  char v29 = 1;
LABEL_34:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v30;
  *(unsigned char *)(a4 + ++*(_DWORD *)(this + 16) = v29;
  return result;
}

IPC::Encoder *WebKit::createRemoteAudioMediaStreamTrackRendererInternalUnitProxy@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0xF0);
  *(void *)uint64_t v4 = &unk_1EE9F04A8;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + ++*(_DWORD *)(this + 16) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)(v4 + 24) = a1;
  *(void *)uint64_t v4 = &unk_1EE9F0288;
  *(unsigned char *)(v4 + 88) = 0;
  *(unsigned char *)(v4 + 168) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(unsigned char *)(v4 + 80) = 0;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 218) = 0u;
  {
    unint64_t v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v28);
  }
  CFTypeRef v5 = WebKit::WebProcess::audioMediaStreamTrackRendererInternalUnitManager((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v8 = *v5;
  if (*v5
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v5, 0), (uint64_t v8 = *v6) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unint64_t v10 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v9 & ((v12 >> 31) ^ v12);
  unint64_t v14 = (void *)(v8 + 16 * v13);
  uint64_t v15 = *v14;
  if (!*v14)
  {
LABEL_13:
    *unint64_t v14 = v7;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
    int v19 = *(atomic_uint **)(v4 + 8);
    if (v19) {
      atomic_fetch_add(v19, 1u);
    }
    unint64_t v20 = (unsigned int *)v14[1];
    v14[1] = v19;
    if (v20 && atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v18);
    }
    uint64_t v21 = *v6;
    if (*v6) {
      int v22 = *(_DWORD *)(v21 - 12) + 1;
    }
    else {
      int v22 = 1;
    }
    *(_DWORD *)(v21 - 12) = v22;
    uint64_t v23 = *v6;
    if (*v6) {
      int v24 = *(_DWORD *)(v23 - 12);
    }
    else {
      int v24 = 0;
    }
    uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
    unint64_t v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 > 2 * v25) {
        goto LABEL_27;
      }
    }
    else if (3 * v26 > 4 * v25)
    {
      goto LABEL_27;
    }
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v6, (uint64_t)v14);
    goto LABEL_27;
  }
  uint64_t v16 = 0;
  int v17 = 1;
  while (v15 != v7)
  {
    if (v15 == -1) {
      uint64_t v16 = v14;
    }
    unsigned int v13 = (v13 + v17) & v9;
    unint64_t v14 = (void *)(v8 + 16 * v13);
    uint64_t v15 = *v14;
    ++v17;
    if (!*v14)
    {
      if (v16)
      {
        *uint64_t v16 = 0;
        v16[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        unint64_t v14 = v16;
      }
      goto LABEL_13;
    }
  }
LABEL_27:
  uint64_t result = WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::createRemoteUnit((WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy *)v4);
  *a2 = v4;
  return result;
}

unsigned int *WebKit::AudioMediaStreamTrackRendererInternalUnitManager::reset(atomic_uint **a1, uint64_t a2)
{
  uint64_t v5 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, &v5, (atomic_uint **)&v4);
  uint64_t result = (unsigned int *)v4;
  if (v4)
  {
    if (*((void *)v4 + 1))
    {
      WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::reset(*((void *)v4 + 1), 0);
      uint64_t result = (unsigned int *)v4;
      uint64_t v4 = 0;
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v2);
    }
  }
  return result;
}

IPC::Encoder *WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::reset(uint64_t a1, char a2)
{
  WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::stopThread((unsigned int *)a1);
  *(unsigned char *)(a1 + 233) = a2;
  uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24));
  if (*(unsigned char *)(a1 + 80))
  {
    return WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::start((IPC::Encoder *)a1);
  }
  return result;
}

IPC::Encoder *WebKit::AudioMediaStreamTrackRendererInternalUnitManager::restartAllUnits(IPC::Encoder *this, void *a2)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v2 - 4);
    uint64_t v4 = (void *)(v2 + 16 * v3);
    if (*(_DWORD *)(v2 - 12))
    {
      uint64_t v5 = (void *)v2;
      if (v3)
      {
        uint64_t v6 = 16 * v3;
        uint64_t v5 = (void *)v2;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          v6 -= 16;
          if (!v6)
          {
            uint64_t v5 = v4;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    uint64_t v5 = (void *)(v2 + 16 * v3);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v3 = 0;
  }
  uint64_t v4 = (void *)(v2 + 16 * v3);
  if (v2)
  {
LABEL_8:
    uint64_t v7 = (void *)(v2 + 16 * *(unsigned int *)(v2 - 4));
    goto LABEL_13;
  }
  uint64_t v7 = 0;
LABEL_13:
  while (v5 != v7)
  {
    uint64_t v8 = v5[1];
    if (v8)
    {
      atomic_fetch_add((atomic_uint *volatile)v8, 1u);
      this = WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::reset(*(void *)(v8 + 8), 1);
      if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)v8);
        this = (IPC::Encoder *)WTF::fastFree((WTF *)v8, a2);
      }
    }
    else
    {
      this = WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::reset(0, 1);
    }
    int v9 = v5 + 2;
    uint64_t v5 = v4;
    if (v9 != v4)
    {
      uint64_t v5 = v9;
      while ((unint64_t)(*v5 + 1) <= 1)
      {
        v5 += 2;
        if (v5 == v4)
        {
          uint64_t v5 = v4;
          break;
        }
      }
    }
  }
  if (v2)
  {
    return (IPC::Encoder *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v2, a2);
  }
  return this;
}

IPC::Encoder *WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::createRemoteUnit(WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy *this)
{
  {
    unint64_t v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v12);
  }
  uint64_t v2 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                            + 32);
  uint64_t v13 = *((void *)this + 2);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
  uint64_t v3 = (atomic_uint *)*((void *)this + 1);
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v4 = &unk_1EE9F0618;
  v4[1] = v3;
  uint64_t v5 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 708;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v15 = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, &v13);
  v14[0] = (uint64_t)v4;
  v14[1] = v5;
  IPC::Connection::sendMessageWithAsyncReply(v2, &v15, v14, 0, 0);
  uint64_t v8 = v14[0];
  v14[0] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::~AudioMediaStreamTrackRendererInternalUnitManagerProxy(WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy *this)
{
  {
    uint64_t v52 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v52);
  }
  uint64_t v2 = WebKit::WebProcess::audioMediaStreamTrackRendererInternalUnitManager((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  uint64_t v4 = *v2;
  if (*v2)
  {
    uint64_t v5 = v2;
    uint64_t v6 = *((void *)this + 2);
    unsigned int v7 = *(_DWORD *)(v4 - 8);
    unint64_t v8 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
    unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    uint64_t v11 = v7 & ((v10 >> 31) ^ v10);
    uint64_t v12 = *(void *)(v4 + 16 * v11);
    if (v12 != v6)
    {
      int v13 = 1;
      while (v12)
      {
        uint64_t v11 = (v11 + v13) & v7;
        uint64_t v12 = *(void *)(v4 + 16 * v11);
        ++v13;
        if (v12 == v6) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = *(unsigned int *)(v4 - 4);
    }
LABEL_9:
    if (v11 != *(_DWORD *)(v4 - 4))
    {
      unint64_t v14 = (void *)(v4 + 16 * v11);
      uint64_t v15 = (unsigned int *)v14[1];
      *unint64_t v14 = -1;
      v14[1] = 0;
      if (v15 && atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v3);
      }
      ++*(_DWORD *)(*v5 - 16);
      uint64_t v16 = *v5;
      if (*v5) {
        int v17 = *(_DWORD *)(v16 - 12) - 1;
      }
      else {
        int v17 = -1;
      }
      *(_DWORD *)(v16 - 12) = v17;
      uint64_t v18 = *v5;
      if (*v5)
      {
        unsigned int v19 = 6 * *(_DWORD *)(v18 - 12);
        unsigned int v20 = *(_DWORD *)(v18 - 4);
        if (v19 < v20 && v20 >= 9) {
          WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v5, v20 >> 1, 0);
        }
      }
    }
  }
  {
    uint64_t v53 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v53);
  }
  uint64_t v22 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                  + 32);
  uint64_t v56 = *((void *)this + 2);
  uint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v23 = 709;
  *((void *)v23 + 1) = 0;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  uint64_t v57 = v23;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v23, &v56);
  IPC::Connection::sendMessageImpl(v22, (uint64_t *)&v57, 0, 0);
  uint64_t v25 = v57;
  uint64_t v57 = 0;
  if (v25)
  {
    IPC::Encoder::~Encoder(v25, v24);
    WTF::fastFree(v26, v27);
  }
  while (1)
  {
    uint64_t v32 = *((void *)this + 5);
    if (v32 == *((void *)this + 6)) {
      break;
    }
    uint64_t v28 = *((void *)this + 7);
    uint64_t v29 = *(void *)(v28 + 8 * v32);
    *(void *)(v28 + 8 * v32) = 0;
    uint64_t v57 = (IPC::Encoder *)v29;
    uint64_t v30 = *((void *)this + 7);
    uint64_t v31 = *(void *)(v30 + 8 * v32);
    *(void *)(v30 + 8 * v32) = 0;
    if (v31)
    {
      (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
      uint64_t v32 = *((void *)this + 5);
    }
    if (v32 == *((unsigned int *)this + 16) - 1) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = v32 + 1;
    }
    *((void *)this + 5) = v33;
    v54[0] = 0;
    char v55 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebCore::CAAudioStreamDescription>)>::operator()((uint64_t *)&v57, (uint64_t)v54);
    if (v55) {
      WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v54);
    }
    if (v57) {
      (*(void (**)(IPC::Encoder *))(*(void *)v57 + 8))(v57);
    }
  }
  uint64_t v34 = (unsigned int *)*((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v34) {
    WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(v34);
  }
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)this + 27, 0);
  int v35 = (WebCore::CARingBuffer *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v35) {
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](this + 184, v35);
  }
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((WebCore::WebAudioBufferList **)this + 22, 0);
  if (*((unsigned char *)this + 168)) {
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy *)((char *)this + 88));
  }
  char v37 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2) {
      WTF::StringImpl::destroy(v37, v36);
    }
    else {
      *(_DWORD *)v37 -= 2;
    }
  }
  unint64_t v38 = *((void *)this + 5);
  unint64_t v39 = *((void *)this + 6);
  char v40 = (WTF *)*((void *)this + 7);
  if (v38 <= v39)
  {
    if (v38 == v39) {
      goto LABEL_65;
    }
    int v47 = (uint64_t *)((char *)v40 + 8 * v38);
    uint64_t v48 = 8 * v39 - 8 * v38;
    do
    {
      uint64_t v49 = *v47;
      uint64_t *v47 = 0;
      if (v49) {
        (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
      }
      ++v47;
      v48 -= 8;
    }
    while (v48);
  }
  else
  {
    if (v39)
    {
      uint64_t v41 = 8 * v39;
      do
      {
        uint64_t v42 = *(void *)v40;
        *(void *)char v40 = 0;
        if (v42) {
          (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
        }
        char v40 = (WTF *)((char *)v40 + 8);
        v41 -= 8;
      }
      while (v41);
      char v40 = (WTF *)*((void *)this + 7);
      unint64_t v38 = *((void *)this + 5);
    }
    uint64_t v43 = *((unsigned int *)this + 16);
    if (v38 != v43)
    {
      uint64_t v44 = (uint64_t *)((char *)v40 + 8 * v38);
      uint64_t v45 = 8 * v43 - 8 * v38;
      do
      {
        uint64_t v46 = *v44;
        uint64_t *v44 = 0;
        if (v46) {
          (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
        }
        ++v44;
        v45 -= 8;
      }
      while (v45);
    }
  }
  char v40 = (WTF *)*((void *)this + 7);
LABEL_65:
  if (v40)
  {
    *((void *)this + 7) = 0;
    *((_DWORD *)this + ++*(_DWORD *)(this + 16) = 0;
    WTF::fastFree(v40, v36);
  }
  uint64_t v50 = *((void *)this + 1);
  if (v50)
  {
    *(void *)(v50 + 8) = 0;
    uint64_t v51 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v51)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v51, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v51);
        WTF::fastFree((WTF *)v51, v36);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::~AudioMediaStreamTrackRendererInternalUnitManagerProxy(this);

  WTF::fastFree(v1, v2);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebCore::CAAudioStreamDescription>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  LOBYTE(v5) = 0;
  char v11 = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    uint64_t v5 = MEMORY[0x1E4FB6B98] + 16;
    long long v7 = *(_OWORD *)(a2 + 24);
    long long v8 = *(_OWORD *)(a2 + 40);
    long long v9 = *(_OWORD *)(a2 + 56);
    int v10 = *(_DWORD *)(a2 + 72);
    long long v6 = *(_OWORD *)(a2 + 8);
    char v11 = 1;
    uint64_t v12 = MEMORY[0x1E4FB6B98] + 16;
    long long v3 = *(_OWORD *)(a2 + 24);
    long long v15 = *(_OWORD *)(a2 + 40);
    long long v16 = *(_OWORD *)(a2 + 56);
    int v17 = *(_DWORD *)(a2 + 72);
    long long v13 = *(_OWORD *)(a2 + 8);
    long long v14 = v3;
    char v18 = 1;
  }
  else
  {
    LOBYTE(v12) = 0;
    char v18 = 0;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v12);
  if (v18) {
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v12);
  }
  if (v11) {
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
}

unsigned int *WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::stopThread(unsigned int *this)
{
  if (*((void *)this + 28))
  {
    uint64_t v1 = this;
    atomic_store(1u, (unsigned __int8 *)this + 232);
    MEMORY[0x1997420B0](*(unsigned int *)(*((void *)this + 27) + 4));
    WTF::Thread::waitForCompletion(*((WTF::Thread **)v1 + 28));
    this = (unsigned int *)*((void *)v1 + 28);
    *((void *)v1 + 28) = 0;
    if (this)
    {
      return WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(this);
    }
  }
  return this;
}

IPC::Encoder *WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::start(IPC::Encoder *this)
{
  uint64_t v1 = (uint64_t)this;
  if (!*((unsigned char *)this + 168))
  {
LABEL_6:
    *(unsigned char *)(v1 + 80) = 1;
    return this;
  }
  if (*((unsigned char *)this + 233))
  {
    *((unsigned char *)this + 233) = 0;
    this = WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::createRemoteUnit(this);
    uint64_t v2 = *(void *)(v1 + 72);
    if (v2)
    {
      if (*(_DWORD *)(v2 + 4)) {
        this = WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::setAudioOutputDevice((WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy *)v1, (WTF::StringImpl **)(v1 + 72));
      }
    }
    goto LABEL_6;
  }
  WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::stopThread((unsigned int *)this);
  *(unsigned char *)(v1 + 80) = 1;
  if (!*(unsigned char *)(v1 + 168)) {
    goto LABEL_24;
  }
  WebCore::CAAudioStreamDescription::sampleRate((WebCore::CAAudioStreamDescription *)(v1 + 88));
  uint64_t v4 = (const WebCore::CAAudioStreamDescription *)(v3 + v3);
  *(void *)(v1 + 208) = v4;
  if (!*(unsigned char *)(v1 + 168)) {
    goto LABEL_24;
  }
  WebKit::ProducerSharedCARingBuffer::allocate((WebKit::ProducerSharedCARingBuffer *)(v1 + 88), v4, (uint64_t)v25);
  if (!v27)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x199142918);
  }
  uint64_t v5 = (WebCore::CARingBuffer *)v25[0];
  v25[0] = 0;
  uint64_t v23 = v5;
  WTF::MachSendRight::MachSendRight();
  *(_OWORD *)&v24[8] = v26;
  long long v6 = *(WebCore::CARingBuffer **)(v1 + 184);
  long long v7 = v23;
  uint64_t v23 = 0;
  *(void *)(v1 + 184) = v7;
  if (v6) {
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](v1 + 184, v6);
  }
  {
    uint64_t v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v22);
  }
  uint64_t v8 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 32);
  uint64_t v28 = *(void **)(v1 + 16);
  long long v9 = *(IPC::Semaphore **)(v1 + 216);
  int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v10 = 711;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v29 = v10;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, (uint64_t *)&v28);
  IPC::ArgumentCoder<WebKit::ConsumerSharedCARingBufferHandle,void>::encode(v10, (unint64_t)v24);
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode((uint64_t)v10, v9);
  IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v29, 0, 0);
  uint64_t v12 = v29;
  uint64_t v29 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v11);
    WTF::fastFree(v20, v21);
  }
  if (!*(unsigned char *)(v1 + 168))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  long long v13 = (WebCore::WebAudioBufferList *)WTF::fastMalloc((WTF *)0x48);
  WebCore::WebAudioBufferList::WebAudioBufferList();
  std::unique_ptr<WebCore::WebAudioBufferList>::reset[abi:sn180100]((WebCore::WebAudioBufferList **)(v1 + 176), v13);
  WebCore::WebAudioBufferList::setSampleCount(*(WebCore::WebAudioBufferList **)(v1 + 176));
  atomic_store(0, (unsigned __int8 *)(v1 + 232));
  long long v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  *long long v14 = &unk_1EE9F0640;
  v14[1] = v1;
  uint64_t v28 = v14;
  WTF::Thread::create();
  uint64_t v15 = (uint64_t)v29;
  uint64_t v29 = 0;
  long long v16 = *(unsigned int **)(v1 + 224);
  *(void *)(v1 + 224) = v15;
  if (v16)
  {
    WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(v16);
    int v17 = (unsigned int *)v29;
    uint64_t v29 = 0;
    if (v17) {
      WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(v17);
    }
  }
  uint64_t v18 = (uint64_t)v28;
  uint64_t v28 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v24);
  unsigned int v19 = v23;
  uint64_t v23 = 0;
  if (v19) {
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)&v23, v19);
  }
  return (IPC::Encoder *)std::__optional_destruct_base<WebKit::ProducerSharedCARingBuffer::Pair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25);
}

IPC::Encoder *WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::setAudioOutputDevice(WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy *this, WTF::StringImpl **a2)
{
  WTF::String::operator=((uint64_t *)this + 9, a2);
  {
    int v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  uint64_t v4 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 32);
  uint64_t v11 = *((void *)this + 2);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 710;
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, &v11);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::stop(WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy *this)
{
  *((unsigned char *)this + 80) = 0;
  {
    uint64_t v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::ensureGPUProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 32);
  uint64_t v9 = *((void *)this + 2);
  double v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v3 = 712;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  int v10 = v3;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v3, &v9);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::retrieveFormatDescription(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  if (*(unsigned char *)(a1 + 168)) {
    BOOL v6 = v5 == v4;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    if (v5)
    {
      if (v4 + 1 == v5)
      {
        LODWORD(v7) = *(_DWORD *)(a1 + 64);
LABEL_15:
        uint64_t v11 = v7;
        unint64_t v12 = ((unint64_t)v7 >> 2) + v7;
        if (v12 <= 0xF) {
          unint64_t v12 = 15;
        }
        if (v12 >= 0x1FFFFFFF)
        {
          __break(0xC471u);
          return;
        }
        long long v13 = *(WTF **)(a1 + 56);
        unsigned int v14 = v12 + 1;
        uint64_t v15 = WTF::fastMalloc((WTF *)(8 * (v12 + 1)));
        int v17 = (void *)v15;
        *(_DWORD *)(a1 + 64) = v14;
        *(void *)(a1 + 56) = v15;
        unint64_t v18 = *(void *)(a1 + 40);
        unint64_t v19 = *(void *)(a1 + 48);
        if (v18 <= v19)
        {
          if (v18 != v19)
          {
            uint64_t v31 = (void *)(v15 + 8 * v18);
            uint64_t v32 = (uint64_t *)((char *)v13 + 8 * v18);
            uint64_t v33 = 8 * v19 - 8 * v18;
            do
            {
              uint64_t v34 = *v32;
              uint64_t *v32 = 0;
              *uint64_t v31 = v34;
              uint64_t v35 = *v32;
              uint64_t *v32 = 0;
              if (v35) {
                (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
              }
              ++v31;
              ++v32;
              v33 -= 8;
            }
            while (v33);
          }
        }
        else
        {
          if (v19)
          {
            uint64_t v20 = 8 * v19;
            uint64_t v21 = v13;
            do
            {
              uint64_t v22 = *(void *)v21;
              *(void *)uint64_t v21 = 0;
              *int v17 = v22;
              uint64_t v23 = *(void *)v21;
              *(void *)uint64_t v21 = 0;
              if (v23) {
                (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
              }
              ++v17;
              uint64_t v21 = (WTF *)((char *)v21 + 8);
              v20 -= 8;
            }
            while (v20);
            unsigned int v14 = *(_DWORD *)(a1 + 64);
            unint64_t v18 = *(void *)(a1 + 40);
            int v17 = *(void **)(a1 + 56);
          }
          uint64_t v24 = v18 - v11 + v14;
          if (v18 != v11)
          {
            uint64_t v25 = v14;
            long long v26 = (uint64_t *)((char *)v13 + 8 * v18);
            char v27 = &v17[v25];
            uint64_t v28 = 8 * v18 - 8 * v11;
            do
            {
              uint64_t v29 = *v26;
              *long long v26 = 0;
              *(void *)((char *)v27 + v28) = v29;
              uint64_t v30 = *v26;
              *long long v26 = 0;
              if (v30) {
                (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
              }
              ++v26;
              v28 += 8;
            }
            while (v28);
          }
          *(void *)(a1 + 40) = v24;
        }
        if (v13)
        {
          if (*(WTF **)(a1 + 56) == v13)
          {
            *(void *)(a1 + 56) = 0;
            *(_DWORD *)(a1 + 64) = 0;
          }
          WTF::fastFree(v13, v16);
        }
        uint64_t v4 = *(void *)(a1 + 48);
      }
    }
    else
    {
      uint64_t v7 = *(unsigned int *)(a1 + 64);
      if (v4)
      {
        if (v4 == v7 - 1) {
          goto LABEL_15;
        }
      }
      else
      {
        if (!v7) {
          goto LABEL_15;
        }
        uint64_t v4 = 0;
      }
    }
    uint64_t v36 = *(void *)(a1 + 56);
    uint64_t v37 = *a2;
    *a2 = 0;
    *(void *)(v36 + 8 * v4) = v37;
    if (v4 == *(unsigned int *)(a1 + 64) - 1) {
      uint64_t v38 = 0;
    }
    else {
      uint64_t v38 = v4 + 1;
    }
    *(void *)(a1 + 48) = v38;
    return;
  }
  long long v8 = *(_OWORD *)(a1 + 96);
  long long v9 = *(_OWORD *)(a1 + 128);
  long long v10 = *(_OWORD *)(a1 + 144);
  long long v41 = *(_OWORD *)(a1 + 112);
  long long v42 = v9;
  long long v43 = v10;
  uint64_t v39 = MEMORY[0x1E4FB6B98] + 16;
  int v44 = *(_DWORD *)(a1 + 160);
  long long v40 = v8;
  char v45 = 1;
  WTF::CompletionHandler<void ()(std::optional<WebCore::CAAudioStreamDescription>)>::operator()(a2, (uint64_t)&v39);
  if (v45) {
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v39);
  }
}

BOOL WebKit::SharedVideoFrameWriter::prepareWriting(void *a1, WebCore::SharedVideoFrameInfo *this, uint64_t *a3, void *a4)
{
  long long v8 = (WTF::ApproximateTime *)WebCore::SharedVideoFrameInfo::isReadWriteSupported(this);
  if (v8)
  {
    if (*((unsigned char *)a1 + 16))
    {
      if (*((unsigned char *)a1 + 17)
        || (long long v9 = (semaphore_t *)*a1, WTF::ApproximateTime::now(v8), !IPC::Semaphore::waitFor(v9, v10 + 3.0)))
      {
        uint64_t v11 = qword_1EB358820;
        BOOL result = os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_WORD *)uint64_t v20 = 0;
          long long v13 = "SharedVideoFrameReader::writeBuffer wait failed";
LABEL_9:
          _os_log_error_impl(&dword_1985F2000, v11, OS_LOG_TYPE_ERROR, v13, v20, 2u);
          return 0;
        }
        return result;
      }
    }
    else
    {
      uint64_t v14 = *a3;
      *((unsigned char *)a1 + ++*(_DWORD *)(this + 16) = 1;
      (*(void (**)(uint64_t, void))(*(void *)v14 + 16))(v14, *a1);
    }
    *((unsigned char *)a1 + 18) = 1;
    uint64_t v15 = (WebCore::SharedMemory *)WebCore::SharedVideoFrameInfo::storageSize(this);
    uint64_t v16 = a1[1];
    if (!v16 || *(void *)(v16 + 8) < (unint64_t)v15)
    {
      WebCore::SharedMemory::allocate(v15);
      uint64_t v17 = *(void *)v20;
      *(void *)uint64_t v20 = 0;
      unint64_t v18 = (unsigned int *)a1[1];
      a1[1] = v17;
      if (v18)
      {
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v18);
        unint64_t v19 = *(unsigned int **)v20;
        *(void *)uint64_t v20 = 0;
        if (v19) {
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v19);
        }
        uint64_t v17 = a1[1];
      }
      if (!v17 || (WebCore::SharedMemory::createHandle(), !v21))
      {
        uint64_t v11 = qword_1EB358820;
        BOOL result = os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_WORD *)uint64_t v20 = 0;
          long long v13 = "SharedVideoFrameReader::writeBuffer allocation failed";
          goto LABEL_9;
        }
        return result;
      }
      (*(void (**)(void, uint8_t *))(*(void *)*a4 + 16))(*a4, v20);
      if (v21) {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v20);
      }
    }
    return 1;
  }
  uint64_t v11 = qword_1EB358820;
  BOOL result = os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)uint64_t v20 = 0;
    long long v13 = "SharedVideoFrameWriter::prepareWriting not supported";
    goto LABEL_9;
  }
  return result;
}

void WebKit::SharedVideoFrameWriter::writeBuffer(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2))
  {
    uint64_t v10 = *(void *)(v7 + 48);
    if (v10)
    {
      uint64_t v7 = *(void *)(v7 + 48);
      if (*(unsigned char *)(v10 + 88))
      {
LABEL_4:
        atomic_fetch_add((atomic_ullong *volatile)(v7 + 72), 1uLL);
        uint64_t v11 = *(void *)(v7 + 80);
        *(void *)a5 = *(void *)(v7 + 64);
        *(void *)(a5 + 8) = v11;
        *(_DWORD *)(a5 + ++*(_DWORD *)(this + 16) = 1;
        *(unsigned char *)(a5 + 24) = 1;
        return;
      }
    }
    else if (*(unsigned char *)(v7 + 88))
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_13;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 40))(v7))
  {
    uint64_t v7 = *(void *)(v7 + 48);
    if (v7) {
      (**(void (***)(uint64_t))v7)(v7);
    }
LABEL_13:
    WebKit::SharedVideoFrameWriter::writeBuffer((uint64_t)a1, a3, a4, a5);
    long long v13 = *(void (**)(uint64_t))(*(void *)v7 + 8);
    v13(v7);
    return;
  }
  unint64_t v12 = (WebCore::SharedVideoFrameInfo *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 56))(v7);

  WebKit::SharedVideoFrameWriter::writeBuffer(v12, a1, a3, a4, 1, a5);
}

uint64_t WebKit::SharedVideoFrameWriter::writeBuffer@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  WebCore::SharedVideoFrameInfo::fromVideoFrameBuffer();
  uint64_t result = WebKit::SharedVideoFrameWriter::prepareWriting((void *)a1, (WebCore::SharedVideoFrameInfo *)v9, a2, a3);
  if (result && (uint64_t result = WebCore::SharedVideoFrameInfo::writeVideoFrameBuffer(), result))
  {
    *(void *)a4 = 0;
    *(_DWORD *)(a4 + ++*(_DWORD *)(this + 16) = 0;
    *(unsigned char *)(a4 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 24) = 0;
    if (*(unsigned char *)(a1 + 18))
    {
      *(unsigned char *)(a1 + 18) = 0;
      return MEMORY[0x1997420B0](*(unsigned int *)(*(void *)a1 + 4));
    }
  }
  return result;
}

void WebKit::SharedVideoFrameWriter::writeBuffer(WebCore::SharedVideoFrameInfo *this@<X1>, void *a2@<X0>, uint64_t *a3@<X2>, void *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  if (this)
  {
    if (a5
      && (uint64_t v11 = (__IOSurface *)((uint64_t (*)(WebCore::SharedVideoFrameInfo *))*MEMORY[0x1E4FB6510])(this)) != 0)
    {
      MachPort = (WTF::MachSendRight *)IOSurfaceCreateMachPort(v11);
      WTF::MachSendRight::adopt(MachPort);
      WTF::MachSendRight::MachSendRight();
      *(_DWORD *)(a6 + ++*(_DWORD *)(this + 16) = 2;
      *(unsigned char *)(a6 + 24) = 1;
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v13);
    }
    else
    {
      WebCore::SharedVideoFrameInfo::fromCVPixelBuffer(v13, this, this);
      if (WebKit::SharedVideoFrameWriter::prepareWriting(a2, (WebCore::SharedVideoFrameInfo *)v13, a3, a4)
        && WebCore::SharedVideoFrameInfo::writePixelBuffer((WebCore::SharedVideoFrameInfo *)v13, this, *(unsigned __int8 **)(a2[1] + 16)))
      {
        *(void *)a6 = 0;
        *(_DWORD *)(a6 + ++*(_DWORD *)(this + 16) = 0;
        *(unsigned char *)(a6 + 24) = 1;
      }
      else
      {
        *(unsigned char *)a6 = 0;
        *(unsigned char *)(a6 + 24) = 0;
        if (*((unsigned char *)a2 + 18))
        {
          *((unsigned char *)a2 + 18) = 0;
          MEMORY[0x1997420B0](*(unsigned int *)(*a2 + 4));
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a6 = 0;
    *(unsigned char *)(a6 + 24) = 0;
  }
}

void WebKit::SharedVideoFrameWriter::writeBuffer(void *a1@<X0>, webrtc::VideoFrame *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = webrtc::videoFrameBufferProvider();
  if (v10)
  {
    WebKit::SharedVideoFrameWriter::writeBuffer(a1, v10, a3, a4, a5);
  }
  else
  {
    uint64_t v11 = (WebCore::SharedVideoFrameInfo *)webrtc::copyPixelBufferForFrame();
    if (v11)
    {
      unint64_t v12 = v11;
      WebKit::SharedVideoFrameWriter::writeBuffer(v11, a1, a3, a4, 1, a5);
      CFRelease(v12);
    }
    else
    {
      webrtc::VideoFrame::video_frame_buffer(&v13, a2);
      WebKit::SharedVideoFrameWriter::writeBuffer((uint64_t)a1, a3, a4, a5);
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
    }
  }
}

void WebKit::SharedVideoFrameReader::~SharedVideoFrameReader(WebKit::SharedVideoFrameReader *this)
{
  uint64_t v2 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    CFRelease(v2);
  }
  double v3 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v4);
  }
  if (*((unsigned char *)this + 24)) {
    IPC::Semaphore::~Semaphore((WebKit::SharedVideoFrameReader *)((char *)this + 16));
  }
  WTF::MachSendRight::~MachSendRight((WebKit::SharedVideoFrameReader *)((char *)this + 8));
  uint64_t v6 = *(void *)this;
  *(void *)this = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 16), v5);
  }
}

void WebKit::SharedVideoFrameReader::read(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  ((void (*)(CFTypeRef *__return_ptr, uint64_t, uint64_t))WebKit::SharedVideoFrameReader::readBuffer)(&cf, a1, a2 + 24);
  if (cf)
  {
    WebCore::VideoFrameCV::create();
    CFTypeRef v4 = cf;
    CFTypeRef cf = 0;
    if (v4) {
      CFRelease(v4);
    }
  }
  else
  {
    *a3 = 0;
  }
}

BOOL WebKit::SharedVideoFrameReader::setSharedMemory(uint64_t a1)
{
  WebCore::SharedMemory::map();
  uint64_t v2 = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  }
  return *(void *)(a1 + 32) != 0;
}

uint64_t WebKit::WebGamepad::WebGamepad(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = (uint64_t *)(a1 + 24);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  uint64_t v6 = (uint64_t *)(a1 + 16);
  *(_DWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = &unk_1EE9F02C8;
  *(void *)(a1 + 8) = 0;
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 64, *(unsigned int *)(a2 + 36));
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 80, *(unsigned int *)(a2 + 52));
  WTF::String::operator=(v6, (WTF::StringImpl **)(a2 + 8));
  WTF::String::operator=(v5, (WTF::StringImpl **)(a2 + 16));
  WTF::HashTable<WebCore::GamepadHapticEffectType,WebCore::GamepadHapticEffectType,WTF::IdentityExtractor,WTF::IntHash<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>,WTF::StrongEnumHashTraits<WebCore::GamepadHapticEffectType>>::HashTable(&v10, (unsigned __int8 **)(a2 + 64));
  uint64_t v8 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v10;
  uint64_t v10 = v8;
  if (v8) {
    WTF::fastFree((WTF *)(v8 - 16), v7);
  }
  WebKit::WebGamepad::updateValues(a1, a2);
  return a1;
}

double WebKit::WebGamepad::updateValues(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 36);
  if (v4)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      goto LABEL_28;
    }
    uint64_t v5 = WTF::fastMalloc((WTF *)(8 * v4));
    uint64_t v6 = *(unsigned int *)(a2 + 36);
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(void *)(a2 + 24);
      uint64_t v9 = 8 * v6;
      do
      {
        uint64_t v10 = v7;
        uint64_t v11 = *(void *)(v8 + 8 * v7);
        uint64_t v12 = WTF::fastMalloc((WTF *)0x10);
        *(_DWORD *)uint64_t v12 = 1;
        *(void *)(v12 + 8) = v11;
        ++v7;
        *(void *)(v5 + 8 * v10) = v12;
        v9 -= 8;
      }
      while (v9);
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  else
  {
    LODWORD(v7) = 0;
    uint64_t v5 = 0;
  }
  uint64_t v13 = *(unsigned int *)(a1 + 76);
  if (v13) {
    WTF::VectorDestructor<true,WebCore::SharedGamepadValue>::destruct(*(WTF **)(a1 + 64), (void *)(*(void *)(a1 + 64) + 8 * v13));
  }
  uint64_t v14 = *(WTF **)(a1 + 64);
  if (v14)
  {
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v14, (void *)a2);
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  *(void *)(a1 + 64) = v5;
  *(_DWORD *)(a1 + 72) = v4;
  *(_DWORD *)(a1 + 76) = v7;
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, (void *)a2);
  uint64_t v16 = *(unsigned int *)(a2 + 52);
  if (!v16)
  {
    LODWORD(v19) = 0;
    uint64_t v17 = 0;
    goto LABEL_21;
  }
  if (v16 >> 29)
  {
    __break(0xC471u);
LABEL_28:
    JUMPOUT(0x199143E1CLL);
  }
  uint64_t v17 = WTF::fastMalloc((WTF *)(8 * v16));
  uint64_t v18 = *(unsigned int *)(a2 + 52);
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *(void *)(a2 + 40);
    uint64_t v21 = 8 * v18;
    do
    {
      uint64_t v22 = v19;
      uint64_t v23 = *(void *)(v20 + 8 * v19);
      uint64_t v24 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = v23;
      ++v19;
      *(void *)(v17 + 8 * v22) = v24;
      v21 -= 8;
    }
    while (v21);
    HIDWORD(v29) = v19;
  }
  else
  {
    LODWORD(v19) = 0;
  }
LABEL_21:
  uint64_t v25 = *(unsigned int *)(a1 + 92);
  if (v25) {
    WTF::VectorDestructor<true,WebCore::SharedGamepadValue>::destruct(*(WTF **)(a1 + 80), (void *)(*(void *)(a1 + 80) + 8 * v25));
  }
  long long v26 = *(WTF **)(a1 + 80);
  if (v26)
  {
    *(void *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v26, v15);
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  *(void *)(a1 + 80) = v17;
  *(_DWORD *)(a1 + 88) = v16;
  *(_DWORD *)(a1 + 92) = v19;
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v15);
  double result = *(double *)(a2 + 56);
  *(double *)(a1 + 40) = result;
  return result;
}

uint64_t WebKit::WebGamepad::axisValues(WebKit::WebGamepad *this)
{
  return (uint64_t)this + 64;
}

uint64_t WebKit::WebGamepad::buttonValues(WebKit::WebGamepad *this)
{
  return (uint64_t)this + 80;
}

void WebKit::WebGamepadProvider::~WebGamepadProvider(WebKit::WebGamepadProvider *this, void *a2)
{
  WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, a2);
  uint64_t v4 = *((unsigned int *)this + 15);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)this + 6);
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5;
      uint64_t *v5 = 0;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  uint64_t v8 = (WTF *)*((void *)this + 6);
  if (v8)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v8, v3);
  }
  uint64_t v9 = (unsigned int **)*((void *)this + 4);
  if (v9) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v9, v3);
  }
  *(void *)this = &unk_1EE9F0538;
  uint64_t v10 = (unsigned int **)*((void *)this + 1);
  if (v10) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v10, v3);
  }
}

{
  uint64_t vars8;

  WebKit::WebGamepadProvider::~WebGamepadProvider(this, a2);

  JUMPOUT(0x199740C10);
}

void WebKit::WebGamepadProvider::setInitialGamepads(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 60))
  {
    uint64_t v29 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      int v30 = 136446210;
      uint64_t v31 = "(m_gamepads.isEmpty())";
      _os_log_fault_impl(&dword_1985F2000, v29, OS_LOG_TYPE_FAULT, "Exiting: %{public}s is false", (uint8_t *)&v30, 0xCu);
    }
    WTFCrashWithInfoImpl(66, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/WebProcess/Gamepad/WebGamepadProvider.cpp", "void WebKit::WebGamepadProvider::setInitialGamepads(const Vector<std::optional<GamepadData>> &)");
  }
  uint64_t v4 = (void *)(a1 + 48);
  unint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    unint64_t v6 = *(unsigned int *)(a1 + 56);
    if (v6 < v5)
    {
      unint64_t v7 = v6 + (v6 >> 2);
      if (v7 >= 0x10) {
        unint64_t v8 = v7 + 1;
      }
      else {
        unint64_t v8 = 16;
      }
      if (v8 <= v5) {
        unint64_t v9 = *(unsigned int *)(a2 + 12);
      }
      else {
        unint64_t v9 = v8;
      }
      WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)(a1 + 48), v9);
    }
    if (*v4) {
      bzero((void *)(*v4 + 8 * *(unsigned int *)(a1 + 60)), 8 * v5 - 8 * *(unsigned int *)(a1 + 60));
    }
  }
  *(_DWORD *)(a1 + 60) = v5;
  uint64_t v10 = (void *)(a1 + 64);
  unint64_t v11 = *(unsigned int *)(a2 + 12);
  uint64_t v12 = *(unsigned int *)(a1 + 76);
  if (v12 >= v11)
  {
    WTF::VectorDestructor<true,WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct((unsigned int *)(*v10 + 8 * v11), (void *)(*v10 + 8 * v12));
  }
  else
  {
    unint64_t v13 = *(unsigned int *)(a1 + 72);
    if (v13 < v11)
    {
      unint64_t v14 = v13 + (v13 >> 2);
      if (v14 >= 0x10) {
        unint64_t v15 = v14 + 1;
      }
      else {
        unint64_t v15 = 16;
      }
      if (v15 <= v11) {
        unint64_t v16 = *(unsigned int *)(a2 + 12);
      }
      else {
        unint64_t v16 = v15;
      }
      WTF::Vector<WTF::WeakPtr<WebCore::PlatformGamepad,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((unsigned int *)(a1 + 64), v16);
    }
    if (*v10)
    {
      uint64_t v17 = *(unsigned int *)(a1 + 76);
      if (v17 != v11) {
        bzero((void *)(*v10 + 8 * v17), (8 * v11 - 8 * v17) & 0xFFFFFFFFFFFFFFF8);
      }
    }
  }
  *(_DWORD *)(a1 + 76) = v11;
  if (*(_DWORD *)(a2 + 12))
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    do
    {
      uint64_t v20 = *(void *)a2 + v18;
      if (!*(unsigned char *)(v20 + 72)) {
        break;
      }
      uint64_t v21 = WTF::fastMalloc((WTF *)0x60);
      uint64_t v22 = WebKit::WebGamepad::WebGamepad(v21, v20);
      unint64_t v24 = *(unsigned int *)(a1 + 60);
      if (v19 >= v24) {
        goto LABEL_48;
      }
      uint64_t v25 = *(void *)(*v4 + 8 * v19);
      *(void *)(*v4 + 8 * v19) = v22;
      if (v25)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
        unint64_t v24 = *(unsigned int *)(a1 + 60);
      }
      if (v19 >= v24)
      {
        __break(0xC471u);
        JUMPOUT(0x19914421CLL);
      }
      uint64_t v26 = *(void *)(*v4 + 8 * v19);
      if (v26)
      {
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v26 + 8), *(void *)(*v4 + 8 * v19));
        char v27 = *(atomic_uint **)(v26 + 8);
        if (v27) {
          atomic_fetch_add(v27, 1u);
        }
      }
      else
      {
        char v27 = 0;
      }
      if (v19 >= *(unsigned int *)(a1 + 76))
      {
LABEL_48:
        __break(0xC471u);
        JUMPOUT(0x199144214);
      }
      uint64_t v28 = *(unsigned int **)(*v10 + 8 * v19);
      *(void *)(*v10 + 8 * v19) = v27;
      if (v28)
      {
        if (atomic_fetch_add((atomic_uint *volatile)v28, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v28);
          WTF::fastFree((WTF *)v28, v23);
        }
      }
      ++v19;
      v18 += 80;
    }
    while (v19 < *(unsigned int *)(a2 + 12));
  }
}

void *WebKit::WebGamepadProvider::gamepadConnected(uint64_t a1, unsigned int *a2, NSObject *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (void *)(a1 + 48);
  unsigned int v7 = *a2;
  if (*(_DWORD *)(a1 + 60) <= *a2)
  {
    unint64_t v9 = v7 + 1;
    unint64_t v10 = *(unsigned int *)(a1 + 56);
    if (v10 < v9)
    {
      unint64_t v11 = v10 + (v10 >> 2);
      if (v11 >= 0x10) {
        unint64_t v12 = v11 + 1;
      }
      else {
        unint64_t v12 = 16;
      }
      if (v12 <= v9) {
        unint64_t v13 = v9;
      }
      else {
        unint64_t v13 = v12;
      }
      WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)(a1 + 48), v13);
    }
    if (*v6) {
      bzero((void *)(*v6 + 8 * *(unsigned int *)(a1 + 60)), 8 * v9 - 8 * *(unsigned int *)(a1 + 60));
    }
    *(_DWORD *)(a1 + 60) = v9;
    unint64_t v14 = (void *)(a1 + 64);
    unint64_t v15 = *a2 + 1;
    unint64_t v16 = *(unsigned int *)(a1 + 72);
    if (v16 < v15)
    {
      unint64_t v17 = v16 + (v16 >> 2);
      if (v17 >= 0x10) {
        unint64_t v18 = v17 + 1;
      }
      else {
        unint64_t v18 = 16;
      }
      if (v18 <= v15) {
        unint64_t v19 = *a2 + 1;
      }
      else {
        unint64_t v19 = v18;
      }
      WTF::Vector<WTF::WeakPtr<WebCore::PlatformGamepad,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((unsigned int *)(a1 + 64), v19);
    }
    if (*v14)
    {
      uint64_t v20 = *(unsigned int *)(a1 + 76);
      if (v20 != v15) {
        bzero((void *)(*v14 + 8 * v20), (8 * v15 - 8 * v20) & 0xFFFFFFFFFFFFFFF8);
      }
    }
    *(_DWORD *)(a1 + 76) = v15;
    unsigned int v7 = *a2;
    unsigned int v8 = *(_DWORD *)(a1 + 60);
  }
  else
  {
    unsigned int v8 = *(_DWORD *)(a1 + 60);
  }
  if (v8 <= v7)
  {
    __break(0xC471u);
    JUMPOUT(0x19914458CLL);
  }
  if (*(void *)(*v6 + 8 * v7))
  {
    a3 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)int v44 = "(!m_gamepads[gamepadData.index()])";
      _os_log_fault_impl(&dword_1985F2000, a3, OS_LOG_TYPE_FAULT, "Exiting: %{public}s is false", buf, 0xCu);
    }
    uint64_t v31 = (unsigned int *)WTFCrashWithInfoImpl(88, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/WebProcess/Gamepad/WebGamepadProvider.cpp", "void WebKit::WebGamepadProvider::gamepadConnected(const GamepadData &, EventMakesGamepadsVisible)");
LABEL_49:
    atomic_store(add, v31);
    WTF::fastFree((WTF *)v31, v23);
    goto LABEL_38;
  }
  uint64_t v21 = WTF::fastMalloc((WTF *)0x60);
  uint64_t v22 = WebKit::WebGamepad::WebGamepad(v21, (uint64_t)a2);
  uint64_t v24 = *a2;
  unsigned int v25 = *(_DWORD *)(a1 + 60);
  if (v25 <= v24)
  {
    __break(0xC471u);
    JUMPOUT(0x199144594);
  }
  uint64_t v26 = *(void *)(*v6 + 8 * v24);
  *(void *)(*v6 + 8 * v24) = v22;
  if (v26)
  {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    LODWORD(v24) = *a2;
    unsigned int v25 = *(_DWORD *)(a1 + 60);
  }
  if (v25 <= v24)
  {
    __break(0xC471u);
    JUMPOUT(0x19914459CLL);
  }
  uint64_t v27 = *(void *)(*v6 + 8 * v24);
  if (v27)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v27 + 8), *(void *)(*v6 + 8 * v24));
    uint64_t v28 = *(atomic_uint **)(v27 + 8);
    if (v28) {
      atomic_fetch_add(v28, 1u);
    }
  }
  else
  {
    uint64_t v28 = 0;
  }
  uint64_t v29 = *a2;
  if (*(_DWORD *)(a1 + 76) <= v29)
  {
    __break(0xC471u);
LABEL_55:
    JUMPOUT(0x199144584);
  }
  uint64_t v30 = *(void *)(a1 + 64);
  uint64_t v31 = *(unsigned int **)(v30 + 8 * v29);
  *(void *)(v30 + 8 * v29) = v28;
  if (v31)
  {
    unsigned int add = atomic_fetch_add((atomic_uint *volatile)v31, 0xFFFFFFFF);
    if (add == 1) {
      goto LABEL_49;
    }
  }
LABEL_38:
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(a1 + 32), buf);
  uint64_t v33 = *(void *)(a1 + 32);
  if (v33)
  {
    uint64_t v34 = *(unsigned int *)(v33 - 4);
    uint64_t v35 = v33 + 8 * v34;
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v34 = 0;
  }
  uint64_t v38 = a1 + 32;
  uint64_t v39 = v35;
  uint64_t v40 = v35;
  uint64_t v41 = v35;
  uint64_t v42 = v33 + 8 * v34;
  double result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v38);
  while (*(void *)&v44[4] != v39)
  {
    uint64_t v37 = *a2;
    if (*(_DWORD *)(a1 + 60) <= v37)
    {
      __break(0xC471u);
      goto LABEL_55;
    }
    (*(void (**)(void, void, NSObject *))(**(void **)(**(void **)&v44[4] + 8) + 16))(*(void *)(**(void **)&v44[4] + 8), *(void *)(*v6 + 8 * v37), a3);
    double result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
  return result;
}

void *WebKit::WebGamepadProvider::gamepadDisconnected(void *this, void *a2)
{
  uint64_t v2 = (uint64_t)this;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 15) <= a2)
  {
    uint64_t v4 = off_1EB358938;
    if (os_log_type_enabled((os_log_t)off_1EB358938, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)unint64_t v17 = "(m_gamepads.size() > index)";
      _os_log_fault_impl(&dword_1985F2000, v4, OS_LOG_TYPE_FAULT, "Exiting: %{public}s is false", buf, 0xCu);
    }
    unint64_t v6 = (unsigned int *)WTFCrashWithInfoImpl(99, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/WebProcess/Gamepad/WebGamepadProvider.cpp", "void WebKit::WebGamepadProvider::gamepadDisconnected");
LABEL_17:
    atomic_store(add, v6);
    WTF::fastFree((WTF *)v6, a2);
    goto LABEL_5;
  }
  uint64_t v3 = this[6];
  uint64_t v4 = *(NSObject **)(v3 + 8 * a2);
  *(void *)(v3 + 8 * a2) = 0;
  if (*((_DWORD *)this + 19) <= a2)
  {
    __break(0xC471u);
    return this;
  }
  uint64_t v5 = this[8];
  unint64_t v6 = *(unsigned int **)(v5 + 8 * a2);
  *(void *)(v5 + 8 * a2) = 0;
  if (v6)
  {
    unsigned int add = atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF);
    if (add == 1) {
      goto LABEL_17;
    }
  }
LABEL_5:
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(v2 + 32), buf);
  uint64_t v8 = *(void *)(v2 + 32);
  if (v8)
  {
    uint64_t v9 = *(unsigned int *)(v8 - 4);
    uint64_t v10 = v8 + 8 * v9;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v11 = v2 + 32;
  uint64_t v12 = v10;
  uint64_t v13 = v10;
  uint64_t v14 = v10;
  uint64_t v15 = v8 + 8 * v9;
  this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v11);
  while (*(void *)&v17[4] != v12)
  {
    (*(void (**)(void, NSObject *))(**(void **)(**(void **)&v17[4] + 8) + 24))(*(void *)(**(void **)&v17[4] + 8), v4);
    this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
  }
  if (v4) {
    return (void *)(*((uint64_t (**))v4->isa + 1))(v4);
  }
  return this;
}

void *WebKit::WebGamepadProvider::gamepadActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(unsigned int *)(a1 + 60);
  if (v5)
  {
    uint64_t v7 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      double result = *(void **)(*(void *)(a1 + 48) + 8 * i);
      if (result)
      {
        if (i >= *(unsigned int *)(a2 + 12))
        {
          __break(0xC471u);
          return result;
        }
        uint64_t v10 = *(void *)a2 + v7;
        if (*(unsigned char *)(v10 + 72))
        {
          WebKit::WebGamepad::updateValues((uint64_t)result, v10);
          unint64_t v5 = *(unsigned int *)(a1 + 60);
        }
      }
      v7 += 80;
    }
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(a1 + 32), &v19);
  uint64_t v11 = *(void *)(a1 + 32);
  if (v11)
  {
    uint64_t v12 = *(unsigned int *)(v11 - 4);
    uint64_t v13 = v11 + 8 * v12;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
  }
  uint64_t v14 = a1 + 32;
  uint64_t v15 = v13;
  uint64_t v16 = v13;
  uint64_t v17 = v13;
  uint64_t v18 = v11 + 8 * v12;
  double result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
  while (v20 != v15)
  {
    (*(void (**)(void, uint64_t))(**(void **)(*(void *)v20 + 8) + 32))(*(void *)(*(void *)v20 + 8), a3);
    double result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v19);
  }
  return result;
}

WTF *WebKit::WebGamepadProvider::startMonitoringGamepads(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 32);
  BOOL isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(a1 + 32));
  unsigned int v7 = *(_DWORD *)(a1 + 44);
  unsigned int v8 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v8;
  if (v8 > v7)
  {
    uint64_t v9 = *v4;
    if (*v4)
    {
      int v10 = *(_DWORD *)(v9 - 4);
      if (!v10) {
        goto LABEL_22;
      }
      int v11 = 0;
      unsigned int v12 = v10 - 1;
      do
      {
        uint64_t v13 = v12;
        uint64_t v14 = *(void *)(v9 + 8 * v12);
        if ((unint64_t)(v14 + 1) >= 2 && !*(void *)(v14 + 8))
        {
          *(void *)(v9 + 8 * v12) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v14);
            WTF::fastFree((WTF *)v14, v5);
          }
          *(void *)(v9 + 8 * v12) = -1;
          ++v11;
        }
        --v12;
      }
      while (v13);
      uint64_t v9 = *v4;
      if (v11)
      {
        *(_DWORD *)(v9 - 16) += v11;
        uint64_t v15 = *v4;
        if (*v4) {
          int v16 = *(_DWORD *)(v15 - 12);
        }
        else {
          int v16 = 0;
        }
        *(_DWORD *)(v15 - 12) = v16 - v11;
        uint64_t v9 = *v4;
      }
      if (v9)
      {
        unsigned int v17 = *(_DWORD *)(v9 - 4);
        if (v17 >= 9 && 6 * *(_DWORD *)(v9 - 12) < v17)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
          uint64_t v9 = *(void *)(a1 + 32);
          *(_DWORD *)(a1 + 40) = 0;
          if (!v9)
          {
            unsigned int v19 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 40) = 0;
LABEL_25:
        unsigned int v19 = *(_DWORD *)(v9 - 12);
        int v20 = 0x7FFFFFFF;
        if (v19 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + 44) = 2 * v20;
          goto LABEL_28;
        }
LABEL_26:
        int v20 = v19;
        goto LABEL_27;
      }
    }
    unsigned int v19 = 0;
    *(_DWORD *)(a1 + 40) = 0;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v21 = *(void *)(a2 + 8);
  if (!v21)
  {
    uint64_t v21 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v21 = 1;
    *(void *)(v21 + 8) = a2;
    uint64_t v23 = *(unsigned int **)(a2 + 8);
    *(void *)(a2 + 8) = v21;
    if (v23)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, v22);
      }
      uint64_t v21 = *(void *)(a2 + 8);
    }
  }
  atomic_fetch_add((atomic_uint *volatile)v21, 1u);
  atomic_fetch_add((atomic_uint *volatile)v21, 1u);
  uint64_t v33 = (WTF *)v21;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v4, &v33, (uint64_t)v32);
  double result = v33;
  uint64_t v33 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    double result = (WTF *)WTF::fastFree(result, v24);
  }
  if (v21 && atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v21);
    double result = (WTF *)WTF::fastFree((WTF *)v21, v24);
    if (!isEmptyIgnoringNullReferences) {
      return result;
    }
  }
  else if (!isEmptyIgnoringNullReferences)
  {
    return result;
  }
  {
    uint64_t v31 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v31);
  }
  uint64_t v26 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v27 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v27 = 2586;
  *((void *)v27 + 1) = 0;
  *((void *)v27 + 66) = (char *)v27 + 16;
  *((void *)v27 + 67) = 512;
  *((void *)v27 + 68) = 0;
  *((void *)v27 + 70) = 0;
  *((void *)v27 + 69) = 0;
  IPC::Encoder::encodeHeader(v27);
  v32[0] = v27;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v26 + 24) + 32))(v26 + 24, v32, 0);
  double result = v32[0];
  v32[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v28);
    return (WTF *)WTF::fastFree(v29, v30);
  }
  return result;
}

IPC::Encoder *WebKit::WebGamepadProvider::stopMonitoringGamepads(uint64_t a1, void *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 32);
  unsigned int v5 = *(_DWORD *)(a1 + 44);
  unsigned int v6 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v6;
  if (v6 > v5)
  {
    uint64_t v7 = *v4;
    if (*v4)
    {
      int v8 = *(_DWORD *)(v7 - 4);
      if (!v8) {
        goto LABEL_22;
      }
      int v9 = 0;
      unsigned int v10 = v8 - 1;
      do
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)(v7 + 8 * v10);
        if ((unint64_t)(v12 + 1) >= 2 && !*(void *)(v12 + 8))
        {
          *(void *)(v7 + 8 * v10) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v12);
            WTF::fastFree((WTF *)v12, a2);
          }
          *(void *)(v7 + 8 * v10) = -1;
          ++v9;
        }
        --v10;
      }
      while (v11);
      uint64_t v7 = *v4;
      if (v9)
      {
        *(_DWORD *)(v7 - 16) += v9;
        uint64_t v13 = *v4;
        if (*v4) {
          int v14 = *(_DWORD *)(v13 - 12);
        }
        else {
          int v14 = 0;
        }
        *(_DWORD *)(v13 - 12) = v14 - v9;
        uint64_t v7 = *v4;
      }
      if (v7)
      {
        unsigned int v15 = *(_DWORD *)(v7 - 4);
        if (v15 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v15)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
          uint64_t v7 = *(void *)(a1 + 32);
          *(_DWORD *)(a1 + 40) = 0;
          if (!v7)
          {
            unsigned int v17 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 40) = 0;
LABEL_25:
        unsigned int v17 = *(_DWORD *)(v7 - 12);
        int v18 = 0x7FFFFFFF;
        if (v17 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + 44) = 2 * v18;
          goto LABEL_28;
        }
LABEL_26:
        int v18 = v17;
        goto LABEL_27;
      }
    }
    unsigned int v17 = 0;
    *(_DWORD *)(a1 + 40) = 0;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v19 = a2[1];
  if (v19 && *(void *)(v19 + 8))
  {
    v33[0] = a2[1];
    int v20 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v4, v33);
    if (*v4)
    {
      uint64_t v21 = *v4 + 8 * *(unsigned int *)(*v4 - 4);
      if ((unsigned int **)v21 == v20) {
        goto LABEL_37;
      }
    }
    else
    {
      if (!v20) {
        goto LABEL_37;
      }
      uint64_t v21 = 0;
    }
    if ((unsigned int **)v21 != v20) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v4, v20);
    }
  }
LABEL_37:
  double result = (IPC::Encoder *)WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)v4);
  if (result)
  {
    {
      uint64_t v32 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v32);
    }
    uint64_t v23 = WebKit::WebProcess::singleton(void)::process + 24;
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)(WebKit::WebProcess::singleton(void)::process + 24) + 56))(WebKit::WebProcess::singleton(void)::process + 24);
    unsigned int v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unsigned int v25 = 2588;
    *((void *)v25 + 1) = v24;
    *((void *)v25 + 66) = (char *)v25 + 16;
    *((void *)v25 + 67) = 512;
    *((void *)v25 + 68) = 0;
    *((void *)v25 + 70) = 0;
    *((void *)v25 + 69) = 0;
    IPC::Encoder::encodeHeader(v25);
    uint64_t v34 = v25;
    uint64_t v26 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v26 = &unk_1EE9F0678;
    v26[1] = a1;
    uint64_t v27 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v33[0] = v26;
    v33[1] = v27;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v23 + 40))(v23, &v34, v33, 0);
    uint64_t v29 = v33[0];
    v33[0] = 0;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
    double result = v34;
    uint64_t v34 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v28);
      return (IPC::Encoder *)WTF::fastFree(v30, v31);
    }
  }
  return result;
}

uint64_t WebKit::WebGamepadProvider::platformGamepads(WebKit::WebGamepadProvider *this)
{
  return (uint64_t)this + 64;
}

IPC::Encoder *WebKit::WebGamepadProvider::playEffect(uint64_t a1, int a2, uint64_t *a3, char a4, double *a5, uint64_t *a6)
{
  int v25 = a2;
  {
    uint64_t v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v24);
  }
  uint64_t v10 = WebKit::WebProcess::singleton(void)::process + 24;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(WebKit::WebProcess::singleton(void)::process + 24) + 56))(WebKit::WebProcess::singleton(void)::process + 24);
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2584;
  *((void *)v12 + 1) = v11;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v27 = v12;
  uint64_t v13 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v12, &v25);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a3);
  int v14 = (unsigned char *)IPC::Encoder::grow(v13, 1uLL, 1);
  if (!v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1991450D4);
  }
  *int v14 = a4;
  IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(v13, a5);
  uint64_t v16 = *a6;
  *a6 = 0;
  unsigned int v17 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unsigned int v17 = &unk_1EE9F06A0;
  v17[1] = v16;
  uint64_t v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v26[0] = v17;
  v26[1] = v18;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v10 + 40))(v10, &v27, v26, 0);
  uint64_t v20 = v26[0];
  v26[0] = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  double result = v27;
  uint64_t v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  return result;
}

IPC::Encoder *WebKit::WebGamepadProvider::stopEffects(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v19 = a2;
  {
    uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v18);
  }
  uint64_t v6 = WebKit::WebProcess::singleton(void)::process + 24;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(WebKit::WebProcess::singleton(void)::process + 24) + 56))(WebKit::WebProcess::singleton(void)::process + 24);
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2587;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v21 = v8;
  int v9 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v8, &v19);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a3);
  uint64_t v10 = *a4;
  *a4 = 0;
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v11 = &unk_1EE9F06C8;
  v11[1] = v10;
  uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v20[0] = v11;
  v20[1] = v12;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v6 + 40))(v6, &v21, v20, 0);
  uint64_t v14 = v20[0];
  v20[0] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  double result = v21;
  uint64_t v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

void WebKit::GeolocationPermissionRequestManager::~GeolocationPermissionRequestManager(WebKit::GeolocationPermissionRequestManager *this, void *a2)
{
  uint64_t v3 = (unsigned int **)*((void *)this + 1);
  if (v3) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  }
  if (*(void *)this) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(*(void *)this, a2);
  }
}

void WebKit::GeolocationPermissionRequestManager::startRequestForGeolocation(WebKit::GeolocationPermissionRequestManager *this, WebCore::Geolocation *a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = WebCore::Geolocation::frame(a2);
  if (!v4)
  {
    uint64_t v65 = 0;
    WebCore::Geolocation::setIsAllowed(a2, 0, (const WTF::String *)&v65);
    uint64_t v21 = v65;
    uint64_t v65 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v20);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    return;
  }
  uint64_t v5 = v4;
  uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 10, (uint64_t)a2);
  uint64_t v6 = *((void *)a2 + 5);
  atomic_fetch_add((atomic_uint *volatile)v6, 1u);
  int v8 = (uint64_t *)((char *)this + 8);
  uint64_t v7 = *((void *)this + 1);
  if (v7
    || (WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::expand((uint64_t *)this + 1, 0), (uint64_t v7 = *v8) != 0))
  {
    unsigned int v9 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = *(void *)(v6 + 8);
  unint64_t v12 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
  unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  int v15 = (v14 >> 31) ^ v14;
  for (int i = 1; ; ++i)
  {
    uint64_t v17 = v15 & v9;
    uint64_t v18 = (uint64_t *)(v7 + 16 * v17);
    uint64_t v19 = *v18;
    if (*v18 == -1)
    {
      uint64_t v10 = v7 + 16 * v17;
      goto LABEL_11;
    }
    if (!v19)
    {
      if (v10)
      {
        *(void *)uint64_t v10 = 0;
        *(void *)(v10 + 8) = 0;
        --*(_DWORD *)(*v8 - 16);
        *(void *)uint64_t v10 = v6;
      }
      else
      {
        uint64_t *v18 = v6;
        uint64_t v10 = v7 + 16 * v17;
      }
      *(void *)(v10 + 8) = IdentifierInternal;
      uint64_t v22 = *v8;
      if (*v8) {
        int v23 = *(_DWORD *)(v22 - 12) + 1;
      }
      else {
        int v23 = 1;
      }
      *(_DWORD *)(v22 - 12) = v23;
      uint64_t v24 = *v8;
      if (*v8) {
        int v25 = *(_DWORD *)(v24 - 12);
      }
      else {
        int v25 = 0;
      }
      uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
      unint64_t v27 = *(unsigned int *)(v24 - 4);
      if (v27 > 0x400)
      {
        if (v27 > 2 * v26) {
          goto LABEL_30;
        }
      }
      else if (3 * v27 > 4 * v26)
      {
        goto LABEL_30;
      }
      WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::expand((uint64_t *)this + 1, (unsigned int **)v10);
      goto LABEL_30;
    }
    if (*(void *)(v19 + 8) == v11) {
      break;
    }
LABEL_11:
    int v15 = i + v17;
  }
  *(void *)(v7 + 16 * v17 + 8) = IdentifierInternal;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v6);
    WTF::fastFree((WTF *)v6, (void *)v10);
  }
LABEL_30:
  uint64_t v28 = *(void *)this;
  if (*(void *)this
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)this, 0), (uint64_t v28 = *(void *)this) != 0))
  {
    int v29 = *(_DWORD *)(v28 - 8);
  }
  else
  {
    int v29 = 0;
  }
  uint64_t v30 = IdentifierInternal;
  unint64_t v31 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                               + ~(IdentifierInternal << 32)) >> 22);
  unint64_t v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
  unint64_t v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
  unsigned int v34 = v29 & ((v33 >> 31) ^ v33);
  uint64_t v35 = (uint64_t *)(v28 + 16 * v34);
  uint64_t v36 = *v35;
  if (!*v35)
  {
LABEL_41:
    uint64_t *v35 = v30;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 10, (uint64_t)a2);
    uint64_t v40 = (atomic_uint *)*((void *)a2 + 5);
    atomic_fetch_add(v40, 1u);
    uint64_t v41 = (unsigned int *)v35[1];
    v35[1] = (uint64_t)v40;
    if (v41 && atomic_fetch_add((atomic_uint *volatile)v41, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v41);
      WTF::fastFree((WTF *)v41, v39);
    }
    uint64_t v42 = *(void *)this;
    if (*(void *)this) {
      int v43 = *(_DWORD *)(v42 - 12) + 1;
    }
    else {
      int v43 = 1;
    }
    *(_DWORD *)(v42 - 12) = v43;
    uint64_t v47 = *(void *)this;
    if (*(void *)this) {
      int v48 = *(_DWORD *)(v47 - 12);
    }
    else {
      int v48 = 0;
    }
    uint64_t v49 = (*(_DWORD *)(v47 - 16) + v48);
    unint64_t v50 = *(unsigned int *)(v47 - 4);
    if (v50 > 0x400)
    {
      if (v50 > 2 * v49) {
        goto LABEL_54;
      }
    }
    else if (3 * v50 > 4 * v49)
    {
      goto LABEL_54;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand((uint64_t *)this, v35);
    goto LABEL_54;
  }
  uint64_t v37 = 0;
  int v38 = 1;
  while (v36 != IdentifierInternal)
  {
    if (v36 == -1) {
      uint64_t v37 = v35;
    }
    unsigned int v34 = (v34 + v38) & v29;
    uint64_t v35 = (uint64_t *)(v28 + 16 * v34);
    uint64_t v36 = *v35;
    ++v38;
    if (!*v35)
    {
      if (v37)
      {
        *uint64_t v37 = 0;
        v37[1] = 0;
        --*(_DWORD *)(*(void *)this - 16);
        uint64_t v35 = v37;
      }
      goto LABEL_41;
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 10, (uint64_t)a2);
  uint64_t v45 = (atomic_uint *)*((void *)a2 + 5);
  atomic_fetch_add(v45, 1u);
  uint64_t v46 = (unsigned int *)v35[1];
  v35[1] = (uint64_t)v45;
  if (v46 && atomic_fetch_add((atomic_uint *volatile)v46, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v46);
    WTF::fastFree((WTF *)v46, v44);
  }
LABEL_54:
  WebKit::WebFrame::fromCoreFrame(v5, &v62);
  uint64_t v51 = (void *)*((void *)this + 2);
  uint64_t v52 = v62;
  WebKit::WebFrame::info(v62, (uint64_t)&v65);
  uint64_t v53 = v51[4];
  v51 += 4;
  uint64_t v54 = (*(uint64_t (**)(void *))(v53 + 56))(v51);
  char v55 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v55 = 2044;
  *((void *)v55 + 1) = v54;
  *((void *)v55 + 66) = (char *)v55 + 16;
  *((void *)v55 + 67) = 512;
  *((void *)v55 + 68) = 0;
  *((void *)v55 + 70) = 0;
  *((void *)v55 + 69) = 0;
  IPC::Encoder::encodeHeader(v55);
  uint64_t v64 = v55;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v55, &IdentifierInternal);
  IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(v55, (char *)&v65);
  (*(void (**)(void *, IPC::Encoder **, void))(*v51 + 32))(v51, &v64, 0);
  uint64_t v57 = v64;
  uint64_t v64 = 0;
  if (v57)
  {
    IPC::Encoder::~Encoder(v57, v56);
    WTF::fastFree(v60, v61);
  }
  int v58 = v70;
  uint64_t v70 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2) {
      WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v56);
    }
    else {
      *(_DWORD *)v58 -= 2;
    }
  }
  if (v69 != -1) {
    ((void (*)(IPC::Encoder **, uint64_t *))off_1EE9F0580[v69])(&v64, &v68);
  }
  int v69 = -1;
  CFTypeRef v59 = cf;
  CFTypeRef cf = 0;
  if (v59) {
    CFRelease(v59);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v66);
  if (v52) {
    CFRelease(*((CFTypeRef *)v52 + 1));
  }
}

IPC::Encoder *WebKit::GeolocationPermissionRequestManager::revokeAuthorizationToken(WebKit::GeolocationPermissionRequestManager *this, const WTF::String *a2)
{
  uint64_t v3 = (void *)*((void *)this + 2);
  uint64_t v4 = v3[4];
  v3 += 4;
  uint64_t v5 = (*(uint64_t (**)(void *))(v4 + 56))(v3);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2053;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, (uint64_t *)a2);
  (*(void (**)(void *, IPC::Encoder **, void))(*v3 + 32))(v3, &v11, 0);
  double result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t *WebKit::GeolocationPermissionRequestManager::cancelRequestForGeolocation(WebKit::GeolocationPermissionRequestManager *this, WebCore::Geolocation *a2)
{
  uint64_t v4 = (uint64_t *)((char *)this + 8);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 10, (uint64_t)a2);
  uint64_t v5 = (atomic_uint *)*((void *)a2 + 5);
  atomic_fetch_add(v5, 1u);
  unsigned int v9 = (WTF *)v5;
  unint64_t v10 = WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::takeOptional(v4, (uint64_t)&v9);
  uint64_t v11 = v6;
  double result = (uint64_t *)v9;
  unsigned int v9 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    double result = (uint64_t *)WTF::fastFree((WTF *)result, v6);
  }
  if ((_BYTE)v11)
  {
    double result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this, &v10);
    if (*(void *)this)
    {
      uint64_t v8 = *(void *)this + 16 * *(unsigned int *)(*(void *)this - 4);
      if ((uint64_t *)v8 == result) {
        return result;
      }
    }
    else
    {
      if (!result) {
        return result;
      }
      uint64_t v8 = 0;
    }
    if ((uint64_t *)v8 != result) {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove((uint64_t *)this, result);
    }
  }
  return result;
}

unint64_t WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::takeOptional(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>,WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>(a1, a2);
  if (*a1)
  {
    if (*a1 + 16 * *(unsigned int *)(*a1 - 4) == v3)
    {
      uint64_t v4 = 0;
LABEL_7:
      unint64_t v6 = 0;
      return v6 | v4;
    }
  }
  else if (!v3)
  {
    uint64_t v4 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(v3 + 8);
  WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::remove(a1, (unsigned int **)v3);
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFFF00;
  uint64_t v4 = v5;
  return v6 | v4;
}

unsigned int *WebKit::GeolocationPermissionRequestManager::didReceiveGeolocationPermissionDecision(uint64_t *a1, uint64_t a2, const WTF::String *a3)
{
  uint64_t v12 = a2;
  uint64_t v5 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, &v12);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::take(a1, v5, &v13);
  double result = (unsigned int *)v13;
  if (v13)
  {
    uint64_t v8 = (WTF *)*((void *)v13 + 1);
    if (v8)
    {
      ++*((_DWORD *)v8 + 8);
      unint64_t v13 = 0;
      if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        WTF::fastFree((WTF *)result, v6);
      }
      unint64_t v13 = v8;
      unsigned int v9 = (unsigned int **)WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>,WebCore::Geolocation const*>(a1 + 1, &v13);
      uint64_t v10 = a1[1];
      if (v10)
      {
        uint64_t v11 = (unsigned int **)(v10 + 16 * *(unsigned int *)(v10 - 4));
        if (v11 == v9) {
          goto LABEL_12;
        }
      }
      else
      {
        if (!v9)
        {
LABEL_12:
          WebCore::Geolocation::setIsAllowed(v8, *(void *)a3 != 0, a3);
          return WTF::RefCounted<WebCore::Geolocation>::deref((_DWORD *)v8 + 8);
        }
        uint64_t v11 = 0;
      }
      if (v11 != v9) {
        WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::remove(a1 + 1, v9);
      }
      goto LABEL_12;
    }
    unint64_t v13 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v6);
    }
  }
  return result;
}

void WebKit::WebGeolocationManager::~WebGeolocationManager(WebKit::WebGeolocationManager *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F0370;
  *((void *)this + 1) = &unk_1EE9F03B0;
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = *((void *)this + 4);
      do
      {
        unint64_t v6 = *(unsigned int **)v5;
        if (*(void *)v5 != -1)
        {
          uint64_t v7 = *(WTF::StringImpl **)(v5 + 8);
          *(void *)(v5 + 8) = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
            {
              WTF::StringImpl::destroy(v7, a2);
              unint64_t v6 = *(unsigned int **)v5;
            }
            else
            {
              *(_DWORD *)v7 -= 2;
            }
          }
          *(void *)uint64_t v5 = 0;
          if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v6);
            WTF::fastFree((WTF *)v6, a2);
          }
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v8 = *((void *)this + 3);
  if (v8)
  {
    uint64_t v9 = *(unsigned int *)(v8 - 4);
    if (v9)
    {
      uint64_t v10 = *((void *)this + 3);
      do
      {
        if (*(void *)v10 != -1)
        {
          uint64_t v11 = *(unsigned int ***)(v10 + 24);
          if (v11) {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v11, a2);
          }
          uint64_t v12 = *(unsigned int ***)(v10 + 8);
          if (v12) {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v12, a2);
          }
          unint64_t v13 = *(WTF::StringImpl **)v10;
          *(void *)uint64_t v10 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, a2);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
        }
        v10 += 40;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  *((void *)this + 1) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebGeolocationManager::~WebGeolocationManager(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::WebGeolocationManager::~WebGeolocationManager(WebKit::WebGeolocationManager *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebGeolocationManager::~WebGeolocationManager((WebKit::WebGeolocationManager *)((char *)this - 8), a2);

  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebKit::WebGeolocationManager::registerWebPage(WTF::StringImpl *this, WebKit::WebPage *a2, const WTF::String *a3, int a4)
{
  uint64_t v4 = *((void *)a2 + 6);
  if (!v4) {
    return this;
  }
  uint64_t v5 = *(void *)(v4 + 160);
  if (!v5 || *(unsigned char *)(v5 + 144) != 0) {
    return this;
  }
  uint64_t v7 = *(void *)(v5 + 296);
  if (!v7) {
    return this;
  }
  uint64_t v11 = this;
  this = WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v77, (const WTF::URL *)(v7 + 768));
  if (!v77) {
    return this;
  }
  if (!*((_DWORD *)v77 + 1)) {
    goto LABEL_82;
  }
  uint64_t v72 = (uint64_t *)a3;
  unint64_t v13 = (uint64_t *)((char *)v11 + 24);
  uint64_t v14 = *((void *)v11 + 3);
  int v73 = a4;
  if (v14
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)v11 + 3, 0), (uint64_t v14 = *v13) != 0))
  {
    int v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    int v15 = 0;
  }
  unsigned int v16 = WTF::ASCIICaseInsensitiveHash::hash(v77, v12) & v15;
  uint64_t v17 = v14 + 40 * v16;
  if ((WTF::equal(*(WTF **)v17, 0, v18) & 1) == 0)
  {
    uint64_t v20 = 0;
    int v21 = 1;
    do
    {
      if (*(void *)v17 == -1)
      {
        uint64_t v20 = v17;
      }
      else if (WTF::equalIgnoringASCIICase(*(WTF **)v17, v77, v19))
      {
        goto LABEL_35;
      }
      unsigned int v16 = (v16 + v21) & v15;
      uint64_t v17 = v14 + 40 * v16;
      ++v21;
    }
    while (!WTF::equal(*(WTF **)v17, 0, v19));
    if (v20)
    {
      *(void *)(v20 + 32) = 0;
      *(_OWORD *)uint64_t v20 = 0u;
      *(_OWORD *)(v20 + ++*(_DWORD *)(this + 16) = 0u;
      --*(_DWORD *)(*v13 - 16);
      uint64_t v17 = v20;
    }
  }
  WTF::String::operator=((uint64_t *)v17, &v77);
  int v23 = *(unsigned int ***)(v17 + 8);
  *(void *)(v17 + 8) = 0;
  if (v23) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v23, v22);
  }
  uint64_t v24 = *(unsigned int ***)(v17 + 24);
  *(void *)(v17 + ++*(_DWORD *)(this + 16) = 0;
  *(void *)(v17 + 24) = 0;
  if (v24) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v24, v22);
  }
  *(void *)(v17 + 32) = 0;
  uint64_t v25 = *v13;
  if (*v13) {
    int v26 = *(_DWORD *)(v25 - 12) + 1;
  }
  else {
    int v26 = 1;
  }
  *(_DWORD *)(v25 - 12) = v26;
  uint64_t v27 = *v13;
  if (*v13) {
    int v28 = *(_DWORD *)(v27 - 12);
  }
  else {
    int v28 = 0;
  }
  uint64_t v29 = (*(_DWORD *)(v27 - 16) + v28);
  unint64_t v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 > 2 * v29) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (3 * v30 <= 4 * v29) {
LABEL_34:
  }
    uint64_t v17 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)v11 + 3, (WTF::ASCIICaseInsensitiveHash **)v17);
LABEL_35:
  uint64_t v31 = v17 + 8;
  BOOL isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(v17 + 8));
  unint64_t v33 = (void **)(v17 + 24);
  int v34 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(v17 + 24));
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>(v31, (unsigned int *)a2, (uint64_t)&v75);
  if (v73) {
    WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)v33, (unsigned int *)a2, (uint64_t)&v75);
  }
  uint64_t v36 = (uint64_t *)((char *)v11 + 32);
  unsigned int v37 = *((_DWORD *)v11 + 10);
  unsigned int v38 = *((_DWORD *)v11 + 11);
  *((_DWORD *)v11 + 10) = v37 + 1;
  if (v37 > v38) {
    WTF::WeakHashMap<WebKit::WebPage,WebCore::RegistrableDomain,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)v11 + 32, v35);
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v40 = (atomic_uint *)*((void *)a2 + 3);
  atomic_fetch_add(v40, 1u);
  atomic_fetch_add(v40, 1u);
  int v75 = (WTF *)v40;
  if (v40 && atomic_fetch_add(v40, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)v40);
    WTF::fastFree((WTF *)v40, v39);
  }
  uint64_t v41 = *v36;
  if (*v36
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)v11 + 4, 0), (uint64_t v41 = *v36) != 0))
  {
    int v42 = *(_DWORD *)(v41 - 8);
  }
  else
  {
    int v42 = 0;
  }
  unsigned int v44 = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash(&v75);
  uint64_t v45 = 0;
  int v46 = 1;
  uint64_t v47 = (unsigned int *)v75;
  while (1)
  {
    unsigned int v48 = v44 & v42;
    uint64_t v49 = (unsigned int **)(v41 + 16 * v48);
    unint64_t v50 = *v49;
    if (*v49 == (unsigned int *)-1)
    {
      uint64_t v45 = (unsigned int **)(v41 + 16 * v48);
      goto LABEL_51;
    }
    if (!v50) {
      break;
    }
    if (v50 == (unsigned int *)v75) {
      goto LABEL_73;
    }
LABEL_51:
    unsigned int v44 = v46 + v48;
    ++v46;
  }
  if (v45)
  {
    *uint64_t v45 = 0;
    v45[1] = 0;
    --*(_DWORD *)(*v36 - 16);
    uint64_t v49 = v45;
  }
  int v75 = 0;
  uint64_t v51 = *v49;
  WTF::StringImpl *v49 = v47;
  if (v51 && atomic_fetch_add((atomic_uint *volatile)v51, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v51);
    WTF::fastFree((WTF *)v51, v43);
  }
  uint64_t v52 = v77;
  if (v77) {
    *(_DWORD *)v77 += 2;
  }
  uint64_t v53 = (WTF::StringImpl *)v49[1];
  v49[1] = (unsigned int *)v52;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2) {
      WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v43);
    }
    else {
      *(_DWORD *)v53 -= 2;
    }
  }
  uint64_t v54 = *v36;
  if (*v36) {
    int v55 = *(_DWORD *)(v54 - 12) + 1;
  }
  else {
    int v55 = 1;
  }
  *(_DWORD *)(v54 - 12) = v55;
  uint64_t v56 = *v36;
  if (*v36) {
    int v57 = *(_DWORD *)(v56 - 12);
  }
  else {
    int v57 = 0;
  }
  uint64_t v58 = (*(_DWORD *)(v56 - 16) + v57);
  unint64_t v59 = *(unsigned int *)(v56 - 4);
  if (v59 > 0x400)
  {
    if (v59 <= 2 * v58) {
LABEL_71:
    }
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v36, v49);
  }
  else if (3 * v59 <= 4 * v58)
  {
    goto LABEL_71;
  }
  uint64_t v47 = (unsigned int *)v75;
LABEL_73:
  int v75 = 0;
  if (v47 && atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v47);
    WTF::fastFree((WTF *)v47, v43);
  }
  if (isEmptyIgnoringNullReferences)
  {
    {
      uint64_t v70 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v70);
    }
    uint64_t v60 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
    uint64_t v74 = *((void *)a2 + 265);
    int v61 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v61 = 1754;
    *((void *)v61 + 1) = 0;
    *((void *)v61 + 66) = (char *)v61 + 16;
    *((void *)v61 + 67) = 512;
    *((void *)v61 + 68) = 0;
    *((void *)v61 + 70) = 0;
    *((void *)v61 + 69) = 0;
    IPC::Encoder::encodeHeader(v61);
    int v75 = v61;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v61, (uint64_t *)&v77);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v61, &v74);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v61, v72);
    char v62 = (unsigned char *)IPC::Encoder::grow(v61, 1uLL, 1);
    if (!v63)
    {
      __break(0xC471u);
      JUMPOUT(0x199146360);
    }
    *char v62 = v73;
    IPC::Connection::sendMessageImpl(v60, (uint64_t *)&v75, 0, 0);
    uint64_t v64 = v75;
    int v75 = 0;
    if (v64)
    {
      IPC::Encoder::~Encoder(v64, v12);
      WTF::fastFree(v65, v66);
    }
  }
  else
  {
    int v67 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v33);
    if (v34 != v67)
    {
      char v68 = v67 ^ 1;
      {
        uint64_t v71 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v71);
      }
      uint64_t v69 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
      int v75 = (WTF *)&v77;
      char v76 = v68;
      IPC::Connection::send<Messages::WebGeolocationManagerProxy::SetEnableHighAccuracy>(v69, (uint64_t)&v75, 0, 0, 0);
    }
  }
LABEL_82:
  this = v77;
  int v77 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v12);
    }
    else {
      *(_DWORD *)this -= 2;
    }
  }
  return this;
}

uint64_t IPC::Connection::send<Messages::WebGeolocationManagerProxy::SetEnableHighAccuracy>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 1753;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,BOOL>,0ul,1ul>(v10, a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  unint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

WTF::StringImpl *WebKit::WebGeolocationManager::unregisterWebPage(WebKit::WebGeolocationManager *this, WebKit::WebPage *a2)
{
  double result = (WTF::StringImpl *)WTF::WeakHashMap<WebKit::WebPage,WebCore::RegistrableDomain,WTF::DefaultWeakPtrImpl>::take((uint64_t)this + 32, a2, &v20);
  if (!v20) {
    return result;
  }
  if (*((_DWORD *)v20 + 1))
  {
    unint64_t v6 = (uint64_t *)((char *)this + 24);
    uint64_t v7 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 3, &v20);
    uint64_t v8 = (WTF::StringImpl *)v7;
    uint64_t v9 = *((void *)this + 3);
    if (v9) {
      v9 += 40 * *(unsigned int *)(v9 - 4);
    }
    if (v9 != v7)
    {
      int isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(v7 + 24));
      WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)v8 + 8, a2);
      WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)v8 + 24, a2);
      if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)v8 + 1))
      {
        {
          unsigned int v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v16);
        }
        uint64_t v11 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
        uint64_t v18 = &v20;
        IPC::Connection::send<Messages::WebGeolocationManagerProxy::StopUpdating>(v11, (uint64_t **)&v18, 0, 0, 0);
      }
      else
      {
        int v12 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)v8 + 3);
        if (isEmptyIgnoringNullReferences != v12)
        {
          char v13 = v12 ^ 1;
          {
            uint64_t v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            WebKit::WebProcess::WebProcess(v17);
          }
          uint64_t v14 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
          uint64_t v18 = &v20;
          char v19 = v13;
          IPC::Connection::send<Messages::WebGeolocationManagerProxy::SetEnableHighAccuracy>(v14, (uint64_t)&v18, 0, 0, 0);
        }
      }
      if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)v8 + 1)
        && WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)v8 + 3))
      {
        if (*v6)
        {
          uint64_t v15 = *v6 + 40 * *(unsigned int *)(*v6 - 4);
          if ((WTF::StringImpl *)v15 == v8) {
            goto LABEL_21;
          }
        }
        else
        {
          if (!v8) {
            goto LABEL_21;
          }
          uint64_t v15 = 0;
        }
        if ((WTF::StringImpl *)v15 != v8) {
          WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::remove(v6, v8);
        }
      }
    }
  }
LABEL_21:
  double result = v20;
  uint64_t v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebKit::WebPage,WebCore::RegistrableDomain,WTF::DefaultWeakPtrImpl>::take@<X0>(uint64_t result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = (uint64_t *)result;
  unsigned int v6 = *(_DWORD *)(result + 8);
  unsigned int v7 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 8) = v6 + 1;
  if (v6 > v7) {
    double result = WTF::WeakHashMap<WebKit::WebPage,WebCore::RegistrableDomain,WTF::DefaultWeakPtrImpl>::removeNullReferences(result, a2);
  }
  uint64_t v8 = a2[3];
  if (!v8 || !*(void *)(v8 + 8)) {
    goto LABEL_11;
  }
  uint64_t v12 = a2[3];
  double result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v4, &v12);
  uint64_t v9 = *v4;
  if (*v4) {
    v9 += 16 * *(unsigned int *)(v9 - 4);
  }
  if (v9 == result)
  {
LABEL_11:
    *a3 = 0;
    return result;
  }
  uint64_t v10 = *(void *)(result + 8);
  *(void *)(result + 8) = 0;
  *a3 = v10;
  if (*v4)
  {
    uint64_t v11 = *v4 + 16 * *(unsigned int *)(*v4 - 4);
    if (v11 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v11 = 0;
  }
  if (v11 != result) {
    return (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v4, (void *)result);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::WebGeolocationManagerProxy::StopUpdating>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 1755;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, *a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  char v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

WTF::StringImpl *WebKit::WebGeolocationManager::setEnableHighAccuracyForPage(WebKit::WebGeolocationManager *this, WebKit::WebPage *a2, int a3)
{
  double result = (WTF::StringImpl *)WTF::WeakHashMap<WebKit::WebPage,WebCore::RegistrableDomain,WTF::DefaultWeakPtrImpl>::get((uint64_t)this + 32, (uint64_t)a2, &v18);
  if (v18)
  {
    if (*((_DWORD *)v18 + 1))
    {
      uint64_t v8 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 3, &v18);
      uint64_t v9 = *((void *)this + 3);
      if (v9) {
        v9 += 40 * *(unsigned int *)(v9 - 4);
      }
      if (v9 != v8)
      {
        uint64_t v10 = (void **)(v8 + 24);
        BOOL isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((void **)(v8 + 24));
        if (a3) {
          WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)v10, (unsigned int *)a2, (uint64_t)&v16);
        }
        else {
          WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)v10, a2);
        }
        BOOL v12 = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v10);
        if (isEmptyIgnoringNullReferences != WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v10))
        {
          BOOL v13 = !v12;
          {
            uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            WebKit::WebProcess::WebProcess(v15);
          }
          uint64_t v14 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
          unsigned int v16 = &v18;
          BOOL v17 = v13;
          IPC::Connection::send<Messages::WebGeolocationManagerProxy::SetEnableHighAccuracy>(v14, (uint64_t)&v16, 0, 0, 0);
        }
      }
    }
    double result = v18;
    uint64_t v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebKit::WebPage,WebCore::RegistrableDomain,WTF::DefaultWeakPtrImpl>::get@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  ++*(_DWORD *)(result + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3 && *(void *)(v3 + 8)) {
    return WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(result, v3, a3);
  }
  *a3 = 0;
  return result;
}

uint64_t WebKit::WebGeolocationManager::didChangePosition(WebKit::WebGeolocationManager *this, WTF::ASCIICaseInsensitiveHash **a2, const WebCore::GeolocationPositionData *a3)
{
  uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 3, a2);
  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    v6 += 40 * *(unsigned int *)(v6 - 4);
  }
  if (v6 != result)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    unsigned int v7 = (WebCore::GeolocationController *)WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebKit::WebPage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebKit::WebPage,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WebKit::WebPage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebKit::WebPage&)#1},WTF::Vector<WTF::WeakPtr<WebKit::WebPage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebKit::WebPage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((unsigned int *)&v20, (_DWORD *)(result + 8));
    if (HIDWORD(v21))
    {
      uint64_t v9 = v20;
      uint64_t v10 = 8 * HIDWORD(v21);
      do
      {
        if (*(void *)v9)
        {
          uint64_t v11 = *(void *)(*(void *)v9 + 8);
          if (v11) {
            uint64_t v12 = v11 - 16;
          }
          else {
            uint64_t v12 = 0;
          }
          uint64_t v13 = *(void *)(v12 + 48);
          if (v13)
          {
            *(void *)&v18[0] = WebCore::GeolocationController::supplementName(v7);
            *((void *)&v18[0] + 1) = v14;
            WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v13 + 8), (WTF::ASCIILiteralHash *)v18);
            long long v15 = *((_OWORD *)a3 + 5);
            v18[4] = *((_OWORD *)a3 + 4);
            v18[5] = v15;
            v18[6] = *((_OWORD *)a3 + 6);
            long long v16 = *((_OWORD *)a3 + 1);
            v18[0] = *(_OWORD *)a3;
            v18[1] = v16;
            long long v17 = *((_OWORD *)a3 + 3);
            v18[2] = *((_OWORD *)a3 + 2);
            v18[3] = v17;
            char v19 = 1;
            unsigned int v7 = (WebCore::GeolocationController *)WebCore::GeolocationController::positionChanged();
          }
        }
        v9 += 8;
        v10 -= 8;
      }
      while (v10);
    }
    return WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v8);
  }
  return result;
}

uint64_t WebKit::WebGeolocationManager::didFailToDeterminePosition(WebKit::WebGeolocationManager *this, WTF::ASCIICaseInsensitiveHash **a2, const WTF::String *a3)
{
  uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 3, a2);
  uint64_t v6 = result;
  uint64_t v7 = *((void *)this + 3);
  if (v7) {
    v7 += 40 * *(unsigned int *)(v7 - 4);
  }
  if (v7 != result)
  {
    uint64_t v8 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    uint64_t v9 = v8;
    *(void *)uint64_t v8 = 0x100000001;
    uint64_t v10 = *(_DWORD **)a3;
    if (*(void *)a3) {
      *v10 += 2;
    }
    *((void *)v8 + 1) = v10;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v11 = (WebCore::GeolocationController *)WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebKit::WebPage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebKit::WebPage,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WebKit::WebPage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebKit::WebPage&)#1},WTF::Vector<WTF::WeakPtr<WebKit::WebPage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebKit::WebPage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((unsigned int *)&v21, (_DWORD *)(v6 + 8));
    if (HIDWORD(v22))
    {
      uint64_t v13 = v21;
      uint64_t v14 = 8 * HIDWORD(v22);
      do
      {
        if (*(void *)v13)
        {
          uint64_t v15 = *(void *)(*(void *)v13 + 8);
          uint64_t v16 = v15 ? v15 - 16 : 0;
          uint64_t v17 = *(void *)(v16 + 48);
          if (v17)
          {
            v23[0] = WebCore::GeolocationController::supplementName(v11);
            v23[1] = v18;
            WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(v17 + 8), (WTF::ASCIILiteralHash *)v23);
            uint64_t v11 = (WebCore::GeolocationController *)WebCore::GeolocationController::errorOccurred();
          }
        }
        v13 += 8;
        v14 -= 8;
      }
      while (v14);
    }
    uint64_t result = WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v12);
    if (*(_DWORD *)v9 == 1)
    {
      uint64_t v20 = (WTF::StringImpl *)*((void *)v9 + 1);
      *((void *)v9 + 1) = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v19);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      return WTF::fastFree(v9, v19);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  return result;
}

uint64_t WebKit::WebGeolocationManager::resetPermissions(WebKit::WebGeolocationManager *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 3, a2);
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    v4 += 40 * *(unsigned int *)(v4 - 4);
  }
  if (v4 == result)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebKit::WebPage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebKit::WebPage,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WebKit::WebPage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebKit::WebPage&)#1},WTF::Vector<WTF::WeakPtr<WebKit::WebPage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebKit::WebPage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((unsigned int *)&v12, (_DWORD *)(result + 8));
    if (HIDWORD(v13))
    {
      uint64_t v6 = v12;
      uint64_t v7 = 8 * HIDWORD(v13);
      do
      {
        if (*(void *)v6)
        {
          uint64_t v8 = *(void *)(*(void *)v6 + 8);
          if (v8) {
            uint64_t v9 = v8 - 16;
          }
          else {
            uint64_t v9 = 0;
          }
          uint64_t v10 = *(void *)(v9 + 48);
          if (v10)
          {
            uint64_t v11 = *(WebCore::LocalFrame **)(v10 + 160);
            if (!*((unsigned char *)v11 + 144)) {
              WebCore::LocalFrame::resetAllGeolocationPermission(v11);
            }
          }
        }
        v6 += 8;
        v7 -= 8;
      }
      while (v7);
    }
    return WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v5);
  }
  return result;
}

uint64_t WebKit::SampleBufferDisplayLayer::hostingContextID(WebKit::SampleBufferDisplayLayer *this)
{
  if (*((unsigned char *)this + 132)) {
    return *((unsigned int *)this + 32);
  }
  else {
    return 0;
  }
}

atomic_uchar *WebKit::SampleBufferDisplayLayer::ref(atomic_uchar **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(this[1]);
}

atomic_uchar *WebKit::SampleBufferDisplayLayer::deref(atomic_uchar **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(this[1]);
}

uint64_t WebKit::SampleBufferDisplayLayer::controlBlock(WebKit::SampleBufferDisplayLayer *this)
{
  return *((void *)this + 1);
}

atomic_uchar *non-virtual thunk to'WebKit::SampleBufferDisplayLayer::ref(atomic_uchar **this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(this - 4));
}

atomic_uchar *non-virtual thunk to'WebKit::SampleBufferDisplayLayer::deref(atomic_uchar **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(this - 4));
}

uint64_t non-virtual thunk to'WebKit::SampleBufferDisplayLayer::controlBlock(WebKit::SampleBufferDisplayLayer *this)
{
  return *((void *)this - 4);
}

void WebKit::WebGamepad::~WebGamepad(WebKit::WebGamepad *this, void *a2)
{
  *(void *)this = &unk_1EE9F02C8;
  uint64_t v3 = (char *)this + 64;
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, a2);
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v4);

  WebCore::PlatformGamepad::~PlatformGamepad(this, v5);
}

{
  char *v3;
  void *v4;
  void *v5;
  WTF *v6;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_1EE9F02C8;
  uint64_t v3 = (char *)this + 64;
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, a2);
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v4);
  WebCore::PlatformGamepad::~PlatformGamepad(this, v5);

  WTF::fastFree(v6, v7);
}

double WebCore::PlatformGamepad::lastUpdateTime(WebCore::PlatformGamepad *this)
{
  return *((double *)this + 5);
}

uint64_t WebCore::PlatformGamepad::playEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v4 + 16))(v4, 0);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

uint64_t WebCore::PlatformGamepad::stopEffects(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

const char *WebCore::PlatformGamepad::source(WebCore::PlatformGamepad *this)
{
  return "Unknown";
}

uint64_t WebCore::GamepadProvider::isMockGamepadProvider(WebCore::GamepadProvider *this)
{
  return 0;
}

uint64_t WebCore::SampleBufferDisplayLayer::hostingContextID(WebCore::SampleBufferDisplayLayer *this)
{
  return 0;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (unsigned int **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (unsigned int *)-1)
      {
        uint64_t v5 = *v4;
        void *v4 = 0;
        if (v5)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebCore::PlatformGamepad::~PlatformGamepad(WebCore::PlatformGamepad *this, void *a2)
{
  *(void *)this = &unk_1EE9F04E8;
  uint64_t v3 = *((void *)this + 7);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *((void *)this + 1);
  if (v6)
  {
    *(void *)(v6 + 8) = 0;
    uint64_t v7 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v7)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteSampleBufferDisplayLayerManager::CreateLayer,WebKit::SampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::SampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F05A0;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteSampleBufferDisplayLayerManager::CreateLayer,WebKit::SampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::SampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F05A0;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteSampleBufferDisplayLayerManager::CreateLayer,WebKit::SampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::SampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(void *a1, IPC::Decoder *a2)
{
  uint64_t v2 = a1 + 1;
  if (a2 && *(void *)a2 && (uint64_t v4 = IPC::Decoder::decode<std::tuple<std::optional<unsigned int>>>(a2), v5))
  {
    uint64_t v6 = a1[2];
    if (v6 && *(void *)(v6 + 8))
    {
      uint64_t v7 = a1[1];
      *(_DWORD *)(v7 + 128) = v4;
      *(unsigned char *)(v7 + 132) = BYTE4(v4);
      uint64_t v8 = a1[3];
      a1[3] = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v8 + 16))(v8, BYTE4(v4) != 0);
    }
    else
    {
      uint64_t v8 = a1[3];
      a1[3] = 0;
      (*(void (**)(uint64_t, void))(*(void *)v8 + 16))(v8, 0);
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
    return v10(v8);
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::RemoteSampleBufferDisplayLayerManager::CreateLayer,WebKit::SampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(v2);
  }
}

uint64_t IPC::Connection::cancelReply<Messages::RemoteSampleBufferDisplayLayerManager::CreateLayer,WebKit::SampleBufferDisplayLayer::initialize(BOOL,WebCore::IntSize,BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = *a1;
    *(_DWORD *)(v2 + 128) = 0;
    *(unsigned char *)(v2 + 132) = 0;
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<unsigned int>>>(IPC::Decoder *a1)
{
  uint64_t result = IPC::Decoder::decode<std::optional<unsigned int>>(a1);
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v7 = *((void *)a1 + 3);
    if (v7 && v6 != 0)
    {
      uint64_t v9 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
      uint64_t v4 = 0;
      uint64_t result = v9;
    }
  }
  if (!v4) {
    return 0;
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteSampleBufferDisplayLayer::EnqueueVideoFrame>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1351;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<WebKit::SharedVideoFrame,void>::encode(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SampleBufferDisplayLayer::enqueueVideoFrame(WebCore::VideoFrame &)::$_0,void,IPC::Semaphore &>::call(uint64_t a1, IPC::Semaphore *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 48);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1358;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode((uint64_t)v6, a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SampleBufferDisplayLayer::enqueueVideoFrame(WebCore::VideoFrame &)::$_1,void,WebCore::SharedMemoryHandle &&>::call(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 48);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1357;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(v6, a2);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteAudioMediaStreamTrackRendererInternalUnitManager::CreateUnit,WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::createRemoteUnit(void)::$_0>(WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::createRemoteUnit(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9F0618;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteAudioMediaStreamTrackRendererInternalUnitManager::CreateUnit,WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::createRemoteUnit(void)::$_0>(WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::createRemoteUnit(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9F0618;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteAudioMediaStreamTrackRendererInternalUnitManager::CreateUnit,WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::createRemoteUnit(void)::$_0>(WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::createRemoteUnit(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    return;
  }
  uint64_t v3 = *a2;
  if (!v3) {
    return;
  }
  unint64_t v5 = a2[1];
  if (v5 <= a2[2] - v3)
  {
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v32 = a2[3];
    if (v32)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
        unint64_t v30 = 0;
        uint64_t v44 = *a2;
        uint64_t v45 = a2[1];
        uint64_t v46 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v31 = 0;
        if (v46 && v45)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v46 + 16))(v46, v44, v45);
          uint64_t v31 = *a2;
          unint64_t v30 = a2[1];
        }
      }
      else
      {
        unint64_t v30 = 0;
        uint64_t v31 = 0;
      }
    }
    goto LABEL_49;
  }
  uint64_t v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
    unint64_t v30 = v5;
    uint64_t v31 = v3;
LABEL_49:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v33 = a2[3];
    if (v33 && v30) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v31);
    }
    goto LABEL_50;
  }
  if (!v7)
  {
    LOBYTE(v55) = 0;
    unsigned __int8 v61 = 0;
    char v62 = 1;
    goto LABEL_9;
  }
  IPC::Decoder::decode<WebCore::CAAudioStreamDescription>(a2, (uint64_t)&v63);
  if (v69)
  {
    uint64_t v55 = MEMORY[0x1E4FB6B98] + 16;
    long long v57 = v65;
    long long v58 = v66;
    long long v59 = v67;
    int v60 = v68;
    long long v56 = v64;
    unsigned __int8 v61 = 1;
    char v62 = 1;
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v63);
    goto LABEL_9;
  }
LABEL_50:
  LOBYTE(v55) = 0;
  char v62 = 0;
  uint64_t v34 = *a2;
  uint64_t v35 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v36 = a2[3];
  if (!v36 || !v35 || ((*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 16))(v36, v34), !v62))
  {
    LOBYTE(v47) = 0;
    unsigned __int8 v54 = 0;
    goto LABEL_52;
  }
LABEL_9:
  unint64_t v8 = a2[1];
  uint64_t v9 = *a2;
  unint64_t v10 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v8 < v10 || v8 - v10 <= 7)
  {
    unint64_t v40 = 0;
    uint64_t v41 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v42 = a2[3];
    if (v42)
    {
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v42 + 16))(v42, v9, v8);
        uint64_t v41 = *a2;
        unint64_t v40 = a2[1];
      }
      else
      {
        unint64_t v40 = 0;
        uint64_t v41 = 0;
      }
    }
    goto LABEL_61;
  }
  uint64_t v12 = (uint64_t *)(v9 + v10);
  a2[2] = (uint64_t)(v12 + 1);
  if (!v9)
  {
    unint64_t v40 = v8;
    uint64_t v41 = 0;
LABEL_61:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v43 = a2[3];
    if (v43 && v40) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 16))(v43, v41);
    }
    int v16 = 0;
    LOBYTE(v47) = 0;
    int v14 = v61;
    BOOL v15 = v62 == 0;
    goto LABEL_18;
  }
  uint64_t v13 = *v12;
  LOBYTE(v47) = 0;
  char v52 = 0;
  int v14 = v61;
  if (v61)
  {
    uint64_t v47 = MEMORY[0x1E4FB6B98] + 16;
    long long v49 = v57;
    *(_OWORD *)unint64_t v50 = v58;
    *(_OWORD *)&v50[16] = v59;
    int v51 = v60;
    long long v48 = v56;
    char v52 = 1;
  }
  BOOL v15 = 0;
  uint64_t v53 = v13;
  int v16 = 1;
LABEL_18:
  unsigned __int8 v54 = v16;
  if (!v15 && v14)
  {
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v55);
    int v16 = v54;
  }
  if (!v16)
  {
LABEL_52:
    uint64_t v37 = *a2;
    uint64_t v38 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v39 = a2[3];
    if (!v39) {
      return;
    }
    if (!v38) {
      return;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 16))(v39, v37);
    if (!v54) {
      return;
    }
  }
  uint64_t v17 = *(void *)(a1 + 8);
  if (!v17) {
    goto LABEL_30;
  }
  uint64_t v18 = *(void *)(v17 + 8);
  if (!v18) {
    goto LABEL_30;
  }
  uint64_t v19 = v53;
  if (!v53 || !v52) {
    goto LABEL_30;
  }
  if (*(void *)(v18 + 216)) {
    WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::stopThread((unsigned int *)v18);
  }
  uint64_t v20 = (semaphore_t *)WTF::fastMalloc((WTF *)8);
  *uint64_t v20 = 0;
  v20[1] = 0;
  semaphore_create(*MEMORY[0x1E4F14960], v20 + 1, 0, 0);
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)(v18 + 216), (IPC::Semaphore *)v20);
  if (*(unsigned char *)(v18 + 168))
  {
    long long v21 = v49;
    *(_OWORD *)(v18 + 96) = v48;
    *(_OWORD *)(v18 + 112) = v21;
    *(void *)(v18 + 128) = *(void *)v50;
    *(_OWORD *)(v18 + 136) = *(_OWORD *)&v50[8];
    *(void *)(v18 + 152) = *(void *)&v50[24];
    *(_DWORD *)(v18 + 160) = v51;
  }
  else
  {
    *(void *)(v18 + 88) = MEMORY[0x1E4FB6B98] + 16;
    long long v22 = v49;
    long long v23 = *(_OWORD *)&v50[16];
    *(_OWORD *)(v18 + 128) = *(_OWORD *)v50;
    *(_OWORD *)(v18 + 144) = v23;
    *(_DWORD *)(v18 + 160) = v51;
    *(_OWORD *)(v18 + 96) = v48;
    *(_OWORD *)(v18 + 112) = v22;
    *(unsigned char *)(v18 + 168) = 1;
  }
  *(void *)(v18 + 200) = v19;
  for (uint64_t i = *(void *)(v18 + 40); i != *(void *)(v18 + 48); uint64_t i = *(void *)(v18 + 40))
  {
    uint64_t v25 = *(void *)(v18 + 56);
    uint64_t v26 = *(void *)(v25 + 8 * i);
    *(void *)(v25 + 8 * i) = 0;
    uint64_t v63 = v26;
    uint64_t v27 = *(void *)(v18 + 56);
    uint64_t v28 = *(void *)(v27 + 8 * i);
    *(void *)(v27 + 8 * i) = 0;
    if (v28)
    {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
      uint64_t i = *(void *)(v18 + 40);
    }
    if (i == *(unsigned int *)(v18 + 64) - 1) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = i + 1;
    }
    *(void *)(v18 + 40) = v29;
    uint64_t v55 = MEMORY[0x1E4FB6B98] + 16;
    long long v56 = v48;
    long long v57 = v49;
    long long v58 = *(_OWORD *)v50;
    long long v59 = *(_OWORD *)&v50[16];
    int v60 = v51;
    unsigned __int8 v61 = 1;
    WTF::CompletionHandler<void ()(std::optional<WebCore::CAAudioStreamDescription>)>::operator()(&v63, (uint64_t)&v55);
    if (v61) {
      WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v55);
    }
    if (v63) {
      (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
    }
  }
  if (*(unsigned char *)(v18 + 80)) {
    WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::start((IPC::Encoder *)v18);
  }
  if (v54)
  {
LABEL_30:
    if (v52) {
      WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v47);
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AudioMediaStreamTrackRendererInternalUnitManagerProxy::startThread(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(v1 + 192) = 0;
  do
  {
    uint64_t result = MEMORY[0x1997420D0](*(unsigned int *)(*(void *)(v1 + 216) + 4));
    if (result) {
      break;
    }
    unsigned __int8 v3 = atomic_load((unsigned __int8 *)(v1 + 232));
    if (v3) {
      break;
    }
    uint64_t v4 = *(WebCore::AudioSampleBufferList **)(*(void *)(v1 + 176) + 40);
    int v12 = 0;
    uint64_t v5 = *(void *)(v1 + 24);
    uint64_t v7 = *(void *)(v1 + 192);
    uint64_t v6 = *(void *)(v1 + 200);
    uint64_t v8 = mach_absolute_time();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, WebCore::AudioSampleBufferList *, uint64_t, int *, double))(*(void *)v5 + 16))(v5, v6, v4, v7, &v12, (double)v8);
    if (v12 == 16)
    {
      if (!*(unsigned char *)(v1 + 168))
      {
        __break(1u);
        return result;
      }
      uint64_t v9 = *(void *)(v1 + 200);
      unsigned int v10 = WebCore::CAAudioStreamDescription::bytesPerFrame((WebCore::CAAudioStreamDescription *)(v1 + 88));
      WebCore::AudioSampleBufferList::zeroABL(v4, (AudioBufferList *)(v9 * v10));
    }
    uint64_t result = WebCore::CARingBuffer::store(*(WebCore::CARingBuffer **)(v1 + 184), (const AudioBufferList *)v4);
    *(void *)(v1 + 192) += *(void *)(v1 + 200);
    unsigned __int8 v11 = atomic_load((unsigned __int8 *)(v1 + 232));
  }
  while ((v11 & 1) == 0);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrIP10__CVBufferEEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSC_iEEEEEEDcSG_DpT0_(uint64_t a1, const void **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2) {
    CFRelease(v2);
  }
}

unsigned int *WTF::Vector<WTF::WeakPtr<WebCore::PlatformGamepad,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      unsigned __int8 v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = result[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = v2;
      *(void *)unsigned __int8 v3 = result;
      if (v5)
      {
        uint64_t v7 = result;
        uint64_t v8 = 8 * v5;
        uint64_t v9 = (unsigned int **)v4;
        do
        {
          unsigned int v10 = *v9;
          WTF *v9 = 0;
          *(void *)uint64_t v7 = v10;
          uint64_t result = *v9;
          WTF *v9 = 0;
          if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, result);
            uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v7 += 2;
          ++v9;
          v8 -= 8;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)unsigned __int8 v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessPool::StoppedUsingGamepads,WebKit::WebGamepadProvider::stopMonitoringGamepads(WebCore::GamepadProviderClient &)::$_0>(WebKit::WebGamepadProvider::stopMonitoringGamepads(WebCore::GamepadProviderClient &)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(WTF *result, void *a2)
{
  uint64_t v2 = *((void *)result + 1);
  if (*(_DWORD *)(v2 + 56))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 60);
    if (v3)
    {
      uint64_t v4 = *(uint64_t **)(v2 + 48);
      uint64_t v5 = 8 * v3;
      do
      {
        uint64_t v6 = *v4;
        uint64_t *v4 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
      *(_DWORD *)(v2 + 60) = 0;
    }
    uint64_t result = *(WTF **)(v2 + 48);
    if (result)
    {
      *(void *)(v2 + 48) = 0;
      *(_DWORD *)(v2 + 56) = 0;
      uint64_t result = (WTF *)WTF::fastFree(result, a2);
    }
  }
  if (*(_DWORD *)(v2 + 72))
  {
    uint64_t v7 = *(unsigned int *)(v2 + 76);
    if (v7)
    {
      WTF::VectorDestructor<true,WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct(*(unsigned int **)(v2 + 64), (void *)(*(void *)(v2 + 64) + 8 * v7));
      *(_DWORD *)(v2 + 76) = 0;
    }
    uint64_t result = *(WTF **)(v2 + 64);
    if (result)
    {
      *(void *)(v2 + 64) = 0;
      *(_DWORD *)(v2 + 72) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessPool::PlayGamepadEffect,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F06A0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessPool::PlayGamepadEffect,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F06A0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessPool::PlayGamepadEffect,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessPool::StopGamepadEffects,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F06C8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessPool::StopGamepadEffects,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F06C8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessPool::StopGamepadEffects,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

unsigned int **WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::rehash(a1, v5, a2);
}

unsigned int **WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    do
    {
      uint64_t v13 = (unsigned int **)(v6 + 16 * v11);
      int v14 = *v13;
      if (*v13 != (unsigned int *)-1)
      {
        if (v14)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = ~(*((void *)v14 + 1) << 32) + *((void *)v14 + 1);
          unint64_t v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
          unint64_t v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
          unsigned int v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~(v19 << 27)));
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 16 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          uint64_t v24 = (unsigned int **)(v15 + 16 * v22);
          *uint64_t v24 = 0;
          uint64_t v25 = *v13;
          *uint64_t v13 = 0;
          *uint64_t v24 = v25;
          v24[1] = *(unsigned int **)(v6 + 16 * v11 + 8);
          uint64_t v26 = *v13;
          *uint64_t v13 = 0;
          if (v26 && atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v26);
            WTF::fastFree((WTF *)v26, v10);
          }
          if (v13 == a3) {
            int v12 = v24;
          }
        }
        else
        {
          *uint64_t v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    int v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>,WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  uint64_t v4 = *(void *)(*(void *)a2 + 8);
  unint64_t v5 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
  unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  unsigned int v8 = v3 & ((v7 >> 31) ^ v7);
  for (int i = 1; ; ++i)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void *)(v2 + 16 * v8);
    if (v11 != -1)
    {
      if (!v11) {
        return v2 + 16 * *(unsigned int *)(v2 - 4);
      }
      if (*(void *)(v11 + 8) == v4) {
        break;
      }
    }
    unsigned int v8 = (v10 + i) & v3;
  }
  return v2 + 16 * v10;
}

uint64_t *WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::remove(uint64_t *result, unsigned int **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2);
    uint64_t v9 = a2;
    uint64_t v10 = result;
    WTF::fastFree((WTF *)v2, a2);
    a2 = v9;
    uint64_t result = v10;
  }
  *a2 = (unsigned int *)-1;
  ++*(_DWORD *)(*result - 16);
  uint64_t v3 = *result;
  if (*result) {
    int v4 = *(_DWORD *)(v3 - 12) - 1;
  }
  else {
    int v4 = -1;
  }
  *(_DWORD *)(v3 - 12) = v4;
  uint64_t v5 = *result;
  if (*result)
  {
    unsigned int v6 = 6 * *(_DWORD *)(v5 - 12);
    unsigned int v7 = *(_DWORD *)(v5 - 4);
    if (v6 < v7 && v7 >= 9)
    {
      return (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::rehash(result, v7 >> 1, 0);
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *result;
  if (*result) {
    int v4 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  }
  else {
    int v4 = 0;
  }
  if (v4 == a2)
  {
    *a3 = 0;
    return result;
  }
  uint64_t v5 = a2[1];
  if (v5)
  {
    a2[1] = 0;
    uint64_t v3 = *result;
  }
  *a3 = v5;
  if (v3)
  {
    unsigned int v6 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v6 == a2) {
      return result;
    }
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v6 = 0;
  }
  if (v6 != a2) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::remove(result, a2);
  }
  return result;
}

_DWORD *WTF::RefCounted<WebCore::Geolocation>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    uint64_t v1 = (bmalloc::api *)MEMORY[0x19972FC40](result - 8);
    return (_DWORD *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>,WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::WeakRef<WebCore::Geolocation,WTF::DefaultWeakPtrImpl>>>,WebCore::Geolocation const*>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = ~(*a2 << 32) + *a2;
  unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  unsigned int v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
  for (int i = 1; ; ++i)
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(void *)(v2 + 16 * v7);
    if (v10 != -1)
    {
      if (!v10) {
        return v2 + 16 * *(unsigned int *)(v2 - 4);
      }
      if (*(void *)(v10 + 8) == *a2) {
        break;
      }
    }
    unsigned int v7 = (v9 + i) & v3;
  }
  return v2 + 16 * v9;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  uint64_t v10 = v7;
  uint64_t v11 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 40 * a2);
  }
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = v5;
    uint64_t v43 = v5;
    do
    {
      uint64_t v15 = (WTF::ASCIICaseInsensitiveHash **)(v4 + 40 * v12);
      if (*v15 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v15, 0, v9))
        {
          uint64_t v16 = v4 + 40 * v12;
          unint64_t v17 = *(unsigned int ***)(v16 + 24);
          if (v17) {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v17, v8);
          }
          unint64_t v18 = *(unsigned int ***)(v16 + 8);
          if (v18) {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v18, v8);
          }
          unint64_t v19 = *v15;
          *uint64_t v15 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2) {
              WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v8);
            }
            else {
              *(_DWORD *)v19 -= 2;
            }
          }
        }
        else
        {
          uint64_t v46 = v13;
          uint64_t v20 = *a1;
          if (*a1) {
            int v21 = *(_DWORD *)(v20 - 8);
          }
          else {
            int v21 = 0;
          }
          unsigned int v22 = WTF::ASCIICaseInsensitiveHash::hash(*v15, (const WTF::StringImpl *)v8);
          int v23 = 0;
          do
          {
            unsigned int v24 = v22 & v21;
            uint64_t v25 = (WTF **)(v20 + 40 * (v22 & v21));
            int v26 = WTF::equal(*v25, 0, v9);
            unsigned int v22 = ++v23 + v24;
          }
          while (!v26);
          uint64_t v27 = v20 + 40 * v24;
          unint64_t v30 = *(unsigned int ***)(v27 + 24);
          uint64_t v29 = (void *)(v27 + 24);
          uint64_t v28 = v30;
          if (v30) {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v28, v8);
          }
          uint64_t v31 = v29 - 2;
          uint64_t v32 = (unsigned int **)*(v29 - 2);
          if (v32) {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v32, v8);
          }
          uint64_t v33 = *v25;
          *uint64_t v25 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2) {
              WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v8);
            }
            else {
              *(_DWORD *)v33 -= 2;
            }
          }
          uint64_t v34 = *v15;
          *uint64_t v15 = 0;
          *uint64_t v25 = v34;
          uint64_t v35 = v4 + 40 * v12;
          *uint64_t v31 = 0;
          uint64_t v37 = *(void *)(v35 + 8);
          uint64_t v36 = v35 + 8;
          *(void *)uint64_t v36 = 0;
          *uint64_t v31 = v37;
          uint64_t v38 = v20 + 40 * v24;
          *(void *)(v38 + ++*(_DWORD *)(this + 16) = *(void *)(v36 + 8);
          void *v29 = 0;
          uint64_t v39 = *(void *)(v36 + 16);
          *(void *)(v36 + ++*(_DWORD *)(this + 16) = 0;
          void *v29 = v39;
          *(void *)(v38 + 32) = *(void *)(v36 + 24);
          unint64_t v40 = *(unsigned int ***)(v36 + 16);
          if (v40) {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v40, v8);
          }
          uint64_t v13 = v46;
          uint64_t v14 = v43;
          if (*(void *)v36) {
            WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*(unsigned int ***)v36, v8);
          }
          uint64_t v41 = *v15;
          *uint64_t v15 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2) {
              WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v8);
            }
            else {
              *(_DWORD *)v41 -= 2;
            }
          }
          if (v15 == a3) {
            uint64_t v13 = v20 + 40 * v24;
          }
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v13;
}

BOOL WTF::WeakHashMap<WebKit::WebPage,WebCore::RegistrableDomain,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)a1;
  if (*(void *)a1)
  {
    int v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
    {
      BOOL v9 = 0;
      goto LABEL_21;
    }
    int v5 = 0;
    unsigned int v6 = v4 - 1;
    do
    {
      uint64_t v7 = v3 + 16 * v6;
      if ((unint64_t)(*(void *)v7 + 1) >= 2 && !*(void *)(*(void *)v7 + 8))
      {
        WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>>::customDeleteBucket(v7, a2);
        ++v5;
      }
    }
    while ((unint64_t)v6--);
    uint64_t v3 = *(void *)a1;
    BOOL v9 = v5 != 0;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      uint64_t v10 = *(void *)a1;
      if (*(void *)a1) {
        int v11 = *(_DWORD *)(v10 - 12);
      }
      else {
        int v11 = 0;
      }
      *(_DWORD *)(v10 - 12) = v11 - v5;
      uint64_t v3 = *(void *)a1;
    }
    if (v3)
    {
      unsigned int v12 = *(_DWORD *)(v3 - 4);
      uint64_t v13 = *(unsigned int *)(v3 - 12);
      if (v12 >= 9 && 6 * (int)v13 < v12)
      {
        unsigned int v18 = (v13 - 1) | ((v13 - 1) >> 1) | (((v13 - 1) | ((v13 - 1) >> 1)) >> 2);
        unsigned int v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
        unint64_t v20 = (v19 | HIWORD(v19)) + 1;
        if (v20 > 0x400)
        {
          if (v20 > 2 * v13) {
            goto LABEL_32;
          }
        }
        else if (3 * v20 > 4 * v13)
        {
LABEL_30:
          double v21 = (double)v13;
          double v22 = (double)v20;
          double v23 = 0.604166667;
          goto LABEL_33;
        }
        LODWORD(v20) = 2 * v20;
        if (v20 <= 0x400) {
          goto LABEL_30;
        }
LABEL_32:
        double v21 = (double)v13;
        double v22 = (double)v20;
        double v23 = 0.416666667;
LABEL_33:
        if (v22 * v23 <= v21) {
          LODWORD(v20) = 2 * v20;
        }
        if (v20 <= 8) {
          unsigned int v24 = 8;
        }
        else {
          unsigned int v24 = v20;
        }
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)a1, v24, 0);
        uint64_t v3 = *(void *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          unsigned int v15 = 0;
          goto LABEL_25;
        }
LABEL_22:
        unsigned int v15 = *(_DWORD *)(v3 - 12);
        int v16 = 0x7FFFFFFF;
        if (v15 >= 0x7FFFFFFF) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
LABEL_21:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_22;
    }
  }
  else
  {
    BOOL v9 = 0;
  }
  unsigned int v15 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
  int v16 = v15;
LABEL_26:
  *(_DWORD *)(a1 + 12) = 2 * v16;
  return v9;
}

WTF::StringImpl *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>>::customDeleteBucket(uint64_t a1, void *a2)
{
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket((unsigned int **)a1, a2);
  uint64_t result = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v7;
    while (1)
    {
      uint64_t v14 = (unsigned int **)(v6 + 16 * v11);
      unsigned int v15 = *v14;
      if (*v14 != (unsigned int *)-1)
      {
        if (v15)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            unsigned int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            unsigned int v19 = 0;
          }
          int v20 = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash((void *)(v6 + 16 * v11));
          int v21 = 0;
          do
          {
            uint64_t v22 = v20 & v19;
            int v20 = ++v21 + v22;
          }
          while (*(void *)(v18 + 16 * v22));
          uint64_t v23 = v18 + 16 * v22;
          unsigned int v24 = *(WTF::StringImpl **)(v23 + 8);
          *(void *)(v23 + 8) = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 != 2)
            {
              *(_DWORD *)v24 -= 2;
              goto LABEL_19;
            }
            WTF::StringImpl::destroy(v24, v10);
            uint64_t v29 = *(unsigned int **)v23;
            *(void *)uint64_t v23 = 0;
            if (v29 && atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v29);
              WTF::fastFree((WTF *)v29, v10);
            }
          }
          else
          {
LABEL_19:
            *(void *)uint64_t v23 = 0;
          }
          uint64_t v25 = *v14;
          *uint64_t v14 = 0;
          *(void *)uint64_t v23 = v25;
          uint64_t v26 = v6 + 16 * v11;
          uint64_t v27 = *(void *)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          *(void *)(v23 + 8) = v27;
          uint64_t v28 = *(WTF::StringImpl **)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v10);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          unint64_t v30 = *v14;
          *uint64_t v14 = 0;
          if (v30 && atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v30);
            WTF::fastFree((WTF *)v30, v10);
          }
          if (v14 == a3) {
            uint64_t v12 = v23;
          }
          goto LABEL_34;
        }
        uint64_t v16 = v6 + 16 * v11;
        unint64_t v17 = *(WTF::StringImpl **)(v16 + 8);
        *(void *)(v16 + 8) = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::destroy(v17, v10);
            unsigned int v15 = *v14;
          }
          else
          {
            *(_DWORD *)v17 -= 2;
          }
        }
        *uint64_t v14 = 0;
        if (v15)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, v10);
          }
        }
      }
LABEL_34:
      if (++v11 == v13) {
        goto LABEL_39;
      }
    }
  }
  uint64_t v12 = 0;
  uint64_t result = 0;
  if (v6)
  {
LABEL_39:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::RegistrableDomain const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WebCore::RegistrableDomain const&,BOOL>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  char v4 = *(unsigned char *)(a2 + 8);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  int v6 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*a2);
  for (i = 0; ; int v6 = i + v8)
  {
    uint64_t v8 = v6 & v5;
    uint64_t v9 = *(void *)(v2 + 16 * v8);
    if (v9 == -1) {
      goto LABEL_6;
    }
    if (!v9) {
      break;
    }
    if (v9 == *a2) {
      return v2 + 16 * v8;
    }
LABEL_6:
    ++i;
  }
  if (*a1) {
    return *a1 + 16 * *(unsigned int *)(*a1 - 4);
  }
  else {
    return 0;
  }
}

WTF::StringImpl *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(uint64_t *a1, void *a2)
{
  unint64_t result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WTF::StringImpl *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v5 = *(_DWORD *)(v2 - 8);
  unsigned int v6 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v5;
  unsigned int v7 = (WTF **)(v2 + 40 * v6);
  if (WTF::equal(*v7, 0, v8))
  {
LABEL_7:
    if (*a1) {
      return *a1 + 40 * *(unsigned int *)(*a1 - 4);
    }
    else {
      return 0;
    }
  }
  else
  {
    int v10 = 1;
    while (*v7 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v7, *a2, v9) & 1) == 0)
    {
      unsigned int v6 = (v6 + v10) & v5;
      unsigned int v7 = (WTF **)(v2 + 40 * v6);
      ++v10;
      if (WTF::equal(*v7, 0, v9)) {
        goto LABEL_7;
      }
    }
  }
  return (uint64_t)v7;
}

unsigned int **WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  unint64_t result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (unsigned int **)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::WebGeolocationManager::PageSets,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

unsigned int **WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::WebGeolocationManager::PageSets>>::customDeleteBucket(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>((WTF::StringImpl **)a1, a2);
  uint64_t v4 = *(unsigned int ***)(a1 + 24);
  if (v4) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, v3);
  }
  unint64_t result = *(unsigned int ***)(a1 + 8);
  if (result)
  {
    return (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(result, v3);
  }
  return result;
}

uint64_t WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)result;
  if (*(void *)result)
  {
    int v6 = *(_DWORD *)(v4 - 8);
    unint64_t result = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
    for (i = 0; ; unint64_t result = (i + v8))
    {
      uint64_t v8 = result & v6;
      uint64_t v9 = *(void *)(v4 + 16 * v8);
      if (v9 != -1)
      {
        if (!v9) {
          goto LABEL_7;
        }
        if (v9 == a2) {
          break;
        }
      }
      ++i;
    }
    int v10 = *(_DWORD **)(v4 + 16 * v8 + 8);
    if (v10) {
      *v10 += 2;
    }
  }
  else
  {
LABEL_7:
    int v10 = 0;
  }
  *a3 = v10;
  return result;
}

unsigned int *WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebKit::WebPage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebKit::WebPage,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WebKit::WebPage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebKit::WebPage&)#1},WTF::Vector<WTF::WeakPtr<WebKit::WebPage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebKit::WebPage,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map(unsigned int *result, _DWORD *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)a2;
  if (!*(void *)a2) {
    goto LABEL_22;
  }
  int v5 = *(_DWORD *)(v4 - 4);
  if (!v5) {
    goto LABEL_21;
  }
  int v6 = 0;
  unsigned int v7 = v5 - 1;
  do
  {
    uint64_t v8 = v7;
    unint64_t result = *(unsigned int **)(v4 + 8 * v7);
    if ((unint64_t)result + 1 >= 2 && !*((void *)result + 1))
    {
      *(void *)(v4 + 8 * v7) = 0;
      if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        unint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
      }
      *(void *)(v4 + 8 * v7) = -1;
      ++v6;
    }
    --v7;
  }
  while (v8);
  uint64_t v4 = *(void *)a2;
  if (v6)
  {
    *(_DWORD *)(v4 - 16) += v6;
    uint64_t v9 = *(void *)a2;
    if (*(void *)a2) {
      int v10 = *(_DWORD *)(v9 - 12);
    }
    else {
      int v10 = 0;
    }
    *(_DWORD *)(v9 - 12) = v10 - v6;
    uint64_t v4 = *(void *)a2;
  }
  if (!v4)
  {
LABEL_22:
    a2[2] = 0;
    goto LABEL_23;
  }
  unsigned int v11 = *(_DWORD *)(v4 - 4);
  if (v11 >= 9 && 6 * *(_DWORD *)(v4 - 12) < v11)
  {
    unint64_t result = (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
    uint64_t v4 = *(void *)a2;
    a2[2] = 0;
    if (v4) {
      goto LABEL_25;
    }
LABEL_23:
    a2[3] = 0;
    goto LABEL_31;
  }
LABEL_21:
  a2[2] = 0;
LABEL_25:
  unsigned int v13 = *(_DWORD *)(v4 - 12);
  if (v13 >= 0x7FFFFFFF) {
    int v14 = -2;
  }
  else {
    int v14 = 2 * v13;
  }
  a2[3] = v14;
  uint64_t v15 = *(unsigned int *)(v4 - 12);
  if (v15)
  {
    if (v15 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v16 = WTF::fastMalloc((WTF *)(8 * v15));
    v3[2] = v15;
    *(void *)uint64_t v3 = v16;
  }
LABEL_31:
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)a2, &v31);
  uint64_t v17 = *(void *)a2;
  if (*(void *)a2)
  {
    uint64_t v18 = *(unsigned int *)(v17 - 4);
    unsigned int v19 = (void *)(v17 + 8 * v18);
  }
  else
  {
    unsigned int v19 = 0;
    uint64_t v18 = 0;
  }
  uint64_t v26 = a2;
  uint64_t v27 = v19;
  uint64_t v28 = v19;
  uint64_t v29 = v19;
  uint64_t v30 = v17 + 8 * v18;
  unint64_t result = (unsigned int *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v26);
  for (int i = v32; v32 != v27; int i = v32)
  {
    uint64_t v21 = *(void *)(*i + 8);
    if (v21) {
      uint64_t v22 = v21 - 16;
    }
    else {
      uint64_t v22 = 0;
    }
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v22 + 24), v22 + 16);
    uint64_t v23 = *(atomic_uint **)(v22 + 24);
    if (v23) {
      atomic_fetch_add(v23, 1u);
    }
    uint64_t v24 = v3[3];
    *(void *)(*(void *)v3 + 8 * v24) = v23;
    v3[3] = v24 + 1;
    uint64_t v25 = v32;
    do
      uint64_t v32 = ++v25;
    while (v25 != v33 && (unint64_t)(*v25 + 1) <= 1);
    unint64_t result = (unsigned int *)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v31);
    ++*(_DWORD *)(v31 + 8);
  }
  return result;
}

void WebKit::InjectedBundle::~InjectedBundle(WebKit::InjectedBundle *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F06F0;
  uint64_t v3 = (const void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  int v6 = (const char ***)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v6) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v6);
  }
  unsigned int v7 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
}

{
  uint64_t vars8;

  WebKit::InjectedBundle::~InjectedBundle(this, a2);

  JUMPOUT(0x199740C10);
}

void WebKit::InjectedBundle::postMessage(WebKit::InjectedBundle *this, const WTF::String *a2, API::Object *a3)
{
  {
    uint64_t v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  uint64_t v4 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v11[0] = (uint64_t *)&unk_1EE9E6F68;
  WebKit::UserData::transform(a3, (uint64_t)v11, &v9);
  uint64_t v5 = v9;
  uint64_t v9 = 0;
  uint64_t v10 = v5;
  v11[0] = (uint64_t *)a2;
  v11[1] = &v10;
  IPC::Connection::send<Messages::WebProcessPool::HandleMessage>(v4, v11, 0, 0, 0);
  uint64_t v6 = v10;
  uint64_t v10 = 0;
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  uint64_t v7 = v9;
  uint64_t v9 = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

uint64_t IPC::Connection::send<Messages::WebProcessPool::HandleMessage>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 2583;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, *a2);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(v10, a2[1]);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  unsigned int v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

void WebKit::InjectedBundle::postSynchronousMessage(uint64_t a1, uint64_t *a2, const void *a3, CFTypeRef **a4)
{
  {
    int v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v14);
  }
  uint64_t v6 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v18 = &unk_1EE9E6F68;
  WebKit::UserData::transform(a3, (uint64_t)&v18, &v15);
  uint64_t v7 = v15;
  uint64_t v15 = 0;
  uint64_t v16 = v7;
  v17[0] = a2;
  v17[1] = &v16;
  IPC::Connection::sendSync<Messages::WebProcessPool::HandleSynchronousMessage>(v6, v17, 0, 0, (uint64_t)&v18, INFINITY);
  uint64_t v8 = v16;
  uint64_t v16 = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  uint64_t v9 = v15;
  uint64_t v15 = 0;
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  if (v20)
  {
    uint64_t v10 = *a4;
    *a4 = 0;
  }
  else
  {
    uint64_t v10 = v19;
    if (v19) {
      CFRetain(v19[1]);
    }
    v17[0] = (uint64_t *)&unk_1EE9E6F38;
    WebKit::UserData::transform(v10, (uint64_t)v17, &v16);
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    uint64_t v12 = *a4;
    *a4 = (CFTypeRef *)v11;
    if (v12)
    {
      CFRelease(v12[1]);
      uint64_t v13 = v16;
      uint64_t v16 = 0;
      if (v13) {
        CFRelease(*(CFTypeRef *)(v13 + 8));
      }
    }
  }
  if (v10) {
    CFRelease(v10[1]);
  }
  if (v20 != -1) {
    ((void (*)(uint64_t **, void **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14WebProcessPool24HandleSynchronousMessageEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v20])(v17, &v18);
  }
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebProcessPool::HandleSynchronousMessage>@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v31 = 0;
  IPC::Connection::createSyncMessageEncoder(3821, a3, &v31, &v30);
  uint64_t v11 = v30;
  if (a4)
  {
    **((unsigned char **)v30 + 66) |= 4u;
    *(unsigned char *)(a1 + 96) = 1;
  }
  IPC::Encoder::operator<<<std::tuple<WTF::String const&,WebKit::UserData const&>>(v11, a2);
  IPC::Connection::sendSyncMessage(a1, v31, (uint64_t *)&v30, a4, (uint64_t)&v28, a6);
  if (!v29)
  {
    LOBYTE(v26) = 0;
    unsigned __int8 v27 = 0;
    IPC::Decoder::operator>><std::tuple<WebKit::UserData>>(v28, (uint64_t)&v26);
    if (v27)
    {
      if (v29) {
        goto LABEL_19;
      }
      int v14 = v28;
      uint64_t v28 = 0;
      uint64_t v15 = v26;
      if (v26)
      {
        CFRetain(*(CFTypeRef *)(v26 + 8));
        CFRetain(*(CFTypeRef *)(v15 + 8));
        CFRelease(*(CFTypeRef *)(v15 + 8));
        int v16 = v27;
        *(void *)a5 = v14;
        *(void *)(a5 + 8) = v15;
        *(_DWORD *)(a5 + ++*(_DWORD *)(this + 16) = 0;
        if (!v16) {
          goto LABEL_13;
        }
      }
      else
      {
        *(void *)a5 = v14;
        *(void *)(a5 + 8) = 0;
        *(_DWORD *)(a5 + ++*(_DWORD *)(this + 16) = 0;
      }
      uint64_t v17 = v26;
      uint64_t v26 = 0;
      if (v17) {
        CFRelease(*(CFTypeRef *)(v17 + 8));
      }
    }
    else
    {
      *(unsigned char *)a5 = 13;
      *(_DWORD *)(a5 + ++*(_DWORD *)(this + 16) = 1;
    }
LABEL_13:
    int v12 = v29;
    if (v29 == -1) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v29 != 1)
  {
LABEL_19:
    uint64_t v21 = (WebKit::InjectedBundle *)std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)WebKit::InjectedBundle::addOriginAccessAllowListEntry(v21, v22, v23, v24, v25);
  }
  *(unsigned char *)a5 = (_BYTE)v28;
  int v12 = 1;
  *(_DWORD *)(a5 + ++*(_DWORD *)(this + 16) = 1;
LABEL_14:
  ((void (*)(uint64_t *, IPC::Decoder **))off_1EE9F0908[v12])(&v26, &v28);
LABEL_15:
  unint64_t result = v30;
  uint64_t v30 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v19, v20);
  }
  return result;
}

uint64_t WebKit::InjectedBundle::addOriginAccessAllowListEntry(WebKit::InjectedBundle *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4, const WTF::String *a5)
{
  WebCore::SecurityOrigin::createFromString((uint64_t *)v14, a2, a2);
  WebCore::SecurityPolicy::addOriginAccessAllowlistEntry(v14[0], a3, a4, a5);
  uint64_t v10 = v14[0];
  v14[0] = 0;
  if (v10) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v10, v9);
  }
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v11 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                  + 24);
  v14[0] = a2;
  v14[1] = a3;
  uint64_t v14[2] = a4;
  char v15 = (char)a5;
  return IPC::Connection::send<Messages::NetworkConnectionToWebProcess::AddOriginAccessAllowListEntry>(v11, (uint64_t)v14, 0, 0, 0);
}

uint64_t IPC::Connection::send<Messages::NetworkConnectionToWebProcess::AddOriginAccessAllowListEntry>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 223;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,BOOL>,0ul,1ul,2ul,3ul>(v10, a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t WebKit::InjectedBundle::removeOriginAccessAllowListEntry(WebKit::InjectedBundle *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4, const WTF::String *a5)
{
  WebCore::SecurityOrigin::createFromString((uint64_t *)v14, a2, a2);
  WebCore::SecurityPolicy::removeOriginAccessAllowlistEntry(v14[0], a3, a4, a5);
  uint64_t v10 = v14[0];
  v14[0] = 0;
  if (v10) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v10, v9);
  }
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v11 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                  + 24);
  v14[0] = a2;
  v14[1] = a3;
  uint64_t v14[2] = a4;
  char v15 = (char)a5;
  return IPC::Connection::send<Messages::NetworkConnectionToWebProcess::RemoveOriginAccessAllowListEntry>(v11, (uint64_t)v14, 0, 0, 0);
}

uint64_t IPC::Connection::send<Messages::NetworkConnectionToWebProcess::RemoveOriginAccessAllowListEntry>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 271;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,BOOL>,0ul,1ul,2ul,3ul>(v10, a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t WebKit::InjectedBundle::resetOriginAccessAllowLists(WebKit::InjectedBundle *this)
{
  WebCore::SecurityPolicy::resetOriginAccessAllowlists(this);
  {
    uint64_t v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v3);
  }
  uint64_t v1 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  char v4 = 0;
  return IPC::Connection::send<Messages::NetworkConnectionToWebProcess::ResetOriginAccessAllowLists>(v1, (uint64_t)&v4, 0, 0, 0);
}

uint64_t IPC::Connection::send<Messages::NetworkConnectionToWebProcess::ResetOriginAccessAllowLists>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 275;
  *((void *)v9 + 1) = a3;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  int v16 = v9;
  uint64_t v11 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v16, a4, a5);
  uint64_t v12 = v16;
  int v16 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

uint64_t WebKit::InjectedBundle::setAsynchronousSpellCheckingEnabled(WebKit::InjectedBundle *this, char a2)
{
  uint64_t v3 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v3 = &unk_1EE9F0928;
  *(unsigned char *)(v3 + 8) = a2;
  uint64_t v5 = v3;
  WebCore::Page::forEachPage();
  uint64_t result = v5;
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WebKit::InjectedBundle::numberOfPages(WebKit::InjectedBundle *this, WebKit::WebFrame *a2, double a3, double a4, const WebCore::FloatSize *a5)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = *((void *)a2 + 3);
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6 || *(unsigned char *)(v6 + 144)) {
    return 0xFFFFFFFFLL;
  }
  double v9 = a3;
  if (a3 == 0.0)
  {
    WebCore::Widget::frameRect(*(WebCore::Widget **)(v6 + 288));
    double v9 = (double)v10;
  }
  if (a4 == 0.0)
  {
    WebCore::Widget::frameRect(*(WebCore::Widget **)(v6 + 288));
    a4 = (double)v11;
  }
  float v12 = v9;
  float v13 = a4;
  *(float *)int v14 = v12;
  *(float *)&v14[1] = v13;
  return WebCore::PrintContext::numberOfPages((WebCore::PrintContext *)v6, (WebCore::LocalFrame *)v14, a5);
}

uint64_t WebKit::InjectedBundle::pageNumberForElementById(WebKit::InjectedBundle *this, WebKit::WebFrame *a2, const WTF::String *a3, double a4, double a5)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = *((void *)a2 + 3);
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6 || *(unsigned char *)(v6 + 144)) {
    return 0xFFFFFFFFLL;
  }
  int v10 = (unsigned int *)(v6 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
  WebCore::TreeScope::getElementById((uint64_t *)&v13, (WebCore::TreeScope *)(*(void *)(v6 + 296) + 104), a3);
  if (v13)
  {
    if (a4 == 0.0) {
      WebCore::Widget::frameRect(*(WebCore::Widget **)(v6 + 288));
    }
    if (a5 == 0.0) {
      WebCore::Widget::frameRect(*(WebCore::Widget **)(v6 + 288));
    }
    uint64_t v7 = WebCore::PrintContext::pageNumberForElement();
    int v11 = v13;
    float v13 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 7) == 2)
      {
        if ((*((_WORD *)v11 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v11);
        }
      }
      else
      {
        *((_DWORD *)v11 + 7) -= 2;
      }
    }
  }
  else
  {
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v10);
  return v7;
}

void WebKit::InjectedBundle::pageSizeAndMarginsInPixels(WebKit::WebFrame *a1@<X1>, void *a2@<X8>, int a3)
{
  if (a1 && (v4 = *((void *)a1 + 3)) != 0 && (uint64_t v5 = *(void *)(v4 + 8)) != 0 && !*(unsigned char *)(v5 + 144)) {
    MEMORY[0x1F416CFE8]();
  }
  else {
    *a2 = 0;
  }
}

uint64_t WebKit::InjectedBundle::isPageBoxVisible(WebKit::InjectedBundle *this, WebKit::WebFrame *a2)
{
  if (a2 && (v2 = *((void *)a2 + 3)) != 0 && (uint64_t v3 = *(void *)(v2 + 8)) != 0 && !*(unsigned char *)(v3 + 144)) {
    return MEMORY[0x1F416CFD0]();
  }
  else {
    return 0;
  }
}

uint64_t WebKit::InjectedBundle::javaScriptObjectsCount(WebKit::InjectedBundle *this)
{
  uint64_t v1 = (uint64_t *)MEMORY[0x1E4FB64D8];
  if (!*MEMORY[0x1E4FB64D8]) {
    WebCore::commonVMSlow(this);
  }
  MEMORY[0x19972D160](v5);
  uint64_t v2 = *v1;
  if (!*v1) {
    uint64_t v2 = WebCore::commonVMSlow(0);
  }
  uint64_t v3 = JSC::Heap::objectCount((JSC::Heap *)(v2 + 192));
  MEMORY[0x19972D170](v5);
  return v3;
}

uint64_t WebKit::InjectedBundle::reportException(uint64_t this, const OpaqueJSContext *a2, const OpaqueJSValue *a3)
{
  if (this)
  {
    if (a2)
    {
      JSC::JSLockHolder::JSLockHolder();
      WebCore::reportExceptionIfJSDOMWindow();
      return MEMORY[0x19972D170](v3);
    }
  }
  return this;
}

void WebKit::InjectedBundle::didReceiveMessageToPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 40);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 40))(v8, a1, a2, a3, a4);
  double v9 = *(const void **)(a1 + 8);

  CFRelease(v9);
}

uint64_t WebKit::InjectedBundle::setUserStyleSheetLocation(WebKit::InjectedBundle *this, WTF::StringImpl **a2)
{
  uint64_t v2 = *a2;
  if (*a2) {
    *(_DWORD *)v2 += 2;
  }
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EE9F0950;
  if (v2) {
    *(_DWORD *)v2 += 2;
  }
  v3[1] = v2;
  uint64_t v6 = (uint64_t)v3;
  WebCore::Page::forEachPage();
  uint64_t result = v6;
  if (v6) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      return WTF::StringImpl::destroy(v2, v4);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  return result;
}

uint64_t WebKit::InjectedBundle::createWebDataFromUint8Array@<X0>(unint64_t a1@<X2>, WebKit **a2@<X8>)
{
  JSC::JSLockHolder::JSLockHolder();
  if (!a1) {
    a1 = 2;
  }
  if ((a1 & 0xFFFE000000000002) != 0 || *(unsigned char *)(a1 + 5) != 40)
  {
LABEL_38:
    float v12 = 0;
    goto LABEL_31;
  }
  int v6 = *(unsigned __int8 *)(a1 + 40);
  char v7 = v6 - 88;
  if ((v6 - 88) > 0x35) {
    goto LABEL_12;
  }
  if (((1 << v7) & 0x3D) == 0)
  {
    if (((1 << v7) & 0x3D000000000000) != 0)
    {
      uint64_t v8 = *(WTF::DeferrableRefCountedBase **)(a1 + 48);
      if (!v8) {
        goto LABEL_16;
      }
LABEL_15:
      *(_DWORD *)v8 += 2;
      goto LABEL_16;
    }
LABEL_12:
    if (v6 != 16 && v6 != 48)
    {
      uint64_t v8 = 0;
      goto LABEL_16;
    }
    uint64_t v8 = (WTF::DeferrableRefCountedBase *)JSC::JSArrayBufferView::slowDownAndWasteMemory((JSC::JSArrayBufferView *)a1);
    if (!v8) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v8 = *(WTF::DeferrableRefCountedBase **)(*(void *)(a1 + 8) - 8);
  if (v8) {
    goto LABEL_15;
  }
LABEL_16:
  int v20 = v8;
  if (*(unsigned char *)(a1 + 40))
  {
    char v10 = 0;
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 24);
    char v10 = 1;
  }
  JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate((uint64_t *)&v20, *(void *)(a1 + 32), v9, v10, (uint64_t *)&v19);
  int v11 = v20;
  int v20 = 0;
  if (v11) {
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v11);
  }
  float v12 = v19;
  if (v19)
  {
    if (JSC::ArrayBufferView::isDetached(v19)
      || (*(void *)(*((void *)v12 + 4) + 32)
        ? (float v13 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance)
        : (float v13 = 0),
          !v13))
    {
      float v12 = v19;
      goto LABEL_31;
    }
    int v14 = v19;
    unsigned int v19 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 != 1)
      {
        float v12 = 0;
        --*(_DWORD *)v14;
        goto LABEL_31;
      }
      JSC::ArrayBufferView::operator delete();
    }
    goto LABEL_38;
  }
LABEL_31:
  char v15 = (const void *)JSC::ArrayBufferView::baseAddress(v12);
  int v16 = (WTF *)JSC::ArrayBufferView::byteLength(v12);
  API::Data::create(v16, v15, a2);
  if (v12)
  {
    if (*(_DWORD *)v12 == 1) {
      JSC::ArrayBufferView::operator delete();
    }
    else {
      --*(_DWORD *)v12;
    }
  }
  return MEMORY[0x19972D170](v18);
}

WTF::StringImpl *WebKit::InjectedBundle::liveDocumentURLs@<X0>(WebKit::InjectedBundle *this@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  uint64_t result = (WTF::StringImpl *)WebCore::Document::allDocuments((uint64_t *)&v16, this);
  int v6 = v17;
  char v7 = v19;
  if (v17 != v19)
  {
    uint64_t v8 = v18;
    do
    {
      uint64_t v9 = v6[4];
      uint64_t v10 = *(void *)(v9 + 8);
      long long v11 = *(_OWORD *)(v10 + 448);
      v20[0] = *(_OWORD *)(v10 + 432);
      v20[1] = v11;
      uint64_t result = WTF::HashMap<WTF::UUID,WTF::String,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String const&>(a3, v20, (_DWORD **)(*(void *)(v9 + 8) + 768), (uint64_t)&v15);
      while (1)
      {
        v6 += 6;
        if (v6 == v8) {
          break;
        }
        uint64_t v12 = v6[2];
        if (*v6 | v6[1] | v12) {
          BOOL v13 = v12 == -1;
        }
        else {
          BOOL v13 = 1;
        }
        if (!v13) {
          goto LABEL_11;
        }
      }
      int v6 = v8;
LABEL_11:
      ;
    }
    while (v6 != v7);
  }
  if (a2)
  {
    int v14 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)int v14 = &unk_1EE9F0978;
    *((void *)v14 + 1) = a3;
    int v16 = v14;
    WebCore::Page::forEachPage();
    uint64_t result = v16;
    int v16 = 0;
    if (result) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

WTF::StringImpl *WTF::HashMap<WTF::UUID,WTF::String,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String const&>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::String>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::String,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    unsigned int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  int v30 = -1640531527;
  __int16 v31 = 0;
  char v32 = 0;
  WTF::addArgs<WTF::UUID>(&v30, a2);
  uint64_t result = (WTF::StringImpl *)WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v30);
  uint64_t v12 = result & v9;
  BOOL v13 = (WTF::StringImpl *)(v8 + 32 * v12);
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  if (*(_OWORD *)v13 != 0)
  {
    int v16 = 0;
    int v17 = 1;
    do
    {
      if (v14 == a2[1] && v15 == *a2)
      {
        uint64_t v20 = *a1;
        if (*a1) {
          uint64_t v21 = *(unsigned int *)(v20 - 4);
        }
        else {
          uint64_t v21 = 0;
        }
        char v29 = 0;
        uint64_t v28 = v20 + 32 * v21;
        goto LABEL_38;
      }
      if (!(v15 ^ 1 | v14)) {
        int v16 = v13;
      }
      uint64_t v12 = (v12 + v17) & v9;
      BOOL v13 = (WTF::StringImpl *)(v8 + 32 * v12);
      uint64_t v15 = *(void *)v13;
      uint64_t v14 = *((void *)v13 + 1);
      ++v17;
    }
    while (*(_OWORD *)v13 != 0);
    if (v16)
    {
      *(void *)int v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = 0;
      --*(_DWORD *)(*a1 - 16);
      BOOL v13 = v16;
    }
  }
  *(_OWORD *)BOOL v13 = *(_OWORD *)a2;
  unsigned int v19 = *a3;
  if (*a3) {
    *v19 += 2;
  }
  uint64_t result = (WTF::StringImpl *)*((void *)v13 + 2);
  *((void *)v13 + 2) = v19;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  uint64_t v22 = *a1;
  if (*a1) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v24 = *a1;
  if (*a1) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_31:
      uint64_t result = (WTF::StringImpl *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::String>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::String,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(a1, (uint64_t)v13);
      BOOL v13 = result;
      uint64_t v24 = *a1;
      if (*a1) {
        unint64_t v27 = *(unsigned int *)(v24 - 4);
      }
      else {
        unint64_t v27 = 0;
      }
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_31;
  }
  uint64_t v28 = v24 + 32 * v27;
  char v29 = 1;
LABEL_38:
  *(void *)a4 = v13;
  *(void *)(a4 + 8) = v28;
  *(unsigned char *)(a4 + ++*(_DWORD *)(this + 16) = v29;
  return result;
}

uint64_t WebKit::InjectedBundleClient::willDestroyPage(uint64_t this, WebKit::InjectedBundle *a2, WebKit::WebPage *a3)
{
  uint64_t v3 = *(uint64_t (**)(void, void, void))(this + 32);
  if (v3) {
    return v3(*((void *)a2 + 1), *((void *)a3 + 1), *(void *)(this + 16));
  }
  return this;
}

void WebKit::InjectedBundleClient::didReceiveMessage(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(a1 + 48);
  if (!v4) {
    return;
  }
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *a3;
  if (*a3) {
    *(_DWORD *)v8 += 2;
  }
  uint64_t v14 = v8;
  API::String::create(&v14, &v15);
  uint64_t v10 = v14;
  long long v11 = v15;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v9);
      if (v11) {
        goto LABEL_8;
      }
LABEL_15:
      uint64_t v12 = 0;
      goto LABEL_9;
    }
    *(_DWORD *)v10 -= 2;
  }
  if (!v11) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v12 = *((void *)v11 + 1);
LABEL_9:
  if (*(void *)a4) {
    uint64_t v13 = *(void *)(*(void *)a4 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  v4(v7, v12, v13, *(void *)(a1 + 16));
  if (v11) {
    CFRelease(*((CFTypeRef *)v11 + 1));
  }
}

void WebKit::InjectedBundleClient::didReceiveMessageToPage(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 56);
  if (v5)
  {
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = *(void *)(a3 + 8);
    uint64_t v10 = *a4;
    if (*a4) {
      *(_DWORD *)v10 += 2;
    }
    int v16 = v10;
    API::String::create(&v16, &v17);
    uint64_t v12 = v16;
    uint64_t v13 = v17;
    int v16 = 0;
    int v17 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v11);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    if (v13) {
      uint64_t v14 = *((void *)v13 + 1);
    }
    else {
      uint64_t v14 = 0;
    }
    if (*(void *)a5) {
      uint64_t v15 = *(void *)(*(void *)a5 + 8);
    }
    else {
      uint64_t v15 = 0;
    }
    v5(v8, v9, v14, v15, *(void *)(a1 + 16));
    if (v13) {
      CFRelease(*((CFTypeRef *)v13 + 1));
    }
  }
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; unsigned int v7 = (v9 + i++) & v3)
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(void *)(v2 + 16 * v7);
    if (v10 != -1)
    {
      if (!v10) {
        return 0;
      }
      if (*(void *)(v10 + 8) == a2) {
        break;
      }
    }
  }
  uint64_t v11 = *(void *)(v2 + 16 * v9 + 8);
  if (v11) {
    return *(void *)(v11 + 8);
  }
  else {
    return 0;
  }
}

WebKit::InjectedBundleDOMWindowExtension *WebKit::InjectedBundleDOMWindowExtension::InjectedBundleDOMWindowExtension(WebKit::InjectedBundleDOMWindowExtension *this, WebKit::WebFrame *a2, WebKit::InjectedBundleScriptWorld *a3)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EE9F0758;
  uint64_t v6 = *((void *)a2 + 3);
  if (v6 && (unsigned int v7 = *(WebCore::LocalFrame **)(v6 + 8)) != 0 && !*((unsigned char *)v7 + 144)) {
    uint64_t v8 = (WebCore::LocalDOMWindow *)WebCore::LocalFrame::window(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (WebCore::DOMWrapperWorld *)*((void *)a3 + 3);
  uint64_t v10 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
  *((void *)this + 3) = WebCore::DOMWindowExtension::DOMWindowExtension((WebCore::DOMWindowExtension *)v10, v8, v9);
  *((void *)this + 4) = 0;
  {
    WebKit::allExtensions(void)::map = 0;
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v10 + 2, (uint64_t)v10);
  uint64_t v11 = (atomic_uint *)*((void *)v10 + 1);
  atomic_fetch_add(v11, 1u);
  int v16 = (WTF *)v11;
  WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::InjectedBundleDOMWindowExtension&>(&WebKit::allExtensions(void)::map, (uint64_t *)&v16, (uint64_t)this, (uint64_t)&v15);
  uint64_t v13 = (unsigned int *)v16;
  int v16 = 0;
  if (v13 && atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, v12);
  }
  return this;
}

uint64_t *WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::InjectedBundleDOMWindowExtension&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = *a2;
  uint64_t v13 = *(void *)(*a2 + 8);
  unint64_t v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
  unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  unsigned int v17 = (v16 >> 31) ^ v16;
  for (int i = 1; ; ++i)
  {
    unsigned int v19 = v17 & v10;
    uint64_t v20 = (uint64_t *)(v8 + 16 * v19);
    uint64_t v21 = (unsigned int *)*v20;
    if (*v20 != -1) {
      break;
    }
    uint64_t v11 = (uint64_t *)(v8 + 16 * v19);
LABEL_10:
    unsigned int v17 = i + v19;
  }
  if (!v21)
  {
    if (v11)
    {
      uint64_t *v11 = 0;
      v11[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v12 = *a2;
      uint64_t v20 = v11;
    }
    *a2 = 0;
    uint64_t v22 = (unsigned int *)*v20;
    *uint64_t v20 = v12;
    if (v22 && atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, a2);
    }
    if (!*(void *)(a3 + 16))
    {
      uint64_t v23 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = a3;
      uint64_t v24 = *(unsigned int **)(a3 + 16);
      *(void *)(a3 + ++*(_DWORD *)(this + 16) = v23;
      if (v24)
      {
        if (atomic_fetch_add((atomic_uint *volatile)v24, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v24);
          WTF::fastFree((WTF *)v24, a2);
        }
      }
    }
    int v25 = *(atomic_uint **)(a3 + 16);
    atomic_fetch_add(v25, 1u);
    uint64_t result = (uint64_t *)v20[1];
    v20[1] = (uint64_t)v25;
    if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
    }
    uint64_t v26 = *v6;
    if (*v6) {
      int v27 = *(_DWORD *)(v26 - 12) + 1;
    }
    else {
      int v27 = 1;
    }
    *(_DWORD *)(v26 - 12) = v27;
    uint64_t v31 = *v6;
    if (*v6) {
      int v32 = *(_DWORD *)(v31 - 12);
    }
    else {
      int v32 = 0;
    }
    uint64_t v33 = (*(_DWORD *)(v31 - 16) + v32);
    unint64_t v34 = *(unsigned int *)(v31 - 4);
    if (v34 > 0x400)
    {
      if (v34 <= 2 * v33)
      {
LABEL_31:
        uint64_t result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>>::expand(v6, (unsigned int **)v20);
        uint64_t v20 = result;
        uint64_t v31 = *v6;
        if (*v6) {
          unint64_t v34 = *(unsigned int *)(v31 - 4);
        }
        else {
          unint64_t v34 = 0;
        }
      }
    }
    else if (3 * v34 <= 4 * v33)
    {
      goto LABEL_31;
    }
    uint64_t v30 = v31 + 16 * v34;
    char v29 = 1;
    goto LABEL_36;
  }
  if (*((void *)v21 + 1) != v13) {
    goto LABEL_10;
  }
  if (v9) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = *(unsigned int *)(v8 - 4);
  }
  char v29 = 0;
  uint64_t v30 = v8 + 16 * v28;
LABEL_36:
  *(void *)a4 = v20;
  *(void *)(a4 + 8) = v30;
  *(unsigned char *)(a4 + ++*(_DWORD *)(this + 16) = v29;
  return result;
}

void WebKit::InjectedBundleDOMWindowExtension::~InjectedBundleDOMWindowExtension(WebKit::InjectedBundleDOMWindowExtension *this, void *a2)
{
  *(void *)this = &unk_1EE9F0758;
  {
    p_opt_inst_meths = &OBJC_PROTOCOL___BEDragInteractionDelegate.opt_inst_meths;
    uint64_t v4 = WebKit::allExtensions(void)::map;
    uint64_t v6 = (uint64_t *)((char *)this + 24);
    uint64_t v5 = *((void *)this + 3);
    if (WebKit::allExtensions(void)::map)
    {
      int v7 = *(_DWORD *)(WebKit::allExtensions(void)::map - 8);
      unint64_t v8 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
      unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      unsigned int v11 = v7 & ((v10 >> 31) ^ v10);
      for (int i = 1; ; ++i)
      {
        uint64_t v13 = v11;
        uint64_t v14 = *(void *)(WebKit::allExtensions(void)::map + 16 * v11);
        if (v14 != -1)
        {
          if (!v14) {
            goto LABEL_21;
          }
          if (*(void *)(v14 + 8) == v5) {
            break;
          }
        }
        unsigned int v11 = (v11 + i) & v7;
      }
      if (v11 != *(_DWORD *)(WebKit::allExtensions(void)::map - 4))
      {
        unint64_t v15 = (void *)(WebKit::allExtensions(void)::map + 16 * v11);
        *unint64_t v15 = 0;
        if (atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v14);
          uint64_t v31 = v4;
          uint64_t v32 = v11;
          uint64_t v30 = (void *)(v4 + 16 * v11);
          WTF::fastFree((WTF *)v14, a2);
          unint64_t v15 = v30;
          uint64_t v4 = v31;
          uint64_t v13 = v32;
          p_opt_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___BEDragInteractionDelegate + 40);
        }
        *unint64_t v15 = -1;
        uint64_t v16 = v4 + 16 * v13;
        unsigned int v17 = *(unsigned int **)(v16 + 8);
        *(void *)(v16 + 8) = 0;
        if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v17);
          WTF::fastFree((WTF *)v17, a2);
          p_opt_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___BEDragInteractionDelegate + 40);
        }
        ++p_opt_inst_meths[432][-2].entrysize;
        uint64_t v18 = p_opt_inst_meths[432];
        if (v18) {
          int v19 = v18[-2].count - 1;
        }
        else {
          int v19 = -1;
        }
        v18[-2].unsigned int count = v19;
        uint64_t v20 = p_opt_inst_meths[432];
        if (v20)
        {
          unsigned int v21 = 6 * v20[-2].count;
          unsigned int count = v20[-1].count;
          if (v21 < count && count >= 9) {
            WTF::HashTable<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>>::rehash(&WebKit::allExtensions(void)::map, count >> 1, 0);
          }
        }
      }
    }
  }
  else
  {
    WebKit::allExtensions(void)::map = 0;
    uint64_t v6 = (uint64_t *)((char *)this + 24);
  }
LABEL_21:
  uint64_t v24 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v24) {
    CFRelease(*(CFTypeRef *)(v24 + 8));
  }
  uint64_t v25 = *v6;
  *uint64_t v6 = 0;
  if (v25)
  {
    if (*(_DWORD *)(v25 + 16) == 1)
    {
      uint64_t v26 = (WTF *)MEMORY[0x199733FE0]();
      WTF::fastFree(v26, v27);
    }
    else
    {
      --*(_DWORD *)(v25 + 16);
    }
  }
  uint64_t v28 = *((void *)this + 2);
  if (v28)
  {
    *(void *)(v28 + 8) = 0;
    char v29 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v29)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v29);
        WTF::fastFree((WTF *)v29, a2);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  uint64_t vars8;

  WebKit::InjectedBundleDOMWindowExtension::~InjectedBundleDOMWindowExtension(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::InjectedBundleDOMWindowExtension::frame@<X0>(WebCore::DOMWindowExtension **this@<X0>, void *a2@<X8>)
{
  uint64_t result = WebCore::DOMWindowExtension::frame(this[3]);
  if (result)
  {
    return WebKit::WebFrame::fromCoreFrame(result, a2);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

WebKit::InjectedBundleScriptWorld *WebKit::InjectedBundleDOMWindowExtension::world(WebKit::InjectedBundleDOMWindowExtension *this)
{
  uint64_t result = (WebKit::InjectedBundleScriptWorld *)*((void *)this + 4);
  if (!result)
  {
    WebKit::InjectedBundleScriptWorld::getOrCreate(*(WebKit::InjectedBundleScriptWorld **)(*((void *)this + 3) + 32), &v4);
    uint64_t result = v4;
    uint64_t v3 = *((void *)this + 4);
    *((void *)this + 4) = v4;
    if (v3)
    {
      CFRelease(*(CFTypeRef *)(v3 + 8));
      return (WebKit::InjectedBundleScriptWorld *)*((void *)this + 4);
    }
  }
  return result;
}

uint64_t WebKit::InjectedBundleHitTestResult::create@<X0>(WebKit::InjectedBundleHitTestResult *this@<X0>, WebKit **a2@<X8>)
{
  uint64_t v5 = (WebKit *)API::Object::newObject(0x98uLL, 138);
  *(void *)uint64_t v5 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v5);
  *(void *)uint64_t v5 = &unk_1EE9F08E0;
  uint64_t result = MEMORY[0x1997313F0]((char *)v5 + 16, this);
  *a2 = v5;
  return result;
}

uint64_t WebKit::InjectedBundleHitTestResult::frame@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 96);
  if (v2)
  {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(v2 + 48) + 8) + 544);
    if (v3)
    {
      this = *(void *)(v3 + 8);
      if (this) {
        return WebKit::WebFrame::fromCoreFrame(this, a2);
      }
    }
  }
  *a2 = 0;
  return this;
}

uint64_t WebKit::InjectedBundleHitTestResult::targetFrame@<X0>(WebKit::InjectedBundleHitTestResult *this@<X0>, void *a2@<X8>)
{
  uint64_t result = WebCore::HitTestResult::targetFrame((WebKit::InjectedBundleHitTestResult *)((char *)this + 16));
  if (result)
  {
    return WebKit::WebFrame::fromCoreFrame(result, a2);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

WTF::StringImpl *WebKit::InjectedBundleHitTestResult::absoluteImageURL@<X0>(WebKit::InjectedBundleHitTestResult *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WebCore::HitTestResult::absoluteImageURL((uint64_t *)&v6, (WebKit::InjectedBundleHitTestResult *)((char *)this + 16));
  uint64_t result = v6;
  if (v6)
  {
    int v5 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    *a2 = result;
    uint64_t v6 = 0;
    if (v5) {
      *(_DWORD *)uint64_t result = v5;
    }
    else {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

WTF::StringImpl *WebKit::InjectedBundleHitTestResult::absolutePDFURL@<X0>(WebKit::InjectedBundleHitTestResult *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WebCore::HitTestResult::absolutePDFURL((uint64_t *)&v6, (WebKit::InjectedBundleHitTestResult *)((char *)this + 16));
  uint64_t result = v6;
  if (v6)
  {
    int v5 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    *a2 = result;
    uint64_t v6 = 0;
    if (v5) {
      *(_DWORD *)uint64_t result = v5;
    }
    else {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

WTF::StringImpl *WebKit::InjectedBundleHitTestResult::absoluteLinkURL@<X0>(WebKit::InjectedBundleHitTestResult *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WebCore::HitTestResult::absoluteLinkURL((uint64_t *)&v6, (WebKit::InjectedBundleHitTestResult *)((char *)this + 16));
  uint64_t result = v6;
  if (v6)
  {
    int v5 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    *a2 = result;
    uint64_t v6 = 0;
    if (v5) {
      *(_DWORD *)uint64_t result = v5;
    }
    else {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

WTF::StringImpl *WebKit::InjectedBundleHitTestResult::absoluteMediaURL@<X0>(WebKit::InjectedBundleHitTestResult *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WebCore::HitTestResult::absoluteMediaURL((uint64_t *)&v6, (WebKit::InjectedBundleHitTestResult *)((char *)this + 16));
  uint64_t result = v6;
  if (v6)
  {
    int v5 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    *a2 = result;
    uint64_t v6 = 0;
    if (v5) {
      *(_DWORD *)uint64_t result = v5;
    }
    else {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebKit::InjectedBundleHitTestResult::mediaType(WebKit::InjectedBundleHitTestResult *this)
{
  uint64_t result = *((void *)this + 12);
  if (result)
  {
    if ((*(_WORD *)(result + 32) & 8) != 0)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 824))(result);
      if (result)
      {
        if (WebCore::HitTestResult::mediaIsVideo((WebKit::InjectedBundleHitTestResult *)((char *)this + 16))) {
          return 2;
        }
        else {
          return 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebKit::InjectedBundleHitTestResult::imageRect(WebKit::InjectedBundleHitTestResult *this)
{
  uint64_t v3 = WebCore::HitTestResult::imageRect((WebKit::InjectedBundleHitTestResult *)((char *)this + 16));
  v11[0] = v3;
  v11[1] = v2;
  if ((int)v2 >= 1 && SHIDWORD(v2) >= 1)
  {
    WebKit::InjectedBundleHitTestResult::frame((uint64_t)this, &v10);
    uint64_t v5 = v10;
    if (v10)
    {
      uint64_t v6 = *(void *)(v10 + 24);
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 8);
        if (v7)
        {
          if (!*(unsigned char *)(v7 + 144))
          {
            unint64_t v8 = *(WebCore::ScrollView **)(v7 + 288);
            if (v8) {
              uint64_t v3 = WebCore::ScrollView::contentsToRootView(v8, (const WebCore::IntRect *)v11);
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v5 + 8));
    }
  }
  return v3;
}

void WebKit::InjectedBundleHitTestResult::image(WebKit::InjectedBundleHitTestResult *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = WebCore::HitTestResult::image((WebKit::InjectedBundleHitTestResult *)((char *)this + 16));
  if (v3 && (uint64_t v4 = v3, ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3) & 1) != 0))
  {
    uint64_t v5 = (*(uint64_t (**)(void, void))(**(void **)(v4 + 64) + 176))(*(void *)(v4 + 64), 0);
    *(float *)unsigned int v11 = (float)(int)v5;
    *((float *)v11 + 1) = (float)SHIDWORD(v5);
    uint64_t v6 = (WebCore::DestinationColorSpace *)WebCore::IntSize::IntSize((WebCore::IntSize *)&v13, (const WebCore::FloatSize *)v11);
    uint64_t v7 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB(v6);
    WebKit::WebImage::create(&v13, 0, v7, 0, (WebKit::WebImage *)&v12);
    uint64_t v8 = v12;
    uint64_t v9 = *(void *)(v12 + 16);
    if (v9)
    {
      (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
      uint64_t v10 = *(void *)(v12 + 16);
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
      }
      v11[0] = 0;
      v11[1] = vcvt_f32_s32(v13);
      WebCore::GraphicsContext::drawImage();
      *a2 = v12;
    }
    else
    {
      *a2 = 0;
      uint64_t v12 = 0;
      CFRelease(*(CFTypeRef *)(v8 + 8));
    }
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t WebKit::InjectedBundlePageEditorClient::shouldBeginEditing(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, void, void))(a1 + 24);
  uint64_t v4 = 1;
  if (v3)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v7 = *a3;
    *(_DWORD *)(v7 + 28) = *(_DWORD *)(*a3 + 28) + 2;
    uint64_t v11 = v7;
    int v12 = *((_DWORD *)a3 + 2);
    uint64_t v8 = a3[2];
    *(_DWORD *)(v8 + 28) += 2;
    uint64_t v13 = v8;
    int v14 = *((_DWORD *)a3 + 6);
    char v15 = 1;
    WebKit::createHandle(&v16);
    uint64_t v9 = v16;
    if (v16)
    {
      uint64_t v4 = v3(v6, *(void *)(v16 + 8), *(void *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v9 + 8));
    }
    else
    {
      uint64_t v4 = v3(v6, 0, *(void *)(a1 + 16));
    }
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v11);
  }
  return v4;
}

uint64_t WebKit::InjectedBundlePageEditorClient::shouldEndEditing(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, void, void))(a1 + 32);
  uint64_t v4 = 1;
  if (v3)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v7 = *a3;
    *(_DWORD *)(v7 + 28) = *(_DWORD *)(*a3 + 28) + 2;
    uint64_t v11 = v7;
    int v12 = *((_DWORD *)a3 + 2);
    uint64_t v8 = a3[2];
    *(_DWORD *)(v8 + 28) += 2;
    uint64_t v13 = v8;
    int v14 = *((_DWORD *)a3 + 6);
    char v15 = 1;
    WebKit::createHandle(&v16);
    uint64_t v9 = v16;
    if (v16)
    {
      uint64_t v4 = v3(v6, *(void *)(v16 + 8), *(void *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v9 + 8));
    }
    else
    {
      uint64_t v4 = v3(v6, 0, *(void *)(a1 + 16));
    }
    std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v11);
  }
  return v4;
}

uint64_t WebKit::InjectedBundlePageEditorClient::shouldInsertNode(uint64_t a1, uint64_t a2, WebKit::InjectedBundleNodeHandle *this, uint64_t a4, int a5)
{
  if (!*(void *)(a1 + 40)) {
    return 1;
  }
  WebKit::InjectedBundleNodeHandle::getOrCreate(this, &v17);
  uint64_t v8 = v17;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 40);
  uint64_t v10 = *(void *)(a2 + 8);
  if (v17) {
    uint64_t v11 = *((void *)v17 + 1);
  }
  else {
    uint64_t v11 = 0;
  }
  WebKit::createHandle((uint64_t *)&v17);
  int v12 = v17;
  if (v17) {
    uint64_t v13 = *((void *)v17 + 1);
  }
  else {
    uint64_t v13 = 0;
  }
  if (a5 == 2) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = a5 == 1;
  }
  uint64_t v15 = v9(v10, v11, v13, v14, *(void *)(a1 + 16));
  if (v12) {
    CFRelease(*((CFTypeRef *)v12 + 1));
  }
  if (v8) {
    CFRelease(*((CFTypeRef *)v8 + 1));
  }
  return v15;
}

uint64_t WebKit::InjectedBundlePageEditorClient::shouldInsertText(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, int a5)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 48);
  if (!v5) {
    return 1;
  }
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *a3;
  if (*a3) {
    *(_DWORD *)v9 += 2;
  }
  int v19 = v9;
  API::String::create(&v19, &v20);
  uint64_t v11 = v19;
  int v12 = v20;
  int v19 = 0;
  uint64_t v20 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v10);
      if (v12) {
        goto LABEL_8;
      }
LABEL_21:
      uint64_t v13 = 0;
      goto LABEL_9;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (!v12) {
    goto LABEL_21;
  }
LABEL_8:
  uint64_t v13 = *((void *)v12 + 1);
LABEL_9:
  WebKit::createHandle((uint64_t *)&v20);
  uint64_t v14 = v20;
  if (v20) {
    uint64_t v15 = *((void *)v20 + 1);
  }
  else {
    uint64_t v15 = 0;
  }
  if (a5 == 2) {
    uint64_t v16 = 2;
  }
  else {
    uint64_t v16 = a5 == 1;
  }
  uint64_t v17 = v5(v8, v13, v15, v16, *(void *)(a1 + 16));
  if (v14) {
    CFRelease(*((CFTypeRef *)v14 + 1));
  }
  if (v12) {
    CFRelease(*((CFTypeRef *)v12 + 1));
  }
  return v17;
}

uint64_t WebKit::InjectedBundlePageEditorClient::shouldDeleteRange(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t, void, void))(a1 + 56);
  if (!v2) {
    return 1;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  WebKit::createHandle(&v8);
  uint64_t v5 = v8;
  if (!v8) {
    return v2(v4, 0, *(void *)(a1 + 16));
  }
  uint64_t v6 = v2(v4, *(void *)(v8 + 8), *(void *)(a1 + 16));
  CFRelease(*(CFTypeRef *)(v5 + 8));
  return v6;
}

uint64_t WebKit::InjectedBundlePageEditorClient::shouldChangeSelectedRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 64);
  if (!v6) {
    return 1;
  }
  uint64_t v10 = *(void *)(a2 + 8);
  WebKit::createHandle(&v18);
  uint64_t v11 = v18;
  if (v18) {
    uint64_t v12 = *(void *)(v18 + 8);
  }
  else {
    uint64_t v12 = 0;
  }
  WebKit::createHandle(&v17);
  uint64_t v13 = v17;
  if (v17) {
    uint64_t v14 = *(void *)(v17 + 8);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = v6(v10, v12, v14, a5, a6, *(void *)(a1 + 16));
  if (v13) {
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  return v15;
}

uint64_t WebKit::InjectedBundlePageEditorClient::shouldApplyStyle(uint64_t a1, uint64_t a2, WebCore::StyleProperties *this)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, void, void))(a1 + 72);
  if (!v3) {
    return 1;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  WebCore::StyleProperties::mutableCopy((uint64_t *)&v17, this);
  uint64_t v6 = (WTF *)WebCore::MutableStyleProperties::ensureCSSStyleDeclaration(v17);
  WebKit::InjectedBundleCSSStyleDeclarationHandle::getOrCreate(v6, v7, &v16);
  uint64_t v8 = v17;
  uint64_t v17 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::MutableStyleProperties::~MutableStyleProperties(v8);
      WTF::fastFree(v10, v11);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  if (v16) {
    uint64_t v12 = *(void *)(v16 + 8);
  }
  else {
    uint64_t v12 = 0;
  }
  WebKit::createHandle((uint64_t *)&v17);
  uint64_t v13 = v17;
  if (v17)
  {
    uint64_t v9 = v3(v5, v12, *((void *)v17 + 1), *(void *)(a1 + 16));
    CFRelease(*((CFTypeRef *)v13 + 1));
  }
  else
  {
    uint64_t v9 = v3(v5, v12, 0, *(void *)(a1 + 16));
  }
  uint64_t v14 = v16;
  uint64_t v16 = 0;
  if (v14) {
    CFRelease(*(CFTypeRef *)(v14 + 8));
  }
  return v9;
}

void WebKit::InjectedBundlePageEditorClient::didBeginEditing(WebKit::InjectedBundlePageEditorClient *this, WebKit::WebPage *a2, WTF::StringImpl **a3)
{
  uint64_t v3 = (void (*)(uint64_t, void, void))*((void *)this + 10);
  if (v3)
  {
    uint64_t v5 = *((void *)a2 + 1);
    uint64_t v6 = *a3;
    if (*a3) {
      *(_DWORD *)v6 += 2;
    }
    uint64_t v10 = v6;
    API::String::create(&v10, &v11);
    uint64_t v8 = v10;
    uint64_t v9 = v11;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v7);
        if (v9) {
          goto LABEL_8;
        }
        goto LABEL_11;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (v9)
    {
LABEL_8:
      v3(v5, *((void *)v9 + 1), *((void *)this + 2));
      CFRelease(*((CFTypeRef *)v9 + 1));
      return;
    }
LABEL_11:
    v3(v5, 0, *((void *)this + 2));
  }
}

void WebKit::InjectedBundlePageEditorClient::didEndEditing(WebKit::InjectedBundlePageEditorClient *this, WebKit::WebPage *a2, WTF::StringImpl **a3)
{
  uint64_t v3 = (void (*)(uint64_t, void, void))*((void *)this + 11);
  if (v3)
  {
    uint64_t v5 = *((void *)a2 + 1);
    uint64_t v6 = *a3;
    if (*a3) {
      *(_DWORD *)v6 += 2;
    }
    uint64_t v10 = v6;
    API::String::create(&v10, &v11);
    uint64_t v8 = v10;
    uint64_t v9 = v11;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v7);
        if (v9) {
          goto LABEL_8;
        }
        goto LABEL_11;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (v9)
    {
LABEL_8:
      v3(v5, *((void *)v9 + 1), *((void *)this + 2));
      CFRelease(*((CFTypeRef *)v9 + 1));
      return;
    }
LABEL_11:
    v3(v5, 0, *((void *)this + 2));
  }
}

void WebKit::InjectedBundlePageEditorClient::didChange(WebKit::InjectedBundlePageEditorClient *this, WebKit::WebPage *a2, WTF::StringImpl **a3)
{
  uint64_t v3 = (void (*)(uint64_t, void, void))*((void *)this + 12);
  if (v3)
  {
    uint64_t v5 = *((void *)a2 + 1);
    uint64_t v6 = *a3;
    if (*a3) {
      *(_DWORD *)v6 += 2;
    }
    uint64_t v10 = v6;
    API::String::create(&v10, &v11);
    uint64_t v8 = v10;
    uint64_t v9 = v11;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v7);
        if (v9) {
          goto LABEL_8;
        }
        goto LABEL_11;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (v9)
    {
LABEL_8:
      v3(v5, *((void *)v9 + 1), *((void *)this + 2));
      CFRelease(*((CFTypeRef *)v9 + 1));
      return;
    }
LABEL_11:
    v3(v5, 0, *((void *)this + 2));
  }
}

void WebKit::InjectedBundlePageEditorClient::didChangeSelection(WebKit::InjectedBundlePageEditorClient *this, WebKit::WebPage *a2, WTF::StringImpl **a3)
{
  uint64_t v3 = (void (*)(uint64_t, void, void))*((void *)this + 13);
  if (v3)
  {
    uint64_t v5 = *((void *)a2 + 1);
    uint64_t v6 = *a3;
    if (*a3) {
      *(_DWORD *)v6 += 2;
    }
    uint64_t v10 = v6;
    API::String::create(&v10, &v11);
    uint64_t v8 = v10;
    uint64_t v9 = v11;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v7);
        if (v9) {
          goto LABEL_8;
        }
        goto LABEL_11;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (v9)
    {
LABEL_8:
      v3(v5, *((void *)v9 + 1), *((void *)this + 2));
      CFRelease(*((CFTypeRef *)v9 + 1));
      return;
    }
LABEL_11:
    v3(v5, 0, *((void *)this + 2));
  }
}

void WebKit::InjectedBundlePageEditorClient::willWriteToPasteboard(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void (**)(uint64_t, void, void))(a1 + 112);
  if (v2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    WebKit::createHandle(&v6);
    uint64_t v5 = v6;
    if (v6)
    {
      v2(v4, *(void *)(v6 + 8), *(void *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v5 + 8));
    }
    else
    {
      v2(v4, 0, *(void *)(a1 + 16));
    }
  }
}

void WebKit::InjectedBundlePageEditorClient::getPasteboardDataForRange(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  uint64_t v5 = *(void (**)(uint64_t, void, id *, id *, void))(a1 + 120);
  if (v5)
  {
    id v57 = 0;
    id v56 = 0;
    uint64_t v9 = *(void *)(a2 + 8);
    WebKit::createHandle((uint64_t *)&v52);
    uint64_t v10 = v52;
    if ((void)v52)
    {
      v5(v9, *(void *)(v52 + 8), &v57, &v56, *(void *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v10 + 8));
    }
    else
    {
      v5(v9, 0, &v57, &v56, *(void *)(a1 + 16));
    }
    if (v57) {
      uint64_t v11 = [v57 _apiObject];
    }
    else {
      uint64_t v11 = 0;
    }
    if (v56) {
      uint64_t v12 = [v56 _apiObject];
    }
    else {
      uint64_t v12 = 0;
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a4, 0);
    if (*(_DWORD *)(a5 + 8))
    {
      uint64_t v14 = *(unsigned int *)(a5 + 12);
      if (v14)
      {
        uint64_t v15 = *(unsigned int ***)a5;
        uint64_t v16 = 8 * v14;
        do
        {
          uint64_t v17 = *v15;
          *uint64_t v15 = 0;
          if (v17) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v17, v13);
          }
          ++v15;
          v16 -= 8;
        }
        while (v16);
        *(_DWORD *)(a5 + 12) = 0;
      }
      uint64_t v18 = *(WTF **)a5;
      if (*(void *)a5)
      {
        *(void *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
        WTF::fastFree(v18, v13);
      }
    }
    if (v11)
    {
      if (!v12)
      {
LABEL_69:
        CFRelease(*(CFTypeRef *)(v11 + 8));
        return;
      }
      API::Array::elementsOfType<API::String>(v11, &v52);
      int v19 = v53;
      uint64_t v20 = v55;
      if (v53 != v55)
      {
        unsigned int v21 = v54;
        do
        {
          WTF::String::isolatedCopy();
          uint64_t v23 = a4[3];
          if (v23 == a4[2])
          {
            uint64_t v30 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a4, v23 + 1, (unint64_t)&v51);
            uint64_t v23 = a4[3];
            uint64_t v24 = *(void *)a4;
            uint64_t v25 = *v30;
            void *v30 = 0;
          }
          else
          {
            uint64_t v24 = *(void *)a4;
            uint64_t v25 = v51;
            int v51 = 0;
          }
          *(void *)(v24 + 8 * v23) = v25;
          a4[3] = v23 + 1;
          uint64_t v26 = v51;
          int v51 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2) {
              WTF::StringImpl::destroy(v26, v22);
            }
            else {
              *(_DWORD *)v26 -= 2;
            }
          }
          int v27 = v19 + 1;
          while (v27 - 1 != v21 && v27 != v21)
          {
            uint64_t v29 = *v27++;
            if ((*(unsigned int (**)(uint64_t))(*(void *)v29 + 16))(v29) == 21)
            {
              int v19 = v27 - 1;
              goto LABEL_35;
            }
          }
          int v19 = v21;
LABEL_35:
          ;
        }
        while (v19 != v20);
      }
      uint64_t v31 = *(uint64_t **)(v12 + 16);
      uint64_t v32 = *(unsigned int *)(v12 + 28);
      uint64_t v33 = &v31[v32];
      if (v32)
      {
        uint64_t v34 = 8 * v32;
        while ((*(unsigned int (**)(void))(*(void *)*v31 + 16))() != 8)
        {
          ++v31;
          v34 -= 8;
          if (!v34)
          {
            uint64_t v31 = v33;
            break;
          }
        }
        uint64_t v35 = v31;
        uint64_t v31 = *(uint64_t **)(v12 + 16);
        uint64_t v36 = *(unsigned int *)(v12 + 28);
      }
      else
      {
        uint64_t v36 = 0;
        uint64_t v35 = *(uint64_t **)(v12 + 16);
      }
      uint64_t v37 = &v31[v36];
      if (v35 == v37)
      {
LABEL_67:
        CFRelease(*(CFTypeRef *)(v12 + 8));
LABEL_68:
        if (!v11) {
          return;
        }
        goto LABEL_69;
      }
      do
      {
        long long v52 = *(_OWORD *)(*v35 + 16);
        WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)&v51);
        unint64_t v39 = *(unsigned int *)(a5 + 12);
        if (v39 == *(_DWORD *)(a5 + 8))
        {
          unint64_t v40 = v39 + (v39 >> 2);
          if (v40 >= 0x10) {
            unint64_t v41 = v40 + 1;
          }
          else {
            unint64_t v41 = 16;
          }
          if (v41 <= v39 + 1) {
            unint64_t v42 = v39 + 1;
          }
          else {
            unint64_t v42 = v41;
          }
          WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a5, v42);
          unint64_t v39 = *(unsigned int *)(a5 + 12);
          uint64_t v43 = *(unsigned int ***)a5;
          uint64_t v44 = v51;
          int v51 = 0;
          v43[v39] = (unsigned int *)v44;
        }
        else
        {
          uint64_t v45 = *(unsigned int ***)a5;
          uint64_t v46 = v51;
          int v51 = 0;
          v45[v39] = (unsigned int *)v46;
        }
        *(_DWORD *)(a5 + 12) = v39 + 1;
        uint64_t v47 = (unsigned int *)v51;
        int v51 = 0;
        if (v47) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v47, v38);
        }
        long long v48 = v35 + 1;
        while (v48 - 1 != v33 && v48 != v33)
        {
          uint64_t v50 = *v48++;
          if ((*(unsigned int (**)(uint64_t))(*(void *)v50 + 16))(v50) == 8)
          {
            uint64_t v35 = v48 - 1;
            goto LABEL_65;
          }
        }
        uint64_t v35 = v33;
LABEL_65:
        ;
      }
      while (v35 != v37);
    }
    if (!v12) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
}

uint64_t WebKit::InjectedBundlePageEditorClient::performTwoStepDrop(uint64_t a1, uint64_t a2, WebKit::InjectedBundleNodeHandle *this, uint64_t a4, uint64_t a5)
{
  if (!*(void *)(a1 + 136)) {
    return 0;
  }
  WebKit::InjectedBundleNodeHandle::getOrCreate(this, &v18);
  uint64_t v9 = v18;
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(a1 + 136);
  uint64_t v11 = *(void *)(a2 + 8);
  if (v18) {
    uint64_t v12 = *((void *)v18 + 1);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(WebKit::InjectedBundleNodeHandle **)a4;
  *((_DWORD *)v13 + 7) = *(_DWORD *)(*(void *)a4 + 28) + 2;
  uint64_t v18 = v13;
  int v19 = *(_DWORD *)(a4 + 8);
  uint64_t v14 = *(void *)(a4 + 16);
  *(_DWORD *)(v14 + 28) += 2;
  uint64_t v20 = v14;
  int v21 = *(_DWORD *)(a4 + 24);
  char v22 = 1;
  WebKit::createHandle(&v23);
  uint64_t v15 = v23;
  if (v23)
  {
    uint64_t v16 = v10(v11, v12, *(void *)(v23 + 8), a5, *(void *)(a1 + 16));
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  else
  {
    uint64_t v16 = v10(v11, v12, 0, a5, *(void *)(a1 + 16));
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18);
  if (v9) {
    CFRelease(*((CFTypeRef *)v9 + 1));
  }
  return v16;
}

uint64_t WebKit::InjectedBundlePageEditorClient::didWriteToPasteboard(uint64_t this, WebKit::WebPage *a2)
{
  uint64_t v2 = *(uint64_t (**)(void, void))(this + 128);
  if (v2) {
    return v2(*((void *)a2 + 1), *(void *)(this + 16));
  }
  return this;
}

_OWORD *API::Client<WKBundlePageFormClientBase>::initialize(_OWORD *result, unsigned int *a2)
{
  if (a2)
  {
    if (*a2 == 3)
    {
      long long v3 = *(_OWORD *)a2;
      long long v4 = *((_OWORD *)a2 + 2);
      result[1] = *((_OWORD *)a2 + 1);
      result[2] = v4;
      *uint64_t result = v3;
      long long v5 = *((_OWORD *)a2 + 3);
      long long v6 = *((_OWORD *)a2 + 4);
      long long v7 = *((_OWORD *)a2 + 5);
      *((void *)result + 12) = *((void *)a2 + 12);
      result[4] = v6;
      result[5] = v7;
      result[3] = v5;
    }
    else
    {
      *((void *)result + 12) = 0;
      result[4] = 0u;
      result[5] = 0u;
      result[2] = 0u;
      result[3] = 0u;
      *uint64_t result = 0u;
      result[1] = 0u;
      uint64_t v2 = *a2;
      if ((int)v2 <= 2)
      {
        if (v2 >= 4) {
          __break(1u);
        }
        else {
          return memcpy(result, a2, qword_1994F7718[v2]);
        }
      }
    }
  }
  else
  {
    *((void *)result + 12) = 0;
    result[4] = 0u;
    result[5] = 0u;
    result[2] = 0u;
    result[3] = 0u;
    *uint64_t result = 0u;
    result[1] = 0u;
  }
  return result;
}

uint64_t WebKit::InjectedBundlePageFormClient::InjectedBundlePageFormClient(uint64_t a1, unsigned int *a2)
{
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1EE9F0818;
  API::Client<WKBundlePageFormClientBase>::initialize((_OWORD *)(a1 + 8), a2);
  return a1;
}

void WebKit::InjectedBundlePageFormClient::didFocusTextField(WebKit::InjectedBundlePageFormClient *this, WebKit::WebPage *a2, WebCore::HTMLInputElement *a3, WebKit::WebFrame *a4)
{
  if (*((void *)this + 10))
  {
    WebKit::InjectedBundleNodeHandle::getOrCreate(a3, &v11);
    if (a2) {
      uint64_t v7 = *((void *)a2 + 1);
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = v11;
    if (v11) {
      uint64_t v9 = *((void *)v11 + 1);
    }
    else {
      uint64_t v9 = 0;
    }
    if (a4) {
      uint64_t v10 = *((void *)a4 + 1);
    }
    else {
      uint64_t v10 = 0;
    }
    (*((void (**)(uint64_t, uint64_t, uint64_t, void))this + 10))(v7, v9, v10, *((void *)this + 2));
    if (v8) {
      CFRelease(*((CFTypeRef *)v8 + 1));
    }
  }
}

void WebKit::InjectedBundlePageFormClient::textFieldDidBeginEditing(WebKit::InjectedBundlePageFormClient *this, WebKit::WebPage *a2, WebCore::HTMLInputElement *a3, WebKit::WebFrame *a4)
{
  if (*((void *)this + 3))
  {
    WebKit::InjectedBundleNodeHandle::getOrCreate(a3, &v12);
    uint64_t v7 = v12;
    uint64_t v8 = a2 ? *((void *)a2 + 1) : 0;
    uint64_t v9 = v12 ? *((void *)v12 + 1) : 0;
    uint64_t v10 = a4 ? *((void *)a4 + 1) : 0;
    (*((void (**)(uint64_t, uint64_t, uint64_t, void))this + 3))(v8, v9, v10, *((void *)this + 2));
    if (v7)
    {
      uint64_t v11 = (const void *)*((void *)v7 + 1);
      CFRelease(v11);
    }
  }
}

void WebKit::InjectedBundlePageFormClient::textFieldDidEndEditing(WebKit::InjectedBundlePageFormClient *this, WebKit::WebPage *a2, WebCore::HTMLInputElement *a3, WebKit::WebFrame *a4)
{
  if (*((void *)this + 4))
  {
    WebKit::InjectedBundleNodeHandle::getOrCreate(a3, &v12);
    uint64_t v7 = v12;
    uint64_t v8 = a2 ? *((void *)a2 + 1) : 0;
    uint64_t v9 = v12 ? *((void *)v12 + 1) : 0;
    uint64_t v10 = a4 ? *((void *)a4 + 1) : 0;
    (*((void (**)(uint64_t, uint64_t, uint64_t, void))this + 4))(v8, v9, v10, *((void *)this + 2));
    if (v7)
    {
      uint64_t v11 = (const void *)*((void *)v7 + 1);
      CFRelease(v11);
    }
  }
}

void WebKit::InjectedBundlePageFormClient::textDidChangeInTextField(WebKit::InjectedBundlePageFormClient *this, WebKit::WebPage *a2, WebCore::HTMLInputElement *a3, WebKit::WebFrame *a4, int a5)
{
  if (*((void *)this + 5)) {
    BOOL v5 = a5 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return;
  }
  WebKit::InjectedBundleNodeHandle::getOrCreate(a3, &v14);
  uint64_t v9 = v14;
  if (a2) {
    uint64_t v10 = *((void *)a2 + 1);
  }
  else {
    uint64_t v10 = 0;
  }
  if (v14)
  {
    uint64_t v11 = *((void *)v14 + 1);
    if (a4)
    {
LABEL_11:
      uint64_t v12 = *((void *)a4 + 1);
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v11 = 0;
    if (a4) {
      goto LABEL_11;
    }
  }
  uint64_t v12 = 0;
LABEL_12:
  (*((void (**)(uint64_t, uint64_t, uint64_t, void))this + 5))(v10, v11, v12, *((void *)this + 2));
  if (v9)
  {
    uint64_t v13 = (const void *)*((void *)v9 + 1);
    CFRelease(v13);
  }
}

void WebKit::InjectedBundlePageFormClient::textDidChangeInTextArea(WebKit::InjectedBundlePageFormClient *this, WebKit::WebPage *a2, WebCore::HTMLTextAreaElement *a3, WebKit::WebFrame *a4)
{
  if (!*((void *)this + 6)) {
    return;
  }
  WebKit::InjectedBundleNodeHandle::getOrCreate(a3, &v12);
  uint64_t v7 = v12;
  if (a2) {
    uint64_t v8 = *((void *)a2 + 1);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v12)
  {
    uint64_t v9 = *((void *)v12 + 1);
    if (a4)
    {
LABEL_6:
      uint64_t v10 = *((void *)a4 + 1);
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v9 = 0;
    if (a4) {
      goto LABEL_6;
    }
  }
  uint64_t v10 = 0;
LABEL_7:
  (*((void (**)(uint64_t, uint64_t, uint64_t, void))this + 6))(v8, v9, v10, *((void *)this + 2));
  if (v7)
  {
    uint64_t v11 = (const void *)*((void *)v7 + 1);
    CFRelease(v11);
  }
}

uint64_t WebKit::InjectedBundlePageFormClient::shouldPerformActionInTextField(uint64_t a1, uint64_t a2, WebKit::InjectedBundleNodeHandle *this, unsigned int a4, uint64_t a5)
{
  if (!*(void *)(a1 + 56)) {
    return 0;
  }
  WebKit::InjectedBundleNodeHandle::getOrCreate(this, &v16);
  uint64_t v9 = v16;
  if (a2) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  if (v16) {
    uint64_t v11 = *((void *)v16 + 1);
  }
  else {
    uint64_t v11 = 0;
  }
  if (a4 >= 7) {
    uint64_t v12 = 2;
  }
  else {
    uint64_t v12 = a4;
  }
  if (a5) {
    uint64_t v13 = *(void *)(a5 + 8);
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 56))(v10, v11, v12, v13, *(void *)(a1 + 16));
  if (v9) {
    CFRelease(*((CFTypeRef *)v9 + 1));
  }
  return v14;
}

void WebKit::InjectedBundlePageFormClient::willSendSubmitEvent(uint64_t a1, uint64_t a2, WebKit::InjectedBundleNodeHandle *this, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!*(void *)(a1 + 72)) {
    return;
  }
  if (this)
  {
    WebKit::InjectedBundleNodeHandle::getOrCreate(this, v23);
    uint64_t v11 = v23[0];
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v25 = 0;
  if (*(_DWORD *)(a6 + 12))
  {
    unint64_t v12 = 0;
    uint64_t v13 = 8;
    do
    {
      uint64_t v14 = (WTF::StringImpl **)(*(void *)a6 + v13 - 8);
      API::String::create(&v24);
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::String,WTF::RawPtrTraits<API::String>,WTF::DefaultRefDerefTraits<API::String>>>(&v25, v14, (uint64_t *)&v24, (uint64_t)v23);
      uint64_t v15 = v24;
      uint64_t v24 = 0;
      if (v15) {
        CFRelease(*((CFTypeRef *)v15 + 1));
      }
      ++v12;
      v13 += 16;
    }
    while (v12 < *(unsigned int *)(a6 + 12));
  }
  uint64_t v16 = API::Object::newObject(0x18uLL, 9);
  *(void *)uint64_t v16 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v16);
  *(void *)uint64_t v16 = &unk_1EE9D1E00;
  uint64_t v17 = v25;
  uint64_t v25 = 0;
  *(void *)(v16 + ++*(_DWORD *)(this + 16) = v17;
  if (a2)
  {
    uint64_t v18 = *(void *)(a2 + 8);
    if (v11)
    {
LABEL_11:
      uint64_t v19 = *((void *)v11 + 1);
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v18 = 0;
    if (v11) {
      goto LABEL_11;
    }
  }
  uint64_t v19 = 0;
LABEL_12:
  if (!a4)
  {
    uint64_t v20 = 0;
    if (a5) {
      goto LABEL_14;
    }
LABEL_24:
    uint64_t v21 = 0;
    goto LABEL_15;
  }
  uint64_t v20 = *(void *)(a4 + 8);
  if (!a5) {
    goto LABEL_24;
  }
LABEL_14:
  uint64_t v21 = *(void *)(a5 + 8);
LABEL_15:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(a1 + 72))(v18, v19, v20, v21, *(void *)(v16 + 8), *(void *)(a1 + 16));
  CFRelease(*(CFTypeRef *)(v16 + 8));
  if (v25) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v25, v22);
  }
  if (v11) {
    CFRelease(*((CFTypeRef *)v11 + 1));
  }
}

void WebKit::InjectedBundlePageFormClient::willSubmitForm(uint64_t a1, uint64_t a2, WebKit::InjectedBundleNodeHandle *this, uint64_t a4, uint64_t a5, uint64_t a6, WebKit::InjectedBundleNodeHandle **a7)
{
  if (!*(void *)(a1 + 64)) {
    return;
  }
  if (this)
  {
    WebKit::InjectedBundleNodeHandle::getOrCreate(this, v27);
    uint64_t v13 = v27[0];
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v29 = 0;
  if (*(_DWORD *)(a6 + 12))
  {
    unint64_t v14 = 0;
    uint64_t v15 = 8;
    do
    {
      uint64_t v16 = (WTF::StringImpl **)(*(void *)a6 + v15 - 8);
      API::String::create(&v28);
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::String,WTF::RawPtrTraits<API::String>,WTF::DefaultRefDerefTraits<API::String>>>(&v29, v16, (uint64_t *)&v28, (uint64_t)v27);
      uint64_t v17 = v28;
      uint64_t v28 = 0;
      if (v17) {
        CFRelease(*((CFTypeRef *)v17 + 1));
      }
      ++v14;
      v15 += 16;
    }
    while (v14 < *(unsigned int *)(a6 + 12));
  }
  uint64_t v18 = API::Object::newObject(0x18uLL, 9);
  *(void *)uint64_t v18 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v18);
  *(void *)uint64_t v18 = &unk_1EE9D1E00;
  uint64_t v19 = v29;
  uint64_t v29 = 0;
  *(void *)(v18 + ++*(_DWORD *)(this + 16) = v19;
  v27[0] = 0;
  if (a2)
  {
    uint64_t v20 = *(void *)(a2 + 8);
    if (v13)
    {
LABEL_11:
      uint64_t v21 = *((void *)v13 + 1);
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v20 = 0;
    if (v13) {
      goto LABEL_11;
    }
  }
  uint64_t v21 = 0;
LABEL_12:
  if (!a4)
  {
    uint64_t v22 = 0;
    if (a5) {
      goto LABEL_14;
    }
LABEL_28:
    uint64_t v23 = 0;
    goto LABEL_15;
  }
  uint64_t v22 = *(void *)(a4 + 8);
  if (!a5) {
    goto LABEL_28;
  }
LABEL_14:
  uint64_t v23 = *(void *)(a5 + 8);
LABEL_15:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, WebKit::InjectedBundleNodeHandle **, void))(a1 + 64))(v20, v21, v22, v23, *(void *)(v18 + 8), v27, *(void *)(a1 + 16));
  uint64_t v24 = v27[0];
  if (v27[0]) {
    uint64_t v24 = (WebKit::InjectedBundleNodeHandle *)[(WebKit::InjectedBundleNodeHandle *)v27[0] _apiObject];
  }
  uint64_t v25 = *a7;
  *a7 = v24;
  if (v25) {
    CFRelease(*((CFTypeRef *)v25 + 1));
  }
  CFRelease(*(CFTypeRef *)(v18 + 8));
  if (v29) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v29, v26);
  }
  if (v13) {
    CFRelease(*((CFTypeRef *)v13 + 1));
  }
}

uint64_t WebKit::InjectedBundlePageFormClient::didAssociateFormControls(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)result;
  if (*(void *)(result + 96) || *(void *)(result + 104))
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v8 = *(unsigned int *)(a3 + 12);
    if (v8)
    {
      if (v8 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v9 = WTF::fastMalloc((WTF *)(8 * v8));
      LODWORD(v26) = v8;
      uint64_t v25 = v9;
      unint64_t v10 = *(unsigned int *)(a3 + 12);
      if (v10)
      {
        uint64_t v11 = v9;
        unint64_t v12 = 0;
        do
        {
          uint64_t v13 = *(WebKit::InjectedBundleNodeHandle **)(*(void *)a3 + 8 * v12);
          if (v13)
          {
            WebKit::InjectedBundleNodeHandle::getOrCreate(v13, &v27);
            unint64_t v14 = v27;
            unint64_t v10 = *(unsigned int *)(a3 + 12);
          }
          else
          {
            unint64_t v14 = 0;
          }
          unint64_t v15 = v12 + 1;
          *(void *)(v11 + 8 * v12) = v14;
          unint64_t v12 = v15;
        }
        while (v15 < v10);
        HIDWORD(v26) = v15;
      }
    }
    uint64_t v16 = (void (*)(uint64_t, uint64_t, uint64_t, void))v7[13];
    if (!v16)
    {
      uint64_t v22 = (void (*)(uint64_t, void, void))v7[12];
      if (a2) {
        uint64_t v23 = *(void *)(a2 + 8);
      }
      else {
        uint64_t v23 = 0;
      }
      API::Array::create(&v25, (uint64_t *)&v27);
      uint64_t v24 = v27;
      if (!v27)
      {
        v22(v23, 0, v7[2]);
        return WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v20);
      }
      v22(v23, *((void *)v27 + 1), v7[2]);
      uint64_t v21 = (const void *)*((void *)v24 + 1);
      goto LABEL_24;
    }
    if (a2) {
      a2 = *(void *)(a2 + 8);
    }
    API::Array::create(&v25, (uint64_t *)&v27);
    uint64_t v17 = v27;
    if (v27)
    {
      uint64_t v18 = *((void *)v27 + 1);
      if (a4)
      {
LABEL_17:
        uint64_t v19 = *(void *)(a4 + 8);
LABEL_18:
        v16(a2, v18, v19, v7[2]);
        if (!v17) {
          return WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v20);
        }
        uint64_t v21 = (const void *)*((void *)v17 + 1);
LABEL_24:
        CFRelease(v21);
        return WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v20);
      }
    }
    else
    {
      uint64_t v18 = 0;
      if (a4) {
        goto LABEL_17;
      }
    }
    uint64_t v19 = 0;
    goto LABEL_18;
  }
  return result;
}

uint64_t WebKit::InjectedBundlePageFormClient::shouldNotifyOnFormChanges(WebKit::InjectedBundlePageFormClient *this, WebKit::WebPage *a2)
{
  uint64_t v2 = (uint64_t (*)(uint64_t, void))*((void *)this + 11);
  if (!v2) {
    return 0;
  }
  if (a2) {
    uint64_t v3 = *((void *)a2 + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  return v2(v3, *((void *)this + 2));
}

uint64_t WebKit::InjectedBundlePageFullScreenClient::supportsFullScreen(WebKit::InjectedBundlePageFullScreenClient *this, WebKit::WebPage *a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))*((void *)this + 2);
  if (!v3)
  {
    char v13 = a3;
    long long v6 = (char *)a2 + 32;
    uint64_t v7 = (*(uint64_t (**)(char *, WebKit::WebPage *))(*((void *)a2 + 4) + 56))((char *)a2 + 32, a2);
    uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)v6 + 48))(v6);
    if (v8)
    {
      IPC::Connection::sendSync<Messages::WebFullScreenManagerProxy::SupportsFullScreen>(v8, &v13, v7, 0, (uint64_t)v11, INFINITY);
      int v9 = v12;
      BOOL v10 = (v12 | v11[8]) != 0;
      if (v12 == -1) {
        return v10;
      }
    }
    else
    {
      v11[0] = 3;
      BOOL v10 = 1;
      int v12 = 1;
      int v9 = 1;
    }
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages25WebFullScreenManagerProxy18SupportsFullScreenEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v9])(&v13, v11);
    return v10;
  }
  if (a2) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  else {
    uint64_t v4 = 0;
  }

  return v3(v4, a3);
}

void WebKit::InjectedBundlePageFullScreenClient::enterFullScreenForElement(uint64_t a1, uint64_t a2, WebKit::InjectedBundleNodeHandle *this, char a4, int a5, WebKit::InjectedBundleNodeHandle *a6)
{
  uint64_t v7 = *(void (**)(uint64_t, void))(a1 + 24);
  if (v7)
  {
    if (this)
    {
      WebKit::InjectedBundleNodeHandle::getOrCreate(this, v19);
      int v9 = v19[0];
      uint64_t v7 = *(void (**)(uint64_t, void))(a1 + 24);
      if (a2) {
        goto LABEL_4;
      }
    }
    else
    {
      int v9 = 0;
      if (a2)
      {
LABEL_4:
        uint64_t v10 = *(void *)(a2 + 8);
        if (v9)
        {
LABEL_5:
          v7(v10, *((void *)v9 + 1));
          uint64_t v11 = (const void *)*((void *)v9 + 1);
          CFRelease(v11);
          return;
        }
        goto LABEL_14;
      }
    }
    uint64_t v10 = 0;
    if (v9) {
      goto LABEL_5;
    }
LABEL_14:
    v7(v10, 0);
    return;
  }
  if (a5 != 4)
  {
    LOBYTE(v19[0]) = a4;
    v19[1] = a6;
    uint64_t v12 = a2 + 32;
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, WebKit::InjectedBundleNodeHandle *))(*(void *)(a2 + 32) + 56))(a2 + 32, a2, this);
    unint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v14 = 1740;
    *((void *)v14 + 1) = v13;
    *((void *)v14 + 66) = (char *)v14 + 16;
    *((void *)v14 + 67) = 512;
    *((void *)v14 + 68) = 0;
    *((void *)v14 + 70) = 0;
    *((void *)v14 + 69) = 0;
    IPC::Encoder::encodeHeader(v14);
    uint64_t v20 = v14;
    IPC::ArgumentCoder<std::tuple<BOOL,WebKit::FullScreenMediaDetails &&>,void>::encode<IPC::Encoder,WebKit::FullScreenMediaDetails &&,0ul,1ul>(v14, (char *)v19);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v12 + 32))(v12, &v20, 0);
    uint64_t v16 = v20;
    uint64_t v20 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v15);
      WTF::fastFree(v17, v18);
    }
  }
}

void WebKit::InjectedBundlePageFullScreenClient::exitFullScreenForElement(WebKit::InjectedBundlePageFullScreenClient *this, WebKit::WebPage *a2, WebCore::Element *a3, char a4)
{
  BOOL v5 = (void (*)(uint64_t, void))*((void *)this + 4);
  if (v5)
  {
    if (a3)
    {
      WebKit::InjectedBundleNodeHandle::getOrCreate(a3, &v17);
      uint64_t v7 = v17;
      BOOL v5 = (void (*)(uint64_t, void))*((void *)this + 4);
      if (a2) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v7 = 0;
      if (a2)
      {
LABEL_4:
        uint64_t v8 = *((void *)a2 + 1);
        if (v7)
        {
LABEL_5:
          v5(v8, *((void *)v7 + 1));
          int v9 = (const void *)*((void *)v7 + 1);
          CFRelease(v9);
          return;
        }
        goto LABEL_14;
      }
    }
    uint64_t v8 = 0;
    if (v7) {
      goto LABEL_5;
    }
LABEL_14:
    v5(v8, 0);
    return;
  }
  if ((a4 & 1) == 0)
  {
    uint64_t v10 = (char *)a2 + 32;
    uint64_t v11 = (*(uint64_t (**)(char *, WebKit::WebPage *, WebCore::Element *))(*((void *)a2 + 4) + 56))((char *)a2 + 32, a2, a3);
    uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v12 = 1741;
    *((void *)v12 + 1) = v11;
    *((void *)v12 + 66) = (char *)v12 + 16;
    *((void *)v12 + 67) = 512;
    *((void *)v12 + 68) = 0;
    *((void *)v12 + 70) = 0;
    *((void *)v12 + 69) = 0;
    IPC::Encoder::encodeHeader(v12);
    uint64_t v17 = v12;
    (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v10 + 32))(v10, &v17, 0);
    unint64_t v14 = v17;
    uint64_t v17 = 0;
    if (v14)
    {
      IPC::Encoder::~Encoder(v14, v13);
      WTF::fastFree(v15, v16);
    }
  }
}

IPC::Encoder *WebKit::InjectedBundlePageFullScreenClient::beganEnterFullScreen(WebKit::InjectedBundlePageFullScreenClient *this, WebKit::WebPage *a2, WebCore::IntRect *a3, WebCore::IntRect *a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12)
{
  unint64_t v15 = (uint64_t (*)(uint64_t, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))*((void *)this + 5);
  if (v15)
  {
    if (a2) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    else {
      uint64_t v16 = 0;
    }
    a5.n128_f64[0] = (double)*(int *)a3;
    a6.n128_f64[0] = (double)*((int *)a3 + 1);
    a7.n128_f64[0] = (double)*((int *)a3 + 2);
    a8.n128_f64[0] = (double)*((int *)a3 + 3);
    a9.n128_f64[0] = (double)*(int *)a4;
    a10.n128_f64[0] = (double)*((int *)a4 + 1);
    a11.n128_f64[0] = (double)*((int *)a4 + 2);
    a12.n128_f64[0] = (double)*((int *)a4 + 3);
    return (IPC::Encoder *)v15(v16, a5, a6, a7, a8, a9, a10, a11, a12);
  }
  else
  {
    uint64_t v19 = *((void *)a2 + 4);
    uint64_t v18 = (char *)a2 + 32;
    uint64_t v20 = (*(uint64_t (**)(char *))(v19 + 56))(v18);
    uint64_t v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v21 = 1737;
    *((void *)v21 + 1) = v20;
    *((void *)v21 + 66) = (char *)v21 + 16;
    *((void *)v21 + 67) = 512;
    *((void *)v21 + 68) = 0;
    *((void *)v21 + 70) = 0;
    *((void *)v21 + 69) = 0;
    IPC::Encoder::encodeHeader(v21);
    uint64_t v25 = v21;
    IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v21, a3);
    IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v21, a4);
    (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v18 + 32))(v18, &v25, 0);
    uint64_t result = v25;
    uint64_t v25 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v22);
      return (IPC::Encoder *)WTF::fastFree(v23, v24);
    }
  }
  return result;
}

IPC::Encoder *WebKit::InjectedBundlePageFullScreenClient::beganExitFullScreen(WebKit::InjectedBundlePageFullScreenClient *this, WebKit::WebPage *a2, WebCore::IntRect *a3, WebCore::IntRect *a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12)
{
  unint64_t v15 = (uint64_t (*)(uint64_t, __n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))*((void *)this + 6);
  if (v15)
  {
    if (a2) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    else {
      uint64_t v16 = 0;
    }
    a5.n128_f64[0] = (double)*(int *)a3;
    a6.n128_f64[0] = (double)*((int *)a3 + 1);
    a7.n128_f64[0] = (double)*((int *)a3 + 2);
    a8.n128_f64[0] = (double)*((int *)a3 + 3);
    a9.n128_f64[0] = (double)*(int *)a4;
    a10.n128_f64[0] = (double)*((int *)a4 + 1);
    a11.n128_f64[0] = (double)*((int *)a4 + 2);
    a12.n128_f64[0] = (double)*((int *)a4 + 3);
    return (IPC::Encoder *)v15(v16, a5, a6, a7, a8, a9, a10, a11, a12);
  }
  else
  {
    uint64_t v19 = *((void *)a2 + 4);
    uint64_t v18 = (char *)a2 + 32;
    uint64_t v20 = (*(uint64_t (**)(char *))(v19 + 56))(v18);
    uint64_t v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v21 = 1738;
    *((void *)v21 + 1) = v20;
    *((void *)v21 + 66) = (char *)v21 + 16;
    *((void *)v21 + 67) = 512;
    *((void *)v21 + 68) = 0;
    *((void *)v21 + 70) = 0;
    *((void *)v21 + 69) = 0;
    IPC::Encoder::encodeHeader(v21);
    uint64_t v25 = v21;
    IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v21, a3);
    IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v21, a4);
    (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v18 + 32))(v18, &v25, 0);
    uint64_t result = v25;
    uint64_t v25 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v22);
      return (IPC::Encoder *)WTF::fastFree(v23, v24);
    }
  }
  return result;
}

IPC::Encoder *WebKit::InjectedBundlePageFullScreenClient::closeFullScreen(WebKit::InjectedBundlePageFullScreenClient *this, WebKit::WebPage *a2)
{
  uint64_t v3 = (uint64_t (*)(uint64_t))*((void *)this + 7);
  if (v3)
  {
    if (a2) {
      uint64_t v4 = *((void *)a2 + 1);
    }
    else {
      uint64_t v4 = 0;
    }
    return (IPC::Encoder *)v3(v4);
  }
  else
  {
    uint64_t v7 = *((void *)a2 + 4);
    long long v6 = (char *)a2 + 32;
    uint64_t v8 = (*(uint64_t (**)(char *))(v7 + 56))(v6);
    int v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v9 = 1739;
    *((void *)v9 + 1) = v8;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    uint64_t v13 = v9;
    (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v13, 0);
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v10);
      return (IPC::Encoder *)WTF::fastFree(v11, v12);
    }
  }
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)132>::type()
{
  return 132;
}

uint64_t API::ObjectImpl<(API::Object::Type)136>::type()
{
  return 136;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14WebProcessPool24HandleSynchronousMessageEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

void WebKit::InjectedBundleHitTestResult::~InjectedBundleHitTestResult(WebKit::InjectedBundleHitTestResult *this)
{
  *(void *)this = &unk_1EE9F08E0;
  MEMORY[0x199731400]((char *)this + 16);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE9F08E0;
  MEMORY[0x199731400]((char *)this + 16);

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)138>::type()
{
  return 138;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages25WebFullScreenManagerProxy18SupportsFullScreenEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Encoder *IPC::Encoder::operator<<<std::tuple<WTF::String const&,WebKit::UserData const&>>(IPC::Encoder *a1, uint64_t **a2)
{
  return a1;
}

IPC::Decoder *IPC::Decoder::operator>><std::tuple<WebKit::UserData>>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<WebKit::UserData>>(a1, (uint64_t)&v6);
  std::__optional_storage_base<std::tuple<WebKit::UserData>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WebKit::UserData>,false>>(a2, (uint64_t)&v6);
  if (v7)
  {
    uint64_t v4 = v6;
    uint64_t v6 = 0;
    if (v4) {
      CFRelease(*(CFTypeRef *)(v4 + 8));
    }
  }
  return a1;
}

void IPC::Decoder::decode<std::tuple<WebKit::UserData>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<WebKit::UserData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      char v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::UserData>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebKit::UserData>(a1, (uint64_t)&v6);
  if (v7)
  {
    uint64_t v3 = v6;
    if (v6)
    {
      CFRetain(*(CFTypeRef *)(v6 + 8));
      int v4 = v7;
      *(void *)a2 = v3;
      *(unsigned char *)(a2 + 8) = 1;
      if (v4)
      {
        uint64_t v5 = v6;
        uint64_t v6 = 0;
        if (v5) {
          CFRelease(*(CFTypeRef *)(v5 + 8));
        }
      }
    }
    else
    {
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 1;
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void std::__optional_storage_base<std::tuple<WebKit::UserData>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WebKit::UserData>,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 8))
    {
      std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WebKit::UserData>,std::tuple<WebKit::UserData>,WebKit::UserData,0ul>((uint64_t *)a1, (uint64_t *)a2);
    }
  }
  else if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = *(void *)a1;
    *(void *)a1 = 0;
    if (v3) {
      CFRelease(*(CFTypeRef *)(v3 + 8));
    }
    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a2) {
      CFRetain(*(CFTypeRef *)(v4 + 8));
    }
    *(void *)a1 = v4;
    *(unsigned char *)(a1 + 8) = 1;
  }
}

void std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WebKit::UserData>,std::tuple<WebKit::UserData>,WebKit::UserData,0ul>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    CFRetain(*(CFTypeRef *)(v3 + 8));
  }
  uint64_t v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,BOOL>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 16));
  char v4 = *(unsigned char *)(a2 + 24);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::InjectedBundle::setAsynchronousSpellCheckingEnabled(BOOL)::$_0,void,WebCore::Page &>::call(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(a2 + 112) + 664) = *(void *)(*(void *)(a2 + 112) + 664) & 0xFFFFFFFBFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(result + 8) << 34);
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::InjectedBundle::setUserStyleSheetLocation(WTF::String const&)::$_0,void,WebCore::Page &>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9F0950;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::InjectedBundle::setUserStyleSheetLocation(WTF::String const&)::$_0,void,WebCore::Page &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9F0950;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::InjectedBundle::setUserStyleSheetLocation(WTF::String const&)::$_0,void,WebCore::Page &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(WebCore::Settings **)(a2 + 112);
  WTF::URL::URL((uint64_t)v5, (WTF::StringImpl **)(a1 + 8));
  WebCore::Settings::setUserStyleSheetLocation(v2, (const WTF::URL *)v5);
  unint64_t result = v5[0];
  v5[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::String>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::String,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::String>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::String,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::String>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::String,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = a2;
  uint64_t v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    uint64_t v12 = (void *)(v10 + 16);
    do
    {
      void *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      v12 += 4;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v6 + 32 * v13;
      if (*(void *)v15 ^ 1 | *(void *)(v15 + 8))
      {
        if (*(_OWORD *)v15 == 0)
        {
          uint64_t v16 = v6 + 32 * v13;
          uint64_t v17 = *(WTF::StringImpl **)(v16 + 16);
          *(void *)(v16 + ++*(_DWORD *)(this + 16) = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, v11);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
        }
        else
        {
          uint64_t v18 = *a1;
          if (*a1) {
            unsigned int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            unsigned int v19 = 0;
          }
          int v29 = -1640531527;
          __int16 v30 = 0;
          char v31 = 0;
          WTF::addArgs<WTF::UUID>(&v29, (void *)(v6 + 32 * v13));
          int v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
          int v21 = 0;
          do
          {
            uint64_t v22 = v20 & v19;
            uint64_t v23 = v18 + 32 * v22;
            int v20 = ++v21 + v22;
          }
          while (*(_OWORD *)v23 != 0);
          uint64_t v24 = *(WTF::StringImpl **)(v23 + 16);
          *(void *)(v23 + ++*(_DWORD *)(this + 16) = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, v11);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
          *(_OWORD *)uint64_t v23 = *(_OWORD *)v15;
          uint64_t v25 = v6 + 32 * v13;
          uint64_t v26 = *(void *)(v25 + 16);
          *(void *)(v25 + ++*(_DWORD *)(this + 16) = 0;
          *(void *)(v23 + ++*(_DWORD *)(this + 16) = v26;
          int v27 = *(WTF::StringImpl **)(v25 + 16);
          *(void *)(v25 + ++*(_DWORD *)(this + 16) = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2) {
              WTF::StringImpl::destroy(v27, v11);
            }
            else {
              *(_DWORD *)v27 -= 2;
            }
          }
          if (v15 == a3) {
            uint64_t v14 = v23;
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v11);
  return v14;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::InjectedBundle::liveDocumentURLs(BOOL)::$_0,void,WebCore::Page &>::call(uint64_t result, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a2 + 160);
  if (v2)
  {
    uint64_t v3 = result;
    do
    {
      if (!*(unsigned char *)(v2 + 144))
      {
        uint64_t v4 = *(void *)(v2 + 296);
        if (v4)
        {
          unsigned int v5 = *(uint64_t **)(v3 + 8);
          long long v6 = *(_OWORD *)(v4 + 448);
          v30[0] = *(_OWORD *)(v4 + 432);
          v30[1] = v6;
          uint64_t v7 = *v5;
          if (*v5)
          {
            unsigned int v8 = *(_DWORD *)(v7 - 8);
            int v27 = -1640531527;
            __int16 v28 = 0;
            char v29 = 0;
            WTF::addArgs<WTF::UUID>(&v27, v30);
            uint64_t v10 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27) & v8;
            uint64_t v11 = (uint64_t *)(v7 + 32 * v10);
            uint64_t v12 = *v11;
            uint64_t v13 = v11[1];
            if (v13 == *((void *)&v30[0] + 1) && v12 == *(void *)&v30[0])
            {
LABEL_19:
              uint64_t v18 = (void *)(v7 + 32 * v10);
              unsigned int v19 = (void *)*v5;
              if (!*v5) {
                goto LABEL_24;
              }
            }
            else
            {
              int v15 = 1;
              while (v12 | v13)
              {
                uint64_t v10 = (v10 + v15) & v8;
                uint64_t v16 = (uint64_t *)(v7 + 32 * v10);
                uint64_t v12 = *v16;
                uint64_t v13 = v16[1];
                BOOL v17 = v13 == *((void *)&v30[0] + 1) && v12 == *(void *)&v30[0];
                ++v15;
                if (v17) {
                  goto LABEL_19;
                }
              }
              unsigned int v19 = (void *)*v5;
              if (!*v5) {
                goto LABEL_4;
              }
              uint64_t v18 = &v19[4 * *((unsigned int *)v19 - 1)];
            }
            v19 += 4 * *((unsigned int *)v19 - 1);
            if (v19 != v18)
            {
LABEL_24:
              if (v19 != v18)
              {
                int v20 = (WTF::StringImpl *)v18[2];
                v18[1] = 0;
                v18[2] = 0;
                void *v18 = 1;
                if (v20)
                {
                  if (*(_DWORD *)v20 == 2) {
                    WTF::StringImpl::destroy(v20, v9);
                  }
                  else {
                    *(_DWORD *)v20 -= 2;
                  }
                }
                ++*(_DWORD *)(*v5 - 16);
                uint64_t v21 = *v5;
                if (*v5) {
                  int v22 = *(_DWORD *)(v21 - 12) - 1;
                }
                else {
                  int v22 = -1;
                }
                *(_DWORD *)(v21 - 12) = v22;
                uint64_t v23 = *v5;
                if (*v5)
                {
                  unsigned int v24 = 6 * *(_DWORD *)(v23 - 12);
                  unsigned int v25 = *(_DWORD *)(v23 - 4);
                  if (v24 < v25 && v25 >= 9) {
                    WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WTF::String>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WTF::String,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(v5, v25 >> 1, 0);
                  }
                }
              }
            }
          }
        }
      }
LABEL_4:
      uint64_t result = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v2 + 48), 0);
      uint64_t v2 = result;
    }
    while (result);
  }
  return result;
}

unsigned int **WTF::HashTable<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>>::rehash(a1, v5, a2);
}

unsigned int **WTF::HashTable<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v7;
    do
    {
      uint64_t v14 = (unsigned int **)(v6 + 16 * v11);
      int v15 = *v14;
      if (*v14 != (unsigned int *)-1)
      {
        if (v15)
        {
          uint64_t v19 = *a1;
          if (*a1) {
            int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            int v20 = 0;
          }
          unint64_t v21 = ~(*((void *)v15 + 1) << 32) + *((void *)v15 + 1);
          unint64_t v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
          unint64_t v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
          unsigned int v24 = v20 & (((v23 + ~(v23 << 27)) >> 31) ^ (v23 + ~(v23 << 27)));
          int v25 = 1;
          do
          {
            unsigned int v26 = v24;
            uint64_t v27 = *(void *)(v19 + 16 * v24);
            unsigned int v24 = (v24 + v25++) & v20;
          }
          while (v27);
          __int16 v28 = (unsigned int **)(v19 + 16 * v26);
          char v29 = v28[1];
          v28[1] = 0;
          if (v29 && atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v29);
            WTF::fastFree((WTF *)v29, v10);
          }
          __int16 v30 = *v28;
          *__int16 v28 = 0;
          if (v30 && atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v30);
            WTF::fastFree((WTF *)v30, v10);
          }
          uint64_t v31 = *v14;
          *uint64_t v14 = 0;
          *__int16 v28 = v31;
          uint64_t v32 = v6 + 16 * v11;
          uint64_t v33 = *(unsigned int **)(v32 + 8);
          *(void *)(v32 + 8) = 0;
          v28[1] = v33;
          uint64_t v34 = *(unsigned int **)(v32 + 8);
          *(void *)(v32 + 8) = 0;
          if (v34 && atomic_fetch_add((atomic_uint *volatile)v34, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v34);
            WTF::fastFree((WTF *)v34, v10);
          }
          uint64_t v35 = *v14;
          *uint64_t v14 = 0;
          if (v35 && atomic_fetch_add((atomic_uint *volatile)v35, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v35);
            WTF::fastFree((WTF *)v35, v10);
          }
          if (v14 == a3) {
            uint64_t v12 = v28;
          }
        }
        else
        {
          uint64_t v16 = v6 + 16 * v11;
          BOOL v17 = *(unsigned int **)(v16 + 8);
          *(void *)(v16 + 8) = 0;
          if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v17);
            WTF::fastFree((WTF *)v17, v10);
          }
          uint64_t v18 = *v14;
          *uint64_t v14 = 0;
          if (v18)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v18);
              WTF::fastFree((WTF *)v18, v10);
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebFullScreenManagerProxy::SupportsFullScreen>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v24 = 0;
  IPC::Connection::createSyncMessageEncoder(3739, a3, &v24, &v23);
  uint64_t v11 = v23;
  if (a4)
  {
    **((unsigned char **)v23 + 66) |= 4u;
    *(unsigned char *)(a1 + 96) = 1;
  }
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v11, a2);
  IPC::Connection::sendSyncMessage(a1, v24, (uint64_t *)&v23, a4, (uint64_t)&v21, a6);
  if (!v22)
  {
    __int16 v20 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v21, &v20);
    if (!HIBYTE(v20))
    {
      *(unsigned char *)a5 = 13;
      *(_DWORD *)(a5 + ++*(_DWORD *)(this + 16) = 1;
      int v12 = v22;
      if (v22 == -1) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    int v12 = v22;
    if (!v22)
    {
      uint64_t v14 = v21;
      unint64_t v21 = 0;
      char v15 = v20;
      *(void *)a5 = v14;
      *(unsigned char *)(a5 + 8) = v15;
      *(_DWORD *)(a5 + ++*(_DWORD *)(this + 16) = 0;
      goto LABEL_10;
    }
LABEL_14:
    uint64_t v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)IPC::ArgumentCoder<std::tuple<BOOL,WebKit::FullScreenMediaDetails &&>,void>::encode<IPC::Encoder,WebKit::FullScreenMediaDetails &&,0ul,1ul>(v19);
  }
  if (v22 != 1) {
    goto LABEL_14;
  }
  *(unsigned char *)a5 = (_BYTE)v21;
  int v12 = 1;
  *(_DWORD *)(a5 + ++*(_DWORD *)(this + 16) = 1;
LABEL_10:
  ((void (*)(__int16 *, uint64_t **))off_1EE9F0908[v12])(&v20, &v21);
LABEL_11:
  uint64_t result = v23;
  unint64_t v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<BOOL,WebKit::FullScreenMediaDetails &&>,void>::encode<IPC::Encoder,WebKit::FullScreenMediaDetails &&,0ul,1ul>(IPC::Encoder *a1, char *a2)
{
  char v4 = *a2;
  unsigned int v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    unsigned char *v5 = v4;
    uint64_t v7 = *((void *)a2 + 1);
    return IPC::ArgumentCoder<WebKit::FullScreenMediaDetails,void>::encode(a1, v7);
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void WebKit::InjectedBundlePageLoaderClient::willLoadURLRequest(WebKit::InjectedBundlePageLoaderClient *this, WebKit::WebPage *a2, const String *a3, API::Object *a4)
{
  char v4 = (void (*)(uint64_t, uint64_t, uint64_t, void))*((void *)this + 35);
  if (v4)
  {
    uint64_t v8 = *((void *)a2 + 1);
    uint64_t v9 = API::Object::newObject(0xD8uLL, 25);
    uint64_t v10 = API::URLRequest::URLRequest((CFTypeRef *)v9, a3) ? *(void *)(v9 + 8) : 0;
    uint64_t v11 = a4 ? *((void *)a4 + 1) : 0;
    v4(v8, v10, v11, *((void *)this + 2));
    if (v9)
    {
      int v12 = *(const void **)(v9 + 8);
      CFRelease(v12);
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::willLoadDataRequest(uint64_t a1, uint64_t a2, const String *a3, WebCore::FragmentedSharedBuffer **a4, WTF::StringImpl **a5, WTF::StringImpl **a6, WTF::StringImpl **a7, uint64_t a8)
{
  uint64_t v8 = *(void (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 288);
  if (!v8) {
    return;
  }
  if (*a4)
  {
    WebCore::FragmentedSharedBuffer::makeContiguous((uint64_t *)&v45, *a4);
    atomic_fetch_add((atomic_uint *volatile)v45, 1u);
    char v15 = v45;
    uint64_t v16 = WebCore::SharedBuffer::data(v45);
    uint64_t v17 = *((void *)v15 + 6);
    uint64_t v18 = v45;
    uint64_t v19 = API::Object::newObject(0x30uLL, 8);
    *(void *)uint64_t v19 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v19);
    *(void *)uint64_t v19 = &unk_1EE9B5358;
    *(void *)(v19 + ++*(_DWORD *)(this + 16) = v16;
    *(void *)(v19 + 24) = v17;
    *(void *)(v19 + 32) = WebKit::releaseSharedBuffer;
    *(void *)(v19 + 40) = v18;
    unint64_t v21 = (unsigned int *)v45;
    uint64_t v45 = 0;
    if (v21) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v21, v20);
    }
    uint64_t v8 = *(void (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 288);
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v42 = *(void *)(a2 + 8);
  int v22 = (CFTypeRef *)API::Object::newObject(0xD8uLL, 25);
  *int v22 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v22);
  *int v22 = &unk_1EE9D1E50;
  WebCore::ResourceRequest::ResourceRequest(v22 + 2, a3);
  if (v19) {
    uint64_t v41 = *(void *)(v19 + 8);
  }
  else {
    uint64_t v41 = 0;
  }
  CFTypeRef v40 = v22[1];
  unint64_t v23 = *a5;
  if (*a5) {
    *(_DWORD *)v23 += 2;
  }
  uint64_t v44 = v23;
  API::String::create(&v44, &v45);
  int v25 = v44;
  unsigned int v26 = v45;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::destroy(v25, v24);
      if (v26) {
        goto LABEL_15;
      }
      goto LABEL_27;
    }
    *(_DWORD *)v25 -= 2;
  }
  if (v26)
  {
LABEL_15:
    uint64_t v27 = *((void *)v26 + 1);
    goto LABEL_16;
  }
LABEL_27:
  uint64_t v27 = 0;
LABEL_16:
  __int16 v28 = *a6;
  if (*a6) {
    *(_DWORD *)v28 += 2;
  }
  uint64_t v44 = v28;
  API::String::create(&v44, &v45);
  __int16 v30 = v44;
  uint64_t v31 = v45;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::destroy(v30, v29);
      if (v31) {
        goto LABEL_22;
      }
      goto LABEL_29;
    }
    *(_DWORD *)v30 -= 2;
  }
  if (v31)
  {
LABEL_22:
    uint64_t v32 = *((void *)v31 + 1);
    goto LABEL_23;
  }
LABEL_29:
  uint64_t v32 = 0;
LABEL_23:
  uint64_t v33 = a8;
  uint64_t v34 = *a7;
  if (v34)
  {
    *(_DWORD *)v34 += 2;
    uint64_t v35 = API::Object::newObject(0x20uLL, 24);
    *(void *)uint64_t v35 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v35);
    *(void *)uint64_t v35 = &unk_1EE9B53A8;
    int v37 = *(_DWORD *)v34;
    *(_DWORD *)v34 += 2;
    *(void *)(v35 + ++*(_DWORD *)(this + 16) = v34;
    *(void *)(v35 + 24) = 0;
    if (v37) {
      *(_DWORD *)uint64_t v34 = v37;
    }
    else {
      WTF::StringImpl::destroy(v34, v36);
    }
    uint64_t v38 = *(void *)(v35 + 8);
    uint64_t v33 = a8;
    if (a8) {
      goto LABEL_32;
    }
LABEL_43:
    uint64_t v39 = 0;
    goto LABEL_33;
  }
  uint64_t v35 = 0;
  uint64_t v38 = 0;
  if (!a8) {
    goto LABEL_43;
  }
LABEL_32:
  uint64_t v39 = *(void *)(v33 + 8);
LABEL_33:
  v8(v42, v40, v41, v27, v32, v38, v39, *(void *)(a1 + 16));
  if (v34) {
    CFRelease(*(CFTypeRef *)(v35 + 8));
  }
  if (v31) {
    CFRelease(*((CFTypeRef *)v31 + 1));
  }
  if (v26) {
    CFRelease(*((CFTypeRef *)v26 + 1));
  }
  CFRelease(v22[1]);
  if (v19) {
    CFRelease(*(CFTypeRef *)(v19 + 8));
  }
}

unsigned int *WebKit::releaseSharedBuffer(WebKit *this, unsigned int *a2, const void *a3)
{
  return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a2, a2);
}

WTF::StringImpl *WebKit::toAPI(WebKit *this, WTF::StringImpl *a2)
{
  if (a2) {
    *(_DWORD *)a2 += 2;
  }
  unsigned int v5 = a2;
  API::String::create(&v5, &v6);
  unint64_t result = v5;
  *(void *)this = v6;
  unsigned int v5 = 0;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::InjectedBundlePageLoaderClient::didStartProvisionalLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v4 = *(void (**)(void, void, id *, void))(a1 + 24);
  if (v4)
  {
    id v8 = 0;
    v4(*(void *)(a2 + 8), *(void *)(a3 + 8), &v8, *(void *)(a1 + 16));
    uint64_t v6 = (uint64_t)v8;
    if (v8) {
      uint64_t v6 = [v8 _apiObject];
    }
    uint64_t v7 = *a4;
    *a4 = v6;
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 + 8));
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::didReceiveServerRedirectForProvisionalLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v4 = *(void (**)(void, void, id *, void))(a1 + 32);
  if (v4)
  {
    id v8 = 0;
    v4(*(void *)(a2 + 8), *(void *)(a3 + 8), &v8, *(void *)(a1 + 16));
    uint64_t v6 = (uint64_t)v8;
    if (v8) {
      uint64_t v6 = [v8 _apiObject];
    }
    uint64_t v7 = *a4;
    *a4 = v6;
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 + 8));
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::didFailProvisionalLoadWithErrorForFrame(uint64_t a1, uint64_t a2, uint64_t a3, const WebCore::ResourceError *a4, uint64_t *a5)
{
  unsigned int v5 = *(void (**)(uint64_t, uint64_t, CFTypeRef, id *, void))(a1 + 40);
  if (v5)
  {
    id v14 = 0;
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = (CFTypeRef *)API::Object::newObject(0x60uLL, 10);
    if (API::Error::Error((API::Error *)v11, a4))
    {
      v5(v9, v10, v11[1], &v14, *(void *)(a1 + 16));
      CFRelease(v11[1]);
    }
    else
    {
      v5(v9, v10, 0, &v14, *(void *)(a1 + 16));
    }
    uint64_t v12 = (uint64_t)v14;
    if (v14) {
      uint64_t v12 = [v14 _apiObject];
    }
    uint64_t v13 = *a5;
    *a5 = v12;
    if (v13) {
      CFRelease(*(CFTypeRef *)(v13 + 8));
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::didCommitLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v4 = *(void (**)(void, void, id *, void))(a1 + 48);
  if (v4)
  {
    id v8 = 0;
    v4(*(void *)(a2 + 8), *(void *)(a3 + 8), &v8, *(void *)(a1 + 16));
    uint64_t v6 = (uint64_t)v8;
    if (v8) {
      uint64_t v6 = [v8 _apiObject];
    }
    uint64_t v7 = *a4;
    *a4 = v6;
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 + 8));
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::didFinishDocumentLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v4 = *(void (**)(void, void, id *, void))(a1 + 56);
  if (v4)
  {
    id v8 = 0;
    v4(*(void *)(a2 + 8), *(void *)(a3 + 8), &v8, *(void *)(a1 + 16));
    uint64_t v6 = (uint64_t)v8;
    if (v8) {
      uint64_t v6 = [v8 _apiObject];
    }
    uint64_t v7 = *a4;
    *a4 = v6;
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 + 8));
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::didFinishLoadForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v4 = *(void (**)(void, void, id *, void))(a1 + 64);
  if (v4)
  {
    id v8 = 0;
    v4(*(void *)(a2 + 8), *(void *)(a3 + 8), &v8, *(void *)(a1 + 16));
    uint64_t v6 = (uint64_t)v8;
    if (v8) {
      uint64_t v6 = [v8 _apiObject];
    }
    uint64_t v7 = *a4;
    *a4 = v6;
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 + 8));
    }
  }
}

uint64_t WebKit::InjectedBundlePageLoaderClient::didFinishProgress(uint64_t this, WebKit::WebPage *a2)
{
  uint64_t v2 = *(uint64_t (**)(void, void))(this + 232);
  if (v2) {
    return v2(*((void *)a2 + 1), *(void *)(this + 16));
  }
  return this;
}

void WebKit::InjectedBundlePageLoaderClient::didFailLoadWithErrorForFrame(uint64_t a1, uint64_t a2, uint64_t a3, const WebCore::ResourceError *a4, uint64_t *a5)
{
  unsigned int v5 = *(void (**)(uint64_t, uint64_t, CFTypeRef, id *, void))(a1 + 72);
  if (v5)
  {
    id v14 = 0;
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = (CFTypeRef *)API::Object::newObject(0x60uLL, 10);
    if (API::Error::Error((API::Error *)v11, a4))
    {
      v5(v9, v10, v11[1], &v14, *(void *)(a1 + 16));
      CFRelease(v11[1]);
    }
    else
    {
      v5(v9, v10, 0, &v14, *(void *)(a1 + 16));
    }
    uint64_t v12 = (uint64_t)v14;
    if (v14) {
      uint64_t v12 = [v14 _apiObject];
    }
    uint64_t v13 = *a5;
    *a5 = v12;
    if (v13) {
      CFRelease(*(CFTypeRef *)(v13 + 8));
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::didSameDocumentNavigationForFrame(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  unsigned int v5 = *(void (**)(uint64_t, uint64_t, uint64_t, id *, void))(a1 + 80);
  if (v5)
  {
    id v12 = 0;
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = *(void *)(a3 + 8);
    if ((a4 - 1) < 3) {
      uint64_t v9 = (a4 - 1) + 1;
    }
    else {
      uint64_t v9 = 0;
    }
    v5(v7, v8, v9, &v12, *(void *)(a1 + 16));
    uint64_t v10 = (uint64_t)v12;
    if (v12) {
      uint64_t v10 = [v12 _apiObject];
    }
    uint64_t v11 = *a5;
    *a5 = v10;
    if (v11) {
      CFRelease(*(CFTypeRef *)(v11 + 8));
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::didReceiveTitleForFrame(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t *a5)
{
  unsigned int v5 = *(void (**)(uint64_t, void, void, id *, void))(a1 + 88);
  if (v5)
  {
    id v16 = 0;
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = *a3;
    if (*a3) {
      *(_DWORD *)v10 += 2;
    }
    uint64_t v17 = v10;
    API::String::create(&v17, &v18);
    id v12 = v17;
    uint64_t v13 = v18;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v11);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    if (v13)
    {
      v5(v9, *((void *)v13 + 1), *(void *)(a4 + 8), &v16, *(void *)(a1 + 16));
      CFRelease(*((CFTypeRef *)v13 + 1));
    }
    else
    {
      v5(v9, 0, *(void *)(a4 + 8), &v16, *(void *)(a1 + 16));
    }
    uint64_t v14 = (uint64_t)v16;
    if (v16) {
      uint64_t v14 = [v16 _apiObject];
    }
    uint64_t v15 = *a5;
    *a5 = v14;
    if (v15) {
      CFRelease(*(CFTypeRef *)(v15 + 8));
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::didRemoveFrameFromHierarchy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v4 = *(void (**)(void, void, id *, void))(a1 + 112);
  if (v4)
  {
    id v8 = 0;
    v4(*(void *)(a2 + 8), *(void *)(a3 + 8), &v8, *(void *)(a1 + 16));
    uint64_t v6 = (uint64_t)v8;
    if (v8) {
      uint64_t v6 = [v8 _apiObject];
    }
    uint64_t v7 = *a4;
    *a4 = v6;
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 + 8));
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::didDisplayInsecureContentForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v4 = *(void (**)(void, void, id *, void))(a1 + 120);
  if (v4)
  {
    id v8 = 0;
    v4(*(void *)(a2 + 8), *(void *)(a3 + 8), &v8, *(void *)(a1 + 16));
    uint64_t v6 = (uint64_t)v8;
    if (v8) {
      uint64_t v6 = [v8 _apiObject];
    }
    uint64_t v7 = *a4;
    *a4 = v6;
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 + 8));
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::didRunInsecureContentForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v4 = *(void (**)(void, void, id *, void))(a1 + 128);
  if (v4)
  {
    id v8 = 0;
    v4(*(void *)(a2 + 8), *(void *)(a3 + 8), &v8, *(void *)(a1 + 16));
    uint64_t v6 = (uint64_t)v8;
    if (v8) {
      uint64_t v6 = [v8 _apiObject];
    }
    uint64_t v7 = *a4;
    *a4 = v6;
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 + 8));
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::didFirstLayoutForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v4 = *(void (**)(void, void, id *, void))(a1 + 96);
  if (v4)
  {
    id v8 = 0;
    v4(*(void *)(a2 + 8), *(void *)(a3 + 8), &v8, *(void *)(a1 + 16));
    uint64_t v6 = (uint64_t)v8;
    if (v8) {
      uint64_t v6 = [v8 _apiObject];
    }
    uint64_t v7 = *a4;
    *a4 = v6;
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 + 8));
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::didFirstVisuallyNonEmptyLayoutForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v4 = *(void (**)(void, void, id *, void))(a1 + 104);
  if (v4)
  {
    id v8 = 0;
    v4(*(void *)(a2 + 8), *(void *)(a3 + 8), &v8, *(void *)(a1 + 16));
    uint64_t v6 = (uint64_t)v8;
    if (v8) {
      uint64_t v6 = [v8 _apiObject];
    }
    uint64_t v7 = *a4;
    *a4 = v6;
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 + 8));
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::didReachLayoutMilestone(uint64_t a1, uint64_t a2, __int16 a3, uint64_t *a4)
{
  char v4 = *(void (**)(void, void, id *, void))(a1 + 264);
  if (v4)
  {
    id v9 = 0;
    int v6 = (a3 & 1) != 0;
    if ((a3 & 2) != 0) {
      v6 |= 2u;
    }
    if ((a3 & 4) != 0) {
      v6 |= 4u;
    }
    if ((a3 & 0x10) != 0) {
      v6 |= 0x10u;
    }
    if ((a3 & 0x20) != 0) {
      v6 |= 0x20u;
    }
    if ((a3 & 0x80) != 0) {
      v6 |= 0x80u;
    }
    v4(*(void *)(a2 + 8), v6 | a3 & 0x100u, &v9, *(void *)(a1 + 16));
    uint64_t v7 = (uint64_t)v9;
    if (v9) {
      uint64_t v7 = [v9 _apiObject];
    }
    uint64_t v8 = *a4;
    *a4 = v7;
    if (v8) {
      CFRelease(*(CFTypeRef *)(v8 + 8));
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::didClearWindowObjectForFrame(WebKit::InjectedBundlePageLoaderClient *this, WebKit::WebPage *a2, WebKit::WebFrame *a3, WebCore::DOMWrapperWorld *a4)
{
  char v4 = (void (*)(uint64_t, uint64_t, void, void))*((void *)this + 17);
  if (v4)
  {
    uint64_t v6 = *((void *)a2 + 1);
    uint64_t v7 = *((void *)a3 + 1);
    WebKit::InjectedBundleScriptWorld::getOrCreate(a4, &v9);
    uint64_t v8 = v9;
    if (v9)
    {
      v4(v6, v7, *((void *)v9 + 1), *((void *)this + 2));
      CFRelease(*((CFTypeRef *)v8 + 1));
    }
    else
    {
      v4(v6, v7, 0, *((void *)this + 2));
    }
  }
}

WTF::StringImpl *WebKit::InjectedBundleScriptWorld::getOrCreate@<X0>(WebKit::InjectedBundleScriptWorld *this@<X0>, WebKit::InjectedBundleScriptWorld **a2@<X8>)
{
  unsigned int v5 = (WebKit::InjectedBundleScriptWorld *)WebCore::mainThreadNormalWorld(this);
  if (v5 == this)
  {
    uint64_t v10 = WebKit::InjectedBundleScriptWorld::normalWorld(v5);
    unint64_t result = (WTF::StringImpl *)CFRetain(*((CFTypeRef *)v10 + 1));
    *a2 = v10;
  }
  else
  {
    {
      WebKit::allWorlds(void)::map = 0;
    }
    uint64_t v6 = WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>(&WebKit::allWorlds(void)::map, (uint64_t)this);
    if (v6)
    {
      uint64_t v11 = v6;
      unint64_t result = (WTF::StringImpl *)CFRetain(*(CFTypeRef *)(v6 + 8));
      *a2 = (WebKit::InjectedBundleScriptWorld *)v11;
    }
    else
    {
      uint64_t v7 = (WebKit::InjectedBundleScriptWorld *)API::Object::newObject(0x28uLL, 144);
      WebKit::uniqueWorldName(&v12);
      WebKit::InjectedBundleScriptWorld::InjectedBundleScriptWorld(v7, this, (const WTF::String *)&v12);
      *a2 = v7;
      unint64_t result = v12;
      id v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::InjectedBundlePageLoaderClient::didCancelClientRedirectForFrame(uint64_t this, WebKit::WebPage *a2, WebKit::WebFrame *a3)
{
  uint64_t v3 = *(uint64_t (**)(void, void, void))(this + 144);
  if (v3) {
    return v3(*((void *)a2 + 1), *((void *)a3 + 1), *(void *)(this + 16));
  }
  return this;
}

void WebKit::InjectedBundlePageLoaderClient::willPerformClientRedirectForFrame(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, double a5, double a6)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(a1 + 152);
  if (v6)
  {
    uint64_t v10 = *(void *)(a2 + 8);
    uint64_t v11 = *(void *)(a3 + 8);
    id v12 = *a4;
    if (*a4)
    {
      __int16 v20 = *(void (**)(uint64_t, uint64_t, void, void, double, double))(a1 + 152);
      *(_DWORD *)v12 += 2;
      uint64_t v13 = (WebKit *)API::Object::newObject(0x20uLL, 24);
      *(void *)uint64_t v13 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2(v13);
      *(void *)uint64_t v13 = &unk_1EE9B53A8;
      int v15 = *(_DWORD *)v12;
      *(_DWORD *)v12 += 2;
      *((void *)v13 + 2) = v12;
      *((void *)v13 + 3) = 0;
      if (v15) {
        *(_DWORD *)id v12 = v15;
      }
      else {
        WTF::StringImpl::destroy(v12, v14);
      }
      v20(v10, v11, *((void *)v13 + 1), *(void *)(a1 + 16), a5, a6);
      id v16 = (const void *)*((void *)v13 + 1);
      CFRelease(v16);
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 16);
      uint64_t v18 = *(void *)(a2 + 8);
      uint64_t v19 = *(void *)(a3 + 8);
      v6(v18, v19, 0, v17);
    }
  }
}

uint64_t WebKit::InjectedBundlePageLoaderClient::didHandleOnloadEventsForFrame(uint64_t this, WebKit::WebPage *a2, WebKit::WebFrame *a3)
{
  uint64_t v3 = *(uint64_t (**)(void, void, void))(this + 160);
  if (v3) {
    return v3(*((void *)a2 + 1), *((void *)a3 + 1), *(void *)(this + 16));
  }
  return this;
}

void WebKit::InjectedBundlePageLoaderClient::globalObjectIsAvailableForFrame(WebKit::InjectedBundlePageLoaderClient *this, WebKit::WebPage *a2, WebKit::WebFrame *a3, WebCore::DOMWrapperWorld *a4)
{
  if (*((void *)this + 25))
  {
    WebKit::InjectedBundleScriptWorld::getOrCreate(a4, &v13);
    uint64_t v7 = v13;
    uint64_t v8 = (void (*)(uint64_t, uint64_t, void, uint64_t))*((void *)this + 25);
    uint64_t v9 = *((void *)a2 + 1);
    uint64_t v10 = *((void *)a3 + 1);
    if (v13)
    {
      v8(v9, v10, *((void *)v13 + 1), *((void *)this + 2));
      uint64_t v11 = (const void *)*((void *)v7 + 1);
      CFRelease(v11);
    }
    else
    {
      uint64_t v12 = *((void *)this + 2);
      v8(v9, v10, 0, v12);
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::serviceWorkerGlobalObjectIsAvailableForFrame(WebKit::InjectedBundlePageLoaderClient *this, WebKit::WebPage *a2, WebKit::WebFrame *a3, WebCore::DOMWrapperWorld *a4)
{
  if (*((void *)this + 41))
  {
    WebKit::InjectedBundleScriptWorld::getOrCreate(a4, &v13);
    uint64_t v7 = v13;
    uint64_t v8 = (void (*)(uint64_t, uint64_t, void, uint64_t))*((void *)this + 41);
    uint64_t v9 = *((void *)a2 + 1);
    uint64_t v10 = *((void *)a3 + 1);
    if (v13)
    {
      v8(v9, v10, *((void *)v13 + 1), *((void *)this + 2));
      uint64_t v11 = (const void *)*((void *)v7 + 1);
      CFRelease(v11);
    }
    else
    {
      uint64_t v12 = *((void *)this + 2);
      v8(v9, v10, 0, v12);
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::willInjectUserScriptForFrame(WebKit::InjectedBundlePageLoaderClient *this, WebKit::WebPage *a2, WebKit::WebFrame *a3, WebCore::DOMWrapperWorld *a4)
{
  if (*((void *)this + 39))
  {
    WebKit::InjectedBundleScriptWorld::getOrCreate(a4, &v13);
    uint64_t v7 = v13;
    uint64_t v8 = (void (*)(uint64_t, uint64_t, void, uint64_t))*((void *)this + 39);
    uint64_t v9 = *((void *)a2 + 1);
    uint64_t v10 = *((void *)a3 + 1);
    if (v13)
    {
      v8(v9, v10, *((void *)v13 + 1), *((void *)this + 2));
      uint64_t v11 = (const void *)*((void *)v7 + 1);
      CFRelease(v11);
    }
    else
    {
      uint64_t v12 = *((void *)this + 2);
      v8(v9, v10, 0, v12);
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::willDisconnectDOMWindowExtensionFromGlobalObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 208))
  {
    {
      WebKit::allExtensions(void)::map = 0;
    }
    uint64_t v5 = WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>(&WebKit::allExtensions(void)::map, a3);
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      (*(void (**)(void, void, void))(a1 + 208))(*(void *)(a2 + 8), *(void *)(v6 + 8), *(void *)(a1 + 16));
      uint64_t v7 = *(const void **)(v6 + 8);
      CFRelease(v7);
    }
    else
    {
      uint64_t v8 = *(void (**)(uint64_t, void, uint64_t))(a1 + 208);
      uint64_t v9 = *(void *)(a2 + 8);
      uint64_t v10 = *(void *)(a1 + 16);
      v8(v9, 0, v10);
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::didReconnectDOMWindowExtensionToGlobalObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 216))
  {
    {
      WebKit::allExtensions(void)::map = 0;
    }
    uint64_t v5 = WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>(&WebKit::allExtensions(void)::map, a3);
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      (*(void (**)(void, void, void))(a1 + 216))(*(void *)(a2 + 8), *(void *)(v6 + 8), *(void *)(a1 + 16));
      uint64_t v7 = *(const void **)(v6 + 8);
      CFRelease(v7);
    }
    else
    {
      uint64_t v8 = *(void (**)(uint64_t, void, uint64_t))(a1 + 216);
      uint64_t v9 = *(void *)(a2 + 8);
      uint64_t v10 = *(void *)(a1 + 16);
      v8(v9, 0, v10);
    }
  }
}

void WebKit::InjectedBundlePageLoaderClient::willDestroyGlobalObjectForDOMWindowExtension(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 224))
  {
    {
      WebKit::allExtensions(void)::map = 0;
    }
    uint64_t v5 = WTF::HashMap<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleDOMWindowExtension,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::DOMWindowExtension,WTF::DefaultWeakPtrImpl>>(&WebKit::allExtensions(void)::map, a3);
    if (v5)
    {
      uint64_t v6 = v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      (*(void (**)(void, void, void))(a1 + 224))(*(void *)(a2 + 8), *(void *)(v6 + 8), *(void *)(a1 + 16));
      uint64_t v7 = *(const void **)(v6 + 8);
      CFRelease(v7);
    }
    else
    {
      uint64_t v8 = *(void (**)(uint64_t, void, uint64_t))(a1 + 224);
      uint64_t v9 = *(void *)(a2 + 8);
      uint64_t v10 = *(void *)(a1 + 16);
      v8(v9, 0, v10);
    }
  }
}

uint64_t WebKit::InjectedBundlePageLoaderClient::shouldForceUniversalAccessFromLocalURL(WebKit::InjectedBundlePageLoaderClient *this, WebKit::WebPage *a2, WTF::StringImpl **a3)
{
  uint64_t v3 = (uint64_t (*)(uint64_t, void, void))*((void *)this + 30);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v6 = *a3;
  if (*a3) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v12 = v6;
  API::String::create(&v12, &v13);
  uint64_t v8 = v12;
  uint64_t v9 = v13;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v7);
      if (v9) {
        goto LABEL_8;
      }
      return v3(v5, 0, *((void *)this + 2));
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v9) {
    return v3(v5, 0, *((void *)this + 2));
  }
LABEL_8:
  uint64_t v10 = v3(v5, *((void *)v9 + 1), *((void *)this + 2));
  CFRelease(*((CFTypeRef *)v9 + 1));
  return v10;
}

void WebKit::InjectedBundlePageLoaderClient::featuresUsedInPage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void (**)(uint64_t, void, void))(a1 + 272);
  if (v3)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    API::Array::createStringArray(a3, &v7);
    uint64_t v6 = v7;
    if (v7)
    {
      v3(v5, *(void *)(v7 + 8), *(void *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v6 + 8));
    }
    else
    {
      v3(v5, 0, *(void *)(a1 + 16));
    }
  }
}

void WebKit::InjectedBundlePageResourceLoadClient::didInitiateLoadForResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const String *a5, uint64_t a6)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, void))(a1 + 24);
  if (v6)
  {
    uint64_t v11 = *(void *)(a2 + 8);
    uint64_t v12 = *(void *)(a3 + 8);
    uint64_t v13 = API::Object::newObject(0xD8uLL, 25);
    *(void *)uint64_t v13 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v13);
    *(void *)uint64_t v13 = &unk_1EE9D1E50;
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v13 + 16), a5);
    v6(v11, v12, a4, *(void *)(v13 + 8), a6, *(void *)(a1 + 16));
    uint64_t v14 = *(const void **)(v13 + 8);
    CFRelease(v14);
  }
}

void WebKit::InjectedBundlePageResourceLoadClient::willSendRequestForFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, String *a5, const WebCore::ResourceResponse *a6)
{
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef, CFTypeRef, void))(a1 + 32);
  if (v6)
  {
    uint64_t v11 = *(void *)(a2 + 8);
    uint64_t v12 = *(void *)(a3 + 8);
    uint64_t v13 = (CFTypeRef *)API::Object::newObject(0xD8uLL, 25);
    *uint64_t v13 = &unk_1EE9D1E28;
    WebKit::InitializeWebKit2((WebKit *)v13);
    *uint64_t v13 = &unk_1EE9D1E50;
    WebCore::ResourceRequest::ResourceRequest(v13 + 2, a5);
    CFTypeRef v14 = v13[1];
    int v15 = (CFTypeRef *)API::Object::newObject(0x110uLL, 26);
    if (API::URLResponse::URLResponse((API::URLResponse *)v15, a6)) {
      CFTypeRef v16 = v15[1];
    }
    else {
      CFTypeRef v16 = 0;
    }
    uint64_t v17 = (void *)v6(v11, v12, a4, v14, v16, *(void *)(a1 + 16));
    if (v17) {
      uint64_t v18 = [v17 _apiObject];
    }
    else {
      uint64_t v18 = 0;
    }
    if (v15) {
      CFRelease(v15[1]);
    }
    CFRelease(v13[1]);
    if (v18)
    {
      WebCore::ResourceRequestBase::httpBody(v20, (WebCore::ResourceRequestBase *)(v18 + 16));
      WebCore::ResourceRequest::updateFromDelegatePreservingOldProperties((WebCore::ResourceRequest *)a5, (const WebCore::ResourceRequest *)(v18 + 16));
      if (v20[0])
      {
        WebCore::ResourceRequestBase::setHTTPBody();
        uint64_t v19 = (WTF::RefCountedBase *)v20[0];
        v20[0] = 0;
        if (v19) {
          WTF::RefCounted<WebCore::FormData>::deref(v19);
        }
      }
      CFRelease(*(CFTypeRef *)(v18 + 8));
    }
    else
    {
      WebCore::ResourceRequest::ResourceRequest((StringImpl *)v20);
      WebCore::ResourceRequest::operator=((uint64_t)a5, (uint64_t)v20);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v20);
    }
  }
}

void WebKit::InjectedBundlePageResourceLoadClient::didReceiveResponseForResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const WebCore::ResourceResponse *a5)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(a1 + 40);
  if (v6)
  {
    CFTypeRef v14 = v6;
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = (API::URLResponse *)API::Object::newObject(0x110uLL, 26);
    if (API::URLResponse::URLResponse(v11, a5))
    {
      v14(v9, v10, a4, *((void *)v11 + 1), *(void *)(a1 + 16));
      uint64_t v12 = (const void *)*((void *)v11 + 1);
      CFRelease(v12);
    }
    else
    {
      uint64_t v13 = *(void *)(a1 + 16);
      v14(v9, v10, a4, 0, v13);
    }
  }
}

uint64_t WebKit::InjectedBundlePageResourceLoadClient::didReceiveContentLengthForResource(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(uint64_t (**)(void, void, uint64_t, uint64_t, void))(result + 48);
  if (v5) {
    return v5(*(void *)(a2 + 8), *(void *)(a3 + 8), a4, a5, *(void *)(result + 16));
  }
  return result;
}

uint64_t WebKit::InjectedBundlePageResourceLoadClient::didFinishLoadForResource(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = *(uint64_t (**)(void, void, uint64_t, void))(result + 56);
  if (v4) {
    return v4(*(void *)(a2 + 8), *(void *)(a3 + 8), a4, *(void *)(result + 16));
  }
  return result;
}

void WebKit::InjectedBundlePageResourceLoadClient::didFailLoadForResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const WebCore::ResourceError *a5)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(a1 + 64);
  if (v6)
  {
    CFTypeRef v14 = v6;
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = (API::Error *)API::Object::newObject(0x60uLL, 10);
    if (API::Error::Error(v11, a5))
    {
      v14(v9, v10, a4, *((void *)v11 + 1), *(void *)(a1 + 16));
      uint64_t v12 = (const void *)*((void *)v11 + 1);
      CFRelease(v12);
    }
    else
    {
      uint64_t v13 = *(void *)(a1 + 16);
      v14(v9, v10, a4, 0, v13);
    }
  }
}

uint64_t WebKit::InjectedBundlePageResourceLoadClient::shouldCacheResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = *(uint64_t (**)(void, void, uint64_t, void))(a1 + 72);
  if (v4) {
    return v4(*(void *)(a2 + 8), *(void *)(a3 + 8), a4, *(void *)(a1 + 16));
  }
  else {
    return 1;
  }
}

uint64_t WebKit::InjectedBundlePageResourceLoadClient::shouldUseCredentialStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = *(uint64_t (**)(void, void, uint64_t, void))(a1 + 80);
  if (v4) {
    return v4(*(void *)(a2 + 8), *(void *)(a3 + 8), a4, *(void *)(a1 + 16));
  }
  else {
    return 1;
  }
}

_OWORD *API::Client<WKBundlePageUIClientBase>::initialize(_OWORD *result, _OWORD *a2)
{
  if (a2)
  {
    if (*(_DWORD *)a2 == 5)
    {
      long long v3 = a2[1];
      *unint64_t result = *a2;
      result[1] = v3;
      long long v4 = a2[2];
      long long v5 = a2[3];
      long long v6 = a2[5];
      result[4] = a2[4];
      result[5] = v6;
      result[2] = v4;
      result[3] = v5;
      long long v7 = a2[6];
      long long v8 = a2[7];
      long long v9 = a2[9];
      result[8] = a2[8];
      result[9] = v9;
      result[6] = v7;
      result[7] = v8;
      long long v10 = a2[10];
      long long v11 = a2[11];
      long long v12 = a2[13];
      result[12] = a2[12];
      result[13] = v12;
      result[10] = v10;
      result[11] = v11;
    }
    else
    {
      result[12] = 0u;
      result[13] = 0u;
      result[10] = 0u;
      result[11] = 0u;
      result[8] = 0u;
      result[9] = 0u;
      result[6] = 0u;
      result[7] = 0u;
      result[4] = 0u;
      result[5] = 0u;
      result[2] = 0u;
      result[3] = 0u;
      *unint64_t result = 0u;
      result[1] = 0u;
      uint64_t v2 = *(unsigned int *)a2;
      if ((int)v2 <= 4)
      {
        if (v2 >= 6) {
          __break(1u);
        }
        else {
          return memcpy(result, a2, qword_1994F7798[v2]);
        }
      }
    }
  }
  else
  {
    result[12] = 0u;
    result[13] = 0u;
    result[10] = 0u;
    result[11] = 0u;
    result[8] = 0u;
    result[9] = 0u;
    result[6] = 0u;
    result[7] = 0u;
    result[4] = 0u;
    result[5] = 0u;
    result[2] = 0u;
    result[3] = 0u;
    *unint64_t result = 0u;
    result[1] = 0u;
  }
  return result;
}

uint64_t WebKit::InjectedBundlePageUIClient::InjectedBundlePageUIClient(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(a1 + 2++*(_DWORD *)(this + 16) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1EE9F0B28;
  API::Client<WKBundlePageUIClientBase>::initialize((_OWORD *)(a1 + 8), a2);
  return a1;
}

void WebKit::InjectedBundlePageUIClient::willAddMessageToConsole(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5, uint64_t a6)
{
  long long v6 = *(void (**)(uint64_t, void, uint64_t, void))(a1 + 24);
  if (v6)
  {
    if (a2) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
    WebKit::toAPI((WebKit *)&v11, *a5);
    uint64_t v10 = v11;
    if (v11)
    {
      v6(v9, *(void *)(v11 + 8), a6, *(void *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v10 + 8));
    }
    else
    {
      v6(v9, 0, a6, *(void *)(a1 + 16));
    }
  }
}

void WebKit::InjectedBundlePageUIClient::willAddMessageWithArgumentsToConsole(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5, uint64_t a6, unint64_t a7, uint64_t a8, unsigned int a9, WTF::StringImpl **a10)
{
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(a1 + 224);
  if (v10)
  {
    if (a2) {
      uint64_t v15 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v15 = 0;
    }
    WebKit::toAPI((WebKit *)&v24, *a5);
    uint64_t v16 = v24;
    if (v24) {
      uint64_t v17 = *(void *)(v24 + 8);
    }
    else {
      uint64_t v17 = 0;
    }
    API::Array::createStringArray(a6, a7, &v23);
    uint64_t v18 = v23;
    uint64_t v23 = 0;
    if (v18) {
      uint64_t v19 = *(void *)(v18 + 8);
    }
    else {
      uint64_t v19 = 0;
    }
    WebKit::toAPI((WebKit *)&v22, *a10);
    uint64_t v20 = v22;
    if (v22)
    {
      v10(v15, v17, v19, a8, a9, *(void *)(v22 + 8), *(void *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v20 + 8));
    }
    else
    {
      v10(v15, v17, v19, a8, a9, 0, *(void *)(a1 + 16));
    }
    uint64_t v21 = v23;
    uint64_t v23 = 0;
    if (v21) {
      CFRelease(*(CFTypeRef *)(v21 + 8));
    }
    if (v16) {
      CFRelease(*(CFTypeRef *)(v16 + 8));
    }
  }
}

void WebKit::InjectedBundlePageUIClient::willRunJavaScriptAlert(WebKit::InjectedBundlePageUIClient *this, WebKit::WebPage *a2, WTF::StringImpl **a3, WebKit::WebFrame *a4)
{
  long long v4 = (void (*)(uint64_t, uint64_t, uint64_t, void))*((void *)this + 5);
  if (v4)
  {
    if (a2) {
      uint64_t v7 = *((void *)a2 + 1);
    }
    else {
      uint64_t v7 = 0;
    }
    long long v8 = *a3;
    if (*a3) {
      *(_DWORD *)v8 += 2;
    }
    CFTypeRef v14 = v8;
    API::String::create(&v14, &v15);
    uint64_t v10 = v14;
    uint64_t v11 = v15;
    CFTypeRef v14 = 0;
    uint64_t v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v11)
        {
LABEL_10:
          uint64_t v12 = *((void *)v11 + 1);
          if (a4)
          {
LABEL_11:
            uint64_t v13 = *((void *)a4 + 1);
            goto LABEL_12;
          }
LABEL_17:
          uint64_t v13 = 0;
LABEL_12:
          v4(v7, v12, v13, *((void *)this + 2));
          if (v11) {
            CFRelease(*((CFTypeRef *)v11 + 1));
          }
          return;
        }
LABEL_16:
        uint64_t v12 = 0;
        if (a4) {
          goto LABEL_11;
        }
        goto LABEL_17;
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v11) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
}

void WebKit::InjectedBundlePageUIClient::willRunJavaScriptConfirm(WebKit::InjectedBundlePageUIClient *this, WebKit::WebPage *a2, WTF::StringImpl **a3, WebKit::WebFrame *a4)
{
  long long v4 = (void (*)(uint64_t, uint64_t, uint64_t, void))*((void *)this + 6);
  if (v4)
  {
    if (a2) {
      uint64_t v7 = *((void *)a2 + 1);
    }
    else {
      uint64_t v7 = 0;
    }
    long long v8 = *a3;
    if (*a3) {
      *(_DWORD *)v8 += 2;
    }
    CFTypeRef v14 = v8;
    API::String::create(&v14, &v15);
    uint64_t v10 = v14;
    uint64_t v11 = v15;
    CFTypeRef v14 = 0;
    uint64_t v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v11)
        {
LABEL_10:
          uint64_t v12 = *((void *)v11 + 1);
          if (a4)
          {
LABEL_11:
            uint64_t v13 = *((void *)a4 + 1);
            goto LABEL_12;
          }
LABEL_17:
          uint64_t v13 = 0;
LABEL_12:
          v4(v7, v12, v13, *((void *)this + 2));
          if (v11) {
            CFRelease(*((CFTypeRef *)v11 + 1));
          }
          return;
        }
LABEL_16:
        uint64_t v12 = 0;
        if (a4) {
          goto LABEL_11;
        }
        goto LABEL_17;
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v11) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
}

void WebKit::InjectedBundlePageUIClient::willRunJavaScriptPrompt(WebKit::InjectedBundlePageUIClient *this, WebKit::WebPage *a2, WTF::StringImpl **a3, WTF::StringImpl **a4, WebKit::WebFrame *a5)
{
  long long v5 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))*((void *)this + 7);
  if (!v5) {
    return;
  }
  if (a2) {
    uint64_t v9 = *((void *)a2 + 1);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *a3;
  if (*a3) {
    *(_DWORD *)v10 += 2;
  }
  uint64_t v21 = v10;
  API::String::create(&v21, &v22);
  uint64_t v12 = v21;
  uint64_t v13 = v22;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v11);
      if (v13) {
        goto LABEL_10;
      }
      goto LABEL_25;
    }
    *(_DWORD *)v12 -= 2;
  }
  if (v13)
  {
LABEL_10:
    uint64_t v14 = *((void *)v13 + 1);
    goto LABEL_11;
  }
LABEL_25:
  uint64_t v14 = 0;
LABEL_11:
  uint64_t v15 = *a4;
  if (*a4) {
    *(_DWORD *)v15 += 2;
  }
  uint64_t v21 = v15;
  API::String::create(&v21, &v22);
  uint64_t v17 = v21;
  uint64_t v18 = v22;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (!v17)
  {
LABEL_16:
    if (v18) {
      goto LABEL_17;
    }
LABEL_27:
    uint64_t v19 = 0;
    if (a5) {
      goto LABEL_18;
    }
LABEL_28:
    uint64_t v20 = 0;
    goto LABEL_19;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
    goto LABEL_16;
  }
  WTF::StringImpl::destroy(v17, v16);
  if (!v18) {
    goto LABEL_27;
  }
LABEL_17:
  uint64_t v19 = *((void *)v18 + 1);
  if (!a5) {
    goto LABEL_28;
  }
LABEL_18:
  uint64_t v20 = *((void *)a5 + 1);
LABEL_19:
  v5(v9, v14, v19, v20, *((void *)this + 2));
  if (v18) {
    CFRelease(*((CFTypeRef *)v18 + 1));
  }
  if (v13) {
    CFRelease(*((CFTypeRef *)v13 + 1));
  }
}

void WebKit::InjectedBundlePageUIClient::mouseDidMoveOverElement(uint64_t a1, uint64_t a2, WebKit::InjectedBundleHitTestResult *this, char a4, uint64_t *a5)
{
  if (*(void *)(a1 + 64))
  {
    WebKit::InjectedBundleHitTestResult::create(this, &v15);
    id v14 = 0;
    if (a2) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = v15;
    if (v15) {
      uint64_t v11 = *((void *)v15 + 1);
    }
    else {
      uint64_t v11 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, void, id *, void))(a1 + 64))(v9, v11, a4 & 0x1F, &v14, *(void *)(a1 + 16));
    uint64_t v12 = (uint64_t)v14;
    if (v14) {
      uint64_t v12 = [v14 _apiObject];
    }
    uint64_t v13 = *a5;
    *a5 = v12;
    if (v13) {
      CFRelease(*(CFTypeRef *)(v13 + 8));
    }
    if (v10) {
      CFRelease(*((CFTypeRef *)v10 + 1));
    }
  }
}

uint64_t WebKit::InjectedBundlePageUIClient::pageDidScroll(uint64_t this, WebKit::WebPage *a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t, void))(this + 72);
  if (v2)
  {
    if (a2) {
      uint64_t v3 = *((void *)a2 + 1);
    }
    else {
      uint64_t v3 = 0;
    }
    return v2(v3, *(void *)(this + 16));
  }
  return this;
}

uint64_t WebKit::InjectedBundlePageUIClient::statusBarIsVisible(WebKit::InjectedBundlePageUIClient *this, WebKit::WebPage *a2)
{
  uint64_t v2 = (uint64_t (*)(uint64_t, void))*((void *)this + 14);
  if (!v2) {
    return 0;
  }
  if (a2) {
    uint64_t v3 = *((void *)a2 + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  int v4 = v2(v3, *((void *)this + 2));
  if (v4 == 2) {
    return 2;
  }
  else {
    return v4 == 1;
  }
}

uint64_t WebKit::InjectedBundlePageUIClient::menuBarIsVisible(WebKit::InjectedBundlePageUIClient *this, WebKit::WebPage *a2)
{
  uint64_t v2 = (uint64_t (*)(uint64_t, void))*((void *)this + 15);
  if (!v2) {
    return 0;
  }
  if (a2) {
    uint64_t v3 = *((void *)a2 + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  int v4 = v2(v3, *((void *)this + 2));
  if (v4 == 2) {
    return 2;
  }
  else {
    return v4 == 1;
  }
}

uint64_t WebKit::InjectedBundlePageUIClient::toolbarsAreVisible(WebKit::InjectedBundlePageUIClient *this, WebKit::WebPage *a2)
{
  uint64_t v2 = (uint64_t (*)(uint64_t, void))*((void *)this + 16);
  if (!v2) {
    return 0;
  }
  if (a2) {
    uint64_t v3 = *((void *)a2 + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  int v4 = v2(v3, *((void *)this + 2));
  if (v4 == 2) {
    return 2;
  }
  else {
    return v4 == 1;
  }
}

uint64_t WebKit::InjectedBundlePageUIClient::didExceedDatabaseQuota(WebKit::InjectedBundlePageUIClient *this, WebKit::WebPage *a2, API::SecurityOrigin *a3, WTF::StringImpl **a4, WTF::StringImpl **a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, unint64_t, void))*((void *)this + 18);
  if (!v9) {
    return 0;
  }
  if (a2)
  {
    uint64_t v27 = *((void *)a2 + 1);
    if (a3)
    {
LABEL_4:
      uint64_t v15 = *((void *)a3 + 1);
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v27 = 0;
    if (a3) {
      goto LABEL_4;
    }
  }
  uint64_t v15 = 0;
LABEL_5:
  uint64_t v16 = *a4;
  if (*a4) {
    *(_DWORD *)v16 += 2;
  }
  __int16 v28 = v16;
  API::String::create(&v28, &v29);
  uint64_t v18 = v28;
  uint64_t v19 = v29;
  __int16 v28 = 0;
  char v29 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v17);
      if (v19) {
        goto LABEL_11;
      }
      goto LABEL_23;
    }
    *(_DWORD *)v18 -= 2;
  }
  if (v19)
  {
LABEL_11:
    uint64_t v20 = *((void *)v19 + 1);
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v20 = 0;
LABEL_12:
  uint64_t v21 = *a5;
  if (*a5) {
    *(_DWORD *)v21 += 2;
  }
  __int16 v28 = v21;
  API::String::create(&v28, &v29);
  uint64_t v23 = v28;
  uint64_t v24 = v29;
  __int16 v28 = 0;
  char v29 = 0;
  if (!v23)
  {
LABEL_17:
    if (v24) {
      goto LABEL_18;
    }
LABEL_25:
    uint64_t v25 = v9(v27, v15, v20, 0, a6, a7, a8, a9, *((void *)this + 2));
    if (!v19) {
      return v25;
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)v23 != 2)
  {
    *(_DWORD *)v23 -= 2;
    goto LABEL_17;
  }
  WTF::StringImpl::destroy(v23, v22);
  if (!v24) {
    goto LABEL_25;
  }
LABEL_18:
  uint64_t v25 = v9(v27, v15, v20, *((void *)v24 + 1), a6, a7, a8, a9, *((void *)this + 2));
  CFRelease(*((CFTypeRef *)v24 + 1));
  if (v19) {
LABEL_19:
  }
    CFRelease(*((CFTypeRef *)v19 + 1));
  return v25;
}

void WebKit::InjectedBundlePageUIClient::plugInStartLabelTitle(WebKit::InjectedBundlePageUIClient *this@<X0>, WTF::StringImpl **a2@<X1>, void *a3@<X8>)
{
  int v4 = (uint64_t (*)(uint64_t, void))*((void *)this + 19);
  if (!v4) {
    goto LABEL_14;
  }
  long long v6 = *a2;
  if (*a2) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v13 = v6;
  API::String::create(&v13, &v14);
  long long v8 = v13;
  uint64_t v9 = v14;
  uint64_t v13 = 0;
  id v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v7);
      if (v9) {
        goto LABEL_8;
      }
      goto LABEL_16;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (v9)
  {
LABEL_8:
    uint64_t v10 = *((void *)v9 + 1);
    goto LABEL_9;
  }
LABEL_16:
  uint64_t v10 = 0;
LABEL_9:
  uint64_t v11 = (void *)v4(v10, *((void *)this + 2));
  if (v11)
  {
    uint64_t v12 = objc_msgSend(v11, "_apiObject", v13, v14);
    if (!v9) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v12 = 0;
  if (v9) {
LABEL_11:
  }
    CFRelease(*((CFTypeRef *)v9 + 1));
LABEL_12:
  if (v12)
  {
    WTF::String::isolatedCopy();
    CFRelease(*(CFTypeRef *)(v12 + 8));
    return;
  }
LABEL_14:
  *a3 = 0;
}

void WebKit::InjectedBundlePageUIClient::plugInStartLabelSubtitle(WebKit::InjectedBundlePageUIClient *this@<X0>, WTF::StringImpl **a2@<X1>, void *a3@<X8>)
{
  int v4 = (uint64_t (*)(uint64_t, void))*((void *)this + 20);
  if (!v4) {
    goto LABEL_14;
  }
  long long v6 = *a2;
  if (*a2) {
    *(_DWORD *)v6 += 2;
  }
  uint64_t v13 = v6;
  API::String::create(&v13, &v14);
  long long v8 = v13;
  uint64_t v9 = v14;
  uint64_t v13 = 0;
  id v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v7);
      if (v9) {
        goto LABEL_8;
      }
      goto LABEL_16;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (v9)
  {
LABEL_8:
    uint64_t v10 = *((void *)v9 + 1);
    goto LABEL_9;
  }
LABEL_16:
  uint64_t v10 = 0;
LABEL_9:
  uint64_t v11 = (void *)v4(v10, *((void *)this + 2));
  if (v11)
  {
    uint64_t v12 = objc_msgSend(v11, "_apiObject", v13, v14);
    if (!v9) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v12 = 0;
  if (v9) {
LABEL_11:
  }
    CFRelease(*((CFTypeRef *)v9 + 1));
LABEL_12:
  if (v12)
  {
    WTF::String::isolatedCopy();
    CFRelease(*(CFTypeRef *)(v12 + 8));
    return;
  }
LABEL_14:
  *a3 = 0;
}

void WebKit::InjectedBundlePageUIClient::plugInExtraStyleSheet(WebKit::InjectedBundlePageUIClient *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t (*)(void))*((void *)this + 21);
  if (v3 && (int v4 = (void *)v3(*((void *)this + 2))) != 0)
  {
    uint64_t v5 = [v4 _apiObject];
    WTF::String::isolatedCopy();
    long long v6 = *(const void **)(v5 + 8);
    CFRelease(v6);
  }
  else
  {
    *a2 = 0;
  }
}

void WebKit::InjectedBundlePageUIClient::plugInExtraScript(WebKit::InjectedBundlePageUIClient *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t (*)(void))*((void *)this + 22);
  if (v3 && (int v4 = (void *)v3(*((void *)this + 2))) != 0)
  {
    uint64_t v5 = [v4 _apiObject];
    WTF::String::isolatedCopy();
    long long v6 = *(const void **)(v5 + 8);
    CFRelease(v6);
  }
  else
  {
    *a2 = 0;
  }
}

void WebKit::InjectedBundlePageUIClient::didClickAutoFillButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v4 = *(void (**)(void, void, id *, void))(a1 + 208);
  if (v4)
  {
    id v8 = 0;
    v4(*(void *)(a2 + 8), *(void *)(a3 + 8), &v8, *(void *)(a1 + 16));
    uint64_t v6 = (uint64_t)v8;
    if (v8) {
      uint64_t v6 = [v8 _apiObject];
    }
    uint64_t v7 = *a4;
    *a4 = v6;
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 + 8));
    }
  }
}

void WebKit::InjectedBundlePageUIClient::didResignInputElementStrongPasswordAppearance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v4 = *(void (**)(void, void, id *, void))(a1 + 216);
  if (v4)
  {
    id v8 = 0;
    v4(*(void *)(a2 + 8), *(void *)(a3 + 8), &v8, *(void *)(a1 + 16));
    uint64_t v6 = (uint64_t)v8;
    if (v8) {
      uint64_t v6 = [v8 _apiObject];
    }
    uint64_t v7 = *a4;
    *a4 = v6;
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 + 8));
    }
  }
}

WTF::StringImpl *WebKit::InjectedBundleScriptWorld::create@<X0>(WebKit::InjectedBundleScriptWorld **a1@<X8>)
{
  WebKit::uniqueWorldName(&v4);
  WebKit::InjectedBundleScriptWorld::create((const WTF::String *)&v4, a1);
  unint64_t result = v4;
  int v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WebCore::DOMWrapperWorld *WebKit::InjectedBundleScriptWorld::create@<X0>(const WTF::String *a1@<X0>, WebKit::InjectedBundleScriptWorld **a2@<X8>)
{
  int v4 = (WebKit::InjectedBundleScriptWorld *)API::Object::newObject(0x28uLL, 144);
  WebCore::ScriptController::createWorld();
  WebKit::InjectedBundleScriptWorld::InjectedBundleScriptWorld(v4, v6, a1);
  *a2 = v4;
  unint64_t result = v6;
  if (v6) {
    return (WebCore::DOMWrapperWorld *)WTF::RefCounted<WebCore::DOMWrapperWorld>::deref(v6);
  }
  return result;
}

uint64_t WebKit::uniqueWorldName@<X0>(void *a1@<X8>)
{
  uint64_t v3 = WebKit::uniqueWorldName(void)::uniqueWorldNameNumber++;
  v6[0] = (uint64_t)"UniqueWorld_";
  v6[1] = 13;
  uint64_t v5 = v3;
  uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long long>(v6, (unint64_t *)&v5, a1);
  if (!*a1) {
    __break(0xC471u);
  }
  return result;
}

WebKit::InjectedBundleScriptWorld *WebKit::InjectedBundleScriptWorld::normalWorld(WebKit::InjectedBundleScriptWorld *this)
{
    return (WebKit::InjectedBundleScriptWorld *)WebKit::InjectedBundleScriptWorld::normalWorld(void)::world;
  uint64_t v2 = (WebCore *)API::Object::newObject(0x28uLL, 144);
  uint64_t v3 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(v2);
  uint64_t v4 = 0;
  uint64_t result = WebKit::InjectedBundleScriptWorld::InjectedBundleScriptWorld(v2, v3, (const WTF::String *)&v4);
  WebKit::InjectedBundleScriptWorld::normalWorld(void)::world = (uint64_t)v2;
  return result;
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  unsigned int v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; unsigned int v7 = (v9 + i++) & v3)
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(void *)(v2 + 16 * v7);
    if (v10 != -1)
    {
      if (!v10) {
        return 0;
      }
      if (*(void *)(v10 + 8) == a2) {
        break;
      }
    }
  }
  uint64_t v11 = *(void *)(v2 + 16 * v9 + 8);
  if (v11) {
    return *(void *)(v11 + 8);
  }
  else {
    return 0;
  }
}

WebKit::InjectedBundleScriptWorld *WebKit::InjectedBundleScriptWorld::InjectedBundleScriptWorld(WebKit::InjectedBundleScriptWorld *this, WebCore::DOMWrapperWorld *a2, const WTF::String *a3)
{
  *(void *)this = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(this);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EE9F0BD0;
  ++*(_DWORD *)a2;
  *((void *)this + 3) = a2;
  unint64_t v6 = *(_DWORD **)a3;
  if (*(void *)a3) {
    *v6 += 2;
  }
  *((void *)this + 4) = v6;
  {
    WebKit::allWorlds(void)::map = 0;
  }
  WTF::WeakPtrFactory<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>::initializeIfNeeded((WebCore::DOMWrapperWorld *)((char *)a2 + 8), (uint64_t)a2);
  unsigned int v7 = (WTF *)*((void *)a2 + 1);
  ++*(_DWORD *)v7;
  uint64_t v12 = v7;
  WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::InjectedBundleScriptWorld&>(&WebKit::allWorlds(void)::map, (uint64_t *)&v12, (uint64_t)this, (uint64_t)&v11);
  uint64_t v9 = v12;
  uint64_t v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1) {
      WTF::fastFree(v9, v8);
    }
    else {
      --*(_DWORD *)v9;
    }
  }
  return this;
}

uint64_t *WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::InjectedBundleScriptWorld&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = *a2;
  uint64_t v13 = *(void *)(*a2 + 8);
  unint64_t v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
  unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  unsigned int v17 = (v16 >> 31) ^ v16;
  for (int i = 1; ; ++i)
  {
    unsigned int v19 = v17 & v10;
    uint64_t v20 = (uint64_t *)(v8 + 16 * v19);
    uint64_t v21 = (WTF *)*v20;
    if (*v20 != -1) {
      break;
    }
    uint64_t v11 = (uint64_t *)(v8 + 16 * v19);
LABEL_9:
    unsigned int v17 = i + v19;
  }
  if (!v21)
  {
    if (v11)
    {
      uint64_t *v11 = 0;
      v11[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v12 = *a2;
      uint64_t v20 = v11;
    }
    *a2 = 0;
    uint64_t v22 = (WTF *)*v20;
    *uint64_t v20 = v12;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1) {
        WTF::fastFree(v22, a2);
      }
      else {
        --*(_DWORD *)v22;
      }
    }
    if (!*(void *)(a3 + 16))
    {
      uint64_t v23 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = a3;
      uint64_t v24 = *(unsigned int **)(a3 + 16);
      *(void *)(a3 + ++*(_DWORD *)(this + 16) = v23;
      if (v24)
      {
        if (atomic_fetch_add((atomic_uint *volatile)v24, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v24);
          WTF::fastFree((WTF *)v24, a2);
        }
      }
    }
    uint64_t v25 = *(atomic_uint **)(a3 + 16);
    atomic_fetch_add(v25, 1u);
    uint64_t result = (uint64_t *)v20[1];
    v20[1] = (uint64_t)v25;
    if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
    }
    uint64_t v26 = *v6;
    if (*v6) {
      int v27 = *(_DWORD *)(v26 - 12) + 1;
    }
    else {
      int v27 = 1;
    }
    *(_DWORD *)(v26 - 12) = v27;
    uint64_t v28 = *v6;
    if (*v6) {
      int v29 = *(_DWORD *)(v28 - 12);
    }
    else {
      int v29 = 0;
    }
    uint64_t v30 = (*(_DWORD *)(v28 - 16) + v29);
    unint64_t v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 > 2 * v30) {
        goto LABEL_24;
      }
    }
    else if (3 * v31 > 4 * v30)
    {
LABEL_24:
      uint64_t v32 = v28 + 16 * v31;
      char v33 = 1;
      goto LABEL_25;
    }
    uint64_t result = (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>>::expand(v6, (WTF **)v20);
    uint64_t v20 = result;
    uint64_t v28 = *v6;
    if (*v6) {
      unint64_t v31 = *(unsigned int *)(v28 - 4);
    }
    else {
      unint64_t v31 = 0;
    }
    goto LABEL_24;
  }
  if (*((void *)v21 + 1) != v13) {
    goto LABEL_9;
  }
  if (v9) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = *(unsigned int *)(v8 - 4);
  }
  char v33 = 0;
  uint64_t v32 = v8 + 16 * v34;
LABEL_25:
  *(void *)a4 = v20;
  *(void *)(a4 + 8) = v32;
  *(unsigned char *)(a4 + ++*(_DWORD *)(this + 16) = v33;
  return result;
}

void WebKit::InjectedBundleScriptWorld::~InjectedBundleScriptWorld(WebKit::InjectedBundleScriptWorld *this, void *a2)
{
  *(void *)this = &unk_1EE9F0BD0;
  {
    int v3 = &qword_1EB35A000;
    uint64_t v4 = WebKit::allWorlds(void)::map;
    unint64_t v6 = (_DWORD **)((char *)this + 24);
    uint64_t v5 = *((void *)this + 3);
    if (WebKit::allWorlds(void)::map)
    {
      int v7 = *(_DWORD *)(WebKit::allWorlds(void)::map - 8);
      unint64_t v8 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
      unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      unsigned int v11 = v7 & ((v10 >> 31) ^ v10);
      for (int i = 1; ; ++i)
      {
        uint64_t v13 = v11;
        unint64_t v14 = *(WTF **)(WebKit::allWorlds(void)::map + 16 * v11);
        if (v14 != (WTF *)-1)
        {
          if (!v14) {
            goto LABEL_19;
          }
          if (*((void *)v14 + 1) == v5) {
            break;
          }
        }
        unsigned int v11 = (v11 + i) & v7;
      }
      if (v11 != *(_DWORD *)(WebKit::allWorlds(void)::map - 4))
      {
        unint64_t v15 = (void *)(WebKit::allWorlds(void)::map + 16 * v11);
        *unint64_t v15 = 0;
        if (*(_DWORD *)v14 == 1)
        {
          uint64_t v29 = v4;
          uint64_t v30 = v11;
          uint64_t v28 = (void *)(v4 + 16 * v11);
          WTF::fastFree(v14, a2);
          unint64_t v15 = v28;
          uint64_t v4 = v29;
          uint64_t v13 = v30;
          int v3 = &qword_1EB35A000;
        }
        else
        {
          --*(_DWORD *)v14;
        }
        *unint64_t v15 = -1;
        uint64_t v16 = v4 + 16 * v13;
        unsigned int v17 = *(unsigned int **)(v16 + 8);
        *(void *)(v16 + 8) = 0;
        if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v17);
          WTF::fastFree((WTF *)v17, a2);
          int v3 = &qword_1EB35A000;
        }
        ++*(_DWORD *)(v3[303] - 16);
        uint64_t v18 = v3[303];
        if (v18) {
          int v19 = *(_DWORD *)(v18 - 12) - 1;
        }
        else {
          int v19 = -1;
        }
        *(_DWORD *)(v18 - 12) = v19;
        uint64_t v20 = v3[303];
        if (v20)
        {
          unsigned int v21 = 6 * *(_DWORD *)(v20 - 12);
          unsigned int v22 = *(_DWORD *)(v20 - 4);
          if (v21 < v22 && v22 >= 9) {
            WTF::HashTable<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>>::rehash(&WebKit::allWorlds(void)::map, v22 >> 1, 0);
          }
        }
      }
    }
  }
  else
  {
    WebKit::allWorlds(void)::map = 0;
    unint64_t v6 = (_DWORD **)((char *)this + 24);
  }
LABEL_19:
  uint64_t v24 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  uint64_t v25 = *v6;
  *unint64_t v6 = 0;
  if (v25) {
    WTF::RefCounted<WebCore::DOMWrapperWorld>::deref(v25);
  }
  uint64_t v26 = *((void *)this + 2);
  if (v26)
  {
    *(void *)(v26 + 8) = 0;
    int v27 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v27)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, a2);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  uint64_t vars8;

  WebKit::InjectedBundleScriptWorld::~InjectedBundleScriptWorld(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t WKBundleGetTypeID()
{
  return 132;
}

uint64_t WKBundleSetServiceWorkerProxyCreationCallback(void *a1, uint64_t a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t result = WebCore::SWContextManager::singleton((WebCore::SWContextManager *)a1);
  *(void *)(result + 24) = a2;
  return result;
}

WTF::StringImpl *WKBundlePostMessage(void *a1, void *a2, void *a3)
{
  if (a1) {
    uint64_t v5 = (WebKit::InjectedBundle *)[a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    [a2 _apiObject];
    WTF::String::isolatedCopy();
  }
  else
  {
    unint64_t v9 = 0;
  }
  if (a3) {
    unint64_t v6 = (API::Object *)[a3 _apiObject];
  }
  else {
    unint64_t v6 = 0;
  }
  WebKit::InjectedBundle::postMessage(v5, (const WTF::String *)&v9, v6);
  uint64_t result = v9;
  unint64_t v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WKBundlePostSynchronousMessage(void *a1, void *a2, void *a3, CFTypeRef **a4)
{
  uint64_t v13 = 0;
  if (a1)
  {
    uint64_t v7 = [a1 _apiObject];
    if (a2) {
      goto LABEL_3;
    }
LABEL_17:
    uint64_t v12 = 0;
    if (a3) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  uint64_t v7 = 0;
  if (!a2) {
    goto LABEL_17;
  }
LABEL_3:
  [a2 _apiObject];
  WTF::String::isolatedCopy();
  if (a3)
  {
LABEL_4:
    unint64_t v8 = (const void *)objc_msgSend(a3, "_apiObject", v12);
    goto LABEL_5;
  }
LABEL_18:
  unint64_t v8 = 0;
LABEL_5:
  WebKit::InjectedBundle::postSynchronousMessage(v7, (uint64_t *)&v12, v8, &v13);
  unint64_t v10 = v12;
  uint64_t v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  unsigned int v11 = v13;
  if (a4)
  {
    if (v13) {
      unsigned int v11 = (CFTypeRef *)v13[1];
    }
    *a4 = v11;
  }
  else if (v13)
  {
    CFRelease(v13[1]);
  }
}

uint64_t WKBundleGarbageCollectJavaScriptObjects(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t v1 = WebCore::GCController::singleton((WebCore::GCController *)a1);

  return MEMORY[0x1F416CE70](v1);
}

uint64_t WKBundleGarbageCollectJavaScriptObjectsOnAlternateThreadForDebugging(void *a1, uint64_t a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t v3 = WebCore::GCController::singleton((WebCore::GCController *)a1);

  return MEMORY[0x1F416CE80](v3, a2);
}

uint64_t WKBundleGetJavaScriptObjectsCount(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::InjectedBundle::javaScriptObjectsCount((WebKit::InjectedBundle *)a1);
}

WTF::StringImpl *WKBundleAddOriginAccessAllowListEntry(void *a1, void *a2, void *a3, void *a4, const WTF::String *a5)
{
  if (a1)
  {
    unint64_t v9 = (WebKit::InjectedBundle *)[a1 _apiObject];
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v9 = 0;
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      if (a3) {
        goto LABEL_4;
      }
LABEL_21:
      unint64_t v15 = 0;
      if (a4) {
        goto LABEL_5;
      }
      goto LABEL_22;
    }
  }
  uint64_t v16 = 0;
  if (!a3) {
    goto LABEL_21;
  }
LABEL_4:
  [a3 _apiObject];
  WTF::String::isolatedCopy();
  if (a4)
  {
LABEL_5:
    [a4 _apiObject];
    WTF::String::isolatedCopy();
    goto LABEL_6;
  }
LABEL_22:
  unint64_t v14 = 0;
LABEL_6:
  WebKit::InjectedBundle::addOriginAccessAllowListEntry(v9, (const WTF::String *)&v16, (const WTF::String *)&v15, (const WTF::String *)&v14, a5);
  unsigned int v11 = v14;
  unint64_t v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = v15;
  unint64_t v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKBundleRemoveOriginAccessAllowListEntry(void *a1, void *a2, void *a3, void *a4, const WTF::String *a5)
{
  if (a1)
  {
    unint64_t v9 = (WebKit::InjectedBundle *)[a1 _apiObject];
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v9 = 0;
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      if (a3) {
        goto LABEL_4;
      }
LABEL_21:
      unint64_t v15 = 0;
      if (a4) {
        goto LABEL_5;
      }
      goto LABEL_22;
    }
  }
  uint64_t v16 = 0;
  if (!a3) {
    goto LABEL_21;
  }
LABEL_4:
  [a3 _apiObject];
  WTF::String::isolatedCopy();
  if (a4)
  {
LABEL_5:
    [a4 _apiObject];
    WTF::String::isolatedCopy();
    goto LABEL_6;
  }
LABEL_22:
  unint64_t v14 = 0;
LABEL_6:
  WebKit::InjectedBundle::removeOriginAccessAllowListEntry(v9, (const WTF::String *)&v16, (const WTF::String *)&v15, (const WTF::String *)&v14, a5);
  unsigned int v11 = v14;
  unint64_t v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v10);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = v15;
  unint64_t v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKBundleResetOriginAccessAllowLists(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::InjectedBundle::resetOriginAccessAllowLists((WebKit::InjectedBundle *)a1);
}

uint64_t WKBundleSetAsynchronousSpellCheckingEnabledForTesting(void *a1, char a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }

  return WebKit::InjectedBundle::setAsynchronousSpellCheckingEnabled((WebKit::InjectedBundle *)a1, a2);
}

char *WKBundleGetLiveDocumentURLsForTesting(void *a1, char a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::InjectedBundle::liveDocumentURLs((WebKit::InjectedBundle *)a1, a2, (uint64_t *)&v26);
  uint64_t v4 = (char *)WKMutableArrayCreate();
  uint64_t v5 = (uint64_t)v26;
  if (v26)
  {
    uint64_t v6 = *((unsigned int *)v26 - 1);
    uint64_t v7 = (WTF::UUID *)((char *)v26 + 32 * v6);
    if (*((_DWORD *)v26 - 3))
    {
      unint64_t v8 = v26;
      if (v6)
      {
        uint64_t v9 = 32 * v6;
        unint64_t v8 = v26;
        while (*(void *)v8 <= 1uLL)
        {
          unint64_t v8 = (WTF::UUID *)((char *)v8 + 32);
          v9 -= 32;
          if (!v9)
          {
            unint64_t v8 = v7;
            goto LABEL_10;
          }
        }
      }
      goto LABEL_10;
    }
    unint64_t v8 = (WTF::UUID *)((char *)v26 + 32 * v6);
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v7 = (WTF::UUID *)((char *)v26 + 32 * v6);
  if (v26)
  {
LABEL_10:
    unint64_t v10 = (WTF::UUID *)((char *)v26 + 32 * *((unsigned int *)v26 - 1));
    goto LABEL_15;
  }
  unint64_t v10 = 0;
LABEL_15:
  if (v10 != v8)
  {
    do
    {
      unsigned int v11 = (void *)WKMutableDictionaryCreate();
      uint64_t v13 = (void *)WKStringCreateWithUTF8CString((WTF::String *)"id", v12);
      unint64_t v15 = (void *)WKStringCreateWithUTF8CString((WTF::String *)"url", v14);
      WTF::UUID::toString((uint64_t *)&v25, v8);
      API::String::create(&v27);
      if (v27) {
        unsigned int v17 = (CFTypeRef *)*((void *)v27 + 1);
      }
      else {
        unsigned int v17 = 0;
      }
      uint64_t v18 = v25;
      uint64_t v25 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2) {
          WTF::StringImpl::destroy(v18, v16);
        }
        else {
          *(_DWORD *)v18 -= 2;
        }
      }
      API::String::create(&v27);
      if (v27) {
        int v19 = (CFTypeRef *)*((void *)v27 + 1);
      }
      else {
        int v19 = 0;
      }
      WKDictionarySetItem(v11, v13, v17);
      WKDictionarySetItem(v11, v15, v19);
      WKArrayAppendItem(v4, v11);
      if (v19) {
        CFRelease(*(CFTypeRef *)([(CFTypeRef *)v19 _apiObject] + 8));
      }
      if (v17) {
        CFRelease(*(CFTypeRef *)([(CFTypeRef *)v17 _apiObject] + 8));
      }
      if (v15) {
        CFRelease(*(CFTypeRef *)([v15 _apiObject] + 8));
      }
      if (v13) {
        CFRelease(*(CFTypeRef *)([v13 _apiObject] + 8));
      }
      if (v11) {
        CFRelease(*(CFTypeRef *)([v11 _apiObject] + 8));
      }
      uint64_t v20 = (WTF::UUID *)((char *)v8 + 32);
      unint64_t v8 = v7;
      if (v20 != v7)
      {
        unint64_t v8 = v20;
        while (*(void *)v8 <= 1uLL)
        {
          unint64_t v8 = (WTF::UUID *)((char *)v8 + 32);
          if (v8 == v7)
          {
            unint64_t v8 = v7;
            break;
          }
        }
      }
    }
    while (v8 != v10);
    uint64_t v5 = (uint64_t)v26;
  }
  if (v5)
  {
    uint64_t v21 = *(unsigned int *)(v5 - 4);
    if (v21)
    {
      unsigned int v22 = (WTF::StringImpl **)(v5 + 16);
      do
      {
        if ((unint64_t)*(v22 - 2) ^ 1 | (unint64_t)*(v22 - 1))
        {
          uint64_t v23 = *v22;
          *unsigned int v22 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v3);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
        }
        v22 += 4;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree((WTF *)(v5 - 16), v3);
  }
  return v4;
}

uint64_t WKBundleSetDatabaseQuota(WebCore::DatabaseTracker *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (WebCore::DatabaseTracker *)WebCore::DatabaseTracker::singleton(a1);
  WebCore::SecurityOriginData::fromDatabaseIdentifier();
  if (!v6) {
    __break(1u);
  }
  uint64_t result = WebCore::DatabaseTracker::setQuota(v1, (const WebCore::SecurityOriginData *)v4);
  if (v6)
  {
    if (v5 != -1) {
      return ((uint64_t (*)(char *, unsigned char *))off_1EE9F0BE8[v5])(&v3, v4);
    }
  }
  return result;
}

uint64_t WKBundleReleaseMemory()
{
  return WebCore::releaseMemory();
}

uint64_t WKBundleCreateWKDataFromUInt8Array(void *a1, OpaqueJSContext *a2, OpaqueJSValue *a3)
{
  if (a1) {
    [a1 _apiObject];
  }
  WebKit::InjectedBundle::createWebDataFromUint8Array((unint64_t)a3, &v5);
  if (v5) {
    return *((void *)v5 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKBundleNumberOfPages(void *a1, void *a2, const WebCore::FloatSize *a3, double a4, double a5)
{
  if (a1)
  {
    unint64_t v8 = (WebKit::InjectedBundle *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      uint64_t v9 = (WebKit::WebFrame *)[a2 _apiObject];
      goto LABEL_4;
    }
  }
  else
  {
    unint64_t v8 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v9 = 0;
LABEL_4:

  return WebKit::InjectedBundle::numberOfPages(v8, v9, a4, a5, a3);
}

uint64_t WKBundlePageNumberForElementById(void *a1, void *a2, void *a3, double a4, double a5)
{
  unint64_t v8 = a2;
  if (a1)
  {
    uint64_t v9 = (WebKit::InjectedBundle *)[a1 _apiObject];
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v9 = 0;
  if (a2) {
LABEL_3:
  }
    unint64_t v8 = (void *)[v8 _apiObject];
LABEL_4:
  if (a3)
  {
    [a3 _apiObject];
    WTF::String::isolatedCopy();
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t v11 = WebKit::InjectedBundle::pageNumberForElementById(v9, (WebKit::WebFrame *)v8, (const WTF::String *)&v14, a4, a5);
  uint64_t v12 = v14;
  unint64_t v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  return v11;
}

uint64_t WKBundlePageSizeAndMarginsInPixels(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  if (a1) {
    [a1 _apiObject];
  }
  if (a2) {
    unint64_t v10 = (WebKit::WebFrame *)[a2 _apiObject];
  }
  else {
    unint64_t v10 = 0;
  }
  WebKit::InjectedBundle::pageSizeAndMarginsInPixels(v10, &v15, a9);
  API::String::create(&v16);
  if (v16) {
    uint64_t v12 = *((void *)v16 + 1);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = v15;
  unint64_t v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v11);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  return v12;
}

uint64_t WKBundleIsPageBoxVisible(void *a1, void *a2)
{
  if (a1)
  {
    char v3 = (WebKit::InjectedBundle *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      uint64_t v4 = (WebKit::WebFrame *)[a2 _apiObject];
      goto LABEL_4;
    }
  }
  else
  {
    char v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = 0;
LABEL_4:

  return WebKit::InjectedBundle::isPageBoxVisible(v3, v4);
}

uint64_t WKBundleIsProcessingUserGesture(uint64_t a1, const Document *a2)
{
  return WebCore::UserGestureIndicator::processingUserGesture(0, a2);
}

WTF::StringImpl *WKBundleSetUserStyleSheetLocationForTesting(void *a1, void *a2)
{
  if (a1)
  {
    char v3 = (WebKit::InjectedBundle *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    char v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  char v6 = 0;
LABEL_4:
  WebKit::InjectedBundle::setUserStyleSheetLocation(v3, &v6);
  uint64_t result = v6;
  char v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl **WKBundleRemoveAllWebNotificationPermissions(void *a1, void *a2)
{
  if (a1) {
    [a1 _apiObject];
  }
  if (a2) {
    char v3 = (WebKit::WebPage *)[a2 _apiObject];
  }
  else {
    char v3 = 0;
  }
  uint64_t v4 = (WebKit::NotificationPermissionRequestManager *)WebKit::WebPage::notificationPermissionRequestManager(v3);

  return WebKit::NotificationPermissionRequestManager::removeAllPermissionsForTesting(v4);
}

uint64_t WKBundleCopyWebNotificationID(void *a1, uint64_t a2, JSValue a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1) {
    [a1 _apiObject];
  }
  if (a3.super.isa) {
    isa = a3.super.isa;
  }
  else {
    isa = (JSC::VM *)2;
  }
  uint64_t result = WebCore::JSNotification::toWrapped(*(WebCore::JSNotification **)(a2 + 56), isa, a3);
  if (result)
  {
    uint64_t v7 = *(void *)(result + 72);
    v9[0] = *(void *)(result + 64);
    v9[1] = v7;
    char v10 = 1;
    API::Data::create((WTF *)0x10, v9, &v8);
    if (v8) {
      return *((void *)v8 + 1);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t WKBundleSetTabKeyCyclesThroughElements(void *a1, void *a2, char a3)
{
  if (a1) {
    [a1 _apiObject];
  }
  uint64_t result = [a2 _apiObject];
  *(unsigned char *)(*(void *)(result + 48) + 338) = a3;
  return result;
}

uint64_t WKBundleClearResourceLoadStatistics(WebCore::ResourceLoadObserver *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)WebCore::ResourceLoadObserver::shared(a1) + 104);

  return v1();
}

uint64_t WKBundleResourceLoadStatisticsNotifyObserver(WebCore::ResourceLoadObserver *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = WebCore::ResourceLoadObserver::shared(a1);
  int v5 = (WebCore::ResourceLoadObserver *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 112))(v4);
  if (v5)
  {
    uint64_t v6 = WebCore::ResourceLoadObserver::shared(v5);
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v7 = &unk_1EE9F0C08;
    v7[1] = a2;
    v7[2] = a3;
    char v10 = v7;
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 96))(v6, &v10);
    uint64_t result = (uint64_t)v10;
    char v10 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    return a3(a2);
  }
  return result;
}

void WKBundleExtendClassesForParameterCoder(void *a1, void *a2)
{
  if (a2)
  {
    char v3 = (API::Array *)[a2 _apiObject];
    if (a1) {
      uint64_t v4 = (WebKit::InjectedBundle *)[a1 _apiObject];
    }
    else {
      uint64_t v4 = 0;
    }
    WebKit::InjectedBundle::extendClassesForParameterCoder(v4, v3);
  }
}

uint64_t WKBundleBackForwardListGetTypeID()
{
  return 0;
}

uint64_t WKBundleBackForwardListCopyItemAtIndex()
{
  return 0;
}

uint64_t WKBundleBackForwardListGetBackListCount()
{
  return 0;
}

uint64_t WKBundleBackForwardListGetForwardListCount()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemGetTypeID()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemIsSame()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemCopyOriginalURL()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemCopyURL()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemCopyTitle()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemCopyTarget()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemIsTargetItem()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemIsInBackForwardCache()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemHasCachedPageExpired()
{
  return 0;
}

uint64_t WKBundleBackForwardListItemCopyChildren()
{
  return 0;
}

uint64_t WKBundleDOMWindowExtensionGetTypeID()
{
  return 136;
}

WebKit::InjectedBundleDOMWindowExtension *WKBundleDOMWindowExtensionCreate(void *a1, void *a2)
{
  uint64_t v2 = a2;
  if (a1)
  {
    char v3 = (WebKit::WebFrame *)[a1 _apiObject];
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  char v3 = 0;
  if (a2) {
LABEL_3:
  }
    uint64_t v2 = (void *)[v2 _apiObject];
LABEL_4:
  uint64_t v4 = (WebKit::InjectedBundleDOMWindowExtension *)API::Object::newObject(0x28uLL, 136);
  uint64_t result = WebKit::InjectedBundleDOMWindowExtension::InjectedBundleDOMWindowExtension(v4, v3, (WebKit::InjectedBundleScriptWorld *)v2);
  if (result) {
    return (WebKit::InjectedBundleDOMWindowExtension *)*((void *)result + 1);
  }
  return result;
}

const void *WKBundleDOMWindowExtensionGetFrame(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::InjectedBundleDOMWindowExtension::frame((WebCore::DOMWindowExtension **)a1, &v3);
  if (!v3) {
    return 0;
  }
  uint64_t v1 = *(const void **)(v3 + 8);
  uint64_t v3 = 0;
  CFRelease(v1);
  return v1;
}

WebKit::InjectedBundleScriptWorld *WKBundleDOMWindowExtensionGetScriptWorld(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t result = WebKit::InjectedBundleDOMWindowExtension::world((WebKit::InjectedBundleDOMWindowExtension *)a1);
  if (result) {
    return (WebKit::InjectedBundleScriptWorld *)*((void *)result + 1);
  }
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)144>::type()
{
  return 144;
}

_DWORD *WTF::RefCounted<WebCore::DOMWrapperWorld>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    uint64_t v1 = (WTF *)MEMORY[0x199732730]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>>::expand(uint64_t *a1, WTF **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleScriptWorld,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v7;
    do
    {
      unint64_t v14 = (WTF **)(v6 + 16 * v11);
      unint64_t v15 = *v14;
      if (*v14)
      {
        if (v15 != (WTF *)-1)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = ~(*((void *)v15 + 1) << 32) + *((void *)v15 + 1);
          unint64_t v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
          unint64_t v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
          unsigned int v21 = v17 & (((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~(v20 << 27)));
          int v22 = 1;
          do
          {
            unsigned int v23 = v21;
            uint64_t v24 = *(void *)(v16 + 16 * v21);
            unsigned int v21 = (v21 + v22++) & v17;
          }
          while (v24);
          uint64_t v25 = v16 + 16 * v23;
          uint64_t v26 = *(unsigned int **)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (v26 && atomic_fetch_add((atomic_uint *volatile)v26, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v26);
            WTF::fastFree((WTF *)v26, v10);
          }
          int v27 = *(WTF **)v25;
          *(void *)uint64_t v25 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 1) {
              WTF::fastFree(v27, v10);
            }
            else {
              --*(_DWORD *)v27;
            }
          }
          uint64_t v28 = *v14;
          *unint64_t v14 = 0;
          *(void *)uint64_t v25 = v28;
          uint64_t v29 = v6 + 16 * v11;
          uint64_t v30 = *(void *)(v29 + 8);
          *(void *)(v29 + 8) = 0;
          *(void *)(v25 + 8) = v30;
          unint64_t v31 = *(unsigned int **)(v29 + 8);
          *(void *)(v29 + 8) = 0;
          if (v31 && atomic_fetch_add((atomic_uint *volatile)v31, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v31);
            WTF::fastFree((WTF *)v31, v10);
          }
          uint64_t v32 = *v14;
          *unint64_t v14 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 1) {
              WTF::fastFree(v32, v10);
            }
            else {
              --*(_DWORD *)v32;
            }
          }
          if (v14 == a3) {
            uint64_t v12 = v25;
          }
        }
      }
      else
      {
        char v33 = (unsigned int *)v14[1];
        v14[1] = 0;
        if (v33 && atomic_fetch_add((atomic_uint *volatile)v33, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v33);
          WTF::fastFree((WTF *)v33, v10);
        }
        uint64_t v34 = *v14;
        *unint64_t v14 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 1) {
            WTF::fastFree(v34, v10);
          }
          else {
            --*(_DWORD *)v34;
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WTF *WTF::WeakPtrFactory<WebCore::DOMWrapperWorld,WTF::SingleThreadWeakPtrImpl>::initializeIfNeeded(WTF *result, uint64_t a2)
{
  if (!*(void *)result)
  {
    uint64_t v3 = (WTF **)result;
    uint64_t v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v5 = 1;
    *(void *)(v5 + 8) = a2;
    uint64_t result = *v3;
    WebKit::WebFrame *v3 = (WTF *)v5;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        return (WTF *)WTF::fastFree(result, v4);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKBundleResourceLoadStatisticsNotifyObserver::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t WKBundleFrameGetTypeID()
{
  return 137;
}

BOOL WKBundleFrameIsMainFrame(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 24);
  return v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0 && *(void *)(*(void *)(v2 + 128) + 8) == v2;
}

uint64_t WKBundleFrameIsRemote(void *a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)([a1 _apiObject] + 24) + 8) + 144);
}

const void *WKBundleFrameGetParentFrame(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::WebFrame::parentFrame((unsigned int *)a1, &v3);
  if (!v3) {
    return 0;
  }
  uint64_t v1 = *(const void **)(v3 + 8);
  CFRelease(v1);
  return v1;
}

uint64_t WKBundleFrameCopyURL(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::WebFrame::url((WebKit::WebFrame *)a1, (uint64_t)&v7);
  if (!v7) {
    return 0;
  }
  uint64_t v1 = (WebKit *)API::Object::newObject(0x20uLL, 24);
  *(void *)uint64_t v1 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v1);
  *(void *)uint64_t v1 = &unk_1EE9B53A8;
  uint64_t v3 = v7;
  if (v7)
  {
    int v4 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    *((void *)v1 + 2) = v3;
    *((void *)v1 + 3) = 0;
    uint64_t v5 = *((void *)v1 + 1);
    unsigned int v7 = 0;
    if (v4) {
      *(_DWORD *)uint64_t v3 = v4;
    }
    else {
      WTF::StringImpl::destroy(v3, v2);
    }
  }
  else
  {
    *((void *)v1 + 2) = 0;
    *((void *)v1 + 3) = 0;
    return *((void *)v1 + 1);
  }
  return v5;
}

uint64_t WKBundleFrameCopyProvisionalURL(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::WebFrame::provisionalURL((unsigned int *)a1, &v7);
  uint64_t v1 = v7;
  if (!v7) {
    return 0;
  }
  uint64_t v2 = (WebKit *)API::Object::newObject(0x20uLL, 24);
  *(void *)uint64_t v2 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2(v2);
  *(void *)uint64_t v2 = &unk_1EE9B53A8;
  int v4 = *(_DWORD *)v1;
  *(_DWORD *)v1 += 2;
  *((void *)v2 + 2) = v1;
  *((void *)v2 + 3) = 0;
  uint64_t v5 = *((void *)v2 + 1);
  if (v4) {
    *(_DWORD *)uint64_t v1 = v4;
  }
  else {
    WTF::StringImpl::destroy(v1, v3);
  }
  return v5;
}

API::URL *WebKit::toCopiedURLAPI(WebKit *this, const WTF::String *a2)
{
  if (!*(void *)this) {
    return 0;
  }
  uint64_t v3 = (API::URL *)API::Object::newObject(0x20uLL, 24);
  uint64_t result = API::URL::URL(v3, this);
  if (result) {
    return (API::URL *)*((void *)result + 1);
  }
  return result;
}

uint64_t WKBundleFrameGetFrameLoadState(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 24);
  if (!v1) {
    return 2;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return 2;
  }
  uint64_t result = 2;
  if (!*(unsigned char *)(v2 + 144))
  {
    unsigned int v4 = *(unsigned __int8 *)(*(void *)(v2 + 280) + 80);
    if (v4 >= 2) {
      return 2;
    }
    else {
      return v4;
    }
  }
  return result;
}

uint64_t WKBundleFrameCopyChildFrames(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::WebFrame::childFrames((WebKit::WebFrame *)a1, &v2);
  if (v2) {
    return *(void *)(v2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKBundleFrameGetJavaScriptContext(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebFrame::jsContext((WebKit::WebFrame *)a1);
}

const void *WKBundleFrameForJavaScriptContext(WebKit::WebFrame *a1, const OpaqueJSContext *a2)
{
  WebKit::WebFrame::frameForContext(a1, a2, &v4);
  if (!v4) {
    return 0;
  }
  uint64_t v2 = *(const void **)(v4 + 8);
  CFRelease(v2);
  return v2;
}

uint64_t WKBundleFrameGetJavaScriptContextForWorld(void *a1, void *a2)
{
  if (a1) {
    uint64_t v3 = (WebKit::WebFrame *)[a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(WebCore::DOMWrapperWorld **)([a2 _apiObject] + 24);

  return WebKit::WebFrame::jsContextForWorld(v3, v4);
}

uint64_t WKBundleFrameGetJavaScriptWrapperForNodeForWorld(void *a1, void *a2, void *a3)
{
  if (a1) {
    uint64_t v5 = [a1 _apiObject];
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2) {
    a2 = (void *)[a2 _apiObject];
  }
  if (a3) {
    uint64_t v6 = [a3 _apiObject];
  }
  else {
    uint64_t v6 = 0;
  }

  return WebKit::WebFrame::jsWrapperForWorld(v5, (uint64_t)a2, v6);
}

uint64_t WKBundleFrameGetJavaScriptWrapperForRangeForWorld(void *a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  if (a1)
  {
    uint64_t v5 = [a1 _apiObject];
    if (!v4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if (a2) {
LABEL_3:
  }
    uint64_t v4 = (void *)[v4 _apiObject];
LABEL_4:
  if (a3) {
    uint64_t v6 = [a3 _apiObject];
  }
  else {
    uint64_t v6 = 0;
  }

  return WebKit::WebFrame::jsWrapperForWorld(v5, (uint64_t)v4, v6);
}

uint64_t WKBundleFrameCopyName(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::WebFrame::name((WTF::StringImpl *)a1, &v5);
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v5;
  uint64_t v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

uint64_t WKBundleFrameCopyCounterValue(void *a1, WebKit::WebFrame *this)
{
  if (a1) {
    [a1 _apiObject];
  }
  WebKit::WebFrame::counterValue((uint64_t *)this, &v7);
  API::String::create(&v8);
  if (v8) {
    uint64_t v4 = *((void *)v8 + 1);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v7;
  unsigned int v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v4;
}

uint64_t WKBundleFrameGetPendingUnloadCount(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebFrame::pendingUnloadCount((WebKit::WebFrame *)a1);
}

uint64_t WKBundleFrameGetPage(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 24);
  if (v1
    && (uint64_t v2 = *(void *)(v1 + 8)) != 0
    && (uint64_t v3 = *(void *)(v2 + 24)) != 0
    && (uint64_t v4 = *(void *)(v3 + 8)) != 0
    && (uint64_t v5 = *(void **)(*(void *)(v4 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v5 + 1368))(v5) & 1) == 0)
    && (uint64_t v6 = *(void *)(v5[2] + 8)) != 0)
  {
    return *(void *)(v6 - 8);
  }
  else
  {
    return 0;
  }
}

uint64_t WKBundleFrameClearOpener(void *a1)
{
  uint64_t result = [a1 _apiObject];
  uint64_t v2 = *(void *)(result + 24);
  if (v2)
  {
    uint64_t result = *(void *)(v2 + 8);
    if (result)
    {
      if (!*(unsigned char *)(result + 144))
      {
        return MEMORY[0x1F4172A08]();
      }
    }
  }
  return result;
}

unsigned int *WKBundleFrameStopLoading(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebFrame::stopLoading((unsigned int *)a1);
}

uint64_t WKBundleFrameCopyLayerTreeAsText(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::WebFrame::layerTreeAsText((unsigned int *)a1, &v5);
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v5;
  uint64_t v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

uint64_t WKBundleFrameAllowsFollowingLink(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = (WebKit::WebFrame *)[a1 _apiObject];
    if (a2) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v4 = 0;
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if (!a2) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v4 = *(WTF::StringImpl **)([a2 _apiObject] + 16);
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
LABEL_7:
  char v10 = v4;
  MEMORY[0x19972E890](v11, &v10, 0);
  uint64_t v6 = WebKit::WebFrame::allowsFollowingLink(v3, (const WTF::URL *)v11);
  unsigned int v7 = v11[0];
  v11[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  int v8 = v10;
  char v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return v6;
}

uint64_t WKBundleFrameHandlesPageScaleGesture()
{
  return 0;
}

double WKBundleFrameGetContentBounds(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return (double)(int)WebKit::WebFrame::contentBounds((WebKit::WebFrame *)a1);
}

double WKBundleFrameGetVisibleContentBounds(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return (double)(int)WebKit::WebFrame::visibleContentBounds((WebKit::WebFrame *)a1);
}

double WKBundleFrameGetVisibleContentBoundsExcludingScrollbars(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return (double)(int)WebKit::WebFrame::visibleContentBoundsExcludingScrollbars((WebKit::WebFrame *)a1);
}

double WKBundleFrameGetScrollOffset(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return (double)(int)WebKit::WebFrame::scrollOffset((WebKit::WebFrame *)a1);
}

BOOL WKBundleFrameHasHorizontalScrollbar(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebFrame::hasHorizontalScrollbar((WebKit::WebFrame *)a1);
}

BOOL WKBundleFrameHasVerticalScrollbar(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebFrame::hasVerticalScrollbar((WebKit::WebFrame *)a1);
}

uint64_t WKBundleFrameGetDocumentBackgroundColor(void *a1, double *a2, double *a3, double *a4, double *a5)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }

  return WebKit::WebFrame::getDocumentBackgroundColor((WebKit::WebFrame *)a1, a2, a3, a4, a5);
}

uint64_t WKBundleFrameCopySuggestedFilenameForResourceWithURL(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = (unsigned int *)[a1 _apiObject];
    if (a2) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v4 = 0;
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if (!a2) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v4 = *(WTF::StringImpl **)([a2 _apiObject] + 16);
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
LABEL_7:
  uint64_t v11 = v4;
  MEMORY[0x19972E890](v12, &v11, 0);
  WebKit::WebFrame::suggestedFilenameForResourceWithURL(v3, (const WTF::URL *)v12, &v13);
  API::String::create(&v14);
  if (v14) {
    uint64_t v6 = *((void *)v14 + 1);
  }
  else {
    uint64_t v6 = 0;
  }
  unsigned int v7 = v13;
  uint64_t v13 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  int v8 = v12[0];
  v12[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v11;
  uint64_t v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v5);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  return v6;
}

uint64_t WKBundleFrameCopyMIMETypeForResourceWithURL(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = (unsigned int *)[a1 _apiObject];
    if (a2) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v4 = 0;
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if (!a2) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v4 = *(WTF::StringImpl **)([a2 _apiObject] + 16);
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
LABEL_7:
  uint64_t v11 = v4;
  MEMORY[0x19972E890](v12, &v11, 0);
  WebKit::WebFrame::mimeTypeForResourceWithURL(v3, (const WTF::URL *)v12, &v13);
  API::String::create(&v14);
  if (v14) {
    uint64_t v6 = *((void *)v14 + 1);
  }
  else {
    uint64_t v6 = 0;
  }
  unsigned int v7 = v13;
  uint64_t v13 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  int v8 = v12[0];
  v12[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = v11;
  uint64_t v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v5);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  return v6;
}

BOOL WKBundleFrameContainsAnyFormElements(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebFrame::containsAnyFormElements((WebKit::WebFrame *)a1);
}

uint64_t WKBundleFrameContainsAnyFormControls(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebFrame::containsAnyFormControls((WebKit::WebFrame *)a1);
}

WTF::StringImpl *WKBundleFrameSetTextDirection(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = (unsigned int *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_4:
  WebKit::WebFrame::setTextDirection(v3, (const WTF::String *)&v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKBundleFrameSetAccessibleName(void *a1, WTF::StringImpl *a2)
{
  uint64_t v2 = a2;
  if (a1)
  {
    uint64_t v3 = (unsigned int *)[a1 _apiObject];
    if (!v2) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (!a2) {
      goto LABEL_6;
    }
  }
  [(WTF::StringImpl *)v2 _apiObject];
  WTF::String::isolatedCopy();
  uint64_t v2 = v8;
  if (v8 && (*((unsigned char *)v8 + 16) & 0x10) == 0)
  {
    WTF::AtomStringImpl::addSlowCase();
    uint64_t v2 = v9;
    uint64_t v9 = 0;
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v4);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
LABEL_6:
  uint64_t v9 = v2;
  WebKit::WebFrame::setAccessibleName(v3, (const WTF::AtomString *)&v9);
  uint64_t v6 = v9;
  uint64_t v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return 0;
}

uint64_t WKBundleFrameCopyWebArchive(void *a1)
{
  return WKBundleFrameCopyWebArchiveFilteringSubframes(a1, 0, 0);
}

uint64_t WKBundleFrameCopyWebArchiveFilteringSubframes(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  v11[0] = 0;
  v11[1] = 0;
  WebKit::WebFrame::webArchiveData((uint64_t)a1, a2, a3, (uint64_t *)&theData);
  WTF::Vector<WebCore::MarkupExclusionRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v5);
  if (!theData) {
    return 0;
  }
  BytePtr = CFDataGetBytePtr(theData);
  Length = (WTF *)CFDataGetLength(theData);
  API::Data::create(Length, BytePtr, v11);
  if (v11[0]) {
    uint64_t v8 = *((void *)v11[0] + 1);
  }
  else {
    uint64_t v8 = 0;
  }
  CFDataRef v9 = theData;
  CFDataRef theData = 0;
  if (v9) {
    CFRelease(v9);
  }
  return v8;
}

uint64_t WKBundleFrameCallShouldCloseOnWebView(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 24);
  if (!v1) {
    return 1;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2 || *(unsigned char *)(v2 + 144)) {
    return 1;
  }
  uint64_t v4 = *(WebCore::FrameLoader **)(v2 + 280);

  return WebCore::FrameLoader::shouldClose(v4);
}

uint64_t WKBundleFrameCreateHitTestResult(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::WebFrame::hitTest((unsigned int *)a1, &v2);
  if (v2) {
    return *(void *)(v2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKBundleFrameCopySecurityOrigin(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 24);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2 || *(unsigned char *)(v2 + 144)) {
    return 0;
  }
  uint64_t result = WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(void *)(v2 + 296) + 208));
  if (result)
  {
    API::SecurityOrigin::create(&v4);
    if (!v4) {
      return 0;
    }
    return *(void *)(v4 + 8);
  }
  return result;
}

unsigned int *WKBundleFrameFocus(void *a1)
{
  uint64_t result = (unsigned int *)[a1 _apiObject];
  uint64_t v2 = *((void *)result + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (!*(unsigned char *)(v3 + 144))
      {
        atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
        uint64_t v4 = *(void *)(v3 + 24);
        if (v4) {
          uint64_t v5 = *(WebCore::Page **)(v4 + 8);
        }
        else {
          uint64_t v5 = 0;
        }
        WebCore::Page::checkedFocusController((uint64_t *)&v7, v5);
        WebCore::FocusController::setFocusedFrame();
        uint64_t v6 = v7;
        unsigned int v7 = 0;
        if (v6)
        {
          if (!*v6)
          {
            __break(0xC471u);
            JUMPOUT(0x199153EB0);
          }
          --*v6;
        }
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
      }
    }
  }
  return result;
}

unsigned int *_WKBundleFrameGenerateTestReport(void *a1, void *a2, void *a3)
{
  uint64_t result = (unsigned int *)[a1 _apiObject];
  uint64_t v6 = *((void *)result + 3);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7)
    {
      if (!*(unsigned char *)(v7 + 144))
      {
        uint64_t v8 = (unsigned int *)(v7 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
        uint64_t v9 = *(void *)(v7 + 296);
        if (!v9) {
          return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
        }
        *(_DWORD *)(v9 + 28) += 2;
        if (!*(void *)(v9 + 3232)) {
          WebCore::Document::ensureReportingScope((WebCore::Document *)v9);
        }
        if (a2)
        {
          [a2 _apiObject];
          WTF::String::isolatedCopy();
          if (a3)
          {
LABEL_9:
            [a3 _apiObject];
            WTF::String::isolatedCopy();
LABEL_10:
            WebCore::ReportingScope::generateTestReport();
            if (v11)
            {
              if (*(_DWORD *)v11 == 2) {
                WTF::StringImpl::destroy(v11, v10);
              }
              else {
                *(_DWORD *)v11 -= 2;
              }
            }
            if (v12)
            {
              if (*(_DWORD *)v12 == 2) {
                WTF::StringImpl::destroy(v12, v10);
              }
              else {
                *(_DWORD *)v12 -= 2;
              }
            }
            if (*(_DWORD *)(v9 + 28) == 2)
            {
              if ((*(_WORD *)(v9 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v9);
              }
            }
            else
            {
              *(_DWORD *)(v9 + 28) -= 2;
            }
            return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
          }
        }
        else
        {
          uint64_t v12 = 0;
          if (a3) {
            goto LABEL_9;
          }
        }
        uint64_t v11 = 0;
        goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t WKAccessibilityRootObject(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 24);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2 || *(unsigned char *)(v2 + 144)) {
    return 0;
  }
  uint64_t v4 = (unsigned int *)(v2 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
  atomic_store(1u, MEMORY[0x1E4FB64B0]);
  uint64_t v5 = *(void *)(*(void *)(*(void *)(v2 + 616) + 8) + 296);
  if (!v5)
  {
    uint64_t v3 = 0;
LABEL_14:
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
    return v3;
  }
  *(_DWORD *)(v5 + 28) += 2;
  uint64_t v6 = (WebCore::AXObjectCache *)WebCore::Document::axObjectCache((WebCore::Document *)v5);
  if (!v6)
  {
    uint64_t v3 = 0;
LABEL_12:
    if (*(_DWORD *)(v5 + 28) == 2)
    {
      if ((*(_WORD *)(v5 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
    }
    else
    {
      *(_DWORD *)(v5 + 28) -= 2;
    }
    goto LABEL_14;
  }
  uint64_t v7 = v6;
  ++*((_DWORD *)v6 + 2);
  uint64_t v8 = WebCore::AXObjectCache::rootObject(v6);
  if (v8) {
    uint64_t v3 = *(void *)(v8 + 24);
  }
  else {
    uint64_t v3 = 0;
  }
  int v9 = *((_DWORD *)v7 + 2);
  if (v9)
  {
    *((_DWORD *)v7 + 2) = v9 - 1;
    goto LABEL_12;
  }
  uint64_t result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WKBundleHitTestResultGetTypeID()
{
  return 138;
}

WebKit::InjectedBundleNodeHandle *WKBundleHitTestResultCopyNodeHandle(void *a1)
{
  uint64_t result = *(WebKit::InjectedBundleNodeHandle **)([a1 _apiObject] + 96);
  if (result)
  {
    WebKit::InjectedBundleNodeHandle::getOrCreate(result, &v2);
    if (v2) {
      return (WebKit::InjectedBundleNodeHandle *)*((void *)v2 + 1);
    }
    else {
      return 0;
    }
  }
  return result;
}

WebKit::InjectedBundleNodeHandle *WKBundleHitTestResultCopyURLElementHandle(void *a1)
{
  uint64_t result = *(WebKit::InjectedBundleNodeHandle **)([a1 _apiObject] + 120);
  if (result)
  {
    WebKit::InjectedBundleNodeHandle::getOrCreate(result, &v2);
    if (v2) {
      return (WebKit::InjectedBundleNodeHandle *)*((void *)v2 + 1);
    }
    else {
      return 0;
    }
  }
  return result;
}

const void *WKBundleHitTestResultGetFrame(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::InjectedBundleHitTestResult::frame((uint64_t)a1, &v3);
  if (!v3) {
    return 0;
  }
  uint64_t v1 = *(const void **)(v3 + 8);
  uint64_t v3 = 0;
  CFRelease(v1);
  return v1;
}

const void *WKBundleHitTestResultGetTargetFrame(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::InjectedBundleHitTestResult::targetFrame((WebKit::InjectedBundleHitTestResult *)a1, &v3);
  if (!v3) {
    return 0;
  }
  uint64_t v1 = *(const void **)(v3 + 8);
  uint64_t v3 = 0;
  CFRelease(v1);
  return v1;
}

API::URL *WKBundleHitTestResultCopyAbsoluteImageURL(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::InjectedBundleHitTestResult::absoluteImageURL((WebKit::InjectedBundleHitTestResult *)a1, &v6);
  uint64_t v3 = WebKit::toCopiedURLAPI((WebKit *)&v6, v1);
  uint64_t v4 = v6;
  uint64_t v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return v3;
}

API::URL *WKBundleHitTestResultCopyAbsolutePDFURL(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::InjectedBundleHitTestResult::absolutePDFURL((WebKit::InjectedBundleHitTestResult *)a1, &v6);
  uint64_t v3 = WebKit::toCopiedURLAPI((WebKit *)&v6, v1);
  uint64_t v4 = v6;
  uint64_t v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return v3;
}

API::URL *WKBundleHitTestResultCopyAbsoluteLinkURL(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::InjectedBundleHitTestResult::absoluteLinkURL((WebKit::InjectedBundleHitTestResult *)a1, &v6);
  uint64_t v3 = WebKit::toCopiedURLAPI((WebKit *)&v6, v1);
  uint64_t v4 = v6;
  uint64_t v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return v3;
}

API::URL *WKBundleHitTestResultCopyAbsoluteMediaURL(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::InjectedBundleHitTestResult::absoluteMediaURL((WebKit::InjectedBundleHitTestResult *)a1, &v6);
  uint64_t v3 = WebKit::toCopiedURLAPI((WebKit *)&v6, v1);
  uint64_t v4 = v6;
  uint64_t v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return v3;
}

uint64_t WKBundleHitTestResultMediaIsInFullscreen(char *a1)
{
  if (a1)
  {
    a1 = (char *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  uint64_t v2 = (WebCore::HitTestResult *)(a1 + 16);
  return WebCore::HitTestResult::mediaIsInFullscreen(v2);
}

uint64_t WKBundleHitTestResultMediaHasAudio(char *a1)
{
  if (a1)
  {
    a1 = (char *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  uint64_t v2 = a1 + 16;
  return MEMORY[0x1F41747D0](v2);
}

uint64_t WKBundleHitTestResultIsDownloadableMedia(char *a1)
{
  if (a1)
  {
    a1 = (char *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  uint64_t v2 = (WebCore::HitTestResult *)(a1 + 16);
  return WebCore::HitTestResult::isDownloadableMedia(v2);
}

uint64_t WKBundleHitTestResultGetMediaType(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  int v1 = WebKit::InjectedBundleHitTestResult::mediaType((WebKit::InjectedBundleHitTestResult *)a1);
  if (v1 == 2) {
    return 2;
  }
  else {
    return v1 == 1;
  }
}

double WKBundleHitTestResultGetImageRect(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return (double)(int)WebKit::InjectedBundleHitTestResult::imageRect((WebKit::InjectedBundleHitTestResult *)a1);
}

uint64_t WKBundleHitTestResultCopyImage(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::InjectedBundleHitTestResult::image((WebKit::InjectedBundleHitTestResult *)a1, &v2);
  if (v2) {
    return *(void *)(v2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKBundleHitTestResultGetIsSelected(char *a1)
{
  if (a1)
  {
    a1 = (char *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  uint64_t v2 = (WebCore::HitTestResult *)(a1 + 16);
  return WebCore::HitTestResult::isSelected(v2);
}

uint64_t WKBundleHitTestResultCopyLinkLabel(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  WebCore::HitTestResult::textContent((uint64_t *)&v5, (WebCore::HitTestResult *)(a1 + 16));
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v5;
  uint64_t v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

uint64_t WKBundleHitTestResultCopyLinkTitle(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  WebCore::HitTestResult::titleDisplayString((uint64_t *)&v5, (WebCore::HitTestResult *)(a1 + 16));
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v5;
  uint64_t v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

uint64_t WKBundleHitTestResultCopyLinkSuggestedFilename(uint64_t a1)
{
  if (a1) {
    a1 = [(id)a1 _apiObject];
  }
  WebCore::HitTestResult::linkSuggestedFilename((uint64_t *)&v5, (WebCore::HitTestResult *)(a1 + 16));
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v5;
  uint64_t v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

uint64_t WKBundleNavigationActionGetTypeID()
{
  return 0;
}

uint64_t WKBundleNavigationActionGetNavigationType()
{
  return 0;
}

uint64_t WKBundleNavigationActionGetEventModifiers()
{
  return 0;
}

uint64_t WKBundleNavigationActionGetEventMouseButton()
{
  return 0;
}

uint64_t WKBundleNavigationActionCopyHitTestResult()
{
  return 0;
}

uint64_t WKBundleNavigationActionCopyFormElement()
{
  return 0;
}

uint64_t WKBundleNavigationActionGetShouldOpenExternalURLs()
{
  return 0;
}

uint64_t WKBundleNavigationActionGetShouldTryAppLinks()
{
  return 0;
}

uint64_t WKBundleNavigationActionCopyDownloadAttribute()
{
  return 0;
}

uint64_t WKBundleNodeHandleGetTypeID()
{
  return 139;
}

uint64_t WKBundleNodeHandleCreate(uint64_t a1, const OpaqueJSContext *a2, JSValue a3)
{
  WebKit::InjectedBundleNodeHandle::getOrCreate(a2, a3, &v4);
  if (v4) {
    return *((void *)v4 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKBundleNodeHandleCopyDocument(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 48);
  if (v1
    && (WebKit::InjectedBundleNodeHandle::getOrCreate(*(WebKit::InjectedBundleNodeHandle **)(*(void *)(v1 + 48) + 8), &v3), v3))
  {
    return *((void *)v3 + 1);
  }
  else
  {
    return 0;
  }
}

double WKBundleNodeHandleGetRenderRect()
{
  return 0.0;
}

uint64_t WKBundleNodeHandleCopySnapshotWithOptions(void *a1, unsigned int a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  v4[0] = 0;
  v4[4] = 0;
  WebKit::InjectedBundleNodeHandle::renderedImage((WebCore::RenderObject *)a1, a2 & 0xF | (((a2 >> 4) & 7) << 6), (a2 >> 7) & 1, (uint64_t)v4, &v5);
  if (v5) {
    return *(void *)(v5 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKBundleNodeHandleCopyVisibleRange()
{
  return 0;
}

double WKBundleNodeHandleGetElementBounds(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return (double)(int)WebKit::InjectedBundleNodeHandle::elementBounds((WebKit::InjectedBundleNodeHandle *)a1);
}

WTF::StringImpl *WKBundleNodeHandleSetHTMLInputElementValueForUser(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_4:
  WebKit::InjectedBundleNodeHandle::setHTMLInputElementValueForUser(v3, (const WTF::String *)&v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKBundleNodeHandleSetHTMLInputElementSpellcheckEnabled(void *a1, int a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }

  return WebKit::InjectedBundleNodeHandle::setHTMLInputElementSpellcheckEnabled((WebKit::InjectedBundleNodeHandle *)a1, a2);
}

uint64_t WKBundleNodeHandleGetHTMLInputElementAutoFilled()
{
  return 0;
}

uint64_t WKBundleNodeHandleSetHTMLInputElementAutoFilled(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }

  return WebKit::InjectedBundleNodeHandle::setHTMLInputElementAutoFilled((uint64_t)a1);
}

uint64_t WKBundleNodeHandleSetHTMLInputElementAutoFilledAndViewable(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }

  return WebKit::InjectedBundleNodeHandle::setHTMLInputElementAutoFilledAndViewable((uint64_t)a1);
}

uint64_t WKBundleNodeHandleSetHTMLInputElementAutoFilledAndObscured(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }

  return WebKit::InjectedBundleNodeHandle::setHTMLInputElementAutoFilledAndObscured((uint64_t)a1);
}

uint64_t WKBundleNodeHandleGetHTMLInputElementAutoFillButtonEnabled()
{
  return 0;
}

uint64_t WKBundleNodeHandleSetHTMLInputElementAutoFillButtonEnabledWithButtonType(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }

  return WebKit::InjectedBundleNodeHandle::setHTMLInputElementAutoFillButtonEnabled((uint64_t)a1);
}

uint64_t WKBundleNodeHandleGetHTMLInputElementAutoFillButtonType(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  LODWORD(result) = WebKit::InjectedBundleNodeHandle::htmlInputElementAutoFillButtonType((WebKit::InjectedBundleNodeHandle *)a1);
  if (result >= 6) {
    return 0;
  }
  else {
    return result;
  }
}

uint64_t WKBundleNodeHandleGetHTMLInputElementLastAutoFillButtonType(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  LODWORD(result) = WebKit::InjectedBundleNodeHandle::htmlInputElementLastAutoFillButtonType((WebKit::InjectedBundleNodeHandle *)a1);
  if (result >= 6) {
    return 0;
  }
  else {
    return result;
  }
}

uint64_t WKBundleNodeHandleGetHTMLInputElementAutoFillAvailable()
{
  return 0;
}

uint64_t WKBundleNodeHandleSetHTMLInputElementAutoFillAvailable(void *a1, int a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }

  return WebKit::InjectedBundleNodeHandle::setAutoFillAvailable((WebKit::InjectedBundleNodeHandle *)a1, a2);
}

double WKBundleNodeHandleGetHTMLInputElementAutoFillButtonBounds()
{
  return 0.0;
}

uint64_t WKBundleNodeHandleGetHTMLInputElementLastChangeWasUserEdit(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::InjectedBundleNodeHandle::htmlInputElementLastChangeWasUserEdit((WebKit::InjectedBundleNodeHandle *)a1);
}

uint64_t WKBundleNodeHandleGetHTMLTextAreaElementLastChangeWasUserEdit(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::InjectedBundleNodeHandle::htmlTextAreaElementLastChangeWasUserEdit((WebKit::InjectedBundleNodeHandle *)a1);
}

uint64_t WKBundleNodeHandleCopyHTMLTableCellElementCellAbove()
{
  return 0;
}

uint64_t WKBundleNodeHandleCopyDocumentFrame(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::InjectedBundleNodeHandle::documentFrame((uint64_t)a1, &v2);
  if (v2) {
    return *(void *)(v2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKBundleNodeHandleCopyHTMLFrameElementContentFrame()
{
  return 0;
}

uint64_t WKBundleNodeHandleCopyHTMLIFrameElementContentFrame(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::InjectedBundleNodeHandle::htmlIFrameElementContentFrame((uint64_t)a1, &v2);
  if (v2) {
    return *(void *)(v2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKBundleNodeHandleGetHTMLInputElementAutofilled()
{
  return 0;
}

uint64_t WKBundleNodeHandleSetHTMLInputElementAutofilled(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }

  return WebKit::InjectedBundleNodeHandle::setHTMLInputElementAutoFilled((uint64_t)a1);
}

uint64_t WKBundlePageGetTypeID()
{
  return 140;
}

void *WKBundlePageSetEditorClient(void *a1, long long *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t result = (void *)WTF::fastMalloc((WTF *)8);
    *uint64_t result = &unk_1EE9F0D88;
    goto LABEL_10;
  }
  uint64_t v3 = 0;
  if (!a2) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t result = (void *)WTF::fastMalloc((WTF *)0x90);
  *(_OWORD *)(result + 1) = 0u;
  uint64_t v5 = result + 1;
  *(_OWORD *)(result + 3) = 0u;
  *(_OWORD *)(result + 5) = 0u;
  *(_OWORD *)(result + 7) = 0u;
  *(_OWORD *)(result + 9) = 0u;
  *(_OWORD *)(result + 11) = 0u;
  *(_OWORD *)(result + 13) = 0u;
  *(_OWORD *)(result + 15) = 0u;
  result[17] = 0;
  *uint64_t result = &unk_1EE9F0780;
  int v6 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == 1)
  {
    _OWORD *v5 = *a2;
    long long v7 = a2[1];
    long long v8 = a2[2];
    long long v9 = a2[4];
    *(_OWORD *)(result + 7) = a2[3];
    *(_OWORD *)(result + 9) = v9;
    *(_OWORD *)(result + 3) = v7;
    *(_OWORD *)(result + 5) = v8;
    long long v10 = a2[5];
    long long v11 = a2[6];
    long long v12 = a2[7];
    result[17] = *((void *)a2 + 16);
    *(_OWORD *)(result + 13) = v11;
    *(_OWORD *)(result + 15) = v12;
    *(_OWORD *)(result + 11) = v10;
  }
  else if (v6 <= 0)
  {
    if (v6)
    {
      __break(1u);
      return result;
    }
    long long v13 = *a2;
    long long v14 = a2[2];
    *(_OWORD *)(result + 3) = a2[1];
    *(_OWORD *)(result + 5) = v14;
    _OWORD *v5 = v13;
    long long v15 = a2[3];
    long long v16 = a2[4];
    long long v17 = a2[5];
    result[13] = *((void *)a2 + 12);
    *(_OWORD *)(result + 9) = v16;
    *(_OWORD *)(result + 11) = v17;
    *(_OWORD *)(result + 7) = v15;
  }
LABEL_10:
  unint64_t v19 = result;
  WebKit::WebPage::setInjectedBundleEditorClient(v3, &v19);
  uint64_t result = v19;
  if (v19)
  {
    unint64_t v18 = *(uint64_t (**)(void))(*v19 + 8);
    return (void *)v18();
  }
  return result;
}

void *WKBundlePageSetFormClient(void *a1, unsigned int *a2)
{
  if (a1) {
    uint64_t v3 = [a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = WTF::fastMalloc((WTF *)0x70);
  int v6 = (void *)WebKit::InjectedBundlePageFormClient::InjectedBundlePageFormClient(v4, a2);
  WebKit::WebPage::setInjectedBundleFormClient(v3, &v6);
  uint64_t result = v6;
  int v6 = 0;
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  return result;
}

void *WKBundlePageSetUIClient(void *a1, _OWORD *a2)
{
  if (a1) {
    uint64_t v3 = [a1 _apiObject];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = WTF::fastMalloc((WTF *)0xE8);
  int v6 = (void *)WebKit::InjectedBundlePageUIClient::InjectedBundlePageUIClient(v4, a2);
  WebKit::WebPage::setInjectedBundleUIClient(v3, &v6);
  uint64_t result = v6;
  int v6 = 0;
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  return result;
}

_OWORD *WKBundlePageSetFullScreenClient(_OWORD *result, _OWORD *a2)
{
  if (result) {
    uint64_t result = (_OWORD *)[result _apiObject];
  }
  uint64_t v3 = result + 24;
  if (!a2)
  {
    long long v4 = 0uLL;
    result[26] = 0u;
    result[27] = 0u;
    result[25] = 0u;
LABEL_5:
    _OWORD *v3 = v4;
    return result;
  }
  if (*(_DWORD *)a2 == 1)
  {
    long long v4 = *a2;
    long long v5 = a2[1];
    long long v6 = a2[3];
    result[26] = a2[2];
    result[27] = v6;
LABEL_12:
    result[25] = v5;
    goto LABEL_5;
  }
  result[26] = 0u;
  result[27] = 0u;
  _OWORD *v3 = 0u;
  result[25] = 0u;
  if (*(int *)a2 <= 0)
  {
    if (*(_DWORD *)a2)
    {
      __break(1u);
      return result;
    }
    long long v4 = *a2;
    long long v5 = a2[1];
    *((void *)result + 52) = *((void *)a2 + 4);
    goto LABEL_12;
  }
  return result;
}

IPC::Encoder *WKBundlePageWillEnterFullScreen(void *a1)
{
  uint64_t v1 = a1;
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t v2 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)a1);
  uint64_t v3 = *(void *)(*(void *)(*((void *)v2 + 9) + 48) + 160);
  (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
  *((void *)v2 + 7) = WebCore::ScrollableArea::visibleContentRect();
  if (v1) {
    long long v4 = (WebKit::WebPage *)[v1 _apiObject];
  }
  else {
    long long v4 = 0;
  }
  long long v5 = WebKit::WebPage::fullScreenManager(v4);

  return WebKit::WebFullScreenManager::willEnterFullScreen(v5);
}

uint64_t WKBundlePageDidEnterFullScreen(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t v1 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)a1);

  return WebKit::WebFullScreenManager::didEnterFullScreen(v1);
}

IPC::Encoder *WKBundlePageWillExitFullScreen(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t v1 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)a1);

  return WebKit::WebFullScreenManager::willExitFullScreen(v1);
}

uint64_t WKBundlePageDidExitFullScreen(void *a1)
{
  if (a1)
  {
    uint64_t v2 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)[a1 _apiObject]);
    WebKit::WebFullScreenManager::didExitFullScreen(v2);
    uint64_t v3 = (WebKit::WebPage *)[a1 _apiObject];
  }
  else
  {
    long long v6 = WebKit::WebPage::fullScreenManager(0);
    WebKit::WebFullScreenManager::didExitFullScreen(v6);
    uint64_t v3 = 0;
  }
  long long v4 = WebKit::WebPage::fullScreenManager(v3);

  return WebKit::WebFullScreenManager::restoreScrollPosition((uint64_t)v4);
}

uint64_t WKBundlePageGetMainFrame(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 88);
  if (v1) {
    return *(void *)(v1 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKBundleFrameCreateFrameHandle(void *a1)
{
  uint64_t v1 = [a1 _apiObject];
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 88);
  uint64_t v4 = API::Object::newObject(0x28uLL, 11);
  *(void *)uint64_t v4 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v4);
  *(void *)uint64_t v4 = &unk_1EE9B3E30;
  *(void *)(v4 + ++*(_DWORD *)(this + 16) = v2;
  *(void *)(v4 + 24) = v3;
  *(unsigned char *)(v4 + 32) = 0;
  return *(void *)(v4 + 8);
}

uint64_t WKBundlePageCopyContextMenuItems()
{
  return 0;
}

uint64_t WKBundlePageCopyContextMenuAtPointInWindow()
{
  return 0;
}

uint64_t WKBundlePageInsertNewlineInQuotedContent(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebPage::insertNewlineInQuotedContent((WebCore::Page **)a1);
}

WTF::StringImpl *WKAccessibilityTestingInjectPreference(WTF::StringImpl *result, void *a2, void *a3, void *a4)
{
  if (!result) {
    return result;
  }
  {
    long long v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  uint64_t v6 = WebKit::WebProcess::singleton(void)::process;
  if (a2)
  {
    [a2 _apiObject];
    WTF::String::isolatedCopy();
    if (a3) {
      goto LABEL_5;
    }
LABEL_23:
    long long v15 = 0;
    if (a4) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
  long long v16 = 0;
  if (!a3) {
    goto LABEL_23;
  }
LABEL_5:
  [a3 _apiObject];
  WTF::String::isolatedCopy();
  if (a4)
  {
LABEL_6:
    [a4 _apiObject];
    WTF::String::isolatedCopy();
    long long v7 = v12;
    goto LABEL_7;
  }
LABEL_24:
  long long v7 = 0;
LABEL_7:
  long long v13 = v7;
  char v14 = 1;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*(void *)v6 + 64))(v6, &v16, &v15, &v13);
  if (v14)
  {
    long long v9 = v13;
    long long v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v8);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  long long v10 = v15;
  long long v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t result = v16;
  long long v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WKAccessibilityEnable()
{
}

uint64_t WKAccessibilityFocusedObject(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = [a1 _apiObject];
  uint64_t v2 = *(void *)(v1 + 48);
  if (!v2) {
    return v2;
  }
  WebCore::Page::checkedFocusController((uint64_t *)&v9, *(WebCore::Page **)(v1 + 48));
  uint64_t v3 = WebCore::FocusController::focusedOrMainFrame(v9);
  uint64_t v4 = v3;
  if (v3) {
    atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
  }
  long long v5 = v9;
  long long v9 = 0;
  if (v5)
  {
    if (!*(_DWORD *)v5)
    {
      __break(0xC471u);
      JUMPOUT(0x1991554ACLL);
    }
    --*(_DWORD *)v5;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v3 + 296);
  if (v6)
  {
    *(_DWORD *)(v6 + 28) += 2;
    atomic_store(1u, MEMORY[0x1E4FB64B0]);
    if (WebCore::Document::axObjectCache((WebCore::Document *)v6)
      && (uint64_t v7 = WebCore::AXObjectCache::focusedObjectForPage()) != 0)
    {
      uint64_t v2 = *(void *)(v7 + 24);
    }
    else
    {
      uint64_t v2 = 0;
    }
    if (*(_DWORD *)(v6 + 28) == 2)
    {
      if ((*(_WORD *)(v6 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v6);
      }
    }
    else
    {
      *(_DWORD *)(v6 + 28) -= 2;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  return v2;
}

WTF::StringImpl *WKAccessibilityAnnounce(WTF::StringImpl *result, void *a2)
{
  if (result)
  {
    uint64_t result = (WTF::StringImpl *)[(WTF::StringImpl *)result _apiObject];
    uint64_t v3 = *((void *)result + 6);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 160);
      if (v4 && *(unsigned char *)(v4 + 144) == 0)
      {
        uint64_t result = *(WTF::StringImpl **)(v4 + 296);
        if (result)
        {
          uint64_t result = (WTF::StringImpl *)WebCore::Document::axObjectCache(result);
          if (result)
          {
            uint64_t v6 = result;
            if (a2)
            {
              [a2 _apiObject];
              WTF::String::isolatedCopy();
            }
            else
            {
              long long v8 = 0;
            }
            MEMORY[0x199731180](v6, &v8);
            uint64_t result = v8;
            long long v8 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2) {
                return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
              }
              else {
                *(_DWORD *)result -= 2;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WKAccessibilitySetForceDeferredSpellChecking(uint64_t result)
{
  return result;
}

uint64_t WKAccessibilityEnhancedAccessibilityEnabled()
{
  return MEMORY[0x1F416D258]();
}

uint64_t WKAccessibilitySetForceInitialFrameCaching()
{
  return MEMORY[0x1F416D248]();
}

uint64_t WKBundlePageCopyRenderTreeExternalRepresentation(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::WebPage::renderTreeExternalRepresentation((WebKit::WebPage *)a1);
  API::String::create(&v5);
  if (v5) {
    uint64_t v2 = *((void *)v5 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v1);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return v2;
}

uint64_t WKBundlePageCopyRenderTreeExternalRepresentationForPrinting(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::WebPage::renderTreeExternalRepresentationForPrinting((uint64_t *)&v5, (WebKit::WebPage *)a1);
  API::String::create(&v6);
  if (v6) {
    uint64_t v2 = *((void *)v6 + 1);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v5;
  long long v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v1);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return v2;
}

uint64_t WKBundlePageClearMainFrameName(void *a1)
{
  uint64_t result = [a1 _apiObject];
  uint64_t v2 = *(void *)(result + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 160);
    if (v3)
    {
      return MEMORY[0x1F41737E0](v3 + 48);
    }
  }
  return result;
}

IPC::Encoder *WKBundlePageClose(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebPage::sendClose((WebKit::WebPage *)a1);
}

double WKBundlePageGetTextZoomFactor(void *a1, WebCore::LocalFrame *a2)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v2 = vars8;
  }
  return WebKit::WebPage::textZoomFactor((WebKit::WebPage *)a1, a2);
}

double WKBundlePageGetPageZoomFactor(void *a1, WebCore::LocalFrame *a2)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v2 = vars8;
  }
  return WebKit::WebPage::pageZoomFactor((WebKit::WebPage *)a1, a2);
}

atomic_uchar *WKBundlePageSetScaleAtOrigin(void *a1, double a2, double a3, double a4)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  unint64_t v8 = (int)a3 | ((unint64_t)(int)a4 << 32);
  return WebKit::WebPage::scalePage((WebKit::WebPage *)a1, a2, (const WebCore::IntPoint *)&v8);
}

uint64_t WKBundlePageDumpHistoryForTesting(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = [a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  long long v9 = 0;
LABEL_4:
  WebKit::WebPage::dumpHistoryForTesting(v3, (const WTF::String *)&v9, &v10);
  API::String::create(&v11);
  if (v11) {
    uint64_t v5 = *((void *)v11 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v10;
  long long v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = v9;
  long long v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v4);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  return v5;
}

IPC::Encoder *WKBundleClearHistoryForTesting(void *a1)
{
  uint64_t result = (IPC::Encoder *)[a1 _apiObject];
  uint64_t v2 = *((void *)result + 6);
  if (v2)
  {
    uint64_t v3 = *(WebKit::WebBackForwardListProxy **)(*(void *)(v2 + 136) + 16);
    return WebKit::WebBackForwardListProxy::clear(v3);
  }
  return result;
}

uint64_t WKBundlePageGetBackForwardList()
{
  return 0;
}

uint64_t WKBundlePageInstallPageOverlay(void *a1, void *a2)
{
  [a1 _apiObject];
  [a2 _apiObject];

  return WebCore::PageOverlayController::installPageOverlay();
}

uint64_t WKBundlePageUninstallPageOverlay(void *a1, void *a2)
{
  [a1 _apiObject];
  [a2 _apiObject];

  return WebCore::PageOverlayController::uninstallPageOverlay();
}

uint64_t WKBundlePageInstallPageOverlayWithAnimation(void *a1, void *a2)
{
  [a1 _apiObject];
  [a2 _apiObject];

  return WebCore::PageOverlayController::installPageOverlay();
}

uint64_t WKBundlePageUninstallPageOverlayWithAnimation(void *a1, void *a2)
{
  [a1 _apiObject];
  [a2 _apiObject];

  return WebCore::PageOverlayController::uninstallPageOverlay();
}

uint64_t WKBundlePageHasLocalDataForURL(void *a1, void *a2)
{
  uint64_t v3 = *(WebCore::Page **)([a1 _apiObject] + 48);
  if (a2)
  {
    uint64_t v4 = *(WTF::StringImpl **)([a2 _apiObject] + 16);
    if (v4) {
      *(_DWORD *)v4 += 2;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  long long v10 = v4;
  MEMORY[0x19972E890](v11, &v10, 0);
  uint64_t hasLocalDataForURL = WebCore::Page::hasLocalDataForURL(v3, (const WTF::URL *)v11);
  uint64_t v7 = v11[0];
  v11[0] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  unint64_t v8 = v10;
  long long v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return hasLocalDataForURL;
}

void *WKBundlePageCanHandleRequest(void *result)
{
  if (result)
  {
    uint64_t v1 = (WebKit::WebPage *)([result _apiObject] + 16);
    return (void *)WebKit::WebPage::canHandleRequest(v1, v2);
  }
  return result;
}

BOOL WKBundlePageFindString(void *a1, void *a2)
{
  if (a1)
  {
    [a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else if (a2)
  {
    goto LABEL_3;
  }
  uint64_t v5 = 0;
LABEL_4:
  WebCore::Page::findString();
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return v6 != 0;
}

WTF *WKBundlePageReplaceStringMatches(WTF *result, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t *)result;
  if (a2)
  {
    uint64_t result = (WTF *)[a2 _apiObject];
    uint64_t v5 = (uint64_t)result;
  }
  else
  {
    uint64_t v5 = 0;
  }
  unint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v6 = *(unsigned int *)(v5 + 28);
  if (v6)
  {
    if (v6 >> 30)
    {
      __break(0xC471u);
      return result;
    }
    LODWORD(v19) = *(_DWORD *)(v5 + 28);
    unint64_t v18 = (WTF *)WTF::fastMalloc((WTF *)(4 * v6));
    uint64_t v7 = *(unsigned int *)(v5 + 28);
    if (v7)
    {
      for (unint64_t i = 0; i != v7; ++i)
      {
        uint64_t v9 = API::Array::at<API::UInt64>(v5, i);
        if (v9)
        {
          uint64_t v10 = *(void *)(v9 + 16);
          uint64_t v11 = HIDWORD(v19);
          if (HIDWORD(v19) == v19)
          {
            unint64_t v12 = HIDWORD(v19) + ((unint64_t)HIDWORD(v19) >> 2);
            if (v12 >= 0x10) {
              unint64_t v13 = v12 + 1;
            }
            else {
              unint64_t v13 = 16;
            }
            if (v13 <= (unint64_t)HIDWORD(v19) + 1) {
              unint64_t v14 = HIDWORD(v19) + 1;
            }
            else {
              unint64_t v14 = v13;
            }
            WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v18, v14);
            uint64_t v11 = HIDWORD(v19);
          }
          *((_DWORD *)v18 + v11) = v10;
          ++HIDWORD(v19);
        }
      }
    }
  }
  if (v4) {
    uint64_t v4 = (uint64_t *)[v4 _apiObject];
  }
  if (a3)
  {
    [a3 _apiObject];
    WTF::String::isolatedCopy();
  }
  else
  {
    long long v17 = 0;
  }
  WebKit::FindController::replaceMatches(v4[56], (unsigned int **)&v18, (uint64_t)&v17);
  long long v16 = v17;
  long long v17 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t result = v18;
  if (v18)
  {
    unint64_t v18 = 0;
    LODWORD(v19) = 0;
    return (WTF *)WTF::fastFree(result, v15);
  }
  return result;
}

uint64_t WKBundlePageCreateSnapshotWithOptions(void *a1, unsigned int a2, double a3, double a4, double a5, double a6)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  v12[0] = (int)a3 | ((unint64_t)(int)a4 << 32);
  v12[1] = (int)a5 | ((unint64_t)(int)a6 << 32);
  WebKit::WebPage::scaledSnapshotWithOptions((unsigned int *)a1, (uint64_t)v12, (const WebCore::FloatSize *)(a2 & 0xF | (((a2 >> 4) & 7) << 6) & 0xFFFFFDFF | (((a2 >> 8) & 1) << 9)), &v13, 1.0);
  if (v13) {
    return *(void *)(v13 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKBundlePageCreateSnapshotInViewCoordinates(void *a1, char a2, double a3, double a4, double a5, double a6)
{
  uint64_t v10 = (const WebCore::FloatSize *)(a2 & 1 | 4u);
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  v12[0] = (int)a3 | ((unint64_t)(int)a4 << 32);
  v12[1] = (int)a5 | ((unint64_t)(int)a6 << 32);
  WebKit::WebPage::scaledSnapshotWithOptions((unsigned int *)a1, (uint64_t)v12, v10, &v13, 1.0);
  if (v13) {
    return *(void *)(v13 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKBundlePageCreateSnapshotInDocumentCoordinates(void *a1, char a2, double a3, double a4, double a5, double a6)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  v12[0] = (int)a3 | ((unint64_t)(int)a4 << 32);
  v12[1] = (int)a5 | ((unint64_t)(int)a6 << 32);
  WebKit::WebPage::scaledSnapshotWithOptions((unsigned int *)a1, (uint64_t)v12, (const WebCore::FloatSize *)(a2 & 1), &v13, 1.0);
  if (v13) {
    return *(void *)(v13 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKBundlePageCreateScaledSnapshotInDocumentCoordinates(void *a1, char a2, double a3, double a4, double a5, double a6, double a7)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  v14[0] = (int)a3 | ((unint64_t)(int)a4 << 32);
  v14[1] = (int)a5 | ((unint64_t)(int)a6 << 32);
  WebKit::WebPage::scaledSnapshotWithOptions((unsigned int *)a1, (uint64_t)v14, (const WebCore::FloatSize *)(a2 & 1), &v15, a7);
  if (v15) {
    return *(void *)(v15 + 8);
  }
  else {
    return 0;
  }
}

double WKBundlePageGetBackingScaleFactor(void *a1)
{
  return *(float *)(*(void *)([a1 _apiObject] + 48) + 364);
}

uint64_t WKBundlePageListenForLayoutMilestones(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }

  return WebKit::WebPage::listenForLayoutMilestones((uint64_t)a1);
}

uint64_t WKBundlePageShowInspectorForTest(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t v1 = WebKit::WebPage::inspector((uint64_t)a1, 1);

  return WebKit::WebInspector::show(v1);
}

WebKit::WebInspector *WKBundlePageCloseInspectorForTest(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t v1 = (WebKit::WebInspector *)WebKit::WebPage::inspector((uint64_t)a1, 1);

  return WebKit::WebInspector::close(v1);
}

WTF::StringImpl *WKBundlePageEvaluateScriptInInspectorForTest(void *a1, void *a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t v3 = WebKit::WebPage::inspector((uint64_t)a1, 1);
  if (a2)
  {
    [a2 _apiObject];
    WTF::String::isolatedCopy();
  }
  else
  {
    uint64_t v6 = 0;
  }
  WebKit::WebInspector::evaluateScriptForTest(v3, (const WTF::String *)&v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKBundlePageForceRepaint(void *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)([a1 _apiObject] + 72) + 72);

  return v1();
}

uint64_t WKBundlePageFlushPendingEditorStateUpdate(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebPage::flushPendingEditorStateUpdate((uint64_t)a1);
}

WebCore::Page *WKBundlePageGetRenderTreeSize(void *a1)
{
  uint64_t result = *(WebCore::Page **)([a1 _apiObject] + 48);
  if (result)
  {
    return (WebCore::Page *)WebCore::Page::renderTreeSize(result);
  }
  return result;
}

uint64_t WKBundlePageSetTracksRepaints(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t result = WebKit::WebPage::localMainFrameView((WebKit::WebPage *)a1);
  if (result)
  {
    return MEMORY[0x1F416DA70]();
  }
  return result;
}

uint64_t WKBundlePageIsTrackingRepaints(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t v1 = WebKit::WebPage::localMainFrameView((WebKit::WebPage *)a1);
  if (v1) {
    BOOL v2 = *(unsigned char *)(v1 + 1400) != 0;
  }
  return (v1 != 0) & v2;
}

uint64_t WKBundlePageResetTrackedRepaints(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t result = WebKit::WebPage::localMainFrameView((WebKit::WebPage *)a1);
  if (result)
  {
    return MEMORY[0x1F416DAA8]();
  }
  return result;
}

uint64_t WKBundlePageCopyTrackedRepaintRects(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  WebKit::WebPage::trackedRepaintRects((WebKit::WebPage *)a1, &v2);
  if (v2) {
    return *(void *)(v2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKBundlePageSetComposition(void *a1, void *a2, int a3, int a4, char a5, void *a6, void *a7)
{
  uint64_t v125 = 0;
  uint64_t v126 = 0;
  if (a6)
  {
    uint64_t result = [a6 _apiObject];
    uint64_t v9 = result;
    uint64_t v10 = *(unsigned int *)(result + 28);
    if (v10)
    {
      if (v10 >= 0x6666667)
      {
        __break(0xC471u);
        return result;
      }
      LODWORD(v126) = 40 * (int)v10 / 0x28u;
      uint64_t v125 = WTF::fastMalloc((WTF *)(40 * v10));
    }
    v110 = a7;
    API::Array::elementsOfType<API::Dictionary>((uint64_t)v121, v9);
    uint64_t v11 = v122;
    unint64_t v12 = v124;
    if (v122 != v124)
    {
      uint64_t v13 = v123;
      while (1)
      {
        uint64_t v14 = *v11;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v119 = (WTF::StringImpl *)v113;
        uint64_t v15 = (uint64_t *)(v14 + 16);
        uint64_t v18 = *((void *)WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v14 + 16), &v119, v16)+ 2);
        uint64_t v19 = v119;
        v119 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2) {
            WTF::StringImpl::destroy(v19, v17);
          }
          else {
            *(_DWORD *)v19 -= 2;
          }
        }
        LOBYTE(v119) = 0;
        char v120 = 0;
        LOBYTE(v117) = 0;
        char v118 = 0;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v127[0] = (WTF::StringImpl *)v113;
        int v22 = WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v15, v127, v20);
        unsigned int v23 = v127[0];
        v127[0] = 0;
        if (!v23) {
          goto LABEL_14;
        }
        if (*(_DWORD *)v23 != 2) {
          break;
        }
        WTF::StringImpl::destroy(v23, v21);
        if (!v22) {
          goto LABEL_22;
        }
LABEL_17:
        WTF::String::isolatedCopy();
        WebCore::CSSParser::parseColorWithoutContext((WebCore::CSSParser *)v127, 0);
        std::optional<WebCore::Color>::operator=[abi:sn180100]<WebCore::Color,void>((uint64_t)&v119);
        if ((v113 & 0x8000000000000) != 0)
        {
          long long v49 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v113 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v49);
            WTF::fastFree((WTF *)v49, v24);
          }
        }
        uint64_t v25 = v127[0];
        v127[0] = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2) {
            WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v24);
          }
          else {
            *(_DWORD *)v25 -= 2;
          }
        }
LABEL_22:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v127[0] = (WTF::StringImpl *)v113;
        uint64_t v28 = WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v15, v127, v26);
        uint64_t v29 = v127[0];
        v127[0] = 0;
        if (!v29) {
          goto LABEL_25;
        }
        if (*(_DWORD *)v29 != 2)
        {
          *(_DWORD *)v29 -= 2;
LABEL_25:
          if (!v28) {
            goto LABEL_33;
          }
          goto LABEL_28;
        }
        WTF::StringImpl::destroy(v29, v27);
        if (!v28) {
          goto LABEL_33;
        }
LABEL_28:
        WTF::String::isolatedCopy();
        WebCore::CSSParser::parseColorWithoutContext((WebCore::CSSParser *)v127, 0);
        std::optional<WebCore::Color>::operator=[abi:sn180100]<WebCore::Color,void>((uint64_t)&v117);
        if ((v113 & 0x8000000000000) != 0)
        {
          uint64_t v50 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v113 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v50);
            WTF::fastFree((WTF *)v50, v30);
          }
        }
        unint64_t v31 = v127[0];
        v127[0] = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2) {
            WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v30);
          }
          else {
            *(_DWORD *)v31 -= 2;
          }
        }
LABEL_33:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        int v112 = v127[0];
        char v33 = WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v15, &v112, v32);
        WebCore::CompositionHighlight::CompositionHighlight(&v113, v18, *((_DWORD *)v33 + 4) + v18, (uint64_t)&v119, (uint64_t)&v117);
        unsigned int v35 = HIDWORD(v126);
        if (HIDWORD(v126) == v126)
        {
          WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionHighlight>((uint64_t)&v125, (unint64_t)&v113);
        }
        else
        {
          uint64_t v36 = v125;
          uint64_t v37 = v125 + 40 * HIDWORD(v126);
          *(void *)uint64_t v37 = v113;
          *(unsigned char *)(v37 + 8) = 0;
          *(unsigned char *)(v37 + ++*(_DWORD *)(this + 16) = 0;
          uint64_t v38 = (unsigned char *)(v37 + 16);
          if (v114)
          {
            WebCore::Color::Color();
            unsigned char *v38 = 1;
          }
          uint64_t v39 = v36 + 40 * v35;
          *(unsigned char *)(v39 + 24) = 0;
          v39 += 24;
          *(unsigned char *)(v39 + 8) = 0;
          CFTypeRef v40 = (unsigned char *)(v39 + 8);
          if (v116)
          {
            WebCore::Color::Color();
            *CFTypeRef v40 = 1;
          }
          ++HIDWORD(v126);
        }
        if (v116)
        {
          if ((v115 & 0x8000000000000) != 0)
          {
            uint64_t v45 = (unsigned int *)(v115 & 0xFFFFFFFFFFFFLL);
            if (atomic_fetch_add((atomic_uint *volatile)(v115 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v45);
              WTF::fastFree((WTF *)v45, v34);
            }
          }
        }
        if (v114)
        {
          if ((*((void *)&v113 + 1) & 0x8000000000000) != 0)
          {
            uint64_t v46 = (unsigned int *)(*((void *)&v113 + 1) & 0xFFFFFFFFFFFFLL);
            if (atomic_fetch_add((atomic_uint *volatile)(*((void *)&v113 + 1) & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v46);
              WTF::fastFree((WTF *)v46, v34);
            }
          }
        }
        uint64_t v41 = v112;
        int v112 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2) {
            WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v34);
          }
          else {
            *(_DWORD *)v41 -= 2;
          }
        }
        if (v118)
        {
          if (((unint64_t)v117 & 0x8000000000000) != 0)
          {
            uint64_t v47 = (unsigned int *)((unint64_t)v117 & 0xFFFFFFFFFFFFLL);
            if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v117 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v47);
              WTF::fastFree((WTF *)v47, v34);
            }
          }
        }
        if (v120)
        {
          if (((unint64_t)v119 & 0x8000000000000) != 0)
          {
            long long v48 = (unsigned int *)((unint64_t)v119 & 0xFFFFFFFFFFFFLL);
            if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v119 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v48);
              WTF::fastFree((WTF *)v48, v34);
            }
          }
        }
        uint64_t v42 = v11 + 1;
        while (v42 - 1 != v13 && v42 != v13)
        {
          uint64_t v44 = *v42++;
          if ((*(unsigned int (**)(uint64_t))(*(void *)v44 + 16))(v44) == 9)
          {
            uint64_t v11 = v42 - 1;
            goto LABEL_60;
          }
        }
        uint64_t v11 = v13;
LABEL_60:
        if (v11 == v12) {
          goto LABEL_74;
        }
      }
      *(_DWORD *)v23 -= 2;
LABEL_14:
      if (!v22) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }
LABEL_74:
    a7 = v110;
  }
  v119 = 0;
  if (!a7) {
    goto LABEL_151;
  }
  API::Array::elementsOfType<API::Dictionary>((uint64_t)v121, [a7 _apiObject]);
  int v51 = v122;
  uint64_t v111 = v124;
  if (v122 == v124) {
    goto LABEL_151;
  }
  long long v52 = v123;
  do
  {
    uint64_t v53 = *v51;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v117 = (WTF::StringImpl *)v113;
    unsigned __int8 v54 = (uint64_t *)(v53 + 16);
    uint64_t v57 = *((void *)WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v54, &v117, v55)+ 2);
    long long v58 = v117;
    v117 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2) {
        WTF::StringImpl::destroy(v58, v56);
      }
      else {
        *(_DWORD *)v58 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v117 = (WTF::StringImpl *)v113;
    uint64_t v61 = *((void *)WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v54, &v117, v59)+ 2);
    char v62 = v117;
    v117 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2) {
        WTF::StringImpl::destroy(v62, v60);
      }
      else {
        *(_DWORD *)v62 -= 2;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v127[0] = (WTF::StringImpl *)v113;
    WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v54, v127, v63);
    WTF::String::isolatedCopy();
    long long v66 = v127[0];
    v127[0] = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2) {
        WTF::StringImpl::destroy(v66, v64);
      }
      else {
        *(_DWORD *)v66 -= 2;
      }
    }
    long long v67 = v119;
    if (v119)
    {
      int v68 = *((_DWORD *)v119 - 2);
      unsigned int v69 = *((_DWORD *)v117 + 4);
      if (v69 >= 0x100) {
        unsigned int v70 = v69 >> 8;
      }
      else {
        unsigned int v70 = WTF::StringImpl::hashSlowCase(v117);
      }
      for (int i = 0; ; v70 = i + v72)
      {
        int v72 = v70 & v68;
        int v73 = (WTF::StringImpl *)((char *)v67 + 24 * (v70 & v68));
        uint64_t v74 = *(WTF **)v73;
        if (*(void *)v73 != -1)
        {
          if (!v74)
          {
            int v75 = v119;
            if (!v119) {
              goto LABEL_106;
            }
            int v73 = (WTF::StringImpl *)((char *)v119 + 24 * *((unsigned int *)v119 - 1));
            goto LABEL_102;
          }
          if (WTF::equal(v74, v117, v65)) {
            break;
          }
        }
        ++i;
      }
      int v75 = v119;
      if (!v119) {
        goto LABEL_103;
      }
LABEL_102:
      int v75 = (WTF::StringImpl *)((char *)v75 + 24 * *((unsigned int *)v75 - 1));
LABEL_103:
      if (v75 != v73)
      {
        char v76 = (uint64_t *)((char *)v73 + 8);
        *(void *)&long long v113 = v57;
        *((void *)&v113 + 1) = v61;
        uint64_t v77 = *((unsigned int *)v73 + 5);
        if (v77 == *((_DWORD *)v73 + 4))
        {
          int v78 = (long long *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v76, v77 + 1, (unint64_t)&v113);
          uint64_t v77 = *((unsigned int *)v73 + 5);
          uint64_t v79 = *((void *)v73 + 1);
          long long v80 = *v78;
        }
        else
        {
          uint64_t v79 = *v76;
          long long v80 = v113;
        }
        *(_OWORD *)(v79 + 16 * v77) = v80;
        ++*((_DWORD *)v73 + 5);
        goto LABEL_134;
      }
    }
LABEL_106:
    int v82 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(void *)int v82 = v57;
    *((void *)v82 + 1) = v61;
    long long v83 = v119;
    if (v119
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)&v119, 0), (long long v83 = v119) != 0))
    {
      int v84 = *((_DWORD *)v83 - 2);
    }
    else
    {
      int v84 = 0;
    }
    unsigned int v85 = *((_DWORD *)v117 + 4);
    if (v85 >= 0x100) {
      unsigned int v86 = v85 >> 8;
    }
    else {
      unsigned int v86 = WTF::StringImpl::hashSlowCase(v117);
    }
    int v87 = 0;
    for (int j = 1; ; ++j)
    {
      unsigned int v89 = v86 & v84;
      uint64_t v90 = (uint64_t)v83 + 24 * (v86 & v84);
      v91 = *(WTF **)v90;
      if (*(void *)v90 == -1)
      {
        int v87 = (void *)((char *)v83 + 24 * v89);
        goto LABEL_118;
      }
      if (!v91) {
        break;
      }
      if (WTF::equal(v91, v117, v81))
      {
        WTF::fastFree(v82, v92);
        goto LABEL_134;
      }
LABEL_118:
      unsigned int v86 = j + v89;
    }
    if (v87)
    {
      v87[1] = 0;
      v87[2] = 0;
      *int v87 = 0;
      --*((_DWORD *)v119 - 4);
      uint64_t v90 = (uint64_t)v87;
    }
    WTF::String::operator=((uint64_t *)v90, &v117);
    char v93 = *(WTF **)(v90 + 8);
    if (v93)
    {
      *(void *)(v90 + 8) = 0;
      *(_DWORD *)(v90 + ++*(_DWORD *)(this + 16) = 0;
      WTF::fastFree(v93, v64);
    }
    *(void *)(v90 + 8) = v82;
    *(void *)(v90 + ++*(_DWORD *)(this + 16) = 0x100000001;
    if (v119) {
      int v94 = *((_DWORD *)v119 - 3) + 1;
    }
    else {
      int v94 = 1;
    }
    *((_DWORD *)v119 - 3) = v94;
    if (v119) {
      int v95 = *((_DWORD *)v119 - 3);
    }
    else {
      int v95 = 0;
    }
    uint64_t v96 = (*((_DWORD *)v119 - 4) + v95);
    unint64_t v97 = *((unsigned int *)v119 - 1);
    if (v97 > 0x400)
    {
      if (v97 <= 2 * v96) {
LABEL_133:
      }
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)&v119, v90);
    }
    else if (3 * v97 <= 4 * v96)
    {
      goto LABEL_133;
    }
LABEL_134:
    v98 = v117;
    v117 = 0;
    if (v98)
    {
      if (*(_DWORD *)v98 == 2) {
        WTF::StringImpl::destroy(v98, v64);
      }
      else {
        *(_DWORD *)v98 -= 2;
      }
    }
    v99 = v51 + 1;
    while (v99 - 1 != v52 && v99 != v52)
    {
      uint64_t v101 = *v99++;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v101 + 16))(v101) == 9)
      {
        int v51 = v99 - 1;
        goto LABEL_146;
      }
    }
    int v51 = v52;
LABEL_146:
    ;
  }
  while (v51 != v111);
LABEL_151:
  if (a1) {
    uint64_t v102 = [a1 _apiObject];
  }
  else {
    uint64_t v102 = 0;
  }
  if (a2)
  {
    [a2 _apiObject];
    WTF::String::isolatedCopy();
  }
  else
  {
    v121[0] = 0;
  }
  WebKit::WebPage::setCompositionForTesting(v102, (uint64_t *)v121, a3, a4, a5);
  v104 = v121[0];
  v121[0] = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2) {
      WTF::StringImpl::destroy(v104, v103);
    }
    else {
      *(_DWORD *)v104 -= 2;
    }
  }
  if (v119) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v119, v103);
  }
  return WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v125, v103);
}

uint64_t API::Array::elementsOfType<API::Dictionary>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (void *)result;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(unsigned int *)(a2 + 28);
  uint64_t v5 = v3 + 8 * v4;
  if (v4)
  {
    uint64_t v7 = 8 * v4;
    while (1)
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)v3 + 16))();
      if (result == 9) {
        break;
      }
      v3 += 8;
      v7 -= 8;
      if (!v7)
      {
        uint64_t v3 = v5;
        break;
      }
    }
    uint64_t v8 = v3;
    uint64_t v3 = *(void *)(a2 + 16);
    uint64_t v9 = *(unsigned int *)(a2 + 28);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = *(void *)(a2 + 16);
  }
  v2[2] = v8;
  v2[3] = v5;
  uint64_t v10 = v3 + 8 * v9;
  v2[6] = v10;
  v2[7] = v10;
  return result;
}

uint64_t WKBundlePageHasComposition(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebPage::hasCompositionForTesting((WebCore::Page **)a1);
}

WTF::StringImpl *WKBundlePageConfirmComposition(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  uint64_t v3 = 0;
  WebKit::WebPage::confirmCompositionForTesting((WebCore::Page **)a1, (const WTF::String *)&v3);
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKBundlePageConfirmCompositionWithText(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = (WebCore::Page **)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_4:
  WebKit::WebPage::confirmCompositionForTesting(v3, (const WTF::String *)&v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WKBundlePageSetUseDarkAppearance(void *result)
{
  if (result)
  {
    uint64_t result = *(void **)([result _apiObject] + 48);
    if (result)
    {
      return (void *)WebCore::Page::effectiveAppearanceDidChange((WebCore::Page *)result);
    }
  }
  return result;
}

uint64_t WKBundlePageIsUsingDarkAppearance(void *a1)
{
  if (!a1 || !*(void *)([a1 _apiObject] + 48)) {
    return 0;
  }

  return MEMORY[0x1F4175D80]();
}

uint64_t WKBundlePageCanShowMIMEType(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = (WebKit::WebPage *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v8 = 0;
LABEL_4:
  uint64_t canShowMIMEType = WebKit::WebPage::canShowMIMEType(v3, (const WTF::String *)&v8);
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return canShowMIMEType;
}

uint64_t WKBundlePageExtendIncrementalRenderingSuppression(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebPage::extendIncrementalRenderingSuppression((WebKit::WebPage *)a1);
}

_DWORD *WKBundlePageStopExtendingIncrementalRenderingSuppression(void *a1, int a2)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }

  return WebKit::WebPage::stopExtendingIncrementalRenderingSuppression((WebKit::WebPage *)a1, a2);
}

BOOL WKBundlePageIsUsingEphemeralSession(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebPage::usesEphemeralSession((WebKit::WebPage *)a1);
}

uint64_t WKBundlePageIsControlledByAutomation(void *a1)
{
  return *(unsigned __int8 *)(*(void *)([a1 _apiObject] + 48) + 1091);
}

uint64_t WKBundlePageSetUseTestingViewportConfiguration(void *a1, char a2)
{
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(result + 1184) = a2;
  return result;
}

void *WKBundlePageStartMonitoringScrollOperations(void *result)
{
  if (result)
  {
    uint64_t result = *(void **)([result _apiObject] + 48);
    if (result)
    {
      return (void *)MEMORY[0x1F41727B0]();
    }
  }
  return result;
}

uint64_t WKBundlePageRegisterScrollOperationCompletionCallback(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t v9 = [a1 _apiObject];
    uint64_t v10 = *(WebCore::Page **)(v9 + 48);
    if (v10)
    {
      uint64_t result = WebCore::Page::isMonitoringWheelEvents(*(WebCore::Page **)(v9 + 48));
      if (result)
      {
        WebCore::Page::wheelEventTestMonitor((uint64_t *)&v15, v10);
        if (v15)
        {
          uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v11 = &unk_1EE9F0CC0;
          v11[1] = a2;
          void v11[2] = a5;
          uint64_t v14 = v11;
          WebCore::WheelEventTestMonitor::setTestCallbackAndStartMonitoring();
          if (v14) {
            (*(void (**)(void *))(*v14 + 8))(v14);
          }
          uint64_t v13 = v15;
          uint64_t v15 = 0;
          if (v13) {
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v13, v12);
          }
        }
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *WKBundlePageCallAfterTasksAndTimers(void *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    if (a2)
    {
      uint64_t result = (void *)[result _apiObject];
      uint64_t v5 = result[6];
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 160);
        if (v6) {
          BOOL v7 = *(unsigned char *)(v6 + 144) == 0;
        }
        else {
          BOOL v7 = 0;
        }
        if (v7 && *(void *)(v6 + 296))
        {
          uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
          *uint64_t v8 = &unk_1EE9F0CE8;
          v8[1] = a2;
          v8[2] = a3;
          uint64_t v9 = v8;
          WebCore::Document::postTask();
          uint64_t result = v9;
          if (v9) {
            return (void *)(*(uint64_t (**)(void *))(*v9 + 8))(v9);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WKBundlePageFlushDeferredDidReceiveMouseEventForTesting(void *a1)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v1 = vars8;
  }
  return WebKit::WebPage::flushDeferredDidReceiveMouseEvent((uint64_t)a1);
}

WTF::StringImpl *WKBundlePagePostMessage(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = (WebKit::WebPage *)[a1 _apiObject];
    if (a2) {
      goto LABEL_3;
    }
LABEL_11:
    uint64_t v9 = 0;
    if (a3) {
      goto LABEL_4;
    }
    goto LABEL_12;
  }
  uint64_t v5 = 0;
  if (!a2) {
    goto LABEL_11;
  }
LABEL_3:
  [a2 _apiObject];
  WTF::String::isolatedCopy();
  if (a3)
  {
LABEL_4:
    uint64_t v6 = (API::Object *)[a3 _apiObject];
    goto LABEL_5;
  }
LABEL_12:
  uint64_t v6 = 0;
LABEL_5:
  WebKit::WebPage::postMessage(v5, (const WTF::String *)&v9, v6);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKBundlePagePostMessageWithAsyncReply(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    uint64_t v9 = [a1 _apiObject];
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v9 = 0;
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      if (!a3) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  uint64_t v14 = 0;
  if (a3) {
LABEL_4:
  }
    a3 = (void *)[a3 _apiObject];
LABEL_5:
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v10 = &unk_1EE9F0D60;
  v10[1] = a4;
  void v10[2] = a5;
  uint64_t v13 = v10;
  WebKit::WebPage::postMessageWithAsyncReply(v9, (uint64_t *)&v14, (uint64_t)a3, (uint64_t *)&v13);
  if (v13) {
    (*(void (**)(void *))(*v13 + 8))(v13);
  }
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKBundlePagePostMessageIgnoringFullySynchronousMode(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = (WebKit::WebPage *)[a1 _apiObject];
    if (a2) {
      goto LABEL_3;
    }
LABEL_11:
    uint64_t v9 = 0;
    if (a3) {
      goto LABEL_4;
    }
    goto LABEL_12;
  }
  uint64_t v5 = 0;
  if (!a2) {
    goto LABEL_11;
  }
LABEL_3:
  [a2 _apiObject];
  WTF::String::isolatedCopy();
  if (a3)
  {
LABEL_4:
    uint64_t v6 = (API::Object *)[a3 _apiObject];
    goto LABEL_5;
  }
LABEL_12:
  uint64_t v6 = 0;
LABEL_5:
  WebKit::WebPage::postMessageIgnoringFullySynchronousMode(v5, (const WTF::String *)&v9, v6);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WKBundlePagePostSynchronousMessageForTesting(void *a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v13 = 0;
  if (a1)
  {
    uint64_t v7 = [a1 _apiObject];
    if (a2) {
      goto LABEL_3;
    }
LABEL_17:
    unint64_t v12 = 0;
    if (a3) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  uint64_t v7 = 0;
  if (!a2) {
    goto LABEL_17;
  }
LABEL_3:
  [a2 _apiObject];
  WTF::String::isolatedCopy();
  if (a3)
  {
LABEL_4:
    uint64_t v8 = (const void *)objc_msgSend(a3, "_apiObject", v12);
    goto LABEL_5;
  }
LABEL_18:
  uint64_t v8 = 0;
LABEL_5:
  WebKit::WebPage::postSynchronousMessageForTesting(v7, (uint64_t *)&v12, v8, &v13);
  uint64_t v10 = v12;
  unint64_t v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = v13;
  if (a4)
  {
    if (v13) {
      uint64_t v11 = *(void *)(v13 + 8);
    }
    *a4 = v11;
  }
  else if (v13)
  {
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
}

uint64_t WKBundlePageIsSuspended(void *a1)
{
  return *(unsigned __int8 *)([a1 _apiObject] + 2108);
}

WTF::StringImpl *WKBundlePageAddUserScript(void *a1, void *a2, int a3, int a4)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v7 = (WTF *)a1;
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      a1 = (void *)WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
LABEL_4:
  uint64_t v8 = WebKit::InjectedBundleScriptWorld::normalWorld((WebKit::InjectedBundleScriptWorld *)a1);
  WebKit::WebPage::addUserScript(v7, (uint64_t)&v11, (uint64_t)v8, a4 == 1, a3 == 1);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WKBundlePageAddUserScriptInWorld(void *a1, void *a2, void *a3, int a4, int a5)
{
  if (a1)
  {
    uint64_t v9 = (WTF *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v9 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  unint64_t v12 = 0;
LABEL_4:
  WebKit::WebPage::addUserScript(v9, (uint64_t)&v12, [a3 _apiObject], a5 == 1, a4 == 1);
  uint64_t result = v12;
  unint64_t v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKBundlePageAddUserStyleSheet(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = (WTF *)[a1 _apiObject];
    if (a2)
    {
LABEL_3:
      [a2 _apiObject];
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_4:
  WebKit::WebPage::addUserStyleSheet(v3);
  uint64_t result = (uint64_t)v6;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      return WTF::StringImpl::destroy(v6, v4);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  return result;
}

uint64_t WKBundlePageRemoveAllUserContent(void *a1, void *a2)
{
  if (a1)
  {
    a1 = (void *)[a1 _apiObject];
    uint64_t v2 = vars8;
  }
  return WebKit::WebPage::removeAllUserContent((WebKit::WebPage *)a1, a2);
}

uint64_t WKBundlePageCopyGroupIdentifier(void *a1)
{
  [a1 _apiObject];
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKBundlePageSetCaptionDisplayMode(void *a1, void *a2)
{
  uint64_t v3 = (WebCore::PageGroup *)WebCore::Page::group(*(WebCore::Page **)([a1 _apiObject] + 48));
  uint64_t v5 = WebCore::PageGroup::ensureCaptionPreferences(v3);
  if (a2)
  {
    [a2 _apiObject];
    WTF::String::isolatedCopy();
    if (v9)
    {
      if (WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v9, "forcedonly", 0xAuLL))
      {
        char v6 = 0;
        uint64_t v7 = 1;
        goto LABEL_13;
      }
      if (WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v9, "manual", 6uLL))
      {
        char v6 = 0;
        uint64_t v7 = 3;
        goto LABEL_13;
      }
      if (WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v9, "automatic", 9uLL))
      {
        uint64_t v7 = 0;
        char v6 = 0;
        goto LABEL_13;
      }
      if (WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v9, "alwayson", 8uLL))
      {
        char v6 = 0;
        uint64_t v7 = 2;
        goto LABEL_13;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v7 = 0;
  char v6 = 1;
LABEL_13:
  uint64_t result = (uint64_t)v9;
  if (!v9) {
    goto LABEL_16;
  }
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
LABEL_16:
    if (v6) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 24))(v5, v7);
  }
  uint64_t result = WTF::StringImpl::destroy(v9, v4);
  if (v6) {
    return result;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 24))(v5, v7);
}

uint64_t WKBundlePageCreateCaptionUserPreferencesTestingModeToken(void *a1)
{
  uint64_t v1 = (WebCore::PageGroup *)WebCore::Page::group(*(WebCore::Page **)([a1 _apiObject] + 48));
  uint64_t v2 = WebCore::PageGroup::ensureCaptionPreferences(v1);
  uint64_t v3 = (void *)API::Object::newObject(0x18uLL, 4);
  uint64_t v4 = (atomic_uint **)WTF::fastMalloc((WTF *)8);
  uint64_t v5 = *(void *)(v2 + 16);
  if (v5) {
    goto LABEL_6;
  }
  uint64_t v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v5 = 1;
  *(void *)(v5 + 8) = v2;
  uint64_t v7 = *(unsigned int **)(v2 + 16);
  *(void *)(v2 + ++*(_DWORD *)(this + 16) = v5;
  if (!v7) {
    goto LABEL_6;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
  }
  uint64_t v5 = *(void *)(v2 + 16);
  if (v5) {
LABEL_6:
  }
    atomic_fetch_add((atomic_uint *volatile)v5, 1u);
  WTF::StringImpl *v4 = (atomic_uint *)v5;
  ++*(_DWORD *)(v2 + 136);
  void *v3 = &unk_1EE9D1E28;
  WebKit::InitializeWebKit2((WebKit *)v5);
  void *v3 = &unk_1EE9F0C30;
  uint64_t v8 = *v4;
  if (*v4) {
    atomic_fetch_add(v8, 1u);
  }
  v3[2] = v8;
  return v3[1];
}

uint64_t WKBundlePageSetEventThrottlingBehaviorOverride(void *a1, _DWORD *a2)
{
  if (a2)
  {
    __int16 v2 = *a2 == 1;
    __int16 v3 = *a2 == 1 || *a2 == 0;
  }
  else
  {
    __int16 v2 = 0;
    __int16 v3 = 0;
  }
  uint64_t result = [a1 _apiObject];
  *(_WORD *)(*(void *)(result + 48) + 1133) = v2 | (v3 << 8);
  return result;
}

uint64_t WKBundlePageLayoutIfNeeded(void *a1)
{
  [a1 _apiObject];

  return WebCore::Page::layoutIfNeeded();
}

uint64_t WKBundlePageSetSkipDecidePolicyForResponseIfPossible(void *a1, char a2)
{
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(result + 2255) = a2;
  return result;
}

uint64_t WKBundlePageCopyFrameTextForTesting(void *a1, char a2)
{
  WebKit::WebFrame::frameTextForTesting(*(WTF::StringImpl **)([a1 _apiObject] + 88), a2, &v6);
  API::String::create(&v6, &v7);
  if (v7) {
    uint64_t v3 = *((void *)v7 + 1);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v6;
  char v6 = 0;
  uint64_t v7 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return v3;
}

uint64_t WKBundlePageOverlayGetTypeID()
{
  return 142;
}

uint64_t WKBundlePageOverlayCreate(long long *a1)
{
  uint64_t result = WTF::fastMalloc((WTF *)0x90);
  *(_OWORD *)(result + 8) = 0u;
  uint64_t v3 = (_OWORD *)(result + 8);
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(void *)(result + 104) = 0;
  *(void *)uint64_t result = &unk_1EE9F0C58;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  if (a1)
  {
    int v4 = *(_DWORD *)a1;
    if (*(_DWORD *)a1 == 1)
    {
      long long v5 = *a1;
      long long v6 = a1[2];
      *(_OWORD *)(result + 24) = a1[1];
      *(_OWORD *)(result + 40) = v6;
      _OWORD *v3 = v5;
      long long v7 = a1[3];
      long long v8 = a1[4];
      long long v9 = a1[5];
      *(void *)(result + 104) = *((void *)a1 + 12);
      *(_OWORD *)(result + 72) = v8;
      *(_OWORD *)(result + 88) = v9;
      *(_OWORD *)(result + 56) = v7;
    }
    else if (v4 <= 0)
    {
      if (v4)
      {
        __break(1u);
        return result;
      }
      _OWORD *v3 = *a1;
      long long v10 = a1[1];
      long long v11 = a1[2];
      long long v12 = a1[3];
      *(void *)(result + 72) = *((void *)a1 + 8);
      *(_OWORD *)(result + 40) = v11;
      *(_OWORD *)(result + 56) = v12;
      *(_OWORD *)(result + 24) = v10;
    }
  }
  uint64_t v14 = result;
  WebKit::WebPageOverlay::create(&v14, &v15);
  if (v15) {
    uint64_t v13 = *((void *)v15 + 1);
  }
  else {
    uint64_t v13 = 0;
  }
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  return v13;
}

uint64_t WKBundlePageOverlaySetAccessibilityClient(void *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)([a1 _apiObject] + 40) + 80);

  return v1();
}

uint64_t WKBundlePageOverlaySetNeedsDisplay(void *a1, const FloatRect *a2, double a3, double a4, double a5, double a6)
{
  if (a1) {
    uint64_t v10 = [a1 _apiObject];
  }
  else {
    uint64_t v10 = 0;
  }
  float v11 = a3;
  float v12 = a4;
  float v13 = a5;
  *(float *)long long v17 = v11;
  *(float *)&v17[1] = v12;
  float v14 = a6;
  *(float *)&v17[2] = v13;
  *(float *)&v17[3] = v14;
  v18.m_location = (IntPoint)WebCore::enclosingIntRect((WebCore *)v17, a2);
  v18.m_size = v15;
  return WebCore::PageOverlay::setNeedsDisplay(*(WebCore::PageOverlay **)(v10 + 32), &v18);
}

float WKBundlePageOverlayFractionFadedIn()
{
  return 1.0;
}

uint64_t WKBundlePageOverlayClear(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 32);

  return MEMORY[0x1F416CB38](v1);
}

uint64_t WKBundleRangeHandleGetTypeID()
{
  return 143;
}

uint64_t WKBundleRangeHandleCreate(uint64_t a1, JSC::VM *a2, JSValue a3)
{
  uint64_t v3 = (WTF *)WebCore::JSRange::toWrapped(*(WebCore::JSRange **)(a1 + 56), a2, a3);
  WebKit::InjectedBundleRangeHandle::getOrCreate(v3, v4, &v6);
  if (v6) {
    return *(void *)(v6 + 8);
  }
  else {
    return 0;
  }
}

double WKBundleRangeHandleGetBoundingRectInWindowCoordinates(void *a1)
{
  if (a1) {
    a1 = (void *)[a1 _apiObject];
  }
  return (double)(int)WebKit::InjectedBundleRangeHandle::boundingRectInWindowCoordinates((WebKit::InjectedBundleRangeHandle *)a1);
}

uint64_t WKBundleRangeHandleCopySnapshotWithOptions(void *a1, unsigned int a2)
{
  if (a1) {
    [a1 _apiObject];
  }
  WebKit::InjectedBundleRangeHandle::renderedImage(a2 & 0xF | (((a2 >> 4) & 7) << 6), &v4);
  if (v4) {
    return *(void *)(v4 + 8);
  }
  else {
    return 0;
  }
}

uint64_t WKBundleScriptWorldGetTypeID()
{
  return 144;
}

uint64_t WKBundleScriptWorldCreateWorld()
{
  WebKit::InjectedBundleScriptWorld::create(&v1);
  if (v1) {
    return *((void *)v1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t WKBundleScriptWorldNormalWorld(WebKit::InjectedBundleScriptWorld *a1)
{
  return *((void *)WebKit::InjectedBundleScriptWorld::normalWorld(a1) + 1);
}

uint64_t WKBundleScriptWorldClearWrappers(void *a1)
{
  uint64_t v1 = *(void *)([a1 _apiObject] + 24);

  return MEMORY[0x1F416E000](v1, v2);
}

uint64_t WKBundleScriptWorldMakeAllShadowRootsOpen(void *a1)
{
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(*(void *)(result + 24) + 52) = 1;
  return result;
}

uint64_t WKBundleScriptWorldDisableOverrideBuiltinsBehavior(void *a1)
{
  uint64_t result = [a1 _apiObject];
  *(unsigned char *)(*(void *)(result + 24) + 53) = 1;
  return result;
}

uint64_t WKBundleScriptWorldCopyName(void *a1)
{
  if (a1) {
    [a1 _apiObject];
  }
  API::String::create(&v2);
  if (v2) {
    return *((void *)v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t API::InjectedBundle::EditorClient::shouldInsertText()
{
  return 1;
}

uint64_t API::InjectedBundle::EditorClient::shouldChangeSelectedRange()
{
  return 1;
}

uint64_t API::InjectedBundle::EditorClient::performTwoStepDrop()
{
  return 0;
}

void API::CaptionUserPreferencesTestingModeToken::~CaptionUserPreferencesTestingModeToken(API::CaptionUserPreferencesTestingModeToken *this, void *a2)
{
  *(void *)this = &unk_1EE9F0C30;
  WebCore::CaptionUserPreferencesTestingModeToken::~CaptionUserPreferencesTestingModeToken((API::CaptionUserPreferencesTestingModeToken *)((char *)this + 16), a2);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE9F0C30;
  WebCore::CaptionUserPreferencesTestingModeToken::~CaptionUserPreferencesTestingModeToken((API::CaptionUserPreferencesTestingModeToken *)((char *)this + 16), a2);

  JUMPOUT(0x199740C10);
}

uint64_t API::ObjectImpl<(API::Object::Type)4>::type()
{
  return 4;
}

void WebCore::CaptionUserPreferencesTestingModeToken::~CaptionUserPreferencesTestingModeToken(WebCore::CaptionUserPreferencesTestingModeToken *this, void *a2)
{
  uint64_t v3 = *(void *)this;
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      int v5 = *(_DWORD *)(v4 + 136);
      if (v5) {
        *(_DWORD *)(v4 + 136) = v5 - 1;
      }
    }
    *(void *)this = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  else
  {
    *(void *)this = 0;
  }
}

uint64_t PageOverlayClientImpl::willMoveToPage(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(result + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (a3) {
      uint64_t v5 = *(void *)(a3 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    return v3(v4, v5, *(void *)(result + 16));
  }
  return result;
}

uint64_t PageOverlayClientImpl::didMoveToPage(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(result + 32);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (a3) {
      uint64_t v5 = *(void *)(a3 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    return v3(v4, v5, *(void *)(result + 16));
  }
  return result;
}

WebCore::DestinationColorSpace *PageOverlayClientImpl::drawRect(WebCore::DestinationColorSpace *result, uint64_t a2, uint64_t a3, int *a4)
{
  if (!*((void *)result + 5)) {
    return result;
  }
  long long v7 = result;
  *(float *)&unsigned __int32 v8 = (float)a4[3];
  float v36 = (float)a4[2];
  unsigned __int32 v37 = v8;
  uint64_t v9 = WebCore::DestinationColorSpace::SRGB(result);
  (*(void (**)(WebCore::DestinationColorSpace **__return_ptr, uint64_t, float *, uint64_t, uint64_t))(*(void *)a3 + 336))(&v40, a3, &v36, v9, 256);
  uint64_t result = v40;
  if (!v40) {
    return result;
  }
  uint64_t v10 = (*(uint64_t (**)(WebCore::DestinationColorSpace *))(*(void *)v40 + 16))(v40);
  IntPoint v39 = (IntPoint)(-*a4 - (*(void *)a4 & 0xFFFFFFFF00000000));
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v36, &v39);
  v11.n128_f32[0] = v36;
  v12.n128_u32[0] = v37;
  (*(void (**)(uint64_t, __n128, __n128))(*(void *)v10 + 640))(v10, v11, v12);
  float v13 = (void (*)(uint64_t, uint64_t, void, double, double, double, double))*((void *)v7 + 5);
  uint64_t v14 = *(void *)(a2 + 8);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
  v13(v14, v15, *((void *)v7 + 2), (double)*a4, (double)a4[1], (double)a4[2], (double)a4[3]);
  long long v16 = v40;
  CFTypeRef v40 = 0;
  uint64_t v38 = v16;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v36, (const WebCore::IntRect *)a4);
  uint64_t result = (WebCore::DestinationColorSpace *)WebCore::GraphicsContext::drawConsumingImageBuffer();
  IntRect v18 = v38;
  uint64_t v38 = 0;
  if (v18)
  {
    char v19 = 0;
    uint64_t v20 = *((void *)v18 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
    if (v19) {
      uint64_t result = (WebCore::DestinationColorSpace *)MEMORY[0x19972E8D0](v20);
    }
    uint64_t v21 = *(void *)(v20 + 8);
    int v22 = 1;
    uint64_t v23 = v21 - 1;
    *(void *)(v20 + 8) = v21 - 1;
    if (v21 == 1)
    {
      uint64_t v34 = *(void *)(v20 + 16);
      uint64_t v24 = *(void *)(v20 + 24);
      *(void *)(v20 + 24) = 0;
      BOOL v25 = v34 != 0;
    }
    else
    {
      uint64_t v24 = 0;
      BOOL v25 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
    if (v22 == 1)
    {
      if (!v23)
      {
LABEL_10:
        if (v24) {
          uint64_t result = (WebCore::DestinationColorSpace *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 8))(v24);
        }
        if (!v25) {
          uint64_t result = (WebCore::DestinationColorSpace *)WTF::fastFree((WTF *)v20, v17);
        }
      }
    }
    else
    {
      uint64_t result = (WebCore::DestinationColorSpace *)WTF::Lock::unlockSlow((WTF::Lock *)v20);
      if (!v23) {
        goto LABEL_10;
      }
    }
  }
  uint64_t v26 = v40;
  CFTypeRef v40 = 0;
  if (!v26) {
    return result;
  }
  char v27 = 0;
  uint64_t v28 = *((void *)v26 + 1);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v28, (unsigned __int8 *)&v27, 1u, memory_order_acquire, memory_order_acquire);
  if (v27) {
    uint64_t result = (WebCore::DestinationColorSpace *)MEMORY[0x19972E8D0](v28);
  }
  uint64_t v29 = *(void *)(v28 + 8);
  int v30 = 1;
  uint64_t v31 = v29 - 1;
  *(void *)(v28 + 8) = v29 - 1;
  if (v29 == 1)
  {
    uint64_t v35 = *(void *)(v28 + 16);
    uint64_t v32 = *(void *)(v28 + 24);
    *(void *)(v28 + 24) = 0;
    BOOL v33 = v35 != 0;
  }
  else
  {
    uint64_t v32 = 0;
    BOOL v33 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v28, (unsigned __int8 *)&v30, 0, memory_order_release, memory_order_relaxed);
  if (v30 == 1)
  {
    if (v31) {
      return result;
    }
  }
  else
  {
    uint64_t result = (WebCore::DestinationColorSpace *)WTF::Lock::unlockSlow((WTF::Lock *)v28);
    if (v31) {
      return result;
    }
  }
  if (v32) {
    uint64_t result = (WebCore::DestinationColorSpace *)(*(uint64_t (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  if (!v33) {
    return (WebCore::DestinationColorSpace *)WTF::fastFree((WTF *)v28, v17);
  }
  return result;
}

uint64_t PageOverlayClientImpl::mouseEvent(void *a1, uint64_t a2, uint64_t a3, __n128 a4, __n128 a5)
{
  int v5 = *(unsigned __int8 *)(a3 + 8);
  if (v5 == 5)
  {
    unsigned int v7 = *(unsigned __int8 *)(a3 + 48);
    if (v7 == 254)
    {
      unsigned __int32 v8 = (uint64_t (*)(void, void, double, double))a1[8];
      if (v8) {
        return v8(*(void *)(a2 + 8), a1[2], (double)*(int *)(a3 + 52), (double)*(int *)(a3 + 56));
      }
      return 0;
    }
    uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, void, __n128, __n128))a1[9];
    if (v6)
    {
      a4.n128_f64[0] = (double)*(int *)(a3 + 52);
      uint64_t v10 = *(void *)(a2 + 8);
      a5.n128_f64[0] = (double)*(int *)(a3 + 56);
      goto LABEL_13;
    }
    return 0;
  }
  if (v5 != 7)
  {
    if (v5 != 6) {
      return 0;
    }
    uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, void, __n128, __n128))a1[6];
    if (!v6) {
      return 0;
    }
    goto LABEL_10;
  }
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, void, __n128, __n128))a1[7];
  if (!v6) {
    return 0;
  }
LABEL_10:
  a4.n128_f64[0] = (double)*(int *)(a3 + 52);
  uint64_t v10 = *(void *)(a2 + 8);
  a5.n128_f64[0] = (double)*(int *)(a3 + 56);
  unsigned int v7 = *(unsigned __int8 *)(a3 + 48);
LABEL_13:
  if (v7 >= 3) {
    uint64_t v11 = 4294967294;
  }
  else {
    uint64_t v11 = v7;
  }
  return v6(v10, v11, a1[2], a4, a5);
}

uint64_t PageOverlayClientImpl::copyAccessibilityAttributeStringValueForPoint(uint64_t a1, uint64_t a2, float a3, float a4, uint64_t a5, WTF::StringImpl **a6)
{
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a1 + 128);
  if (v6)
  {
    uint64_t v11 = *(void *)(a2 + 8);
    API::String::create(&v22);
    uint64_t v12 = v22 ? *((void *)v22 + 1) : 0;
    uint64_t v13 = WKPointCreate(a3, a4);
    uint64_t v14 = (void *)v6(v11, v12, v13, *(void *)(a1 + 120));
    uint64_t v15 = [v14 _apiObject];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 16))(v15) == 21)
    {
      if (v14)
      {
        [v14 _apiObject];
        WTF::String::isolatedCopy();
        long long v17 = v22;
      }
      else
      {
        long long v17 = 0;
      }
      int v22 = 0;
      IntRect v18 = *a6;
      *a6 = v17;
      if (!v18) {
        return 1;
      }
      int v19 = *(_DWORD *)v18 - 2;
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy(v18, v16);
        IntRect v18 = v22;
        int v22 = 0;
        if (!v18) {
          return 1;
        }
        int v19 = *(_DWORD *)v18 - 2;
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::destroy(v18, v20);
          return 1;
        }
      }
      *(_DWORD *)IntRect v18 = v19;
      return 1;
    }
  }
  return 0;
}

uint64_t PageOverlayClientImpl::copyAccessibilityAttributeBoolValueForPoint(uint64_t a1, uint64_t a2, float a3, float a4, uint64_t a5, unsigned char *a6)
{
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a1 + 128);
  if (!v6) {
    return 0;
  }
  uint64_t v11 = *(void *)(a2 + 8);
  API::String::create(&v17);
  uint64_t v12 = v17 ? *((void *)v17 + 1) : 0;
  uint64_t v13 = WKPointCreate(a3, a4);
  uint64_t v14 = (void *)v6(v11, v12, v13, *(void *)(a1 + 120));
  uint64_t v15 = [v14 _apiObject];
  if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 16))(v15) != 32) {
    return 0;
  }
  *a6 = *(unsigned char *)([v14 _apiObject] + 16);
  return 1;
}

unsigned int *PageOverlayClientImpl::copyAccessibilityAttributeNames@<X0>(unsigned int *this@<X0>, WebKit::WebPageOverlay *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  uint64_t v4 = (uint64_t (*)(void, uint64_t, void))*((void *)this + 17);
  if (v4)
  {
    uint64_t v6 = (void *)v4(*((void *)a2 + 1), a3, *((void *)this + 15));
    uint64_t v7 = *(unsigned int *)([v6 _apiObject] + 28);
    if (v7)
    {
      if (v7 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        uint64_t v8 = WTF::fastMalloc((WTF *)(8 * v7));
        unint64_t v9 = 0;
        *(_DWORD *)(a4 + 8) = v7;
        *(void *)a4 = v8;
        while (1)
        {
          uint64_t v10 = [v6 _apiObject];
          if (v9 >= *(unsigned int *)(v10 + 28)) {
            break;
          }
          uint64_t v11 = *(void **)(*(void *)(*(void *)(v10 + 16) + 8 * v9) + 8);
          uint64_t v12 = [v11 _apiObject];
          if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12) == 21)
          {
            [v11 _apiObject];
            WTF::String::isolatedCopy();
            uint64_t v14 = *(unsigned int *)(a4 + 12);
            if (v14 == *(_DWORD *)(a4 + 8))
            {
              IntRect v18 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v14 + 1, (unint64_t)&v20);
              uint64_t v14 = *(unsigned int *)(a4 + 12);
              uint64_t v15 = *(void *)a4;
              long long v16 = *v18;
              WTF::StringImpl *v18 = 0;
            }
            else
            {
              uint64_t v15 = *(void *)a4;
              long long v16 = v20;
              uint64_t v20 = 0;
            }
            *(void *)(v15 + 8 * v14) = v16;
            *(_DWORD *)(a4 + 12) = v14 + 1;
            long long v17 = v20;
            uint64_t v20 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2) {
                WTF::StringImpl::destroy(v17, v13);
              }
              else {
                *(_DWORD *)v17 -= 2;
              }
            }
          }
          if (v7 == ++v9)
          {
            unint64_t v19 = *(unsigned int *)(a4 + 12);
            return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a4, v19);
          }
        }
        __break(0xC471u);
      }
      JUMPOUT(0x1991589CCLL);
    }
    unint64_t v19 = 0;
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a4, v19);
  }
  return this;
}

uint64_t PageOverlayClientImpl::setAccessibilityClient(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (_OWORD *)(result + 112);
  if (a2)
  {
    if (*(_DWORD *)a2)
    {
      _OWORD *v2 = 0u;
      *(_OWORD *)(result + 128) = 0u;
      if ((*(_DWORD *)a2 & 0x80000000) != 0) {
        __break(1u);
      }
    }
    else
    {
      long long v3 = *(_OWORD *)(a2 + 16);
      _OWORD *v2 = *(_OWORD *)a2;
      *(_OWORD *)(result + 128) = v3;
    }
  }
  else
  {
    _OWORD *v2 = 0u;
    *(_OWORD *)(result + 128) = 0u;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::CompositionHighlight>::destruct(*(void *)a1, (void *)(*(void *)a1 + 40 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,WebCore::CompositionHighlight>::destruct(uint64_t result, void *a2)
{
  for (; (void *)result != a2; result += 40)
  {
    if (*(unsigned char *)(result + 32))
    {
      uint64_t v2 = *(void *)(result + 24);
      if ((v2 & 0x8000000000000) != 0)
      {
        uint64_t v4 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v4);
          uint64_t v6 = a2;
          uint64_t v8 = result;
          WTF::fastFree((WTF *)v4, a2);
          a2 = v6;
          uint64_t result = v8;
        }
      }
    }
    if (*(unsigned char *)(result + 16))
    {
      uint64_t v3 = *(void *)(result + 8);
      if ((v3 & 0x8000000000000) != 0)
      {
        int v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v5);
          uint64_t v7 = a2;
          uint64_t v9 = result;
          WTF::fastFree((WTF *)v5, a2);
          a2 = v7;
          uint64_t result = v9;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionHighlight>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)a1 + 40 * v4;
  *(void *)uint64_t v6 = *(void *)v3;
  *(unsigned char *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + ++*(_DWORD *)(this + 16) = 0;
  uint64_t v7 = (unsigned char *)(v6 + 16);
  if (*(unsigned char *)(v3 + 16))
  {
    WebCore::Color::Color();
    *uint64_t v7 = 1;
  }
  uint64_t v8 = v5 + 40 * v4;
  *(unsigned char *)(v8 + 24) = 0;
  v8 += 24;
  *(unsigned char *)(v8 + 8) = 0;
  uint64_t v9 = (unsigned char *)(v8 + 8);
  if (*(unsigned char *)(v3 + 32))
  {
    WebCore::Color::Color();
    unsigned char *v9 = 1;
  }
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x199158D48);
    }
    unint64_t v3 = *(unsigned int **)a1;
    unsigned int v4 = (unsigned int *)(*(void *)a1 + 40 * *(unsigned int *)(a1 + 12));
    int v5 = 40 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::CompositionHighlight>::move(v3, v4, v6);
    if (v3)
    {
      if (*(unsigned int **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  return 1;
}

unsigned int *WTF::VectorMover<false,WebCore::CompositionHighlight>::move(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    uint64_t v6 = 0;
    do
    {
      unint64_t v7 = &v5[v6];
      uint64_t v8 = a3 + v6 * 4;
      *(void *)uint64_t v8 = *(void *)&v5[v6];
      *(unsigned char *)(a3 + v6 * 4 + 8) = 0;
      *(unsigned char *)(v8 + ++*(_DWORD *)(this + 16) = 0;
      if (LOBYTE(v5[v6 + 4]))
      {
        WebCore::Color::Color();
        *(unsigned char *)(v8 + ++*(_DWORD *)(this + 16) = 1;
      }
      *(unsigned char *)(v8 + 24) = 0;
      uint64_t result = (unsigned int *)(v8 + 24);
      *(unsigned char *)(v8 + 32) = 0;
      if (*((unsigned char *)v7 + 32))
      {
        unint64_t v10 = &v5[v6 + 6];
        uint64_t result = (unsigned int *)WebCore::Color::Color();
        *(unsigned char *)(v8 + 32) = 1;
        if (*((unsigned char *)v7 + 32))
        {
          uint64_t v11 = *(void *)v10;
          if ((*(void *)v10 & 0x8000000000000) != 0)
          {
            uint64_t result = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
            if (atomic_fetch_add((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, result);
              uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
            }
          }
        }
      }
      if (*((unsigned char *)v7 + 16))
      {
        uint64_t v9 = *(void *)&v5[v6 + 2];
        if ((v9 & 0x8000000000000) != 0)
        {
          uint64_t result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, result);
            uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
          }
        }
      }
      v6 += 10;
    }
    while (&v5[v6] != a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKBundlePageRegisterScrollOperationCompletionCallback::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

void WTF::Detail::CallableWrapper<WKBundlePageCallAfterTasksAndTimers::$_0,void,WebCore::ScriptExecutionContext &>::call()
{
}

uint64_t WTF::Detail::CallableWrapper<void (*)(void *),void,void *>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

void WKBundlePageCallAfterTasksAndTimers::TimerOwner::timerFired(WKBundlePageCallAfterTasksAndTimers::TimerOwner *this)
{
  (*(void (**)(void, void))(**((void **)this + 7) + 16))(*((void *)this + 7), *((void *)this + 8));
  uint64_t v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_1EE9BA5F0;
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WebCore::TimerBase::~TimerBase(this);

  JUMPOUT(0x199740C10);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WKBundlePageCallAfterTasksAndTimers::TimerOwner::*&)(void),WKBundlePageCallAfterTasksAndTimers::TimerOwner*>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t WTF::Detail::CallableWrapper<WKBundlePagePostMessageWithAsyncReply::$_0,void,API::Object *>::call(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  return (*(uint64_t (**)(uint64_t, void))(a1 + 8))(v2, *(void *)(a1 + 16));
}

uint64_t WKBundlePageBannerGetTypeID()
{
  return 141;
}

WTF *WebKit::InjectedBundleCSSStyleDeclarationHandle::getOrCreate@<X0>(WTF *result@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result)
  {
    uint64_t v20 = 0;
    goto LABEL_39;
  }
  unsigned int v4 = result;
  if ((_MergedGlobals_109 & 1) == 0)
  {
    qword_1EB359E68 = 0;
    _MergedGlobals_109 = 1;
  }
  if (!*((void *)result + 2))
  {
    uint64_t v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v5 = 1;
    *(void *)(v5 + 8) = v4;
    uint64_t v6 = (WTF *)*((void *)v4 + 2);
    *((void *)v4 + 2) = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1) {
        WTF::fastFree(v6, a2);
      }
      else {
        --*(_DWORD *)v6;
      }
    }
  }
  unint64_t v7 = (WTF *)*((void *)v4 + 2);
  ++*(_DWORD *)v7;
  uint64_t v8 = qword_1EB359E68;
  if (qword_1EB359E68
    || (WTF::HashTable<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>>::expand(),
        (uint64_t v8 = qword_1EB359E68) != 0))
  {
    unsigned int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  unint64_t v10 = 0;
  uint64_t v11 = *((void *)v7 + 1);
  unint64_t v12 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
  unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  int v15 = (v14 >> 31) ^ v14;
  for (int i = 1; ; ++i)
  {
    uint64_t v17 = v15 & v9;
    IntRect v18 = (WTF **)(v8 + 16 * v17);
    unint64_t v19 = *v18;
    if (*v18 == (WTF *)-1)
    {
      unint64_t v10 = (WTF **)(v8 + 16 * v17);
      goto LABEL_17;
    }
    if (!v19)
    {
      if (v10)
      {
        unsigned int *v10 = 0;
        v10[1] = 0;
        --*(_DWORD *)(v8 - 16);
        unsigned int *v10 = v7;
      }
      else
      {
        WTF::StringImpl *v18 = v7;
        unint64_t v10 = (WTF **)(v8 + 16 * v17);
      }
      uint64_t v20 = API::Object::newObject(0x20uLL, 135);
      *(void *)uint64_t v20 = &unk_1EE9D1E28;
      WebKit::InitializeWebKit2((WebKit *)v20);
      *(void *)(v20 + ++*(_DWORD *)(this + 16) = 0;
      *(void *)uint64_t v20 = &unk_1EE9F0E20;
      (*(void (**)(WTF *))(*(void *)v4 + 16))(v4);
      *(void *)(v20 + 24) = v4;
      if (!*(void *)(v20 + 16))
      {
        uint64_t v22 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)uint64_t v22 = 1;
        *(void *)(v22 + 8) = v20;
        uint64_t v23 = *(unsigned int **)(v20 + 16);
        *(void *)(v20 + ++*(_DWORD *)(this + 16) = v22;
        if (v23)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v23);
            WTF::fastFree((WTF *)v23, v21);
          }
        }
      }
      uint64_t v24 = *(atomic_uint **)(v20 + 16);
      atomic_fetch_add(v24, 1u);
      uint64_t result = v10[1];
      v10[1] = (WTF *)v24;
      if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)result);
        uint64_t result = (WTF *)WTF::fastFree(result, v21);
      }
      if (qword_1EB359E68) {
        int v25 = *(_DWORD *)(qword_1EB359E68 - 12) + 1;
      }
      else {
        int v25 = 1;
      }
      *(_DWORD *)(qword_1EB359E68 - 12) = v25;
      if (qword_1EB359E68) {
        int v26 = *(_DWORD *)(qword_1EB359E68 - 12);
      }
      else {
        int v26 = 0;
      }
      uint64_t v27 = (*(_DWORD *)(qword_1EB359E68 - 16) + v26);
      unint64_t v28 = *(unsigned int *)(qword_1EB359E68 - 4);
      if (v28 > 0x400)
      {
        if (v28 > 2 * v27) {
          goto LABEL_39;
        }
      }
      else if (3 * v28 > 4 * v27)
      {
        goto LABEL_39;
      }
      uint64_t result = (WTF *)WTF::HashTable<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>>::expand();
      goto LABEL_39;
    }
    if (*((void *)v19 + 1) == v11) {
      break;
    }
LABEL_17:
    int v15 = i + v17;
  }
  if (*(_DWORD *)v7 == 1)
  {
    uint64_t v29 = v8;
    uint64_t v30 = v17;
    WTF::fastFree(v7, a2);
    uint64_t v17 = v30;
    uint64_t v8 = v29;
  }
  else
  {
    --*(_DWORD *)v7;
  }
  uint64_t v20 = *(void *)(*(void *)(v8 + 16 * v17 + 8) + 8);
  uint64_t result = (WTF *)CFRetain(*(CFTypeRef *)(v20 + 8));
LABEL_39:
  *a3 = v20;
  return result;
}

void WebKit::InjectedBundleCSSStyleDeclarationHandle::~InjectedBundleCSSStyleDeclarationHandle(WebKit::InjectedBundleCSSStyleDeclarationHandle *this, void *a2)
{
  *(void *)this = &unk_1EE9F0E20;
  if (_MergedGlobals_109)
  {
    uint64_t v3 = &qword_1EB359000;
    uint64_t v4 = qword_1EB359E68;
    uint64_t v6 = (uint64_t *)((char *)this + 24);
    uint64_t v5 = *((void *)this + 3);
    if (!qword_1EB359E68) {
      goto LABEL_23;
    }
    int v7 = *(_DWORD *)(qword_1EB359E68 - 8);
    unint64_t v8 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    unsigned int v11 = v7 & ((v10 >> 31) ^ v10);
    for (int i = 1; ; ++i)
    {
      uint64_t v13 = v11;
      unint64_t v14 = *(WTF **)(qword_1EB359E68 + 16 * v11);
      if (v14 != (WTF *)-1)
      {
        if (!v14) {
          goto LABEL_22;
        }
        if (*((void *)v14 + 1) == v5) {
          break;
        }
      }
      unsigned int v11 = (v13 + i) & v7;
    }
    if (v13 != *(_DWORD *)(qword_1EB359E68 - 4))
    {
      int v15 = (void *)(qword_1EB359E68 + 16 * v13);
      *int v15 = 0;
      if (*(_DWORD *)v14 == 1)
      {
        uint64_t v27 = v4;
        uint64_t v28 = v13;
        int v26 = (void *)(v4 + 16 * v13);
        WTF::fastFree(v14, a2);
        int v15 = v26;
        uint64_t v4 = v27;
        uint64_t v13 = v28;
        uint64_t v3 = &qword_1EB359000;
      }
      else
      {
        --*(_DWORD *)v14;
      }
      *int v15 = -1;
      uint64_t v16 = v4 + 16 * v13;
      uint64_t v17 = *(unsigned int **)(v16 + 8);
      *(void *)(v16 + 8) = 0;
      if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, a2);
        uint64_t v3 = &qword_1EB359000;
      }
      uint64_t v18 = v3[461];
      ++*(_DWORD *)(v18 - 16);
      if (v18) {
        int v19 = *(_DWORD *)(v18 - 12) - 1;
      }
      else {
        int v19 = -1;
      }
      *(_DWORD *)(v18 - 12) = v19;
      uint64_t v20 = v3[461];
      if (v20)
      {
        unsigned int v21 = 6 * *(_DWORD *)(v20 - 12);
        unsigned int v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9) {
          WTF::HashTable<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>>::rehash(v22 >> 1);
        }
      }
    }
  }
  else
  {
    qword_1EB359E68 = 0;
    _MergedGlobals_109 = 1;
    uint64_t v6 = (uint64_t *)((char *)this + 24);
  }
LABEL_22:
  uint64_t v5 = *v6;
LABEL_23:
  *uint64_t v6 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  uint64_t v24 = *((void *)this + 2);
  if (v24)
  {
    *(void *)(v24 + 8) = 0;
    int v25 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v25)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, a2);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  uint64_t vars8;

  WebKit::InjectedBundleCSSStyleDeclarationHandle::~InjectedBundleCSSStyleDeclarationHandle(this, a2);

  JUMPOUT(0x199740C10);
}

WebKit::RemoteWebInspectorUI *WebKit::RemoteWebInspectorUI::RemoteWebInspectorUI(WebKit::RemoteWebInspectorUI *this, WebKit::WebPage *a2)
{
  *((_DWORD *)this + 4) = 1;
  *(void *)this = &unk_1EE9F0E48;
  *((void *)this + 1) = 0;
  *((void *)this + 3) = &unk_1EE9F0FE0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = a2;
  WTF::fastMalloc((WTF *)0x38);
  *((void *)this + 6) = WebCore::InspectorFrontendAPIDispatcher::InspectorFrontendAPIDispatcher();
  *((void *)this + 7) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = 0;
  *((unsigned char *)this + 96) = 0;
  *((void *)this + 13) = 0;
  *((unsigned char *)this + 112) = 0;
  return this;
}

void WebKit::RemoteWebInspectorUI::~RemoteWebInspectorUI(WebKit::RemoteWebInspectorUI *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  int v7 = (WebCore::InspectorFrontendHost *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v7) {
    WTF::RefCounted<WebCore::InspectorFrontendHost>::deref(v7);
  }
  unint64_t v8 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v8) {
    WTF::RefCounted<WebCore::InspectorFrontendAPIDispatcher>::deref(v8);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 4, a2);
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v9);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteWebInspectorUI::~RemoteWebInspectorUI(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::RemoteWebInspectorUI::~RemoteWebInspectorUI(WebKit::RemoteWebInspectorUI *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::RemoteWebInspectorUI::~RemoteWebInspectorUI((WebKit::RemoteWebInspectorUI *)((char *)this - 24), a2);

  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebKit::RemoteWebInspectorUI::initialize(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  v12[1] = *(_DWORD **)MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 64) = *(unsigned char *)a2;
  WTF::String::operator=((uint64_t *)(a1 + 72), (uint64_t *)(a2 + 8));
  WTF::String::operator=((uint64_t *)(a1 + 80), (uint64_t *)(a2 + 16));
  WTF::String::operator=((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 24));
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 32);
  WTF::String::operator=((uint64_t *)(a1 + 104), a3);
  WebCore::InspectorController::setInspectorFrontendClient();
  WebCore::InspectorFrontendAPIDispatcher::reset(*(WebCore::InspectorFrontendAPIDispatcher **)(a1 + 48));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v10, v12, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v6);
  unint64_t v8 = v12[0];
  v12[0] = 0;
  if (v8)
  {
    if (*v8 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v8;
    }
  }
  uint64_t result = v11;
  unsigned int v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteWebInspectorUI::updateFindString(WebKit::RemoteWebInspectorUI *this, const WTF::String *a2)
{
  v10[1] = *(_DWORD **)MEMORY[0x1E4F143B8];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((uint64_t *)v10, a2, v3);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v8, v10, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v4);
  uint64_t v6 = v10[0];
  v10[0] = 0;
  if (v6)
  {
    if (*v6 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v6;
    }
  }
  uint64_t result = v9;
  unint64_t v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::RemoteWebInspectorUI::sendMessageToFrontend(WebKit::RemoteWebInspectorUI *this, const WTF::String *a2)
{
  return MEMORY[0x1F4171DE8](*((void *)this + 6), a2);
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::sendMessageToBackend(WebKit::RemoteWebInspectorUI *this, const WTF::String *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v5 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::SendMessageToBackend>(v2, &v5, *(void *)(*((void *)this + 5) + 40));
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteWebInspectorUI::sendMessageToBackend(WebKit::RemoteWebInspectorUI *this, const WTF::String *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v5 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::SendMessageToBackend>(v2, &v5, *(void *)(*((void *)this + 2) + 40));
}

uint64_t WebKit::RemoteWebInspectorUI::windowObjectCleared(WebKit::RemoteWebInspectorUI *this)
{
  uint64_t v2 = (WebCore::InspectorFrontendHost *)*((void *)this + 7);
  if (v2) {
    WebCore::InspectorFrontendHost::disconnectClient(v2);
  }
  uint64_t v3 = WTF::fastMalloc((WTF *)0x18);
  WebCore::InspectorFrontendHost::InspectorFrontendHost();
  uint64_t v4 = (WebCore::InspectorFrontendHost *)*((void *)this + 7);
  *((void *)this + 7) = v3;
  if (v4)
  {
    uint64_t v4 = WTF::RefCounted<WebCore::InspectorFrontendHost>::deref(v4);
    uint64_t v3 = *((void *)this + 7);
  }
  uint64_t v5 = WebCore::mainThreadNormalWorld(v4);

  return MEMORY[0x1F4170050](v3, v5);
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::windowObjectCleared(WebKit::RemoteWebInspectorUI *this)
{
  return WebKit::RemoteWebInspectorUI::windowObjectCleared((WebKit::RemoteWebInspectorUI *)((char *)this - 24));
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::frontendLoaded(WebCore::InspectorFrontendAPIDispatcher **this)
{
  v17[1] = *(_DWORD **)MEMORY[0x1E4F143B8];
  WebCore::InspectorFrontendAPIDispatcher::frontendLoaded(this[6]);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v15, v17, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v2);
  uint64_t v4 = v17[0];
  v17[0] = 0;
  if (v4)
  {
    if (*v4 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v4;
    }
  }
  uint64_t v5 = v16;
  uint64_t v16 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  {
    unint64_t v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v14);
  }
  uint64_t v6 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v7 = *((void *)this[5] + 5);
  unint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v8 = 1423;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  v15[0] = v8;
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)v15, 0, 0);
  unint64_t v10 = v15[0];
  v15[0] = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v12, v13);
  }
  return WebKit::RemoteWebInspectorUI::bringToFront((WebKit::RemoteWebInspectorUI *)this);
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::bringToFront(WebKit::RemoteWebInspectorUI *this)
{
  {
    unint64_t v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  uint64_t v1 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v2 = *(void *)(*((void *)this + 5) + 40);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1421;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v9 = v3;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  unint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteWebInspectorUI::frontendLoaded(WebCore::InspectorFrontendAPIDispatcher **this)
{
  return WebKit::RemoteWebInspectorUI::frontendLoaded(this - 3);
}

uint64_t WebKit::RemoteWebInspectorUI::pagePaused(WebKit::RemoteWebInspectorUI *this)
{
  return MEMORY[0x1F4171E08](*((void *)this + 6), 0);
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::pagePaused(WebKit::RemoteWebInspectorUI *this)
{
  return MEMORY[0x1F4171E08](*((void *)this + 3), 0);
}

uint64_t WebKit::RemoteWebInspectorUI::pageUnpaused(WebKit::RemoteWebInspectorUI *this)
{
  return MEMORY[0x1F4171E10](*((void *)this + 6));
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::pageUnpaused(WebKit::RemoteWebInspectorUI *this)
{
  return MEMORY[0x1F4171E10](*((void *)this + 3));
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::changeSheetRect(WebKit::RemoteWebInspectorUI *this, const WebCore::FloatRect *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v5 = (float *)a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::SetSheetRect>(v2, &v5, *(void *)(*((void *)this + 5) + 40));
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteWebInspectorUI::changeSheetRect(WebKit::RemoteWebInspectorUI *this, const WebCore::FloatRect *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v5 = (float *)a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::SetSheetRect>(v2, &v5, *(void *)(*((void *)this + 2) + 40));
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::setForcedAppearance(uint64_t a1, char a2)
{
  {
    unint64_t v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  uint64_t v3 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 40);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1432;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unsigned int v11 = v5;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  unsigned int v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteWebInspectorUI::setForcedAppearance(uint64_t a1, char a2)
{
  return WebKit::RemoteWebInspectorUI::setForcedAppearance(a1 - 24, a2);
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::startWindowDrag(WebKit::RemoteWebInspectorUI *this)
{
  {
    unint64_t v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  uint64_t v1 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v2 = *(void *)(*((void *)this + 5) + 40);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1436;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v9 = v3;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  unint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteWebInspectorUI::startWindowDrag(WebKit::RemoteWebInspectorUI *this)
{
  return WebKit::RemoteWebInspectorUI::startWindowDrag((WebKit::RemoteWebInspectorUI *)((char *)this - 24));
}

uint64_t WebKit::RemoteWebInspectorUI::moveWindowBy(WebKit::RemoteWebInspectorUI *this, float a2, float a3)
{
  WebCore::Chrome::windowRect(*(WebCore::Chrome **)(*(void *)(*((void *)this + 5) + 48) + 48));
  v11.m_size.m_width = v6;
  v11.m_size.m_height = v7;
  v11.m_location.m_x = v8 + a2;
  v11.m_location.m_y = v9 + a3;
  return WebCore::Chrome::setWindowRect(*(WebCore::Chrome **)(*(void *)(*((void *)this + 5) + 48) + 48), &v11);
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::moveWindowBy(WebKit::RemoteWebInspectorUI *this, float a2, float a3)
{
  return WebKit::RemoteWebInspectorUI::moveWindowBy((WebKit::RemoteWebInspectorUI *)((char *)this - 24), a2, a3);
}

uint64_t WebKit::RemoteWebInspectorUI::userInterfaceLayoutDirection(WebKit::RemoteWebInspectorUI *this)
{
  return *(unsigned __int8 *)(*(void *)(*((void *)this + 5) + 48) + 1132);
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::userInterfaceLayoutDirection(WebKit::RemoteWebInspectorUI *this)
{
  return *(unsigned __int8 *)(*(void *)(*((void *)this + 2) + 48) + 1132);
}

BOOL WebKit::RemoteWebInspectorUI::supportsDockSide(uint64_t a1, int a2)
{
  return a2 == 0;
}

BOOL non-virtual thunk to'WebKit::RemoteWebInspectorUI::supportsDockSide(uint64_t a1, int a2)
{
  return a2 == 0;
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteWebInspectorUI::bringToFront(WebKit::RemoteWebInspectorUI *this)
{
  return WebKit::RemoteWebInspectorUI::bringToFront((WebKit::RemoteWebInspectorUI *)((char *)this - 24));
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::closeWindow(WebKit::RemoteWebInspectorUI *this)
{
  WebCore::InspectorController::setInspectorFrontendClient();
  {
    float v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v9);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v3 = *(void *)(*((void *)this + 5) + 40);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1422;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  unint64_t v10 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  unint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteWebInspectorUI::closeWindow(WebKit::RemoteWebInspectorUI *this)
{
  return WebKit::RemoteWebInspectorUI::closeWindow((WebKit::RemoteWebInspectorUI *)((char *)this - 24));
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::reopen(WebKit::RemoteWebInspectorUI *this)
{
  {
    float v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  uint64_t v1 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v2 = *(void *)(*((void *)this + 5) + 40);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1427;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  float v9 = v3;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  float v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteWebInspectorUI::reopen(WebKit::RemoteWebInspectorUI *this)
{
  return WebKit::RemoteWebInspectorUI::reopen((WebKit::RemoteWebInspectorUI *)((char *)this - 24));
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::resetState(WebKit::RemoteWebInspectorUI *this)
{
  {
    float v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  uint64_t v1 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v2 = *(void *)(*((void *)this + 5) + 40);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1428;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  float v9 = v3;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  float v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteWebInspectorUI::resetState(WebKit::RemoteWebInspectorUI *this)
{
  return WebKit::RemoteWebInspectorUI::resetState((WebKit::RemoteWebInspectorUI *)((char *)this - 24));
}

WTF::StringImpl *WebKit::RemoteWebInspectorUI::showConsole(WebKit::RemoteWebInspectorUI *this)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4[0] = 0;
  v4[1] = 0;
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v1);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteWebInspectorUI::showResources(WebKit::RemoteWebInspectorUI *this)
{
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4[0] = 0;
  v4[1] = 0;
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v1);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::openURLExternally(WebKit::RemoteWebInspectorUI *this, const WTF::String *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v5 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::OpenURLExternally>(v2, &v5, *(void *)(*((void *)this + 5) + 40));
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteWebInspectorUI::openURLExternally(WebKit::RemoteWebInspectorUI *this, const WTF::String *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v5 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::OpenURLExternally>(v2, &v5, *(void *)(*((void *)this + 2) + 40));
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::revealFileExternally(WebKit::RemoteWebInspectorUI *this, const WTF::String *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v5 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::RevealFileExternally>(v2, &v5, *(void *)(*((void *)this + 5) + 40));
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteWebInspectorUI::revealFileExternally(WebKit::RemoteWebInspectorUI *this, const WTF::String *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v5 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::RevealFileExternally>(v2, &v5, *(void *)(*((void *)this + 2) + 40));
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::save(uint64_t a1, uint64_t a2, char a3)
{
  {
    unint64_t v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  uint64_t v3 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v11 = a2;
  char v12 = a3;
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 40);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1430;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,0ul,1ul>(v5, &v11);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteWebInspectorUI::save(uint64_t a1, uint64_t a2, char a3)
{
  return WebKit::RemoteWebInspectorUI::save(a1 - 24, a2, a3);
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::load(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  {
    uint64_t v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  uint64_t v3 = *(os_unfair_lock_s **)(WebKit::WebProcess::singleton(void)::process + 40);
  float v6 = a2;
  return IPC::Connection::sendWithAsyncReply<Messages::RemoteWebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(v3, &v6, a3, *(void *)(*(void *)(a1 + 40) + 40));
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteWebInspectorUI::load(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  {
    uint64_t v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  uint64_t v3 = *(os_unfair_lock_s **)(WebKit::WebProcess::singleton(void)::process + 40);
  float v6 = a2;
  return IPC::Connection::sendWithAsyncReply<Messages::RemoteWebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(v3, &v6, a3, *(void *)(*(void *)(a1 + 16) + 40));
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::pickColorFromScreen(uint64_t a1, uint64_t *a2)
{
  {
    uint64_t v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 40);
  uint64_t v3 = *(os_unfair_lock_s **)(WebKit::WebProcess::singleton(void)::process + 40);

  return IPC::Connection::sendWithAsyncReply<Messages::RemoteWebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(v3, a2, v2);
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteWebInspectorUI::pickColorFromScreen(uint64_t a1, uint64_t *a2)
{
  {
    uint64_t v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 40);
  uint64_t v3 = *(os_unfair_lock_s **)(WebKit::WebProcess::singleton(void)::process + 40);

  return IPC::Connection::sendWithAsyncReply<Messages::RemoteWebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(v3, a2, v2);
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::showCertificate(WebKit::RemoteWebInspectorUI *this, const WebCore::CertificateInfo *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v5 = a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::ShowCertificate>(v2, (uint64_t)&v5, *(void *)(*((void *)this + 5) + 40));
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteWebInspectorUI::showCertificate(WebKit::RemoteWebInspectorUI *this, const WebCore::CertificateInfo *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v5 = a2;
  return IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::ShowCertificate>(v2, (uint64_t)&v5, *(void *)(*((void *)this + 2) + 40));
}

IPC::Encoder *WebKit::RemoteWebInspectorUI::setInspectorPageDeveloperExtrasEnabled(WebKit::RemoteWebInspectorUI *this, char a2)
{
  {
    float v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v9);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  char v10 = a2;
  uint64_t v3 = *(void *)(*((void *)this + 5) + 40);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1433;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v11 = v4;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v4, &v10);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::RemoteWebInspectorUI::setInspectorPageDeveloperExtrasEnabled(WebKit::RemoteWebInspectorUI *this, char a2)
{
  return WebKit::RemoteWebInspectorUI::setInspectorPageDeveloperExtrasEnabled((WebKit::RemoteWebInspectorUI *)((char *)this - 24), a2);
}

uint64_t WebKit::RemoteWebInspectorUI::debuggableType(WebKit::RemoteWebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 64);
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::debuggableType(WebKit::RemoteWebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 40);
}

uint64_t WebKit::RemoteWebInspectorUI::targetPlatformName@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 72);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::targetPlatformName@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 48);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WebKit::RemoteWebInspectorUI::targetBuildVersion@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 80);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::targetBuildVersion@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 56);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WebKit::RemoteWebInspectorUI::targetProductVersion@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 88);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::targetProductVersion@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 64);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WebKit::RemoteWebInspectorUI::targetIsSimulator(WebKit::RemoteWebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 96);
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::targetIsSimulator(WebKit::RemoteWebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 72);
}

uint64_t WebKit::RemoteWebInspectorUI::supportsDiagnosticLogging(WebKit::RemoteWebInspectorUI *this)
{
  return (*(unsigned __int8 *)(*(void *)(*(void *)(*((void *)this + 5) + 48) + 112) + 679) >> 5) & 1;
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::supportsDiagnosticLogging(WebKit::RemoteWebInspectorUI *this)
{
  return (*(unsigned __int8 *)(*(void *)(*(void *)(*((void *)this + 2) + 48) + 112) + 679) >> 5) & 1;
}

WTF::StringImpl *WebKit::RemoteWebInspectorUI::logDiagnosticEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = WebCore::Page::diagnosticLoggingClient(*(WebCore::Page **)(*(void *)(a1 + 40) + 48));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t, void))(*(void *)v5 + 32))(v5, a2, &v8, a3, 0);
  uint64_t result = v8;
  float v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *non-virtual thunk to'WebKit::RemoteWebInspectorUI::logDiagnosticEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::RemoteWebInspectorUI::logDiagnosticEvent(a1 - 24, a2, a3);
}

WTF::StringImpl *WebKit::RemoteWebInspectorUI::setDiagnosticLoggingAvailable(WebKit::RemoteWebInspectorUI *this, char a2)
{
  v9[1] = *(_DWORD **)MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 112) = a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned __int8 *)this + 112));
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v7, v9, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v3);
  uint64_t v5 = v9[0];
  v9[0] = 0;
  if (v5)
  {
    if (*v5 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v5;
    }
  }
  uint64_t result = v8;
  float v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::RemoteWebInspectorUI::frontendPage(WebKit::RemoteWebInspectorUI *this)
{
  return *(void *)(*((void *)this + 5) + 48);
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::frontendPage(WebKit::RemoteWebInspectorUI *this)
{
  return *(void *)(*((void *)this + 2) + 48);
}

uint64_t WebKit::RemoteWebInspectorUI::canSave()
{
  return 0;
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::canSave()
{
  return 0;
}

uint64_t WebKit::RemoteWebInspectorUI::canLoad(WebKit::RemoteWebInspectorUI *this)
{
  return 0;
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::canLoad(WebKit::RemoteWebInspectorUI *this)
{
  return 0;
}

uint64_t WebKit::RemoteWebInspectorUI::canPickColorFromScreen(WebKit::RemoteWebInspectorUI *this)
{
  return 0;
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::canPickColorFromScreen(WebKit::RemoteWebInspectorUI *this)
{
  return 0;
}

void WebKit::RemoteWebInspectorUI::localizedStringsURL(void *a1@<X8>)
{
  uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v2 += 2;
  }
  *a1 = v2;
}

void non-virtual thunk to'WebKit::RemoteWebInspectorUI::localizedStringsURL(void *a1@<X8>)
{
  uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v2 += 2;
  }
  *a1 = v2;
}

WebKit::WebInspector *WebKit::WebInspector::WebInspector(WebKit::WebInspector *this, WebKit::WebPage *a2)
{
  *((void *)this + 2) = 0x100000000;
  *(void *)this = &unk_1EE9F1160;
  *((void *)this + 1) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v4 = (atomic_uint *)*((void *)a2 + 3);
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  *((void *)this + 3) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_WORD *)this + 28) = 0;
  return this;
}

void WebKit::WebInspector::~WebInspector(WebKit::WebInspector *this, void *a2)
{
  *(void *)this = &unk_1EE9F1160;
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    IPC::Connection::invalidate(v3);
  }
  WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, a2);
  uint64_t v5 = (atomic_uchar *volatile *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5)
  {
    char v6 = 0;
    atomic_uchar *volatile v7 = *v5;
    atomic_compare_exchange_strong_explicit(*v5, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (v6) {
      MEMORY[0x19972E8D0](v7);
    }
    uint64_t v8 = *((void *)v7 + 1);
    uint64_t v9 = v8 - 1;
    *((void *)v7 + 1) = v8 - 1;
    if (v8 == 1)
    {
      uint64_t v15 = *((void *)v7 + 2);
      uint64_t v11 = *((void *)v7 + 3);
      *((void *)v7 + 3) = 0;
      BOOL v10 = v15 == 0;
    }
    else
    {
      BOOL v10 = 0;
      uint64_t v11 = 0;
    }
    int v12 = 1;
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 == 1)
    {
      if (v9) {
        goto LABEL_12;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
      if (v9) {
        goto LABEL_12;
      }
    }
    uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v13 = &unk_1EE9B37E8;
    *(void *)(v13 + 8) = v7;
    *(void *)(v13 + ++*(_DWORD *)(this + 16) = v11;
    *(unsigned char *)(v13 + 24) = v10;
    uint64_t v16 = v13;
    WTF::ensureOnMainRunLoop();
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
LABEL_12:
  unint64_t v14 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v14 && atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, v4);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebInspector::~WebInspector(this, a2);
  if (atomic_load((unsigned int *)(v2 + 16)))
  {
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + ++*(_DWORD *)(this + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
}

BOOL WebKit::WebInspector::canAttachWindow(WebKit::WebInspector *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    uint64_t v3 = v2 - 16;
    if (v2) {
      uint64_t v4 = v2 - 16;
    }
    else {
      uint64_t v4 = 0;
    }
    if (!*(void *)(v4 + 48)) {
      return 0;
    }
  }
  else
  {
    if (!MEMORY[0x30]) {
      return 0;
    }
    uint64_t v3 = 0;
  }
  if (*(void *)(v3 + 472) || *(void *)(v3 + 480)) {
    return 0;
  }
  if (*((unsigned char *)this + 56)) {
    return 1;
  }
  uint64_t v6 = *(void *)(v1 + 8);
  if (v6) {
    uint64_t v7 = v6 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 48) + 160);
  if (v8) {
    BOOL v9 = *(unsigned char *)(v8 + 144) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9) {
    return 0;
  }
  unint64_t v10 = (*(uint64_t (**)(void))(*(void *)(*(void *)(v8 + 288) + 64) + 488))();
  uint64_t v11 = *(void *)(v8 + 288);
  unint64_t v12 = HIDWORD(v10);
  unsigned int v13 = (*(uint64_t (**)(uint64_t))(*(void *)(v11 + 64) + 488))(v11 + 64);
  return (float)((float)v12 * 0.75) > 0xF9 && v13 > 0x1F3;
}

uint64_t WebKit::WebInspector::setFrontendConnection(uint64_t a1, WTF::MachSendRight *this)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t result = IPC::Connection::invalidate(result);
    uint64_t v5 = *(atomic_uchar *volatile **)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v5)
    {
      char v6 = 0;
      atomic_uchar *volatile v7 = *v5;
      atomic_compare_exchange_strong_explicit(*v5, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
      if (v6) {
        uint64_t result = MEMORY[0x19972E8D0](v7);
      }
      uint64_t v8 = *((void *)v7 + 1);
      uint64_t v9 = v8 - 1;
      *((void *)v7 + 1) = v8 - 1;
      if (v8 == 1)
      {
        uint64_t v34 = *((void *)v7 + 2);
        uint64_t v11 = *((void *)v7 + 3);
        *((void *)v7 + 3) = 0;
        BOOL v10 = v34 == 0;
      }
      else
      {
        BOOL v10 = 0;
        uint64_t v11 = 0;
      }
      int v12 = 1;
      atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 == 1)
      {
        if (v9) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t result = WTF::Lock::unlockSlow((WTF::Lock *)v7);
        if (v9) {
          goto LABEL_11;
        }
      }
      uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v13 = &unk_1EE9B37E8;
      *(void *)(v13 + 8) = v7;
      *(void *)(v13 + ++*(_DWORD *)(this + 16) = v11;
      *(unsigned char *)(v13 + 24) = v10;
      uint64_t v39 = v13;
      WTF::ensureOnMainRunLoop();
      uint64_t result = v39;
      uint64_t v39 = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
LABEL_11:
  if ((*(_DWORD *)this - 1) > 0xFFFFFFFD) {
    return result;
  }
  int v36 = WTF::MachSendRight::leakSendRight(this);
  object = 0;
  IPC::Connection::createClientConnection((uint64_t)&v36, (mach_port_context_t *)&v38);
  unint64_t v14 = v38;
  uint64_t v38 = 0;
  uint64_t v15 = *(atomic_uchar *volatile **)(a1 + 32);
  *(void *)(a1 + 32) = v14;
  if (v15)
  {
    char v16 = 0;
    atomic_uchar *volatile v17 = *v15;
    atomic_compare_exchange_strong_explicit(*v15, (unsigned __int8 *)&v16, 1u, memory_order_acquire, memory_order_acquire);
    if (v16) {
      MEMORY[0x19972E8D0](v17);
    }
    uint64_t v18 = *((void *)v17 + 1);
    uint64_t v19 = v18 - 1;
    *((void *)v17 + 1) = v18 - 1;
    if (v18 == 1)
    {
      uint64_t v35 = *((void *)v17 + 2);
      uint64_t v21 = *((void *)v17 + 3);
      *((void *)v17 + 3) = 0;
      BOOL v20 = v35 == 0;
    }
    else
    {
      BOOL v20 = 0;
      uint64_t v21 = 0;
    }
    int v22 = 1;
    atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
    if (v22 == 1)
    {
      if (!v19) {
        goto LABEL_19;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v17);
      if (!v19)
      {
LABEL_19:
        uint64_t v23 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v23 = &unk_1EE9B37E8;
        *(void *)(v23 + 8) = v17;
        *(void *)(v23 + ++*(_DWORD *)(this + 16) = v21;
        *(unsigned char *)(v23 + 24) = v20;
        uint64_t v39 = v23;
        WTF::ensureOnMainRunLoop();
        uint64_t v24 = v39;
        uint64_t v39 = 0;
        if (v24) {
          (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
        }
      }
    }
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v38);
  int v25 = (WTF::RunLoop *)object;
  if (object) {
    os_release(object);
  }
  int v26 = *(IPC::Connection **)(a1 + 32);
  uint64_t v27 = (_OWORD *)WTF::RunLoop::current(v25);
  IPC::Connection::open(v26, a1, v27);
  uint64_t v30 = *(uint64_t **)(a1 + 40);
  uint64_t v28 = a1 + 40;
  uint64_t v29 = v30;
  uint64_t v31 = *(unsigned int *)(v28 + 12);
  if (v31)
  {
    uint64_t v32 = 8 * v31;
    do
    {
      uint64_t v33 = *v29++;
      (*(void (**)(uint64_t))(*(void *)v33 + 16))(v33);
      v32 -= 8;
    }
    while (v32);
  }
  return WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v28, 0);
}

uint64_t WebKit::WebInspector::closeFrontendConnection(WebKit::WebInspector *this)
{
  {
    char v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v16);
  }
  uint64_t v2 = *(void *)(*((void *)this + 3) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  IPC::Connection::send<Messages::WebInspectorUIProxy::DidClose>(*(void *)(WebKit::WebProcess::singleton(void)::process + 40), *(void *)(v3 + 40));
  uint64_t v4 = *((void *)this + 4);
  if (v4)
  {
    IPC::Connection::invalidate(v4);
    uint64_t v5 = (atomic_uchar *volatile *)*((void *)this + 4);
    *((void *)this + 4) = 0;
    if (v5)
    {
      char v6 = 0;
      atomic_uchar *volatile v7 = *v5;
      atomic_compare_exchange_strong_explicit(*v5, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
      if (v6) {
        MEMORY[0x19972E8D0](v7);
      }
      uint64_t v8 = *((void *)v7 + 1);
      uint64_t v9 = v8 - 1;
      *((void *)v7 + 1) = v8 - 1;
      if (v8 == 1)
      {
        uint64_t v15 = *((void *)v7 + 2);
        uint64_t v11 = *((void *)v7 + 3);
        *((void *)v7 + 3) = 0;
        BOOL v10 = v15 == 0;
      }
      else
      {
        BOOL v10 = 0;
        uint64_t v11 = 0;
      }
      int v12 = 1;
      atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 == 1)
      {
        if (v9) {
          goto LABEL_15;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v7);
        if (v9) {
          goto LABEL_15;
        }
      }
      uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v13 = &unk_1EE9B37E8;
      *(void *)(v13 + 8) = v7;
      *(void *)(v13 + ++*(_DWORD *)(this + 16) = v11;
      *(unsigned char *)(v13 + 24) = v10;
      uint64_t v17 = v13;
      WTF::ensureOnMainRunLoop();
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
    }
  }
LABEL_15:
  uint64_t result = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 40, 0);
  *((_WORD *)this + 28) = 0;
  return result;
}

unint64_t WebKit::WebInspector::whenFrontendConnectionEstablished(unint64_t result, unint64_t a2)
{
  if (*(void *)(result + 32))
  {
    uint64_t v2 = *(uint64_t (**)(void))(**(void **)a2 + 16);
    return v2();
  }
  else
  {
    unint64_t v3 = result;
    uint64_t v4 = *(unsigned int *)(result + 52);
    if (v4 == *(_DWORD *)(result + 48))
    {
      uint64_t result = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result + 40, v4 + 1, a2);
      uint64_t v4 = *(unsigned int *)(v3 + 52);
      int v5 = v4 + 1;
      uint64_t v6 = *(void *)(v3 + 40);
      uint64_t v7 = *(void *)result;
      *(void *)uint64_t result = 0;
    }
    else
    {
      int v5 = v4 + 1;
      uint64_t v6 = *(void *)(result + 40);
      uint64_t v7 = *(void *)a2;
      *(void *)a2 = 0;
    }
    *(void *)(v6 + 8 * v4) = v7;
    *(_DWORD *)(v3 + 52) = v5;
  }
  return result;
}

uint64_t WebKit::WebInspector::show(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = *(void *)(v3 + 48);
    if (v4) {
      return WebCore::InspectorController::show(*(WebCore::InspectorController **)(v4 + 80));
    }
  }
  return this;
}

WebKit::WebInspector *WebKit::WebInspector::close(WebKit::WebInspector *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 3) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  if (*(void *)(v2 + 48))
  {
    if (*((void *)this + 4)) {
      return (WebKit::WebInspector *)WebKit::WebInspector::closeFrontendConnection(this);
    }
  }
  return this;
}

uint64_t WebKit::WebInspector::evaluateScriptForTest(uint64_t this, const WTF::String *a2)
{
  uint64_t v2 = *(void *)(this + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      uint64_t v4 = v3 - 16;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void *)(v4 + 48);
    if (v5) {
      return MEMORY[0x1F416F658](*(void *)(v5 + 80), a2);
    }
  }
  return this;
}

void *WebKit::WebInspector::showConsole(void *this)
{
  uint64_t v1 = this[3];
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = *(void *)(v3 + 48);
    if (v4)
    {
      unint64_t v5 = (unint64_t)this;
      WebCore::InspectorController::show(*(WebCore::InspectorController **)(v4 + 80));
      uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v6 = &unk_1EE9F1798;
      v6[1] = v5;
      uint64_t v7 = v6;
      WebKit::WebInspector::whenFrontendConnectionEstablished(v5, (unint64_t)&v7);
      this = v7;
      uint64_t v7 = 0;
      if (this) {
        return (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
    }
  }
  return this;
}

void *WebKit::WebInspector::showResources(void *this)
{
  uint64_t v1 = this[3];
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = *(void *)(v3 + 48);
    if (v4)
    {
      unint64_t v5 = (unint64_t)this;
      WebCore::InspectorController::show(*(WebCore::InspectorController **)(v4 + 80));
      uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v6 = &unk_1EE9F17C0;
      v6[1] = v5;
      uint64_t v7 = v6;
      WebKit::WebInspector::whenFrontendConnectionEstablished(v5, (unint64_t)&v7);
      this = v7;
      uint64_t v7 = 0;
      if (this) {
        return (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
    }
  }
  return this;
}

WTF::StringImpl *WebKit::WebInspector::showMainResourceForFrame(unint64_t a1, uint64_t a2, uint64_t a3)
{
  {
    uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  uint64_t result = (WTF::StringImpl *)WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a2, a3);
  if (result)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      uint64_t v7 = v6 ? v6 - 16 : 0;
      uint64_t v8 = *(void *)(v7 + 48);
      if (v8)
      {
        WebCore::InspectorController::show(*(WebCore::InspectorController **)(v8 + 80));
        uint64_t v9 = *(void *)(*(void *)(a1 + 24) + 8);
        if (v9) {
          uint64_t v10 = v9 - 16;
        }
        else {
          uint64_t v10 = 0;
        }
        WebCore::InspectorController::ensurePageAgent(*(WebCore::InspectorController **)(*(void *)(v10 + 48) + 80));
        WebCore::InspectorPageAgent::frameId();
        uint64_t v11 = v17;
        if (v17) {
          *(_DWORD *)v17 += 2;
        }
        int v12 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v12 = &unk_1EE9F17E8;
        v12[1] = a1;
        void v12[2] = v11;
        char v16 = v12;
        WebKit::WebInspector::whenFrontendConnectionEstablished(a1, (unint64_t)&v16);
        unint64_t v14 = v16;
        char v16 = 0;
        if (v14) {
          (*(void (**)(void *))(*v14 + 8))(v14);
        }
        uint64_t result = v17;
        uint64_t v17 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

void *WebKit::WebInspector::startPageProfiling(void *this)
{
  uint64_t v1 = this[3];
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = *(void *)(v3 + 48);
    if (v4)
    {
      unint64_t v5 = (unint64_t)this;
      WebCore::InspectorController::show(*(WebCore::InspectorController **)(v4 + 80));
      uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v6 = &unk_1EE9F1810;
      v6[1] = v5;
      uint64_t v7 = v6;
      WebKit::WebInspector::whenFrontendConnectionEstablished(v5, (unint64_t)&v7);
      this = v7;
      uint64_t v7 = 0;
      if (this) {
        return (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
    }
  }
  return this;
}

void *WebKit::WebInspector::stopPageProfiling(void *this)
{
  uint64_t v1 = this[3];
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = *(void *)(v3 + 48);
    if (v4)
    {
      unint64_t v5 = (unint64_t)this;
      WebCore::InspectorController::show(*(WebCore::InspectorController **)(v4 + 80));
      uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v6 = &unk_1EE9F1838;
      v6[1] = v5;
      uint64_t v7 = v6;
      WebKit::WebInspector::whenFrontendConnectionEstablished(v5, (unint64_t)&v7);
      this = v7;
      uint64_t v7 = 0;
      if (this) {
        return (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
    }
  }
  return this;
}

void *WebKit::WebInspector::startElementSelection(void *this)
{
  uint64_t v1 = *(void *)(this[3] + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  if (*(void *)(v2 + 48))
  {
    unint64_t v3 = (unint64_t)this;
    uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v4 = &unk_1EE9F1860;
    v4[1] = v3;
    unint64_t v5 = v4;
    WebKit::WebInspector::whenFrontendConnectionEstablished(v3, (unint64_t)&v5);
    this = v5;
    unint64_t v5 = 0;
    if (this) {
      return (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
    }
  }
  return this;
}

void *WebKit::WebInspector::stopElementSelection(void *this)
{
  uint64_t v1 = *(void *)(this[3] + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  if (*(void *)(v2 + 48))
  {
    unint64_t v3 = (unint64_t)this;
    uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v4 = &unk_1EE9F1888;
    v4[1] = v3;
    unint64_t v5 = v4;
    WebKit::WebInspector::whenFrontendConnectionEstablished(v3, (unint64_t)&v5);
    this = v5;
    unint64_t v5 = 0;
    if (this) {
      return (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
    }
  }
  return this;
}

void WebKit::WebInspectorClient::~WebInspectorClient(WebKit::WebInspectorClient *this, void *a2)
{
  *(void *)this = &unk_1EE9F11B0;
  *((void *)this + 1) = &unk_1EE9F1280;
  unint64_t v3 = (WebCore::GraphicsLayer **)*((void *)this + 6);
  if (v3)
  {
    uint64_t v4 = *((unsigned int *)v3 - 1);
    unint64_t v5 = &v3[v4];
    if (*((_DWORD *)v3 - 3))
    {
      uint64_t v6 = v3;
      if (v4)
      {
        uint64_t v7 = 8 * v4;
        uint64_t v6 = v3;
        while ((unint64_t)*v6 + 1 <= 1)
        {
          ++v6;
          v7 -= 8;
          if (!v7)
          {
            uint64_t v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    uint64_t v6 = &v3[v4];
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
  }
  unint64_t v5 = &v3[v4];
  if (v3)
  {
LABEL_8:
    uint64_t v8 = &v3[*((unsigned int *)v3 - 1)];
    goto LABEL_13;
  }
  uint64_t v8 = 0;
LABEL_13:
  if (v8 != v6)
  {
    do
    {
      uint64_t v9 = v6 + 1;
      WebCore::GraphicsLayer::removeFromParent(*v6);
      uint64_t v6 = v5;
      if (v9 != v5)
      {
        uint64_t v6 = v9;
        while ((unint64_t)*v6 + 1 <= 1)
        {
          if (++v6 == v5)
          {
            uint64_t v6 = v5;
            break;
          }
        }
      }
    }
    while (v6 != v8);
    unint64_t v3 = (WebCore::GraphicsLayer **)*((void *)this + 6);
  }
  if (v3)
  {
    *((void *)this + 6) = 0;
    WTF::HashTable<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::deallocateTable((_DWORD **)v3, a2);
  }
  if (*((void *)this + 4))
  {
    uint64_t v10 = *((void *)this + 2);
    if (v10)
    {
      uint64_t v11 = *(void *)(v10 + 8);
      if (v11)
      {
        CFRetain(*(CFTypeRef *)(v11 - 8));
        if (*(void *)(v11 + 32)) {
          WebCore::PageOverlayController::uninstallPageOverlay();
        }
        CFRelease(*(CFTypeRef *)(v11 - 8));
      }
    }
  }
  int v12 = (_DWORD **)*((void *)this + 6);
  if (v12) {
    WTF::HashTable<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::deallocateTable(v12, a2);
  }
  uint64_t v13 = (WTF *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v13) {
    WTF::fastFree(v13, a2);
  }
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v14) {
    WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v14 + 8));
  }
  uint64_t v15 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v15 && atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, a2);
  }
  char v16 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v16)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, a2);
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebInspectorClient::~WebInspectorClient(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::WebInspectorClient::~WebInspectorClient(WebKit::WebInspectorClient *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebInspectorClient::~WebInspectorClient((WebKit::WebInspectorClient *)((char *)this - 8), a2);

  WTF::fastFree(v2, v3);
}

void WebKit::WebInspectorClient::inspectedPageDestroyed(WebKit::WebInspectorClient *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      if (!*(unsigned char *)(v2 + 170))
      {
        unint64_t v3 = *(atomic_uint **)(v2 + 448);
        if (v3)
        {
          atomic_fetch_add(v3 + 5, 1u);
          WebKit::WebInspector::close((WebKit::WebInspector *)v3);
          if (atomic_fetch_add(v3 + 5, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v3 + 5);
            (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
          }
        }
      }
      uint64_t v4 = *(const void **)(v2 - 8);
      CFRelease(v4);
    }
  }
}

void WebKit::WebInspectorClient::frontendCountChanged(WebKit::WebInspectorClient *this, int a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      WebKit::WebPage::inspectorFrontendCountChanged((WebKit::WebPage *)(v3 - 16), a2);
      unint64_t v5 = *(const void **)(v3 - 8);
      CFRelease(v5);
    }
  }
}

uint64_t WebKit::WebInspectorClient::openLocalFrontend(WebKit::WebInspectorClient *this, WebCore::InspectorController *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      unint64_t v5 = (WebKit::WebInspector *)WebKit::WebPage::inspector(v3 - 16, 1);
      char isUnderTest = WebCore::InspectorController::isUnderTest(a2);
      {
        int v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v22);
      }
      uint64_t v7 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
      BOOL canAttachWindow = WebKit::WebInspector::canAttachWindow(v5);
      uint64_t v9 = *(void *)(*((void *)v5 + 3) + 8);
      if (v9) {
        uint64_t v10 = v9 - 16;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = *(void *)(v10 + 40);
      int v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)int v12 = 1807;
      *((void *)v12 + 1) = v11;
      *((void *)v12 + 66) = (char *)v12 + 16;
      *((void *)v12 + 67) = 512;
      *((void *)v12 + 68) = 0;
      *((void *)v12 + 70) = 0;
      *((void *)v12 + 69) = 0;
      IPC::Encoder::encodeHeader(v12);
      uint64_t v23 = v12;
      uint64_t v13 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1);
      if (!v14)
      {
        __break(0xC471u);
        JUMPOUT(0x19915C6C4);
      }
      *uint64_t v13 = canAttachWindow;
      uint64_t v15 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1);
      if (!v16)
      {
        __break(0xC471u);
        JUMPOUT(0x19915C6E4);
      }
      *uint64_t v15 = isUnderTest;
      IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v23, 0, 0);
      uint64_t v18 = v23;
      uint64_t v23 = 0;
      if (v18)
      {
        IPC::Encoder::~Encoder(v18, v17);
        WTF::fastFree(v20, v21);
      }
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
  return 0;
}

void WebKit::WebInspectorClient::bringFrontendToFront(WebKit::WebInspectorClient *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      if (WebKit::WebPage::inspector(v2 - 16, 1))
      {
        uint64_t v3 = WebKit::WebPage::inspector(v2 - 16, 1);
        {
          uint64_t v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v7);
        }
        uint64_t v4 = *(void *)(*(void *)(v3 + 24) + 8);
        if (v4) {
          uint64_t v5 = v4 - 16;
        }
        else {
          uint64_t v5 = 0;
        }
        IPC::Connection::send<Messages::WebInspectorUIProxy::BringToFront>(*(void *)(WebKit::WebProcess::singleton(void)::process + 40), *(void *)(v5 + 40));
      }
      uint64_t v6 = *(const void **)(v2 - 8);
      CFRelease(v6);
    }
  }
}

void WebKit::WebInspectorClient::didResizeMainFrame(WebKit::WebInspectorClient *this, WebCore::LocalFrame *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      if (WebKit::WebPage::inspector(v3 - 16, 1))
      {
        uint64_t v4 = (WebKit::WebInspector *)WebKit::WebPage::inspector(v3 - 16, 1);
        if (!*((unsigned char *)v4 + 56))
        {
          uint64_t v5 = v4;
          int canAttachWindow = WebKit::WebInspector::canAttachWindow(v4);
          if (*((unsigned __int8 *)v5 + 57) != canAttachWindow)
          {
            *((unsigned char *)v5 + 57) = canAttachWindow;
            {
              uint64_t v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
              WebKit::WebProcess::WebProcess(v17);
            }
            uint64_t v7 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
            char v18 = canAttachWindow;
            uint64_t v8 = *(void *)(*((void *)v5 + 3) + 8);
            if (v8) {
              uint64_t v9 = v8 - 16;
            }
            else {
              uint64_t v9 = 0;
            }
            uint64_t v10 = *(void *)(v9 + 40);
            uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
            *(_WORD *)uint64_t v11 = 1795;
            *((void *)v11 + 1) = v10;
            *((void *)v11 + 66) = (char *)v11 + 16;
            *((void *)v11 + 67) = 512;
            *((void *)v11 + 68) = 0;
            *((void *)v11 + 70) = 0;
            *((void *)v11 + 69) = 0;
            IPC::Encoder::encodeHeader(v11);
            uint64_t v19 = v11;
            IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v11, &v18);
            IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v19, 0, 0);
            uint64_t v13 = v19;
            uint64_t v19 = 0;
            if (v13)
            {
              IPC::Encoder::~Encoder(v13, v12);
              WTF::fastFree(v15, v16);
            }
          }
        }
      }
      uint64_t v14 = *(const void **)(v3 - 8);
      CFRelease(v14);
    }
  }
}

void WebKit::WebInspectorClient::highlight(WebKit::WebInspectorClient *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      if ((*(unsigned char *)(*(void *)(*(void *)(v2 + 32) + 112) + 664) & 0x10) != 0)
      {
        uint64_t v5 = 0;
        memset(v4, 0, sizeof(v4));
        char v6 = 1;
        long long v8 = 0u;
        long long v9 = 0u;
        long long v7 = 0u;
        char v10 = 1;
        WebCore::InspectorController::getHighlight();
        uint64_t v11 = (char *)v4;
        IPC::MessageSender::send<Messages::WebPageProxy::ShowInspectorHighlight>(v2 + 16, &v11);
        WebCore::InspectorOverlayHighlight::~InspectorOverlayHighlight((WebCore::InspectorOverlayHighlight *)v4, v3);
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void WebKit::WebInspectorClient::hideHighlight(WebKit::WebInspectorClient *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      WebKit::WebPage::hideInspectorHighlight((WebKit::WebPage *)(v2 - 16));
      uint64_t v3 = *(const void **)(v2 - 8);
      CFRelease(v3);
    }
  }
}

void WebKit::WebInspectorClient::showPaintRect(WebKit::WebInspectorClient *this, WTF::StringImpl **a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    return;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return;
  }
  CFRetain(*(CFTypeRef *)(v3 - 8));
  if ((*(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 112) + 664) & 0x10) == 0) {
    goto LABEL_49;
  }
  if (!*((void *)this + 4))
  {
    WebCore::PageOverlay::create();
    char v6 = v54;
    unsigned __int8 v54 = 0;
    uint64_t v7 = *((void *)this + 4);
    *((void *)this + 4) = v6;
    if (v7)
    {
      WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)(v7 + 8));
      long long v8 = v54;
      unsigned __int8 v54 = 0;
      if (v8) {
        WTF::RefCounted<WebCore::PageOverlay>::deref((_DWORD *)v8 + 2);
      }
    }
    WebCore::PageOverlayController::installPageOverlay();
  }
  if (!*((void *)this + 5))
  {
    char v10 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v10 = &unk_1EE9F1648;
    v10[1] = this;
    uint64_t v11 = (WTF *)*((void *)this + 5);
    *((void *)this + 5) = v10;
    if (v11) {
      WTF::fastFree(v11, v9);
    }
  }
  (*(void (**)(void))(**(void **)(v3 + 56) + 232))(*(void *)(v3 + 56));
  WebCore::GraphicsLayer::create();
  WebKit::WebInspectorClient::showPaintRect(WebCore::FloatRect const&)::$_0::operator() const(void)::impl += 2;
  unsigned __int8 v54 = (WTF::StringImpl *)&WebKit::WebInspectorClient::showPaintRect(WebCore::FloatRect const&)::$_0::operator() const(void)::impl;
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(void *)v57 + 40))(v57, &v54);
  uint64_t v13 = v54;
  unsigned __int8 v54 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  LODWORD(v55) = 0;
  unsigned __int8 v54 = 0;
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(void *)v57 + 152))(v57, &v54);
  unsigned __int8 v54 = *a2;
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(void *)v57 + 128))(v57, &v54);
  unsigned __int8 v54 = a2[1];
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(void *)v57 + 160))(v57, &v54);
  unsigned __int8 v54 = (WTF::StringImpl *)0x11040000FF000033;
  (*(void (**)(void))(*(void *)v57 + 256))();
  if (((unint64_t)v54 & 0x8000000000000) != 0)
  {
    long long v49 = (unsigned int *)((unint64_t)v54 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v54 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v49);
      WTF::fastFree((WTF *)v49, v14);
    }
  }
  unsigned __int8 v54 = 0;
  uint64_t v55 = 0;
  char v56 = 5;
  uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
  *(void *)(v15 + 8) = 0;
  *(void *)(v15 + ++*(_DWORD *)(this + 16) = 0;
  *(void *)uint64_t v15 = &unk_1EE9D9608;
  *(_DWORD *)(v15 + 24) = 1065353216;
  uint64_t v53 = v15;
  WebCore::KeyframeValueList::insert();
  uint64_t v16 = v53;
  uint64_t v53 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = WTF::fastMalloc((WTF *)0x20);
  *(void *)(v17 + 8) = 0x3FD0000000000000;
  *(void *)(v17 + ++*(_DWORD *)(this + 16) = 0;
  *(void *)uint64_t v17 = &unk_1EE9D9608;
  *(_DWORD *)(v17 + 24) = 0;
  uint64_t v52 = v17;
  WebCore::KeyframeValueList::insert();
  uint64_t v18 = v52;
  uint64_t v52 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = (WebCore::Animation *)WTF::fastMalloc((WTF *)0x78);
  uint64_t v20 = WebCore::Animation::Animation(v19);
  *(void *)(v20 + 64) = 0x3FD0000000000000;
  *(_DWORD *)(v20 + 112) |= 0x800u;
  uint64_t v21 = v57;
  int v51 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **, _DWORD **, WebCore::Animation *, WTF::StringImpl **, double))(*(void *)v21 + 424))(v21, &v54, &v51, v19, &v50, 0.0);
  uint64_t v23 = v50;
  uint64_t v50 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v22);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  uint64_t v24 = v57;
  int v26 = (uint64_t *)((char *)this + 48);
  uint64_t v25 = *((void *)this + 6);
  if (v25
    || (WTF::HashTable<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::expand((uint64_t *)this + 6),
        (uint64_t v25 = *v26) != 0))
  {
    int v27 = *(_DWORD *)(v25 - 8);
  }
  else
  {
    int v27 = 0;
  }
  uint64_t v28 = 0;
  uint64_t v29 = v57;
  unint64_t v30 = ((unint64_t)v57 + ~((void)v57 << 32)) ^ (((unint64_t)v57 + ~((void)v57 << 32)) >> 22);
  unint64_t v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
  unint64_t v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
  unsigned int v33 = (v32 >> 31) ^ v32;
  for (int i = 1; ; ++i)
  {
    unsigned int v35 = v33 & v27;
    int v36 = (void *)(v25 + 8 * v35);
    unsigned __int32 v37 = (_DWORD *)*v36;
    if (*v36 == -1)
    {
      uint64_t v28 = (void *)(v25 + 8 * v35);
      goto LABEL_34;
    }
    if (!v37) {
      break;
    }
    if (v37 == v57) {
      goto LABEL_47;
    }
LABEL_34:
    unsigned int v33 = i + v35;
  }
  if (v28)
  {
    *uint64_t v28 = 0;
    --*(_DWORD *)(*v26 - 16);
    uint64_t v29 = v57;
    int v36 = v28;
  }
  uint64_t v57 = 0;
  uint64_t v38 = (_DWORD *)*v36;
  void *v36 = v29;
  if (v38)
  {
    if (v38[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v38 + 16))(v38);
    }
    else {
      --v38[2];
    }
  }
  uint64_t v39 = *v26;
  if (*v26) {
    int v40 = *(_DWORD *)(v39 - 12) + 1;
  }
  else {
    int v40 = 1;
  }
  *(_DWORD *)(v39 - 12) = v40;
  uint64_t v41 = *v26;
  if (*v26) {
    int v42 = *(_DWORD *)(v41 - 12);
  }
  else {
    int v42 = 0;
  }
  uint64_t v43 = (*(_DWORD *)(v41 - 16) + v42);
  unint64_t v44 = *(unsigned int *)(v41 - 4);
  if (v44 > 0x400)
  {
    if (v44 <= 2 * v43) {
LABEL_46:
    }
      WTF::HashTable<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::expand((uint64_t *)this + 6);
  }
  else if (3 * v44 <= 4 * v43)
  {
    goto LABEL_46;
  }
LABEL_47:
  uint64_t v45 = WebCore::PageOverlay::layer(*((WebCore::PageOverlay **)this + 4));
  ++v24[2];
  int v51 = v24;
  (*(void (**)(uint64_t, _DWORD **))(*(void *)v45 + 64))(v45, &v51);
  uint64_t v46 = v51;
  int v51 = 0;
  if (v46)
  {
    if (v46[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v46 + 16))(v46);
    }
    else {
      --v46[2];
    }
  }
  WTF::RefCounted<WebCore::Animation>::deref(v19);
  WTF::Vector<std::unique_ptr<WebCore::AnimationValue const>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v47);
  long long v48 = v57;
  uint64_t v57 = 0;
  if (v48)
  {
    if (v48[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v48 + 16))(v48);
    }
    else {
      --v48[2];
    }
  }
LABEL_49:
  CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebInspectorClient::showInspectorIndication(WebKit::WebInspectorClient *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      WebKit::WebPage::showInspectorIndication((WebKit::WebPage *)(v2 - 16));
      uint64_t v3 = *(const void **)(v2 - 8);
      CFRelease(v3);
    }
  }
}

void WebKit::WebInspectorClient::hideInspectorIndication(WebKit::WebInspectorClient *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      WebKit::WebPage::hideInspectorIndication((WebKit::WebPage *)(v2 - 16));
      uint64_t v3 = *(const void **)(v2 - 8);
      CFRelease(v3);
    }
  }
}

void WebKit::WebInspectorClient::didSetSearchingForNode(WebKit::WebInspectorClient *this, int a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      uint64_t v5 = (WebKit::WebPage *)(v3 - 16);
      if (a2) {
        WebKit::WebPage::enableInspectorNodeSearch(v5);
      }
      else {
        WebKit::WebPage::disableInspectorNodeSearch(v5);
      }
      char v6 = *(const void **)(v3 - 8);
      CFRelease(v6);
    }
  }
}

void WebKit::WebInspectorClient::elementSelectionChanged(WebKit::WebInspectorClient *this, char a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      if (WebKit::WebPage::inspector(v3 - 16, 1))
      {
        uint64_t v5 = WebKit::WebPage::inspector(v3 - 16, 1);
        {
          uint64_t v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v16);
        }
        uint64_t v6 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
        char v17 = a2;
        uint64_t v7 = *(void *)(*(void *)(v5 + 24) + 8);
        if (v7) {
          uint64_t v8 = v7 - 16;
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *(void *)(v8 + 40);
        char v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)char v10 = 1803;
        *((void *)v10 + 1) = v9;
        *((void *)v10 + 66) = (char *)v10 + 16;
        *((void *)v10 + 67) = 512;
        *((void *)v10 + 68) = 0;
        *((void *)v10 + 70) = 0;
        *((void *)v10 + 69) = 0;
        IPC::Encoder::encodeHeader(v10);
        uint64_t v18 = v10;
        IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v10, &v17);
        IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v18, 0, 0);
        int v12 = v18;
        uint64_t v18 = 0;
        if (v12)
        {
          IPC::Encoder::~Encoder(v12, v11);
          WTF::fastFree(v14, v15);
        }
      }
      uint64_t v13 = *(const void **)(v3 - 8);
      CFRelease(v13);
    }
  }
}

void WebKit::WebInspectorClient::timelineRecordingChanged(WebKit::WebInspectorClient *this, char a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      if (WebKit::WebPage::inspector(v3 - 16, 1))
      {
        uint64_t v5 = WebKit::WebPage::inspector(v3 - 16, 1);
        {
          uint64_t v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v16);
        }
        uint64_t v6 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
        char v17 = a2;
        uint64_t v7 = *(void *)(*(void *)(v5 + 24) + 8);
        if (v7) {
          uint64_t v8 = v7 - 16;
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *(void *)(v8 + 40);
        char v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)char v10 = 1824;
        *((void *)v10 + 1) = v9;
        *((void *)v10 + 66) = (char *)v10 + 16;
        *((void *)v10 + 67) = 512;
        *((void *)v10 + 68) = 0;
        *((void *)v10 + 70) = 0;
        *((void *)v10 + 69) = 0;
        IPC::Encoder::encodeHeader(v10);
        uint64_t v18 = v10;
        IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v10, &v17);
        IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v18, 0, 0);
        int v12 = v18;
        uint64_t v18 = 0;
        if (v12)
        {
          IPC::Encoder::~Encoder(v12, v11);
          WTF::fastFree(v14, v15);
        }
      }
      uint64_t v13 = *(const void **)(v3 - 8);
      CFRelease(v13);
    }
  }
}

void WebKit::WebInspectorClient::setDeveloperPreferenceOverride(uint64_t a1, char a2, __int16 a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      CFRetain(*(CFTypeRef *)(v4 - 8));
      if (WebKit::WebPage::inspector(v4 - 16, 1))
      {
        uint64_t v7 = WebKit::WebPage::inspector(v4 - 16, 1);
        __int16 v21 = a3;
        {
          uint64_t v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v20);
        }
        uint64_t v8 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
        uint64_t v9 = *(void *)(*(void *)(v7 + 24) + 8);
        if (v9) {
          uint64_t v10 = v9 - 16;
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *(void *)(v10 + 40);
        int v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)int v12 = 1817;
        *((void *)v12 + 1) = v11;
        *((void *)v12 + 66) = (char *)v12 + 16;
        *((void *)v12 + 67) = 512;
        *((void *)v12 + 68) = 0;
        *((void *)v12 + 70) = 0;
        *((void *)v12 + 69) = 0;
        IPC::Encoder::encodeHeader(v12);
        int v22 = v12;
        uint64_t v13 = (unsigned char *)IPC::Encoder::grow(v12, 1uLL, 1);
        if (!v14)
        {
          __break(0xC471u);
          JUMPOUT(0x19915D6ECLL);
        }
        *uint64_t v13 = a2;
        IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(v12, (char *)&v21);
        IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v22, 0, 0);
        uint64_t v16 = v22;
        int v22 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v15);
          WTF::fastFree(v18, v19);
        }
      }
      char v17 = *(const void **)(v4 - 8);
      CFRelease(v17);
    }
  }
}

uint64_t WebKit::WebInspectorClient::willMoveToPage(uint64_t this, WebCore::PageOverlay *a2, WebCore::Page *a3)
{
  if (!a3)
  {
    uint64_t v3 = this;
    this = *(void *)(this + 24);
    *(void *)(v3 + 24) = 0;
    if (this)
    {
      if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)this);
        return WTF::fastFree((WTF *)this, a2);
      }
    }
  }
  return this;
}

uint64_t non-virtual thunk to'WebKit::WebInspectorClient::willMoveToPage(uint64_t this, WebCore::PageOverlay *a2, WebCore::Page *a3)
{
  if (!a3)
  {
    uint64_t v3 = this;
    this = *(void *)(this + 16);
    *(void *)(v3 + ++*(_DWORD *)(this + 16) = 0;
    if (this)
    {
      if (atomic_fetch_add((atomic_uint *volatile)this, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)this);
        return WTF::fastFree((WTF *)this, a2);
      }
    }
  }
  return this;
}

void WebKit::WebInspectorClient::drawRect(WebKit::WebInspectorClient *this, WebCore::PageOverlay *a2, WebCore::GraphicsContext *a3, const WebCore::IntRect *a4)
{
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      CFRetain(*(CFTypeRef *)(v5 - 8));
      WebCore::InspectorController::drawHighlight(*(WebCore::InspectorController **)(*(void *)(v5 + 32) + 80), a3);
      uint64_t v7 = *(const void **)(v5 - 8);
      CFRelease(v7);
    }
  }
}

void non-virtual thunk to'WebKit::WebInspectorClient::drawRect(WebKit::WebInspectorClient *this, WebCore::PageOverlay *a2, WebCore::GraphicsContext *a3, const WebCore::IntRect *a4)
{
}

uint64_t WebKit::WebInspectorClient::mouseEvent()
{
  return 0;
}

uint64_t non-virtual thunk to'WebKit::WebInspectorClient::mouseEvent()
{
  return 0;
}

void WebKit::WebInspectorInterruptDispatcher::~WebInspectorInterruptDispatcher(WebKit::WebInspectorInterruptDispatcher *this, void *a2)
{
  WebKit::SecItemShimProxy::~SecItemShimProxy(this, a2);

  JUMPOUT(0x199740C10);
}

void WebKit::WebInspectorInterruptDispatcher::notifyNeedDebuggerBreak(WebKit::WebInspectorInterruptDispatcher *this)
{
  uint64_t v1 = (atomic_uint *)*MEMORY[0x1E4FB64D8];
  if (*MEMORY[0x1E4FB64D8])
  {
    atomic_fetch_add(v1, 1u);
    JSC::VMTraps::fireTrap((JSC::VMTraps *)(v1 + 16));
    WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref((unsigned int *)v1);
  }
}

WebKit::WebInspectorUI *WebKit::WebInspectorUI::WebInspectorUI(WebKit::WebInspectorUI *this, WebKit::WebPage *a2)
{
  *((void *)this + 2) = 0x100000000;
  *(void *)this = &unk_1EE9F1318;
  *((void *)this + 1) = 0;
  *((void *)this + 3) = &unk_1EE9F14C8;
  *((void *)this + 4) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  uint64_t v4 = (atomic_uint *)*((void *)a2 + 3);
  atomic_fetch_add(v4, 1u);
  *((void *)this + 5) = v4;
  WTF::fastMalloc((WTF *)0x38);
  *((void *)this + 6) = WebCore::InspectorFrontendAPIDispatcher::InspectorFrontendAPIDispatcher();
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((unsigned char *)this + 88) = 0;
  WebKit::DebuggableInfoData::empty((uint64_t)this + 96);
  *((_WORD *)this + 68) = 0;
  *((unsigned char *)this + 138) = 0;
  *(void *)((char *)this + 140) = 0x100000000;
  return this;
}

void WebKit::WebInspectorUI::~WebInspectorUI(WebKit::WebInspectorUI *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (atomic_uchar *volatile *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v6)
  {
    char v7 = 0;
    atomic_uchar *volatile v8 = *v6;
    atomic_compare_exchange_strong_explicit(*v6, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      MEMORY[0x19972E8D0](v8);
    }
    uint64_t v9 = *((void *)v8 + 1);
    uint64_t v10 = v9 - 1;
    *((void *)v8 + 1) = v9 - 1;
    if (v9 == 1)
    {
      uint64_t v21 = *((void *)v8 + 2);
      uint64_t v12 = *((void *)v8 + 3);
      *((void *)v8 + 3) = 0;
      BOOL v11 = v21 == 0;
    }
    else
    {
      BOOL v11 = 0;
      uint64_t v12 = 0;
    }
    int v13 = 1;
    atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 == 1)
    {
      if (v10) {
        goto LABEL_22;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v8);
      if (v10) {
        goto LABEL_22;
      }
    }
    uint64_t v14 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v14 = &unk_1EE9B37E8;
    *(void *)(v14 + 8) = v8;
    *(void *)(v14 + ++*(_DWORD *)(this + 16) = v12;
    *(unsigned char *)(v14 + 24) = v11;
    uint64_t v22 = v14;
    WTF::ensureOnMainRunLoop();
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
  }
LABEL_22:
  uint64_t v15 = *((void *)this + 8);
  if (v15)
  {
    int v16 = *(_DWORD *)(v15 + 8);
    if (!v16)
    {
      __break(0xC471u);
      return;
    }
    *(_DWORD *)(v15 + 8) = v16 - 1;
  }
  char v17 = (WebCore::InspectorFrontendHost *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v17) {
    WTF::RefCounted<WebCore::InspectorFrontendHost>::deref(v17);
  }
  uint64_t v18 = (_DWORD *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v18) {
    WTF::RefCounted<WebCore::InspectorFrontendAPIDispatcher>::deref(v18);
  }
  uint64_t v19 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v19)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, a2);
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 4, a2);
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v20);
}

void non-virtual thunk to'WebKit::WebInspectorUI::~WebInspectorUI(WebKit::WebInspectorUI *this, WTF::StringImpl *a2)
{
}

{
  WebKit::WebInspectorUI::operator delete((WebKit::WebInspectorUI *)((char *)this - 24), a2);
}

double WebKit::WebInspectorUI::operator delete(WebKit::WebInspectorUI *a1, WTF::StringImpl *a2)
{
  WebKit::WebInspectorUI::~WebInspectorUI(a1, a2);
  if (atomic_load((unsigned int *)(v2 + 16)))
  {
    *(void *)(v2 + 144) = 0;
    double result = 0.0;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + ++*(_DWORD *)(this + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
  return result;
}

uint64_t WebKit::WebInspectorUI::establishConnection(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  *(void *)(a1 + 80) = a2;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)a3;
  WTF::String::operator=((uint64_t *)(a1 + 104), (WTF::StringImpl **)(a3 + 8));
  WTF::String::operator=((uint64_t *)(a1 + 112), (WTF::StringImpl **)(a3 + 16));
  WTF::String::operator=((uint64_t *)(a1 + 120), (WTF::StringImpl **)(a3 + 24));
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a3 + 32);
  *(unsigned char *)(a1 + 88) = a4;
  *(_DWORD *)(a1 + 144) = a5;
  WebCore::InspectorFrontendAPIDispatcher::reset(*(WebCore::InspectorFrontendAPIDispatcher **)(a1 + 48));
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  if (v9) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(*(void *)(v10 + 48) + 80);
  if (v11) {
    ++*(_DWORD *)(v11 + 8);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v11;
  if (v12)
  {
    int v13 = *(_DWORD *)(v12 + 8);
    if (!v13)
    {
      uint64_t result = 286;
      __break(0xC471u);
      return result;
    }
    *(_DWORD *)(v12 + 8) = v13 - 1;
  }
  WebCore::InspectorController::setInspectorFrontendClient();

  return WebKit::WebInspectorUI::updateConnection((WebKit::WebInspectorUI *)a1);
}

uint64_t WebKit::WebInspectorUI::updateConnection(WebKit::WebInspectorUI *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (!v2) {
    goto LABEL_10;
  }
  IPC::Connection::invalidate(v2);
  uint64_t v3 = (atomic_uchar *volatile *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (!v3) {
    goto LABEL_10;
  }
  char v4 = 0;
  atomic_uchar *volatile v5 = *v3;
  atomic_compare_exchange_strong_explicit(*v3, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    goto LABEL_30;
  }
  while (1)
  {
    uint64_t v6 = *((void *)v5 + 1);
    uint64_t v7 = v6 - 1;
    *((void *)v5 + 1) = v6 - 1;
    if (v6 == 1)
    {
      uint64_t v35 = *((void *)v5 + 2);
      uint64_t v9 = *((void *)v5 + 3);
      *((void *)v5 + 3) = 0;
      BOOL v8 = v35 == 0;
    }
    else
    {
      BOOL v8 = 0;
      uint64_t v9 = 0;
    }
    int v10 = 1;
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 == 1)
    {
      if (v7) {
        goto LABEL_10;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (v7) {
        goto LABEL_10;
      }
    }
    uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v11 = &unk_1EE9B37E8;
    *(void *)(v11 + 8) = v5;
    *(void *)(v11 + ++*(_DWORD *)(this + 16) = v9;
    *(unsigned char *)(v11 + 24) = v8;
    uint64_t v41 = (IPC::Connection *)v11;
    WTF::ensureOnMainRunLoop();
    uint64_t v12 = v41;
    uint64_t v41 = 0;
    if (v12) {
      (*(void (**)(IPC::Connection *))(*(void *)v12 + 8))(v12);
    }
LABEL_10:
    IPC::Connection::createConnectionIdentifierPair((uint64_t)&v41);
    if (!v44) {
      return std::__optional_destruct_base<IPC::Connection::ConnectionIdentifierPair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41);
    }
    int v38 = (int)v41;
    uint64_t v39 = object;
    if (object) {
      os_retain(object);
    }
    IPC::Connection::createServerConnection((uint64_t)&v38, (mach_port_context_t *)&v40);
    int v13 = v40;
    int v40 = 0;
    uint64_t v14 = (atomic_uchar *volatile *)*((void *)this + 9);
    *((void *)this + 9) = v13;
    if (v14)
    {
      char v15 = 0;
      atomic_uchar *volatile v16 = *v14;
      atomic_compare_exchange_strong_explicit(*v14, (unsigned __int8 *)&v15, 1u, memory_order_acquire, memory_order_acquire);
      if (v15) {
        MEMORY[0x19972E8D0](v16);
      }
      uint64_t v17 = *((void *)v16 + 1);
      uint64_t v18 = v17 - 1;
      *((void *)v16 + 1) = v17 - 1;
      if (v17 == 1)
      {
        uint64_t v36 = *((void *)v16 + 2);
        uint64_t v20 = *((void *)v16 + 3);
        *((void *)v16 + 3) = 0;
        BOOL v19 = v36 == 0;
      }
      else
      {
        BOOL v19 = 0;
        uint64_t v20 = 0;
      }
      int v21 = 1;
      atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
      if (v21 == 1)
      {
        if (v18) {
          goto LABEL_22;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v16);
        if (v18) {
          goto LABEL_22;
        }
      }
      uint64_t v22 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v22 = &unk_1EE9B37E8;
      *(void *)(v22 + 8) = v16;
      *(void *)(v22 + ++*(_DWORD *)(this + 16) = v20;
      *(unsigned char *)(v22 + 24) = v19;
      uint64_t v45 = (IPC::Encoder *)v22;
      WTF::ensureOnMainRunLoop();
      uint64_t v23 = v45;
      uint64_t v45 = 0;
      if (v23) {
        (*(void (**)(IPC::Encoder *))(*(void *)v23 + 8))(v23);
      }
    }
LABEL_22:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v40);
    uint64_t v24 = (WTF::RunLoop *)v39;
    if (v39) {
      os_release(v39);
    }
    uint64_t v25 = (IPC::Connection *)*((void *)this + 9);
    int v26 = (_OWORD *)WTF::RunLoop::current(v24);
    IPC::Connection::open(v25, (uint64_t)this, v26);
    atomic_uchar *volatile v5 = (atomic_uchar *volatile)&qword_1EB35A000;
    {
      unsigned __int32 v37 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v37);
    }
    if (v44) {
      break;
    }
    __break(1u);
LABEL_30:
    MEMORY[0x19972E8D0](v5);
  }
  uint64_t v27 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v28 = *((void *)this + 10);
  uint64_t v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v29 = 1819;
  *((void *)v29 + 1) = v28;
  *((void *)v29 + 66) = (char *)v29 + 16;
  *((void *)v29 + 67) = 512;
  *((void *)v29 + 68) = 0;
  *((void *)v29 + 70) = 0;
  *((void *)v29 + 69) = 0;
  IPC::Encoder::encodeHeader(v29);
  uint64_t v45 = v29;
  IPC::Encoder::addAttachment((uint64_t)v29, (unint64_t)&v43);
  IPC::Connection::sendMessageImpl(v27, (uint64_t *)&v45, 0, 0);
  unint64_t v31 = v45;
  uint64_t v45 = 0;
  if (v31)
  {
    IPC::Encoder::~Encoder(v31, v30);
    WTF::fastFree(v33, v34);
  }
  return std::__optional_destruct_base<IPC::Connection::ConnectionIdentifierPair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41);
}

uint64_t WebKit::WebInspectorUI::windowObjectCleared(WebKit::WebInspectorUI *this)
{
  uint64_t v2 = (WebCore::InspectorFrontendHost *)*((void *)this + 7);
  if (v2) {
    WebCore::InspectorFrontendHost::disconnectClient(v2);
  }
  uint64_t v3 = WTF::fastMalloc((WTF *)0x18);
  WebCore::InspectorFrontendHost::InspectorFrontendHost();
  char v4 = (WebCore::InspectorFrontendHost *)*((void *)this + 7);
  *((void *)this + 7) = v3;
  if (v4)
  {
    char v4 = WTF::RefCounted<WebCore::InspectorFrontendHost>::deref(v4);
    uint64_t v3 = *((void *)this + 7);
  }
  uint64_t v5 = WebCore::mainThreadNormalWorld(v4);

  return MEMORY[0x1F4170050](v3, v5);
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::windowObjectCleared(WebKit::WebInspectorUI *this)
{
  return WebKit::WebInspectorUI::windowObjectCleared((WebKit::WebInspectorUI *)((char *)this - 24));
}

IPC::Encoder *WebKit::WebInspectorUI::frontendLoaded(WebKit::WebInspectorUI *this)
{
  WebCore::InspectorFrontendAPIDispatcher::frontendLoaded(*((WebCore::InspectorFrontendAPIDispatcher **)this + 6));
  WebKit::WebInspectorUI::setDockingUnavailable(this, (WTF::JSONImpl::Value *)*((unsigned __int8 *)this + 136));
  WebKit::WebInspectorUI::setDockSide((uint64_t)this, *((_DWORD *)this + 35));
  WebKit::WebInspectorUI::setIsVisible(this, (WTF::JSONImpl::Value *)*((unsigned __int8 *)this + 137));
  {
    int v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v3 = *((void *)this + 10);
  char v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v4 = 1804;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v12 = v4;
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v12, 0, 0);
  uint64_t v6 = v12;
  uint64_t v12 = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v8, v9);
  }
  {
    uint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  return IPC::Connection::send<Messages::WebInspectorUIProxy::BringToFront>(*(void *)(WebKit::WebProcess::singleton(void)::process + 40), *((void *)this + 10));
}

WTF::StringImpl *WebKit::WebInspectorUI::setDockingUnavailable(WebKit::WebInspectorUI *this, WTF::JSONImpl::Value *a2)
{
  v9[1] = *(_DWORD **)MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 136) = (_BYTE)a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v7, v9, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v3);
  uint64_t v5 = v9[0];
  v9[0] = 0;
  if (v5)
  {
    if (*v5 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v5;
    }
  }
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebInspectorUI::setDockSide(uint64_t a1, int a2)
{
  v14[1] = *(_DWORD **)MEMORY[0x1E4F143B8];
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      *(_DWORD *)(a1 + 140) = a2;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v3 = v13;
      break;
    default:
      *(_DWORD *)(a1 + 140) = a2;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v3 = 0;
      break;
  }
  int v10 = v3;
  WTF::JSONImpl::Value::create((uint64_t *)v14, (WTF::JSONImpl::Value *)&v10, v2);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v11, v14, 1uLL);
  int v13 = 0;
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  uint64_t v5 = v13;
  int v13 = 0;
  if (v5) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v5 + 8))(v5);
  }
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v4);
  uint64_t v7 = v14[0];
  v14[0] = 0;
  if (v7)
  {
    if (*v7 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v7;
    }
  }
  BOOL v8 = v10;
  int v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebInspectorUI::setIsVisible(WebKit::WebInspectorUI *this, WTF::JSONImpl::Value *a2)
{
  v9[1] = *(_DWORD **)MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 137) = (_BYTE)a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(a2);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v7, v9, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v3);
  uint64_t v5 = v9[0];
  v9[0] = 0;
  if (v5)
  {
    if (*v5 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v5;
    }
  }
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebInspectorUI::bringToFront(WebKit::WebInspectorUI *this)
{
  {
    char v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v1 = *((void *)this + 10);
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);

  return IPC::Connection::send<Messages::WebInspectorUIProxy::BringToFront>(v2, v1);
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUI::frontendLoaded(WebKit::WebInspectorUI *this)
{
  return WebKit::WebInspectorUI::frontendLoaded((WebKit::WebInspectorUI *)((char *)this - 24));
}

IPC::Encoder *WebKit::WebInspectorUI::startWindowDrag(WebKit::WebInspectorUI *this)
{
  {
    char v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v1 = *((void *)this + 10);
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);

  return IPC::Connection::send<Messages::WebInspectorUIProxy::StartWindowDrag>(v2, v1);
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUI::startWindowDrag(WebKit::WebInspectorUI *this)
{
  {
    char v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v1 = *((void *)this + 7);
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);

  return IPC::Connection::send<Messages::WebInspectorUIProxy::StartWindowDrag>(v2, v1);
}

uint64_t WebKit::WebInspectorUI::moveWindowBy(WebKit::WebInspectorUI *this, float a2, float a3)
{
  uint64_t v6 = *(void *)(*((void *)this + 5) + 8);
  if (v6) {
    uint64_t v7 = v6 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  WebCore::Chrome::windowRect(*(WebCore::Chrome **)(*(void *)(v7 + 48) + 48));
  v15.m_size.m_width = v8;
  v15.m_size.m_height = v9;
  v15.m_location.m_x = v10 + a2;
  v15.m_location.m_y = v11 + a3;
  uint64_t v12 = *(void *)(*((void *)this + 5) + 8);
  if (v12) {
    uint64_t v13 = v12 - 16;
  }
  else {
    uint64_t v13 = 0;
  }
  return WebCore::Chrome::setWindowRect(*(WebCore::Chrome **)(*(void *)(v13 + 48) + 48), &v15);
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::moveWindowBy(WebKit::WebInspectorUI *this, float a2, float a3)
{
  return WebKit::WebInspectorUI::moveWindowBy((WebKit::WebInspectorUI *)((char *)this - 24), a2, a3);
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUI::bringToFront(WebKit::WebInspectorUI *this)
{
  {
    char v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v1 = *((void *)this + 7);
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);

  return IPC::Connection::send<Messages::WebInspectorUIProxy::BringToFront>(v2, v1);
}

WebCore::InspectorFrontendHost *WebKit::WebInspectorUI::closeWindow(WebKit::WebInspectorUI *this)
{
  {
    atomic_uchar *volatile v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v16);
  }
  IPC::Connection::send<Messages::WebInspectorUIProxy::DidClose>(*(void *)(WebKit::WebProcess::singleton(void)::process + 40), *((void *)this + 10));
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    IPC::Connection::invalidate(v2);
    uint64_t v3 = (atomic_uchar *volatile *)*((void *)this + 9);
    *((void *)this + 9) = 0;
    if (v3)
    {
      char v4 = 0;
      atomic_uchar *volatile v5 = *v3;
      atomic_compare_exchange_strong_explicit(*v3, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
      if (v4) {
        MEMORY[0x19972E8D0](v5);
      }
      uint64_t v6 = *((void *)v5 + 1);
      uint64_t v7 = v6 - 1;
      *((void *)v5 + 1) = v6 - 1;
      if (v6 == 1)
      {
        uint64_t v15 = *((void *)v5 + 2);
        uint64_t v9 = *((void *)v5 + 3);
        *((void *)v5 + 3) = 0;
        BOOL v8 = v15 == 0;
      }
      else
      {
        BOOL v8 = 0;
        uint64_t v9 = 0;
      }
      int v10 = 1;
      atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
      if (v10 == 1)
      {
        if (v7) {
          goto LABEL_12;
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v5);
        if (v7) {
          goto LABEL_12;
        }
      }
      uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v11 = &unk_1EE9B37E8;
      *(void *)(v11 + 8) = v5;
      *(void *)(v11 + ++*(_DWORD *)(this + 16) = v9;
      *(unsigned char *)(v11 + 24) = v8;
      uint64_t v17 = v11;
      WTF::ensureOnMainRunLoop();
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
    }
  }
LABEL_12:
  if (*((void *)this + 8))
  {
    WebCore::InspectorController::setInspectorFrontendClient();
    uint64_t v12 = *((void *)this + 8);
    if (v12)
    {
      int v13 = *(_DWORD *)(v12 + 8);
      if (!v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19915EAF8);
      }
      *(_DWORD *)(v12 + 8) = v13 - 1;
    }
    *((void *)this + 8) = 0;
  }
  uint64_t result = (WebCore::InspectorFrontendHost *)*((void *)this + 7);
  if (result) {
    uint64_t result = (WebCore::InspectorFrontendHost *)WebCore::InspectorFrontendHost::disconnectClient(result);
  }
  *((void *)this + 10) = 0;
  *((unsigned char *)this + 88) = 0;
  return result;
}

WebCore::InspectorFrontendHost *non-virtual thunk to'WebKit::WebInspectorUI::closeWindow(WebKit::WebInspectorUI *this)
{
  return WebKit::WebInspectorUI::closeWindow((WebKit::WebInspectorUI *)((char *)this - 24));
}

IPC::Encoder *WebKit::WebInspectorUI::reopen(WebKit::WebInspectorUI *this)
{
  {
    char v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v1 = *((void *)this + 10);
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);

  return IPC::Connection::send<Messages::WebInspectorUIProxy::Reopen>(v2, v1);
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUI::reopen(WebKit::WebInspectorUI *this)
{
  {
    char v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v1 = *((void *)this + 7);
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);

  return IPC::Connection::send<Messages::WebInspectorUIProxy::Reopen>(v2, v1);
}

IPC::Encoder *WebKit::WebInspectorUI::resetState(WebKit::WebInspectorUI *this)
{
  {
    char v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v1 = *((void *)this + 10);
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);

  return IPC::Connection::send<Messages::WebInspectorUIProxy::ResetState>(v2, v1);
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUI::resetState(WebKit::WebInspectorUI *this)
{
  {
    char v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v1 = *((void *)this + 7);
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);

  return IPC::Connection::send<Messages::WebInspectorUIProxy::ResetState>(v2, v1);
}

IPC::Encoder *WebKit::WebInspectorUI::setForcedAppearance(uint64_t a1, char a2)
{
  {
    int v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  uint64_t v3 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v4 = *(void *)(a1 + 80);
  atomic_uchar *volatile v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)atomic_uchar *volatile v5 = 1818;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v11 = v5;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUI::setForcedAppearance(uint64_t a1, char a2)
{
  return WebKit::WebInspectorUI::setForcedAppearance(a1 - 24, a2);
}

IPC::Encoder *WebKit::WebInspectorUI::effectiveAppearanceDidChange(uint64_t a1, char a2)
{
  {
    int v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  uint64_t v3 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v4 = *(void *)(a1 + 80);
  atomic_uchar *volatile v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)atomic_uchar *volatile v5 = 1802;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v11 = v5;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::WebInspectorUI::userInterfaceLayoutDirection(WebKit::WebInspectorUI *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 5) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(unsigned __int8 *)(*(void *)(v2 + 48) + 1132);
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::userInterfaceLayoutDirection(WebKit::WebInspectorUI *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(unsigned __int8 *)(*(void *)(v2 + 48) + 1132);
}

BOOL WebKit::WebInspectorUI::supportsDockSide(uint64_t a1, unsigned int a2)
{
  return a2 < 4;
}

BOOL non-virtual thunk to'WebKit::WebInspectorUI::supportsDockSide(uint64_t a1, unsigned int a2)
{
  return a2 < 4;
}

IPC::Encoder *WebKit::WebInspectorUI::requestSetDockSide(IPC::Encoder *result, int a2)
{
  {
    int v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  switch(a2)
  {
    case 0:
      uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
      uint64_t v3 = *((void *)result + 10);
      uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      atomic_uchar *volatile v5 = v4;
      __int16 v6 = 1800;
      goto LABEL_7;
    case 1:
      uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
      uint64_t v3 = *((void *)result + 10);
      uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      atomic_uchar *volatile v5 = v4;
      __int16 v6 = 1798;
      goto LABEL_7;
    case 2:
      uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
      uint64_t v3 = *((void *)result + 10);
      uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      atomic_uchar *volatile v5 = v4;
      __int16 v6 = 1797;
      goto LABEL_7;
    case 3:
      uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
      uint64_t v3 = *((void *)result + 10);
      uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      atomic_uchar *volatile v5 = v4;
      __int16 v6 = 1796;
LABEL_7:
      *(_WORD *)uint64_t v4 = v6;
      *((void *)v4 + 1) = v3;
      *((void *)v4 + 66) = (char *)v4 + 16;
      *((void *)v4 + 67) = 512;
      *((void *)v4 + 68) = 0;
      *((void *)v4 + 70) = 0;
      *((void *)v4 + 69) = 0;
      IPC::Encoder::encodeHeader(v4);
      uint64_t v11 = v5;
      IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
      uint64_t result = v11;
      uint64_t v11 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v7);
        uint64_t result = (IPC::Encoder *)WTF::fastFree(v8, v9);
      }
      break;
    default:
      return result;
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUI::requestSetDockSide(uint64_t a1, int a2)
{
  return WebKit::WebInspectorUI::requestSetDockSide((IPC::Encoder *)(a1 - 24), a2);
}

IPC::Encoder *WebKit::WebInspectorUI::changeAttachedWindowHeight(WebKit::WebInspectorUI *this, int a2)
{
  int v10 = a2;
  {
    uint64_t v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v9);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v3 = *((void *)this + 10);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1815;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v11 = v4;
  IPC::Encoder::operator<<<int>(v4, &v10);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUI::changeAttachedWindowHeight(WebKit::WebInspectorUI *this, int a2)
{
  return WebKit::WebInspectorUI::changeAttachedWindowHeight((WebKit::WebInspectorUI *)((char *)this - 24), a2);
}

IPC::Encoder *WebKit::WebInspectorUI::changeAttachedWindowWidth(WebKit::WebInspectorUI *this, int a2)
{
  int v10 = a2;
  {
    uint64_t v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v9);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v3 = *((void *)this + 10);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1816;
  *((void *)v4 + 1) = v3;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v11 = v4;
  IPC::Encoder::operator<<<int>(v4, &v10);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUI::changeAttachedWindowWidth(WebKit::WebInspectorUI *this, int a2)
{
  return WebKit::WebInspectorUI::changeAttachedWindowWidth((WebKit::WebInspectorUI *)((char *)this - 24), a2);
}

IPC::Encoder *WebKit::WebInspectorUI::changeSheetRect(WebKit::WebInspectorUI *this, const WebCore::FloatRect *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  atomic_uchar *volatile v5 = (float *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::SetSheetRect>(v2, &v5, *((void *)this + 10));
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUI::changeSheetRect(WebKit::WebInspectorUI *this, const WebCore::FloatRect *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  atomic_uchar *volatile v5 = (float *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::SetSheetRect>(v2, &v5, *((void *)this + 7));
}

IPC::Encoder *WebKit::WebInspectorUI::openURLExternally(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  atomic_uchar *volatile v5 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::OpenURLExternally>(v2, &v5, *((void *)this + 10));
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUI::openURLExternally(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  atomic_uchar *volatile v5 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::OpenURLExternally>(v2, &v5, *((void *)this + 7));
}

IPC::Encoder *WebKit::WebInspectorUI::revealFileExternally(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  atomic_uchar *volatile v5 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::RevealFileExternally>(v2, &v5, *((void *)this + 10));
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUI::revealFileExternally(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  atomic_uchar *volatile v5 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::RevealFileExternally>(v2, &v5, *((void *)this + 7));
}

IPC::Encoder *WebKit::WebInspectorUI::save(uint64_t a1, uint64_t a2, char a3)
{
  {
    atomic_uchar *volatile v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  uint64_t v3 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v6 = a2;
  char v7 = a3;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::Save>(v3, &v6, *(void *)(a1 + 80));
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUI::save(uint64_t a1, uint64_t a2, char a3)
{
  {
    atomic_uchar *volatile v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  uint64_t v3 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v6 = a2;
  char v7 = a3;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::Save>(v3, &v6, *(void *)(a1 + 56));
}

IPC::Encoder *WebKit::WebInspectorUI::load(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  {
    atomic_uchar *volatile v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  uint64_t v3 = *(os_unfair_lock_s **)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v6 = a2;
  return IPC::Connection::sendWithAsyncReply<Messages::WebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(v3, &v6, a3, *(void *)(a1 + 80));
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUI::load(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  {
    atomic_uchar *volatile v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  uint64_t v3 = *(os_unfair_lock_s **)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v6 = a2;
  return IPC::Connection::sendWithAsyncReply<Messages::WebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(v3, &v6, a3, *(void *)(a1 + 56));
}

IPC::Encoder *WebKit::WebInspectorUI::pickColorFromScreen(uint64_t a1, uint64_t *a2)
{
  {
    atomic_uchar *volatile v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(os_unfair_lock_s **)(WebKit::WebProcess::singleton(void)::process + 40);

  return IPC::Connection::sendWithAsyncReply<Messages::WebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(v3, a2, v2);
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUI::pickColorFromScreen(uint64_t a1, uint64_t *a2)
{
  {
    atomic_uchar *volatile v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(os_unfair_lock_s **)(WebKit::WebProcess::singleton(void)::process + 40);

  return IPC::Connection::sendWithAsyncReply<Messages::WebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(v3, a2, v2);
}

IPC::Encoder *WebKit::WebInspectorUI::inspectedURLChanged(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  atomic_uchar *volatile v5 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::InspectedURLChanged>(v2, &v5, *((void *)this + 10));
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUI::inspectedURLChanged(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  atomic_uchar *volatile v5 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::InspectedURLChanged>(v2, &v5, *((void *)this + 7));
}

IPC::Encoder *WebKit::WebInspectorUI::showCertificate(WebKit::WebInspectorUI *this, const WebCore::CertificateInfo *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  atomic_uchar *volatile v5 = a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::ShowCertificate>(v2, (uint64_t)&v5, *((void *)this + 10));
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUI::showCertificate(WebKit::WebInspectorUI *this, const WebCore::CertificateInfo *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  atomic_uchar *volatile v5 = a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::ShowCertificate>(v2, (uint64_t)&v5, *((void *)this + 7));
}

IPC::Encoder *WebKit::WebInspectorUI::setInspectorPageDeveloperExtrasEnabled(WebKit::WebInspectorUI *this, char a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  char v5 = a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::SetInspectorPageDeveloperExtrasEnabled>(v2, &v5, *((void *)this + 10));
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUI::setInspectorPageDeveloperExtrasEnabled(WebKit::WebInspectorUI *this, char a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  char v5 = a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::SetInspectorPageDeveloperExtrasEnabled>(v2, &v5, *((void *)this + 7));
}

uint64_t WebKit::WebInspectorUI::supportsDiagnosticLogging(WebKit::WebInspectorUI *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 5) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  return (*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 48) + 112) + 679) >> 5) & 1;
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::supportsDiagnosticLogging(WebKit::WebInspectorUI *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  return (*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 48) + 112) + 679) >> 5) & 1;
}

WTF::StringImpl *WebKit::WebInspectorUI::logDiagnosticEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = WebCore::Page::diagnosticLoggingClient(*(WebCore::Page **)(v6 + 48));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t, void))(*(void *)v7 + 32))(v7, a2, &v10, a3, 0);
  uint64_t result = v10;
  int v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *non-virtual thunk to'WebKit::WebInspectorUI::logDiagnosticEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::WebInspectorUI::logDiagnosticEvent(a1 - 24, a2, a3);
}

WTF::StringImpl *WebKit::WebInspectorUI::setDiagnosticLoggingAvailable(WebKit::WebInspectorUI *this, char a2)
{
  v9[1] = *(_DWORD **)MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 138) = a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)*((unsigned __int8 *)this + 138));
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v7, v9, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v3);
  uint64_t v5 = v9[0];
  v9[0] = 0;
  if (v5)
  {
    if (*v5 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v5;
    }
  }
  uint64_t result = v8;
  BOOL v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebInspectorUI::showMainResourceForFrame(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  v10[1] = *(_DWORD **)MEMORY[0x1E4F143B8];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((uint64_t *)v10, a2, v3);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v8, v10, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v4);
  uint64_t v6 = v10[0];
  v10[0] = 0;
  if (v6)
  {
    if (*v6 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v6;
    }
  }
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebInspectorUI::startPageProfiling(WebKit::WebInspectorUI *this)
{
  v7[1] = *(_DWORD **)MEMORY[0x1E4F143B8];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v5, v7, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v1);
  uint64_t v3 = v7[0];
  v7[0] = 0;
  if (v3)
  {
    if (*v3 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v3;
    }
  }
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebInspectorUI::stopPageProfiling(WebKit::WebInspectorUI *this)
{
  v7[1] = *(_DWORD **)MEMORY[0x1E4F143B8];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(0);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v5, v7, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v1);
  uint64_t v3 = v7[0];
  v7[0] = 0;
  if (v3)
  {
    if (*v3 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v3;
    }
  }
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebInspectorUI::startElementSelection(WebKit::WebInspectorUI *this)
{
  v7[1] = *(_DWORD **)MEMORY[0x1E4F143B8];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)1);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v5, v7, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v1);
  uint64_t v3 = v7[0];
  v7[0] = 0;
  if (v3)
  {
    if (*v3 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v3;
    }
  }
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebInspectorUI::stopElementSelection(WebKit::WebInspectorUI *this)
{
  v7[1] = *(_DWORD **)MEMORY[0x1E4F143B8];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(0);
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v5, v7, 1uLL);
  WebCore::InspectorFrontendAPIDispatcher::dispatchCommandWithResultAsync();
  WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v1);
  uint64_t v3 = v7[0];
  v7[0] = 0;
  if (v3)
  {
    if (*v3 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*v3;
    }
  }
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebInspectorUI::evaluateInFrontendForTesting(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  return MEMORY[0x1F4171DF0](*((void *)this + 6), a2);
}

uint64_t WebKit::WebInspectorUI::pagePaused(WebKit::WebInspectorUI *this)
{
  return MEMORY[0x1F4171E08](*((void *)this + 6), 0);
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::pagePaused(WebKit::WebInspectorUI *this)
{
  return MEMORY[0x1F4171E08](*((void *)this + 3), 0);
}

uint64_t WebKit::WebInspectorUI::pageUnpaused(WebKit::WebInspectorUI *this)
{
  return MEMORY[0x1F4171E10](*((void *)this + 6));
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::pageUnpaused(WebKit::WebInspectorUI *this)
{
  return MEMORY[0x1F4171E10](*((void *)this + 3));
}

IPC::Encoder *WebKit::WebInspectorUI::sendMessageToBackend(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v5 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::SendMessageToBackend>(v2, &v5, *((void *)this + 10));
}

IPC::Encoder *non-virtual thunk to'WebKit::WebInspectorUI::sendMessageToBackend(WebKit::WebInspectorUI *this, const WTF::String *a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v5 = (uint64_t *)a2;
  return IPC::Connection::send<Messages::WebInspectorUIProxy::SendMessageToBackend>(v2, &v5, *((void *)this + 7));
}

uint64_t WebKit::WebInspectorUI::targetPlatformName@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 104);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::targetPlatformName@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 80);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WebKit::WebInspectorUI::targetBuildVersion@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 112);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::targetBuildVersion@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 88);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WebKit::WebInspectorUI::targetProductVersion@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 120);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::targetProductVersion@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 96);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WebKit::WebInspectorUI::frontendPage(WebKit::WebInspectorUI *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 5) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(void *)(v2 + 48);
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::frontendPage(WebKit::WebInspectorUI *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(void *)(v2 + 48);
}

uint64_t WebKit::WebInspectorUI::canSave()
{
  return 0;
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::canSave()
{
  return 0;
}

uint64_t WebKit::WebInspectorUI::canLoad(WebKit::WebInspectorUI *this)
{
  return 0;
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::canLoad(WebKit::WebInspectorUI *this)
{
  return 0;
}

uint64_t WebKit::WebInspectorUI::canPickColorFromScreen(WebKit::WebInspectorUI *this)
{
  return 0;
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::canPickColorFromScreen(WebKit::WebInspectorUI *this)
{
  return 0;
}

void WebKit::WebInspectorUI::localizedStringsURL(void *a1@<X8>)
{
  uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v2 += 2;
  }
  *a1 = v2;
}

void non-virtual thunk to'WebKit::WebInspectorUI::localizedStringsURL(void *a1@<X8>)
{
  uint64_t v2 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v2 += 2;
  }
  *a1 = v2;
}

uint64_t API::ObjectImpl<(API::Object::Type)135>::type()
{
  return 135;
}

uint64_t WebKit::RemoteWebInspectorUI::isRemote(WebKit::RemoteWebInspectorUI *this)
{
  return 1;
}

uint64_t WebKit::RemoteWebInspectorUI::backendCommandsURL@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 104);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t WebKit::RemoteWebInspectorUI::frontendAPIDispatcher(WebKit::RemoteWebInspectorUI *this)
{
  return *((void *)this + 6);
}

uint64_t WebKit::RemoteWebInspectorUI::diagnosticLoggingAvailable(WebKit::RemoteWebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 112);
}

uint64_t WebKit::RemoteWebInspectorUI::isUnderTest(WebKit::RemoteWebInspectorUI *this)
{
  return 0;
}

uint64_t WebKit::RemoteWebInspectorUI::inspectionLevel(WebKit::RemoteWebInspectorUI *this)
{
  return 1;
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::isRemote(WebKit::RemoteWebInspectorUI *this)
{
  return 1;
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::backendCommandsURL@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(_DWORD **)(this + 80);
  if (v2) {
    *v2 += 2;
  }
  *a2 = v2;
  return this;
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::inspectionLevel(WebKit::RemoteWebInspectorUI *this)
{
  return 1;
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::diagnosticLoggingAvailable(WebKit::RemoteWebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 88);
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::frontendAPIDispatcher(WebKit::RemoteWebInspectorUI *this)
{
  return *((void *)this + 3);
}

uint64_t non-virtual thunk to'WebKit::RemoteWebInspectorUI::isUnderTest(WebKit::RemoteWebInspectorUI *this)
{
  return 0;
}

uint64_t WebKit::WebInspectorClient::overridesShowPaintRects(WebKit::WebInspectorClient *this)
{
  return 1;
}

uint64_t WebKit::WebInspectorClient::paintRectCount(WebKit::WebInspectorClient *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1) {
    return *(unsigned int *)(v1 - 12);
  }
  else {
    return 0;
  }
}

uint64_t WebKit::WebInspectorUI::isRemote(WebKit::WebInspectorUI *this)
{
  return 0;
}

void WebKit::WebInspectorUI::backendCommandsURL(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::WebInspectorUI::debuggableType(WebKit::WebInspectorUI *this)
{
  return 4;
}

uint64_t WebKit::WebInspectorUI::targetIsSimulator(WebKit::WebInspectorUI *this)
{
  return 0;
}

uint64_t WebKit::WebInspectorUI::inspectionLevel(WebKit::WebInspectorUI *this)
{
  return *((unsigned int *)this + 36);
}

uint64_t WebKit::WebInspectorUI::diagnosticLoggingAvailable(WebKit::WebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 138);
}

uint64_t WebKit::WebInspectorUI::frontendAPIDispatcher(WebKit::WebInspectorUI *this)
{
  return *((void *)this + 6);
}

uint64_t WebKit::WebInspectorUI::isUnderTest(WebKit::WebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 88);
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::isRemote(WebKit::WebInspectorUI *this)
{
  return 0;
}

void non-virtual thunk to'WebKit::WebInspectorUI::backendCommandsURL(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::debuggableType(WebKit::WebInspectorUI *this)
{
  return 4;
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::targetIsSimulator(WebKit::WebInspectorUI *this)
{
  return 0;
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::inspectionLevel(WebKit::WebInspectorUI *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::diagnosticLoggingAvailable(WebKit::WebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 114);
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::frontendAPIDispatcher(WebKit::WebInspectorUI *this)
{
  return *((void *)this + 3);
}

uint64_t non-virtual thunk to'WebKit::WebInspectorUI::isUnderTest(WebKit::WebInspectorUI *this)
{
  return *((unsigned __int8 *)this + 64);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::deallocateTable(_DWORD **a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != (_DWORD *)-1)
      {
        WebKit::WebProcess *v4 = 0;
        if (v5)
        {
          if (v5[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v5 + 16))(v5);
          }
          else {
            --v5[2];
          }
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WebKit::RepaintIndicatorLayerClient::notifyAnimationEnded(WebKit::RepaintIndicatorLayerClient *this, const WebCore::GraphicsLayer *a2, const WTF::String *a3)
{
  uint64_t v4 = *((void *)this + 1);
  uint64_t result = WebCore::GraphicsLayer::removeFromParent(a2);
  uint64_t v8 = *(void *)(v4 + 48);
  uint64_t v6 = (uint64_t *)(v4 + 48);
  uint64_t v7 = v8;
  if (v8)
  {
    int v9 = *(_DWORD *)(v7 - 8);
    unint64_t v10 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
    unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    unsigned int v13 = v9 & ((v12 >> 31) ^ v12);
    for (int i = 1; ; ++i)
    {
      uint64_t v15 = v13;
      atomic_uchar *volatile v16 = *(const WebCore::GraphicsLayer **)(v7 + 8 * v13);
      if (v16 != (const WebCore::GraphicsLayer *)-1)
      {
        if (!v16) {
          return result;
        }
        if (v16 == a2) {
          break;
        }
      }
      unsigned int v13 = (v15 + i) & v9;
    }
    if (v15 != *(_DWORD *)(v7 - 4))
    {
      *(void *)(v7 + 8 * v15) = 0;
      if (a2)
      {
        if (*((_DWORD *)a2 + 2) == 1) {
          uint64_t result = (*(uint64_t (**)(const WebCore::GraphicsLayer *))(*(void *)a2 + 16))(a2);
        }
        else {
          --*((_DWORD *)a2 + 2);
        }
      }
      *(void *)(v7 + 8 * v15) = -1;
      ++*(_DWORD *)(*v6 - 16);
      uint64_t v17 = *v6;
      if (*v6) {
        int v18 = *(_DWORD *)(v17 - 12) - 1;
      }
      else {
        int v18 = -1;
      }
      *(_DWORD *)(v17 - 12) = v18;
      uint64_t v19 = *v6;
      if (*v6)
      {
        unsigned int v20 = 6 * *(_DWORD *)(v19 - 12);
        unsigned int v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
        {
          return WTF::HashTable<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::rehash(v6, v21 >> 1);
        }
      }
    }
  }
  return result;
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>>::expand()
{
  if (qword_1EB359E68 && (int v0 = *(_DWORD *)(qword_1EB359E68 - 4)) != 0) {
    return WTF::HashTable<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>>::rehash(v0 << (6 * *(_DWORD *)(qword_1EB359E68 - 12) >= (2 * v0)));
  }
  else {
    return WTF::HashTable<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>>::rehash(8u);
  }
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::InjectedBundleCSSStyleDeclarationHandle,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleDeclaration,WTF::SingleThreadWeakPtrImpl>>>::rehash(unsigned int a1)
{
  uint64_t v2 = qword_1EB359E68;
  if (qword_1EB359E68)
  {
    unsigned int v3 = *(_DWORD *)(qword_1EB359E68 - 4);
    int v4 = *(_DWORD *)(qword_1EB359E68 - 12);
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  uint64_t result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1EB359E68 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *uint64_t result = 0;
  *(_DWORD *)(qword_1EB359E68 - 12) = v4;
  if (v3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v3;
    while (1)
    {
      int v9 = (WTF **)(v2 + 16 * v7);
      unint64_t v10 = *v9;
      if (*v9 != (WTF *)-1)
      {
        if (v10)
        {
          if (qword_1EB359E68) {
            int v14 = *(_DWORD *)(qword_1EB359E68 - 8);
          }
          else {
            int v14 = 0;
          }
          unint64_t v15 = ~(*((void *)v10 + 1) << 32) + *((void *)v10 + 1);
          unint64_t v16 = (v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13);
          unint64_t v17 = (9 * (v16 ^ (v16 >> 8))) ^ ((9 * (v16 ^ (v16 >> 8))) >> 15);
          unsigned int v18 = v14 & (((v17 + ~(v17 << 27)) >> 31) ^ (v17 + ~(v17 << 27)));
          int v19 = 1;
          do
          {
            unsigned int v20 = v18;
            uint64_t v21 = *(void *)(qword_1EB359E68 + 16 * v18);
            unsigned int v18 = (v18 + v19++) & v14;
          }
          while (v21);
          uint64_t v22 = qword_1EB359E68 + 16 * v20;
          uint64_t v23 = *(unsigned int **)(v22 + 8);
          *(void *)(v22 + 8) = 0;
          if (v23 && atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v23);
            WTF::fastFree((WTF *)v23, v6);
          }
          uint64_t v24 = *(WTF **)v22;
          *(void *)uint64_t v22 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1) {
              WTF::fastFree(v24, v6);
            }
            else {
              --*(_DWORD *)v24;
            }
          }
          uint64_t v25 = *v9;
          WTF::StringImpl *v9 = 0;
          *(void *)uint64_t v22 = v25;
          uint64_t v26 = v2 + 16 * v7;
          uint64_t v27 = *(void *)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          *(void *)(v22 + 8) = v27;
          uint64_t v28 = *(unsigned int **)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          if (v28 && atomic_fetch_add((atomic_uint *volatile)v28, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v28);
            WTF::fastFree((WTF *)v28, v6);
          }
          unsigned int v13 = *v9;
          WTF::StringImpl *v9 = 0;
          if (!v13) {
            goto LABEL_25;
          }
          if (*(_DWORD *)v13 == 1) {
            goto LABEL_33;
          }
          --*(_DWORD *)v13;
        }
        else
        {
          uint64_t v11 = v2 + 16 * v7;
          unint64_t v12 = *(unsigned int **)(v11 + 8);
          *(void *)(v11 + 8) = 0;
          if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, v6);
          }
          unsigned int v13 = *v9;
          WTF::StringImpl *v9 = 0;
          if (!v13) {
            goto LABEL_25;
          }
          if (*(_DWORD *)v13 == 1)
          {
LABEL_33:
            WTF::fastFree(v13, v6);
            goto LABEL_25;
          }
          --*(_DWORD *)v13;
        }
      }
LABEL_25:
      if (++v7 == v8) {
        goto LABEL_37;
      }
    }
  }
  if (v2)
  {
LABEL_37:
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  }
  return result;
}

_DWORD *WTF::RefCounted<WebCore::InspectorFrontendAPIDispatcher>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    uint64_t v1 = (WTF *)MEMORY[0x199739320]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

WebCore::InspectorFrontendHost *WTF::RefCounted<WebCore::InspectorFrontendHost>::deref(WebCore::InspectorFrontendHost *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebCore::InspectorFrontendHost::~InspectorFrontendHost(result);
    return (WebCore::InspectorFrontendHost *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t *WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, _DWORD **a2, unint64_t a3)
{
  unsigned int v3 = result;
  *uint64_t result = 0;
  result[1] = 0;
  if (!a3) {
    return v3;
  }
  int v4 = a3;
  if (!(a3 >> 29))
  {
    uint64_t v6 = 8 * a3;
    uint64_t v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    uint64_t *v3 = v7;
    unsigned int v8 = *((_DWORD *)v3 + 3);
    do
    {
      int v9 = *a2++;
      *(void *)(v7 + 8 * v8++) = v9;
      ++*v9;
      v6 -= 8;
    }
    while (v6);
    *((_DWORD *)v3 + 3) = v8;
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>::destruct(*(_DWORD **)a1, (_DWORD **)(*(void *)a1 + 8 * v3));
  }
  int v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_DWORD *WTF::VectorDestructor<true,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>::destruct(_DWORD *result, _DWORD **a2)
{
  if (result != (_DWORD *)a2)
  {
    uint64_t v3 = (_DWORD **)result;
    do
    {
      uint64_t result = *v3;
      uint64_t *v3 = 0;
      if (result)
      {
        if (*result == 1) {
          uint64_t result = (_DWORD *)WTF::JSONImpl::Value::operator delete();
        }
        else {
          --*result;
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::SendMessageToBackend>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1431;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::SetSheetRect>(uint64_t a1, float **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1434;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::OpenURLExternally>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1425;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::RevealFileExternally>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1429;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,0ul,1ul>(IPC::Encoder *a1, unsigned char *a2)
{
  uint64_t v4 = *(void *)a2;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(*(void *)a2 + 12));
  uint64_t v5 = *(unsigned int *)(v4 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)v4;
    uint64_t v7 = 32 * v5;
    do
    {
      IPC::ArgumentCoder<WebCore::InspectorFrontendClientSaveData,void>::encode(a1, v6);
      v6 += 32;
      v7 -= 32;
    }
    while (v7);
  }
  char v8 = a2[8];
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v10)
  {
    *(unsigned char *)unint64_t result = v8;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::RemoteWebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(os_unfair_lock_s *a1, uint64_t **a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *a3;
  *a3 = 0;
  char v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v8 = &unk_1EE9F1748;
  v8[1] = v7;
  uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 1424;
  *((void *)v10 + 1) = a4;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  unint64_t v17 = v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, *a2);
  v16[0] = (uint64_t)v8;
  v16[1] = v9;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v17, v16, 0, 0);
  uint64_t v12 = v16[0];
  v16[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  unint64_t result = v17;
  unint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteWebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F1748;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteWebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F1748;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteWebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v3 + 16))(v3, &v7);
      unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        unint64_t result = v7;
        uint64_t v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v6);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::RemoteWebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(os_unfair_lock_s *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v6 = &unk_1EE9F1770;
  v6[1] = v5;
  uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 1426;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  v14[1] = v7;
  unint64_t v15 = v8;
  v14[0] = (uint64_t)v6;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v15, v14, 0, 0);
  uint64_t v10 = v14[0];
  v14[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  unint64_t result = v15;
  unint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteWebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F1770;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteWebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F1770;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteWebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::Color>>>(a2, v8);
    if (v8[16])
    {
      uint64_t v4 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v4 + 16))(v4, v8);
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      return (unsigned int *)std::optional<std::optional<WebCore::Color>>::~optional((uint64_t)v8, v5);
    }
    else
    {
      std::optional<std::optional<WebCore::Color>>::~optional((uint64_t)v8, v3);
      return IPC::Connection::cancelReply<Messages::RemoteWebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(v2);
    }
  }
  else
  {
    uint64_t v7 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::RemoteWebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(v7);
  }
}

unsigned int *IPC::Connection::cancelReply<Messages::RemoteWebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(uint64_t *a1)
{
  LOBYTE(v4) = 0;
  char v5 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v1 + 16))(v1, &v4);
  unint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v5 && (v4 & 0x8000000000000) != 0)
  {
    unint64_t result = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v3);
    }
  }
  return result;
}

unsigned int *IPC::Decoder::decode<std::tuple<std::optional<WebCore::Color>>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::tuple<std::optional<WebCore::Color>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (unsigned int *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (unsigned int *)v7();
    }
  }
  return result;
}

unsigned int *IPC::ArgumentCoder<std::tuple<std::optional<WebCore::Color>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = (unsigned int *)IPC::Decoder::decode<std::optional<WebCore::Color>>(a1, &v6);
  if (v8)
  {
    unint64_t result = (unsigned int *)IPC::ArgumentCoder<std::tuple<std::optional<WebCore::Color>>,void>::decode<IPC::Decoder,std::optional<WebCore::Color>>((uint64_t)&v6, a2);
    if (v8) {
      BOOL v5 = v7 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5 && (v6 & 0x8000000000000) != 0)
    {
      unint64_t result = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v4);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::optional<WebCore::Color>>,void>::decode<IPC::Decoder,std::optional<WebCore::Color>>@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t result = (uint64_t)a2;
  if (*(unsigned char *)(a1 + 16))
  {
    *a2 = 0;
    a2[8] = 0;
    if (*(unsigned char *)(a1 + 8))
    {
      uint64_t result = WebCore::Color::Color();
      *(unsigned char *)(result + 8) = 1;
    }
    *(unsigned char *)(result + ++*(_DWORD *)(this + 16) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::RemoteWebInspectorUIProxy::ShowCertificate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v5 = 1435;
  *((void *)v5 + 1) = a3;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<__SecTrust *,void>::encode(v5);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::DidClose>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1801;
  *((void *)v4 + 1) = a2;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::BringToFront>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1799;
  *((void *)v4 + 1) = a2;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebInspector::showConsole(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 32);
  uint64_t v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v2 = 1835;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 66) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 68) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 69) = 0;
  IPC::Encoder::encodeHeader(v2);
  char v7 = v2;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
  uint64_t result = v7;
  char v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebInspector::showResources(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 32);
  uint64_t v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v2 = 1837;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 66) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 68) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 69) = 0;
  IPC::Encoder::encodeHeader(v2);
  char v7 = v2;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
  uint64_t result = v7;
  char v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebInspector::showMainResourceForFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F17E8;
  uint64_t v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebInspector::showMainResourceForFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F17E8;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebInspector::showMainResourceForFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 32);
  uint64_t v2 = (uint64_t *)(a1 + 16);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 1836;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v3, v2);
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebInspector::startPageProfiling(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 32);
  uint64_t v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v2 = 1839;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 66) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 68) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 69) = 0;
  IPC::Encoder::encodeHeader(v2);
  char v7 = v2;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
  uint64_t result = v7;
  char v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebInspector::stopPageProfiling(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 32);
  uint64_t v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v2 = 1841;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 66) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 68) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 69) = 0;
  IPC::Encoder::encodeHeader(v2);
  char v7 = v2;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
  uint64_t result = v7;
  char v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebInspector::startElementSelection(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 32);
  uint64_t v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v2 = 1838;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 66) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 68) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 69) = 0;
  IPC::Encoder::encodeHeader(v2);
  char v7 = v2;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
  uint64_t result = v7;
  char v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebInspector::stopElementSelection(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 32);
  uint64_t v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v2 = 1840;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 66) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 68) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 69) = 0;
  IPC::Encoder::encodeHeader(v2);
  char v7 = v2;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v7, 0, 0);
  uint64_t result = v7;
  char v7 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v3);
    return (IPC::Encoder *)WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = (void *)(v4 + 8 * i);
      uint64_t v11 = (_DWORD *)*v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v12 = *a1;
          if (*a1) {
            int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            int v13 = 0;
          }
          unint64_t v14 = ((unint64_t)v11 + ~((void)v11 << 32)) ^ (((unint64_t)v11 + ~((void)v11 << 32)) >> 22);
          unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
          int v18 = 1;
          do
          {
            unsigned int v19 = v17;
            uint64_t v20 = *(void *)(v12 + 8 * v17);
            unsigned int v17 = (v17 + v18++) & v13;
          }
          while (v20);
          uint64_t v21 = (void *)(v12 + 8 * v19);
          *uint64_t v21 = 0;
          uint64_t v22 = (_DWORD *)*v10;
          void *v10 = 0;
          *uint64_t v21 = v22;
          uint64_t v23 = (_DWORD *)*v10;
          void *v10 = 0;
          if (v23)
          {
            if (v23[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v23 + 16))(v23);
            }
            else {
              --v23[2];
            }
          }
        }
        else
        {
          void *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

unsigned int *WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t v1 = (WTF *)MEMORY[0x19972D270]();
    return (unsigned int *)WTF::fastFree(v1, v2);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::StartWindowDrag>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1823;
  *((void *)v4 + 1) = a2;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::Reopen>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1810;
  *((void *)v4 + 1) = a2;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::ResetState>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 1811;
  *((void *)v4 + 1) = a2;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::SetSheetRect>(uint64_t a1, float **a2, uint64_t a3)
{
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 1821;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::OpenURLExternally>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 1808;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::RevealFileExternally>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 1812;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::Save>(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 1813;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,0ul,1ul>(v6, a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::WebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(os_unfair_lock_s *a1, uint64_t **a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *a3;
  *a3 = 0;
  char v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v8 = &unk_1EE9F18B0;
  v8[1] = v7;
  uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 1806;
  *((void *)v10 + 1) = a4;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  unsigned int v17 = v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, *a2);
  v16[0] = (uint64_t)v8;
  v16[1] = v9;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v17, v16, 0, 0);
  uint64_t v12 = v16[0];
  v16[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t result = v17;
  unsigned int v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F18B0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F18B0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebInspectorUIProxy::Load,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v3 + 16))(v3, &v7);
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8)
      {
        uint64_t result = v7;
        uint64_t v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
    }
  }
  else
  {
    int v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v6);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::WebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(os_unfair_lock_s *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  *a2 = 0;
  int v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v6 = &unk_1EE9F18D8;
  v6[1] = v5;
  uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v8 = 1809;
  *((void *)v8 + 1) = a3;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  v14[1] = v7;
  unint64_t v15 = v8;
  v14[0] = (uint64_t)v6;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v15, v14, 0, 0);
  uint64_t v10 = v14[0];
  v14[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v15;
  unint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F18D8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F18D8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::Color>>>(a2, v8);
    if (v8[16])
    {
      uint64_t v4 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v4 + 16))(v4, v8);
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      return (unsigned int *)std::optional<std::optional<WebCore::Color>>::~optional((uint64_t)v8, v5);
    }
    else
    {
      std::optional<std::optional<WebCore::Color>>::~optional((uint64_t)v8, v3);
      return IPC::Connection::cancelReply<Messages::RemoteWebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(v2);
    }
  }
  else
  {
    uint64_t v7 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::RemoteWebInspectorUIProxy::PickColorFromScreen,WTF::CompletionHandler<void ()(std::optional<WebCore::Color> const&)>>(v7);
  }
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::InspectedURLChanged>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 1805;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::ShowCertificate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1822;
  *((void *)v5 + 1) = a3;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<__SecTrust *,void>::encode(v5);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::SetInspectorPageDeveloperExtrasEnabled>(uint64_t a1, char *a2, uint64_t a3)
{
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 1820;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::WebInspectorUIProxy::SendMessageToBackend>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 1814;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v6, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void WebKit::WebPageInspectorTarget::~WebPageInspectorTarget(WebKit::WebPageInspectorTarget *this)
{
  uint64_t v4 = (WTF *)*((void *)this + 5);
  uint64_t v2 = (void *)((char *)this + 40);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<WebKit::WebPageInspectorTargetFrontendChannel>::operator()[abi:sn180100]((int)v2, v3);
  }

  Inspector::InspectorTarget::~InspectorTarget(this, v3);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebPageInspectorTarget::~WebPageInspectorTarget(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebPageInspectorTarget::identifier@<X0>(WebKit::WebPageInspectorTarget *this@<X0>, void *a2@<X8>)
{
  return WTF::makeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)"page-", 6, *(void *)(*((void *)this + 4) + 40), a2);
}

WTF **WebKit::WebPageInspectorTarget::connect(WTF **result, char a2)
{
  uint64_t v2 = result + 5;
  if (!result[5])
  {
    uint64_t v4 = result;
    uint64_t v5 = result[4];
    unint64_t v6 = *((void *)v5 + 5);
    v11[0] = (uint64_t)"page-";
    v11[1] = 6;
    unint64_t v10 = v6;
    uint64_t result = (WTF **)WTF::tryMakeString<WTF::ASCIILiteral,unsigned long long>(v11, &v10, &v9);
    if (v9)
    {
      uint64_t v7 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v7 = &unk_1EE9F1950;
      *(void *)(v7 + 8) = v5;
      uint64_t result = (WTF **)v9;
      if (v9) {
        *(_DWORD *)v9 += 2;
      }
      *(void *)(v7 + ++*(_DWORD *)(this + 16) = result;
      *(unsigned char *)(v7 + 24) = a2;
      char v8 = *v2;
      void *v2 = (WTF *)v7;
      if (v8)
      {
        std::default_delete<WebKit::WebPageInspectorTargetFrontendChannel>::operator()[abi:sn180100]((int)v2, v8);
        uint64_t result = (WTF **)v9;
      }
      uint64_t v9 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      if (*((void *)v4[4] + 6)) {
        return (WTF **)WebCore::InspectorController::connectFrontend();
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

void WebKit::WebPageInspectorTarget::disconnect(WebKit::WebPageInspectorTarget *this)
{
  uint64_t v2 = (WTF **)((char *)this + 40);
  uint64_t v1 = (WTF *)*((void *)this + 5);
  if (v1)
  {
    if (*(void *)(*((void *)this + 4) + 48))
    {
      WebCore::InspectorController::disconnectFrontend();
      uint64_t v1 = *v2;
      void *v2 = 0;
      if (!v1) {
        return;
      }
    }
    else
    {
      void *v2 = 0;
    }
    std::default_delete<WebKit::WebPageInspectorTargetFrontendChannel>::operator()[abi:sn180100]((int)v2, v1);
  }
}

uint64_t WebKit::WebPageInspectorTarget::sendMessageToTargetBackend(uint64_t this, const WTF::String *a2)
{
  uint64_t v2 = *(void *)(*(void *)(this + 32) + 48);
  if (v2) {
    return MEMORY[0x1F416F668](*(void *)(v2 + 80), a2);
  }
  return this;
}

void WebKit::WebPageInspectorTargetController::~WebPageInspectorTargetController(WebKit::WebPageInspectorTargetController *this, void *a2)
{
  uint64_t v3 = *((void *)this + 7);
  if (v3) {
    WTF::HashTable<WebKit::WebPageNetworkParameters,WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashMap<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageNetworkParameters>>::deallocateTable(v3, a2);
  }
  WebKit::WebPageInspectorTarget::~WebPageInspectorTarget((WebKit::WebPageInspectorTargetController *)((char *)this + 8));
}

unsigned int *WebKit::WebPageInspectorTargetController::connectInspector(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WTF *)(a1 + 56), a2, a3, (atomic_uint **)&v7);
  uint64_t result = (unsigned int *)v7;
  if (v7)
  {
    uint64_t v6 = *((void *)v7 + 1);
    if (v6)
    {
      (*(void (**)(void, const WTF::StringImpl *))(*(void *)v6 + 40))(*((void *)v7 + 1), a3);
      uint64_t result = (unsigned int *)v7;
      uint64_t v7 = 0;
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  return result;
}

unsigned int *WebKit::WebPageInspectorTargetController::disconnectInspector(WebKit::WebPageInspectorTargetController *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WebKit::WebPageInspectorTargetController *)((char *)this + 56), a2, a3, (atomic_uint **)&v6);
  uint64_t result = (unsigned int *)v6;
  if (v6)
  {
    uint64_t v5 = *((void *)v6 + 1);
    if (v5)
    {
      (*(void (**)(void))(*(void *)v5 + 48))(*((void *)v6 + 1));
      uint64_t result = (unsigned int *)v6;
      uint64_t v6 = 0;
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v3);
    }
  }
  return result;
}

unsigned int *WebKit::WebPageInspectorTargetController::sendMessageToTargetBackend(WebKit::WebPageInspectorTargetController *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((WebKit::WebPageInspectorTargetController *)((char *)this + 56), a2, a3, (atomic_uint **)&v7);
  uint64_t result = (unsigned int *)v7;
  if (v7)
  {
    uint64_t v6 = *((void *)v7 + 1);
    if (v6)
    {
      (*(void (**)(void, const WTF::String *))(*(void *)v6 + 56))(*((void *)v7 + 1), a3);
      uint64_t result = (unsigned int *)v7;
      uint64_t v7 = 0;
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebPageInspectorTargetFrontendChannel::sendMessageToFrontend(WebKit::WebPageInspectorTargetFrontendChannel *this, const WTF::String *a2)
{
  uint64_t v3 = (void *)*((void *)this + 1);
  uint64_t v4 = (uint64_t *)((char *)this + 16);
  uint64_t v5 = v3[4];
  v3 += 4;
  uint64_t v6 = (*(uint64_t (**)(void *))(v5 + 56))(v3);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2062;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, v4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a2);
  (*(void (**)(void *, IPC::Encoder **, void))(*v3 + 32))(v3, &v12, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::MediaDeviceSandboxExtensions::MediaDeviceSandboxExtensions(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2);
  *(void *)(result + ++*(_DWORD *)(this + 16) = 0;
  *(void *)(result + 24) = 0;
  uint64_t v7 = *a3;
  *a3 = 0;
  *(void *)(result + ++*(_DWORD *)(this + 16) = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(result + 24) = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(result + 28) = v7;
  uint64_t v8 = *a4;
  *a4 = 0;
  *(void *)(result + 32) = v8;
  if (*(_DWORD *)(result + 12) != v7)
  {
    uint64_t result = 40;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::MediaDeviceSandboxExtensions::operator[]@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = *((unsigned int *)a1 + 3);
  if (v4 != *((_DWORD *)a1 + 7) || v4 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x199163768);
  }
  uint64_t v6 = *a1;
  uint64_t v7 = a1[2];
  if (*(void *)(v7 + 8 * a2))
  {
    uint64_t result = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t result = 1;
    uint64_t v9 = *(void *)(v7 + 8 * a2);
    *(void *)(v7 + 8 * a2) = 0;
    *(void *)(result + 8) = v9;
    *(void *)(result + ++*(_DWORD *)(this + 16) = 0;
  }
  else
  {
    uint64_t result = 0;
  }
  unint64_t v10 = *(_DWORD **)(v6 + 8 * a2);
  if (v10) {
    *v10 += 2;
  }
  *a3 = v10;
  a3[1] = result;
  return result;
}

void WebKit::UserMediaPermissionRequestManager::startUserMediaRequest(WebKit::UserMediaPermissionRequestManager *this, WebCore::UserMediaRequest *a2)
{
  uint64_t v4 = WebCore::UserMediaRequest::document(a2);
  if (v4
    && (uint64_t v5 = *(void *)(v4 + 544)) != 0
    && (uint64_t v6 = *(void *)(v5 + 8)) != 0
    && (uint64_t v7 = *(void *)(v6 + 24)) != 0
    && (uint64_t v8 = *(void *)(v7 + 8)) != 0)
  {
    if (*(unsigned char *)(v8 + 544))
    {
      WebKit::UserMediaPermissionRequestManager::sendUserMediaRequest(this, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 28) += 2;
      v14[1] = 0;
      unint64_t v15 = (WebCore::Node *)v4;
      v14[0] = 0;
      WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)this + 4, (uint64_t *)&v15, v14, (uint64_t)v16);
      uint64_t v9 = v16[0];
      WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v10);
      uint64_t v11 = v15;
      unint64_t v15 = 0;
      if (v11)
      {
        if (*((_DWORD *)v11 + 7) == 2)
        {
          if ((*((_WORD *)v11 + 17) & 0x400) == 0) {
            WebCore::Node::removedLastRef(v11);
          }
        }
        else
        {
          *((_DWORD *)v11 + 7) -= 2;
        }
      }
      unsigned int v12 = *(_DWORD *)(v9 + 20);
      if (!v12)
      {
        WebCore::Document::addMediaCanStartListener();
        unsigned int v12 = *(_DWORD *)(v9 + 20);
      }
      if (v12 == *(_DWORD *)(v9 + 16))
      {
        WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MediaKeySystemRequest&>(v9 + 8, (uint64_t)a2);
      }
      else
      {
        uint64_t v13 = *(void *)(v9 + 8);
        ++*((_DWORD *)a2 + 6);
        *(void *)(v13 + 8 * v12) = a2;
        *(_DWORD *)(v9 + 20) = v12 + 1;
      }
    }
  }
  else
  {
    WebCore::UserMediaRequest::deny();
  }
}

void WebKit::UserMediaPermissionRequestManager::sendUserMediaRequest(WebKit::UserMediaPermissionRequestManager *this, WebCore::UserMediaRequest *a2)
{
  if (WebCore::UserMediaRequest::document(a2))
  {
    uint64_t v4 = *(void *)(WebCore::UserMediaRequest::document(a2) + 544);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        uint64_t v7 = (uint64_t *)((char *)this + 24);
        uint64_t v6 = *((void *)this + 3);
        uint64_t v8 = *((void *)a2 + 4);
        if (v6
          || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)this + 3, 0), (uint64_t v6 = *v7) != 0))
        {
          int v9 = *(_DWORD *)(v6 - 8);
        }
        else
        {
          int v9 = 0;
        }
        unint64_t v10 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
        unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        unsigned int v13 = v9 & ((v12 >> 31) ^ v12);
        unint64_t v14 = (uint64_t *)(v6 + 16 * v13);
        uint64_t v15 = *v14;
        if (*v14)
        {
          unint64_t v16 = 0;
          int v17 = 1;
          while (v15 != v8)
          {
            if (v15 == -1) {
              unint64_t v16 = v14;
            }
            unsigned int v13 = (v13 + v17) & v9;
            unint64_t v14 = (uint64_t *)(v6 + 16 * v13);
            uint64_t v15 = *v14;
            ++v17;
            if (!*v14)
            {
              if (v16)
              {
                *unint64_t v16 = 0;
                v16[1] = 0;
                --*(_DWORD *)(*v7 - 16);
                unint64_t v14 = v16;
              }
              goto LABEL_15;
            }
          }
          goto LABEL_31;
        }
LABEL_15:
        *unint64_t v14 = v8;
        ++*((_DWORD *)a2 + 6);
        int v18 = (_DWORD *)v14[1];
        v14[1] = (uint64_t)a2;
        if (v18)
        {
          if (v18[6] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v18 + 16))(v18);
          }
          else {
            --v18[6];
          }
        }
        uint64_t v19 = *v7;
        if (*v7) {
          int v20 = *(_DWORD *)(v19 - 12) + 1;
        }
        else {
          int v20 = 1;
        }
        *(_DWORD *)(v19 - 12) = v20;
        uint64_t v21 = *v7;
        if (*v7) {
          int v22 = *(_DWORD *)(v21 - 12);
        }
        else {
          int v22 = 0;
        }
        uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
        unint64_t v24 = *(unsigned int *)(v21 - 4);
        if (v24 > 0x400)
        {
          if (v24 > 2 * v23) {
            goto LABEL_31;
          }
        }
        else if (3 * v24 > 4 * v23)
        {
LABEL_31:
          WebKit::WebFrame::fromCoreFrame(v5, &v38);
          uint64_t v25 = WebCore::UserMediaRequest::topLevelDocumentOrigin(a2);
          uint64_t v26 = (void *)*((void *)this + 2);
          uint64_t v37 = *((void *)a2 + 4);
          uint64_t v27 = v38;
          long long v36 = *(_OWORD *)(v38 + 80);
          uint64_t v28 = WebCore::UserMediaRequest::userMediaDocumentOrigin(a2) + 8;
          uint64_t v29 = v26[4];
          v26 += 4;
          uint64_t v30 = (*(uint64_t (**)(void *))(v29 + 56))(v26);
          unint64_t v31 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)unint64_t v31 = 2050;
          *((void *)v31 + 1) = v30;
          *((void *)v31 + 66) = (char *)v31 + 16;
          *((void *)v31 + 67) = 512;
          *((void *)v31 + 68) = 0;
          *((void *)v31 + 70) = 0;
          *((void *)v31 + 69) = 0;
          IPC::Encoder::encodeHeader(v31);
          uint64_t v39 = v31;
          IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v31, &v37);
          IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v31, (uint64_t *)&v36);
          IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v31, v28);
          IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v31, v25 + 8);
          IPC::ArgumentCoder<WebCore::MediaStreamRequest,void>::encode(v31, (uint64_t)a2 + 88);
          (*(void (**)(void *, IPC::Encoder **, void))(*v26 + 32))(v26, &v39, 0);
          unsigned int v33 = v39;
          uint64_t v39 = 0;
          if (v33)
          {
            IPC::Encoder::~Encoder(v33, v32);
            WTF::fastFree(v34, v35);
          }
          CFRelease(*(CFTypeRef *)(v27 + 8));
          return;
        }
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)this + 3, v14);
        goto LABEL_31;
      }
    }
  }

  WebCore::UserMediaRequest::deny();
}

void *WebKit::UserMediaPermissionRequestManager::cancelUserMediaRequest(WebKit::UserMediaPermissionRequestManager *this, WebCore::UserMediaRequest *a2)
{
  uint64_t v4 = (uint64_t *)((char *)this + 24);
  uint64_t v18 = *((void *)a2 + 4);
  uint64_t v5 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 3, &v18);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::take(v4, v5, &v19);
  uint64_t result = v19;
  uint64_t v19 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1) {
      return (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    }
    else {
      --*((_DWORD *)result + 6);
    }
  }
  else
  {
    uint64_t result = (void *)WebCore::UserMediaRequest::document(a2);
    if (result)
    {
      uint64_t v7 = *((void *)this + 4);
      uint64_t result = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(v7, (uint64_t)result);
      uint64_t v8 = result;
      uint64_t v9 = v7 ? v7 + 24 * *(unsigned int *)(v7 - 4) : 0;
      if ((void *)v9 != result)
      {
        uint64_t v10 = *((unsigned int *)result + 5);
        if (!v10) {
          goto LABEL_20;
        }
        unint64_t v11 = (WebCore::UserMediaRequest **)result[1];
        unint64_t v12 = v11 + 1;
        uint64_t v13 = *((unsigned int *)result + 5);
        while (*v11 != a2)
        {
          ++v11;
          ++v12;
          if (!--v13) {
            return result;
          }
        }
        __dst = v11;
        WebCore::Node *v11 = 0;
        if (*((_DWORD *)a2 + 6) == 1)
        {
          (*(void (**)(WebCore::UserMediaRequest *))(*(void *)a2 + 16))(a2);
          uint64_t v10 = *((unsigned int *)v8 + 5);
        }
        else
        {
          --*((_DWORD *)a2 + 6);
        }
        uint64_t result = memmove(__dst, __dst + 1, v8[1] + 8 * v10 - (void)v12);
        int v14 = *((_DWORD *)v8 + 5) - 1;
        *((_DWORD *)v8 + 5) = v14;
        if (!v14)
        {
LABEL_20:
          uint64_t result = (void *)WebCore::Document::removeMediaCanStartListener();
          uint64_t v15 = *((void *)this + 4);
          if (v15)
          {
            unint64_t v16 = (void *)(v15 + 24 * *(unsigned int *)(v15 - 4));
            if (v16 == v8) {
              return result;
            }
          }
          else
          {
            if (!v8) {
              return result;
            }
            unint64_t v16 = 0;
          }
          if (v16 != v8) {
            return WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::remove((uint64_t *)this + 4, v8);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::UserMediaPermissionRequestManager::mediaCanStart(WebKit::UserMediaPermissionRequestManager *this, WebCore::Document *a2)
{
  uint64_t v3 = (uint64_t *)((char *)this + 32);
  uint64_t v4 = *((void *)this + 4);
  uint64_t v5 = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(v4, (uint64_t)a2);
  uint64_t v6 = v5;
  if (v4) {
    uint64_t v7 = (uint64_t *)(v4 + 24 * *(unsigned int *)(v4 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 == v5)
  {
    v17[0] = 0;
    uint64_t v15 = 0;
    v17[1] = 0;
    unint64_t v16 = 0;
    WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v5);
    return WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v6);
  }
  uint64_t v8 = (WebCore::UserMediaRequest **)v5[1];
  uint64_t v15 = v8;
  unsigned int v9 = *((_DWORD *)v5 + 4);
  uint64_t v10 = *((unsigned int *)v5 + 5);
  v5[1] = 0;
  uint64_t v5[2] = 0;
  unint64_t v16 = __PAIR64__(v10, v9);
  if (!*v3)
  {
    if (!v5) {
      goto LABEL_13;
    }
    uint64_t v11 = 0;
LABEL_11:
    if ((uint64_t *)v11 != v5) {
      WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::remove(v3, v5);
    }
    goto LABEL_13;
  }
  uint64_t v11 = *v3 + 24 * *(unsigned int *)(*v3 - 4);
  if ((uint64_t *)v11 != v5) {
    goto LABEL_11;
  }
LABEL_13:
  if (v10)
  {
    uint64_t v12 = 8 * v10;
    do
    {
      uint64_t v13 = *v8++;
      WebKit::UserMediaPermissionRequestManager::sendUserMediaRequest(this, v13);
      v12 -= 8;
    }
    while (v12);
  }
  return WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v6);
}

_DWORD *WebKit::UserMediaPermissionRequestManager::userMediaAccessWasGranted(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12 = a2;
  uint64_t v7 = (uint64_t *)(a1 + 24);
  uint64_t v8 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 24), &v12);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::take(v7, v8, &v11);
  if (v11)
  {
    WebCore::UserMediaRequest::allow();
  }
  else
  {
    uint64_t v9 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    if (result[6] == 1) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 16))(result);
    }
    else {
      --result[6];
    }
  }
  return result;
}

_DWORD *WebKit::UserMediaPermissionRequestManager::userMediaAccessWasDenied(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v2 = (uint64_t *)(a1 + 24);
  uint64_t v3 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 24), &v6);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>>,WTF::HashTableTraits>::take(v2, v3, &v5);
  uint64_t result = v5;
  if (v5)
  {
    WebCore::UserMediaRequest::deny();
    uint64_t result = v5;
    uint64_t v5 = 0;
    if (result)
    {
      if (result[6] == 1) {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 16))(result);
      }
      else {
        --result[6];
      }
    }
  }
  return result;
}

void WebKit::UserMediaPermissionRequestManager::enumerateMediaDevices(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = a2[68];
  if (v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0)
  {
    uint64_t v7 = *(void **)(a1 + 16);
    WebKit::WebFrame::fromCoreFrame(v5, &v26);
    uint64_t v8 = v26;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)(v26 + 80);
    uint64_t v9 = WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a2 + 26)) + 8;
    uint64_t v10 = WebCore::Document::topOrigin((WebCore::Document *)a2) + 8;
    uint64_t v11 = v7[4];
    v7 += 4;
    uint64_t v12 = (*(uint64_t (**)(void *))(v11 + 56))(v7);
    uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v13 = 1969;
    *((void *)v13 + 1) = v12;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 68) = 0;
    *((void *)v13 + 70) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    uint64_t v30 = v13;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v13, (uint64_t *)v27);
    IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v13, v9);
    IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v13, v10);
    uint64_t v14 = *a3;
    *a3 = 0;
    uint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v15 = &unk_1EE9F19E0;
    v15[1] = v14;
    uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v28 = v15;
    uint64_t v29 = v16;
    (*(void (**)(void *, IPC::Encoder **, void **, void))(*v7 + 40))(v7, &v30, &v28, 0);
    uint64_t v18 = v28;
    uint64_t v28 = 0;
    if (v18) {
      (*(void (**)(void *))(*v18 + 8))(v18);
    }
    uint64_t v19 = v30;
    uint64_t v30 = 0;
    if (v19)
    {
      IPC::Encoder::~Encoder(v19, v17);
      WTF::fastFree(v24, v25);
    }
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    v27[0] = 0;
    v27[1] = 0;
    uint64_t v20 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, void **, WTF::StringImpl **))(*(void *)v20 + 16))(v20, &v28, v27);
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    int v22 = v27[1];
    v27[1] = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, v21);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    uint64_t v23 = v27[0];
    v27[0] = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v21);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v21);
  }
}

uint64_t WebKit::UserMediaPermissionRequestManager::addDeviceChangeObserver(uint64_t a1, uint64_t *a2)
{
  uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::add<WTF::Function<void ()(void)>>((uint64_t *)(a1 + 40), &IdentifierInternal, a2, (uint64_t)v13);
  if (!*(unsigned char *)(a1 + 48))
  {
    *(unsigned char *)(a1 + 48) = 1;
    uint64_t v4 = *(void **)(a1 + 16);
    uint64_t v5 = v4[4];
    v4 += 4;
    uint64_t v6 = (*(uint64_t (**)(void *))(v5 + 56))(v4);
    uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v7 = 1871;
    *((void *)v7 + 1) = v6;
    *((void *)v7 + 66) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    v13[0] = v7;
    (*(void (**)(void *, IPC::Encoder **, void))(*v4 + 32))(v4, v13, 0);
    uint64_t v9 = v13[0];
    v13[0] = 0;
    if (v9)
    {
      IPC::Encoder::~Encoder(v9, v8);
      WTF::fastFree(v11, v12);
    }
  }
  return IdentifierInternal;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::add<WTF::Function<void ()(void)>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = *(unsigned int *)(v8 - 4);
        }
        char v28 = 0;
        uint64_t v29 = v8 + 16 * v23;
        goto LABEL_31;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      uint64_t *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v18;
    }
  }
  *uint64_t v16 = v11;
  uint64_t v20 = *a3;
  *a3 = 0;
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  uint64_t v21 = *v6;
  if (*v6) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 12) = v22;
  uint64_t v24 = *v6;
  if (*v6) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_24:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
      uint64_t v16 = result;
      uint64_t v24 = *v6;
      if (*v6) {
        unint64_t v27 = *(unsigned int *)(v24 - 4);
      }
      else {
        unint64_t v27 = 0;
      }
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_24;
  }
  uint64_t v29 = v24 + 16 * v27;
  char v28 = 1;
LABEL_31:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v29;
  *(unsigned char *)(a4 + ++*(_DWORD *)(this + 16) = v28;
  return result;
}

uint64_t *WebKit::UserMediaPermissionRequestManager::removeDeviceChangeObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 40);
  uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 40), &v7);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if (v6 != result) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, result);
  }
  return result;
}

uint64_t WebKit::UserMediaPermissionRequestManager::captureDevicesChanged(WebKit::UserMediaPermissionRequestManager *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 40);
  uint64_t result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 5);
  uint64_t v4 = (void *)result;
  uint64_t v6 = v5;
  uint64_t v7 = *((void *)this + 5);
  if (v7) {
    uint64_t v8 = (void *)(v7 + 16 * *(unsigned int *)(v7 - 4));
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 != (void *)result)
  {
    do
    {
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v2, v4);
      uint64_t v9 = *v2;
      if (*v2) {
        v9 += 16 * *(unsigned int *)(v9 - 4);
      }
      if (v9 != result) {
        uint64_t result = (*(uint64_t (**)(void))(**(void **)(result + 8) + 16))(*(void *)(result + 8));
      }
      while (1)
      {
        v4 += 2;
        if (v4 == v6) {
          break;
        }
        if ((unint64_t)(*v4 + 1) > 1) {
          goto LABEL_13;
        }
      }
      uint64_t v4 = v6;
LABEL_13:
      ;
    }
    while (v4 != v8);
  }
  return result;
}

void WebKit::WebPageInspectorTargetFrontendChannel::~WebPageInspectorTargetFrontendChannel(WebKit::WebPageInspectorTargetFrontendChannel *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
}

{
  WTF::StringImpl *v3;
  uint64_t vars8;

  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  WTF::fastFree(this, a2);
}

uint64_t WebKit::WebPageInspectorTargetFrontendChannel::connectionType(WebKit::WebPageInspectorTargetFrontendChannel *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t WebKit::WebPageInspectorTarget::type(WebKit::WebPageInspectorTarget *this)
{
  return 0;
}

void WebKit::WebMediaKeyStorageManager::~WebMediaKeyStorageManager(WebKit::WebMediaKeyStorageManager *this, WTF::StringImpl *a2)
{
  WebKit::WebMediaKeyStorageManager::~WebMediaKeyStorageManager(this, a2);

  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;

  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9F19A8;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
}

void WebKit::UserMediaPermissionRequestManager::~UserMediaPermissionRequestManager(WebKit::UserMediaPermissionRequestManager *this, void *a2)
{
  WebKit::UserMediaPermissionRequestManager::~UserMediaPermissionRequestManager(this, a2);

  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  _DWORD *v14;

  *(void *)this = &unk_1EE9F1980;
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (uint64_t *)(v3 + 8);
      do
      {
        if (*(v5 - 1) != -1)
        {
          uint64_t v6 = *v5;
          void *v5 = 0;
          if (v6) {
            (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v7 = *((void *)this + 4);
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    if (v8)
    {
      uint64_t v9 = v7 + 8;
      do
      {
        if (*(void *)(v9 - 8) != -1)
        {
          WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9, a2);
          int v10 = *(void *)(v9 - 8);
          *(void *)(v9 - 8) = 0;
          if (v10)
          {
            if (*(_DWORD *)(v10 + 28) == 2)
            {
              if ((*(_WORD *)(v10 + 34) & 0x400) == 0) {
                WebCore::Node::removedLastRef((WebCore::Node *)v10);
              }
            }
            else
            {
              *(_DWORD *)(v10 + 28) -= 2;
            }
          }
        }
        v9 += 24;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  uint64_t v11 = *((void *)this + 3);
  if (v11)
  {
    unint64_t v12 = *(unsigned int *)(v11 - 4);
    if (v12)
    {
      unint64_t v13 = (_DWORD **)(v11 + 8);
      do
      {
        if (*(v13 - 1) != (_DWORD *)-1)
        {
          unint64_t v14 = *v13;
          *unint64_t v13 = 0;
          if (v14)
          {
            if (v14[6] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v14 + 16))(v14);
            }
            else {
              --v14[6];
            }
          }
        }
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(v11 - 16), a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

void std::default_delete<WebKit::WebPageInspectorTargetFrontendChannel>::operator()[abi:sn180100](int a1, WTF *this)
{
  if (this)
  {
    uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, this);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    WTF::fastFree(this, this);
  }
}

uint64_t WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::~KeyValuePair(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = *(WTF::StringImpl **)a1;
  *(void *)a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t a1, WTF::StringImpl **a2)
{
  uint64_t v4 = *a2;
  if (a1) {
    int v5 = *(_DWORD *)(a1 - 8);
  }
  else {
    int v5 = 0;
  }
  unsigned int v6 = *((_DWORD *)v4 + 4);
  if (v6 >= 0x100) {
    unsigned int v7 = v6 >> 8;
  }
  else {
    unsigned int v7 = WTF::StringImpl::hashSlowCase(v4);
  }
  int v8 = 0;
  do
  {
    uint64_t v9 = v7 & v5;
    unsigned int v7 = ++v8 + v9;
  }
  while (*(void *)(a1 + 16 * v9));
  uint64_t v10 = a1 + 16 * v9;
  uint64_t v11 = *(unsigned int **)(v10 + 8);
  *(void *)(v10 + 8) = 0;
  if (v11 && atomic_fetch_add((atomic_uint *volatile)v11, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, a2);
  }
  unint64_t v12 = *(WTF::StringImpl **)v10;
  *(void *)uint64_t v10 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  unint64_t v13 = *a2;
  *a2 = 0;
  *(void *)uint64_t v10 = v13;
  unint64_t v14 = a2[1];
  a2[1] = 0;
  *(void *)(v10 + 8) = v14;
  return v10;
}

WTF *WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WeakPtr<Inspector::InspectorTarget,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>@<X0>(WTF *result@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, atomic_uint **a4@<X8>)
{
  uint64_t v5 = *(void *)result;
  if (*(void *)result)
  {
    int v7 = *(_DWORD *)(v5 - 8);
    unsigned int v8 = *((_DWORD *)*a2 + 4);
    if (v8 >= 0x100) {
      unsigned int v9 = v8 >> 8;
    }
    else {
      unsigned int v9 = WTF::StringImpl::hashSlowCase(*a2);
    }
    for (i = 0; ; unsigned int v9 = i + v11)
    {
      uint64_t v11 = v9 & v7;
      uint64_t result = *(WTF **)(v5 + 16 * v11);
      if (result != (WTF *)-1)
      {
        if (!result) {
          goto LABEL_10;
        }
        uint64_t result = (WTF *)WTF::equal(result, *a2, a3);
        if (result) {
          break;
        }
      }
      ++i;
    }
    unint64_t v12 = *(atomic_uint **)(v5 + 16 * v11 + 8);
    if (v12) {
      atomic_fetch_add(v12, 1u);
    }
  }
  else
  {
LABEL_10:
    unint64_t v12 = 0;
  }
  *a4 = v12;
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::EnumerateMediaDevicesForFrame,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F19E0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::EnumerateMediaDevicesForFrame,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F19E0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::EnumerateMediaDevicesForFrame,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = *(WTF::StringImpl **)a2;
    if (v4)
    {
      unint64_t v5 = *((void *)a2 + 1);
      unint64_t v6 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v4;
      if (v5 >= v6 && v5 - v6 > 7)
      {
        unsigned int v8 = (unint64_t *)((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v9 = *v8;
        *((void *)a2 + 2) = v8 + 1;
        uint64_t v106 = 0;
        uint64_t v107 = 0;
        if (v9 >= 0x11A7)
        {
          uint64_t v79 = (uint64_t *)(a1 + 8);
          while (1)
          {
            IPC::Decoder::decode<WebCore::CaptureDeviceWithCapabilities>(&v88, a2);
            if (!v105) {
              break;
            }
            unsigned int v48 = HIDWORD(v107);
            if (HIDWORD(v107) == v107)
            {
              WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CaptureDeviceWithCapabilities>((uint64_t)&v106, (unint64_t)&v88);
            }
            else
            {
              uint64_t v49 = v106;
              uint64_t v50 = v106 + 232 * HIDWORD(v107);
              uint64_t v51 = v88;
              *(void *)&long long v88 = 0;
              *(void *)uint64_t v50 = v51;
              *(unsigned char *)(v50 + 8) = BYTE8(v88);
              uint64_t v52 = v89;
              uint64_t v89 = 0;
              *(void *)(v50 + ++*(_DWORD *)(this + 16) = v52;
              uint64_t v53 = v90;
              uint64_t v90 = 0;
              *(void *)(v50 + 24) = v53;
              *(_DWORD *)(v50 + 32) = v91;
              long long v54 = v92;
              long long v55 = v93;
              *(_OWORD *)(v50 + 72) = v94;
              *(_OWORD *)(v50 + 56) = v55;
              *(_OWORD *)(v50 + 40) = v54;
              char v56 = (WTF *)__n[0];
              *(void *)(v50 + 88) = 0;
              *(void *)(v50 + 96) = 0;
              uint64_t v57 = v50 + 88;
              *(_DWORD *)(v57 + 12) = v56;
              if (v56)
              {
                long long v58 = (void *)WTF::fastMalloc(v56);
                *(_DWORD *)(v49 + 232 * v48 + 96) = v56;
                *(void *)uint64_t v57 = v58;
                memcpy(v58, __src, __n[0]);
              }
              uint64_t v59 = v49 + 232 * v48;
              long long v60 = *(_OWORD *)&__n[1];
              long long v61 = v97;
              *(unsigned char *)(v59 + 136) = v98;
              *(_OWORD *)(v59 + 120) = v61;
              *(_OWORD *)(v59 + 104) = v60;
              char v62 = v99;
              if (v99) {
                *v99 += 2;
              }
              *(void *)(v59 + 144) = v62;
              uint64_t v63 = v100;
              if (v100) {
                *v100 += 2;
              }
              *(void *)(v49 + 232 * v48 + 152) = v63;
              uint64_t v64 = v49 + 232 * v48;
              *(_OWORD *)(v64 + 160) = v101;
              long long v65 = (WTF *)v103[0];
              *(void *)(v64 + 176) = 0;
              *(void *)(v64 + 184) = 0;
              uint64_t v66 = v64 + 176;
              *(_DWORD *)(v66 + 12) = v65;
              if (v65)
              {
                long long v67 = (void *)WTF::fastMalloc(v65);
                *(_DWORD *)(v49 + 232 * v48 + 184) = v65;
                *(void *)uint64_t v66 = v67;
                memcpy(v67, v102, v103[0]);
              }
              uint64_t v68 = v49 + 232 * v48;
              long long v70 = *(_OWORD *)&v103[1];
              long long v69 = *(_OWORD *)v104;
              *(void *)(v68 + 222) = *(void *)&v104[14];
              *(_OWORD *)(v68 + 192) = v70;
              *(_OWORD *)(v68 + 208) = v69;
              ++HIDWORD(v107);
            }
            std::__optional_destruct_base<WebCore::CaptureDeviceWithCapabilities,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v88, v10);
            if (!--v9)
            {
              WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v106, HIDWORD(v107));
              uint64_t v34 = v106;
              uint64_t v106 = 0;
              uint64_t v85 = v34;
              int v35 = v107;
              LODWORD(v9) = HIDWORD(v107);
              LODWORD(v107) = 0;
              LODWORD(v86) = v35;
              uint64_t v2 = v79;
              goto LABEL_30;
            }
          }
        }
        else
        {
          if (!v9)
          {
            int v35 = 0;
            uint64_t v34 = 0;
LABEL_29:
            uint64_t v106 = 0;
            uint64_t v85 = v34;
            LODWORD(v107) = 0;
            LODWORD(v86) = v35;
LABEL_30:
            HIDWORD(v107) = 0;
            HIDWORD(v86) = v9;
            char v87 = 1;
            WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v106, v4);
            IPC::Decoder::decode<WebCore::MediaDeviceHashSalts>(a2, (uint64_t)&v88);
            int v39 = v89;
            if ((_BYTE)v89)
            {
              uint64_t v85 = 0;
              uint64_t v86 = 0;
              uint64_t v80 = v34;
              int v81 = v35;
              int v82 = v9;
              long long v40 = v88;
              long long v88 = 0uLL;
              long long v83 = v40;
              int v41 = 1;
            }
            else
            {
              int v41 = 0;
              LOBYTE(v80) = 0;
            }
            char v84 = v41;
            std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v88, v38);
            WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v85, v42);
            if (v39) {
              goto LABEL_59;
            }
            goto LABEL_58;
          }
          uint64_t v79 = (uint64_t *)(a1 + 8);
          LODWORD(v107) = 232 * (int)v9 / 0xE8u;
          uint64_t v106 = WTF::fastMalloc((WTF *)(232 * v9));
          while (1)
          {
            IPC::Decoder::decode<WebCore::CaptureDeviceWithCapabilities>(&v88, a2);
            if (!v105) {
              break;
            }
            unsigned int v11 = HIDWORD(v107);
            if (HIDWORD(v107) == v107)
            {
              WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CaptureDeviceWithCapabilities>((uint64_t)&v106, (unint64_t)&v88);
            }
            else
            {
              uint64_t v12 = v106;
              uint64_t v13 = v106 + 232 * HIDWORD(v107);
              uint64_t v14 = v88;
              *(void *)&long long v88 = 0;
              *(void *)uint64_t v13 = v14;
              *(unsigned char *)(v13 + 8) = BYTE8(v88);
              uint64_t v15 = v89;
              uint64_t v89 = 0;
              *(void *)(v13 + ++*(_DWORD *)(this + 16) = v15;
              uint64_t v16 = v90;
              uint64_t v90 = 0;
              *(void *)(v13 + 24) = v16;
              *(_DWORD *)(v13 + 32) = v91;
              long long v17 = v92;
              long long v18 = v93;
              *(_OWORD *)(v13 + 72) = v94;
              *(_OWORD *)(v13 + 56) = v18;
              *(_OWORD *)(v13 + 40) = v17;
              int v19 = (WTF *)__n[0];
              *(void *)(v13 + 88) = 0;
              *(void *)(v13 + 96) = 0;
              uint64_t v20 = v13 + 88;
              *(_DWORD *)(v20 + 12) = v19;
              if (v19)
              {
                uint64_t v21 = (void *)WTF::fastMalloc(v19);
                *(_DWORD *)(v12 + 232 * v11 + 96) = v19;
                *(void *)uint64_t v20 = v21;
                memcpy(v21, __src, __n[0]);
              }
              uint64_t v22 = v12 + 232 * v11;
              long long v23 = *(_OWORD *)&__n[1];
              long long v24 = v97;
              *(unsigned char *)(v22 + 136) = v98;
              *(_OWORD *)(v22 + 120) = v24;
              *(_OWORD *)(v22 + 104) = v23;
              int v25 = v99;
              if (v99) {
                *v99 += 2;
              }
              *(void *)(v22 + 144) = v25;
              uint64_t v26 = v100;
              if (v100) {
                *v100 += 2;
              }
              *(void *)(v12 + 232 * v11 + 152) = v26;
              uint64_t v27 = v12 + 232 * v11;
              *(_OWORD *)(v27 + 160) = v101;
              char v28 = (WTF *)v103[0];
              *(void *)(v27 + 176) = 0;
              *(void *)(v27 + 184) = 0;
              uint64_t v29 = v27 + 176;
              *(_DWORD *)(v29 + 12) = v28;
              if (v28)
              {
                uint64_t v30 = (void *)WTF::fastMalloc(v28);
                *(_DWORD *)(v12 + 232 * v11 + 184) = v28;
                *(void *)uint64_t v29 = v30;
                memcpy(v30, v102, v103[0]);
              }
              uint64_t v31 = v12 + 232 * v11;
              long long v33 = *(_OWORD *)&v103[1];
              long long v32 = *(_OWORD *)v104;
              *(void *)(v31 + 222) = *(void *)&v104[14];
              *(_OWORD *)(v31 + 192) = v33;
              *(_OWORD *)(v31 + 208) = v32;
              ++HIDWORD(v107);
            }
            std::__optional_destruct_base<WebCore::CaptureDeviceWithCapabilities,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v88, v10);
            if (!--v9)
            {
              uint64_t v34 = v106;
              int v35 = v107;
              LODWORD(v9) = HIDWORD(v107);
              uint64_t v2 = v79;
              goto LABEL_29;
            }
          }
        }
        std::__optional_destruct_base<WebCore::CaptureDeviceWithCapabilities,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v88, v10);
        WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v106, v71);
        uint64_t v2 = v79;
      }
      else
      {
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v44 = *((void *)a2 + 3);
        if (v44)
        {
          if (v5)
          {
            (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
            uint64_t v45 = *(WTF::StringImpl **)a2;
            uint64_t v46 = *((void *)a2 + 1);
            uint64_t v47 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            if (v47)
            {
              if (v46) {
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v47 + 16))(v47, v45);
              }
            }
          }
        }
      }
      int v72 = *(WTF::StringImpl **)a2;
      uint64_t v73 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v74 = *((void *)a2 + 3);
      if (v74 && v73) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v74 + 16))(v74, v72);
      }
      int v41 = 0;
      LOBYTE(v80) = 0;
      char v84 = 0;
LABEL_58:
      uint64_t v43 = *(WTF::StringImpl **)a2;
      uint64_t v75 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v76 = *((void *)a2 + 3);
      if (v76 && v75) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v76 + 16))(v76, v43);
      }
LABEL_59:
      if (v41)
      {
        uint64_t v77 = *v2;
        uint64_t *v2 = 0;
        (*(void (**)(uint64_t, uint64_t *, long long *))(*(void *)v77 + 16))(v77, &v80, &v83);
        (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
        return std::__optional_destruct_base<std::tuple<WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MediaDeviceHashSalts>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v80, v78);
      }
      else
      {
        std::__optional_destruct_base<std::tuple<WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MediaDeviceHashSalts>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v80, v43);
        return IPC::Connection::cancelReply<Messages::WebPageProxy::EnumerateMediaDevicesForFrame,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>(v2);
      }
    }
  }
  long long v36 = (uint64_t *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::WebPageProxy::EnumerateMediaDevicesForFrame,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>(v36);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::EnumerateMediaDevicesForFrame,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::MediaDeviceHashSalts &&)>>(uint64_t *a1)
{
  v8[0] = 0;
  v8[1] = 0;
  unint64_t v6 = 0;
  int v7 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *, WTF::StringImpl **))(*(void *)v1 + 16))(v1, v8, &v6);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t v3 = v7;
  int v7 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = v6;
  unint64_t v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8, v2);
}

uint64_t IPC::Decoder::decode<WebCore::CaptureDeviceWithCapabilities>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::CaptureDeviceWithCapabilities,void>::decode(a2, a1);
  if (!a1[232])
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::MediaDeviceHashSalts>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::MediaDeviceHashSalts,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MediaDeviceHashSalts>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, a2);
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v7;
    do
    {
      uint64_t v16 = (uint64_t *)(v6 + 16 * v13);
      uint64_t v17 = *v16;
      if (*v16 != -1)
      {
        if (v17)
        {
          uint64_t v20 = *a1;
          if (*a1) {
            int v21 = *(_DWORD *)(v20 - 8);
          }
          else {
            int v21 = 0;
          }
          unint64_t v22 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
          unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          unsigned int v25 = v21 & ((v24 >> 31) ^ v24);
          int v26 = 1;
          do
          {
            unsigned int v27 = v25;
            uint64_t v28 = *(void *)(v20 + 16 * v25);
            unsigned int v25 = (v25 + v26++) & v21;
          }
          while (v28);
          uint64_t v29 = (uint64_t *)(v20 + 16 * v27);
          uint64_t v30 = v29[1];
          v29[1] = 0;
          if (v30) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
          uint64_t *v29 = *v16;
          uint64_t v31 = v6 + 16 * v13;
          uint64_t v32 = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = 0;
          v29[1] = v32;
          uint64_t v33 = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = 0;
          if (v33) {
            (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
          }
          if (v16 == a3) {
            uint64_t v14 = v29;
          }
        }
        else
        {
          uint64_t v18 = v6 + 16 * v13;
          uint64_t v19 = *(void *)(v18 + 8);
          *(void *)(v18 + 8) = 0;
          if (v19) {
            (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void WebKit::WebModelPlayerProvider::~WebModelPlayerProvider(WebKit::WebModelPlayerProvider *this)
{
  WebCore::ModelPlayerProvider::~ModelPlayerProvider(this);

  WTF::fastFree(v1, v2);
}

void *WebKit::WebModelPlayerProvider::createModelPlayer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return WebKit::ARKitInlinePreviewModelPlayerIOS::create(*(void *)(a1 + 8), a2, a3);
}

void WebKit::NetworkProcessConnection::~NetworkProcessConnection(WebKit::NetworkProcessConnection *this)
{
  *(void *)this = &unk_1EE9F1A30;
  uint64_t v2 = (atomic_uchar *volatile **)((char *)this + 24);
  IPC::Connection::invalidate(*((void *)this + 3));
  uint64_t v4 = (_DWORD *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  int v5 = (_DWORD *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  uint64_t v6 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v6) {
    WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref((_DWORD *)(v6 + 24), v3);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v2);
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v7);
}

{
  uint64_t v1;
  void *v2;
  uint64_t vars8;

  WebKit::NetworkProcessConnection::~NetworkProcessConnection(this);
  if (atomic_load((unsigned int *)(v1 + 16)))
  {
    *(void *)(v1 + 96) = 0;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)uint64_t v1 = 0u;
    *(_OWORD *)(v1 + ++*(_DWORD *)(this + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
}

WebKit::WebSharedWorkerObjectConnection *WebKit::NetworkProcessConnection::sharedWorkerConnection(WebKit::NetworkProcessConnection *this)
{
  uint64_t result = (WebKit::WebSharedWorkerObjectConnection *)*((void *)this + 11);
  if (!result)
  {
    uint64_t v3 = (WebKit::WebSharedWorkerObjectConnection *)WTF::fastMalloc((WTF *)0x30);
    uint64_t result = WebKit::WebSharedWorkerObjectConnection::WebSharedWorkerObjectConnection(v3);
    uint64_t v4 = (_DWORD *)*((void *)this + 11);
    *((void *)this + 11) = result;
    if (v4)
    {
      if (v4[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
        return (WebKit::WebSharedWorkerObjectConnection *)*((void *)this + 11);
      }
      else
      {
        --v4[2];
      }
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcessConnection::didReceiveSyncMessage(WebCore::SWContextManager *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(unsigned __int16 *)(a3 + 50);
  if (v3 >= 0xEF4) {
    unsigned int v3 = 3828;
  }
  int v4 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v3 + 2]);
  if (v4 == 187)
  {
    {
      uint64_t v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v9);
    }
    if ((unint64_t)(*(void *)(a3 + 64) - 1) >= 0xFFFFFFFFFFFFFFFELL)
    {
      __break(0xC471u);
      JUMPOUT(0x199165DA4);
    }
    uint64_t v10 = *(void *)(a3 + 64);
    uint64_t v6 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v10);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 48);
      if (v7) {
        (*(void (**)(void))(**(void **)(*(void *)(v7 + 1240) + 8) + 112))(*(void *)(*(void *)(v7 + 1240) + 8));
      }
    }
  }
  else if (v4 == 198)
  {
    int v5 = (WebCore::SWContextManager *)WebCore::SWContextManager::singleton(a1);
    WebCore::SWContextManager::connection(v5);
  }
  return 0;
}

void WebKit::NetworkProcessConnection::didClose(WebKit::NetworkProcessConnection *this, IPC::Connection *a2)
{
  ++*((_DWORD *)this + 5);
  {
    uint64_t v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  WebKit::WebProcess::networkProcessConnectionClosed((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process, this);
  unsigned int v3 = (WebKit::WebIDBConnectionToServer *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3)
  {
    WebKit::WebIDBConnectionToServer::connectionToServerLost(v3);
    WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref((_DWORD *)v3 + 6, v4);
  }
  uint64_t v5 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v5)
  {
    *(unsigned char *)(v5 + 12) = 1;
    WebCore::SWClientConnection::clearPendingJobs((WebCore::SWClientConnection *)v5);
    if (*(_DWORD *)(v5 + 8) == 1) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    else {
      --*(_DWORD *)(v5 + 8);
    }
  }
  if (*((_DWORD *)this + 5) == 1)
  {
    uint64_t v6 = *(void (**)(WebKit::NetworkProcessConnection *))(*(void *)this + 8);
    v6(this);
  }
  else
  {
    --*((_DWORD *)this + 5);
  }
}

uint64_t IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::WriteBlobsToTemporaryFilesForIndexedDB,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(os_unfair_lock_s *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v10 = &unk_1EE9F1BF8;
  v10[1] = v9;
  uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 294;
  *((void *)v12 + 1) = a4;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 68) = 0;
  *((void *)v12 + 70) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  int v21 = v12;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v12, *a2);
  v20[0] = (uint64_t)v10;
  v20[1] = v11;
  int v14 = IPC::Connection::sendMessageWithAsyncReply(a1, &v21, v20, a5, 0);
  uint64_t v15 = v20[0];
  v20[0] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v21;
  int v21 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v13);
    WTF::fastFree(v18, v19);
  }
  if (v14) {
    return 0;
  }
  else {
    return v11;
  }
}

void WebKit::NetworkProcessConnection::didFinishPingLoad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  {
    unsigned int v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v27);
  }
  uint64_t v6 = *(void *)(WebKit::WebProcess::singleton(void)::process + 320);
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v7 = (uint64_t *)(v6 + 64);
  uint64_t v8 = v9;
  if (v9)
  {
    unsigned int v10 = *(_DWORD *)(v8 - 8);
    unint64_t v11 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    uint64_t v14 = v10 & ((v13 >> 31) ^ v13);
    uint64_t v15 = *(void *)(v8 + 16 * v14);
    if (v15 != a2)
    {
      int v16 = 1;
      while (v15)
      {
        uint64_t v14 = (v14 + v16) & v10;
        uint64_t v15 = *(void *)(v8 + 16 * v14);
        ++v16;
        if (v15 == a2) {
          goto LABEL_9;
        }
      }
      uint64_t v14 = *(unsigned int *)(v8 - 4);
    }
LABEL_9:
    if (v14 != *(_DWORD *)(v8 - 4))
    {
      uint64_t v17 = (void *)(v8 + 16 * v14);
      uint64_t v18 = v17[1];
      v17[1] = 0;
      uint64_t v19 = *v7;
      if (!*v7 || (v19 += 16 * *(unsigned int *)(v19 - 4), (void *)v19 != v17))
      {
        if ((void *)v19 != v17)
        {
          *uint64_t v17 = -1;
          v17[1] = 0;
          ++*(_DWORD *)(*v7 - 16);
          uint64_t v20 = *v7;
          int v21 = *v7 ? *(_DWORD *)(v20 - 12) - 1 : -1;
          *(_DWORD *)(v20 - 12) = v21;
          uint64_t v22 = *v7;
          if (*v7)
          {
            unsigned int v23 = 6 * *(_DWORD *)(v22 - 12);
            unsigned int v24 = *(_DWORD *)(v22 - 4);
            if (v23 < v24 && v24 >= 9) {
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v7, v24 >> 1);
            }
          }
        }
      }
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 16))(v18, a3, a4);
        int v26 = *(void (**)(uint64_t))(*(void *)v18 + 8);
        v26(v18);
      }
    }
  }
}

void WebKit::NetworkProcessConnection::didFinishPreconnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  {
    unsigned int v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v25);
  }
  uint64_t v4 = *(void *)(WebKit::WebProcess::singleton(void)::process + 320);
  uint64_t v7 = *(void *)(v4 + 72);
  uint64_t v5 = (uint64_t *)(v4 + 72);
  uint64_t v6 = v7;
  if (v7)
  {
    unsigned int v8 = *(_DWORD *)(v6 - 8);
    unint64_t v9 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    uint64_t v12 = v8 & ((v11 >> 31) ^ v11);
    uint64_t v13 = *(void *)(v6 + 16 * v12);
    if (v13 != a2)
    {
      int v14 = 1;
      while (v13)
      {
        uint64_t v12 = (v12 + v14) & v8;
        uint64_t v13 = *(void *)(v6 + 16 * v12);
        ++v14;
        if (v13 == a2) {
          goto LABEL_9;
        }
      }
      uint64_t v12 = *(unsigned int *)(v6 - 4);
    }
LABEL_9:
    if (v12 != *(_DWORD *)(v6 - 4))
    {
      uint64_t v15 = (void *)(v6 + 16 * v12);
      uint64_t v16 = v15[1];
      v15[1] = 0;
      uint64_t v17 = *v5;
      if (!*v5 || (v17 += 16 * *(unsigned int *)(v17 - 4), (void *)v17 != v15))
      {
        if ((void *)v17 != v15)
        {
          *uint64_t v15 = -1;
          v15[1] = 0;
          ++*(_DWORD *)(*v5 - 16);
          uint64_t v18 = *v5;
          int v19 = *v5 ? *(_DWORD *)(v18 - 12) - 1 : -1;
          *(_DWORD *)(v18 - 12) = v19;
          uint64_t v20 = *v5;
          if (*v5)
          {
            unsigned int v21 = 6 * *(_DWORD *)(v20 - 12);
            unsigned int v22 = *(_DWORD *)(v20 - 4);
            if (v21 < v22 && v22 >= 9) {
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(WebCore::ResourceError const&)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v5, v22 >> 1);
            }
          }
        }
      }
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, a3);
        unsigned int v24 = *(void (**)(uint64_t))(*(void *)v16 + 8);
        v24(v16);
      }
    }
  }
}

void WebKit::NetworkProcessConnection::cookieAcceptPolicyChanged(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 96) != a2)
  {
    *(unsigned char *)(a1 + 96) = a2;
    {
      unsigned int v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v3);
    }
    uint64_t v2 = (WebKit::WebCookieCache *)(*(void *)(WebKit::WebProcess::singleton(void)::process + 408) + 32);
    WebKit::WebCookieCache::clear(v2);
  }
}

uint64_t WebKit::NetworkProcessConnection::cookiesAdded(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  {
    uint64_t v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  uint64_t v3 = *(void *)(WebKit::WebProcess::singleton(void)::process + 408);

  return WebKit::WebCookieJar::cookiesAdded(v3, a2, a3);
}

uint64_t WebKit::NetworkProcessConnection::cookiesDeleted(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  {
    uint64_t v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  uint64_t v3 = *(void *)(WebKit::WebProcess::singleton(void)::process + 408);

  return WebKit::WebCookieJar::cookiesDeleted(v3, a2, a3);
}

void WebKit::NetworkProcessConnection::allCookiesDeleted(WebKit::NetworkProcessConnection *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  uint64_t v1 = (WebKit::WebCookieCache *)(*(void *)(WebKit::WebProcess::singleton(void)::process + 408) + 32);

  WebKit::WebCookieCache::clear(v1);
}

uint64_t *WebKit::NetworkProcessConnection::updateCachedCookiesEnabled(WebKit::NetworkProcessConnection *this)
{
  {
    uint64_t v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v3);
  }
  uint64_t v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;

  return WebKit::WebProcess::updateCachedCookiesEnabled(v1);
}

unsigned int *WebKit::NetworkProcessConnection::didCacheResource(WebCore::MemoryCache *a1)
{
  WebCore::MemoryCache::singleton(a1);
  {
LABEL_9:
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  if (!*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 672))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = (unsigned int *)WebCore::MemoryCache::resourceForRequest();
  if (result)
  {
    uint64_t v2 = (WebCore::CachedResource *)result;
    uint64_t result = (unsigned int *)WebCore::ShareableResourceHandle::tryWrapInSharedBuffer();
    if (v5)
    {
      WebCore::CachedResource::tryReplaceEncodedData(v2, v5);
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v5, v3);
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcessConnection::idbConnectionToServer(WebKit::NetworkProcessConnection *this)
{
  uint64_t result = *((void *)this + 9);
  if (!result)
  {
    WebKit::WebIDBConnectionToServer::create(&v8);
    uint64_t v4 = v8;
    unsigned int v8 = 0;
    uint64_t v5 = *((void *)this + 9);
    *((void *)this + 9) = v4;
    if (v5)
    {
      WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref((_DWORD *)(v5 + 24), v3);
      uint64_t v7 = v8;
      unsigned int v8 = 0;
      if (v7) {
        WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref((_DWORD *)v7 + 6, v6);
      }
    }
    return *((void *)this + 9);
  }
  return result;
}

uint64_t WebKit::NetworkProcessConnection::messagesAvailableForPort(uint64_t a1, uint64_t a2)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }

  return MEMORY[0x1F416CAE8](a2);
}

void WebKit::NetworkProcessConnection::broadcastConsoleMessage(uint64_t a1, char a2, char a3, uint64_t a4)
{
  char v9 = a2;
  char v8 = a3;
  if (atomic_load(MEMORY[0x1E4FB6508]))
  {
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x20);
    *uint64_t v6 = &unk_1EE9F1C20;
    v6[1] = &v9;
    uint64_t v6[2] = &v8;
    v6[3] = a4;
    uint64_t v7 = v6;
    WebCore::Page::forEachPage();
    if (v7) {
      (*(void (**)(void *))(*v7 + 8))(v7);
    }
  }
}

void WebKit::NetworkProcessConnection::loadCancelledDownloadRedirectRequestInFrame(uint64_t a1, WebCore::ResourceRequestBase *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  {
    uint64_t v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v17);
  }
  *(void *)long long buf = a5;
  uint64_t v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), buf);
  uint64_t v9 = v8;
  if (v8)
  {
    CFRetain(*(CFTypeRef *)(v8 + 8));
    {
      uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v18);
    }
    if (WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, a3, a4))
    {
      *(void *)long long buf = 0;
      buf[8] = 0;
      char v21 = 0;
      LOBYTE(v22) = 0;
      char v24 = 0;
      unint64_t v10 = WebCore::ResourceRequest::ResourceRequest((StringImpl *)&v25);
      v29[144] = 0;
      __int16 v30 = 0;
      __int16 v32 = 0;
      char v33 = 0;
      char v34 = 0;
      __int16 v35 = 0;
      char v36 = 0;
      char v37 = 0;
      char v38 = 0;
      char v39 = 0;
      char v40 = 0;
      __int16 v41 = 0;
      char v42 = 0;
      char v43 = 0;
      long long v28 = 0u;
      memset(v29, 0, 25);
      long long v27 = 0u;
      *(_DWORD *)((char *)v31 + 7) = 0;
      uint64_t v31[2] = 0;
      v31[0] = 0;
      uint64_t v22 = a3;
      uint64_t v23 = a4;
      if (!v24) {
        char v24 = 1;
      }
      WebCore::ResourceRequestBase::operator=((uint64_t)v10, (uint64_t)a2);
      unint64_t v11 = (const void *)*((void *)a2 + 24);
      if (v11) {
        CFRetain(v11);
      }
      CFTypeRef v12 = cf;
      CFTypeRef cf = v11;
      if (v12) {
        CFRelease(v12);
      }
      WebKit::WebPage::loadRequest(v9, (uint64_t)buf);
      WebKit::LoadParameters::~LoadParameters((WebKit::LoadParameters *)buf, v13);
LABEL_14:
      CFRelease(*(CFTypeRef *)(v9 + 8));
      return;
    }
  }
  int v14 = qword_1EB358960;
  if (os_log_type_enabled((os_log_t)qword_1EB358960, OS_LOG_TYPE_ERROR))
  {
    WebCore::ResourceRequestBase::url(a2);
    WTF::String::utf8();
    uint64_t v15 = v19 ? (uint64_t)v19 + 16 : 0;
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v15;
    _os_log_error_impl(&dword_1985F2000, v14, OS_LOG_TYPE_ERROR, "Trying to load Invalid page or frame for %s", buf, 0xCu);
    if (v19)
    {
      if (*(_DWORD *)v19 == 1) {
        WTF::fastFree(v19, v16);
      }
      else {
        --*(_DWORD *)v19;
      }
    }
  }
  if (v9) {
    goto LABEL_14;
  }
}

uint64_t WebKit::NetworkProcessConnection::connectToRTCDataChannelRemoteSource(WebKit::RTCDataChannelRemoteManager *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v11 = (uint64_t *)WebKit::RTCDataChannelRemoteManager::sharedManager(a1);
  BOOL v12 = WebKit::RTCDataChannelRemoteManager::connectToRemoteSource(v11, a2, a3, a4, a5);
  uint64_t v13 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v12 | 0x100);
  int v14 = *(uint64_t (**)(uint64_t))(*(void *)v13 + 8);

  return v14(v13);
}

uint64_t WebKit::WebLoaderStrategy::internallyFailedLoadTimerFired(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  if (v1)
  {
    uint64_t v2 = *(unsigned int *)(v1 - 12);
    if (v2)
    {
      if (v2 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        uint64_t v3 = this;
        uint64_t v4 = WTF::fastMalloc((WTF *)(8 * v2));
        uint64_t v6 = (WTF *)v4;
        uint64_t v7 = *(void *)(v3 + 8);
        if (v7 && *(_DWORD *)(v7 - 12))
        {
          uint64_t v8 = *(unsigned int *)(v7 - 4);
          if (v8)
          {
            uint64_t v9 = 8 * v8;
            for (int i = *(uint64_t **)(v3 + 8); (unint64_t)(*i + 1) <= 1; ++i)
            {
              v9 -= 8;
              if (!v9) {
                return WTF::fastFree(v6, v5);
              }
            }
          }
          else
          {
            int i = *(uint64_t **)(v3 + 8);
          }
          unint64_t v11 = (uint64_t *)(v7 + 8 * v8);
          if (v11 != i)
          {
            unsigned int v12 = 0;
            uint64_t v13 = *i;
            int v14 = 1;
LABEL_14:
            unsigned int v15 = v14;
            if (v13) {
              ++*(_DWORD *)(v13 + 16);
            }
            unsigned int v16 = v12 + 1;
            *(void *)(v4 + 8 * v12) = v13;
            while (++i != v11)
            {
              uint64_t v13 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                ++v14;
                ++v12;
                if (i != v11) {
                  goto LABEL_14;
                }
                break;
              }
            }
            if (v16)
            {
              uint64_t v17 = 8 * v15;
              uint64_t v18 = v4;
              do
              {
                uint64_t v19 = *(void *)v18;
                WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*(void *)v18 + 336));
                WebCore::createInternalError();
                (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v19 + 240))(v19, &v27);
                CFTypeRef v20 = cf;
                CFTypeRef cf = 0;
                if (v20) {
                  CFRelease(v20);
                }
                char v21 = v29;
                uint64_t v29 = 0;
                if (v21)
                {
                  if (*(_DWORD *)v21 == 2) {
                    WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v5);
                  }
                  else {
                    *(_DWORD *)v21 -= 2;
                  }
                }
                uint64_t v22 = v28;
                long long v28 = 0;
                if (v22)
                {
                  if (*(_DWORD *)v22 == 2) {
                    WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v5);
                  }
                  else {
                    *(_DWORD *)v22 -= 2;
                  }
                }
                uint64_t v23 = v27;
                long long v27 = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2) {
                    WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v5);
                  }
                  else {
                    *(_DWORD *)v23 -= 2;
                  }
                }
                v18 += 8;
                v17 -= 8;
              }
              while (v17);
              uint64_t v24 = 8 * v15;
              uint64_t v25 = v6;
              do
              {
                int v26 = *(_DWORD **)v25;
                *(void *)uint64_t v25 = 0;
                if (v26)
                {
                  if (v26[4] == 1) {
                    (*(void (**)(_DWORD *))(*(void *)v26 + 8))(v26);
                  }
                  else {
                    --v26[4];
                  }
                }
                uint64_t v25 = (WTF *)((char *)v25 + 8);
                v24 -= 8;
              }
              while (v24);
            }
          }
        }
        return WTF::fastFree(v6, v5);
      }
    }
  }
  return this;
}

void WebKit::WebLoaderStrategy::~WebLoaderStrategy(WebKit::WebLoaderStrategy *this, void *a2)
{
  uint64_t v3 = *((unsigned int *)this + 23);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)*((void *)this + 10);
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4;
      uint64_t *v4 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = (WTF *)*((void *)this + 10);
  if (v7)
  {
    *((void *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v7, a2);
  }
  uint64_t v8 = *((void *)this + 9);
  if (v8) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(WebCore::ResourceError const&)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v8, a2);
  }
  uint64_t v9 = *((void *)this + 8);
  if (v9) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v9, a2);
  }
  uint64_t v10 = *((void *)this + 7);
  if (v10)
  {
    uint64_t v11 = *(unsigned int *)(v10 - 4);
    if (v11)
    {
      unsigned int v12 = (unsigned int **)(v10 + 8);
      do
      {
        if (*(v12 - 1) != (unsigned int *)-1)
        {
          uint64_t v13 = *v12;
          IPC::Encoder *v12 = 0;
          if (v13)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v13);
              WTF::fastFree((WTF *)v13, a2);
            }
          }
        }
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((WTF *)(v10 - 16), a2);
  }
  uint64_t v14 = *((void *)this + 6);
  if (v14) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v14, a2);
  }
  *((void *)this + 2) = &unk_1EE9B3390;
  uint64_t v15 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebLoaderStrategy *)((char *)this + 16));
  uint64_t v17 = *((void *)this + 1);
  if (v17)
  {
    uint64_t v18 = *(unsigned int *)(v17 - 4);
    if (v18)
    {
      uint64_t v19 = (_DWORD **)*((void *)this + 1);
      do
      {
        CFTypeRef v20 = *v19;
        if (*v19 != (_DWORD *)-1)
        {
          WTF *v19 = 0;
          if (v20)
          {
            if (v20[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v20 + 8))(v20);
            }
            else {
              --v20[4];
            }
          }
        }
        ++v19;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree((WTF *)(v17 - 16), v16);
  }

  MEMORY[0x1F416D9E8](this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebLoaderStrategy::~WebLoaderStrategy(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebLoaderStrategy::loadResource(uint64_t a1, uint64_t a2, WebCore::CachedResource *a3, WebCore::ResourceRequestBase *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12 = *(void *)(*(void *)(a2 + 128) + 8);
  if (((*((unsigned char *)a3 + 556) & 0x1F) != 0 || v12 != a2) && v12 && *(unsigned char *)(v12 + 144) == 0)
  {
    uint64_t v15 = *(WebCore::Document **)(v12 + 296);
    if (v15)
    {
      if (WebCore::Document::loader(*(WebCore::Document **)(v12 + 296)))
      {
        WebCore::Document::loader(v15);
        WebCore::ResourceRequestBase::setIsAppInitiated(a4);
      }
    }
  }
  uint64_t v22 = a1;
  char v23 = *(unsigned char *)(a5 + 5);
  uint64_t v16 = *a6;
  *a6 = 0;
  uint64_t v24 = v16;
  WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v25, a3);
  atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
  uint64_t v26 = a2;
  uint64_t v17 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v17 = &unk_1EE9F1C70;
  *(void *)(v17 + 8) = v22;
  *(unsigned char *)(v17 + ++*(_DWORD *)(this + 16) = v23;
  *(void *)(v17 + 24) = v24;
  WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)(v17 + 32), (const WebCore::CachedResourceHandleBase *)&v25);
  uint64_t v18 = v26;
  uint64_t v26 = 0;
  uint64_t v27 = v17;
  *(void *)(v17 + 40) = v18;
  WebCore::SubresourceLoader::create();
  uint64_t v19 = v27;
  uint64_t v27 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = v26;
  uint64_t v26 = 0;
  if (v20) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v20 + 8));
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v25);
  return 0;
}

uint64_t WebKit::WebLoaderStrategy::schedulePluginStreamLoad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = *a5;
  *a5 = 0;
  atomic_fetch_add((atomic_uint *volatile)(a2 + 8), 1u);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v8 = &unk_1EE9F1C98;
  v8[1] = a1;
  void v8[2] = v7;
  v8[3] = a2;
  uint64_t v10 = v8;
  WebCore::NetscapePlugInStreamLoader::create();
  uint64_t result = (uint64_t)v10;
  if (v10) {
    return (*(uint64_t (**)(void *))(*v10 + 8))(v10);
  }
  return result;
}

void WebKit::WebLoaderStrategy::scheduleLoad(WebKit::WebLoaderStrategy *this, String *a2, WebCore::CachedResource *a3, char a4)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t m_ptr = (uint64_t)a2[93].m_impl.m_ptr;
  uint64_t v67 = m_ptr;
  uint64_t v9 = (WebCore::FrameLoader *)WebCore::ResourceLoader::frameLoader((WebCore::ResourceLoader *)a2);
  uint64_t v10 = (WebKit::WebFrame **)*((void *)v9 + 2);
  *(void *)&long long v64 = 0;
  if ((*((uint64_t (**)(WebKit::WebFrame **))*v10 + 134))(v10))
  {
    if (!(*((unsigned int (**)(WebKit::WebFrame **))*v10 + 135))(v10)) {
      goto LABEL_8;
    }
    uint64_t v11 = v10[1];
  }
  else
  {
    uint64_t v12 = WebKit::WebLocalFrameLoaderClient::webPageProxyID(v10);
    if (v13) {
      uint64_t v11 = (WebKit::WebFrame *)v12;
    }
    else {
      uint64_t v11 = 0;
    }
  }
  *(void *)&long long v64 = v11;
LABEL_8:
  uint64_t v14 = (WebCore::Frame *)WebCore::FrameLoader::frame(v9);
  uint64_t v15 = WebCore::Frame::pageID(v14);
  if (v16) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = 0;
  }
  *((void *)&v64 + 1) = v17;
  uint64_t v18 = WebCore::FrameLoader::frameID(v9);
  *(void *)&long long v65 = v18;
  *((void *)&v65 + 1) = v19;
  uint64_t v66 = m_ptr;
  if (WebCore::DocumentLoader::scheduleArchiveLoad())
  {
    uint64_t v20 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = WebCore::ResourceLoader::frameLoader((WebCore::ResourceLoader *)a2);
      uint64_t v22 = a2[4].m_impl.m_ptr;
      *(_DWORD *)long long buf = 134219520;
      *(void *)&uint8_t buf[4] = this;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a2;
      __int16 v70 = 2048;
      uint64_t v71 = v21;
      __int16 v72 = 2048;
      uint64_t v73 = v22;
      __int16 v74 = 2048;
      uint64_t v75 = v17;
      __int16 v76 = 2048;
      uint64_t v77 = v18;
      __int16 v78 = 2048;
      uint64_t v79 = m_ptr;
      _os_log_impl(&dword_1985F2000, v20, OS_LOG_TYPE_DEFAULT, "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderStrategy::scheduleLoad: URL will be handled as an archive resource", buf, 0x48u);
    }
    ++LODWORD(a2[2].m_impl.m_ptr);
    uint64_t v68 = a2;
    uint64_t v23 = WTF::fastMalloc((WTF *)0x60);
    *(void *)&v80[0] = WebKit::WebResourceLoader::WebResourceLoader(v23, (uint64_t *)&v68, &v64);
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::Ref<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>((uint64_t)buf, (uint64_t *)this + 6, &v67, (uint64_t *)v80);
    if (*(void *)&v80[0])
    {
      if (*(_DWORD *)(*(void *)&v80[0] + 8) == 1) {
        (*(void (**)(void))(**(void **)&v80[0] + 8))();
      }
      else {
        --*(_DWORD *)(*(void *)&v80[0] + 8);
      }
    }
    if (v68)
    {
      if (LODWORD(v68[2].m_impl.m_ptr) == 1) {
        (*((void (**)(void))v68->m_impl.m_ptr + 1))();
      }
      else {
        --LODWORD(v68[2].m_impl.m_ptr);
      }
    }
    return;
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)&a2[42]);
  if (WTF::URL::protocolIs())
  {
    uint64_t v24 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = WebCore::ResourceLoader::frameLoader((WebCore::ResourceLoader *)a2);
      uint64_t v26 = a2[4].m_impl.m_ptr;
      *(_DWORD *)long long buf = 134219520;
      *(void *)&uint8_t buf[4] = this;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a2;
      __int16 v70 = 2048;
      uint64_t v71 = v25;
      __int16 v72 = 2048;
      uint64_t v73 = v26;
      __int16 v74 = 2048;
      uint64_t v75 = v17;
      __int16 v76 = 2048;
      uint64_t v77 = v18;
      __int16 v78 = 2048;
      uint64_t v79 = m_ptr;
      uint64_t v27 = "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderS"
            "trategy::scheduleLoad: URL will be loaded as data";
LABEL_22:
      _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, v27, buf, 0x48u);
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  long long v28 = (WebCore *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)&a2[42]);
  if (WebCore::isQuickLookPreviewURL(v28, v29))
  {
    uint64_t v24 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = WebCore::ResourceLoader::frameLoader((WebCore::ResourceLoader *)a2);
      uint64_t v31 = a2[4].m_impl.m_ptr;
      *(_DWORD *)long long buf = 134219520;
      *(void *)&uint8_t buf[4] = this;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a2;
      __int16 v70 = 2048;
      uint64_t v71 = v30;
      __int16 v72 = 2048;
      uint64_t v73 = v31;
      __int16 v74 = 2048;
      uint64_t v75 = v17;
      __int16 v76 = 2048;
      uint64_t v77 = v18;
      __int16 v78 = 2048;
      uint64_t v79 = m_ptr;
      uint64_t v27 = "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderS"
            "trategy::scheduleLoad: URL will be handled as a QuickLook resource";
      goto LABEL_22;
    }
LABEL_23:
    WebKit::WebLoaderStrategy::startLocalLoad(this, (WebCore::ResourceLoader *)a2);
    return;
  }
  uint64_t v68 = 0;
  __int16 v32 = *(void **)(WebCore::ResourceLoader::frameLoader((WebCore::ResourceLoader *)a2) + 16);
  if ((*(uint64_t (**)(void *))(*v32 + 1072))(v32))
  {
    uint64_t v53 = *(void *)(WebCore::ResourceLoader::frameLoader((WebCore::ResourceLoader *)a2) + 16);
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v53 + 1080))(v53)) {
      goto LABEL_45;
    }
    if (!*(unsigned char *)(v53 + 64)) {
      goto LABEL_45;
    }
    long long v54 = *(_OWORD *)(v53 + 48);
    v80[0] = *(_OWORD *)(v53 + 32);
    v80[1] = v54;
    uint64_t v55 = WebCore::Page::serviceWorkerPage();
    if (!v55) {
      goto LABEL_45;
    }
    char v56 = *(void **)(*(void *)(v55 + 48) + 16);
    if ((*(uint64_t (**)(void *))(*v56 + 1368))(v56))
    {
      uint64_t v58 = 0;
    }
    else
    {
      uint64_t v57 = *(void *)(v56[2] + 8);
      if (v57) {
        uint64_t v58 = v57 - 16;
      }
      else {
        uint64_t v58 = 0;
      }
    }
    WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>::operator=((uint64_t *)&v68, v58);
    __int16 v41 = v68;
    if (v68 && (uint64_t v59 = v68[6].m_impl.m_ptr) != 0 && (v60 = *((void *)v59 + 20)) != 0)
    {
      WebKit::WebFrame::fromCoreFrame(v60, buf);
      __int16 v41 = v68;
      uint64_t v34 = *(void *)buf;
    }
    else
    {
      uint64_t v34 = 0;
    }
  }
  else
  {
    uint64_t v34 = v32[2];
    if (v34) {
      CFRetain(*(CFTypeRef *)(v34 + 8));
    }
    uint64_t v35 = *(void *)(v34 + 24);
    if (v35
      && (uint64_t v36 = *(void *)(v35 + 8)) != 0
      && (uint64_t v37 = *(void *)(v36 + 24)) != 0
      && (uint64_t v38 = *(void *)(v37 + 8)) != 0
      && (char v39 = *(void **)(*(void *)(v38 + 48) + 16),
          ((*(uint64_t (**)(void *))(*v39 + 1368))(v39) & 1) == 0)
      && (uint64_t v40 = *(void *)(v39[2] + 8)) != 0)
    {
      __int16 v41 = (String *)(v40 - 16);
      CFRetain(*(CFTypeRef *)(v40 - 8));
    }
    else
    {
      __int16 v41 = 0;
    }
    uint64_t v68 = v41;
  }
  if (!v41)
  {
    if (v34)
    {
      LOBYTE(v44) = 0;
      goto LABEL_42;
    }
LABEL_45:
    unsigned int v46 = atomic_load(MEMORY[0x1E4FB6508]);
    if (v46
      && WebCore::InspectorInstrumentationWebKit::shouldInterceptRequestInternal((WebCore::InspectorInstrumentationWebKit *)a2, v33))
    {
      ++LODWORD(a2[2].m_impl.m_ptr);
      uint64_t v50 = WTF::fastMalloc((WTF *)0x50);
      long long v51 = v65;
      *(_OWORD *)(v50 + 24) = v64;
      *(void *)uint64_t v50 = &unk_1EE9F1CC0;
      *(void *)(v50 + 8) = this;
      *(void *)(v50 + ++*(_DWORD *)(this + 16) = a2;
      *(_OWORD *)(v50 + 40) = v51;
      *(void *)(v50 + 56) = v66;
      *(unsigned char *)(v50 + 64) = a4;
      *(void *)(v50 + 72) = a3;
      *(void *)long long buf = v50;
      WebCore::InspectorInstrumentationWebKit::interceptRequestInternal();
      uint64_t v52 = *(void *)buf;
      *(void *)long long buf = 0;
      if (v52) {
        (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
      }
    }
    else
    {
      uint64_t v47 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v48 = WebCore::ResourceLoader::frameLoader((WebCore::ResourceLoader *)a2);
        uint64_t v49 = a2[4].m_impl.m_ptr;
        *(_DWORD *)long long buf = 134219520;
        *(void *)&uint8_t buf[4] = this;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = a2;
        __int16 v70 = 2048;
        uint64_t v71 = v48;
        __int16 v72 = 2048;
        uint64_t v73 = v49;
        __int16 v74 = 2048;
        uint64_t v75 = *((void *)&v64 + 1);
        __int16 v76 = 2048;
        uint64_t v77 = v65;
        __int16 v78 = 2048;
        uint64_t v79 = v66;
        _os_log_impl(&dword_1985F2000, v47, OS_LOG_TYPE_DEFAULT, "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderStrategy::scheduleLoad: URL will be scheduled with the NetworkProcess", buf, 0x48u);
      }
      WebKit::maximumBufferingTime((uint64_t)a3);
      WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess((uint64_t)this, (uint64_t)a2, (uint64_t)&a2[42]);
    }
    return;
  }
  if (!v34)
  {
    uint64_t v68 = 0;
    CFRelease(v41[1].m_impl.m_ptr);
    goto LABEL_45;
  }
  char v42 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)&a2[42]);
  *(void *)long long buf = WTF::URL::protocol(v42);
  *(void *)&buf[8] = v43;
  uint64_t v44 = WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTableTraits>::get<WTF::StringViewHashTranslator,WTF::StringView>((uint64_t *)&v41[260], (uint64_t *)buf);
  if (v44)
  {
    long long v61 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v62 = WebCore::ResourceLoader::frameLoader((WebCore::ResourceLoader *)a2);
      uint64_t v63 = a2[4].m_impl.m_ptr;
      *(_DWORD *)long long buf = 134219520;
      *(void *)&uint8_t buf[4] = this;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = a2;
      __int16 v70 = 2048;
      uint64_t v71 = v62;
      __int16 v72 = 2048;
      uint64_t v73 = v63;
      __int16 v74 = 2048;
      uint64_t v75 = *((void *)&v64 + 1);
      __int16 v76 = 2048;
      uint64_t v77 = v65;
      __int16 v78 = 2048;
      uint64_t v79 = v66;
      _os_log_impl(&dword_1985F2000, v61, OS_LOG_TYPE_DEFAULT, "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderStrategy::tryLoadingUsingURLSchemeHandler: URL will be handled by a UIProcess URL scheme handler", buf, 0x48u);
    }
    WebKit::WebURLSchemeHandlerProxy::startNewTask((WebKit::WebURLSchemeHandlerProxy *)v44, a2, (CFTypeRef *)v34);
    LOBYTE(v44) = 1;
  }
LABEL_42:
  CFRelease(*(CFTypeRef *)(v34 + 8));
  uint64_t v45 = v68;
  uint64_t v68 = 0;
  if (v45) {
    CFRelease(v45[1].m_impl.m_ptr);
  }
  if ((v44 & 1) == 0) {
    goto LABEL_45;
  }
}

WebCore::ResourceLoader *WebKit::WebLoaderStrategy::startLocalLoad(WebKit::WebLoaderStrategy *this, WebCore::ResourceLoader *a2)
{
  WebCore::ResourceLoader::start(a2);
  uint64_t v12 = *((void *)a2 + 93);
  ++*((_DWORD *)a2 + 4);
  uint64_t v10 = a2;
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  uint64_t v4 = WTF::fastMalloc((WTF *)0x60);
  uint64_t v11 = (_DWORD *)WebKit::WebResourceLoader::WebResourceLoader(v4, (uint64_t *)&v10, v8);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>((uint64_t)v7, (uint64_t *)this + 6, &v12, (uint64_t *)&v11);
  uint64_t v5 = v11;
  uint64_t v11 = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  uint64_t result = v10;
  if (v10)
  {
    if (*((_DWORD *)v10 + 4) == 1) {
      return (WebCore::ResourceLoader *)(*(uint64_t (**)(void))(*(void *)v10 + 8))();
    }
    else {
      --*((_DWORD *)v10 + 4);
    }
  }
  return result;
}

void WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x1F4188790](a1, a2, a3);
  uint64_t v6 = v5;
  char v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  char v13 = v4;
  v270 = (WebKit::WebLoaderStrategy *)v3;
  uint64_t v557 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = *((void *)v4 + 93);
  uint64_t v279 = v14;
  uint64_t v15 = *((void *)v4 + 4);
  if (!v15) {
    goto LABEL_9;
  }
  uint64_t v16 = *(void *)(v15 + 24);
  if (!v16 || !*(void *)(v16 + 8)) {
    goto LABEL_9;
  }
  if (*(void *)(*(void *)(v15 + 128) + 8) == v15 && WebCore::ResourceLoader::frameLoader(v4)) {
    WebCore::ResourceLoader::frameLoader(v13);
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v12);
  uint64_t v17 = WebCore::Page::allowsLoadFromURL();
  if (v17)
  {
LABEL_9:
    unsigned int v18 = *((unsigned __int8 *)v13 + 1090);
    char v19 = (*(uint64_t (**)(WebCore::ResourceLoader *))(*(void *)v13 + 248))(v13);
    Parameters = WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v377);
    uint64_t v492 = v14;
    long long v21 = v10[1];
    *(_OWORD *)v377 = *v10;
    *(_OWORD *)v378 = v21;
    int v381 = WebCore::presentingApplicationPID(Parameters);
    {
      v265 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v265);
    }
    v268 = v10;
    uint64_t v22 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    char v23 = *(unsigned char *)(v22 + 64);
    long long v24 = *(_OWORD *)(v22 + 48);
    long long v382 = *(_OWORD *)(v22 + 32);
    long long v383 = v24;
    char v384 = v23;
    WebCore::ResourceRequestBase::operator=((uint64_t)&v385, (uint64_t)v12);
    CFTypeRef v25 = v12[24];
    if (v25) {
      CFRetain(v12[24]);
    }
    int v26 = (v18 >> 1) & 1;
    int v27 = (v18 >> 2) & 1;
    CFTypeRef v28 = cf;
    CFTypeRef cf = v25;
    if (v28) {
      CFRelease(v28);
    }
    char isAllowedToAskUserForCredentials = 0;
    uint64_t v30 = (_DWORD *)((char *)v13 + 1090);
    char v387 = v26;
    char v388 = v27;
    char v389 = v19;
    if (v378[0] && v377[1]) {
      char isAllowedToAskUserForCredentials = WebCore::ResourceLoader::isAllowedToAskUserForCredentials(v13);
    }
    char v390 = isAllowedToAskUserForCredentials;
    char v391 = v8;
    char shouldIncludeCertificateInfo = WebCore::ResourceLoader::shouldIncludeCertificateInfo(v13);
    uint64_t v493 = v6;
    *(_DWORD *)((char *)v494 + 3) = *(_DWORD *)((char *)v13 + 979);
    v494[0] = *((_DWORD *)v13 + 244);
    WTF::String::operator=(&v495, (WTF::StringImpl **)v13 + 123);
    long long v31 = *((_OWORD *)v13 + 63);
    long long v496 = *((_OWORD *)v13 + 62);
    long long v497 = v31;
    v510[17] = (*v30 >> 20) & 3;
    uint64_t v32 = *((void *)v13 + 4);
    if (v32 && *(void *)(*(void *)(v32 + 128) + 8) == v32) {
      char v33 = (WebKit::NetworkResourceLoadParameters *)(*((unsigned char *)v13 + 977) == 0);
    }
    else {
      char v33 = 0;
    }
    WebKit::addParametersShared((WebKit *)v15, (const WebCore::LocalFrame *)v377, v33);
    if ((*v30 & 0x400000) != 0) {
      char v40 = 1;
    }
    else {
      char v40 = HIWORD(*v30) & 3;
    }
    char v545 = v40;
    BOOL v41 = *((void *)v13 + 128) != 0;
    uint64_t v546 = *((void *)v13 + 128);
    BOOL v547 = v41;
    char v548 = *((unsigned char *)v13 + 1089);
    if (*((void *)v13 + 137))
    {
      uint64_t v549 = *((void *)v13 + 137);
      char v550 = 1;
    }
    if (v15)
    {
      if (*(void *)(*(void *)(v15 + 128) + 8) != v15) {
        BOOL v556 = (*(void *)(*(void *)(v15 + 136) + 688) & 0x4000000000000000) != 0;
      }
      uint64_t v42 = *(void *)(v15 + 296);
      if (*((unsigned char *)v13 + 1052))
      {
        if (v42)
        {
          if ((WebCore::Document::shouldBypassMainWorldContentSecurityPolicy(*(WebCore::Document **)(v15 + 296)) & 1) == 0
            && (*((unsigned char *)v13 + 1091) & 1) != 0)
          {
            uint64_t v43 = (WebCore::ContentSecurityPolicy *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v42 + 208));
            if (v43)
            {
              WebCore::ContentSecurityPolicy::responseHeaders((uint64_t *)buf, v43);
              std::optional<WebCore::ContentSecurityPolicyResponseHeaders>::operator=[abi:sn180100]<WebCore::ContentSecurityPolicyResponseHeaders,void>((uint64_t)&v498, (uint64_t)buf);
LABEL_45:
              WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v44);
              goto LABEL_46;
            }
          }
        }
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v42 = 0;
      if (*((unsigned char *)v13 + 1052)) {
        goto LABEL_46;
      }
    }
    WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)buf, (uint64_t *)v13 + 129);
    *(_DWORD *)&uint8_t buf[16] = *((_DWORD *)v13 + 262);
    buf[20] = *((unsigned char *)v13 + 1052);
    unsigned char buf[24] = 1;
    if (!v502)
    {
      v498 = *(WTF **)buf;
      uint64_t v45 = *(void *)&buf[8];
      *(void *)long long buf = 0;
      *(void *)&buf[8] = 0;
      uint64_t v499 = v45;
      int v500 = *((_DWORD *)v13 + 262);
      char v501 = *((unsigned char *)v13 + 1052);
      char v502 = 1;
      goto LABEL_45;
    }
    if (HIDWORD(v499)) {
      WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(v498, (WTF *)((char *)v498 + 16 * HIDWORD(v499)));
    }
    v158 = v498;
    if (v498)
    {
      v498 = 0;
      LODWORD(v499) = 0;
      WTF::fastFree(v158, v44);
    }
    v498 = *(WTF **)buf;
    uint64_t v159 = *(void *)&buf[8];
    *(void *)long long buf = 0;
    *(void *)&buf[8] = 0;
    uint64_t v499 = v159;
    int v500 = *(_DWORD *)&buf[16];
    char v501 = buf[20];
    if (buf[24]) {
      goto LABEL_45;
    }
LABEL_46:
    if (*((unsigned char *)v13 + 1080))
    {
      __int16 v506 = *((_WORD *)v13 + 528);
      WTF::String::operator=(&v507, (WTF::StringImpl **)v13 + 133);
      WTF::String::operator=(&v508, (WTF::StringImpl **)v13 + 134);
    }
    if (!v15
      || (unsigned int v46 = *(void **)(*(void *)(v15 + 280) + 16),
          ((*(uint64_t (**)(void *))(*v46 + 1072))(v46) & 1) != 0))
    {
      int v48 = 0;
      uint64_t v47 = 0;
    }
    else
    {
      uint64_t v47 = v46[2];
      if (v47)
      {
        CFRetain(*(CFTypeRef *)(v47 + 8));
        char v269 = 0;
        __int16 isTopFrameNavigatingToAppBoundDomain = WebKit::WebFrame::isTopFrameNavigatingToAppBoundDomain((WebKit::WebFrame *)v47);
        int v48 = 1;
        if (!v42) {
          goto LABEL_70;
        }
        goto LABEL_55;
      }
      int v48 = 0;
    }
    char v269 = 1;
    if (!v42) {
      goto LABEL_70;
    }
LABEL_55:
    WTF::String::operator=(&v503, (WTF::StringImpl **)(v42 + 768));
    long long v49 = *(_OWORD *)(v42 + 776);
    long long v505 = *(_OWORD *)(v42 + 792);
    long long v504 = v49;
    uint64_t v50 = *(void *)(v42 + 544);
    if (v50)
    {
      uint64_t v51 = *(void *)(v50 + 8);
      if (v51)
      {
        uint64_t v52 = *(void *)(v51 + 24);
        if (v52)
        {
          uint64_t v53 = *(void *)(v52 + 8);
          if (v53)
          {
            WTF::String::operator=(&v551, (WTF::StringImpl **)(v53 + 168));
            long long v54 = *(_OWORD *)(v53 + 192);
            long long v552 = *(_OWORD *)(v53 + 176);
            long long v553 = v54;
          }
        }
      }
    }
    if (v48)
    {
      uint64_t v55 = *(void *)(v47 + 24);
      if (v55)
      {
        uint64_t v56 = *(void *)(v55 + 8);
        if (v56)
        {
          uint64_t v57 = *(void *)(v56 + 24);
          if (v57)
          {
            uint64_t v58 = *(void *)(v57 + 8);
            if (v58)
            {
              uint64_t v59 = *(void **)(*(void *)(v58 + 48) + 16);
              if (((*(uint64_t (**)(void *))(*v59 + 1368))(v59) & 1) == 0)
              {
                uint64_t v60 = *(void *)(v59[2] + 8);
                if (v60)
                {
                  uint64_t v61 = *(void *)(*(void *)(v60 + 608) + 64);
                  if (!v555) {
                    char v555 = 1;
                  }
                  uint64_t v554 = v61;
                }
              }
            }
          }
        }
      }
    }
LABEL_70:
    if ((*(unsigned int (**)(WebCore::ResourceLoader *))(*(void *)v13 + 184))(v13))
    {
      uint64_t v63 = (atomic_uint *)*((void *)v13 + 171);
      if (v63) {
        atomic_fetch_add(v63, 1u);
      }
      long long v64 = v380;
      v380 = (WTF *)v63;
      if (v64) {
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v64, v62);
      }
      uint64_t v65 = WebCore::SubresourceLoader::originalHeaders(v13);
      if (v65)
      {
        uint64_t v66 = v65;
        WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=((uint64_t)&v509, v65);
        WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=((uint64_t)v510, v66 + 16);
      }
    }
    uint64_t v67 = (atomic_uint *)v380;
    if (v42 && !v380)
    {
      uint64_t v67 = (atomic_uint *)WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v42 + 208));
      if (v67) {
        atomic_fetch_add(v67, 1u);
      }
      long long v69 = v380;
      v380 = (WTF *)v67;
      if (v69)
      {
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v69, v68);
        uint64_t v67 = (atomic_uint *)v380;
      }
    }
    if (!v67)
    {
      uint64_t v67 = (atomic_uint *)WebCore::ResourceRequestBase::httpOrigin((uint64_t *)buf, (WebCore::ResourceRequestBase *)v12);
      if (*(void *)buf)
      {
        WebCore::SecurityOrigin::createFromString((uint64_t *)&v274, (WebCore::SecurityOrigin *)buf, v70);
        __int16 v72 = v274;
        v274 = 0;
        uint64_t v73 = v380;
        v380 = v72;
        if (v73)
        {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v73, v71);
          __int16 v74 = v274;
          v274 = 0;
          if (v74) {
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v74, v71);
          }
        }
        uint64_t v67 = *(atomic_uint **)buf;
        *(void *)long long buf = 0;
        if (v67)
        {
          if (*v67 == 2)
          {
            uint64_t v67 = (atomic_uint *)WTF::StringImpl::destroy((WTF::StringImpl *)v67, v71);
            if (v33) {
              goto LABEL_92;
            }
            goto LABEL_122;
          }
          *v67 -= 2;
        }
      }
    }
    if (v33)
    {
LABEL_92:
      WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v12);
      if (WTF::URL::protocolIs()
        && (uint64_t v75 = *((void *)v13 + 5)) != 0
        && *(unsigned char *)(v75 + 1856)
        && (uint64_t v76 = *(void *)(v75 + 1632)) != 0
        && *(_DWORD *)(v76 + 4)
        && (uint64_t v78 = *(void *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v75 + 1872))) != 0
        && *(_DWORD *)(v78 + 4)
        && (uint64_t v79 = *((void *)v13 + 5), *(unsigned char *)(v79 + 1856)))
      {
        uint64_t v80 = *(atomic_uint **)(v79 + 1680);
        if (v80) {
          atomic_fetch_add(v80, 1u);
        }
        uint64_t v67 = (atomic_uint *)v379;
        v379 = (WTF *)v80;
        if (!v67)
        {
LABEL_106:
          if (!v42) {
            goto LABEL_126;
          }
          goto LABEL_125;
        }
      }
      else
      {
        uint64_t v81 = (WebCore::SecurityOrigin *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v12);
        WebCore::SecurityOrigin::create((uint64_t *)buf, v81, v82);
        char v84 = *(WTF **)buf;
        *(void *)long long buf = 0;
        uint64_t v67 = (atomic_uint *)v379;
        v379 = v84;
        if (!v67) {
          goto LABEL_106;
        }
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v67, v83);
        uint64_t v67 = *(atomic_uint **)buf;
        *(void *)long long buf = 0;
        if (!v67) {
          goto LABEL_106;
        }
      }
      uint64_t v67 = (atomic_uint *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v67, v77);
      goto LABEL_106;
    }
LABEL_122:
    if (!v42)
    {
LABEL_126:
      if (BYTE1(v494[0]) && !v380)
      {
        long long v92 = off_1EB358988;
        if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
        {
          uint64_t v93 = WebCore::ResourceLoader::frameLoader(v13);
          uint64_t v94 = *((void *)v13 + 4);
          uint64_t v95 = *((void *)v268 + 1);
          uint64_t v96 = *((void *)v268 + 2);
          uint64_t v97 = *((void *)v268 + 4);
          int v98 = WebCore::ResourceRequestBase::priority((WebCore::ResourceLoader *)((char *)v13 + 336));
          *(_DWORD *)long long buf = 134219776;
          *(void *)&uint8_t buf[4] = v270;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v13;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = v93;
          *(_WORD *)v281 = 2048;
          *(void *)&v281[2] = v94;
          *(_WORD *)&v281[10] = 2048;
          *(void *)&v281[12] = v95;
          *(_WORD *)&v281[20] = 2048;
          *(void *)&v281[22] = v96;
          *(_WORD *)&v281[30] = 2048;
          uint64_t v282 = v97;
          LOWORD(v283) = 1024;
          *(_DWORD *)((char *)&v283 + 2) = v98;
          v99 = "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoa"
                "derStrategy::scheduleLoad: no sourceOrigin (priority=%d)";
LABEL_216:
          _os_log_error_impl(&dword_1985F2000, v92, OS_LOG_TYPE_ERROR, v99, buf, 0x4Eu);
          goto LABEL_204;
        }
        goto LABEL_204;
      }
      v510[16] = *(unsigned char *)(WebCore::DeprecatedGlobalSettings::shared((WebCore::DeprecatedGlobalSettings *)v67) + 22);
      unsigned __int8 v393 = v33;
      if (v33 && v42)
      {
        uint64_t v100 = WebCore::Document::crossOriginOpenerPolicy((WebCore::Document *)v42);
        long long v101 = (WTF::StringImpl **)(v100 + 16);
        __int16 v522 = *(_WORD *)v100;
        WTF::String::operator=(&v523, (WTF::StringImpl **)(v100 + 8));
        WTF::String::operator=(v524, v101);
      }
      if (!*((void *)v13 + 4)
        || *((unsigned char *)v13 + 977)
        || ((v48 ^ 1) & 1) != 0
        || !WebKit::WebFrame::frameLoaderClient((WebKit::WebFrame *)v47))
      {
LABEL_154:
        if (v490)
        {
          uint64_t v108 = *((void *)v13 + 5);
          if (v108)
          {
            BOOL v109 = *(void *)(v108 + 2528) != 0;
            v524[1] = *(void *)(v108 + 2528);
            BOOL v525 = v109;
            v110 = (WTF::StringImpl **)(v108 + 1632);
            if (v544 == *(unsigned char *)(v108 + 1856))
            {
              if (v544)
              {
                WTF::String::operator=(&v526, v110);
                long long v161 = *(_OWORD *)(v108 + 1640);
                long long v528 = *(_OWORD *)(v108 + 1656);
                long long v527 = v161;
                v162 = *(atomic_uint **)(v108 + 1672);
                atomic_fetch_add(v162, 1u);
                v163 = v529;
                v529 = (WTF *)v162;
                if (v163) {
                  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v163, v160);
                }
                v164 = *(atomic_uint **)(v108 + 1680);
                atomic_fetch_add(v164, 1u);
                v165 = v530;
                v530 = (WTF *)v164;
                if (v165) {
                  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v165, v160);
                }
                WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v531, v108 + 1688);
                unsigned int v166 = *(_DWORD *)(v108 + 1704);
                char v532 = *(unsigned char *)(v108 + 1708);
                v531[4] = v166;
                __int16 v533 = *(_WORD *)(v108 + 1712);
                WTF::String::operator=(&v534, (WTF::StringImpl **)(v108 + 1720));
                WTF::String::operator=(&v535, (WTF::StringImpl **)(v108 + 1728));
                __int16 v536 = *(_WORD *)(v108 + 1736);
                WTF::String::operator=(&v537, (WTF::StringImpl **)(v108 + 1744));
                WTF::String::operator=(&v538, (WTF::StringImpl **)(v108 + 1752));
                char v539 = *(unsigned char *)(v108 + 1760);
                long long v167 = *(_OWORD *)(v108 + 1784);
                long long v168 = *(_OWORD *)(v108 + 1800);
                long long v169 = *(_OWORD *)(v108 + 1816);
                *(_OWORD *)((char *)v543 + 10) = *(_OWORD *)(v108 + 1826);
                v543[0] = v169;
                long long v542 = v168;
                long long v541 = v167;
                long long v540 = *(_OWORD *)(v108 + 1768);
              }
            }
            else if (v544)
            {
              WebCore::NavigationRequester::~NavigationRequester((WebCore::NavigationRequester *)&v526, (WTF::StringImpl *)v110);
              char v544 = 0;
            }
            else
            {
              std::construct_at[abi:sn180100]<WebCore::NavigationRequester,WebCore::NavigationRequester const&,WebCore::NavigationRequester*>((uint64_t)&v526, (uint64_t)v110);
              char v544 = 1;
            }
          }
        }
        if (v42) {
          int v111 = (*(unsigned __int8 *)(*(void *)(v42 + 712) + 673) >> 1) & 1;
        }
        else {
          LOBYTE(v111) = 0;
        }
        char v516 = v111;
        if (v15)
        {
          char isDisplayingInitialEmptyDocument = WebCore::FrameLoaderStateMachine::isDisplayingInitialEmptyDocument((WebCore::FrameLoaderStateMachine *)(*(void *)(v15 + 280) + 64));
          __int16 v518 = WebCore::FrameLoader::effectiveSandboxFlags(*(WebCore::FrameLoader **)(v15 + 280));
          uint64_t v112 = *(void *)(v15 + 160);
          if (v112)
          {
            uint64_t v113 = *(void *)(v112 + 8);
            if (v113)
            {
              if (!*(unsigned char *)(v113 + 144))
              {
                uint64_t v114 = *(void *)(v113 + 296);
                if (v114)
                {
                  uint64_t v115 = v114 + 768;
                  WTF::String::operator=(&v519, (WTF::StringImpl **)(v114 + 768));
                  long long v116 = *(_OWORD *)(v115 + 24);
                  long long v520 = *(_OWORD *)(v115 + 8);
                  long long v521 = v116;
                }
              }
            }
          }
        }
        else
        {
          char isDisplayingInitialEmptyDocument = 0;
        }
        int v117 = v393;
        v510[18] = v393 ^ 1;
        if (!*((unsigned char *)v13 + 977))
        {
          *(void *)long long buf = 0;
          *(void *)&buf[8] = 0;
          char v118 = (WebCore::SecurityOrigin *)WebCore::FrameTree::parent((WebCore::FrameTree *)(*((void *)v13 + 4) + 48));
          if (v118)
          {
            char v120 = v118;
            do
            {
              if (*((unsigned char *)v120 + 144)) {
                uint64_t v121 = WebCore::SecurityOrigin::opaqueOrigin(v118);
              }
              else {
                uint64_t v121 = WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*((void *)v120 + 37)
              }
                                                                                           + 208));
              v122 = (atomic_uint *)v121;
              uint64_t v123 = *(unsigned int *)&buf[12];
              if (*(_DWORD *)&buf[12] == *(_DWORD *)&buf[8])
              {
                unint64_t v124 = *(unsigned int *)&buf[12] + ((unint64_t)*(unsigned int *)&buf[12] >> 2);
                if (v124 >= 0x10) {
                  unint64_t v125 = v124 + 1;
                }
                else {
                  unint64_t v125 = 16;
                }
                if (v125 <= (unint64_t)*(unsigned int *)&buf[12] + 1) {
                  unint64_t v126 = *(unsigned int *)&buf[12] + 1;
                }
                else {
                  unint64_t v126 = v125;
                }
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)buf, v126);
                uint64_t v123 = *(unsigned int *)&buf[12];
              }
              v127 = (atomic_uint **)(*(void *)buf + 8 * v123);
              atomic_fetch_add(v122, 1u);
              *v127 = v122;
              ++*(_DWORD *)&buf[12];
              char v118 = (WebCore::SecurityOrigin *)WebCore::FrameTree::parent((WebCore::SecurityOrigin *)((char *)v120 + 48));
              char v120 = v118;
            }
            while (v118);
          }
          if (HIDWORD(v512))
          {
            v170 = v511;
            uint64_t v171 = 8 * HIDWORD(v512);
            do
            {
              uint64_t v172 = *(void *)v170;
              *(void *)v170 = 0;
              if (v172) {
                WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v172, v119);
              }
              v170 = (WTF *)((char *)v170 + 8);
              v171 -= 8;
            }
            while (v171);
          }
          v128 = v511;
          if (v511)
          {
            v511 = 0;
            LODWORD(v512) = 0;
            WTF::fastFree(v128, v119);
          }
          v511 = *(WTF **)buf;
          uint64_t v129 = *(void *)&buf[8];
          *(void *)long long buf = 0;
          *(void *)&buf[8] = 0;
          uint64_t v512 = v129;
          WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v119);
          int v117 = v393;
        }
        LOBYTE(v274) = 0;
        char v275 = 0;
        if (v117)
        {
          v130 = (WTF *)*((void *)v270 + 12);
          int v131 = *((unsigned __int8 *)v270 + 104);
          if (*((unsigned char *)v270 + 104)) {
            *((unsigned char *)v270 + 104) = 0;
          }
          v274 = v130;
          char v275 = v131;
        }
        else
        {
          int v131 = 0;
        }
        v132 = off_1EB358988;
        if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v133 = WebCore::ResourceLoader::frameLoader(v13);
          uint64_t v134 = *((void *)v13 + 4);
          uint64_t v136 = *((void *)v268 + 1);
          uint64_t v135 = *((void *)v268 + 2);
          uint64_t v137 = *((void *)v268 + 4);
          int v138 = WebCore::ResourceRequestBase::priority((WebCore::ResourceLoader *)((char *)v13 + 336));
          if (v131) {
            v139 = v274;
          }
          else {
            v139 = 0;
          }
          *(_DWORD *)long long buf = 134220032;
          *(void *)&uint8_t buf[4] = v270;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v13;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(void *)&unsigned char buf[24] = v133;
          *(_WORD *)v281 = 2048;
          *(void *)&v281[2] = v134;
          *(_WORD *)&v281[10] = 2048;
          *(void *)&v281[12] = v136;
          *(_WORD *)&v281[20] = 2048;
          *(void *)&v281[22] = v135;
          *(_WORD *)&v281[30] = 2048;
          uint64_t v282 = v137;
          LOWORD(v283) = 1024;
          *(_DWORD *)((char *)&v283 + 2) = v138;
          HIWORD(v283) = 2048;
          v284 = v139;
          _os_log_impl(&dword_1985F2000, v132, OS_LOG_TYPE_DEFAULT, "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderStrategy::scheduleLoad: Resource is being scheduled with the NetworkProcess (priority=%d, existingNetworkResourceLoadIdentifierToResume=%llu)", buf, 0x58u);
        }
        {
          v266 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v266);
        }
        uint64_t v140 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                         + 24);
        v141 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)v141 = 277;
        *((void *)v141 + 1) = 0;
        *((void *)v141 + 66) = (char *)v141 + 16;
        *((void *)v141 + 67) = 512;
        *((void *)v141 + 68) = 0;
        *((void *)v141 + 70) = 0;
        *((void *)v141 + 69) = 0;
        IPC::Encoder::encodeHeader(v141);
        *(void *)long long buf = v141;
        IPC::ArgumentCoder<WebKit::NetworkResourceLoadParameters,void>::encode(v141, (uint64_t)v377);
        v142 = (unsigned char *)IPC::Encoder::grow(v141, 1uLL, 1);
        if (v131)
        {
          if (!v143)
          {
            __break(0xC471u);
            JUMPOUT(0x1991699A4);
          }
          unsigned char *v142 = 1;
          IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v141, (uint64_t *)&v274);
        }
        else
        {
          if (!v143)
          {
            __break(0xC471u);
            JUMPOUT(0x199168F5CLL);
          }
          unsigned char *v142 = 0;
        }
        int v145 = IPC::Connection::sendMessageImpl(v140, (uint64_t *)buf, 0, 0);
        v146 = *(IPC::Encoder **)buf;
        *(void *)long long buf = 0;
        if (v146)
        {
          IPC::Encoder::~Encoder(v146, v144);
          WTF::fastFree(v149, v150);
          if (v145)
          {
LABEL_203:
            long long v92 = off_1EB358988;
            if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
            {
              uint64_t v152 = WebCore::ResourceLoader::frameLoader(v13);
              uint64_t v153 = *((void *)v13 + 4);
              uint64_t v154 = *((void *)v268 + 1);
              uint64_t v155 = *((void *)v268 + 2);
              uint64_t v156 = *((void *)v268 + 4);
              int v157 = WebCore::ResourceRequestBase::priority((WebCore::ResourceLoader *)((char *)v13 + 336));
              *(_DWORD *)long long buf = 134219776;
              *(void *)&uint8_t buf[4] = v270;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v13;
              *(_WORD *)&unsigned char buf[22] = 2048;
              *(void *)&unsigned char buf[24] = v152;
              *(_WORD *)v281 = 2048;
              *(void *)&v281[2] = v153;
              *(_WORD *)&v281[10] = 2048;
              *(void *)&v281[12] = v154;
              *(_WORD *)&v281[20] = 2048;
              *(void *)&v281[22] = v155;
              *(_WORD *)&v281[30] = 2048;
              uint64_t v282 = v156;
              LOWORD(v283) = 1024;
              *(_DWORD *)((char *)&v283 + 2) = v157;
              v99 = "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] We"
                    "bLoaderStrategy::scheduleLoad: Unable to schedule resource with the NetworkProcess (priority=%d)";
              goto LABEL_216;
            }
LABEL_204:
            WebKit::WebLoaderStrategy::scheduleInternallyFailedLoad(v270, v13);
            char v148 = v269;
LABEL_205:
            if ((v148 & 1) == 0) {
              CFRelease(*(CFTypeRef *)(v47 + 8));
            }
            WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v377, v147);
            return;
          }
        }
        else if (v145)
        {
          goto LABEL_203;
        }
        ++*((_DWORD *)v13 + 4);
        *(void *)long long buf = v13;
        uint64_t v151 = WTF::fastMalloc((WTF *)0x60);
        v271[0] = WebKit::WebResourceLoader::WebResourceLoader(v151, (uint64_t *)buf, v268);
        if (*(void *)buf)
        {
          if (*(_DWORD *)(*(void *)buf + 16) == 1) {
            (*(void (**)(void))(**(void **)buf + 8))();
          }
          else {
            --*(_DWORD *)(*(void *)buf + 16);
          }
        }
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::Ref<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>((uint64_t)buf, (uint64_t *)v270 + 6, &v279, v271);
        char v148 = v269;
        if (v271[0])
        {
          if (*(_DWORD *)(v271[0] + 8) == 1) {
            (*(void (**)(void))(*(void *)v271[0] + 8))();
          }
          else {
            --*(_DWORD *)(v271[0] + 8);
          }
        }
        goto LABEL_205;
      }
      if (v15) {
        char v102 = *(unsigned char *)(*(void *)(v15 + 280) + 394) != 0;
      }
      else {
        char v102 = 0;
      }
      uint64_t v103 = WebKit::WebFrame::frameLoaderClient((WebKit::WebFrame *)v47);
      uint64_t v104 = *((void *)v13 + 5) + 1632;
      WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v274);
      CFTypeRef v277 = 0;
      char v278 = 0;
      char v276 = v276 & 0xF1 | 4;
      v273 = 0;
      LOBYTE(v271[0]) = 0;
      char v272 = 0;
      WebKit::WebFrameLoaderClient::navigationActionData(v103, v104, (WebCore::ResourceRequestBase *)v12, (uint64_t)&v274, (_DWORD **)&v273, 0, 0, (uint64_t)v271, buf, 0, v102, v267, 0);
      if (v490 == v376)
      {
        if (!v490)
        {
LABEL_145:
          if (v272) {
            MEMORY[0x199731400](v271);
          }
          uint64_t v106 = v273;
          v273 = 0;
          if (v106)
          {
            if (*(_DWORD *)v106 == 2) {
              WTF::StringImpl::destroy(v106, v105);
            }
            else {
              *(_DWORD *)v106 -= 2;
            }
          }
          CFTypeRef v107 = v277;
          CFTypeRef v277 = 0;
          if (v107) {
            CFRelease(v107);
          }
          WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v274, v105);
          goto LABEL_154;
        }
        v394[2] = *(_OWORD *)v281;
        v394[3] = *(_OWORD *)&v281[16];
        __int16 v395 = v282;
        v394[0] = *(_OWORD *)buf;
        v394[1] = *(_OWORD *)&buf[16];
        v173 = v283;
        v283 = 0;
        v174 = v396;
        v396 = v173;
        if (v174)
        {
          if (*(_DWORD *)v174 == 2) {
            WTF::StringImpl::destroy(v174, v105);
          }
          else {
            *(_DWORD *)v174 -= 2;
          }
        }
        v397 = v284;
        WebCore::ResourceResponseBase::operator=((uint64_t)&v398, (uint64_t)&v285);
        v175 = v286;
        v286 = 0;
        CFTypeRef v176 = v399;
        CFTypeRef v399 = v175;
        if (v176) {
          CFRelease(v176);
        }
        char v400 = v287;
        int v401 = v288;
        __int16 v402 = v289;
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v403, (uint64_t)&v290);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v404, (uint64_t)v291);
        v404[2] = v291[2];
        v404[3] = v291[3];
        v404[4] = v291[4];
        __int16 v405 = v292;
        v178 = v293;
        v293 = 0;
        v179 = v406;
        v406 = v178;
        if (v179)
        {
          if (*(_DWORD *)v179 == 2) {
            WTF::StringImpl::destroy(v179, v177);
          }
          else {
            *(_DWORD *)v179 -= 2;
          }
        }
        __int16 v407 = v294;
        std::__optional_storage_base<WebCore::OwnerPermissionsPolicyData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::OwnerPermissionsPolicyData,false>>((uint64_t)&v408, (uint64_t)&v295);
        v180 = (WTF::StringImpl *)v296;
        if (v410 == v296[312])
        {
          if (v410) {
            WebCore::PrivateClickMeasurement::operator=((uint64_t)v409, (uint64_t)v296);
          }
        }
        else if (v410)
        {
          WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v409, (WTF::StringImpl *)v296);
          unsigned __int8 v410 = 0;
        }
        else
        {
          std::construct_at[abi:sn180100]<WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement,WebCore::PrivateClickMeasurement*>((uint64_t)v409, (uint64_t)v296);
          unsigned __int8 v410 = 1;
        }
        int v411 = v297;
        char v412 = v298;
        if (v447 == v333)
        {
          if (v447)
          {
            v181 = v299;
            v299 = 0;
            v182 = v413;
            v413 = v181;
            if (v182)
            {
              if (*(_DWORD *)v182 == 2) {
                WTF::StringImpl::destroy(v182, v180);
              }
              else {
                *(_DWORD *)v182 -= 2;
              }
            }
            v183 = v300;
            v300 = 0;
            v184 = v414;
            v414 = v183;
            if (v184)
            {
              if (*(_DWORD *)v184 == 2) {
                WTF::StringImpl::destroy(v184, v180);
              }
              else {
                *(_DWORD *)v184 -= 2;
              }
            }
            v185 = v301;
            v301 = 0;
            v186 = v415;
            v415 = v185;
            if (v186)
            {
              if (*(_DWORD *)v186 == 2) {
                WTF::StringImpl::destroy(v186, v180);
              }
              else {
                *(_DWORD *)v186 -= 2;
              }
            }
            v187 = v302;
            v302 = 0;
            v188 = v416;
            v416 = v187;
            if (v188)
            {
              if (*(_DWORD *)v188 == 2) {
                WTF::StringImpl::destroy(v188, v180);
              }
              else {
                *(_DWORD *)v188 -= 2;
              }
            }
            v189 = v303;
            v303 = 0;
            v190 = v417;
            v417 = v189;
            if (v190)
            {
              if (*(_DWORD *)v190 == 2) {
                WTF::StringImpl::destroy(v190, v180);
              }
              else {
                *(_DWORD *)v190 -= 2;
              }
            }
            v191 = v304;
            v304 = 0;
            v192 = v418;
            v418 = v191;
            if (v192)
            {
              if (*(_DWORD *)v192 == 2) {
                WTF::StringImpl::destroy(v192, v180);
              }
              else {
                *(_DWORD *)v192 -= 2;
              }
            }
            v193 = v305;
            v305 = 0;
            v194 = v419;
            v419 = v193;
            if (v194)
            {
              if (*(_DWORD *)v194 == 2) {
                WTF::StringImpl::destroy(v194, v180);
              }
              else {
                *(_DWORD *)v194 -= 2;
              }
            }
            v195 = v306;
            v306 = 0;
            v196 = v420;
            v420 = v195;
            if (v196)
            {
              if (*(_DWORD *)v196 == 2) {
                WTF::StringImpl::destroy(v196, v180);
              }
              else {
                *(_DWORD *)v196 -= 2;
              }
            }
            v421[0] = v307[0];
            *(_OWORD *)((char *)v421 + 12) = *(_OWORD *)((char *)v307 + 12);
            if (v434 == v320)
            {
              if (v434)
              {
                __int16 v422 = v308;
                WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)&v423, (uint64_t)&v309);
                v198 = v310;
                v310 = 0;
                v199 = v424;
                v424 = v198;
                if (v199)
                {
                  if (*(_DWORD *)v199 == 2) {
                    WTF::StringImpl::destroy(v199, v197);
                  }
                  else {
                    *(_DWORD *)v199 -= 2;
                  }
                }
                v200 = v311;
                v311 = 0;
                v201 = v425;
                v425 = v200;
                if (v201)
                {
                  if (*(_DWORD *)v201 == 2) {
                    WTF::StringImpl::destroy(v201, v197);
                  }
                  else {
                    *(_DWORD *)v201 -= 2;
                  }
                }
                v202 = v312;
                v312 = 0;
                v203 = v426;
                v426 = v202;
                if (v203) {
                  WTF::RefCounted<WebCore::FormData>::deref(v203);
                }
                uint64_t v427 = v313;
                char v428 = v314;
                v204 = v315;
                v315 = 0;
                CFTypeRef v205 = v429;
                CFTypeRef v429 = v204;
                if (v205) {
                  CFRelease(v205);
                }
                std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v430, (uint64_t)&v316);
                v206 = v317;
                v317 = 0;
                v207 = v431;
                v431 = v206;
                if (v207)
                {
                  if (*(_DWORD *)v207 == 2) {
                    WTF::StringImpl::destroy(v207, v180);
                  }
                  else {
                    *(_DWORD *)v207 -= 2;
                  }
                }
                *(_OWORD *)((char *)v433 + 14) = *(_OWORD *)((char *)v319 + 14);
                long long v432 = v318;
                v433[0] = v319[0];
              }
            }
            else if (v434)
            {
              std::__optional_destruct_base<WebKit::FrameInfoData,false>::reset[abi:sn180100]((uint64_t)&v422, v180);
            }
            else
            {
              std::construct_at[abi:sn180100]<WebKit::FrameInfoData,WebKit::FrameInfoData,WebKit::FrameInfoData*>(&v422, (uint64_t)&v308);
              char v434 = 1;
            }
            v435[0] = v321[0];
            *(_OWORD *)((char *)v435 + 9) = *(_OWORD *)((char *)v321 + 9);
            v208 = v322;
            v322 = 0;
            v209 = v436;
            v436 = v208;
            if (v209)
            {
              if (*(_DWORD *)v209 == 2) {
                WTF::StringImpl::destroy(v209, v180);
              }
              else {
                *(_DWORD *)v209 -= 2;
              }
            }
            v210 = v323;
            v323 = 0;
            v211 = v437;
            v437 = v210;
            if (v211)
            {
              if (*(_DWORD *)v211 == 2) {
                WTF::StringImpl::destroy(v211, v180);
              }
              else {
                *(_DWORD *)v211 -= 2;
              }
            }
            v212 = v324;
            v324 = 0;
            v213 = v438;
            v438 = v212;
            if (v213)
            {
              if (*(_DWORD *)v213 == 2) {
                WTF::StringImpl::destroy(v213, v180);
              }
              else {
                *(_DWORD *)v213 -= 2;
              }
            }
            v214 = v325;
            v325 = 0;
            v215 = v439;
            v439 = v214;
            if (v215) {
              WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v215);
            }
            v216 = v326;
            v326 = 0;
            v217 = v440;
            v440 = v216;
            if (v217) {
              WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v217, v180);
            }
            v218 = v327;
            v327 = 0;
            v219 = v441;
            v441 = v218;
            if (v219)
            {
              if (*(_DWORD *)v219 == 2) {
                WTF::StringImpl::destroy(v219, v180);
              }
              else {
                *(_DWORD *)v219 -= 2;
              }
            }
            v220 = v328;
            v328 = 0;
            v221 = v442;
            v442 = v220;
            if (v221)
            {
              if (*(_DWORD *)v221 == 2) {
                WTF::StringImpl::destroy(v221, v180);
              }
              else {
                *(_DWORD *)v221 -= 2;
              }
            }
            __int16 v443 = v329;
            uint64_t v444 = v330;
            WebCore::TextIndicatorData::operator=((uint64_t)&v445, v331);
            WebCore::AttributedString::operator=();
            v222 = v332;
            v332 = 0;
            v223 = v446;
            v446 = v222;
            if (v223) {
              WTF::RefCounted<WebCore::TextIndicator>::deref(v223);
            }
          }
        }
        else if (v447)
        {
          WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)&v413);
          char v447 = 0;
        }
        else
        {
          WebKit::WebHitTestResultData::WebHitTestResultData((uint64_t)&v413, (uint64_t *)&v299);
          char v447 = 1;
        }
        __int16 v448 = v334;
        WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)&v449, (uint64_t)&v335);
        v225 = v336;
        v336 = 0;
        v226 = v450;
        v450 = v225;
        if (v226)
        {
          if (*(_DWORD *)v226 == 2) {
            WTF::StringImpl::destroy(v226, v224);
          }
          else {
            *(_DWORD *)v226 -= 2;
          }
        }
        v227 = v337;
        v337 = 0;
        v228 = v451;
        v451 = v227;
        if (v228)
        {
          if (*(_DWORD *)v228 == 2) {
            WTF::StringImpl::destroy(v228, v224);
          }
          else {
            *(_DWORD *)v228 -= 2;
          }
        }
        v229 = v338;
        v338 = 0;
        v230 = v452;
        v452 = v229;
        if (v230) {
          WTF::RefCounted<WebCore::FormData>::deref(v230);
        }
        uint64_t v453 = v339;
        char v454 = v340;
        v231 = v341;
        v341 = 0;
        CFTypeRef v232 = v455;
        CFTypeRef v455 = v231;
        if (v232) {
          CFRelease(v232);
        }
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v456, (uint64_t)&v342);
        v234 = v343;
        v343 = 0;
        v235 = v457;
        v457 = v234;
        if (v235)
        {
          if (*(_DWORD *)v235 == 2) {
            WTF::StringImpl::destroy(v235, v233);
          }
          else {
            *(_DWORD *)v235 -= 2;
          }
        }
        *(_OWORD *)((char *)v459 + 14) = *(_OWORD *)((char *)v345 + 14);
        long long v458 = v344;
        v459[0] = v345[0];
        uint64_t v460 = v346;
        char v461 = v347;
        __int16 v462 = v348;
        WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)&v463, (uint64_t)&v349);
        v237 = v350;
        v350 = 0;
        v238 = v464;
        v464 = v237;
        if (v238)
        {
          if (*(_DWORD *)v238 == 2) {
            WTF::StringImpl::destroy(v238, v236);
          }
          else {
            *(_DWORD *)v238 -= 2;
          }
        }
        v239 = v351;
        v351 = 0;
        v240 = v465;
        v465 = v239;
        if (v240)
        {
          if (*(_DWORD *)v240 == 2) {
            WTF::StringImpl::destroy(v240, v236);
          }
          else {
            *(_DWORD *)v240 -= 2;
          }
        }
        v241 = v352;
        v352 = 0;
        v242 = v466;
        v466 = v241;
        if (v242) {
          WTF::RefCounted<WebCore::FormData>::deref(v242);
        }
        uint64_t v467 = v353;
        char v468 = v354;
        v243 = v355;
        v355 = 0;
        CFTypeRef v244 = v469;
        CFTypeRef v469 = v243;
        if (v244) {
          CFRelease(v244);
        }
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v470, (uint64_t)&v356);
        v246 = v357;
        v357 = 0;
        v247 = v471;
        v471 = v246;
        if (v247)
        {
          if (*(_DWORD *)v247 == 2) {
            WTF::StringImpl::destroy(v247, v245);
          }
          else {
            *(_DWORD *)v247 -= 2;
          }
        }
        long long v472 = v358;
        v473[0] = v359[0];
        *(_OWORD *)((char *)v473 + 14) = *(_OWORD *)((char *)v359 + 14);
        uint64_t v474 = v360;
        char v475 = v361;
        WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)&v476, (uint64_t)&v362);
        v249 = v363;
        v363 = 0;
        v250 = v477;
        v477 = v249;
        if (v250)
        {
          if (*(_DWORD *)v250 == 2) {
            WTF::StringImpl::destroy(v250, v248);
          }
          else {
            *(_DWORD *)v250 -= 2;
          }
        }
        v251 = v364;
        v364 = 0;
        v252 = v478;
        v478 = v251;
        if (v252)
        {
          if (*(_DWORD *)v252 == 2) {
            WTF::StringImpl::destroy(v252, v248);
          }
          else {
            *(_DWORD *)v252 -= 2;
          }
        }
        v253 = v365;
        v365 = 0;
        v254 = v479;
        v479 = v253;
        if (v254) {
          WTF::RefCounted<WebCore::FormData>::deref(v254);
        }
        uint64_t v480 = v366;
        char v481 = v367;
        v255 = v368;
        v368 = 0;
        CFTypeRef v256 = v482;
        CFTypeRef v482 = v255;
        if (v256) {
          CFRelease(v256);
        }
        WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)&v483, (uint64_t)&v369);
        v257 = v370;
        v370 = 0;
        v258 = v484;
        v484 = v257;
        if (v258)
        {
          if (*(_DWORD *)v258 == 2) {
            WTF::StringImpl::destroy(v258, v105);
          }
          else {
            *(_DWORD *)v258 -= 2;
          }
        }
        v259 = v371;
        v371 = 0;
        v260 = v485;
        v485 = v259;
        if (v260)
        {
          if (*(_DWORD *)v260 == 2) {
            WTF::StringImpl::destroy(v260, v105);
          }
          else {
            *(_DWORD *)v260 -= 2;
          }
        }
        v261 = v372;
        v372 = 0;
        v262 = v486;
        v486 = v261;
        if (v262) {
          WTF::RefCounted<WebCore::FormData>::deref(v262);
        }
        uint64_t v487 = v373;
        char v488 = v374;
        v263 = v375;
        v375 = 0;
        CFTypeRef v264 = v489;
        CFTypeRef v489 = v263;
        if (v264) {
          CFRelease(v264);
        }
      }
      else if (v490)
      {
        WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v394);
        char v490 = 0;
      }
      else
      {
        WebKit::NavigationActionData::NavigationActionData((uint64_t)v394, (uint64_t)buf);
        char v490 = 1;
      }
      if (v376) {
        WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)buf);
      }
      goto LABEL_145;
    }
    uint64_t v89 = (atomic_uint *)WebCore::Document::topOrigin((WebCore::Document *)v42);
    atomic_fetch_add(v89, 1u);
    uint64_t v90 = v379;
    v379 = (WTF *)v89;
    if (v90) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v90, v88);
    }
LABEL_125:
    uint64_t v67 = (atomic_uint *)WTF::String::operator=(&v513, (WTF::StringImpl **)(v42 + 768));
    long long v91 = *(_OWORD *)(v42 + 792);
    long long v514 = *(_OWORD *)(v42 + 776);
    long long v515 = v91;
    goto LABEL_126;
  }
  WTF::RunLoop::main((WTF::RunLoop *)v17);
  ++*((_DWORD *)v13 + 4);
  v377[0] = v13;
  WebKit::blockedError((WebKit *)v12, (uint64_t)&v377[1]);
  uint64_t v34 = WTF::fastMalloc((WTF *)0x60);
  *(void *)uint64_t v34 = &unk_1EE9F1CE8;
  *(WTF::StringImpl **)(v34 + 8) = v377[0];
  uint64_t v35 = v377[1];
  v377[0] = 0;
  v377[1] = 0;
  *(void *)(v34 + ++*(_DWORD *)(this + 16) = v35;
  WTF::URL::URL(v34 + 24, (uint64_t *)v378);
  *(void *)(v34 + 64) = *(void *)((char *)&v382 + 4);
  *(_WORD *)(v34 + 76) = v383;
  *(_DWORD *)(v34 + 72) = HIDWORD(v382);
  uint64_t v36 = *(void *)((char *)&v383 + 4);
  *(void *)((char *)&v382 + 4) = 0;
  *(void *)((char *)&v383 + 4) = 0;
  *(void *)(v34 + 80) = v36;
  *(unsigned char *)(v34 + 88) = BYTE12(v383);
  WTF::RunLoop::dispatch();
  *(void *)long long buf = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  uint64_t v38 = *(const void **)((char *)&v383 + 4);
  *(void *)((char *)&v383 + 4) = 0;
  if (v38) {
    CFRelease(v38);
  }
  char v39 = *(WTF::StringImpl **)((char *)&v382 + 4);
  *(void *)((char *)&v382 + 4) = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2) {
      WTF::StringImpl::destroy(v39, v37);
    }
    else {
      *(_DWORD *)v39 -= 2;
    }
  }
  uint64_t v85 = v378[0];
  v378[0] = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2) {
      WTF::StringImpl::destroy(v85, v37);
    }
    else {
      *(_DWORD *)v85 -= 2;
    }
  }
  uint64_t v86 = v377[1];
  v377[1] = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2) {
      WTF::StringImpl::destroy(v86, v37);
    }
    else {
      *(_DWORD *)v86 -= 2;
    }
  }
  char v87 = v377[0];
  v377[0] = 0;
  if (v87)
  {
    if (*((_DWORD *)v87 + 4) == 1) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v87 + 8))(v87);
    }
    else {
      --*((_DWORD *)v87 + 4);
    }
  }
}

double WebKit::maximumBufferingTime(uint64_t a1)
{
  double result = 0.0;
  if (a1)
  {
    uint64_t v2 = *(unsigned char *)(a1 + 556) & 0x1F;
    if (v2 <= 0x10) {
      return dbl_1994F77C8[v2];
    }
  }
  return result;
}

uint64_t *WTF::RefPtr<WebKit::WebPage,WTF::RawPtrTraits<WebKit::WebPage>,WTF::DefaultRefDerefTraits<WebKit::WebPage>>::operator=(uint64_t *a1, uint64_t a2)
{
  if (a2) {
    CFRetain(*(CFTypeRef *)(a2 + 8));
  }
  uint64_t v4 = *a1;
  *a1 = a2;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  return a1;
}

uint64_t WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess(WebCore::ResourceLoader &,WebCore::ResourceRequest const&,WebKit::WebResourceLoader::TrackingParameters const&,BOOL,WTF::Seconds)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(const void **)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  char v7 = *(_DWORD **)a1;
  *(void *)a1 = 0;
  if (v7)
  {
    if (v7[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    }
    else {
      --v7[4];
    }
  }
  return a1;
}

unsigned int *WebKit::addParametersShared(WebKit *this, const WebCore::LocalFrame *a2, WebKit::NetworkResourceLoadParameters *a3)
{
  int v3 = (int)a3;
  uint64_t v6 = WebCore::CrossOriginAccessControlCheckDisabler::singleton(this);
  *((unsigned char *)a2 + 3304) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  {
    long long v31 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v31);
  }
  double result = (unsigned int *)WebKit::WebProcess::singleton(void)::process;
  *((unsigned char *)a2 + 2962) = *(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 776);
  if (this)
  {
    uint64_t v8 = *(void *)(*((void *)this + 16) + 8);
    BOOL v9 = 1;
    atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
    WebKit::policySourceDocumentLoaderForFrame((unsigned int *)&v33, this);
    if (v33) {
      BOOL v9 = *((unsigned char *)v33 + 3536) != 0;
    }
    *((unsigned char *)a2 + 2963) = v9;
    uint64_t v10 = *((void *)this + 37);
    if (v10)
    {
      *((_WORD *)a2 + 1596) = *(_WORD *)(v10 + 232);
      WTF::String::operator=((uint64_t *)a2 + 400, (WTF::StringImpl **)(v10 + 240));
      WTF::String::operator=((uint64_t *)a2 + 401, (WTF::StringImpl **)(v10 + 248));
      *((unsigned char *)a2 + 3353) = (*(void *)(*(void *)(v10 + 712) + 664) & 0x200000000000000) != 0;
    }
    uint64_t v11 = *((void *)this + 3);
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 8);
      if (v12)
      {
        *((unsigned char *)a2 + 3272) = *(unsigned char *)(v12 + 1097);
        *((unsigned char *)a2 + 2896) = *(unsigned char *)(v12 + 1683);
        WebCore::ResourceRequestBase::httpBody((uint64_t *)&v32, (const WebCore::LocalFrame *)((char *)a2 + 88));
        WebCore::Page::logMediaDiagnosticMessage();
        char v13 = v32;
        uint64_t v32 = 0;
        if (v13) {
          WTF::RefCounted<WebCore::FormData>::deref(v13);
        }
        uint64_t v14 = *(void **)(*(void *)(v12 + 48) + 16);
        if (((*(uint64_t (**)(void *))(*v14 + 1368))(v14) & 1) == 0)
        {
          uint64_t v15 = *(void *)(v14[2] + 8);
          if (v15)
          {
            CFRetain(*(CFTypeRef *)(v15 - 8));
            uint64_t v16 = *(void *)(v15 + 616);
            if (v16)
            {
              int v18 = *(_DWORD *)(v16 + 16);
              uint64_t v17 = v16 + 16;
              *(_DWORD *)uint64_t v17 = v18 + 1;
              uint64_t v19 = *(void *)(v17 + 24);
              if (v19) {
                LOBYTE(v19) = *(_DWORD *)(v19 - 12) != 0;
              }
              *((unsigned char *)a2 + 3784) = v19;
              WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref((unsigned int **)v17);
            }
            CFRelease(*(CFTypeRef *)(v15 - 8));
          }
        }
      }
    }
    uint64_t v20 = *((void *)this + 15);
    if (v20)
    {
      uint64_t v21 = *(void *)(v20 + 8);
      if (v21)
      {
        uint64_t v22 = *(void *)(*(void *)(*(void *)(v21 + 48) + 8) + 544);
        if (v22)
        {
          uint64_t v23 = *(void *)(v22 + 8);
          if (v23)
          {
            uint64_t v24 = WebCore::FrameLoader::frameID(*(WebCore::FrameLoader **)(v23 + 280));
            int v25 = *((unsigned __int8 *)a2 + 3296);
            *((void *)a2 + 410) = v24;
            *((void *)a2 + 411) = v26;
            if (!v25) {
              *((unsigned char *)a2 + 3296) = 1;
            }
            uint64_t v27 = *(void *)(*(void *)(v21 + 48) + 8);
            *((_WORD *)a2 + 1584) = *(_WORD *)(v27 + 232);
            WTF::String::operator=((uint64_t *)a2 + 397, (WTF::StringImpl **)(v27 + 240));
            WTF::String::operator=((uint64_t *)a2 + 398, (WTF::StringImpl **)(v27 + 248));
            uint64_t v28 = *(void *)(*(void *)(v21 + 48) + 8) + 768;
            WTF::String::operator=((uint64_t *)a2 + 386, (WTF::StringImpl **)v28);
            long long v29 = *(_OWORD *)(v28 + 24);
            *(_OWORD *)((char *)a2 + 3096) = *(_OWORD *)(v28 + 8);
            *(_OWORD *)((char *)a2 + 3112) = v29;
          }
        }
      }
    }
    double result = v33;
    if (v33) {
      __int16 v30 = *((_WORD *)v33 + 1757);
    }
    else {
      __int16 v30 = 0;
    }
    *((_WORD *)a2 + 1482) = v30;
    if (v3) {
      *((unsigned char *)a2 + 3785) = (*(_DWORD *)(*(void *)(v8 + 136) + 688) & 0x80) != 0;
    }
    char v33 = 0;
    if (result)
    {
      if (result[6] == 1) {
        double result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 24))(result);
      }
      else {
        --result[6];
      }
    }
    if (v8) {
      return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v8 + 8));
    }
  }
  return result;
}

uint64_t WebKit::WebLoaderStrategy::scheduleInternallyFailedLoad(WebKit::WebLoaderStrategy *this, WebCore::ResourceLoader *a2)
{
  ++*((_DWORD *)a2 + 4);
  uint64_t v4 = (uint64_t *)((char *)this + 8);
  uint64_t v3 = *((void *)this + 1);
  if (v3
    || (WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::expand((uint64_t *)this + 1),
        (uint64_t v3 = *v4) != 0))
  {
    int v5 = *(_DWORD *)(v3 - 8);
  }
  else
  {
    int v5 = 0;
  }
  unint64_t v6 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
  unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  unsigned int v9 = v5 & ((v8 >> 31) ^ v8);
  uint64_t v10 = (WebCore::ResourceLoader **)(v3 + 8 * v9);
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = 0;
    int v13 = 1;
    do
    {
      if (v11 == a2)
      {
        if (*((_DWORD *)a2 + 4) == 1) {
          (*(void (**)(WebCore::ResourceLoader *))(*(void *)a2 + 8))(a2);
        }
        else {
          --*((_DWORD *)a2 + 4);
        }
        goto LABEL_25;
      }
      if (v11 == (WebCore::ResourceLoader *)-1) {
        uint64_t v12 = v10;
      }
      unsigned int v9 = (v9 + v13) & v5;
      uint64_t v10 = (WebCore::ResourceLoader **)(v3 + 8 * v9);
      uint64_t v11 = *v10;
      ++v13;
    }
    while (*v10);
    if (v12)
    {
      CFTypeRef *v12 = 0;
      --*(_DWORD *)(*v4 - 16);
      uint64_t v10 = v12;
    }
  }
  _OWORD *v10 = a2;
  uint64_t v14 = *v4;
  if (*v4) {
    int v15 = *(_DWORD *)(v14 - 12) + 1;
  }
  else {
    int v15 = 1;
  }
  *(_DWORD *)(v14 - 12) = v15;
  uint64_t v16 = *v4;
  if (*v4) {
    int v17 = *(_DWORD *)(v16 - 12);
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = (*(_DWORD *)(v16 - 16) + v17);
  unint64_t v19 = *(unsigned int *)(v16 - 4);
  if (v19 <= 0x400)
  {
    if (3 * v19 > 4 * v18) {
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  if (v19 <= 2 * v18) {
LABEL_22:
  }
    WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::expand(v4);
LABEL_25:

  return WTF::RunLoop::TimerBase::start();
}

uint64_t WebKit::WebLoaderStrategy::shouldPerformSecurityChecks(WebKit::WebLoaderStrategy *this)
{
  return *(unsigned __int8 *)(WebCore::DeprecatedGlobalSettings::shared(this) + 22);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::WebURLSchemeTaskProxy&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = *(unsigned int *)(v8 - 4);
        }
        char v26 = 0;
        uint64_t v27 = v8 + 16 * v25;
        goto LABEL_31;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      uint64_t *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v18;
    }
  }
  *uint64_t v16 = v11;
  if (!*(void *)(a3 + 8))
  {
    uint64_t v20 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)uint64_t v20 = 1;
    *(void *)(v20 + 8) = a3;
    uint64_t v21 = *(unsigned int **)(a3 + 8);
    *(void *)(a3 + 8) = v20;
    if (v21)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, a2);
      }
    }
  }
  uint64_t v22 = *(atomic_uint **)(a3 + 8);
  atomic_fetch_add(v22, 1u);
  double result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v22;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    double result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
  }
  uint64_t v23 = *v6;
  if (*v6) {
    int v24 = *(_DWORD *)(v23 - 12) + 1;
  }
  else {
    int v24 = 1;
  }
  *(_DWORD *)(v23 - 12) = v24;
  uint64_t v28 = *v6;
  if (*v6) {
    int v29 = *(_DWORD *)(v28 - 12);
  }
  else {
    int v29 = 0;
  }
  uint64_t v30 = (*(_DWORD *)(v28 - 16) + v29);
  unint64_t v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
    {
LABEL_28:
      double result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
      uint64_t v16 = result;
      uint64_t v28 = *v6;
      if (*v6) {
        unint64_t v31 = *(unsigned int *)(v28 - 4);
      }
      else {
        unint64_t v31 = 0;
      }
    }
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_28;
  }
  uint64_t v27 = v28 + 16 * v31;
  char v26 = 1;
LABEL_31:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v27;
  *(unsigned char *)(a4 + ++*(_DWORD *)(this + 16) = v26;
  return result;
}

uint64_t *WebKit::WebLoaderStrategy::removeURLSchemeTaskProxy(WebKit::WebLoaderStrategy *this, WebKit::WebURLSchemeTaskProxy *a2)
{
  uint64_t v3 = (uint64_t *)((char *)this + 56);
  uint64_t v7 = *((void *)a2 + 30);
  double result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)this + 7, &v7);
  uint64_t v5 = *((void *)this + 7);
  if (v5)
  {
    unint64_t v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    unint64_t v6 = 0;
  }
  if (v6 != result) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, result);
  }
  return result;
}

uint64_t *WebKit::WebLoaderStrategy::remove(uint64_t *this, WebCore::ResourceLoader *a2)
{
  uint64_t v2 = (IPC::Encoder *)*((void *)a2 + 93);
  char v39 = v2;
  if (v2)
  {
    uint64_t v4 = this;
    uint64_t v5 = this + 7;
    char v40 = v2;
    unint64_t v6 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(this + 7, &v40);
    uint64_t v7 = (void *)v4[7];
    if (v7) {
      v7 += 2 * *((unsigned int *)v7 - 1);
    }
    if (v7 != v6)
    {
      uint64_t v34 = v6[1];
      if (v34)
      {
        v6[1] = 0;
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::remove(v5, v6);
        uint64_t v36 = *(WebKit::WebURLSchemeTaskProxy **)(v34 + 8);
        if (v36) {
          ++*(_DWORD *)v36;
        }
        if (atomic_fetch_add((atomic_uint *volatile)v34, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, (unsigned int *)v34);
          WTF::fastFree((WTF *)v34, v35);
        }
        if (v36)
        {
          WebKit::WebURLSchemeTaskProxy::stopLoading(v36);
          return (uint64_t *)WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(v36, v37);
        }
      }
      else
      {
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::remove(v5, v6);
      }
    }
    this = (uint64_t *)v4[1];
    if (this
      && (this = (uint64_t *)WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::lookup<WTF::HashSetTranslator<WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>,WebCore::ResourceLoader const*>((uint64_t)this, (uint64_t)a2)) != 0)
    {
      return WTF::HashSet<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>(v4 + 1, (uint64_t)a2);
    }
    else
    {
      uint64_t v10 = v4[6];
      char v9 = v4 + 6;
      uint64_t v8 = v10;
      if (v10)
      {
        unsigned int v11 = *(_DWORD *)(v8 - 8);
        unint64_t v12 = ((unint64_t)v39 + ~((void)v39 << 32)) ^ (((unint64_t)v39 + ~((void)v39 << 32)) >> 22);
        unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
        unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
        uint64_t v15 = v11 & ((v14 >> 31) ^ v14);
        uint64_t v16 = *(IPC::Encoder **)(v8 + 16 * v15);
        if (v16 != v39)
        {
          int v31 = 1;
          while (v16)
          {
            uint64_t v15 = (v15 + v31) & v11;
            uint64_t v16 = *(IPC::Encoder **)(v8 + 16 * v15);
            ++v31;
            if (v16 == v39) {
              goto LABEL_8;
            }
          }
          uint64_t v15 = *(unsigned int *)(v8 - 4);
        }
LABEL_8:
        if (v15 != *(_DWORD *)(v8 - 4))
        {
          uint64_t v17 = (void *)(v8 + 16 * v15);
          uint64_t v18 = (WebKit::WebResourceLoader *)v17[1];
          v17[1] = 0;
          uint64_t v19 = *v9;
          if (!*v9 || (v19 += 16 * *(unsigned int *)(v19 - 4), (void *)v19 != v17))
          {
            if ((void *)v19 != v17)
            {
              *uint64_t v17 = -1;
              v17[1] = 0;
              ++*(_DWORD *)(*v9 - 16);
              uint64_t v20 = *v9;
              int v21 = *v9 ? *(_DWORD *)(v20 - 12) - 1 : -1;
              *(_DWORD *)(v20 - 12) = v21;
              uint64_t v22 = *v9;
              if (*v9)
              {
                unsigned int v23 = 6 * *(_DWORD *)(v22 - 12);
                unsigned int v24 = *(_DWORD *)(v22 - 4);
                if (v23 < v24 && v24 >= 9) {
                  this = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v9, v24 >> 1, 0);
                }
              }
            }
          }
          if (v18)
          {
            {
              uint64_t v38 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
              WebKit::WebProcess::WebProcess(v38);
            }
            uint64_t v26 = *(void *)(WebKit::WebProcess::singleton(void)::process + 296);
            if (v26)
            {
              uint64_t v27 = *(void *)(v26 + 24);
              uint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)uint64_t v28 = 270;
              *((void *)v28 + 1) = 0;
              *((void *)v28 + 66) = (char *)v28 + 16;
              *((void *)v28 + 67) = 512;
              *((void *)v28 + 68) = 0;
              *((void *)v28 + 70) = 0;
              *((void *)v28 + 69) = 0;
              IPC::Encoder::encodeHeader(v28);
              char v40 = v28;
              IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v28, (uint64_t *)&v39);
              IPC::Connection::sendMessageImpl(v27, (uint64_t *)&v40, 0, 0);
              uint64_t v30 = v40;
              char v40 = 0;
              if (v30)
              {
                IPC::Encoder::~Encoder(v30, v29);
                WTF::fastFree(v32, v33);
              }
            }
            this = (uint64_t *)WebKit::WebResourceLoader::detachFromCoreLoader(v18);
            if (*((_DWORD *)v18 + 2) == 1) {
              return (uint64_t *)(*(uint64_t (**)(WebKit::WebResourceLoader *))(*(void *)v18 + 8))(v18);
            }
            else {
              --*((_DWORD *)v18 + 2);
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t *WTF::HashSet<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(_DWORD *)(v2 - 8);
    unint64_t v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    uint64_t v8 = v4 & ((v7 >> 31) ^ v7);
    uint64_t v9 = *(void *)(v2 + 8 * v8);
    if (v9 != a2)
    {
      int v10 = 1;
      while (v9)
      {
        uint64_t v8 = (v8 + v10) & v4;
        uint64_t v9 = *(void *)(v2 + 8 * v8);
        ++v10;
        if (v9 == a2) {
          goto LABEL_8;
        }
      }
      uint64_t v8 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v8 != *(_DWORD *)(v2 - 4))
    {
      double result = *(uint64_t **)(v2 + 8 * v8);
      *(void *)(v2 + 8 * v8) = -1;
      if (result)
      {
        if (*((_DWORD *)result + 4) == 1) {
          double result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
        }
        else {
          --*((_DWORD *)result + 4);
        }
      }
      ++*(_DWORD *)(*v3 - 16);
      uint64_t v11 = *v3;
      if (*v3) {
        int v12 = *(_DWORD *)(v11 - 12) - 1;
      }
      else {
        int v12 = -1;
      }
      *(_DWORD *)(v11 - 12) = v12;
      uint64_t v13 = *v3;
      if (*v3)
      {
        unsigned int v14 = 6 * *(_DWORD *)(v13 - 12);
        unsigned int v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
        {
          return (uint64_t *)WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(v3, v15 >> 1);
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoader::detachFromCoreLoader(WebKit::WebResourceLoader *this)
{
  uint64_t v2 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if (WTF::RunLoop::isCurrent(v2))
  {
    uint64_t result = *((void *)this + 2);
    *((void *)this + 2) = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 16) == 1)
      {
        unsigned int v4 = *(uint64_t (**)(void))(*(void *)result + 8);
        return v4();
      }
      else
      {
        --*(_DWORD *)(result + 16);
      }
    }
  }
  else
  {
    uint64_t result = 97;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::WebLoaderStrategy::networkProcessCrashed(WebKit::WebLoaderStrategy *this)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf[0]) = 134217984;
    *(void *)((char *)buf + 4) = this;
    _os_log_error_impl(&dword_1985F2000, v2, OS_LOG_TYPE_ERROR, "%p - WebLoaderStrategy::networkProcessCrashed: failing all pending resource loaders", (uint8_t *)buf, 0xCu);
  }
  uint64_t result = (WTF::StringImpl *)*((void *)this + 6);
  if (!result)
  {
    unint64_t v7 = 0;
    uint64_t v5 = 0;
    goto LABEL_11;
  }
  uint64_t v5 = *((unsigned int *)result - 1);
  unint64_t v6 = (char *)result + 16 * v5;
  if (!*((_DWORD *)result - 3))
  {
    unint64_t v7 = (char *)result + 16 * v5;
LABEL_11:
    unint64_t v6 = (char *)result + 16 * v5;
    goto LABEL_12;
  }
  unint64_t v7 = (char *)*((void *)this + 6);
  if (v5)
  {
    uint64_t v8 = 16 * v5;
    unint64_t v7 = (char *)*((void *)this + 6);
    while ((unint64_t)(*(void *)v7 + 1) <= 1)
    {
      v7 += 16;
      v8 -= 16;
      if (!v8)
      {
        unint64_t v7 = v6;
        break;
      }
    }
  }
LABEL_12:
  if (result) {
    uint64_t v9 = (char *)result + 16 * *((unsigned int *)result - 1);
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 != v7)
  {
    do
    {
      WebKit::WebLoaderStrategy::scheduleInternallyFailedLoad(this, *(WebCore::ResourceLoader **)(*((void *)v7 + 1) + 16));
      WebKit::WebResourceLoader::detachFromCoreLoader(*((WebKit::WebResourceLoader **)v7 + 1));
      int v10 = v7 + 16;
      unint64_t v7 = v6;
      if (v10 != v6)
      {
        unint64_t v7 = v10;
        while ((unint64_t)(*(void *)v7 + 1) <= 1)
        {
          v7 += 16;
          if (v7 == v6)
          {
            unint64_t v7 = v6;
            break;
          }
        }
      }
    }
    while (v7 != v9);
    uint64_t result = (WTF::StringImpl *)*((void *)this + 6);
  }
  if (result)
  {
    *((void *)this + 6) = 0;
    uint64_t result = (WTF::StringImpl *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable((uint64_t)result, v3);
  }
  uint64_t v11 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v11)
  {
    uint64_t v12 = *(unsigned int *)(v11 - 4);
    uint64_t v13 = v11 + 16 * v12;
    if (*(_DWORD *)(v11 - 12))
    {
      uint64_t v14 = v11;
      if (v12)
      {
        uint64_t v15 = 16 * v12;
        uint64_t v14 = v11;
        while ((unint64_t)(*(void *)v14 + 1) <= 1)
        {
          v14 += 16;
          v15 -= 16;
          if (!v15)
          {
            uint64_t v14 = v13;
            goto LABEL_31;
          }
        }
      }
      goto LABEL_31;
    }
    uint64_t v14 = v11 + 16 * v12;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v12 = 0;
  }
  uint64_t v13 = v11 + 16 * v12;
  if (v11)
  {
LABEL_31:
    uint64_t v16 = v11 + 16 * *(unsigned int *)(v11 - 4);
    goto LABEL_36;
  }
  uint64_t v16 = 0;
LABEL_36:
  while (v14 != v16)
  {
    uint64_t v35 = 0;
    WTF::URL::invalidate((WTF::URL *)&v35);
    WebCore::createInternalError();
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)buf);
    CFTypeRef cf = 0;
    char v45 = 0;
    char v43 = v43 & 0xF1 | 4;
    (*(void (**)(void, WTF::StringImpl **, _OWORD *))(**(void **)(v14 + 8) + 16))(*(void *)(v14 + 8), &v36, buf);
    CFTypeRef v18 = cf;
    CFTypeRef cf = 0;
    if (v18) {
      CFRelease(v18);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v17);
    CFTypeRef v19 = v39;
    CFTypeRef v39 = 0;
    if (v19) {
      CFRelease(v19);
    }
    uint64_t v20 = v38;
    uint64_t v38 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v3);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    int v21 = v37;
    uint64_t v37 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v3);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    uint64_t v22 = v36;
    uint64_t v36 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v3);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    uint64_t result = v35;
    uint64_t v35 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    uint64_t v23 = v14 + 16;
    uint64_t v14 = v13;
    if (v23 != v13)
    {
      uint64_t v14 = v23;
      while ((unint64_t)(*(void *)v14 + 1) <= 1)
      {
        v14 += 16;
        if (v14 == v13)
        {
          uint64_t v14 = v13;
          break;
        }
      }
    }
  }
  uint64_t v24 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v24)
  {
    uint64_t v25 = *(unsigned int *)(v24 - 4);
    uint64_t v26 = v24 + 16 * v25;
    if (*(_DWORD *)(v24 - 12))
    {
      uint64_t v27 = v24;
      if (v25)
      {
        uint64_t v28 = 16 * v25;
        uint64_t v27 = v24;
        while ((unint64_t)(*(void *)v27 + 1) <= 1)
        {
          v27 += 16;
          v28 -= 16;
          if (!v28)
          {
            uint64_t v27 = v26;
            goto LABEL_70;
          }
        }
      }
      goto LABEL_70;
    }
    uint64_t v27 = v24 + 16 * v25;
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v25 = 0;
  }
  uint64_t v26 = v24 + 16 * v25;
  if (v24)
  {
LABEL_70:
    uint64_t v29 = v24 + 16 * *(unsigned int *)(v24 - 4);
    goto LABEL_75;
  }
  uint64_t v29 = 0;
LABEL_75:
  while (v27 != v29)
  {
    uint64_t v36 = 0;
    WTF::URL::invalidate((WTF::URL *)&v36);
    WebCore::createInternalError();
    (*(void (**)(void, _OWORD *))(**(void **)(v27 + 8) + 16))(*(void *)(v27 + 8), buf);
    CFTypeRef v30 = v42;
    CFTypeRef v42 = 0;
    if (v30) {
      CFRelease(v30);
    }
    int v31 = v41;
    BOOL v41 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v3);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
    uint64_t v32 = (WTF::StringImpl *)*((void *)&buf[0] + 1);
    *((void *)&buf[0] + 1) = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v3);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
    char v33 = *(WTF::StringImpl **)&buf[0];
    *(void *)&buf[0] = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2) {
        WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v3);
      }
      else {
        *(_DWORD *)v33 -= 2;
      }
    }
    uint64_t result = v36;
    uint64_t v36 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    uint64_t v34 = v27 + 16;
    uint64_t v27 = v26;
    if (v34 != v26)
    {
      uint64_t v27 = v34;
      while ((unint64_t)(*(void *)v27 + 1) <= 1)
      {
        v27 += 16;
        if (v27 == v26)
        {
          uint64_t v27 = v26;
          break;
        }
      }
    }
  }
  if (v24) {
    uint64_t result = (WTF::StringImpl *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(WebCore::ResourceError const&)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v24, v3);
  }
  if (v11) {
    return (WTF::StringImpl *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v11, v3);
  }
  return result;
}

WebKit::WebLoaderStrategy::SyncLoadResult *WebKit::WebLoaderStrategy::SyncLoadResult::SyncLoadResult(WebKit::WebLoaderStrategy::SyncLoadResult *this)
{
  uint64_t v2 = WebCore::ResourceResponseBase::ResourceResponseBase(this);
  *(void *)(v2 + 240) = 0;
  *(unsigned char *)(v2 + 248) = 0;
  *(unsigned char *)(v2 + 138) = *(unsigned char *)(v2 + 138) & 0xF1 | 4;
  uint64_t v3 = v2 + 256;
  *(void *)(v2 + 256) = 0;
  *(void *)(v2 + 264) = 0;
  WTF::URL::invalidate((WTF::URL *)(v2 + 264));
  *((void *)this + 40) = 0;
  *((void *)this + 38) = 0;
  *(void *)(v3 + 54) = 0;
  *((unsigned char *)this + 328) = 1;
  *((void *)this + 42) = 0;
  *((void *)this + 43) = 0;
  return this;
}

void WebKit::WebLoaderStrategy::tryLoadingSynchronouslyUsingURLSchemeHandler(unsigned char *a1, void *a2, uint64_t a3, String *a4)
{
  if (((*(uint64_t (**)(void *))(*a2 + 1072))(a2) & 1) == 0
    && (uint64_t v8 = (WebKit::WebFrame *)a2[2]) != 0
    && (uint64_t v9 = WebKit::WebFrame::page(v8)) != 0
    && (uint64_t v10 = v9,
        uint64_t v11 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a4),
        v16[0] = WTF::URL::protocol(v11),
        v16[1] = v12,
        (uint64_t v13 = WTF::HashMap<WTF::String,WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebKit::WebURLSchemeHandlerProxy,WTF::RawPtrTraits<WebKit::WebURLSchemeHandlerProxy>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandlerProxy>>>,WTF::HashTableTraits>::get<WTF::StringViewHashTranslator,WTF::StringView>((uint64_t *)(v10 + 2080), v16)) != 0))
  {
    uint64_t v14 = v13;
    WebKit::WebLoaderStrategy::SyncLoadResult::SyncLoadResult((WebKit::WebLoaderStrategy::SyncLoadResult *)v16);
    WebKit::WebURLSchemeHandlerProxy::loadSynchronously(v14, a3, v8, a4, (uint64_t)v16, (uint64_t)&v17, (uint64_t)&v18);
    WebKit::WebLoaderStrategy::SyncLoadResult::SyncLoadResult((uint64_t)a1, (uint64_t)v16);
    a1[352] = 1;
    WebKit::WebLoaderStrategy::SyncLoadResult::~SyncLoadResult((WebKit::WebLoaderStrategy::SyncLoadResult *)v16, v15);
  }
  else
  {
    *a1 = 0;
    a1[352] = 0;
  }
}

void WebKit::WebLoaderStrategy::loadResourceSynchronously(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, NSObject *a10)
{
  uint64_t v10 = MEMORY[0x1F4188790](a1, a2, a3);
  uint64_t v12 = v11;
  uint64_t v149 = v10;
  uint64_t v150 = v13;
  char v15 = v14;
  uint64_t v17 = v16;
  uint64_t v154 = v18;
  uint64_t v20 = v19;
  uint64_t v212 = *MEMORY[0x1E4F143B8];
  int v21 = (void *)*((void *)v19 + 2);
  uint64_t v151 = v22;
  if ((*(uint64_t (**)(void *))(*v21 + 1072))(v21))
  {
    uint64_t v153 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
LABEL_12:
    uint64_t v32 = 0;
    uint64_t v152 = 0;
    LOBYTE(v33) = 1;
    goto LABEL_15;
  }
  uint64_t v25 = (WebKit::WebFrame *)v21[2];
  if (!v25)
  {
    uint64_t v153 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    goto LABEL_12;
  }
  uint64_t v26 = *((void *)v25 + 3);
  if (v26
    && (uint64_t v27 = *(void *)(v26 + 8)) != 0
    && (uint64_t v28 = *(void *)(v27 + 24)) != 0
    && (uint64_t v29 = *(void *)(v28 + 8)) != 0
    && (CFTypeRef v30 = *(void **)(*(void *)(v29 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v30 + 1368))(v30) & 1) == 0)
    && (int v31 = *(void **)(v30[2] + 8)) != 0)
  {
    uint64_t v24 = v31[263];
    uint64_t v32 = (WebCore::Page *)v31[4];
    uint64_t v152 = v31[3];
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v32 = 0;
    uint64_t v152 = 0;
  }
  LOBYTE(v33) = 0;
  uint64_t v23 = (WebCore::ResourceRequestBase *)*((void *)v25 + 11);
  uint64_t v153 = *((void *)v25 + 10);
LABEL_15:
  uint64_t v34 = *(void *)(WebCore::FrameLoader::frame(v20) + 296);
  if (!v34)
  {
    uint64_t v44 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v182 = 134219520;
      *(void *)&v182[4] = v149;
      *(_WORD *)&v182[12] = 2048;
      *(void *)&v182[14] = 0;
      *(_WORD *)&v182[22] = 2048;
      v183 = v20;
      *(_WORD *)v184 = 2048;
      *(void *)&v184[2] = WebCore::FrameLoader::frame(v20);
      *(_WORD *)&v184[10] = 2048;
      *(void *)&v184[12] = v152;
      *(_WORD *)&v184[20] = 2048;
      *(void *)&v184[22] = v153;
      *(_WORD *)&v184[30] = 2048;
      *(void *)&v184[32] = v154;
      _os_log_error_impl(&dword_1985F2000, v44, OS_LOG_TYPE_ERROR, "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderStrategy::loadResourceSynchronously: no document", v182, 0x48u);
    }
    WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v17);
    WebCore::createInternalError();
    uint64_t v46 = *(void *)v182;
    *(void *)v182 = 0;
    uint64_t v47 = *(WTF::StringImpl **)v12;
    *(void *)uint64_t v12 = v46;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2) {
        WTF::StringImpl::destroy(v47, v45);
      }
      else {
        *(_DWORD *)v47 -= 2;
      }
    }
    WTF::URL::operator=(v12 + 8, (uint64_t)&v182[8]);
    uint64_t v84 = *(void *)&v184[16];
    *(void *)&v184[16] = 0;
    uint64_t v85 = *(WTF::StringImpl **)(v12 + 48);
    *(void *)(v12 + 48) = v84;
    if (v85)
    {
      if (*(_DWORD *)v85 == 2) {
        WTF::StringImpl::destroy(v85, v83);
      }
      else {
        *(_DWORD *)v85 -= 2;
      }
    }
    *(_DWORD *)(v12 + 56) = *(_DWORD *)&v184[24];
    *(_WORD *)(v12 + 60) = *(_WORD *)&v184[28];
    uint64_t v86 = *(void *)&v184[32];
    *(void *)&v184[32] = 0;
    char v87 = *(const void **)(v12 + 64);
    *(void *)(v12 + 64) = v86;
    if (v87)
    {
      CFRelease(v87);
      v144 = *(const void **)&v184[32];
      *(unsigned char *)(v12 + 72) = v184[40];
      *(void *)&v184[32] = 0;
      if (v144) {
        CFRelease(v144);
      }
    }
    else
    {
      *(unsigned char *)(v12 + 72) = v184[40];
      *(void *)&v184[32] = 0;
    }
    long long v88 = *(WTF::StringImpl **)&v184[16];
    *(void *)&v184[16] = 0;
    if (v88)
    {
      if (*(_DWORD *)v88 == 2) {
        WTF::StringImpl::destroy(v88, v83);
      }
      else {
        *(_DWORD *)v88 -= 2;
      }
    }
    uint64_t v89 = *(WTF::StringImpl **)&v182[8];
    *(void *)&v182[8] = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 2) {
        WTF::StringImpl::destroy(v89, v83);
      }
      else {
        *(_DWORD *)v89 -= 2;
      }
    }
    uint64_t v90 = *(WTF::StringImpl **)v182;
    *(void *)v182 = 0;
    if (v90)
    {
      if (*(_DWORD *)v90 == 2) {
        WTF::StringImpl::destroy(v90, v83);
      }
      else {
        *(_DWORD *)v90 -= 2;
      }
    }
    return;
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v17);
  if (WTF::URL::protocolIs())
  {
    uint64_t v35 = (WebCore::ResourceRequestBase *)v17;
    uint64_t v36 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v182 = 134219520;
      *(void *)&v182[4] = v149;
      *(_WORD *)&v182[12] = 2048;
      *(void *)&v182[14] = 0;
      *(_WORD *)&v182[22] = 2048;
      v183 = v20;
      *(_WORD *)v184 = 2048;
      *(void *)&v184[2] = WebCore::FrameLoader::frame(v20);
      *(_WORD *)&v184[10] = 2048;
      *(void *)&v184[12] = v152;
      *(_WORD *)&v184[20] = 2048;
      *(void *)&v184[22] = v153;
      *(_WORD *)&v184[30] = 2048;
      *(void *)&v184[32] = v154;
      _os_log_error_impl(&dword_1985F2000, v36, OS_LOG_TYPE_ERROR, "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderStrategy::loadResourceSynchronously: URL will be loaded as data", v182, 0x48u);
    }
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v182);
    CFTypeRef cf = 0;
    char v189 = 0;
    char v187 = v187 & 0xF1 | 4;
    v191[0] = 0;
    v190 = 0;
    WTF::URL::invalidate((WTF::URL *)v191);
    CFTypeRef v198 = 0;
    memset(v197, 0, 14);
    char v199 = 1;
    v201 = 0;
    v200 = 0;
    WebCore::ResourceRequestBase::url(v35);
    WebCore::DataURLDecoder::decode();
    if (v158[8])
    {
      WebCore::ResourceRequestBase::url(v35);
      uint64_t v37 = a9;
      WebCore::ResourceResponseBase::dataURLResponse();
      WebCore::ResourceResponseBase::operator=((uint64_t)v182, (uint64_t)buf);
      CFTypeRef v39 = v179;
      CFTypeRef v179 = 0;
      CFTypeRef v40 = cf;
      CFTypeRef cf = v39;
      char v33 = a10;
      if (v40)
      {
        CFRelease(v40);
        CFTypeRef v126 = v179;
        char v189 = v180;
        CFTypeRef v179 = 0;
        if (v126) {
          CFRelease(v126);
        }
      }
      else
      {
        char v189 = v180;
        CFTypeRef v179 = 0;
      }
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v38);
      CFTypeRef v42 = v200;
      if (v200)
      {
        v200 = 0;
        LODWORD(v201) = 0;
        WTF::fastFree(v42, v41);
      }
      v200 = v157;
      char v43 = *(objc_class **)v158;
      int v157 = 0;
      *(void *)v158 = 0;
      v201 = v43;
    }
    else
    {
      uint64_t v51 = off_1EB358988;
      uint64_t v37 = a9;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = v149;
        _os_log_impl(&dword_1985F2000, v51, OS_LOG_TYPE_DEFAULT, "%p - WebLoaderStrategy::loadDataURLSynchronously: decoding of data failed", buf, 0xCu);
      }
      WebCore::ResourceRequestBase::url(v35);
      WebCore::createInternalError();
      uint64_t v53 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      long long v54 = v190;
      v190 = v53;
      char v33 = a10;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2) {
          WTF::StringImpl::destroy(v54, v52);
        }
        else {
          *(_DWORD *)v54 -= 2;
        }
      }
      WTF::URL::operator=((uint64_t)v191, (uint64_t)&buf[8]);
      uint64_t v103 = *(WTF::StringImpl **)&v174[4];
      *(void *)&v174[4] = 0;
      uint64_t v104 = v197[0];
      v197[0] = v103;
      if (v104)
      {
        if (*(_DWORD *)v104 == 2) {
          WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v41);
        }
        else {
          *(_DWORD *)v104 -= 2;
        }
      }
      LODWORD(v197[1]) = *(_DWORD *)&v174[12];
      WORD2(v197[1]) = *(_WORD *)&v174[16];
      CFTypeRef v105 = v176;
      CFTypeRef v176 = 0;
      CFTypeRef v106 = v198;
      CFTypeRef v198 = v105;
      if (v106)
      {
        CFRelease(v106);
        CFTypeRef v145 = v176;
        char v199 = v177;
        CFTypeRef v176 = 0;
        if (v145) {
          CFRelease(v145);
        }
      }
      else
      {
        char v199 = v177;
        CFTypeRef v176 = 0;
      }
      CFTypeRef v107 = *(WTF::StringImpl **)&v174[4];
      *(void *)&v174[4] = 0;
      if (v107)
      {
        if (*(_DWORD *)v107 == 2) {
          WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v41);
        }
        else {
          *(_DWORD *)v107 -= 2;
        }
      }
      uint64_t v108 = *(WTF::StringImpl **)&buf[8];
      *(void *)&buf[8] = 0;
      if (v108)
      {
        if (*(_DWORD *)v108 == 2) {
          WTF::StringImpl::destroy(v108, (WTF::StringImpl *)v41);
        }
        else {
          *(_DWORD *)v108 -= 2;
        }
      }
      BOOL v109 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v109)
      {
        if (*(_DWORD *)v109 == 2) {
          WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v41);
        }
        else {
          *(_DWORD *)v109 -= 2;
        }
      }
    }
    if (v158[8])
    {
      v110 = v157;
      if (v157)
      {
        int v157 = 0;
        *(_DWORD *)v158 = 0;
        WTF::fastFree(v110, v41);
      }
      int v111 = *(WTF::StringImpl **)&v156[16];
      *(void *)&v156[16] = 0;
      if (v111)
      {
        if (*(_DWORD *)v111 == 2) {
          WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v41);
        }
        else {
          *(_DWORD *)v111 -= 2;
        }
      }
      uint64_t v112 = *(WTF::StringImpl **)&v156[8];
      *(void *)&v156[8] = 0;
      if (v112)
      {
        if (*(_DWORD *)v112 == 2) {
          WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v41);
        }
        else {
          *(_DWORD *)v112 -= 2;
        }
      }
      uint64_t v113 = *(WTF::StringImpl **)v156;
      *(void *)uint64_t v156 = 0;
      if (v113)
      {
        if (*(_DWORD *)v113 == 2) {
          WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v41);
        }
        else {
          *(_DWORD *)v113 -= 2;
        }
      }
    }
    uint64_t v114 = v190;
    v190 = 0;
    uint64_t v115 = *(WTF::StringImpl **)v12;
    *(void *)uint64_t v12 = v114;
    if (v115)
    {
      if (*(_DWORD *)v115 == 2) {
        WTF::StringImpl::destroy(v115, (WTF::StringImpl *)v41);
      }
      else {
        *(_DWORD *)v115 -= 2;
      }
    }
    WTF::URL::operator=(v12 + 8, (uint64_t)v191);
    int v117 = v197[0];
    v197[0] = 0;
    char v118 = *(WTF::StringImpl **)(v12 + 48);
    *(void *)(v12 + 48) = v117;
    if (v118)
    {
      if (*(_DWORD *)v118 == 2) {
        WTF::StringImpl::destroy(v118, v116);
      }
      else {
        *(_DWORD *)v118 -= 2;
      }
    }
    *(_DWORD *)(v12 + 56) = v197[1];
    *(_WORD *)(v12 + 60) = WORD2(v197[1]);
    CFTypeRef v119 = v198;
    CFTypeRef v198 = 0;
    char v120 = *(const void **)(v12 + 64);
    *(void *)(v12 + 64) = v119;
    if (v120) {
      CFRelease(v120);
    }
    *(unsigned char *)(v12 + 72) = v199;
    WebCore::ResourceResponseBase::operator=(v37, (uint64_t)v182);
    CFTypeRef v121 = cf;
    CFTypeRef cf = 0;
    v122 = *(const void **)(v37 + 240);
    *(void *)(v37 + 240) = v121;
    if (v122) {
      CFRelease(v122);
    }
    *(unsigned char *)(v37 + 248) = v189;
    isa = v33->isa;
    if (v33->isa)
    {
      v33->isa = 0;
      LODWORD(v33[1].isa) = 0;
      WTF::fastFree(isa, v95);
    }
    goto LABEL_154;
  }
  WebKit::WebLoaderStrategy::tryLoadingSynchronouslyUsingURLSchemeHandler(v182, *((void **)v20 + 2), (uint64_t)v154, (String *)v17);
  if (!v202)
  {
    Parameters = WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v182);
    v204 = v154;
    *(void *)v182 = v24;
    *(void *)&v182[8] = v152;
    *(void *)&v182[16] = v153;
    v183 = v23;
    *(_DWORD *)&v184[16] = WebCore::presentingApplicationPID(Parameters);
    {
      v147 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v147);
    }
    uint64_t v23 = (WebCore::ResourceRequestBase *)v17;
    uint64_t v56 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    char v57 = *(unsigned char *)(v56 + 64);
    long long v58 = *(_OWORD *)(v56 + 48);
    *(_OWORD *)&v184[20] = *(_OWORD *)(v56 + 32);
    *(_OWORD *)&v184[36] = v58;
    char v185 = v57;
    WebCore::ResourceRequestBase::operator=((uint64_t)&v186, v17);
    uint64_t v59 = *(const void **)(v17 + 192);
    uint64_t v17 = v150;
    if (v59) {
      CFRetain(v59);
    }
    uint64_t v60 = v192;
    CFTypeRef v192 = v59;
    if (!v60) {
      goto LABEL_44;
    }
    goto LABEL_196;
  }
  char v33 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
  {
    uint64_t v60 = (void *)WebCore::FrameLoader::frame(v20);
    if (!v202) {
      goto LABEL_195;
    }
    uint64_t v17 = (uint64_t)v60;
    MEMORY[0x19973EC60](&v190);
    *(_DWORD *)long long buf = 134219776;
    *(void *)&uint8_t buf[4] = v149;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = 0;
    __int16 v169 = 2048;
    v170 = v20;
    __int16 v171 = 2048;
    uint64_t v172 = v17;
    __int16 v173 = 2048;
    *(void *)v174 = v152;
    *(_WORD *)&v174[8] = 2048;
    *(void *)&v174[10] = v153;
    __int16 v175 = 2048;
    CFTypeRef v176 = v154;
    __int16 v177 = 1024;
    int v178 = (int)v197[1];
    _os_log_error_impl(&dword_1985F2000, v33, OS_LOG_TYPE_ERROR, "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderStrategy::loadResourceSynchronously: failed calling tryLoadingSynchronouslyUsingURLSchemeHandler (error=%d)", buf, 0x4Eu);
    if (!v202) {
      goto LABEL_195;
    }
  }
  long long v49 = v190;
  v190 = 0;
  uint64_t v50 = *(WTF::StringImpl **)v12;
  *(void *)uint64_t v12 = v49;
  char v33 = a10;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2) {
      WTF::StringImpl::destroy(v50, v48);
    }
    else {
      *(_DWORD *)v50 -= 2;
    }
  }
  WTF::URL::operator=(v12 + 8, (uint64_t)v191);
  long long v92 = v197[0];
  v197[0] = 0;
  uint64_t v93 = *(WTF::StringImpl **)(v12 + 48);
  *(void *)(v12 + 48) = v92;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2) {
      WTF::StringImpl::destroy(v93, v91);
    }
    else {
      *(_DWORD *)v93 -= 2;
    }
  }
  *(_DWORD *)(v12 + 56) = v197[1];
  *(_WORD *)(v12 + 60) = WORD2(v197[1]);
  CFTypeRef v94 = v198;
  CFTypeRef v198 = 0;
  uint64_t v60 = *(void **)(v12 + 64);
  *(void *)(v12 + 64) = v94;
  if (v60) {
    CFRelease(v60);
  }
  *(unsigned char *)(v12 + 72) = v199;
  if (!v202) {
    goto LABEL_195;
  }
  WebCore::ResourceResponseBase::operator=(a9, (uint64_t)v182);
  CFTypeRef v96 = cf;
  CFTypeRef cf = 0;
  uint64_t v60 = *(void **)(a9 + 240);
  *(void *)(a9 + 240) = v96;
  if (v60) {
    CFRelease(v60);
  }
  *(unsigned char *)(a9 + 248) = v189;
  if (!v202)
  {
LABEL_195:
    __break(1u);
LABEL_196:
    CFRelease(v60);
LABEL_44:
    __int16 v193 = 0;
    BOOL v194 = *(unsigned char *)(v17 + 2) != 0;
    char v195 = v15;
    if ((v33 & 1) == 0
      && (uint64_t v61 = *((void *)v25 + 3)) != 0
      && (uint64_t v62 = *(void *)(v61 + 8)) != 0
      && !*(unsigned char *)(v62 + 144)
      && (uint64_t v60 = *(void **)(v62 + 296)) != 0)
    {
      uint64_t v60 = (void *)(*(uint64_t (**)(void))(v60[26] + 8))();
      BOOL v63 = v60 == 2;
    }
    else
    {
      BOOL v63 = 1;
    }
    BOOL v196 = v63;
    v211[16] = *(unsigned char *)(WebCore::DeprecatedGlobalSettings::shared((WebCore::DeprecatedGlobalSettings *)v60) + 22);
    *(_DWORD *)((char *)v205 + 3) = *(_DWORD *)(v17 + 3);
    v205[0] = *(_DWORD *)v17;
    WTF::String::operator=(&v206, (WTF::StringImpl **)(v17 + 8));
    long long v64 = *(_OWORD *)(v17 + 32);
    long long v207 = *(_OWORD *)(v17 + 16);
    long long v208 = v64;
    uint64_t v65 = (atomic_uint *)WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v34 + 208));
    if (v65) {
      atomic_fetch_add(v65, 1u);
    }
    uint64_t v67 = *(void *)&v184[8];
    *(void *)&v184[8] = v65;
    if (v67) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v67, v66);
    }
    long long v69 = (atomic_uint *)WebCore::Document::topOrigin((WebCore::Document *)v34);
    atomic_fetch_add(v69, 1u);
    uint64_t v70 = *(void *)v184;
    *(void *)v184 = v69;
    if (v70) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v70, v68);
    }
    if ((WebCore::Document::shouldBypassMainWorldContentSecurityPolicy((WebCore::Document *)v34) & 1) == 0)
    {
      uint64_t v71 = (WebCore::ContentSecurityPolicy *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v34 + 208));
      if (v71)
      {
        WebCore::ContentSecurityPolicy::responseHeaders((uint64_t *)buf, v71);
        std::optional<WebCore::ContentSecurityPolicyResponseHeaders>::operator=[abi:sn180100]<WebCore::ContentSecurityPolicyResponseHeaders,void>((uint64_t)&v209, (uint64_t)buf);
        WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v72);
      }
    }
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=((uint64_t)&v210, v151);
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=((uint64_t)v211, v151 + 16);
    if ((v33 & 1) == 0) {
      __int16 isTopFrameNavigatingToAppBoundDomain = WebKit::WebFrame::isTopFrameNavigatingToAppBoundDomain(v25);
    }
    uint64_t v73 = *((void *)v25 + 3);
    __int16 v74 = (WTF::StringImpl *)a10;
    if (v73)
    {
      uint64_t v75 = *(WebKit **)(v73 + 8);
      uint64_t v76 = &qword_1EB35A000;
      if (!v75) {
        goto LABEL_211;
      }
      if (*((unsigned char *)v75 + 144)) {
        uint64_t v77 = 0;
      }
      else {
        uint64_t v77 = v75;
      }
    }
    else
    {
      uint64_t v77 = 0;
      uint64_t v76 = &qword_1EB35A000;
    }
    while (1)
    {
      WebKit::addParametersShared(v77, (const WebCore::LocalFrame *)v182, 0);
      *((_DWORD *)v74 + 3) = 0;
      atomic_fetch_add((atomic_uint *volatile)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount, 1u);
      if (*((unsigned char *)v76 + 2272) != 1)
      {
        char v148 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v148);
      }
      uint64_t v78 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                      + 24);
      *(void *)uint64_t v156 = v182;
      IPC::Connection::sendSync<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad>((uint64_t)buf, v78, (uint64_t *)v156);
      if (!v181)
      {
        IPC::ConnectionSendSyncResult<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad>::takeReply((uint64_t)v156, (uint64_t)buf);
        v155[0] = (WTF::StringImpl *)v12;
        v155[1] = (WTF::StringImpl *)a9;
        v155[2] = v74;
        std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WebCore::ResourceError &,WebCore::ResourceResponse &,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,1ul,2ul>((uint64_t *)v155, (uint64_t)v156);
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~__tuple_impl((uint64_t)v156, v101);
        goto LABEL_189;
      }
      __int16 v74 = (WTF::StringImpl *)off_1EB358988;
      if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR)) {
        break;
      }
      uint64_t v142 = WebCore::FrameLoader::frame(v20);
      if (v181 <= 1)
      {
        uint64_t v143 = IPC::errorAsString();
        *(_DWORD *)uint64_t v156 = 134219778;
        *(void *)&v156[4] = v149;
        *(_WORD *)&v156[12] = 2048;
        *(void *)&v156[14] = 0;
        *(_WORD *)&v156[22] = 2048;
        int v157 = v20;
        *(_WORD *)v158 = 2048;
        *(void *)&v158[2] = v142;
        __int16 v159 = 2048;
        *(void *)v160 = v152;
        *(_WORD *)&v160[8] = 2048;
        *(void *)&v160[10] = v153;
        __int16 v161 = 2048;
        CFTypeRef v162 = v154;
        __int16 v163 = 2082;
        v164 = v143;
        _os_log_error_impl(&dword_1985F2000, (os_log_t)v74, OS_LOG_TYPE_ERROR, "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderStrategy::loadResourceSynchronously: failed sending synchronous network process message %{public}s", v156, 0x52u);
        break;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_211:
      uint64_t v77 = 0;
    }
    if (v32)
    {
      uint64_t v79 = (WebCore::DiagnosticLoggingKeys *)WebCore::Page::diagnosticLoggingClient(v32);
      uint64_t v80 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::internalErrorKey((uint64_t *)v156, v79);
      WebCore::DiagnosticLoggingKeys::synchronousMessageFailedKey((uint64_t *)v155, v80);
      (**(void (***)(WebCore::DiagnosticLoggingKeys *, unsigned char *, WTF::StringImpl **, void))v79)(v79, v156, v155, 0);
      int v82 = v155[0];
      v155[0] = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2) {
          WTF::StringImpl::destroy(v82, v81);
        }
        else {
          *(_DWORD *)v82 -= 2;
        }
      }
      v127 = *(WTF::StringImpl **)v156;
      *(void *)uint64_t v156 = 0;
      if (v127)
      {
        if (*(_DWORD *)v127 == 2) {
          WTF::StringImpl::destroy(v127, v81);
        }
        else {
          *(_DWORD *)v127 -= 2;
        }
      }
    }
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v156);
    CFTypeRef v166 = 0;
    char v167 = 0;
    char v165 = v165 & 0xF1 | 4;
    WebCore::ResourceResponseBase::operator=(a9, (uint64_t)v156);
    CFTypeRef v129 = v166;
    CFTypeRef v166 = 0;
    v130 = *(const void **)(a9 + 240);
    *(void *)(a9 + 240) = v129;
    if (v130)
    {
      CFRelease(v130);
      CFTypeRef v141 = v166;
      *(unsigned char *)(a9 + 248) = v167;
      CFTypeRef v166 = 0;
      if (v141) {
        CFRelease(v141);
      }
    }
    else
    {
      *(unsigned char *)(a9 + 248) = v167;
      CFTypeRef v166 = 0;
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v156, v128);
    WebCore::ResourceRequestBase::url(v23);
    WebCore::createInternalError();
    uint64_t v132 = *(void *)v156;
    *(void *)uint64_t v156 = 0;
    uint64_t v133 = *(WTF::StringImpl **)v12;
    *(void *)uint64_t v12 = v132;
    if (v133)
    {
      if (*(_DWORD *)v133 == 2) {
        WTF::StringImpl::destroy(v133, v131);
      }
      else {
        *(_DWORD *)v133 -= 2;
      }
    }
    WTF::URL::operator=(v12 + 8, (uint64_t)&v156[8]);
    uint64_t v134 = *(void *)&v160[4];
    *(void *)&v160[4] = 0;
    uint64_t v135 = *(WTF::StringImpl **)(v12 + 48);
    *(void *)(v12 + 48) = v134;
    if (v135)
    {
      if (*(_DWORD *)v135 == 2) {
        WTF::StringImpl::destroy(v135, v102);
      }
      else {
        *(_DWORD *)v135 -= 2;
      }
    }
    *(_DWORD *)(v12 + 56) = *(_DWORD *)&v160[12];
    *(_WORD *)(v12 + 60) = *(_WORD *)&v160[16];
    CFTypeRef v136 = v162;
    CFTypeRef v162 = 0;
    uint64_t v137 = *(const void **)(v12 + 64);
    *(void *)(v12 + 64) = v136;
    if (v137)
    {
      CFRelease(v137);
      CFTypeRef v146 = v162;
      *(unsigned char *)(v12 + 72) = v163;
      CFTypeRef v162 = 0;
      if (v146) {
        CFRelease(v146);
      }
    }
    else
    {
      *(unsigned char *)(v12 + 72) = v163;
      CFTypeRef v162 = 0;
    }
    int v138 = *(WTF::StringImpl **)&v160[4];
    *(void *)&v160[4] = 0;
    if (v138)
    {
      if (*(_DWORD *)v138 == 2) {
        WTF::StringImpl::destroy(v138, v102);
      }
      else {
        *(_DWORD *)v138 -= 2;
      }
    }
    v139 = *(WTF::StringImpl **)&v156[8];
    *(void *)&v156[8] = 0;
    if (v139)
    {
      if (*(_DWORD *)v139 == 2) {
        WTF::StringImpl::destroy(v139, v102);
      }
      else {
        *(_DWORD *)v139 -= 2;
      }
    }
    uint64_t v140 = *(WTF::StringImpl **)v156;
    *(void *)uint64_t v156 = 0;
    if (v140)
    {
      if (*(_DWORD *)v140 == 2) {
        WTF::StringImpl::destroy(v140, v102);
      }
      else {
        *(_DWORD *)v140 -= 2;
      }
    }
LABEL_189:
    if (v181 != -1) {
      ((void (*)(unsigned char *, unsigned char *))off_1EE9F1BA8[v181])(v156, buf);
    }
    atomic_fetch_add((atomic_uint *volatile)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount, 0xFFFFFFFF);
    WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v182, v102);
    return;
  }
  uint64_t v97 = a10->isa;
  if (!a10->isa)
  {
LABEL_154:
    unint64_t v124 = v200;
    v200 = 0;
    v33->isa = v124;
    unint64_t v125 = v201;
    v201 = 0;
    v33[1].isa = v125;
LABEL_155:
    WebKit::WebLoaderStrategy::SyncLoadResult::~SyncLoadResult((WebKit::WebLoaderStrategy::SyncLoadResult *)v182, v95);
    return;
  }
  a10->isa = 0;
  LODWORD(a10[1].isa) = 0;
  WTF::fastFree(v97, v95);
  int v98 = v202;
  v99 = v200;
  v200 = 0;
  a10->isa = v99;
  uint64_t v100 = v201;
  v201 = 0;
  a10[1].isa = v100;
  if (v98) {
    goto LABEL_155;
  }
}

IPC::Encoder **IPC::Connection::sendSync<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v15 = 0;
  IPC::Connection::createSyncMessageEncoder(3615, 0, &v15, &v14);
  IPC::ArgumentCoder<WebKit::NetworkResourceLoadParameters,void>::encode(v14, *a3);
  IPC::Connection::sendSyncMessage(a2, v15, (uint64_t *)&v14, 0, (uint64_t)&v12, INFINITY);
  if (v13)
  {
    if (v13 == 1)
    {
      *(unsigned char *)a1 = (_BYTE)v12;
      int v7 = 1;
      *(_DWORD *)(a1 + 360) = 1;
      goto LABEL_7;
    }
  }
  else
  {
    LOBYTE(v10[0]) = 0;
    char v11 = 0;
    IPC::Decoder::operator>><std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v12, (uint64_t)v10);
    if (!v11)
    {
      *(unsigned char *)a1 = 13;
      *(_DWORD *)(a1 + 360) = 1;
      goto LABEL_6;
    }
    if (!v13)
    {
      IPC::ConnectionSendSyncResult<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad>::ConnectionSendSyncResult(a1, &v12, v10);
      if (v11) {
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~__tuple_impl((uint64_t)v10, v6);
      }
LABEL_6:
      int v7 = v13;
      if (v13 == -1) {
        return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v14, v6);
      }
LABEL_7:
      ((void (*)(uint64_t *, IPC::Decoder **))off_1EE9F1D00[v7])(v10, &v12);
      return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v14, v6);
    }
  }
  uint64_t v9 = std::__throw_bad_variant_access[abi:sn180100]();
  return (IPC::Encoder **)IPC::ConnectionSendSyncResult<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad>::takeReply(v9);
}

uint64_t IPC::ConnectionSendSyncResult<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad>::takeReply(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 360))
  {
    unsigned int v4 = (WebKit::WebLoaderStrategy *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebLoaderStrategy::pageLoadCompleted(v4, v5);
  }
  else
  {
    uint64_t v2 = (uint64_t *)(a2 + 8);
    return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl(a1, v2);
  }
}

IPC::Encoder *WebKit::WebLoaderStrategy::pageLoadCompleted(WebKit::WebLoaderStrategy *this, WebCore::Page *a2)
{
  {
    uint64_t v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v12);
  }
  uint64_t result = (IPC::Encoder *)WebKit::WebProcess::singleton(void)::process;
  uint64_t v3 = *(void *)(WebKit::WebProcess::singleton(void)::process + 296);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 24);
    uint64_t v5 = *(void **)(*((void *)a2 + 6) + 16);
    (*(void (**)(void *))(*v5 + 1368))(v5);
    uint64_t v6 = *(void *)(v5[2] + 8);
    if (v6) {
      uint64_t v7 = v6 - 16;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v13 = *(void *)(v7 + 40);
    uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v8 = 257;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 66) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 68) = 0;
    *((void *)v8 + 70) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    char v14 = v8;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, &v13);
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v14, 0, 0);
    uint64_t result = v14;
    char v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v10, v11);
    }
  }
  return result;
}

void WebKit::WebLoaderStrategy::browsingContextRemoved(WebKit::WebLoaderStrategy *this, WebCore::LocalFrame *a2)
{
  {
    uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  uint64_t v3 = *(void *)(WebKit::WebProcess::singleton(void)::process + 296);
  if (v3)
  {
    uint64_t v4 = *(void **)(*(void *)(*(void *)(*((void *)a2 + 3) + 8) + 48) + 16);
    (*(void (**)(void *))(*v4 + 1368))(v4);
    uint64_t v5 = *(void *)(v4[2] + 8);
    if (v5) {
      uint64_t v6 = v5 - 16;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void *)(v3 + 24);
    uint64_t v8 = *(void *)(v6 + 2120);
    uint64_t v18 = *(void *)(v6 + 40);
    uint64_t v19 = v8;
    WebKit::WebFrame::fromCoreFrame((uint64_t)a2, &v16);
    uint64_t v9 = v16;
    *(_OWORD *)uint64_t v17 = *(_OWORD *)(v16 + 80);
    uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v10 = 224;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 68) = 0;
    *((void *)v10 + 70) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    uint64_t v20 = v10;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, &v19);
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, &v18);
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v10, v17);
    IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v20, 0, 0);
    uint64_t v12 = v20;
    uint64_t v20 = 0;
    if (v12)
    {
      IPC::Encoder::~Encoder(v12, v11);
      WTF::fastFree(v13, v14);
    }
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
}

void WebKit::WebLoaderStrategy::startPingLoad(uint64_t a1, WebKit *a2, WebCore::ResourceRequestBase *a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  WebKit::WebFrame::fromCoreFrame((uint64_t)a2, &v93);
  uint64_t v14 = *((void *)a2 + 37);
  if (v14)
  {
    *(_DWORD *)(v14 + 28) += 2;
    uint64_t v15 = v93;
    if (v93)
    {
      uint64_t v16 = *((void *)v93 + 3);
      if (!v16
        || (uint64_t v17 = *(void *)(v16 + 8)) == 0
        || (uint64_t v18 = *(void *)(v17 + 24)) == 0
        || (uint64_t v19 = *(void *)(v18 + 8)) == 0
        || (uint64_t v20 = *(void **)(*(void *)(v19 + 48) + 16),
            ((*(uint64_t (**)(void *))(*v20 + 1368))(v20) & 1) != 0)
        || (int v21 = *(void **)(v20[2] + 8)) == 0)
      {
        if (*a7)
        {
          WebCore::ResourceRequestBase::url(a3);
          WebCore::createInternalError();
          WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v94);
          CFTypeRef v104 = 0;
          char v105 = 0;
          char v103 = v103 & 0xF1 | 4;
          (*(void (**)(uint64_t, WTF::StringImpl **, void *))(*(void *)*a7 + 16))(*a7, &v89, v94);
          CFTypeRef v68 = v104;
          CFTypeRef v104 = 0;
          if (v68) {
            CFRelease(v68);
          }
          WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v94, v67);
          CFTypeRef v70 = v92;
          CFTypeRef v92 = 0;
          if (v70) {
            CFRelease(v70);
          }
          uint64_t v71 = v91;
          long long v91 = 0;
          if (v71)
          {
            if (*(_DWORD *)v71 == 2) {
              WTF::StringImpl::destroy(v71, v69);
            }
            else {
              *(_DWORD *)v71 -= 2;
            }
          }
          uint64_t v84 = v90;
          uint64_t v90 = 0;
          if (v84)
          {
            if (*(_DWORD *)v84 == 2) {
              WTF::StringImpl::destroy(v84, v69);
            }
            else {
              *(_DWORD *)v84 -= 2;
            }
          }
          uint64_t v85 = v89;
          uint64_t v89 = 0;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2) {
              WTF::StringImpl::destroy(v85, v69);
            }
            else {
              *(_DWORD *)v85 -= 2;
            }
          }
        }
        goto LABEL_97;
      }
      uint64_t v88 = a1;
      CFRetain((CFTypeRef)*(v21 - 1));
      WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v94);
      uint64_t v110 = WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      uint64_t v22 = v21[3];
      v94[0] = v21[263];
      v94[1] = v22;
      long long v95 = *((_OWORD *)v15 + 5);
      WebCore::ResourceRequestBase::operator=((uint64_t)&v102, (uint64_t)a3);
      uint64_t v23 = (const void *)*((void *)a3 + 24);
      if (v23) {
        CFRetain(v23);
      }
      CFTypeRef v24 = cf;
      CFTypeRef cf = v23;
      if (v24) {
        CFRelease(v24);
      }
      uint64_t v25 = (atomic_uint *)WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v14 + 208));
      if (v25) {
        atomic_fetch_add(v25, 1u);
      }
      uint64_t v27 = v97;
      uint64_t v97 = (WTF *)v25;
      if (v27) {
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v27, v26);
      }
      uint64_t v29 = (atomic_uint *)WebCore::Document::topOrigin((WebCore::Document *)v14);
      atomic_fetch_add(v29, 1u);
      CFTypeRef v30 = v96;
      CFTypeRef v96 = (WTF *)v29;
      if (v30) {
        CFTypeRef v30 = (WebCore *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v30, v28);
      }
      int v98 = WebCore::presentingApplicationPID(v30);
      {
        uint64_t v86 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v86);
      }
      uint64_t v31 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
      char v32 = *(unsigned char *)(v31 + 64);
      long long v33 = *(_OWORD *)(v31 + 48);
      long long v99 = *(_OWORD *)(v31 + 32);
      long long v100 = v33;
      char v101 = v32;
      BOOL v107 = *(unsigned char *)(a5 + 2) != 0;
      *(_DWORD *)((char *)v111 + 3) = *(_DWORD *)(a5 + 3);
      v111[0] = *(_DWORD *)a5;
      WTF::String::operator=(&v112, (WTF::StringImpl **)(a5 + 8));
      long long v34 = *(_OWORD *)(a5 + 32);
      long long v113 = *(_OWORD *)(a5 + 16);
      long long v114 = v34;
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=((uint64_t)&v119, a4);
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=((uint64_t)v120, a4 + 16);
      uint64_t v35 = (WebCore::DeprecatedGlobalSettings *)*((void *)a2 + 37);
      if (v35)
      {
        uint64_t v35 = (WebCore::DeprecatedGlobalSettings *)(*(uint64_t (**)(void))(*((void *)v35 + 26) + 8))();
        BOOL v36 = v35 == 2;
      }
      else
      {
        BOOL v36 = 1;
      }
      BOOL v108 = v36;
      v120[16] = *(unsigned char *)(WebCore::DeprecatedGlobalSettings::shared(v35) + 22);
      if (a6 == 1 && (WebCore::Document::shouldBypassMainWorldContentSecurityPolicy((WebCore::Document *)v14) & 1) == 0)
      {
        uint64_t v37 = (WebCore::ContentSecurityPolicy *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v14 + 208));
        if (v37)
        {
          WebCore::ContentSecurityPolicy::responseHeaders((uint64_t *)&v89, v37);
          std::optional<WebCore::ContentSecurityPolicyResponseHeaders>::operator=[abi:sn180100]<WebCore::ContentSecurityPolicyResponseHeaders,void>((uint64_t)&v115, (uint64_t)&v89);
          WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v38);
        }
      }
      WebKit::addParametersShared(a2, (const WebCore::LocalFrame *)v94, 0);
      __int16 isTopFrameNavigatingToAppBoundDomain = WebKit::WebFrame::isTopFrameNavigatingToAppBoundDomain(v93);
      WTF::String::operator=(&v116, (WTF::StringImpl **)(v14 + 768));
      long long v39 = *(_OWORD *)(v14 + 776);
      long long v118 = *(_OWORD *)(v14 + 792);
      long long v117 = v39;
      uint64_t v40 = *(void *)(v14 + 544);
      if (v40)
      {
        uint64_t v41 = *(void *)(v40 + 8);
        if (v41)
        {
          uint64_t v42 = *(void *)(v41 + 24);
          if (v42)
          {
            uint64_t v43 = *(void *)(v42 + 8);
            if (v43)
            {
              WTF::String::operator=(&v121, (WTF::StringImpl **)(v43 + 168));
              long long v44 = *(_OWORD *)(v43 + 192);
              long long v122 = *(_OWORD *)(v43 + 176);
              long long v123 = v44;
            }
          }
        }
      }
      uint64_t v45 = *(void *)(v21[76] + 64);
      if (!v125) {
        char v125 = 1;
      }
      uint64_t v124 = v45;
      if (*a7)
      {
        uint64_t v47 = (uint64_t *)(a1 + 64);
        uint64_t v46 = *(void *)(v88 + 64);
        if (v46
          || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(v88 + 64)),
              (uint64_t v46 = *v47) != 0))
        {
          int v48 = *(_DWORD *)(v46 - 8);
        }
        else
        {
          int v48 = 0;
        }
        uint64_t v49 = v110;
        unint64_t v50 = (v110 + ~(v110 << 32)) ^ ((unint64_t)(v110 + ~(v110 << 32)) >> 22);
        unint64_t v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
        unint64_t v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
        unsigned int v53 = v48 & ((v52 >> 31) ^ v52);
        long long v54 = (uint64_t *)(v46 + 16 * v53);
        uint64_t v55 = *v54;
        if (*v54)
        {
          uint64_t v56 = 0;
          int v57 = 1;
          while (v55 != v110)
          {
            if (v55 == -1) {
              uint64_t v56 = v54;
            }
            unsigned int v53 = (v53 + v57) & v48;
            long long v54 = (uint64_t *)(v46 + 16 * v53);
            uint64_t v55 = *v54;
            ++v57;
            if (!*v54)
            {
              if (v56)
              {
                *uint64_t v56 = 0;
                v56[1] = 0;
                --*(_DWORD *)(*v47 - 16);
                uint64_t v49 = v110;
                long long v54 = v56;
              }
              goto LABEL_45;
            }
          }
          goto LABEL_83;
        }
LABEL_45:
        *long long v54 = v49;
        uint64_t v58 = *a7;
        *a7 = 0;
        uint64_t v59 = v54[1];
        v54[1] = v58;
        if (v59) {
          (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
        }
        uint64_t v60 = *v47;
        if (*v47) {
          int v61 = *(_DWORD *)(v60 - 12) + 1;
        }
        else {
          int v61 = 1;
        }
        *(_DWORD *)(v60 - 12) = v61;
        uint64_t v74 = *v47;
        if (*v47) {
          int v75 = *(_DWORD *)(v74 - 12);
        }
        else {
          int v75 = 0;
        }
        uint64_t v76 = (*(_DWORD *)(v74 - 16) + v75);
        unint64_t v77 = *(unsigned int *)(v74 - 4);
        if (v77 > 0x400)
        {
          if (v77 > 2 * v76) {
            goto LABEL_83;
          }
          goto LABEL_82;
        }
        if (3 * v77 <= 4 * v76) {
LABEL_82:
        }
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v47);
      }
LABEL_83:
      {
        char v87 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v87);
      }
      uint64_t v78 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                      + 24);
      uint64_t v79 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v79 = 248;
      *((void *)v79 + 1) = 0;
      *((void *)v79 + 66) = (char *)v79 + 16;
      *((void *)v79 + 67) = 512;
      *((void *)v79 + 68) = 0;
      *((void *)v79 + 70) = 0;
      *((void *)v79 + 69) = 0;
      IPC::Encoder::encodeHeader(v79);
      uint64_t v89 = v79;
      IPC::ArgumentCoder<WebKit::NetworkResourceLoadParameters,void>::encode(v79, (uint64_t)v94);
      IPC::Connection::sendMessageImpl(v78, (uint64_t *)&v89, 0, 0);
      uint64_t v81 = v89;
      uint64_t v89 = 0;
      if (v81)
      {
        IPC::Encoder::~Encoder(v81, v80);
        WTF::fastFree(v82, v83);
      }
      WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)v94, (WTF::StringImpl *)v80);
      CFRelease((CFTypeRef)*(v21 - 1));
LABEL_97:
      if (*(_DWORD *)(v14 + 28) == 2)
      {
        if ((*(_WORD *)(v14 + 34) & 0x400) == 0) {
          WebCore::Node::removedLastRef((WebCore::Node *)v14);
        }
      }
      else
      {
        *(_DWORD *)(v14 + 28) -= 2;
      }
      goto LABEL_99;
    }
  }
  if (*a7)
  {
    WebCore::ResourceRequestBase::url(a3);
    WebCore::createInternalError();
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v94);
    CFTypeRef v104 = 0;
    char v105 = 0;
    char v103 = v103 & 0xF1 | 4;
    (*(void (**)(uint64_t, WTF::StringImpl **, void *))(*(void *)*a7 + 16))(*a7, &v89, v94);
    CFTypeRef v63 = v104;
    CFTypeRef v104 = 0;
    if (v63) {
      CFRelease(v63);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v94, v62);
    CFTypeRef v65 = v92;
    CFTypeRef v92 = 0;
    if (v65) {
      CFRelease(v65);
    }
    uint64_t v66 = v91;
    long long v91 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2) {
        WTF::StringImpl::destroy(v66, v64);
      }
      else {
        *(_DWORD *)v66 -= 2;
      }
    }
    __int16 v72 = v90;
    uint64_t v90 = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2) {
        WTF::StringImpl::destroy(v72, v64);
      }
      else {
        *(_DWORD *)v72 -= 2;
      }
    }
    uint64_t v73 = v89;
    uint64_t v89 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2) {
        WTF::StringImpl::destroy(v73, v64);
      }
      else {
        *(_DWORD *)v73 -= 2;
      }
    }
  }
  if (v14) {
    goto LABEL_97;
  }
LABEL_99:
  if (v93) {
    CFRelease(*((CFTypeRef *)v93 + 1));
  }
}

uint64_t WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate()
{
  if (!WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::m_generationProtected) {
    return WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  }
  uint64_t result = 138;
  __break(0xC471u);
  return result;
}

void WebKit::WebLoaderStrategy::preconnectTo(uint64_t a1, uint64_t a2, const String *a3, char a4, int a5, WTF::StringImpl **a6)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  char v11 = *(void **)(a2 + 16);
  if ((*(unsigned int (**)(void *))(*v11 + 1072))(v11))
  {
    if (!*a6) {
      return;
    }
LABEL_19:
    WebCore::createInternalError();
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(void *)*a6 + 16))(*a6, &v93);
    uint64_t v25 = *(const void **)&v96[16];
    *(void *)&v96[16] = 0;
    if (v25) {
      CFRelease(v25);
    }
    uint64_t v26 = *(WTF::StringImpl **)v96;
    *(void *)CFTypeRef v96 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v24);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    uint64_t v27 = v94;
    CFTypeRef v94 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, v24);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
    uint64_t v28 = v93;
    uint64_t v93 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, v24);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
    return;
  }
  uint64_t v12 = v11[2];
  uint64_t v13 = *(void *)(v12 + 24);
  if (!v13
    || (uint64_t v14 = *(void *)(v13 + 8)) == 0
    || (uint64_t v15 = *(void *)(v14 + 24)) == 0
    || (uint64_t v16 = *(void *)(v15 + 8)) == 0
    || (uint64_t v17 = *(void **)(*(void *)(v16 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v17 + 1368))(v17) & 1) != 0)
    || (uint64_t v18 = *(void *)(v17[2] + 8)) == 0)
  {
    if (!*a6) {
      return;
    }
    goto LABEL_19;
  }
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v83, a3, 0);
  CFTypeRef cf = 0;
  if (*(void *)(v18 + 32))
  {
    WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v83);
    if ((WebCore::Page::allowsLoadFromURL() & 1) == 0)
    {
      if (*a6)
      {
        uint64_t v93 = 0;
        CFTypeRef v94 = 0;
        WTF::URL::invalidate((WTF::URL *)&v94);
        *(void *)&v96[16] = 0;
        *(void *)CFTypeRef v96 = 0;
        *(void *)&v96[6] = 0;
        v96[24] = 1;
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(void *)*a6 + 16))(*a6, &v93);
        CFTypeRef v30 = *(const void **)&v96[16];
        *(void *)&v96[16] = 0;
        if (v30) {
          CFRelease(v30);
        }
        uint64_t v31 = *(WTF::StringImpl **)v96;
        *(void *)CFTypeRef v96 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2) {
            WTF::StringImpl::destroy(v31, v29);
          }
          else {
            *(_DWORD *)v31 -= 2;
          }
        }
        uint64_t v79 = v94;
        CFTypeRef v94 = 0;
        if (v79)
        {
          if (*(_DWORD *)v79 == 2) {
            WTF::StringImpl::destroy(v79, v29);
          }
          else {
            *(_DWORD *)v79 -= 2;
          }
        }
        uint64_t v80 = v93;
        uint64_t v93 = 0;
        if (v80)
        {
          if (*(_DWORD *)v80 == 2) {
            WTF::StringImpl::destroy(v80, v29);
          }
          else {
            *(_DWORD *)v80 -= 2;
          }
        }
      }
      goto LABEL_99;
    }
    uint64_t v19 = *(void *)(v18 + 32);
    if (v19)
    {
      uint64_t v20 = *(void *)(v19 + 160);
      if (v20)
      {
        if (!*(unsigned char *)(v20 + 144))
        {
          uint64_t v43 = *(WebCore::Document **)(v20 + 296);
          if (v43)
          {
            long long v44 = a5
                ? (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v83)
                : (WebCore::Document *)((char *)v43 + 1040);
            WebCore::ResourceRequestBase::setFirstPartyForCookies((WebCore::ResourceRequestBase *)v83, v44);
            if (WebCore::Document::loader(v43)) {
              WebCore::ResourceRequestBase::setIsAppInitiated((WebCore::ResourceRequestBase *)v83);
            }
          }
        }
      }
    }
  }
  WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)&v93);
  WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)v98, (uint64_t)v83);
  uint64_t v22 = v84;
  uint64_t v84 = 0;
  uint64_t v23 = v99;
  long long v99 = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v21);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  char v32 = v85;
  uint64_t v85 = 0;
  long long v33 = v100;
  long long v100 = v32;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2) {
      WTF::StringImpl::destroy(v33, v21);
    }
    else {
      *(_DWORD *)v33 -= 2;
    }
  }
  long long v34 = v86;
  uint64_t v86 = 0;
  uint64_t v35 = v101;
  char v101 = v34;
  if (v35) {
    WTF::RefCounted<WebCore::FormData>::deref(v35);
  }
  uint64_t v102 = v87;
  char v103 = v88;
  CFTypeRef v36 = cf;
  CFTypeRef cf = 0;
  CFTypeRef v37 = v104;
  CFTypeRef v104 = v36;
  if (v37) {
    CFRelease(v37);
  }
  WebCore::ResourceRequestBase::httpUserAgent((uint64_t *)&v90, (WebCore::ResourceRequestBase *)v98);
  long long v39 = v90;
  if (v90)
  {
    int v40 = *((_DWORD *)v90 + 1);
    uint64_t v90 = 0;
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::destroy(v39, v38);
      if (v40) {
        goto LABEL_64;
      }
    }
    else
    {
      *(_DWORD *)v39 -= 2;
      if (v40) {
        goto LABEL_64;
      }
    }
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v98);
  uint64_t v42 = *(WTF::StringImpl **)(v18 + 88);
  if (v42)
  {
    *(_DWORD *)v42 += 2;
    uint64_t v90 = v42;
    if (*((_DWORD *)v42 + 1))
    {
      WebCore::ResourceRequestBase::setHTTPUserAgent((WebCore::ResourceRequestBase *)v98, (const WTF::String *)&v90);
      uint64_t v42 = v90;
      uint64_t v90 = 0;
      if (!v42) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v90 = 0;
    }
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, v41);
    }
    else {
      *(_DWORD *)v42 -= 2;
    }
  }
LABEL_64:
  BOOL v109 = (WebCore *)WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v45 = *(WTF::StringImpl **)(v18 + 24);
  uint64_t v93 = *(WTF::StringImpl **)(v18 + 2104);
  CFTypeRef v94 = v45;
  long long v95 = *(_OWORD *)(v12 + 80);
  *(_DWORD *)CFTypeRef v96 = WebCore::presentingApplicationPID(v109);
  {
    uint64_t v81 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v81);
  }
  uint64_t v46 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  char v47 = *(unsigned char *)(v46 + 64);
  long long v48 = *(_OWORD *)(v46 + 48);
  *(_OWORD *)&v96[4] = *(_OWORD *)(v46 + 32);
  *(_OWORD *)&v96[20] = v48;
  char v97 = v47;
  char v105 = a4;
  char v106 = 1;
  char v111 = *(unsigned char *)(WebCore::DeprecatedGlobalSettings::shared((WebCore::DeprecatedGlobalSettings *)v46) + 22);
  char v110 = 0;
  __int16 isTopFrameNavigatingToAppBoundDomain = WebKit::WebFrame::isTopFrameNavigatingToAppBoundDomain((WebKit::WebFrame *)v12);
  if (*(unsigned char *)(*(void *)(*(void *)(v12 + 24) + 8) + 144)) {
    uint64_t v49 = 0;
  }
  else {
    uint64_t v49 = *(const WebCore::LocalFrame **)(*(void *)(v12 + 24) + 8);
  }
  WebKit::policySourceDocumentLoaderForFrame((unsigned int *)&v90, v49);
  unint64_t v50 = v90;
  if (v90)
  {
    __int16 v108 = *((_WORD *)v90 + 1757);
    uint64_t v90 = 0;
    if (*((_DWORD *)v50 + 6) == 1) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v50 + 24))(v50);
    }
    else {
      --*((_DWORD *)v50 + 6);
    }
  }
  LOBYTE(v90) = 0;
  char v91 = 0;
  if (!*a6) {
    goto LABEL_95;
  }
  unint64_t v51 = v109;
  char v91 = 1;
  uint64_t v90 = v109;
  uint64_t v54 = *(void *)(a1 + 72);
  unsigned int v53 = (uint64_t *)(a1 + 72);
  uint64_t v52 = v54;
  if (v54
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(WebCore::ResourceError const&)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v53),
        (uint64_t v52 = *v53) != 0))
  {
    int v55 = *(_DWORD *)(v52 - 8);
  }
  else
  {
    int v55 = 0;
  }
  unint64_t v56 = ((unint64_t)v51 + ~((void)v51 << 32)) ^ (((unint64_t)v51 + ~((void)v51 << 32)) >> 22);
  unint64_t v57 = 9 * ((v56 + ~(v56 << 13)) ^ ((v56 + ~(v56 << 13)) >> 8));
  unint64_t v58 = (v57 ^ (v57 >> 15)) + ~((v57 ^ (v57 >> 15)) << 27);
  unsigned int v59 = v55 & ((v58 >> 31) ^ v58);
  uint64_t v60 = (WTF::StringImpl **)(v52 + 16 * v59);
  int v61 = *v60;
  if (*v60)
  {
    uint64_t v62 = 0;
    int v63 = 1;
    while (v61 != v51)
    {
      if (v61 == (WTF::StringImpl *)-1) {
        uint64_t v62 = v60;
      }
      unsigned int v59 = (v59 + v63) & v55;
      uint64_t v60 = (WTF::StringImpl **)(v52 + 16 * v59);
      int v61 = *v60;
      ++v63;
      if (!*v60)
      {
        if (v62)
        {
          *uint64_t v62 = 0;
          v62[1] = 0;
          --*(_DWORD *)(*v53 - 16);
          unint64_t v51 = v90;
          uint64_t v60 = v62;
        }
        goto LABEL_84;
      }
    }
    goto LABEL_95;
  }
LABEL_84:
  *uint64_t v60 = v51;
  long long v64 = *a6;
  *a6 = 0;
  CFTypeRef v65 = v60[1];
  v60[1] = v64;
  if (v65) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v65 + 8))(v65);
  }
  uint64_t v66 = *v53;
  if (*v53) {
    int v67 = *(_DWORD *)(v66 - 12) + 1;
  }
  else {
    int v67 = 1;
  }
  *(_DWORD *)(v66 - 12) = v67;
  uint64_t v68 = *v53;
  if (*v53) {
    int v69 = *(_DWORD *)(v68 - 12);
  }
  else {
    int v69 = 0;
  }
  uint64_t v70 = (*(_DWORD *)(v68 - 16) + v69);
  unint64_t v71 = *(unsigned int *)(v68 - 4);
  if (v71 > 0x400)
  {
    if (v71 > 2 * v70) {
      goto LABEL_95;
    }
    goto LABEL_94;
  }
  if (3 * v71 <= 4 * v70) {
LABEL_94:
  }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(WebCore::ResourceError const&)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v53);
LABEL_95:
  {
    int v82 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v82);
  }
  uint64_t v72 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                  + 24);
  uint64_t v73 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v73 = 259;
  *((void *)v73 + 1) = 0;
  *((void *)v73 + 66) = (char *)v73 + 16;
  *((void *)v73 + 67) = 512;
  *((void *)v73 + 68) = 0;
  *((void *)v73 + 70) = 0;
  *((void *)v73 + 69) = 0;
  IPC::Encoder::encodeHeader(v73);
  CFTypeRef v92 = v73;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(v73, (uint64_t)&v90);
  IPC::ArgumentCoder<WebKit::NetworkResourceLoadParameters,void>::encode(v73, (uint64_t)&v93);
  IPC::Connection::sendMessageImpl(v72, (uint64_t *)&v92, 0, 0);
  int v75 = v92;
  CFTypeRef v92 = 0;
  if (v75)
  {
    IPC::Encoder::~Encoder(v75, v74);
    WTF::fastFree(v77, v78);
  }
  WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)&v93, (WTF::StringImpl *)v74);
LABEL_99:
  CFTypeRef v76 = cf;
  CFTypeRef cf = 0;
  if (v76) {
    CFRelease(v76);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v83);
}

unsigned int *WebKit::policySourceDocumentLoaderForFrame(unsigned int *this, const WebCore::LocalFrame *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = *(void *)(*((void *)a2 + 16) + 8);
  if (v3) {
    BOOL v4 = *(unsigned char *)(v3 + 144) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    uint64_t v6 = (unsigned int *)(v3 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
    WebCore::FrameLoader::loaderForWebsitePolicies();
    if (v8)
    {
      ++v8[6];
      *(void *)uint64_t v2 = v8;
      uint64_t v7 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v8 + 218));
      if ((WTF::URL::hasSpecialScheme(v7) & 1) == 0 && (*(unsigned char *)(*((void *)a2 + 37) + 776) & 2) != 0) {
        WTF::RefPtr<WebCore::DocumentLoader,WTF::RawPtrTraits<WebCore::DocumentLoader>,WTF::DefaultRefDerefTraits<WebCore::DocumentLoader>>::operator=((_DWORD **)v2, *(_DWORD **)(*((void *)a2 + 35) + 88));
      }
      if (v8[6] == 1) {
        (*(void (**)())(*(void *)v8 + 24))();
      }
      else {
        --v8[6];
      }
    }
    else
    {
      *(void *)uint64_t v2 = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  }
  else
  {
    *(void *)this = 0;
  }
  return this;
}

uint64_t WebKit::WebLoaderStrategy::isOnLine(WebKit::WebLoaderStrategy *this)
{
  return *((unsigned __int8 *)this + 112);
}

IPC::Encoder *WebKit::WebLoaderStrategy::isResourceLoadFinished(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!*(void *)(a2 + 384)) {
    goto LABEL_9;
  }
  {
    uint64_t v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v17);
  }
  if (*(void *)(WebKit::WebProcess::singleton(void)::process + 296))
  {
    uint64_t v5 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                              + 24);
    uint64_t v18 = *(void *)(*(void *)(a2 + 384) + 744);
    uint64_t v6 = *a3;
    *a3 = 0;
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v7 = &unk_1EE9F1D20;
    v7[1] = v6;
    uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 246;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 68) = 0;
    *((void *)v9 + 70) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    uint64_t v20 = v9;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v9, &v18);
    v19[0] = (uint64_t)v7;
    v19[1] = v8;
    IPC::Connection::sendMessageWithAsyncReply(v5, &v20, v19, 0, 0);
    uint64_t v11 = v19[0];
    v19[0] = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    uint64_t result = v20;
    uint64_t v20 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v10);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  else
  {
LABEL_9:
    uint64_t v13 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 1);
    uint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)v13 + 8);
    return (IPC::Encoder *)v14(v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebLoaderStrategy::setCaptureExtraNetworkLoadMetricsEnabled(WebKit::WebLoaderStrategy *this, char a2)
{
  {
    uint64_t v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v9);
  }
  uint64_t v3 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  char v10 = a2;
  BOOL v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v4 = 280;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v11 = v4;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v4, &v10);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void WebKit::WebLoaderStrategy::responseFromResourceLoadIdentifier(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v27 = a1;
  {
LABEL_31:
    uint64_t v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v23);
  }
  uint64_t v3 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  uint64_t v36 = 0;
  IPC::Connection::createSyncMessageEncoder(3612, 0, &v36, &v35);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v35, &v27);
  IPC::Connection::sendSyncMessage(v3, v36, (uint64_t *)&v35, 0, (uint64_t)&v33, INFINITY);
  if (!v34)
  {
    v28[0] = 0;
    char v32 = 0;
    IPC::Decoder::decode<std::tuple<WebCore::ResourceResponse>>(v33, &v24);
    if (v25[248])
    {
      std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v28, (uint64_t)&v24);
      char v32 = 1;
    }
    std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)&v24, v5);
    if (v32)
    {
      if (v34) {
        goto LABEL_30;
      }
      uint64_t v7 = v33;
      long long v33 = 0;
      CFTypeRef v37 = v7;
      std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v38, (uint64_t)v28);
      uint64_t v8 = v37;
      CFTypeRef v37 = 0;
      CFTypeRef v24 = v8;
      std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v25, (uint64_t)v38);
      int v26 = 0;
      CFTypeRef v10 = v40;
      CFTypeRef v40 = 0;
      if (v10) {
        CFRelease(v10);
      }
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v38, v9);
      uint64_t v11 = v37;
      CFTypeRef v37 = 0;
      if (v11)
      {
        IPC::Decoder::~Decoder(v11);
        WTF::fastFree(v12, v13);
      }
    }
    else
    {
      LOBYTE(v24) = 13;
      int v26 = 1;
    }
    std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v28, v6);
    int v4 = v34;
    if (v34 == -1) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (v34 != 1)
  {
LABEL_30:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_31;
  }
  LOBYTE(v24) = (_BYTE)v33;
  int v4 = 1;
  int v26 = 1;
LABEL_15:
  ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9F1D00[v4])(&v37, &v33);
LABEL_16:
  uint64_t v15 = v35;
  uint64_t v35 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v14);
    WTF::fastFree(v21, v22);
  }
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v28);
  CFTypeRef v30 = 0;
  char v31 = 0;
  char v29 = v29 & 0xF1 | 4;
  if (v26) {
    std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v37, (uint64_t)v28);
  }
  else {
    std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v37, (uint64_t)v25);
  }
  CFTypeRef v17 = v30;
  CFTypeRef v30 = 0;
  if (v17) {
    CFRelease(v17);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v28, v16);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)a2, (const WebCore::ResourceResponseBase *)&v37);
  CFTypeRef v19 = cf;
  *(void *)(a2 + 240) = cf;
  if (v19)
  {
    CFRetain(v19);
    CFTypeRef v20 = cf;
    *(unsigned char *)(a2 + 248) = (_BYTE)v40;
    CFTypeRef cf = 0;
    if (v20) {
      CFRelease(v20);
    }
  }
  else
  {
    *(unsigned char *)(a2 + 248) = (_BYTE)v40;
    CFTypeRef cf = 0;
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v37, v18);
  if (v26 != -1) {
    ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9F1BB8[v26])(&v37, &v24);
  }
}

uint64_t WebKit::WebLoaderStrategy::intermediateLoadInformationFromResourceLoadIdentifier@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v59 = a1;
  {
LABEL_74:
    unint64_t v58 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v58);
  }
  uint64_t v5 = *(WTF **)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
               + 24);
  uint64_t v66 = 0;
  IPC::Connection::createSyncMessageEncoder(3613, 0, &v66, &v65);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v65, &v59);
  IPC::Connection::sendSyncMessage((uint64_t)v5, v66, (uint64_t *)&v65, 0, (uint64_t)&v63, INFINITY);
  if (v64)
  {
    if (v64 == 1)
    {
      LOBYTE(v70) = (_BYTE)v63;
      int v7 = 1;
      int v73 = 1;
      int v8 = 1;
      goto LABEL_49;
    }
    goto LABEL_73;
  }
  uint64_t v5 = v63;
  unint64_t v9 = *((void *)v63 + 1);
  uint64_t v10 = *(void *)v63;
  unint64_t v11 = ((*((void *)v63 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v63;
  if (v9 < v11 || v9 - v11 <= 7)
  {
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    *(void *)int v63 = 0;
    *((void *)v5 + 1) = 0;
    uint64_t v28 = *((void *)v5 + 3);
    if (v28)
    {
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v28 + 16))(v28, v10, v9);
        uint64_t v27 = *(void **)v5;
        unint64_t v26 = *((void *)v5 + 1);
      }
      else
      {
        unint64_t v26 = 0;
        uint64_t v27 = 0;
      }
    }
    goto LABEL_27;
  }
  uint64_t v13 = (unint64_t *)(v10 + v11);
  *((void *)v63 + 2) = v13 + 1;
  if (!v10)
  {
    unint64_t v26 = v9;
    uint64_t v27 = 0;
LABEL_27:
    *(void *)uint64_t v5 = 0;
    *((void *)v5 + 1) = 0;
    uint64_t v29 = *((void *)v5 + 3);
    if (v29 && v26) {
      (*(void (**)(uint64_t, void *))(*(void *)v29 + 16))(v29, v27);
    }
    goto LABEL_45;
  }
  unint64_t v3 = *v13;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  if (v3 < 0x6EB)
  {
    if (v3)
    {
      unsigned int v2 = 592 * v3;
      uint64_t v14 = (WTF *)WTF::fastMalloc((WTF *)(592 * v3));
      LODWORD(v61) = 592 * (int)v3 / 0x250u;
      uint64_t v60 = v14;
      do
      {
        IPC::Decoder::decode<WebCore::NetworkTransactionInformation>(&v70, v5);
        if (!v74) {
          goto LABEL_44;
        }
        if (HIDWORD(v61) == v61)
        {
          WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NetworkTransactionInformation>((uint64_t)&v60, (unint64_t)&v70);
        }
        else
        {
          WebCore::NetworkTransactionInformation::NetworkTransactionInformation((uint64_t)v60 + 592 * HIDWORD(v61), (uint64_t)&v70);
          ++HIDWORD(v61);
        }
        std::__optional_destruct_base<WebCore::NetworkTransactionInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v70, v16);
        --v3;
      }
      while (v3);
      uint64_t v5 = v60;
      LODWORD(v3) = v61;
      unsigned int v2 = HIDWORD(v61);
    }
    else
    {
      unsigned int v2 = 0;
      uint64_t v5 = 0;
    }
    uint64_t v60 = 0;
    goto LABEL_22;
  }
  unsigned int v2 = 592;
  do
  {
    IPC::Decoder::decode<WebCore::NetworkTransactionInformation>(&v70, v5);
    if (!v74)
    {
LABEL_44:
      std::__optional_destruct_base<WebCore::NetworkTransactionInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v70, v15);
      WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v34);
LABEL_45:
      uint64_t v23 = *(void **)v5;
      uint64_t v35 = *((void *)v5 + 1);
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      uint64_t v36 = *((void *)v5 + 3);
      if (v36 && v35)
      {
        (*(void (**)(uint64_t, void *))(*(void *)v36 + 16))(v36, v23);
        uint64_t v23 = *(void **)v5;
        uint64_t v56 = *((void *)v5 + 1);
        uint64_t v57 = *((void *)v5 + 3);
        *(void *)uint64_t v5 = 0;
        *((void *)v5 + 1) = 0;
        if (v57 && v56) {
          (*(void (**)(uint64_t, void *))(*(void *)v57 + 16))(v57, v23);
        }
      }
      else
      {
        *(void *)uint64_t v5 = 0;
        *((void *)v5 + 1) = 0;
      }
      LOBYTE(v70) = 13;
      int v7 = 1;
      int v73 = 1;
      goto LABEL_48;
    }
    if (HIDWORD(v61) == v61)
    {
      WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::NetworkTransactionInformation>((uint64_t)&v60, (unint64_t)&v70);
    }
    else
    {
      WebCore::NetworkTransactionInformation::NetworkTransactionInformation((uint64_t)v60 + 592 * HIDWORD(v61), (uint64_t)&v70);
      ++HIDWORD(v61);
    }
    std::__optional_destruct_base<WebCore::NetworkTransactionInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v70, v30);
    --v3;
  }
  while (v3);
  unsigned int v31 = HIDWORD(v61);
  uint64_t v5 = v60;
  if (v61 <= HIDWORD(v61)) {
    goto LABEL_43;
  }
  char v32 = v60;
  if (!HIDWORD(v61)) {
    goto LABEL_41;
  }
  if (HIDWORD(v61) >= 0x6EB3E5) {
    goto LABEL_83;
  }
  long long v33 = (WTF *)WTF::fastMalloc((WTF *)(592 * HIDWORD(v61)));
  LODWORD(v61) = 592 * v31 / 0x250;
  uint64_t v60 = v33;
  char v32 = v5;
  if (v33 != v5)
  {
    WTF::VectorMover<false,WebCore::NetworkTransactionInformation>::move(v5, (void *)v5 + 74 * v31, (uint64_t)v33);
    char v32 = v60;
  }
LABEL_41:
  if (v5)
  {
    if (v32 == v5)
    {
      uint64_t v60 = 0;
      LODWORD(v61) = 0;
    }
    WTF::fastFree(v5, v6);
    uint64_t v5 = v60;
  }
  else
  {
    uint64_t v5 = v32;
  }
LABEL_43:
  uint64_t v60 = 0;
  LODWORD(v3) = v61;
  unsigned int v2 = HIDWORD(v61);
LABEL_22:
  uint64_t v61 = 0;
  LOBYTE(v77) = 1;
  WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v6);
  int v75 = 0;
  unint64_t v76 = 0;
  WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, v17);
  char v69 = 1;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  char v62 = 1;
  WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v67, v18);
  if (v64)
  {
LABEL_73:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_74;
  }
  CFTypeRef v20 = v63;
  int v63 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  int v75 = 0;
  unint64_t v76 = 0;
  uint64_t v70 = v20;
  unint64_t v71 = v5;
  uint64_t v77 = 0;
  unint64_t v72 = __PAIR64__(v2, v3);
  int v73 = 0;
  WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v76, v19);
  uint64_t v22 = v75;
  int v75 = 0;
  if (v22)
  {
    IPC::Decoder::~Decoder(v22);
    WTF::fastFree(v24, v25);
  }
  WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v21);
  int v7 = 0;
LABEL_48:
  int v8 = v64;
  if (v64 != -1) {
LABEL_49:
  }
    ((void (*)(WTF **, WTF **))off_1EE9F1D00[v8])(&v75, &v63);
  CFTypeRef v37 = v65;
  CFTypeRef v65 = 0;
  if (v37)
  {
    IPC::Encoder::~Encoder(v37, v23);
    WTF::fastFree(v54, v55);
  }
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  if (v7)
  {
    uint64_t v5 = 0;
    LODWORD(v3) = 0;
    unsigned int v2 = 0;
  }
  else
  {
    unint64_t v71 = 0;
    unint64_t v72 = 0;
  }
  int v75 = v5;
  unint64_t v76 = __PAIR64__(v2, v3);
  WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v67, v23);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v2;
  if (!v2)
  {
    uint64_t result = WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, v38);
    return ((uint64_t (*)(uint64_t, WTF **))off_1EE9F1BC8[v7])(result, &v70);
  }
  if (v2 >= 0x6EB3E5)
  {
LABEL_83:
    __break(0xC471u);
    JUMPOUT(0x19916E2E8);
  }
  uint64_t v39 = WTF::fastMalloc((WTF *)(592 * v2));
  *(_DWORD *)(a2 + 8) = 592 * v2 / 0x250;
  *(void *)a2 = v39;
  CFTypeRef v40 = (char *)v5 + 592 * v2;
  uint64_t v41 = v39 + 208;
  uint64_t v42 = (const String *)((char *)v5 + 208);
  do
  {
    uint64_t v43 = (char *)&v42[-26];
    *(unsigned char *)(v41 - 208) = v42[-26].m_impl.m_ptr;
    WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v41 - 200), v42 - 25);
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v41, (const WebCore::ResourceResponseBase *)v42);
    uint64_t m_ptr = v42[30].m_impl.m_ptr;
    *(void *)(v41 + 240) = m_ptr;
    if (m_ptr) {
      CFRetain(m_ptr);
    }
    *(unsigned char *)(v41 + 248) = v42[31].m_impl.m_ptr;
    long long v46 = *(_OWORD *)&v42[34].m_impl.m_ptr;
    *(_OWORD *)(v41 + 256) = *(_OWORD *)&v42[32].m_impl.m_ptr;
    *(_OWORD *)(v41 + 272) = v46;
    long long v47 = *(_OWORD *)&v42[36].m_impl.m_ptr;
    long long v48 = *(_OWORD *)&v42[38].m_impl.m_ptr;
    long long v49 = *(_OWORD *)&v42[40].m_impl.m_ptr;
    *(String *)(v41 + 336) = v42[42];
    *(_OWORD *)(v41 + 304) = v48;
    *(_OWORD *)(v41 + 320) = v49;
    *(_OWORD *)(v41 + 288) = v47;
    unint64_t v50 = v42[43].m_impl.m_ptr;
    if (v50) {
      *(_DWORD *)v50 += 2;
    }
    *(void *)(v41 + 344) = v50;
    long long v51 = *(_OWORD *)&v42[44].m_impl.m_ptr;
    *(String *)(v41 + 368) = v42[46];
    *(_OWORD *)(v41 + 352) = v51;
    uint64_t v52 = v42[47].m_impl.m_ptr;
    if (v52) {
      ++*(_DWORD *)v52;
    }
    *(void *)(v41 + 376) = v52;
    v41 += 592;
    v42 += 74;
  }
  while (v43 + 592 != v40);
  int v7 = v73;
  uint64_t result = WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, v44);
  if (v7 != -1) {
    return ((uint64_t (*)(uint64_t, WTF **))off_1EE9F1BC8[v7])(result, &v70);
  }
  return result;
}

WTF::StringImpl *WebKit::WebLoaderStrategy::networkMetricsFromResourceLoadIdentifier@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v35 = a1;
  {
LABEL_34:
    CFTypeRef v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v20);
  }
  int v4 = *(WTF::StringImpl **)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                           + 24);
  *(void *)&long long v21 = 0;
  IPC::Connection::createSyncMessageEncoder(3616, 0, (uint64_t *)&v21, &v47);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v47, &v35);
  IPC::Connection::sendSyncMessage((uint64_t)v4, v21, (uint64_t *)&v47, 0, (uint64_t)&v23, INFINITY);
  if (!DWORD2(v23))
  {
    LOBYTE(v36) = 0;
    char v46 = 0;
    IPC::Decoder::decode<std::tuple<WebCore::NetworkLoadMetrics>>((uint64_t *)v23, (uint64_t)v29);
    if ((_BYTE)v33)
    {
      long long v38 = *(_OWORD *)&v29[32];
      long long v39 = *(_OWORD *)&v29[48];
      long long v40 = *(_OWORD *)&v29[64];
      int v4 = v30;
      uint64_t v41 = *(WTF::StringImpl **)&v29[80];
      long long v36 = *(_OWORD *)v29;
      long long v37 = *(_OWORD *)&v29[16];
      long long v43 = *(_OWORD *)v31;
      unsigned int v2 = v32;
      long long v44 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector **)&v31[16];
      CFTypeRef v30 = 0;
      char v32 = 0;
      char v46 = 1;
      std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29, v7);
      if (DWORD2(v23)) {
        goto LABEL_33;
      }
      int v5 = 0;
      *(_OWORD *)&v29[40] = v38;
      *(_OWORD *)&v29[56] = v39;
      *(_OWORD *)&v29[72] = v40;
      *(_OWORD *)&v29[8] = v36;
      uint64_t v9 = v23;
      *(void *)&long long v23 = 0;
      *(_OWORD *)&v29[24] = v37;
      *(_OWORD *)&char v31[8] = v43;
      uint64_t v42 = 0;
      uint64_t v45 = 0;
      CFTypeRef v30 = v41;
      *(void *)unsigned int v31 = v4;
      *(void *)uint64_t v29 = v9;
      char v32 = v44;
      long long v33 = v2;
    }
    else
    {
      std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v29, v7);
      v29[0] = 13;
      int v5 = 1;
    }
    int v34 = v5;
    std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v36, v8);
    int v6 = DWORD2(v23);
    if (DWORD2(v23) == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (DWORD2(v23) != 1)
  {
LABEL_33:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_34;
  }
  v29[0] = v23;
  int v5 = 1;
  int v34 = 1;
  int v6 = 1;
LABEL_10:
  ((void (*)(long long *, long long *))off_1EE9F1D00[v6])(&v36, &v23);
LABEL_11:
  unint64_t v11 = v47;
  long long v47 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v10);
    WTF::fastFree(v18, v19);
  }
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)&v36);
  if (v5)
  {
    int v4 = v42;
    uint64_t v28 = v41;
    unsigned int v2 = v45;
    uint64_t v22 = v44;
    long long v25 = v38;
    long long v26 = v39;
    long long v27 = v40;
    long long v23 = v36;
    long long v24 = v37;
    uint64_t v42 = 0;
    uint64_t v13 = &v45;
    long long v21 = v43;
  }
  else
  {
    uint64_t v28 = v30;
    long long v25 = *(_OWORD *)&v29[40];
    long long v26 = *(_OWORD *)&v29[56];
    long long v27 = *(_OWORD *)&v29[72];
    long long v23 = *(_OWORD *)&v29[8];
    long long v24 = *(_OWORD *)&v29[24];
    *(void *)unsigned int v31 = 0;
    long long v21 = *(_OWORD *)&v31[8];
    uint64_t v13 = &v33;
    uint64_t v22 = v32;
  }
  *uint64_t v13 = 0;
  uint64_t v14 = v45;
  uint64_t v45 = 0;
  if (v14) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v14);
  }
  uint64_t result = v42;
  uint64_t v42 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  long long v16 = v26;
  *(_OWORD *)(a2 + 32) = v25;
  *(_OWORD *)(a2 + 48) = v16;
  *(_OWORD *)(a2 + 64) = v27;
  *(void *)(a2 + 80) = v28;
  long long v17 = v24;
  *(_OWORD *)a2 = v23;
  *(_OWORD *)(a2 + ++*(_DWORD *)(this + 16) = v17;
  if (v4) {
    *(_DWORD *)v4 += 2;
  }
  *(void *)(a2 + 88) = v4;
  *(_OWORD *)(a2 + 96) = v21;
  *(void *)(a2 + 112) = v22;
  if (v2)
  {
    ++*(_DWORD *)v2;
    uint64_t result = WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v2);
  }
  *(void *)(a2 + 120) = v2;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v12);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  if (v34 != -1) {
    return (WTF::StringImpl *)((uint64_t (*)(long long *, unsigned char *))off_1EE9F1BD8[v34])(&v36, v29);
  }
  return result;
}

BOOL WebKit::WebLoaderStrategy::havePerformedSecurityChecks(WebKit::WebLoaderStrategy *this, const WebCore::ResourceResponse *a2)
{
  return *(unsigned char *)(WebCore::DeprecatedGlobalSettings::shared(this) + 22)
      && WebCore::ResourceResponseBase::source(a2) < 4;
}

IPC::Encoder **WebKit::WebLoaderStrategy::setResourceLoadSchedulingMode(WebKit::WebProcess *a1, uint64_t a2, char a3)
{
  int v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(a1);
  uint64_t v6 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection(v5) + 24);
  int v7 = *(void **)(*(void *)(a2 + 48) + 16);
  (*(void (**)(void *))(*v7 + 1368))(v7);
  uint64_t v8 = *(void *)(v7[2] + 8);
  if (v8) {
    uint64_t v9 = v8 - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v11 = *(void *)(v9 + 40);
  uint64_t v12 = &v11;
  char v13 = a3;
  return IPC::Connection::send<Messages::NetworkConnectionToWebProcess::SetResourceLoadSchedulingMode>(v6, (uint64_t)&v12);
}

IPC::Encoder **IPC::Connection::send<Messages::NetworkConnectionToWebProcess::SetResourceLoadSchedulingMode>(uint64_t a1, uint64_t a2)
{
  int v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v4 = 285;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  int v7 = v4;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::LoadSchedulingMode>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::LoadSchedulingMode>,0ul,1ul>(v4, a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v7, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v7, v5);
}

WTF *WebKit::WebLoaderStrategy::prioritizeResourceLoads(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = (WebKit::WebProcess *)WTF::Vector<WebCore::SubresourceLoader *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebLoaderStrategy::prioritizeResourceLoads(WTF::Vector<WebCore::SubresourceLoader *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0>(&v8, a2);
  unint64_t v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(v2);
  uint64_t v4 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection(v3) + 24);
  int v7 = &v8;
  IPC::Connection::send<Messages::NetworkConnectionToWebProcess::PrioritizeResourceLoads>(v4, (uint64_t *)&v7);
  uint64_t result = v8;
  if (v8)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

IPC::Encoder **IPC::Connection::send<Messages::NetworkConnectionToWebProcess::PrioritizeResourceLoads>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 261;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  int v7 = v4;
  IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v4, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v7, 0, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v7, v5);
}

void WebKit::WebResourceInterceptController::beginInterceptingResponse(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, 0), (uint64_t v4 = *a1) != 0))
  {
    int v5 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    int v5 = 0;
  }
  unint64_t v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  unsigned int v9 = v5 & ((v8 >> 31) ^ v8);
  uint64_t v10 = v4 + 40 * v9;
  uint64_t v11 = *(void *)v10;
  if (*(void *)v10)
  {
    uint64_t v12 = 0;
    int v13 = 1;
    while (v11 != a2)
    {
      if (v11 == -1) {
        uint64_t v12 = v10;
      }
      unsigned int v9 = (v9 + v13) & v5;
      uint64_t v10 = v4 + 40 * v9;
      uint64_t v11 = *(void *)v10;
      ++v13;
      if (!*(void *)v10)
      {
        if (v12)
        {
          *(void *)(v12 + 32) = 0;
          *(_OWORD *)uint64_t v12 = 0u;
          *(_OWORD *)(v12 + ++*(_DWORD *)(this + 16) = 0u;
          --*(_DWORD *)(*a1 - 16);
          uint64_t v10 = v12;
        }
        goto LABEL_12;
      }
    }
    unint64_t v21 = *(void *)(v10 + 8);
    unint64_t v20 = *(void *)(v10 + 16);
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + ++*(_DWORD *)(this + 16) = 0;
    uint64_t v22 = *(WTF **)(v10 + 24);
    *(void *)(v10 + 24) = 0;
    uint64_t v23 = *(unsigned int *)(v10 + 32);
    *(_DWORD *)(v10 + 32) = 0;
    if (v21 > v20)
    {
      uint64_t v53 = v23;
      if (v20)
      {
        uint64_t v44 = 8 * v20;
        uint64_t v45 = v22;
        do
        {
          uint64_t v46 = *(void *)v45;
          *(void *)uint64_t v45 = 0;
          if (v46) {
            (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
          }
          uint64_t v45 = (WTF *)((char *)v45 + 8);
          v44 -= 8;
        }
        while (v44);
      }
      if (v21 != v53)
      {
        long long v36 = (uint64_t *)((char *)v22 + 8 * v21);
        uint64_t v37 = 8 * v53 - 8 * v21;
        do
        {
          uint64_t v38 = *v36;
          uint64_t *v36 = 0;
          if (v38) {
            (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
          }
          ++v36;
          v37 -= 8;
        }
        while (v37);
      }
    }
    else if (v21 != v20)
    {
      uint64_t v28 = (uint64_t *)((char *)v22 + 8 * v21);
      uint64_t v29 = 8 * v20 - 8 * v21;
      do
      {
        uint64_t v30 = *v28;
        *uint64_t v28 = 0;
        if (v30) {
          (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
        }
        ++v28;
        v29 -= 8;
      }
      while (v29);
    }
    if (v22)
    {
      WTF::fastFree(v22, (void *)v10);
    }
  }
  else
  {
LABEL_12:
    unint64_t v15 = *(void *)(v10 + 8);
    unint64_t v14 = *(void *)(v10 + 16);
    *(void *)uint64_t v10 = a2;
    *(void *)(v10 + 8) = 0;
    long long v16 = *(WTF **)(v10 + 24);
    *(void *)(v10 + ++*(_DWORD *)(this + 16) = 0;
    *(void *)(v10 + 24) = 0;
    uint64_t v17 = *(unsigned int *)(v10 + 32);
    *(_DWORD *)(v10 + 32) = 0;
    if (v15 > v14)
    {
      uint64_t v50 = v17;
      uint64_t v51 = v10;
      unint64_t v39 = v15;
      uint64_t v54 = v16;
      if (v14)
      {
        uint64_t v47 = 8 * v14;
        long long v48 = v16;
        do
        {
          uint64_t v49 = *(void *)v48;
          *(void *)long long v48 = 0;
          if (v49) {
            (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
          }
          long long v48 = (WTF *)((char *)v48 + 8);
          v47 -= 8;
        }
        while (v47);
      }
      uint64_t v10 = v51;
      long long v16 = v54;
      if (v39 != v50)
      {
        unint64_t v40 = v39;
        uint64_t v41 = (uint64_t *)((char *)v54 + 8 * v39);
        uint64_t v42 = 8 * v50 - 8 * v40;
        do
        {
          uint64_t v43 = *v41;
          uint64_t *v41 = 0;
          if (v43) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 8))(v43, v10);
          }
          ++v41;
          v42 -= 8;
          uint64_t v10 = v51;
          long long v16 = v54;
        }
        while (v42);
      }
    }
    else if (v15 != v14)
    {
      unsigned int v31 = (uint64_t *)((char *)v16 + 8 * v15);
      uint64_t v32 = 8 * v14 - 8 * v15;
      uint64_t v52 = v16;
      do
      {
        uint64_t v33 = v10;
        uint64_t v34 = *v31;
        *unsigned int v31 = 0;
        if (v34) {
          (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
        }
        ++v31;
        v32 -= 8;
        uint64_t v10 = v33;
        long long v16 = v52;
      }
      while (v32);
    }
    if (v16)
    {
      uint64_t v35 = v10;
      WTF::fastFree(v16, (void *)v10);
      uint64_t v10 = v35;
    }
    uint64_t v18 = *a1;
    if (*a1) {
      int v19 = *(_DWORD *)(v18 - 12) + 1;
    }
    else {
      int v19 = 1;
    }
    *(_DWORD *)(v18 - 12) = v19;
    uint64_t v24 = *a1;
    if (*a1) {
      int v25 = *(_DWORD *)(v24 - 12);
    }
    else {
      int v25 = 0;
    }
    uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
    unint64_t v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 > 2 * v26) {
        return;
      }
    }
    else if (3 * v27 > 4 * v26)
    {
      return;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1, (uint64_t *)v10);
  }
}

void WebKit::WebResourceInterceptController::continueResponse(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*a1, a2);
  int v5 = v4;
  if (v3) {
    unint64_t v6 = (uint64_t *)(v3 + 40 * *(unsigned int *)(v3 - 4));
  }
  else {
    unint64_t v6 = 0;
  }
  if (v6 == v4) {
    return;
  }
  unint64_t v7 = v4[1];
  unint64_t v8 = v4[2];
  v4[1] = 0;
  _OWORD v4[2] = 0;
  unsigned int v9 = (WTF *)v4[3];
  v4[3] = 0;
  unint64_t v10 = *((unsigned int *)v4 + 8);
  *((_DWORD *)v4 + 8) = 0;
  if (*a1)
  {
    uint64_t v11 = *a1 + 40 * *(unsigned int *)(*a1 - 4);
    if ((uint64_t *)v11 == v4) {
      goto LABEL_12;
    }
LABEL_10:
    if ((uint64_t *)v11 != v4) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(a1, (unsigned int *)v4);
    }
    goto LABEL_12;
  }
  if (v4)
  {
    uint64_t v11 = 0;
    goto LABEL_10;
  }
LABEL_12:
  if (v7 != v8)
  {
    unint64_t v12 = v7;
    do
    {
      (*(void (**)(void, uint64_t *))(**((void **)v9 + v12) + 16))(*((void *)v9 + v12), v5);
      v12 += v10 + 1;
      do
        v12 -= v10;
      while (v12 >= v10);
    }
    while (v8 != v12);
    if (v7 > v8)
    {
      if (v8)
      {
        uint64_t v19 = 8 * v8;
        unint64_t v20 = v9;
        do
        {
          uint64_t v21 = *(void *)v20;
          *(void *)unint64_t v20 = 0;
          if (v21) {
            (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
          }
          unint64_t v20 = (WTF *)((char *)v20 + 8);
          v19 -= 8;
        }
        while (v19);
      }
      if (v7 != v10)
      {
        long long v16 = (uint64_t *)((char *)v9 + 8 * v7);
        uint64_t v17 = 8 * v10 - 8 * v7;
        do
        {
          uint64_t v18 = *v16;
          *long long v16 = 0;
          if (v18) {
            (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
          }
          ++v16;
          v17 -= 8;
        }
        while (v17);
      }
    }
    else
    {
      int v13 = (uint64_t *)((char *)v9 + 8 * v7);
      uint64_t v14 = 8 * v8 - 8 * v7;
      do
      {
        uint64_t v15 = *v13;
        *int v13 = 0;
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
  }
  if (v9)
  {
    WTF::fastFree(v9, v5);
  }
}

uint64_t *WebKit::WebResourceInterceptController::defer(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, a2);
  if (a1) {
    unint64_t v6 = (uint64_t *)(a1 + 40 * *(unsigned int *)(a1 - 4));
  }
  else {
    unint64_t v6 = 0;
  }
  if (v6 != result)
  {
    uint64_t v7 = (uint64_t)(result + 1);
    return (uint64_t *)WTF::Deque<WTF::Function<void ()(void)>,0ul>::append<WTF::Function<void ()(void)>>(v7, a3);
  }
  return result;
}

uint64_t WebKit::WebResourceLoader::WebResourceLoader(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9F1B68;
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + ++*(_DWORD *)(this + 16) = v4;
  long long v5 = *a3;
  uint64_t v6 = *((void *)a3 + 4);
  *(_OWORD *)(a1 + 40) = a3[1];
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = v6;
  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  *(void *)(a1 + 80) = v7;
  *(void *)(a1 + 88) = 0;
  unint64_t v8 = off_1EB358988;
  BOOL v9 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 56);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
    double v14 = v13 - *(double *)(a1 + 80);
    int v16 = 134219008;
    uint64_t v17 = a1;
    __int16 v18 = 2048;
    uint64_t v19 = v10;
    __int16 v20 = 2048;
    uint64_t v21 = v11;
    __int16 v22 = 2048;
    uint64_t v23 = v12;
    __int16 v24 = 2048;
    double v25 = v14;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::WebResourceLoader", (uint8_t *)&v16, 0x34u);
  }
  return a1;
}

void WebKit::WebResourceLoader::~WebResourceLoader(WebKit::WebResourceLoader *this, void *a2)
{
  *(void *)this = &unk_1EE9F1B68;
  uint64_t v3 = *((void *)this + 8);
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[4];
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebResourceLoader::~WebResourceLoader(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebResourceLoader::messageSenderConnection(WebKit::WebResourceLoader *this)
{
  {
    unsigned int v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                   + 24);
}

uint64_t WebKit::WebResourceLoader::messageSenderDestinationID(WebKit::WebResourceLoader *this)
{
  unsigned int v2 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  if ((WTF::RunLoop::isCurrent(v2) & 1) == 0 || (uint64_t result = *(void *)(*((void *)this + 2) + 744)) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19916F290);
  }
  return result;
}

uint64_t WebKit::WebResourceLoader::mainFrameMainResource(WebKit::WebResourceLoader *this)
{
  unsigned int v2 = (WebCore::ResourceLoader *)*((void *)this + 2);
  uint64_t v3 = *((void *)v2 + 4);
  if (!v3 || *(void *)(*(void *)(v3 + 128) + 8) != v3) {
    return 0;
  }
  uint64_t result = WebCore::ResourceLoader::frameLoader(v2);
  if (result) {
    return *(unsigned char *)(result + 48) && *(void *)(result + 40) == *(void *)(*((void *)this + 2) + 744);
  }
  return result;
}

uint64_t WebKit::WebResourceLoader::willSendRequest(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  ++*(_DWORD *)(a1 + 8);
  uint64_t v9 = *a3;
  *a3 = 0;
  *(void *)uint64_t v34 = v9;
  WebCore::ResourceRequestBase::setHTTPBody();
  uint64_t v10 = *(WTF::RefCountedBase **)v34;
  *(void *)uint64_t v34 = 0;
  if (v10) {
    WTF::RefCounted<WebCore::FormData>::deref(v10);
  }
  uint64_t v11 = off_1EB358988;
  BOOL v12 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v15 = *(void *)(a1 + 56);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v12);
    double v17 = v16 - *(double *)(a1 + 80);
    *(_DWORD *)uint64_t v34 = 134219008;
    *(void *)&v34[4] = a1;
    __int16 v35 = 2048;
    uint64_t v36 = v13;
    __int16 v37 = 2048;
    uint64_t v38 = v14;
    __int16 v39 = 2048;
    uint64_t v40 = v15;
    __int16 v41 = 2048;
    double v42 = v17;
    _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::willSendRequest:", v34, 0x34u);
  }
  uint64_t v18 = *(void *)(*(void *)(a1 + 16) + 32);
  if (v18)
  {
    uint64_t v19 = *(void *)(v18 + 24);
    if (v19)
    {
      if (*(void *)(v19 + 8))
      {
        WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)a2);
        WebKit::WebResourceLoader::mainFrameMainResource((WebKit::WebResourceLoader *)a1);
        if ((WebCore::Page::allowsLoadFromURL() & 1) == 0)
        {
          WebCore::ResourceRequest::ResourceRequest((StringImpl *)v34);
          WebCore::ResourceRequestBase::RequestData::operator=(a2, (uint64_t)v34);
          uint64_t v21 = v43;
          uint64_t v43 = 0;
          __int16 v22 = *(WTF::StringImpl **)(a2 + 152);
          *(void *)(a2 + 152) = v21;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v20);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          uint64_t v23 = v44;
          uint64_t v44 = 0;
          __int16 v24 = *(WTF::StringImpl **)(a2 + 160);
          *(void *)(a2 + 160) = v23;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, v20);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
          uint64_t v25 = v45;
          uint64_t v45 = 0;
          uint64_t v26 = *(WTF::RefCountedBase **)(a2 + 168);
          *(void *)(a2 + 168) = v25;
          if (v26) {
            WTF::RefCounted<WebCore::FormData>::deref(v26);
          }
          *(void *)(a2 + 176) = v46;
          *(unsigned char *)(a2 + 184) = v47;
          CFTypeRef v27 = cf;
          CFTypeRef cf = 0;
          uint64_t v28 = *(const void **)(a2 + 192);
          *(void *)(a2 + 192) = v27;
          if (v28)
          {
            CFRelease(v28);
            CFTypeRef v33 = cf;
            CFTypeRef cf = 0;
            if (v33) {
              CFRelease(v33);
            }
          }
          WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v34);
        }
      }
    }
  }
  uint64_t v29 = *(void *)(a1 + 16);
  uint64_t v30 = *a5;
  *a5 = 0;
  unsigned int v31 = (void *)WTF::fastMalloc((WTF *)0x20);
  *unsigned int v31 = &unk_1EE9F1D48;
  v31[1] = a1;
  uint64_t v31[2] = a1;
  void v31[3] = v30;
  *(void *)uint64_t v34 = v31;
  (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)v29 + 192))(v29, a2, a4, v34);
  uint64_t result = *(void *)v34;
  *(void *)uint64_t v34 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebResourceLoader::didReceiveResponse(uint64_t a1, WebCore::ResourceResponseBase *a2, int a3, int a4, uint64_t a5)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = off_1EB358988;
  BOOL v11 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v15 = *(void *)(a1 + 56);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
    double v17 = v16 - *(double *)(a1 + 80);
    *(_DWORD *)long long buf = 134219264;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v13;
    *(_WORD *)&unsigned char buf[22] = 2048;
    uint64_t v42 = v14;
    __int16 v43 = 2048;
    uint64_t v44 = v15;
    __int16 v45 = 2048;
    double v46 = v17;
    __int16 v47 = 1024;
    int v48 = WebCore::ResourceResponseBase::httpStatusCode(a2);
    _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::didReceiveResponse: (httpStatusCode=%d)", buf, 0x3Au);
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(unsigned char *)(a5 + 128))
  {
    *(void *)(a5 + 80) = *(void *)(a1 + 88);
    uint64_t v24 = WTF::fastMalloc((WTF *)0x88);
    *(_DWORD *)uint64_t v24 = 1;
    long long v25 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)(v24 + 8) = *(_OWORD *)a5;
    *(_OWORD *)(v24 + 24) = v25;
    long long v27 = *(_OWORD *)(a5 + 48);
    long long v26 = *(_OWORD *)(a5 + 64);
    uint64_t v28 = *(void *)(a5 + 80);
    *(_OWORD *)(v24 + 40) = *(_OWORD *)(a5 + 32);
    *(void *)(v24 + 88) = v28;
    *(_OWORD *)(v24 + 72) = v26;
    *(_OWORD *)(v24 + 56) = v27;
    uint64_t v29 = *(void *)(a5 + 88);
    *(void *)(a5 + 88) = 0;
    *(void *)(v24 + 96) = v29;
    long long v30 = *(_OWORD *)(a5 + 96);
    *(void *)(v24 + 120) = *(void *)(a5 + 112);
    *(_OWORD *)(v24 + 104) = v30;
    uint64_t v31 = *(void *)(a5 + 120);
    *(void *)(a5 + 120) = 0;
    *(void *)(v24 + 128) = v31;
    uint64_t v32 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector **)*((void *)a2 + 14);
    *((void *)a2 + 14) = v24;
    if (v32) {
      WTF::ThreadSafeRefCounted<WTF::Box<WebCore::NetworkLoadMetrics>::Data,(WTF::DestructionThread)0>::deref(v32, v23);
    }
  }
  if (a3)
  {
    uint64_t v38 = (WebKit::WebProcess *)WebKit::WebResourceLoader::mainFrameMainResource((WebKit::WebResourceLoader *)a1);
    if (v38) {
      *(unsigned char *)(WebKit::WebProcess::singleton(v38) + 776) = 1;
    }
  }
  uint64_t v40 = 0;
  uint64_t v18 = (_DWORD *)a1;
  if (a4)
  {
    CFTypeRef v33 = (void *)WTF::fastMalloc((WTF *)0x18);
    uint64_t v18 = 0;
    void *v33 = &unk_1EE9F1D70;
    v33[1] = a1;
    void v33[2] = a1;
    uint64_t v40 = v33;
  }
  uint64_t v19 = *(WebCore::InspectorInstrumentationWebKit **)(*(void *)(a1 + 16) + 32);
  if (atomic_load(MEMORY[0x1E4FB6508])) {
    BOOL v21 = v19 == 0;
  }
  else {
    BOOL v21 = 1;
  }
  if (v21
    || (int shouldInterceptResponseInternal = WebCore::InspectorInstrumentationWebKit::shouldInterceptResponseInternal(v19, a2, v12)) == 0)
  {
    (*(void (**)(void, WebCore::ResourceResponseBase *, void **))(**(void **)(a1 + 16) + 208))(*(void *)(a1 + 16), a2, &v40);
    uint64_t result = (uint64_t)v40;
    uint64_t v40 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    uint64_t v35 = *(void *)(*(void *)(a1 + 16) + 744);
    WebKit::WebResourceInterceptController::beginInterceptingResponse((uint64_t *)(a1 + 64), v35);
    ++*(_DWORD *)(a1 + 8);
    *(void *)&uint8_t buf[16] = v35;
    uint64_t v36 = v40;
    uint64_t v40 = 0;
    *(void *)long long buf = a1;
    __int16 v37 = (void *)WTF::fastMalloc((WTF *)0x28);
    *__int16 v37 = &unk_1EE9F1D98;
    v37[1] = a1;
    void v37[2] = a1;
    void v37[3] = v35;
    *(void *)&buf[8] = 0;
    uint64_t v42 = 0;
    v37[4] = v36;
    __int16 v39 = v37;
    WebCore::InspectorInstrumentationWebKit::interceptResponseInternal();
    if (v39) {
      (*(void (**)(void *))(*v39 + 8))(v39);
    }
    uint64_t result = WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_1::~$_1((uint64_t)buf);
  }
  if (v18)
  {
    if (v18[2] == 1) {
      return (*(uint64_t (**)(_DWORD *))(*(void *)v18 + 8))(v18);
    }
    else {
      --v18[2];
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_1::~$_1(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(_DWORD **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  return a1;
}

unsigned int *WebKit::WebResourceLoader::didReceiveData(uint64_t a1, IPC::SharedBufferReference *this, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void **)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 64);
  if (v7
    && (uint64_t v20 = v6[93],
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v7, v20)))
  {
    ++*(_DWORD *)(a1 + 8);
    uint64_t v21 = *(void *)this;
    *(void *)long long buf = a1;
    *(void *)&uint8_t buf[16] = v21;
    *(void *)&v28[16] = a3;
    long long v25 = *(_OWORD *)((char *)this + 8);
    *(_OWORD *)((char *)this + 8) = 0u;
    uint64_t v22 = WTF::fastMalloc((WTF *)0x38);
    *(void *)uint64_t v22 = &unk_1EE9F1DE8;
    *(void *)(v22 + 8) = a1;
    *(void *)&buf[8] = 0;
    *(void *)(v22 + ++*(_DWORD *)(this + 16) = a1;
    *(void *)(v22 + 24) = v21;
    *(_OWORD *)(v22 + 32) = v25;
    *(_OWORD *)uint64_t v28 = 0u;
    *(void *)(v22 + 48) = a3;
    uint64_t v26 = v22;
    WebKit::WebResourceInterceptController::defer(*(void *)(a1 + 64), v20, &v26);
    uint64_t v24 = v26;
    uint64_t v26 = 0;
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
    return (unsigned int *)WebKit::WebResourceLoader::didReceiveData(IPC::SharedBufferReference &&,unsigned long long)::$_0::~$_0(buf, v23);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 72);
    if (!v8)
    {
      uint64_t v9 = off_1EB358988;
      BOOL v10 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
      if (v10)
      {
        uint64_t v11 = *(void *)(a1 + 32);
        uint64_t v12 = *(void *)(a1 + 40);
        uint64_t v13 = *(void *)(a1 + 56);
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
        double v15 = v14 - *(double *)(a1 + 80);
        *(_DWORD *)long long buf = 134219008;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v11;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)uint64_t v28 = v12;
        *(_WORD *)&v28[8] = 2048;
        *(void *)&v28[10] = v13;
        *(_WORD *)&v28[18] = 2048;
        *(double *)&v28[20] = v15;
        _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::didReceiveData: Started receiving data", buf, 0x34u);
        uint64_t v8 = *(void *)(a1 + 72);
        uint64_t v6 = *(void **)(a1 + 16);
      }
      else
      {
        uint64_t v8 = 0;
      }
    }
    uint64_t v16 = *(void *)this;
    *(void *)(a1 + 72) = *(void *)this + v8;
    if (v16 || *((void *)this + 1))
    {
      IPC::SharedBufferReference::unsafeBuffer((unsigned int *)this, (uint64_t *)buf);
      double v17 = *(WebCore::SharedBuffer **)buf;
    }
    else
    {
      double v17 = (WebCore::SharedBuffer *)WTF::fastMalloc((WTF *)0x38);
      WebCore::SharedBuffer::SharedBuffer(v17);
    }
    uint64_t result = (unsigned int *)(*(uint64_t (**)(void *, WebCore::SharedBuffer *, uint64_t, uint64_t))(*v6 + 216))(v6, v17, a3, 1);
    if (v17) {
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v17, v19);
    }
  }
  return result;
}

void *WebKit::WebResourceLoader::didReceiveData(IPC::SharedBufferReference &&,unsigned long long)::$_0::~$_0(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  }
  uint64_t v4 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  long long v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  return a1;
}

void *WebKit::WebResourceLoader::didFinishResourceLoad(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = off_1EB358988;
  BOOL v5 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 56);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
    double v10 = v9 - *(double *)(a1 + 80);
    uint64_t v11 = *(void *)(a1 + 72);
    *(_DWORD *)long long buf = 134219264;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v6;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&unsigned char buf[24] = v7;
    *(_WORD *)uint64_t v29 = 2048;
    *(void *)&uint64_t v29[2] = v8;
    *(_WORD *)&v29[10] = 2048;
    *(double *)&v29[12] = v10;
    *(_WORD *)&v29[20] = 2048;
    *(void *)&v29[22] = v11;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::didFinishResourceLoad: (length=%zd)", buf, 0x3Eu);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (v12
    && (uint64_t v14 = *(void *)(*(void *)(a1 + 16) + 744),
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v12, v14)))
  {
    ++*(_DWORD *)(a1 + 8);
    uint64_t v15 = *(void *)(a2 + 88);
    uint64_t v32 = *(void *)(a2 + 80);
    uint64_t v16 = *(void *)(a2 + 120);
    uint64_t v35 = *(void *)(a2 + 112);
    *(void *)long long buf = a1;
    long long v17 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v29[16] = *(_OWORD *)(a2 + 32);
    long long v30 = v17;
    long long v31 = *(_OWORD *)(a2 + 64);
    long long v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v29 = v18;
    *(void *)(a2 + 88) = 0;
    long long v34 = *(_OWORD *)(a2 + 96);
    *(void *)(a2 + 120) = 0;
    uint64_t v19 = WTF::fastMalloc((WTF *)0x98);
    *(void *)uint64_t v19 = &unk_1EE9F1E10;
    *(void *)(v19 + 8) = a1;
    *(void *)(v19 + ++*(_DWORD *)(this + 16) = a1;
    uint64_t v20 = v32;
    long long v21 = v31;
    long long v22 = *(_OWORD *)&v29[16];
    *(_OWORD *)(v19 + 72) = v30;
    *(_OWORD *)(v19 + 88) = v21;
    *(_OWORD *)(v19 + 56) = v22;
    *(void *)(v19 + 104) = v20;
    *(void *)(v19 + 112) = v15;
    long long v23 = *(_OWORD *)&buf[16];
    *(_OWORD *)(v19 + 40) = *(_OWORD *)v29;
    *(_OWORD *)(v19 + 24) = v23;
    *(void *)&buf[8] = 0;
    uint64_t v33 = 0;
    uint64_t v24 = v35;
    *(_OWORD *)(v19 + 120) = v34;
    *(void *)(v19 + 136) = v24;
    *(void *)(v19 + 144) = v16;
    uint64_t v36 = 0;
    uint64_t v27 = v19;
    WebKit::WebResourceInterceptController::defer(*(void *)(a1 + 64), v14, &v27);
    uint64_t v26 = v27;
    uint64_t v27 = 0;
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    }
    return WebKit::WebResourceLoader::didFinishResourceLoad(WebCore::NetworkLoadMetrics &&)::$_0::~$_0(buf, v25);
  }
  else
  {
    *(void *)(a2 + 80) = *(void *)(a1 + 88);
    return (void *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 232))(*(void *)(a1 + 16), a2);
  }
}

void *WebKit::WebResourceLoader::didFinishResourceLoad(WebCore::NetworkLoadMetrics &&)::$_0::~$_0(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)a1[17];
  a1[17] = 0;
  if (v3) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[13];
  a1[13] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  BOOL v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  return a1;
}

void *WebKit::WebResourceLoader::didFailServiceWorkerLoad(WebKit::WebResourceLoader *this, WTF::StringImpl **a2)
{
  uint64_t v4 = *((void *)this + 2);
  uint64_t v5 = *(void *)(v4 + 32);
  if (v5 && *(void *)(v5 + 296) && (*(unsigned char *)(v4 + 976) || *((unsigned char *)a2 + 60) == 1))
  {
    MEMORY[0x19973EC60](a2);
    WebCore::Document::addConsoleMessage();
    if (*(unsigned char *)(*((void *)this + 2) + 976))
    {
      MEMORY[0x19973EC60](a2);
      uint64_t v7 = a2[1];
      if (v7) {
        *(_DWORD *)v7 += 2;
      }
      uint64_t v12 = v7;
      WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"Cannot load ", 13, (uint64_t *)&v12, 46, &v13);
      WebCore::Document::addConsoleMessage();
      double v9 = v13;
      uint64_t v13 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v8);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      double v10 = v12;
      uint64_t v12 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v8);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
  }
  return WebKit::WebResourceLoader::didFailResourceLoad(this, (const WebCore::ResourceError *)a2);
}

void *WebKit::WebResourceLoader::didFailResourceLoad(WebKit::WebResourceLoader *this, const WebCore::ResourceError *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = off_1EB358988;
  BOOL v5 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 4);
    uint64_t v7 = *((void *)this + 5);
    uint64_t v8 = *((void *)this + 7);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
    double v10 = v9 - *((double *)this + 10);
    *(_DWORD *)long long buf = 134219008;
    *(void *)&uint8_t buf[4] = this;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v6;
    __int16 v20 = 2048;
    uint64_t v21 = v7;
    __int16 v22 = 2048;
    uint64_t v23 = v8;
    __int16 v24 = 2048;
    double v25 = v10;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::didFailResourceLoad:", buf, 0x34u);
  }
  uint64_t v11 = (void *)*((void *)this + 2);
  if (!*((void *)this + 8)) {
    return (void *)(*(uint64_t (**)(void *, const WebCore::ResourceError *))(*v11 + 240))(v11, a2);
  }
  uint64_t v13 = v11[93];
  uint64_t v14 = (void *)*((void *)this + 2);
  uint64_t v15 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*((void *)this + 8), v13);
  uint64_t v11 = v14;
  if (!v15) {
    return (void *)(*(uint64_t (**)(void *, const WebCore::ResourceError *))(*v11 + 240))(v11, a2);
  }
  ++*((_DWORD *)this + 2);
  *(void *)long long buf = this;
  *(void *)&buf[8] = this;
  WebCore::ResourceError::ResourceError((uint64_t)&buf[16], (uint64_t)a2);
  WTF::Function<void ()(void)>::Function<WebKit::WebResourceLoader::didFailResourceLoad(WebCore::ResourceError const&)::$_0,void>(&v18, (uint64_t *)buf);
  WebKit::WebResourceInterceptController::defer(*((void *)this + 8), v13, &v18);
  uint64_t v17 = v18;
  uint64_t v18 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  return WebKit::WebResourceLoader::didFailResourceLoad(WebCore::ResourceError const&)::$_0::~$_0(buf, v16);
}

WTF::StringImpl *WebKit::WebResourceLoader::serviceWorkerDidNotHandle(WebKit::WebResourceLoader *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  BOOL v3 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 4);
    uint64_t v5 = *((void *)this + 5);
    uint64_t v6 = *((void *)this + 7);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v3);
    double v8 = v7 - *((double *)this + 10);
    *(_DWORD *)uint64_t v14 = 134219008;
    *(void *)&void v14[4] = this;
    *(_WORD *)&v14[12] = 2048;
    *(void *)&v14[14] = v4;
    __int16 v15 = 2048;
    uint64_t v16 = v5;
    __int16 v17 = 2048;
    uint64_t v18 = v6;
    __int16 v19 = 2048;
    v20[0] = v8;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::serviceWorkerDidNotHandle:", v14, 0x34u);
  }
  WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(*((void *)this + 2) + 336));
  WebCore::createInternalError();
  WebCore::ResourceErrorBase::setType();
  (*(void (**)(void, unsigned char *))(**((void **)this + 2) + 240))(*((void *)this + 2), v14);
  CFTypeRef v10 = cf;
  CFTypeRef cf = 0;
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = *(WTF::StringImpl **)((char *)v20 + 4);
  *(double *)((char *)v20 + 4) = 0.0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v9);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = *(WTF::StringImpl **)&v14[8];
  *(void *)&v14[8] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v9);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)v14;
  *(void *)uint64_t v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *WTF::Function<void ()(void)>::Function<WebKit::WebResourceLoader::didFailResourceLoad(WebCore::ResourceError const&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x68);
  uint64_t v5 = v4;
  uint64_t v6 = *a2;
  *(void *)uint64_t v4 = &unk_1EE9F1E38;
  *(void *)(v4 + 8) = v6;
  uint64_t v7 = a2[1];
  a2[1] = 0;
  *(void *)(v4 + ++*(_DWORD *)(this + 16) = v7;
  double v8 = (_DWORD *)a2[2];
  if (v8) {
    *v8 += 2;
  }
  *(void *)(v4 + 24) = v8;
  double v9 = (_DWORD *)a2[3];
  if (v9) {
    *v9 += 2;
  }
  *(void *)(v4 + 32) = v9;
  long long v10 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(v4 + 56) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(v4 + 40) = v10;
  uint64_t v11 = (_DWORD *)a2[8];
  if (v11) {
    *v11 += 2;
  }
  *(void *)(v4 + 72) = v11;
  int v12 = *((_DWORD *)a2 + 18);
  *(_WORD *)(v4 + 84) = *((_WORD *)a2 + 38);
  *(_DWORD *)(v4 + 80) = v12;
  uint64_t v13 = (const void *)a2[10];
  *(void *)(v5 + 88) = v13;
  if (v13) {
    CFRetain(v13);
  }
  *(unsigned char *)(v5 + 96) = *((unsigned char *)a2 + 88);
  *a1 = v5;
  return a1;
}

void *WebKit::WebResourceLoader::didFailResourceLoad(WebCore::ResourceError const&)::$_0::~$_0(void *a1, WTF::StringImpl *a2)
{
  BOOL v3 = (const void *)a1[10];
  a1[10] = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    if (v7[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    }
    else {
      --v7[2];
    }
  }
  return a1;
}

uint64_t WebKit::WebResourceLoader::didBlockAuthenticationChallenge(WebKit::WebResourceLoader *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  BOOL v3 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 4);
    uint64_t v5 = *((void *)this + 5);
    uint64_t v6 = *((void *)this + 7);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v3);
    double v8 = v7 - *((double *)this + 10);
    int v10 = 134219008;
    uint64_t v11 = this;
    __int16 v12 = 2048;
    uint64_t v13 = v4;
    __int16 v14 = 2048;
    uint64_t v15 = v5;
    __int16 v16 = 2048;
    uint64_t v17 = v6;
    __int16 v18 = 2048;
    double v19 = v8;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::didBlockAuthenticationChallenge:", (uint8_t *)&v10, 0x34u);
  }
  return WebCore::ResourceLoader::didBlockAuthenticationChallenge(*((WebCore::ResourceLoader **)this + 2));
}

uint64_t WebKit::WebResourceLoader::stopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied(WebKit::WebResourceLoader *this, const WebCore::ResourceResponse *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  BOOL v3 = off_1EB358988;
  BOOL v4 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 4);
    uint64_t v6 = *((void *)this + 5);
    uint64_t v7 = *((void *)this + 7);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v4);
    double v9 = v8 - *((double *)this + 10);
    int v11 = 134219008;
    __int16 v12 = this;
    __int16 v13 = 2048;
    uint64_t v14 = v5;
    __int16 v15 = 2048;
    uint64_t v16 = v6;
    __int16 v17 = 2048;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    double v20 = v9;
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::stopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied:", (uint8_t *)&v11, 0x34u);
  }
  return WebCore::DocumentLoader::stopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied();
}

unsigned int *WebKit::WebResourceLoader::didReceiveResource(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  BOOL v3 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 56);
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v3);
    double v8 = v7 - *(double *)(a1 + 80);
    *(_DWORD *)long long buf = 134219008;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v35 = 2048;
    uint64_t v36 = v4;
    __int16 v37 = 2048;
    uint64_t v38 = v5;
    __int16 v39 = 2048;
    uint64_t v40 = v6;
    __int16 v41 = 2048;
    double v42 = v8;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::didReceiveResource:", buf, 0x34u);
  }
  WebCore::ShareableResourceHandle::tryWrapInSharedBuffer();
  int v10 = v33;
  if (v33)
  {
    ++*(_DWORD *)(a1 + 8);
    if (v10[12])
    {
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v33 = 0;
      (*(void (**)(uint64_t, unsigned int *))(*(void *)v11 + 216))(v11, v10);
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v10, v12);
    }
    if (*(void *)(a1 + 16))
    {
      WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)buf);
      (*(void (**)(void, unsigned char *))(**(void **)(a1 + 16) + 232))(*(void *)(a1 + 16), buf);
      WebCore::NetworkLoadMetrics::~NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)buf, v13);
    }
    if (*(_DWORD *)(a1 + 8) == 1) {
      (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
    }
    else {
      --*(_DWORD *)(a1 + 8);
    }
  }
  else
  {
    __int16 v15 = off_1EB358988;
    BOOL v16 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
    if (v16)
    {
      uint64_t v17 = *(void *)(a1 + 32);
      uint64_t v18 = *(void *)(a1 + 40);
      uint64_t v19 = *(void *)(a1 + 56);
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v16);
      double v21 = v20 - *(double *)(a1 + 80);
      *(_DWORD *)long long buf = 134219008;
      *(void *)&uint8_t buf[4] = a1;
      __int16 v35 = 2048;
      uint64_t v36 = v17;
      __int16 v37 = 2048;
      uint64_t v38 = v18;
      __int16 v39 = 2048;
      uint64_t v40 = v19;
      __int16 v41 = 2048;
      double v42 = v21;
      _os_log_impl(&dword_1985F2000, v15, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::didReceiveResource: Unable to create FragmentedSharedBuffer", buf, 0x34u);
    }
    uint64_t v22 = *(void **)(a1 + 16);
    uint64_t v23 = v22[4];
    if (v23)
    {
      uint64_t v24 = *(void *)(v23 + 24);
      if (v24)
      {
        double v25 = *(WebCore::Page **)(v24 + 8);
        if (v25)
        {
          uint64_t v26 = (WebCore::DiagnosticLoggingKeys *)WebCore::Page::diagnosticLoggingClient(v25);
          uint64_t v27 = (WebCore::DiagnosticLoggingKeys *)WebCore::DiagnosticLoggingKeys::internalErrorKey((uint64_t *)buf, v26);
          WebCore::DiagnosticLoggingKeys::createSharedBufferFailedKey((uint64_t *)&v32, v27);
          (**(void (***)(WebCore::DiagnosticLoggingKeys *, unsigned char *, WTF::StringImpl **, void))v26)(v26, buf, &v32, 0);
          uint64_t v29 = v32;
          uint64_t v32 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, v28);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          long long v30 = *(WTF::StringImpl **)buf;
          *(void *)long long buf = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2) {
              WTF::StringImpl::destroy(v30, v28);
            }
            else {
              *(_DWORD *)v30 -= 2;
            }
          }
          uint64_t v22 = *(void **)(a1 + 16);
        }
      }
    }
    WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v22 + 42));
    WebCore::createInternalError();
    (*(void (**)(void *, unsigned char *))(*v22 + 240))(v22, buf);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v31);
  }
  uint64_t result = v33;
  uint64_t v33 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v9);
  }
  return result;
}

uint64_t WebKit::WebResourceLoader::contentFilterDidBlockLoad(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 40);
    if (v7)
    {
      WTF::String::operator=((uint64_t *)(v7 + 2976), (WTF::StringImpl **)a5);
      long long v12 = *(_OWORD *)(a5 + 24);
      *(_OWORD *)(v7 + 2984) = *(_OWORD *)(a5 + 8);
      *(_OWORD *)(v7 + 3000) = v12;
      uint64_t v13 = *a6;
      *a6 = 0;
      uint64_t v14 = *(unsigned int **)(v7 + 3016);
      *(void *)(v7 + 30++*(_DWORD *)(this + 16) = v13;
      if (v14) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v11);
      }
      WTF::URL::operator=(v7 + 3024, (uint64_t)(a6 + 1));
      WebCore::ResourceResponseBase::operator=(v7 + 3064, (uint64_t)(a6 + 6));
      uint64_t v15 = a6[36];
      a6[36] = 0;
      BOOL v16 = *(const void **)(v7 + 3304);
      *(void *)(v7 + 3304) = v15;
      if (v16) {
        CFRelease(v16);
      }
      *(unsigned char *)(v7 + 3312) = *((unsigned char *)a6 + 296);
      *(unsigned char *)(v7 + 3320) = *((unsigned char *)a6 + 304);
      uint64_t v17 = *(WTF::StringImpl **)a2;
      if (*(void *)a2) {
        *(_DWORD *)v17 += 2;
      }
      uint64_t v27 = v17;
      uint64_t v18 = *(WTF::StringImpl **)(a2 + 8);
      if (v18) {
        *(_DWORD *)v18 += 2;
      }
      uint64_t v28 = v18;
      std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::__value_func[abi:sn180100]((uint64_t)v29, a2 + 48);
      uint64_t v19 = *(const void **)(a2 + 80);
      CFTypeRef cf = v19;
      if (v19) {
        CFRetain(v19);
      }
      char v31 = *(unsigned char *)(a2 + 88);
      WebCore::DocumentLoader::handleContentFilterDidBlock();
      if (v26) {
        CFRelease(v26);
      }
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v20);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v20);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v20);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      CFTypeRef v21 = cf;
      CFTypeRef cf = 0;
      if (v21) {
        CFRelease(v21);
      }
      std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::~__value_func[abi:sn180100](v29);
      if (v28)
      {
        if (*(_DWORD *)v28 == 2) {
          WTF::StringImpl::destroy(v28, v22);
        }
        else {
          *(_DWORD *)v28 -= 2;
        }
      }
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, v22);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
      return WebCore::DocumentLoader::cancelMainResourceLoad();
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WebKit::WebSocketChannel&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  BOOL v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = *(unsigned int *)(v8 - 4);
        }
        char v29 = 0;
        uint64_t v30 = v8 + 16 * v24;
        goto LABEL_34;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      BOOL v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      uint64_t *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      BOOL v16 = v18;
    }
  }
  *BOOL v16 = v11;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3 + 8);
  CFTypeRef v21 = *(atomic_uint **)(a3 + 16);
  if (v21) {
    atomic_fetch_add(v21, 1u);
  }
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v21;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
  }
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v25 = *v6;
  if (*v6) {
    int v26 = *(_DWORD *)(v25 - 12);
  }
  else {
    int v26 = 0;
  }
  uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
  unint64_t v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_27:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
      BOOL v16 = result;
      uint64_t v25 = *v6;
      if (*v6) {
        unint64_t v28 = *(unsigned int *)(v25 - 4);
      }
      else {
        unint64_t v28 = 0;
      }
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_27;
  }
  uint64_t v30 = v25 + 16 * v28;
  char v29 = 1;
LABEL_34:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v30;
  *(unsigned char *)(a4 + ++*(_DWORD *)(this + 16) = v29;
  return result;
}

WTF::StringImpl *WebKit::WebSocketChannelManager::networkProcessCrashed(WTF::StringImpl *this, void *a2)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (!v2)
  {
    uint64_t v5 = 0;
    uint64_t v3 = 0;
LABEL_10:
    uint64_t v4 = (void *)(v2 + 16 * v3);
    goto LABEL_11;
  }
  uint64_t v3 = *(unsigned int *)(v2 - 4);
  uint64_t v4 = (void *)(v2 + 16 * v3);
  if (!*(_DWORD *)(v2 - 12))
  {
    uint64_t v5 = (void *)(v2 + 16 * v3);
    goto LABEL_10;
  }
  uint64_t v5 = (void *)v2;
  if (v3)
  {
    uint64_t v6 = 16 * v3;
    uint64_t v5 = (void *)v2;
    while ((unint64_t)(*v5 + 1) <= 1)
    {
      v5 += 2;
      v6 -= 16;
      if (!v6)
      {
        uint64_t v5 = v4;
        break;
      }
    }
  }
LABEL_11:
  if (v2) {
    uint64_t v7 = (void *)(v2 + 16 * *(unsigned int *)(v2 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  while (v5 != v7)
  {
    uint64_t v8 = v5[1];
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9) {
        int v10 = (WebKit::WebSocketChannel *)(v9 - 8);
      }
      else {
        int v10 = 0;
      }
    }
    else
    {
      int v10 = 0;
    }
    this = WebKit::WebSocketChannel::networkProcessCrashed(v10);
    uint64_t v11 = v5 + 2;
    uint64_t v5 = v4;
    if (v11 != v4)
    {
      uint64_t v5 = v11;
      while ((unint64_t)(*v5 + 1) <= 1)
      {
        v5 += 2;
        if (v5 == v4)
        {
          uint64_t v5 = v4;
          break;
        }
      }
    }
  }
  if (v2)
  {
    return (WTF::StringImpl *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v2, a2);
  }
  return this;
}

uint64_t WebKit::WebLoaderStrategy::usePingLoad(WebKit::WebLoaderStrategy *this)
{
  return 0;
}

uint64_t WebKit::WebLoaderStrategy::ongoingLoads@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *(void *)(this + 48);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 12);
    if (v4)
    {
      if (v4 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        uint64_t v5 = this;
        this = WTF::fastMalloc((WTF *)(8 * v4));
        *(_DWORD *)(a2 + 8) = v4;
        *(void *)a2 = this;
        uint64_t v6 = *(void *)(v5 + 48);
        if (v6 && *(_DWORD *)(v6 - 12))
        {
          uint64_t v7 = *(unsigned int *)(v6 - 4);
          if (v7)
          {
            uint64_t v8 = 16 * v7;
            for (int i = *(uint64_t **)(v5 + 48); (unint64_t)(*i + 1) <= 1; i += 2)
            {
              v8 -= 16;
              if (!v8) {
                return this;
              }
            }
          }
          else
          {
            int i = *(uint64_t **)(v5 + 48);
          }
          int v10 = (uint64_t *)(v6 + 16 * v7);
          if (v10 != i)
          {
            unsigned int v11 = 0;
            uint64_t v12 = *i;
LABEL_14:
            *(void *)(this + 8 * v11++) = v12;
            *(_DWORD *)(a2 + 12) = v11;
            while (1)
            {
              i += 2;
              if (i == v10) {
                break;
              }
              uint64_t v12 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                if (i != v10) {
                  goto LABEL_14;
                }
                return this;
              }
            }
          }
        }
      }
    }
  }
  return this;
}

_DWORD *WTF::RefCounted<WebKit::WebIDBConnectionToServer>::deref(_DWORD *result, void *a2)
{
  if (*result == 1)
  {
    WebKit::WebIDBConnectionToServer::~WebIDBConnectionToServer((WebKit::WebIDBConnectionToServer *)(result - 6), a2);
    return (_DWORD *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(WebCore::ResourceError const&)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (_DWORD **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (_DWORD *)-1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5)
        {
          if (v5[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
          }
          else {
            --v5[2];
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::NetworkResourceLoadParameters *WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters(WebKit::NetworkResourceLoadParameters *this)
{
  Parameters = WebKit::NetworkLoadParameters::NetworkLoadParameters(this);
  *(_OWORD *)((char *)Parameters + 2993) = 0u;
  *(_OWORD *)((char *)Parameters + 2968) = 0u;
  *(_OWORD *)((char *)Parameters + 2984) = 0u;
  *((unsigned char *)Parameters + 3009) = 2;
  *(_DWORD *)((char *)Parameters + 3010) = 0;
  *((unsigned char *)Parameters + 3014) = 0;
  *((unsigned char *)Parameters + 3080) = 0;
  *((void *)this + 386) = 0;
  *(_OWORD *)((char *)Parameters + 30++*(_DWORD *)(this + 16) = 0u;
  *(_OWORD *)((char *)Parameters + 3032) = 0u;
  *(_OWORD *)((char *)Parameters + 3041) = 0u;
  WTF::URL::invalidate((WebKit::NetworkLoadParameters *)((char *)Parameters + 3088));
  *((void *)this + 391) = 0;
  WTF::URL::invalidate((WebKit::NetworkResourceLoadParameters *)((char *)this + 3128));
  *((_WORD *)this + 1584) = 0;
  *((_OWORD *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 3176) = 0u;
  *((_WORD *)this + 1596) = 0;
  WebCore::HTTPHeaderMap::HTTPHeaderMap((WebKit::NetworkResourceLoadParameters *)((char *)this + 3216));
  *((_WORD *)this + 1624) = 0;
  *((unsigned char *)this + 3250) = 0;
  *((unsigned char *)this + 3280) = 0;
  *((unsigned char *)this + 3296) = 0;
  *(_OWORD *)((char *)this + 3256) = 0u;
  *((unsigned char *)this + 3272) = 0;
  *((unsigned char *)this + 3304) = 1;
  *((void *)this + 414) = 0;
  WTF::URL::invalidate((WebKit::NetworkResourceLoadParameters *)((char *)this + 3312));
  *((_WORD *)this + 1676) = 0;
  *((unsigned char *)this + 3354) = 0;
  *((_WORD *)this + 1678) = 0;
  *((void *)this + 420) = 0;
  WTF::URL::invalidate((WebKit::NetworkResourceLoadParameters *)((char *)this + 3360));
  *((_WORD *)this + 1700) = 0;
  *((unsigned char *)this + 3432) = 0;
  *((unsigned char *)this + 3440) = 0;
  *((unsigned char *)this + 3664) = 0;
  *((void *)this + 427) = 0;
  *((void *)this + 426) = 0;
  *((unsigned char *)this + 3424) = 0;
  *((unsigned char *)this + 3680) = 1;
  *((unsigned char *)this + 3688) = 0;
  *((unsigned char *)this + 3696) = 0;
  *((unsigned char *)this + 3704) = 0;
  *((unsigned char *)this + 3712) = 0;
  *((unsigned char *)this + 3720) = 0;
  *((void *)this + 466) = 0;
  WTF::URL::invalidate((WebKit::NetworkResourceLoadParameters *)((char *)this + 3728));
  *((unsigned char *)this + 3768) = 0;
  *((unsigned char *)this + 3776) = 0;
  *((_WORD *)this + 1892) = 0;
  *((unsigned char *)this + 3786) = 0;
  return this;
}

void WebKit::WebLoaderStrategy::SyncLoadResult::~SyncLoadResult(WebKit::WebLoaderStrategy::SyncLoadResult *this, void *a2)
{
  uint64_t v3 = (WTF *)*((void *)this + 42);
  if (v3)
  {
    *((void *)this + 42) = 0;
    *((_DWORD *)this + 86) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = (const void *)*((void *)this + 40);
  *((void *)this + 40) = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = (const void *)*((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v8) {
    CFRelease(v8);
  }

  WebCore::ResourceResponseBase::~ResourceResponseBase(this, (WTF::StringImpl *)a2);
}

uint64_t WebKit::WebLoaderStrategy::SyncLoadResult::SyncLoadResult(uint64_t a1, uint64_t a2)
{
  WTF::URL::URL(a1, (uint64_t *)a2);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(v6 + 40) = v4;
  *(void *)(v6 + 48) = v5;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(v6 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(v6 + 64) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(void *)(v6 + 80) = 0;
  *(void *)(v6 + 88) = 0;
  *(void *)(v6 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  *(void *)(v6 + 80) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_DWORD *)(v6 + 88) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_DWORD *)(v6 + 92) = v10;
  *(void *)(v6 + 96) = 0;
  *(void *)(v6 + 104) = 0;
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  *(void *)(v6 + 96) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(v6 + 104) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_DWORD *)(v6 + 108) = v11;
  uint64_t v12 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  *(void *)(v6 + 112) = v12;
  *(unsigned char *)(v6 + 120) = 0;
  *(unsigned char *)(v6 + 128) = 0;
  if (*(unsigned char *)(a2 + 128))
  {
    uint64_t v24 = *(void *)(a2 + 120);
    *(void *)(a2 + 120) = 0;
    *(void *)(a1 + 120) = v24;
    *(unsigned char *)(a1 + 128) = 1;
  }
  long long v13 = *(_OWORD *)(a2 + 136);
  long long v14 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 136) = v13;
  long long v15 = *(_OWORD *)(a2 + 184);
  long long v16 = *(_OWORD *)(a2 + 200);
  long long v17 = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
  *(_OWORD *)(a1 + 2++*(_DWORD *)(this + 16) = v17;
  *(_OWORD *)(a1 + 200) = v16;
  *(_OWORD *)(a1 + 184) = v15;
  uint64_t v18 = *(void *)(a2 + 240);
  *(void *)(a2 + 240) = 0;
  *(void *)(a1 + 240) = v18;
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  uint64_t v19 = *(void *)(a2 + 256);
  *(void *)(a2 + 256) = 0;
  *(void *)(a1 + 256) = v19;
  WTF::URL::URL(a1 + 264, (uint64_t *)(a2 + 264));
  uint64_t v20 = *(void *)(a2 + 304);
  *(void *)(a2 + 304) = 0;
  *(void *)(a1 + 304) = v20;
  LODWORD(v20) = *(_DWORD *)(a2 + 312);
  *(_WORD *)(a1 + 3++*(_DWORD *)(this + 16) = *(_WORD *)(a2 + 316);
  *(_DWORD *)(a1 + 312) = v20;
  uint64_t v21 = *(void *)(a2 + 320);
  *(void *)(a2 + 320) = 0;
  *(void *)(a1 + 320) = v21;
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  uint64_t v22 = *(void *)(a2 + 336);
  *(void *)(a2 + 336) = 0;
  *(void *)(a1 + 336) = v22;
  LODWORD(v22) = *(_DWORD *)(a2 + 344);
  *(_DWORD *)(a2 + 344) = 0;
  *(_DWORD *)(a1 + 344) = v22;
  LODWORD(v22) = *(_DWORD *)(a2 + 348);
  *(_DWORD *)(a2 + 348) = 0;
  *(_DWORD *)(a1 + 348) = v22;
  return a1;
}

uint64_t std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WebCore::ResourceError &,WebCore::ResourceResponse &,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,1ul,2ul>(uint64_t *a1, uint64_t a2)
{
  WebCore::ResourceError::operator=(*a1, a2);
  WebCore::ResourceResponse::operator=(a1[1], a2 + 80);
  uint64_t v4 = a1[2];

  return WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(v4, (uint64_t *)(a2 + 336));
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~__tuple_impl(uint64_t a1, void *a2)
{
  uint64_t v3 = *(WTF **)(a1 + 336);
  if (v3)
  {
    *(void *)(a1 + 336) = 0;
    *(_DWORD *)(a1 + 344) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *(const void **)(a1 + 320);
  *(void *)(a1 + 320) = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 80), (WTF::StringImpl *)a2);
  uint64_t v6 = *(const void **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(WTF::StringImpl **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = *(WTF::StringImpl **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = *(WTF::StringImpl **)a1;
  *(void *)a1 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v5);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  return a1;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess22PerformSynchronousLoadEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~__tuple_impl((uint64_t)a2 + 8, a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

_DWORD **WTF::RefPtr<WebCore::DocumentLoader,WTF::RawPtrTraits<WebCore::DocumentLoader>,WTF::DefaultRefDerefTraits<WebCore::DocumentLoader>>::operator=(_DWORD **a1, _DWORD *a2)
{
  if (a2) {
    ++a2[6];
  }
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    if (v3[6] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 24))(v3);
    }
    else {
      --v3[6];
    }
  }
  return a1;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess33GetNetworkLoadInformationResponseEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (const void *)a2[31];
  a2[31] = 0;
  if (v3) {
    CFRelease(v3);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a2 + 1), (WTF::StringImpl *)a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess37GetNetworkLoadIntermediateInformationEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::NetworkTransactionInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess33TakeNetworkLoadInformationMetricsEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((void *)a2 + 16);
  *((void *)a2 + ++*(_DWORD *)(this + 16) = 0;
  if (v3) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)a2 + 12);
  *((void *)a2 + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 - 4);
  if (v2)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      if (*(void *)(a1 + 40 * i) == -1) {
        continue;
      }
      uint64_t v4 = a1 + 40 * i;
      unint64_t v6 = *(void *)(v4 + 8);
      unint64_t v7 = *(void *)(v4 + 16);
      uint64_t v5 = v4 + 8;
      uint64_t v9 = (WTF **)(v5 + 16);
      uint64_t v8 = *(WTF **)(v5 + 16);
      if (v6 > v7)
      {
        uint64_t v24 = (unint64_t *)v5;
        uint64_t v25 = *(WTF **)(v5 + 16);
        uint64_t v29 = i;
        char v31 = (WTF **)(v5 + 16);
        uint64_t v27 = v2;
        uint64_t v33 = a1;
        if (v7)
        {
          uint64_t v17 = 8 * v7;
          do
          {
            uint64_t v18 = *(void *)v25;
            *(void *)uint64_t v25 = 0;
            if (v18) {
              (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
            }
            uint64_t v25 = (WTF *)((char *)v25 + 8);
            v17 -= 8;
          }
          while (v17);
          uint64_t v25 = *v31;
          unint64_t v6 = *v24;
        }
        a1 = v33;
        uint64_t v2 = v27;
        uint64_t i = v29;
        uint64_t v14 = *(unsigned int *)(v33 + 40 * v29 + 32);
        uint64_t v9 = v31;
        if (v6 != v14)
        {
          uint64_t v19 = (uint64_t *)((char *)v25 + 8 * v6);
          uint64_t v20 = 8 * v14 - 8 * v6;
          do
          {
            uint64_t v21 = *v19;
            uint64_t *v19 = 0;
            if (v21) {
              (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
            }
            ++v19;
            v20 -= 8;
            a1 = v33;
            uint64_t v2 = v27;
            uint64_t i = v29;
            uint64_t v9 = v31;
          }
          while (v20);
        }
      }
      else
      {
        if (v6 == v7)
        {
          if (v8) {
            goto LABEL_17;
          }
          continue;
        }
        uint64_t v10 = (void *)((char *)v8 + 8 * v6);
        uint64_t v11 = 8 * v7 - 8 * v6;
        do
        {
          uint64_t v12 = *v10;
          void *v10 = 0;
          if (v12)
          {
            uint64_t v32 = a1;
            uint64_t v13 = v2;
            uint64_t v28 = i;
            uint64_t v30 = v9;
            int v26 = v10;
            (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
            uint64_t v10 = v26;
            uint64_t i = v28;
            uint64_t v9 = v30;
            uint64_t v2 = v13;
            a1 = v32;
          }
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      uint64_t v8 = *v9;
      if (*v9)
      {
LABEL_17:
        WTF::StringImpl *v9 = 0;
        *(_DWORD *)(a1 + 40 * i + 32) = 0;
        uint64_t v34 = a1;
        uint64_t v15 = v2;
        uint64_t v16 = i;
        WTF::fastFree(v8, a2);
        uint64_t i = v16;
        uint64_t v2 = v15;
        a1 = v34;
      }
    }
  }
  uint64_t v22 = (WTF *)(a1 - 16);

  return WTF::fastFree(v22, a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::WriteBlobsToTemporaryFilesForIndexedDB,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F1BF8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::WriteBlobsToTemporaryFilesForIndexedDB,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F1BF8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::WriteBlobsToTemporaryFilesForIndexedDB,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v7);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8) {
        return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebProcess::GetActivePagesOriginsForTesting,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
    }
  }
  else
  {
    unint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebProcess::GetActivePagesOriginsForTesting,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v6);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessConnection::broadcastConsoleMessage(JSC::MessageSource,JSC::MessageLevel,WTF::String const&)::$_0,void,WebCore::Page &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 160);
  if (v2) {
    BOOL v3 = *(unsigned char *)(v2 + 144) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    if (*(void *)(v2 + 296)) {
      return WebCore::Document::addConsoleMessage();
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebLoaderStrategy::*&)(void),WebKit::WebLoaderStrategy*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  BOOL v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::loadResource(WebCore::LocalFrame &,WebCore::CachedResource &,WebCore::ResourceRequest &&,WebCore::ResourceLoaderOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F1C70;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)(a1 + 4));
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::loadResource(WebCore::LocalFrame &,WebCore::CachedResource &,WebCore::ResourceRequest &&,WebCore::ResourceLoaderOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F1C70;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)(a1 + 4));
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::loadResource(WebCore::LocalFrame &,WebCore::CachedResource &,WebCore::ResourceRequest &&,WebCore::ResourceLoaderOptions const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::SubresourceLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::call(uint64_t a1, String **a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(WebKit::WebLoaderStrategy **)(a1 + 8);
  uint64_t v5 = *a2;
  if (*a2)
  {
    unint64_t v6 = (WebCore::CachedResource *)WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(a1 + 32));
    WebKit::WebLoaderStrategy::scheduleLoad(v4, v5, v6, *(unsigned char *)(a1 + 16) == 2);
LABEL_3:
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, String **))(*(void *)v7 + 16))(v7, a2);
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v9 = off_1EB358988;
  if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_3;
  }
  WebCore::Frame::pageID(*(WebCore::Frame **)(a1 + 40));
  if (!v10)
  {
    uint64_t result = 0;
    goto LABEL_7;
  }
  uint64_t result = WebCore::Frame::pageID(*(WebCore::Frame **)(a1 + 40));
  if (v11)
  {
LABEL_7:
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 32);
    int v13 = 134218496;
    uint64_t v14 = v4;
    __int16 v15 = 2048;
    uint64_t v16 = result;
    __int16 v17 = 2048;
    uint64_t v18 = v12;
    _os_log_impl(&dword_1985F2000, v9, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu] WebLoaderStrategy::loadResource: Unable to create SubresourceLoader", (uint8_t *)&v13, 0x20u);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::schedulePluginStreamLoad(WebCore::LocalFrame &,WebCore::NetscapePlugInStreamLoaderClient &,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F1C98;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::schedulePluginStreamLoad(WebCore::LocalFrame &,WebCore::NetscapePlugInStreamLoaderClient &,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F1C98;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::schedulePluginStreamLoad(WebCore::LocalFrame &,WebCore::NetscapePlugInStreamLoaderClient &,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>::call(void *a1, String **a2)
{
  uint64_t v4 = *a2;
  if (*a2)
  {
    uint64_t v5 = (WebKit::WebLoaderStrategy *)a1[1];
    char v6 = (*(unsigned int (**)(void))(*(void *)(*(void *)(a1[3] + 296) + 208) + 8))() == 2;
    WebKit::WebLoaderStrategy::scheduleLoad(v5, v4, 0, v6);
  }
  uint64_t v7 = a1[2];
  a1[2] = 0;
  (*(void (**)(uint64_t, String **))(*(void *)v7 + 16))(v7, a2);
  char v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);

  return v8(v7);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::Ref<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a3;
  unint64_t v12 = *a3 + ~(*a3 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (!*v16)
  {
LABEL_4:
    *uint64_t v16 = v11;
    uint64_t v18 = *a4;
    *a4 = 0;
    uint64_t result = (uint64_t *)v16[1];
    v16[1] = v18;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1) {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      }
      else {
        --*((_DWORD *)result + 2);
      }
    }
    uint64_t v20 = *a2;
    if (*a2) {
      int v21 = *(_DWORD *)(v20 - 12) + 1;
    }
    else {
      int v21 = 1;
    }
    *(_DWORD *)(v20 - 12) = v21;
    uint64_t v22 = *a2;
    if (*a2) {
      int v23 = *(_DWORD *)(v22 - 12);
    }
    else {
      int v23 = 0;
    }
    uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
    unint64_t v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24) {
        goto LABEL_13;
      }
    }
    else if (3 * v25 > 4 * v24)
    {
LABEL_13:
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v22 + 16 * v25;
      *(unsigned char *)(a1 + ++*(_DWORD *)(this + 16) = 1;
      return result;
    }
    uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, v16);
    uint64_t v16 = result;
    uint64_t v22 = *a2;
    if (*a2) {
      unint64_t v25 = *(unsigned int *)(v22 - 4);
    }
    else {
      unint64_t v25 = 0;
    }
    goto LABEL_13;
  }
  int v26 = 0;
  int v27 = 1;
  while (v17 != v11)
  {
    if (v17 == -1) {
      int v26 = v16;
    }
    unsigned int v15 = (v15 + v27) & v10;
    uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
    uint64_t v17 = *v16;
    ++v27;
    if (!*v16)
    {
      if (v26)
      {
        *int v26 = 0;
        v26[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        uint64_t v11 = *a3;
        uint64_t v16 = v26;
      }
      goto LABEL_4;
    }
  }
  if (v9) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = *(unsigned int *)(v8 - 4);
  }
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v8 + 16 * v28;
  *(unsigned char *)(a1 + ++*(_DWORD *)(this + 16) = 0;

  return (uint64_t *)WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>::operator=<WebKit::WebResourceLoader>((_DWORD **)v16 + 1, a4);
}

_DWORD **WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>::operator=<WebKit::WebResourceLoader>(_DWORD **a1, void *a2)
{
  uint64_t v3 = (_DWORD *)*a2;
  *a2 = 0;
  uint64_t v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v14 != -1)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = *(void *)(v15 + 16 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (v23);
          uint64_t v24 = (uint64_t *)(v15 + 16 * v22);
          unint64_t v25 = (_DWORD *)v24[1];
          v24[1] = 0;
          if (v25)
          {
            if (v25[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v25 + 8))(v25);
            }
            else {
              --v25[2];
            }
          }
          *uint64_t v24 = *v13;
          uint64_t v26 = v6 + 16 * v11;
          uint64_t v27 = *(void *)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          v24[1] = v27;
          uint64_t v28 = *(_DWORD **)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          if (v28)
          {
            if (v28[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v28 + 8))(v28);
            }
            else {
              --v28[2];
            }
          }
          if (v13 == a3) {
            unint64_t v12 = v24;
          }
        }
      }
      else
      {
        uint64_t v29 = (_DWORD *)v13[1];
        v13[1] = 0;
        if (v29)
        {
          if (v29[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v29 + 8))(v29);
          }
          else {
            --v29[2];
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void *WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::scheduleLoad(WebCore::ResourceLoader &,WebCore::CachedResource *,BOOL)::$_0,void,WebCore::ResourceRequest const&>::~CallableWrapper(void *result)
{
  *uint64_t result = &unk_1EE9F1CC0;
  uint64_t v1 = (_DWORD *)result[2];
  result[2] = 0;
  if (v1)
  {
    if (v1[4] == 1)
    {
      uint64_t v2 = result;
      (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
      return v2;
    }
    else
    {
      --v1[4];
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::scheduleLoad(WebCore::ResourceLoader &,WebCore::CachedResource *,BOOL)::$_0,void,WebCore::ResourceRequest const&>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9F1CC0;
  uint64_t v2 = (_DWORD *)*((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v2)
  {
    if (v2[4] == 1)
    {
      int v4 = a1;
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
      a1 = v4;
    }
    else
    {
      --v2[4];
    }
  }

  return WTF::fastFree(a1, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::scheduleLoad(WebCore::ResourceLoader &,WebCore::CachedResource *,BOOL)::$_0,void,WebCore::ResourceRequest const&>::call(void *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1[1];
  int v4 = (WebCore::ResourceLoader *)a1[2];
  uint64_t v6 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = WebCore::ResourceLoader::frameLoader(v4);
    uint64_t v8 = *((void *)v4 + 4);
    uint64_t v9 = a1[4];
    uint64_t v10 = a1[5];
    uint64_t v11 = a1[7];
    int v12 = 134219520;
    uint64_t v13 = v5;
    __int16 v14 = 2048;
    uint64_t v15 = v4;
    __int16 v16 = 2048;
    uint64_t v17 = v7;
    __int16 v18 = 2048;
    uint64_t v19 = v8;
    __int16 v20 = 2048;
    uint64_t v21 = v9;
    __int16 v22 = 2048;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = v11;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [resourceLoader=%p, frameLoader=%p, frame=%p, webPageID=%llu, frameID=%llu, resourceID=%llu] WebLoaderStrategy::scheduleLoad: intercepted URL will be scheduled with the NetworkProcess", (uint8_t *)&v12, 0x48u);
  }
  WebKit::maximumBufferingTime(a1[9]);
  WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess(v5, (uint64_t)v4, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess(WebCore::ResourceLoader &,WebCore::ResourceRequest const&,WebKit::WebResourceLoader::TrackingParameters const&,BOOL,WTF::Seconds)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F1CE8;
  WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess(WebCore::ResourceLoader &,WebCore::ResourceRequest const&,WebKit::WebResourceLoader::TrackingParameters const&,BOOL,WTF::Seconds)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess(WebCore::ResourceLoader &,WebCore::ResourceRequest const&,WebKit::WebResourceLoader::TrackingParameters const&,BOOL,WTF::Seconds)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9F1CE8;
  WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess(WebCore::ResourceLoader &,WebCore::ResourceRequest const&,WebKit::WebResourceLoader::TrackingParameters const&,BOOL,WTF::Seconds)::$_0::~$_0((uint64_t)a1 + 8, a2);

  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebLoaderStrategy::scheduleLoadFromNetworkProcess(WebCore::ResourceLoader &,WebCore::ResourceRequest const&,WebKit::WebResourceLoader::TrackingParameters const&,BOOL,WTF::Seconds)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 240))(*(void *)(a1 + 8), a1 + 16);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v10 = (void *)(v4 + 8 * i);
      uint64_t v11 = (_DWORD *)*v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v12 = *a1;
          if (*a1) {
            int v13 = *(_DWORD *)(v12 - 8);
          }
          else {
            int v13 = 0;
          }
          unint64_t v14 = ((unint64_t)v11 + ~((void)v11 << 32)) ^ (((unint64_t)v11 + ~((void)v11 << 32)) >> 22);
          unint64_t v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          unsigned int v17 = v13 & ((v16 >> 31) ^ v16);
          int v18 = 1;
          do
          {
            unsigned int v19 = v17;
            uint64_t v20 = *(void *)(v12 + 8 * v17);
            unsigned int v17 = (v17 + v18++) & v13;
          }
          while (v20);
          uint64_t v21 = (void *)(v12 + 8 * v19);
          *uint64_t v21 = 0;
          __int16 v22 = (_DWORD *)*v10;
          void *v10 = 0;
          *uint64_t v21 = v22;
          uint64_t v23 = (_DWORD *)*v10;
          void *v10 = 0;
          if (v23)
          {
            if (v23[4] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v23 + 8))(v23);
            }
            else {
              --v23[4];
            }
          }
        }
        else
        {
          void *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  __int16 v24 = a4;
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  uint64_t v10 = *a3;
  unsigned int v11 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*a3) & v9;
  uint64_t v12 = (uint64_t *)(v8 + 16 * v11);
  uint64_t v13 = *v12;
  if (!*v12)
  {
LABEL_4:
    uint64_t result = (uint64_t *)WTF::HashMapTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::translate<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>> WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::inlineAdd<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> &&,WTF::Ref<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>> &&)::{lambda(void)#1}>(v12, v10, &v24);
    uint64_t v15 = *a2;
    if (*a2) {
      int v16 = *(_DWORD *)(v15 - 12) + 1;
    }
    else {
      int v16 = 1;
    }
    *(_DWORD *)(v15 - 12) = v16;
    uint64_t v17 = *a2;
    if (*a2) {
      int v18 = *(_DWORD *)(v17 - 12);
    }
    else {
      int v18 = 0;
    }
    uint64_t v19 = (*(_DWORD *)(v17 - 16) + v18);
    unint64_t v20 = *(unsigned int *)(v17 - 4);
    if (v20 > 0x400)
    {
      if (v20 > 2 * v19) {
        goto LABEL_10;
      }
    }
    else if (3 * v20 > 4 * v19)
    {
LABEL_10:
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v17 + 16 * v20;
      *(unsigned char *)(a1 + ++*(_DWORD *)(this + 16) = 1;
      return result;
    }
    uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, v12);
    uint64_t v12 = result;
    uint64_t v17 = *a2;
    if (*a2) {
      unint64_t v20 = *(unsigned int *)(v17 - 4);
    }
    else {
      unint64_t v20 = 0;
    }
    goto LABEL_10;
  }
  uint64_t v21 = 0;
  int v22 = 1;
  while (v13 != v10)
  {
    if (v13 == -1) {
      uint64_t v21 = v12;
    }
    unsigned int v11 = (v11 + v22) & v9;
    uint64_t v12 = (uint64_t *)(v8 + 16 * v11);
    uint64_t v13 = *v12;
    ++v22;
    if (!*v12)
    {
      if (v21)
      {
        *uint64_t v21 = 0;
        v21[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        uint64_t v10 = *a3;
        uint64_t v12 = v21;
      }
      goto LABEL_4;
    }
  }
  uint64_t v23 = v8 + 16 * *(unsigned int *)(v8 - 4);
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v23;
  *(unsigned char *)(a1 + ++*(_DWORD *)(this + 16) = 0;

  return (uint64_t *)WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>::operator=<WebKit::WebResourceLoader>((_DWORD **)v12 + 1, a4);
}

_DWORD *WTF::HashMapTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::translate<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>> WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>,WTF::HashTableTraits>::inlineAdd<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>>>(WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> &&,WTF::Ref<WebKit::WebResourceLoader,WTF::RawPtrTraits<WebKit::WebResourceLoader>,WTF::DefaultRefDerefTraits<WebKit::WebResourceLoader>> &&)::{lambda(void)#1}>(void *a1, uint64_t a2, uint64_t **a3)
{
  *a1 = a2;
  uint64_t v4 = **a3;
  **a3 = 0;
  uint64_t result = (_DWORD *)a1[1];
  a1[1] = v4;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
    else {
      --result[2];
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v4, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          uint64_t v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = (unsigned int *)v26[1];
          v26[1] = 0;
          if (v27 && atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v27);
            WTF::fastFree((WTF *)v27, v10);
          }
          *uint64_t v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(unsigned int **)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30 && atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v30);
            WTF::fastFree((WTF *)v30, v10);
          }
          if (v13 == a3) {
            uint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          int v16 = *(unsigned int **)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v16);
              WTF::fastFree((WTF *)v16, v10);
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::remove(uint64_t *result, void *a2)
{
  if (*result)
  {
    int v2 = (void *)(*result + 16 * *(unsigned int *)(*result - 4));
    if (v2 == a2) {
      return result;
    }
  }
  else
  {
    if (!a2) {
      return result;
    }
    int v2 = 0;
  }
  if (v2 != a2) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(result, a2);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *result, void *a2)
{
  int v2 = (unsigned int *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2);
    uint64_t v9 = result;
    WTF::fastFree((WTF *)v2, a2);
    uint64_t result = v9;
  }
  ++*(_DWORD *)(*result - 16);
  uint64_t v3 = *result;
  if (*result) {
    int v4 = *(_DWORD *)(v3 - 12) - 1;
  }
  else {
    int v4 = -1;
  }
  *(_DWORD *)(v3 - 12) = v4;
  uint64_t v5 = *result;
  if (*result)
  {
    unsigned int v6 = 6 * *(_DWORD *)(v5 - 12);
    unsigned int v7 = *(_DWORD *)(v5 - 4);
    if (v6 < v7 && v7 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(result, v7 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t *a1, void *a2)
{
  if (!*a1) {
    return 0;
  }
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, a2);
  uint64_t v4 = *a1;
  if (!result)
  {
    if (v4) {
      return v4 + 16 * *(unsigned int *)(v4 - 4);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebURLSchemeTaskProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 8);
    unint64_t v4 = *a2 + ~(*a2 << 32);
    unint64_t v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
    unint64_t v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
    uint64_t v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~(v6 << 27)));
    uint64_t v8 = *(void *)(v2 + 16 * v7);
    if (v8 == *a2) {
      return v2 + 16 * v7;
    }
    int v9 = 1;
    while (v8)
    {
      uint64_t v7 = (v7 + v9) & v3;
      uint64_t v8 = *(void *)(v2 + 16 * v7);
      ++v9;
      if (v8 == *a2) {
        return v2 + 16 * v7;
      }
    }
  }
  return 0;
}

WebKit::WebURLSchemeTaskProxy *WTF::RefCounted<WebKit::WebURLSchemeTaskProxy>::deref(WebKit::WebURLSchemeTaskProxy *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::WebURLSchemeTaskProxy::~WebURLSchemeTaskProxy(result, a2);
    return (WebKit::WebURLSchemeTaskProxy *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebKit::WebURLSchemeTaskProxy::~WebURLSchemeTaskProxy(WebKit::WebURLSchemeTaskProxy *this, void *a2)
{
  unint64_t v3 = *((void *)this + 32);
  unint64_t v4 = *((void *)this + 33);
  unint64_t v5 = (WTF *)*((void *)this + 34);
  if (v3 > v4)
  {
    uint64_t v13 = v5;
    if (v4)
    {
      uint64_t v15 = 8 * v4;
      do
      {
        uint64_t v16 = *(void *)v13;
        *(void *)uint64_t v13 = 0;
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
        uint64_t v13 = (WTF *)((char *)v13 + 8);
        v15 -= 8;
      }
      while (v15);
      uint64_t v13 = (WTF *)*((void *)this + 34);
      unint64_t v3 = *((void *)this + 32);
    }
    uint64_t v14 = *((unsigned int *)this + 70);
    if (v3 != v14)
    {
      uint64_t v17 = (uint64_t *)((char *)v13 + 8 * v3);
      uint64_t v18 = 8 * v14 - 8 * v3;
      do
      {
        uint64_t v19 = *v17;
        *uint64_t v17 = 0;
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
        }
        ++v17;
        v18 -= 8;
      }
      while (v18);
    }
LABEL_20:
    unint64_t v5 = (WTF *)*((void *)this + 34);
    if (!v5) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
  if (v3 != v4)
  {
    uint64_t v10 = (uint64_t *)((char *)v5 + 8 * v3);
    uint64_t v11 = 8 * v4 - 8 * v3;
    do
    {
      uint64_t v12 = *v10;
      uint64_t *v10 = 0;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
    goto LABEL_20;
  }
  if (!v5) {
    goto LABEL_5;
  }
LABEL_21:
  *((void *)this + 34) = 0;
  *((_DWORD *)this + 70) = 0;
  WTF::fastFree(v5, a2);
LABEL_5:
  unint64_t v6 = (const void *)*((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::WebURLSchemeTaskProxy *)((char *)this + 40));
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  int v9 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v9)
  {
    if (v9[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
    }
    else {
      --v9[4];
    }
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v7);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::lookup<WTF::HashSetTranslator<WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>,WebCore::ResourceLoader const*>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    unsigned int v2 = *(_DWORD *)(result - 8);
    unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    uint64_t v6 = v2 & ((v5 >> 31) ^ v5);
    uint64_t v7 = *(void *)(result + 8 * v6);
    if (v7 == a2)
    {
LABEL_6:
      result += 8 * v6;
    }
    else
    {
      int v8 = 1;
      while (v7)
      {
        uint64_t v6 = (v6 + v8) & v2;
        uint64_t v7 = *(void *)(result + 8 * v6);
        ++v8;
        if (v7 == a2) {
          goto LABEL_6;
        }
      }
      return 0;
    }
  }
  return result;
}

IPC::Decoder *IPC::Decoder::operator>><std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v6, a1);
  std::__optional_storage_base<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>>(a2, v6);
  if (v6[352]) {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~__tuple_impl((uint64_t)v6, v4);
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[352])
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(unsigned char *a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebCore::ResourceError>(a2, (uint64_t)v6);
  if (v6[80])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WebCore::ResourceError>(a1, a2, (uint64_t)v6);
  }
  else
  {
    *a1 = 0;
    a1[352] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
}

WebCore::ResourceResponseBase *IPC::ArgumentCoder<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WebCore::ResourceError>(unsigned char *a1, IPC::Decoder *a2, uint64_t a3)
{
  IPC::Decoder::decode<WebCore::ResourceResponse>(a2, v8);
  if (v8[256])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WebCore::ResourceError,WebCore::ResourceResponse>(a1, a2, a3, (uint64_t)v8);
  }
  else
  {
    *a1 = 0;
    a1[352] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v8, v6);
}

WTF *IPC::ArgumentCoder<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WebCore::ResourceError,WebCore::ResourceResponse>(unsigned char *a1, IPC::Decoder *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (WTF *)IPC::Decoder::decode<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, &v9);
  if (v11)
  {
    uint64_t result = (WTF *)IPC::ArgumentCoder<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a1, a3, a4, (uint64_t)&v9);
    if (v11)
    {
      uint64_t result = v9;
      if (v9)
      {
        int v9 = 0;
        int v10 = 0;
        return (WTF *)WTF::fastFree(result, v8);
      }
    }
  }
  else
  {
    *a1 = 0;
    a1[352] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 80) && *(unsigned char *)(a3 + 256) && *(unsigned char *)(a4 + 16))
  {
    uint64_t result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN7WebCore13ResourceErrorENS3_16ResourceResponseEN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEC2B8sn180100IJLm0ELm1ELm2EEJS4_S5_SA_EJEJEJS4_S5_SA_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(result, (uint64_t *)a2, a3, (uint64_t *)a4);
    *(unsigned char *)(result + 352) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN7WebCore13ResourceErrorENS3_16ResourceResponseEN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEEEC2B8sn180100IJLm0ELm1ELm2EEJS4_S5_SA_EJEJEJS4_S5_SA_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = WebCore::ResourceError::ResourceError(a1, a2);
  std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>(v7 + 80, a3);
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  uint64_t v8 = *a4;
  *a4 = 0;
  *(void *)(a1 + 336) = v8;
  LODWORD(v8) = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = 0;
  *(_DWORD *)(a1 + 344) = v8;
  LODWORD(v8) = *((_DWORD *)a4 + 3);
  *((_DWORD *)a4 + 3) = 0;
  *(_DWORD *)(a1 + 348) = v8;
  return a1;
}

uint64_t std::__optional_storage_base<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>>(uint64_t result, unsigned __int8 *a2)
{
  if (*(unsigned __int8 *)(result + 352) == a2[352])
  {
    if (*(unsigned char *)(result + 352))
    {
      return std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,1ul,2ul>(result, (uint64_t)a2);
    }
  }
  else if (*(unsigned char *)(result + 352))
  {
    uint64_t result = std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~__tuple_impl(result, a2);
    *(unsigned char *)(result + 352) = 0;
  }
  else
  {
    uint64_t result = std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl(result, (uint64_t *)a2);
    *(unsigned char *)(result + 352) = 1;
  }
  return result;
}

uint64_t std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::tuple<WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,1ul,2ul>(uint64_t a1, uint64_t a2)
{
  WTF::String::operator=((uint64_t *)a1, (uint64_t *)a2);
  WTF::URL::operator=(a1 + 8, a2 + 8);
  WTF::String::operator=((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  int v4 = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  uint64_t v6 = *(const void **)(a1 + 64);
  *(void *)(a1 + 64) = v5;
  if (v6) {
    CFRelease(v6);
  }
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  WebCore::ResourceResponseBase::operator=(a1 + 80, a2 + 80);
  uint64_t v7 = *(void *)(a2 + 320);
  *(void *)(a2 + 320) = 0;
  uint64_t v8 = *(const void **)(a1 + 320);
  *(void *)(a1 + 320) = v7;
  if (v8) {
    CFRelease(v8);
  }
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);

  return WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt(a1 + 336, (uint64_t *)(a2 + 336));
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  WTF::URL::URL(a1 + 8, a2 + 1);
  uint64_t v5 = a2[6];
  a2[6] = 0;
  *(void *)(a1 + 48) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 14);
  *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 30);
  *(_DWORD *)(a1 + 56) = v5;
  uint64_t v6 = a2[8];
  a2[8] = 0;
  *(void *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  WTF::URL::URL(a1 + 80, a2 + 10);
  uint64_t v7 = a2[15];
  uint64_t v8 = a2[16];
  a2[15] = 0;
  *(void *)(a1 + 120) = v7;
  *(void *)(a1 + 128) = v8;
  uint64_t v9 = a2[17];
  a2[17] = 0;
  *(void *)(a1 + 136) = v9;
  uint64_t v10 = a2[18];
  a2[18] = 0;
  *(void *)(a1 + 144) = v10;
  uint64_t v11 = a2[19];
  a2[19] = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 152) = v11;
  uint64_t v12 = a2[20];
  a2[20] = 0;
  *(void *)(a1 + 160) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = 0;
  *(_DWORD *)(a1 + 168) = v12;
  LODWORD(v12) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = 0;
  *(_DWORD *)(a1 + 172) = v12;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  uint64_t v13 = a2[22];
  a2[22] = 0;
  *(void *)(a1 + 176) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = 0;
  *(_DWORD *)(a1 + 184) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = 0;
  *(_DWORD *)(a1 + 188) = v13;
  uint64_t v14 = a2[24];
  a2[24] = 0;
  *(void *)(a1 + 192) = v14;
  *(unsigned char *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  if (*((unsigned char *)a2 + 208))
  {
    uint64_t v23 = a2[25];
    a2[25] = 0;
    *(void *)(a1 + 200) = v23;
    *(unsigned char *)(a1 + 208) = 1;
  }
  long long v15 = *(_OWORD *)(a2 + 27);
  long long v16 = *(_OWORD *)(a2 + 29);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
  *(_OWORD *)(a1 + 232) = v16;
  *(_OWORD *)(a1 + 2++*(_DWORD *)(this + 16) = v15;
  long long v17 = *(_OWORD *)(a2 + 33);
  long long v18 = *(_OWORD *)(a2 + 35);
  long long v19 = *(_OWORD *)(a2 + 37);
  *(_DWORD *)(a1 + 311) = *(_DWORD *)((char *)a2 + 311);
  *(_OWORD *)(a1 + 280) = v18;
  *(_OWORD *)(a1 + 296) = v19;
  *(_OWORD *)(a1 + 264) = v17;
  uint64_t v20 = a2[40];
  a2[40] = 0;
  *(void *)(a1 + 320) = v20;
  *(unsigned char *)(a1 + 328) = *((unsigned char *)a2 + 328);
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  uint64_t v21 = a2[42];
  a2[42] = 0;
  *(void *)(a1 + 336) = v21;
  LODWORD(v21) = *((_DWORD *)a2 + 86);
  *((_DWORD *)a2 + 86) = 0;
  *(_DWORD *)(a1 + 344) = v21;
  LODWORD(v21) = *((_DWORD *)a2 + 87);
  *((_DWORD *)a2 + 87) = 0;
  *(_DWORD *)(a1 + 348) = v21;
  return a1;
}

uint64_t IPC::ConnectionSendSyncResult<Messages::NetworkConnectionToWebProcess::PerformSynchronousLoad>::ConnectionSendSyncResult(uint64_t a1, IPC::Decoder **a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v8 = v4;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl((uint64_t)v9, a3);
  uint64_t v5 = v8;
  uint64_t v8 = 0;
  *(void *)a1 = v5;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::__tuple_impl(a1 + 8, v9);
  *(_DWORD *)(a1 + 360) = 0;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,WebCore::ResourceError,WebCore::ResourceResponse,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~__tuple_impl((uint64_t)v9, v6);
  std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](&v8);
  return a1;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 16 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v5;
    while (1)
    {
      uint64_t v13 = (uint64_t *)(v4 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          uint64_t v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = v26[1];
          v26[1] = 0;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
          *uint64_t v26 = *v13;
          uint64_t v28 = v4 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v16 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (!v16) {
            goto LABEL_21;
          }
LABEL_20:
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          goto LABEL_21;
        }
        uint64_t v15 = v4 + 16 * v11;
        uint64_t v16 = *(void *)(v15 + 8);
        *(void *)(v15 + 8) = 0;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if (++v11 == v12) {
        goto LABEL_24;
      }
    }
  }
  if (v4)
  {
LABEL_24:
    WTF::fastFree((WTF *)(v4 - 16), v8);
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(WebCore::ResourceError const&)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(WebCore::ResourceError const&)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(WebCore::ResourceError const&)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Function<void ()(WebCore::ResourceError const&)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 16 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v5;
    while (1)
    {
      uint64_t v13 = (uint64_t *)(v4 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          uint64_t v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = v26[1];
          v26[1] = 0;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
          *uint64_t v26 = *v13;
          uint64_t v28 = v4 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v16 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (!v16) {
            goto LABEL_21;
          }
LABEL_20:
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          goto LABEL_21;
        }
        uint64_t v15 = v4 + 16 * v11;
        uint64_t v16 = *(void *)(v15 + 8);
        *(void *)(v15 + 8) = 0;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if (++v11 == v12) {
        goto LABEL_24;
      }
    }
  }
  if (v4)
  {
LABEL_24:
    WTF::fastFree((WTF *)(v4 - 16), v8);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::IsResourceLoadFinished,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F1D20;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::IsResourceLoadFinished,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F1D20;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::IsResourceLoadFinished,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<WebCore::NetworkTransactionInformation>(unsigned char *a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::NetworkTransactionInformation,void>::decode(a2, a1);
  if (!a1[592])
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = (WebCore::ResourceRequestBase *)*((void *)a2 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WebCore::ResourceRequestBase *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::NetworkTransactionInformation,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 592))
  {
    uint64_t v3 = *(WebCore::AdditionalNetworkLoadMetricsForWebInspector **)(a1 + 584);
    *(void *)(a1 + 584) = 0;
    if (v3) {
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3);
    }
    unsigned __int16 v4 = *(WTF::StringImpl **)(a1 + 552);
    *(void *)(a1 + 552) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(const void **)(a1 + 448);
    *(void *)(a1 + 448) = 0;
    if (v5) {
      CFRelease(v5);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 208), a2);
    uint64_t v6 = *(const void **)(a1 + 200);
    *(void *)(a1 + 200) = 0;
    if (v6) {
      CFRelease(v6);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 8));
  }
  return a1;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::LoadSchedulingMode>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0> const&,WebCore::LoadSchedulingMode>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, *(uint64_t **)a2);
  char v5 = *(unsigned char *)(a2 + 8);
  return IPC::Encoder::operator<<<BOOL>(a1, &v5);
}

void *WTF::Vector<WebCore::SubresourceLoader *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebLoaderStrategy::prioritizeResourceLoads(WTF::Vector<WebCore::SubresourceLoader *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0>(void *result, uint64_t a2)
{
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      unsigned __int16 v4 = result;
      uint64_t result = (void *)WTF::fastMalloc((WTF *)(8 * v2));
      *((_DWORD *)v4 + 2) = v2;
      void *v4 = result;
      if (*(_DWORD *)(a2 + 12))
      {
        unint64_t v5 = 0;
        do
        {
          result[v5] = *(void *)(*(void *)(*(void *)a2 + 8 * v5) + 744);
          ++v5;
        }
        while (v5 < *(unsigned int *)(a2 + 12));
        *((_DWORD *)v4 + 3) = v5;
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 - 8);
  unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
  uint64_t v7 = (uint64_t *)(a1 + 40 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v9 = 1;
    while (v8)
    {
      unsigned int v6 = (v6 + v9) & v2;
      uint64_t v7 = (uint64_t *)(a1 + 40 * v6);
      uint64_t v8 = *v7;
      ++v9;
      if (*v7 == a2) {
        return v7;
      }
    }
    return 0;
  }
  return v7;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v4 - 4);
    uint64_t v8 = *a1;
    int v9 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    uint64_t v8 = 0;
    unsigned int v7 = 0;
    int v9 = 0;
  }
  uint64_t v10 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  uint64_t v12 = v10;
  uint64_t v13 = v10 + 16;
  if (a2) {
    bzero((void *)(v10 + 16), 40 * a2);
  }
  *a1 = v13;
  *(_DWORD *)(v12 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v9;
  uint64_t v14 = v8;
  if (v7)
  {
    uint64_t v15 = a1;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    __n128 v18 = 0uLL;
    unint64_t v11 = v7;
    unint64_t v19 = a3;
    while (1)
    {
      unint64_t v20 = (uint64_t *)(v14 + 40 * v16);
      uint64_t v21 = *v20;
      if (*v20 != -1)
      {
        if (v21)
        {
          uint64_t v33 = *v15;
          if (*v15) {
            int v34 = *(_DWORD *)(v33 - 8);
          }
          else {
            int v34 = 0;
          }
          unint64_t v35 = (v21 + ~(v21 << 32)) ^ ((unint64_t)(v21 + ~(v21 << 32)) >> 22);
          unint64_t v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
          unint64_t v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
          unsigned int v38 = v34 & ((v37 >> 31) ^ v37);
          int v39 = 1;
          do
          {
            unsigned int v40 = v38;
            __int16 v41 = (uint64_t *)(v33 + 40 * v38);
            unsigned int v38 = (v38 + v39++) & v34;
          }
          while (*v41);
          uint64_t v42 = v33 + 40 * v40;
          unint64_t v45 = *(void *)(v42 + 8);
          uint64_t v44 = (void *)(v42 + 8);
          unint64_t v43 = v45;
          __int16 v47 = v44 + 1;
          unint64_t v46 = v44[1];
          uint64_t v49 = (WTF **)(v44 + 2);
          int v48 = (WTF *)v44[2];
          BOOL v50 = v45 == v46;
          if (v45 > v46)
          {
            unsigned int v98 = v40;
            long long v100 = v17;
            unint64_t v104 = v11;
            BOOL v107 = v15;
            uint64_t v102 = v19;
            uint64_t v96 = v14;
            int v75 = (WTF *)v44[2];
            if (v46)
            {
              uint64_t v85 = 8 * v46;
              do
              {
                uint64_t v86 = *(void *)v75;
                *(void *)int v75 = 0;
                if (v86) {
                  (*(void (**)(uint64_t, __n128))(*(void *)v86 + 8))(v86, v18);
                }
                int v75 = (WTF *)((char *)v75 + 8);
                v85 -= 8;
              }
              while (v85);
              int v75 = *v49;
              unint64_t v43 = *v44;
            }
            uint64_t v76 = *(unsigned int *)(v33 + 40 * v98 + 32);
            if (v43 != v76)
            {
              uint64_t v87 = (uint64_t *)((char *)v75 + 8 * v43);
              uint64_t v88 = 8 * v76 - 8 * v43;
              do
              {
                uint64_t v89 = *v87;
                *uint64_t v87 = 0;
                if (v89) {
                  (*(void (**)(uint64_t, __n128))(*(void *)v89 + 8))(v89, v18);
                }
                ++v87;
                v88 -= 8;
              }
              while (v88);
            }
LABEL_49:
            int v48 = *v49;
            uint64_t v14 = v96;
            unsigned int v40 = v98;
            uint64_t v17 = v100;
            unint64_t v19 = v102;
            unint64_t v11 = v104;
            uint64_t v15 = v107;
            __n128 v18 = 0uLL;
            if (!*v49) {
              goto LABEL_24;
            }
          }
          else
          {
            if (!v50)
            {
              unsigned int v98 = v40;
              long long v100 = v17;
              unint64_t v104 = v11;
              BOOL v107 = v15;
              uint64_t v102 = v19;
              uint64_t v96 = v14;
              uint64_t v66 = (uint64_t *)((char *)v48 + 8 * v43);
              uint64_t v67 = 8 * v46 - 8 * v43;
              do
              {
                uint64_t v68 = *v66;
                *uint64_t v66 = 0;
                if (v68) {
                  (*(void (**)(uint64_t, __n128))(*(void *)v68 + 8))(v68, v18);
                }
                ++v66;
                v67 -= 8;
              }
              while (v67);
              goto LABEL_49;
            }
            if (!v48)
            {
LABEL_24:
              uint64_t *v41 = *v20;
              uint64_t v51 = v14 + 40 * v16;
              *(__n128 *)uint64_t v44 = v18;
              *((__n128 *)v44 + 1) = v18;
              uint64_t v53 = *(WTF **)(v51 + 24);
              uint64_t v52 = (uint64_t *)(v51 + 24);
              void *v44 = *(v52 - 2);
              *(v52 - 2) = 0;
              unint64_t v54 = *v47;
              unint64_t *v47 = *(v52 - 1);
              *(v52 - 1) = v54;
              const WebCore::LocalFrame *v49 = v53;
              uint64_t *v52 = 0;
              uint64_t v55 = v33 + 40 * v40;
              uint64_t v56 = v52 + 1;
              *(_DWORD *)(v55 + 32) = *((_DWORD *)v52 + 2);
              *((_DWORD *)v52 + 2) = 0;
              unint64_t v57 = *(v52 - 2);
              if (v57 > v54)
              {
                char v105 = (void *)v11;
                __int16 v108 = v15;
                char v101 = v17;
                char v103 = v19;
                uint64_t v69 = v14;
                if (v54)
                {
                  uint64_t v90 = 0;
                  uint64_t v91 = 8 * v54;
                  do
                  {
                    uint64_t v92 = *v90;
                    *uint64_t v90 = 0;
                    if (v92) {
                      (*(void (**)(uint64_t))(*(void *)v92 + 8))(v92);
                    }
                    ++v90;
                    v91 -= 8;
                  }
                  while (v91);
                  uint64_t v79 = *v52;
                  unint64_t v57 = *(v52 - 2);
                  unint64_t v54 = *v56;
                }
                else
                {
                  uint64_t v79 = 0;
                }
                if (v57 != v54)
                {
                  uint64_t v93 = (uint64_t *)(v79 + 8 * v57);
                  uint64_t v94 = 8 * v54 - 8 * v57;
                  do
                  {
                    uint64_t v95 = *v93;
                    *uint64_t v93 = 0;
                    if (v95) {
                      (*(void (**)(uint64_t))(*(void *)v95 + 8))(v95);
                    }
                    ++v93;
                    v94 -= 8;
                  }
                  while (v94);
                }
LABEL_54:
                uint64_t v80 = (WTF *)*v52;
                uint64_t v14 = v69;
                uint64_t v17 = v101;
                unint64_t v19 = v103;
                unint64_t v11 = (unint64_t)v105;
                uint64_t v15 = v108;
                __n128 v18 = 0uLL;
                if (*v52)
                {
                  uint64_t *v52 = 0;
                  *uint64_t v56 = 0;
                  WTF::fastFree(v80, v105);
                  unint64_t v11 = (unint64_t)v105;
                  __n128 v18 = 0uLL;
                  uint64_t v17 = v101;
                  uint64_t v15 = v108;
                  unint64_t v19 = v103;
                  uint64_t v14 = v69;
                }
              }
              else if (v57 != v54)
              {
                char v105 = (void *)v11;
                __int16 v108 = v15;
                char v101 = v17;
                char v103 = v19;
                uint64_t v69 = v14;
                uint64_t v70 = (uint64_t *)(8 * v57);
                uint64_t v71 = 8 * v54 - 8 * v57;
                do
                {
                  uint64_t v72 = *v70;
                  *uint64_t v70 = 0;
                  if (v72) {
                    (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
                  }
                  ++v70;
                  v71 -= 8;
                }
                while (v71);
                goto LABEL_54;
              }
              if (v20 == v19) {
                uint64_t v17 = v41;
              }
              goto LABEL_29;
            }
          }
          const WebCore::LocalFrame *v49 = 0;
          *(_DWORD *)(v33 + 40 * v40 + 32) = 0;
          uint64_t v97 = v14;
          unsigned int v99 = v40;
          uint64_t v77 = v19;
          unint64_t v106 = v11;
          BOOL v109 = v15;
          uint64_t v78 = v17;
          WTF::fastFree(v48, (void *)v11);
          uint64_t v14 = v97;
          unsigned int v40 = v99;
          unint64_t v11 = v106;
          uint64_t v15 = v109;
          __n128 v18 = 0uLL;
          uint64_t v17 = v78;
          unint64_t v19 = v77;
          goto LABEL_24;
        }
        uint64_t v22 = v14 + 40 * v16;
        unint64_t v23 = *(void *)(v22 + 8);
        unint64_t v24 = *(void *)(v22 + 16);
        uint64_t v25 = (void *)(v22 + 8);
        uint64_t v27 = (WTF **)(v25 + 2);
        uint64_t v26 = (WTF *)v25[2];
        if (v23 > v24)
        {
          unint64_t v58 = v11;
          uint64_t v59 = v17;
          uint64_t v60 = v15;
          uint64_t v61 = v19;
          uint64_t v62 = v14;
          int v73 = (WTF *)v25[2];
          if (v24)
          {
            uint64_t v110 = 8 * v24;
            do
            {
              uint64_t v81 = *(void *)v73;
              *(void *)int v73 = 0;
              if (v81) {
                (*(void (**)(uint64_t, __n128))(*(void *)v81 + 8))(v81, v18);
              }
              int v73 = (WTF *)((char *)v73 + 8);
              v110 -= 8;
            }
            while (v110);
            int v73 = *v27;
            unint64_t v23 = *v25;
          }
          uint64_t v74 = *(unsigned int *)(v62 + 40 * v16 + 32);
          if (v23 != v74)
          {
            int v82 = (uint64_t *)((char *)v73 + 8 * v23);
            uint64_t v83 = 8 * v74 - 8 * v23;
            do
            {
              uint64_t v84 = *v82;
              uint64_t *v82 = 0;
              if (v84) {
                (*(void (**)(uint64_t, __n128))(*(void *)v84 + 8))(v84, v18);
              }
              ++v82;
              v83 -= 8;
            }
            while (v83);
          }
LABEL_45:
          uint64_t v26 = *v27;
          uint64_t v14 = v62;
          unint64_t v19 = v61;
          uint64_t v15 = v60;
          uint64_t v17 = v59;
          __n128 v18 = 0uLL;
          unint64_t v11 = v58;
          if (!*v27) {
            goto LABEL_29;
          }
LABEL_14:
          *uint64_t v27 = 0;
          *(_DWORD *)(v14 + 40 * v16 + 32) = 0;
          uint64_t v28 = v14;
          uint64_t v29 = v19;
          uint64_t v30 = v15;
          char v31 = v17;
          unint64_t v32 = v11;
          WTF::fastFree(v26, (void *)v11);
          unint64_t v11 = v32;
          __n128 v18 = 0uLL;
          uint64_t v17 = v31;
          uint64_t v15 = v30;
          unint64_t v19 = v29;
          uint64_t v14 = v28;
          goto LABEL_29;
        }
        if (v23 != v24)
        {
          unint64_t v58 = v11;
          uint64_t v59 = v17;
          uint64_t v60 = v15;
          uint64_t v61 = v19;
          uint64_t v62 = v14;
          int v63 = (uint64_t *)((char *)v26 + 8 * v23);
          uint64_t v64 = 8 * v24 - 8 * v23;
          do
          {
            uint64_t v65 = *v63;
            uint64_t *v63 = 0;
            if (v65) {
              (*(void (**)(uint64_t, __n128))(*(void *)v65 + 8))(v65, v18);
            }
            ++v63;
            v64 -= 8;
          }
          while (v64);
          goto LABEL_45;
        }
        if (v26) {
          goto LABEL_14;
        }
      }
LABEL_29:
      if (++v16 == v11) {
        goto LABEL_90;
      }
    }
  }
  if (v8)
  {
LABEL_90:
    WTF::fastFree((WTF *)(v14 - 16), (void *)v11);
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, unsigned int *a2)
{
  *(void *)a2 = -1;
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  uint64_t v4 = (WTF *)*((void *)a2 + 3);
  if (v2 > v3)
  {
    uint64_t v21 = (uint64_t *)*((void *)a2 + 3);
    uint64_t v22 = a1;
    unint64_t v23 = a2;
    if (v3)
    {
      uint64_t v16 = 8 * v3;
      do
      {
        uint64_t v17 = *v21;
        *uint64_t v21 = 0;
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
        ++v21;
        v16 -= 8;
      }
      while (v16);
      uint64_t v21 = (uint64_t *)*((void *)v23 + 3);
      unint64_t v2 = *((void *)v23 + 1);
    }
    uint64_t v14 = v23[8];
    if (v2 != v14)
    {
      __n128 v18 = &v21[v2];
      uint64_t v19 = 8 * v14 - 8 * v2;
      do
      {
        uint64_t v20 = *v18;
        uint64_t *v18 = 0;
        if (v20) {
          (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
        }
        ++v18;
        v19 -= 8;
      }
      while (v19);
    }
LABEL_23:
    a1 = v22;
    a2 = v23;
    uint64_t v4 = (WTF *)*((void *)v23 + 3);
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
  if (v2 != v3)
  {
    uint64_t v22 = a1;
    unint64_t v23 = a2;
    unint64_t v11 = (uint64_t *)((char *)v4 + 8 * v2);
    uint64_t v12 = 8 * v3 - 8 * v2;
    do
    {
      uint64_t v13 = *v11;
      uint64_t *v11 = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
    goto LABEL_23;
  }
  if (!v4) {
    goto LABEL_5;
  }
LABEL_24:
  *((void *)a2 + 3) = 0;
  a2[8] = 0;
  uint64_t v15 = a1;
  WTF::fastFree(v4, a2);
  a1 = v15;
LABEL_5:
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v5 = *a1;
  if (*a1) {
    int v6 = *(_DWORD *)(v5 - 12) - 1;
  }
  else {
    int v6 = -1;
  }
  *(_DWORD *)(v5 - 12) = v6;
  uint64_t v7 = *a1;
  if (*a1)
  {
    unsigned int v8 = 6 * *(_DWORD *)(v7 - 12);
    unsigned int v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
    {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v9 >> 1, 0);
    }
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 - 8);
  unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  unsigned int v6 = v2 & ((v5 >> 31) ^ v5);
  uint64_t v7 = (uint64_t *)(a1 + 40 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v9 = 1;
    while (v8)
    {
      unsigned int v6 = (v6 + v9) & v2;
      uint64_t v7 = (uint64_t *)(a1 + 40 * v6);
      uint64_t v8 = *v7;
      ++v9;
      if (*v7 == a2) {
        return v7;
      }
    }
    return (uint64_t *)(a1 + 40 * *(unsigned int *)(a1 - 4));
  }
  return v7;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::willSendRequest(WebCore::ResourceRequest &&,IPC::FormDataReference &&,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &,BOOL)> &&)::$_0,void,WebCore::ResourceRequest &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F1D48;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::willSendRequest(WebCore::ResourceRequest &&,IPC::FormDataReference &&,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &,BOOL)> &&)::$_0,void,WebCore::ResourceRequest &>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F1D48;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::willSendRequest(WebCore::ResourceRequest &&,IPC::FormDataReference &&,WebCore::ResourceResponse &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &,BOOL)> &&)::$_0,void,WebCore::ResourceRequest &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(WebCore::ResourceLoader **)(v3 + 16);
  if (v4 && *((void *)v4 + 93))
  {
    unsigned int v6 = off_1EB358988;
    BOOL v7 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      uint64_t v8 = *(void *)(v3 + 32);
      uint64_t v9 = *(void *)(v3 + 40);
      uint64_t v10 = *(void *)(v3 + 56);
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
      double v12 = v11 - *(double *)(v3 + 80);
      int v24 = 134219008;
      uint64_t v25 = v3;
      __int16 v26 = 2048;
      uint64_t v27 = v8;
      __int16 v28 = 2048;
      uint64_t v29 = v9;
      __int16 v30 = 2048;
      uint64_t v31 = v10;
      __int16 v32 = 2048;
      double v33 = v12;
      _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::willSendRequest: returning ContinueWillSendRequest", (uint8_t *)&v24, 0x34u);
      unint64_t v4 = *(WebCore::ResourceLoader **)(v3 + 16);
    }
    uint64_t isAllowedToAskUserForCredentials = WebCore::ResourceLoader::isAllowedToAskUserForCredentials(v4);
    uint64_t v14 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 16))(v14, a2, isAllowedToAskUserForCredentials);
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  else
  {
    uint64_t v15 = off_1EB358988;
    BOOL v16 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
    if (v16)
    {
      uint64_t v17 = *(void *)(v3 + 32);
      uint64_t v18 = *(void *)(v3 + 40);
      uint64_t v19 = *(void *)(v3 + 56);
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v16);
      double v21 = v20 - *(double *)(v3 + 80);
      int v24 = 134219008;
      uint64_t v25 = v3;
      __int16 v26 = 2048;
      uint64_t v27 = v17;
      __int16 v28 = 2048;
      uint64_t v29 = v18;
      __int16 v30 = 2048;
      uint64_t v31 = v19;
      __int16 v32 = 2048;
      double v33 = v21;
      _os_log_impl(&dword_1985F2000, v15, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::willSendRequest: exiting early because no coreloader or identifier", (uint8_t *)&v24, 0x34u);
    }
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)&v24);
    uint64_t v22 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, int *, void))(*(void *)v22 + 16))(v22, &v24, 0);
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    CFTypeRef v23 = cf;
    CFTypeRef cf = 0;
    if (v23) {
      CFRelease(v23);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v24);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F1D70;
  uint64_t v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F1D70;
  uint64_t v3 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }

  return WTF::fastFree(this, a2);
}

double WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(double **)(a1 + 8);
  uint64_t v2 = *((void *)v1 + 2);
  if (v2 && *(void *)(v2 + 744))
  {
    uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 56))(*(void *)(a1 + 8));
    unint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v4 = 528;
    *((void *)v4 + 1) = v3;
    *((void *)v4 + 66) = (char *)v4 + 16;
    *((void *)v4 + 67) = 512;
    *((void *)v4 + 68) = 0;
    *((void *)v4 + 70) = 0;
    *((void *)v4 + 69) = 0;
    IPC::Encoder::encodeHeader(v4);
    *(void *)uint64_t v17 = v4;
    (*(void (**)(double *, unsigned char *, void))(*(void *)v1 + 32))(v1, v17, 0);
    BOOL v7 = *(IPC::Encoder **)v17;
    *(void *)uint64_t v17 = 0;
    if (v7)
    {
      IPC::Encoder::~Encoder(v7, v5);
      WTF::fastFree(v8, v9);
    }
  }
  else
  {
    uint64_t v10 = off_1EB358988;
    BOOL v11 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      uint64_t v12 = *((void *)v1 + 4);
      uint64_t v13 = *((void *)v1 + 5);
      uint64_t v14 = *((void *)v1 + 7);
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
      double v16 = v15 - v1[10];
      *(_DWORD *)uint64_t v17 = 134219008;
      *(void *)&_DWORD v17[4] = v1;
      __int16 v18 = 2048;
      uint64_t v19 = v12;
      __int16 v20 = 2048;
      uint64_t v21 = v13;
      __int16 v22 = 2048;
      uint64_t v23 = v14;
      __int16 v24 = 2048;
      double v25 = v16;
      _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::didReceiveResponse: not continuing load because no coreLoader or no ID", v17, 0x34u);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_1,void,WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::ResourceResponse const&>,WTF::DefaultRefDerefTraits<WebCore::ResourceResponse const&>>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F1D98;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_1,void,WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::ResourceResponse const&>,WTF::DefaultRefDerefTraits<WebCore::ResourceResponse const&>>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F1D98;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_1,void,WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::ResourceResponse const&>,WTF::DefaultRefDerefTraits<WebCore::ResourceResponse const&>>>::call(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  unsigned int v6 = *(void **)(v5 + 16);
  if (v6 && v6[93])
  {
    long long v19 = *(_OWORD *)(a1 + 16);
    *(void *)(a1 + ++*(_DWORD *)(this + 16) = 0;
    uint64_t v8 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    uint64_t v9 = WTF::fastMalloc((WTF *)0x30);
    *(void *)uint64_t v9 = &unk_1EE9F1DC0;
    *(void *)(v9 + 8) = v5;
    *(_OWORD *)(v9 + ++*(_DWORD *)(this + 16) = v19;
    *(void *)(v9 + 32) = v8;
    *(void *)(v9 + 40) = v4;
    *(void *)long long buf = v9;
    (*(void (**)(void *, uint64_t, unsigned char *))(*v6 + 208))(v6, a2, buf);
    uint64_t v10 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  else
  {
    BOOL v11 = off_1EB358988;
    BOOL v12 = os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      uint64_t v13 = *(void *)(v5 + 32);
      uint64_t v14 = *(void *)(v5 + 40);
      uint64_t v15 = *(void *)(v5 + 56);
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v12);
      double v17 = v16 - *(double *)(v5 + 80);
      *(_DWORD *)long long buf = 134219008;
      *(void *)&uint8_t buf[4] = v5;
      __int16 v21 = 2048;
      uint64_t v22 = v13;
      __int16 v23 = 2048;
      uint64_t v24 = v14;
      __int16 v25 = 2048;
      uint64_t v26 = v15;
      __int16 v27 = 2048;
      double v28 = v17;
      _os_log_impl(&dword_1985F2000, v11, OS_LOG_TYPE_DEFAULT, "%p - [webPageID=%llu, frameID=%llu, resourceID=%llu, durationSeconds=%.3f] WebResourceLoader::didReceiveResponse: not continuing intercept load because no coreLoader or no ID", buf, 0x34u);
    }
    WebKit::WebResourceInterceptController::continueResponse((uint64_t *)(v5 + 64), *(void *)(a1 + 24));
    if (v4) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, v18);
    }
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_1::operator()(WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::ResourceResponse const&>,WTF::DefaultRefDerefTraits<WebCore::ResourceResponse const&>>)::{lambda(void)#1},void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F1DC0;
  uint64_t v3 = (unsigned int *)a1[5];
  a1[5] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  uint64_t v4 = a1[4];
  a1[4] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_1::operator()(WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::ResourceResponse const&>,WTF::DefaultRefDerefTraits<WebCore::ResourceResponse const&>>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F1DC0;
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::PrivateRelayed,BOOL,std::optional<WebCore::NetworkLoadMetrics> &&)::$_1::operator()(WebCore::ResourceResponse const&,WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::ResourceResponse const&>,WTF::DefaultRefDerefTraits<WebCore::ResourceResponse const&>>)::{lambda(void)#1},void>::call(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[4];
  if (v3)
  {
    a1[4] = 0;
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4 && *(void *)(v4 + 744))
  {
    ++*(_DWORD *)(v4 + 16);
    uint64_t v5 = (unsigned int *)a1[5];
    unsigned int v6 = (uint64_t *)(v2 + 64);
    uint64_t v7 = a1[3];
    if (!v5)
    {
      WebKit::WebResourceInterceptController::continueResponse(v6, v7);
LABEL_25:
      if (*(_DWORD *)(v4 + 16) == 1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      else {
        --*(_DWORD *)(v4 + 16);
      }
      return;
    }
    uint64_t v8 = *v6;
    uint64_t v9 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*v6, v7);
    if (v8)
    {
      uint64_t v10 = (uint64_t *)(v8 + 40 * *(unsigned int *)(v8 - 4));
      if (v10 == v9) {
        goto LABEL_17;
      }
    }
    else
    {
      if (!v9)
      {
LABEL_17:
        if (v5[12])
        {
          a1[5] = 0;
          (*(void (**)(uint64_t, unsigned int *))(*(void *)v4 + 224))(v4, v5);
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v5, v12);
        }
        WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v16);
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v4 + 232))(v4, v16);
        uint64_t v14 = v18;
        __int16 v18 = 0;
        if (v14) {
          WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v14);
        }
        uint64_t v15 = v17;
        double v17 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2) {
            WTF::StringImpl::destroy(v15, v13);
          }
          else {
            *(_DWORD *)v15 -= 2;
          }
        }
        goto LABEL_25;
      }
      uint64_t v10 = 0;
    }
    if (v10 != v9)
    {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Deque<WTF::Function<void ()(void)>,0ul>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Deque<WTF::Function<void ()(void)>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v6, (unsigned int *)v9);
      uint64_t v5 = (unsigned int *)a1[5];
    }
    goto LABEL_17;
  }
  uint64_t v11 = a1[3];

  WebKit::WebResourceInterceptController::continueResponse((uint64_t *)(v2 + 64), v11);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveData(IPC::SharedBufferReference &&,unsigned long long)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F1DE8;
  uint64_t v3 = (unsigned int *)a1[5];
  a1[5] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  }
  uint64_t v4 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  uint64_t v5 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveData(IPC::SharedBufferReference &&,unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F1DE8;
  uint64_t v3 = (unsigned int *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  uint64_t v5 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didReceiveData(IPC::SharedBufferReference &&,unsigned long long)::$_0,void>::call(void *a1)
{
  double result = (unsigned int *)a1[1];
  if (*((void *)result + 2)) {
    return WebKit::WebResourceLoader::didReceiveData((uint64_t)result, (IPC::SharedBufferReference *)(a1 + 3), a1[6]);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didFinishResourceLoad(WebCore::NetworkLoadMetrics &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F1E10;
  uint64_t v3 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)a1[18];
  a1[18] = 0;
  if (v3) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)a1[14];
  a1[14] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didFinishResourceLoad(WebCore::NetworkLoadMetrics &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F1E10;
  uint64_t v3 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v3) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didFinishResourceLoad(WebCore::NetworkLoadMetrics &&)::$_0,void>::call(uint64_t a1)
{
  double result = *(void **)(a1 + 8);
  if (result[2]) {
    return WebKit::WebResourceLoader::didFinishResourceLoad((uint64_t)result, a1 + 24);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didFailResourceLoad(WebCore::ResourceError const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F1E38;
  WebKit::WebResourceLoader::didFailResourceLoad(WebCore::ResourceError const&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didFailResourceLoad(WebCore::ResourceError const&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9F1E38;
  WebKit::WebResourceLoader::didFailResourceLoad(WebCore::ResourceError const&)::$_0::~$_0((void *)a1 + 1, a2);

  return WTF::fastFree(a1, v3);
}

WebKit::WebResourceLoader *WTF::Detail::CallableWrapper<WebKit::WebResourceLoader::didFailResourceLoad(WebCore::ResourceError const&)::$_0,void>::call(uint64_t a1)
{
  double result = *(WebKit::WebResourceLoader **)(a1 + 8);
  if (*((void *)result + 2)) {
    return (WebKit::WebResourceLoader *)WebKit::WebResourceLoader::didFailResourceLoad(result, (const WebCore::ResourceError *)(a1 + 24));
  }
  return result;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketChannel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::WebSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v13 = 0;
  if (v7)
  {
    uint64_t v14 = (void *)v6;
    uint64_t v7 = v7;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          double v16 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookupForReinsert(a1, v14);
          double v17 = (unsigned int *)v16[1];
          v16[1] = 0;
          if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v17);
            WTF::fastFree((WTF *)v17, v10);
          }
          *double v16 = *v14;
          uint64_t v18 = v14[1];
          v14[1] = 0;
          v16[1] = v18;
          long long v19 = (unsigned int *)v14[1];
          v14[1] = 0;
          if (v19 && atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v19);
            WTF::fastFree((WTF *)v19, v10);
          }
          if (v14 == a3) {
            uint64_t v13 = v16;
          }
        }
        else
        {
          uint64_t v15 = (unsigned int *)v14[1];
          v14[1] = 0;
          if (v15)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v15);
              WTF::fastFree((WTF *)v15, v10);
            }
          }
        }
      }
      v14 += 2;
      --v7;
    }
    while (v7);
  }
  else
  {
    double result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v13;
}

uint64_t WebKit::WebSocketProvider::createWebSocketChannel@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = WTF::fastMalloc((WTF *)0x2B0);
  uint64_t result = WebKit::WebSocketChannel::WebSocketChannel(v8, v7, a2, a3);
  *a4 = result + 24;
  return result;
}

IPC::Encoder *WebKit::WebSocketProvider::initializeWebTransportSession(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 64))(a2))
  {
    v19[0] = 0;
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 16))(v6, v19);
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    uint64_t result = (IPC::Encoder *)v19[0];
    v19[0] = 0;
    if (result) {
      return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(void *)result + 24))(result);
    }
  }
  else
  {
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v8 = &unk_1EE9F2338;
    uint64_t v9 = *a4;
    *a4 = 0;
    v8[1] = v9;
    {
      uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v18);
    }
    uint64_t v10 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                               + 24);
    uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v11 = &unk_1EE9F23B0;
    v11[1] = v8;
    uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v13 = 243;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 68) = 0;
    *((void *)v13 + 70) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    __int16 v20 = v13;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a3);
    v19[0] = (uint64_t)v11;
    v19[1] = v12;
    IPC::Connection::sendMessageWithAsyncReply(v10, &v20, v19, 0, 0);
    uint64_t v15 = v19[0];
    v19[0] = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t result = v20;
    __int16 v20 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v14);
      return (IPC::Encoder *)WTF::fastFree(v16, v17);
    }
  }
  return result;
}

uint64_t WebKit::WebTransportReceiveStreamSource::doCancel(uint64_t this)
{
  *(unsigned char *)(this + 36) = 1;
  return this;
}

void WebKit::WebTransportSendStreamSink::~WebTransportSendStreamSink(WebKit::WebTransportSendStreamSink *this, void *a2)
{
  *(void *)this = &unk_1EE9F1E60;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebTransportSendStreamSink::~WebTransportSendStreamSink(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebTransportSendStreamSink::write(uint64_t a1, WebCore::ScriptExecutionContext *this, uint64_t a3, uint64_t *a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(void *)(v5 + 8) && WebCore::ScriptExecutionContext::globalObject(this))
  {
    unsigned int v38 = *(void **)(WebCore::ScriptExecutionContext::globalObject(this) + 56);
    if ((a3 & 0xFFFE000000000002) != 0)
    {
LABEL_16:
      JSC::throwTypeError();
      int v45 = 1;
LABEL_17:
      if (v45)
      {
        LOBYTE(v40) = 37;
        __int16 v41 = 0;
        WebCore::DOMPromiseDeferredBase::reject<WebCore::Exception>(*a4, (uint64_t)&v40);
        uint64_t result = (uint64_t)v41;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2) {
            uint64_t result = WTF::StringImpl::destroy(v41, v28);
          }
          else {
            *(_DWORD *)v41 -= 2;
          }
        }
        goto LABEL_30;
      }
      LOBYTE(v40) = 0;
      LODWORD(v41) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v40, (uint64_t)&v43);
      if (v41 == 1)
      {
        __int16 v23 = v40;
        uint64_t v24 = JSC::ArrayBufferView::baseAddress(v40);
        unint64_t v25 = JSC::ArrayBufferView::byteLength(v23);
        uint64_t v26 = *a4;
        *a4 = 0;
        __int16 v27 = (void *)WTF::fastMalloc((WTF *)0x10);
        *__int16 v27 = &unk_1EE9F2388;
        v27[1] = v26;
        unsigned int v38 = v27;
        uint64_t v18 = a1;
        uint64_t v19 = v24;
        uint64_t v20 = v25;
        goto LABEL_26;
      }
      if (!v41)
      {
        uint64_t v13 = JSC::ArrayBuffer::span(v40);
        uint64_t v15 = v14;
        uint64_t v16 = *a4;
        *a4 = 0;
        double v17 = (void *)WTF::fastMalloc((WTF *)0x10);
        *double v17 = &unk_1EE9F2360;
        v17[1] = v16;
        unsigned int v38 = v17;
        uint64_t v18 = a1;
        uint64_t v19 = v13;
        uint64_t v20 = v15;
LABEL_26:
        WebKit::WebTransportSendStreamSink::sendBytes(v18, v19, v20, (uint64_t *)&v38);
        uint64_t result = (uint64_t)v38;
        if (v38) {
          uint64_t result = (*(uint64_t (**)(void *))(*v38 + 8))(v38);
        }
        if (v41 != -1) {
          uint64_t result = ((uint64_t (*)(void **, JSC::ArrayBuffer **))off_1EE9F22B8[v41])(&v38, &v40);
        }
LABEL_30:
        if (v45 != -1) {
          return ((uint64_t (*)(JSC::ArrayBuffer **, WTF::StringImpl **))off_1EE9F22D8[v45])(&v40, &v43);
        }
        return result;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_64:
      uint64_t result = 90;
      __break(0xC471u);
      return result;
    }
    int v9 = *(unsigned __int8 *)(a3 + 5);
    if (v9 == 38)
    {
      uint64_t v10 = *(void *)(a3 + 16);
      if (v10)
      {
        uint64_t v11 = *(void *)(v10 + 32)
            ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
            : 0;
        if (!v11 && !*(unsigned char *)(v10 + 64))
        {
          *(_DWORD *)v10 += 2;
          unsigned int v40 = (JSC::ArrayBuffer *)v10;
          LODWORD(v41) = 0;
          LOBYTE(v43) = 0;
          int v44 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v43, (uint64_t)&v40);
          int v45 = 0;
          if (v41 != -1) {
            ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBuffer **))off_1EE9F22B8[v41])(&v37, &v40);
          }
          goto LABEL_17;
        }
      }
      goto LABEL_12;
    }
    if ((v9 - 39) > 0xC) {
      goto LABEL_12;
    }
    int v29 = *(unsigned __int8 *)(a3 + 40);
    char v30 = v29 - 88;
    if ((v29 - 88) <= 0x35)
    {
      if (((1 << v30) & 0x3D) != 0)
      {
        uint64_t v31 = *(void *)(*(void *)(a3 + 8) - 8);
LABEL_44:
        if (*(void *)(v31 + 32)) {
          __int16 v32 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
        }
        else {
          __int16 v32 = 0;
        }
        if (!v32) {
          goto LABEL_48;
        }
LABEL_12:
        unsigned int v12 = *(unsigned __int8 *)(a3 + 5);
        if (v12 >= 0x17 && (v12 & 0xFE) != 0x1A && (*(unsigned char *)(a3 + 6) & 4) != 0) {
          (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
        }
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE)
                                                                                   + 0x4C)
                                                                 + 0x38))(&v42, a3);
        goto LABEL_16;
      }
      if (((1 << v30) & 0x3D000000000000) != 0)
      {
        uint64_t v31 = *(void *)(a3 + 48);
        goto LABEL_44;
      }
    }
LABEL_48:
    if ((v29 & 6) == 0)
    {
      JSC::JSArrayBufferView::possiblySharedImpl((uint64_t *)&v37, (JSC::JSArrayBufferView *)a3);
      double v33 = v37;
      if (v37)
      {
        if (!JSC::ArrayBufferView::isDetached(v37))
        {
          if (*(void *)(*((void *)v33 + 4) + 32)
             ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
             : 0)
          {
            goto LABEL_64;
          }
        }
        uint64_t v35 = v37;
        if (v37)
        {
          unint64_t v37 = 0;
          unsigned int v40 = v35;
          LODWORD(v41) = 1;
          LOBYTE(v43) = 0;
          int v44 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v43, (uint64_t)&v40);
          int v45 = 0;
          if (v41 != -1) {
            ((void (*)(char *, JSC::ArrayBuffer **))off_1EE9F22B8[v41])(&v39, &v40);
          }
          unint64_t v36 = v37;
          unint64_t v37 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 1) {
              JSC::ArrayBufferView::operator delete();
            }
            else {
              --*(_DWORD *)v36;
            }
          }
          goto LABEL_17;
        }
      }
    }
    goto LABEL_12;
  }
  LOBYTE(v42) = 8;
  unint64_t v43 = 0;
  WebCore::DOMPromiseDeferredBase::reject<WebCore::Exception>(*a4, (uint64_t)&v42);
  uint64_t result = (uint64_t)v43;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2) {
      return WTF::StringImpl::destroy(v43, v21);
    }
    else {
      *(_DWORD *)v43 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::DOMPromiseDeferredBase::reject<WebCore::Exception>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = v2;
  WebCore::DeferredPromise::reject();
  uint64_t result = (uint64_t)v5;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      return WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebTransportSendStreamSink::sendBytes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    v24[1] = a3;
    uint64_t v25 = v7;
    v24[0] = a2;
    v22[0] = &v25;
    v22[1] = v24;
    char v23 = 0;
    uint64_t v9 = *(void *)(v6 + 16);
    uint64_t v8 = v6 + 16;
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
    uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v11 = 600;
    *((void *)v11 + 1) = v10;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 68) = 0;
    *((void *)v11 + 70) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    __int16 v27 = v11;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::span<unsigned char const,18446744073709551615ul> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::span<unsigned char const,18446744073709551615ul> const&,BOOL>,0ul,1ul,2ul>(v11, (uint64_t)v22);
    uint64_t v12 = *a4;
    *a4 = 0;
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v13 = &unk_1EE9F2450;
    v13[1] = v12;
    uint64_t v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v26[0] = v13;
    v26[1] = v14;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v8 + 40))(v8, &v27, v26, 0);
    uint64_t v16 = v26[0];
    v26[0] = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t result = v27;
    __int16 v27 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v15);
      return (IPC::Encoder *)WTF::fastFree(v20, v21);
    }
  }
  else
  {
    uint64_t v18 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
    uint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)v18 + 8);
    return (IPC::Encoder *)v19(v18);
  }
  return result;
}

void WebKit::WebTransportSession::~WebTransportSession(WebKit::WebTransportSession *this)
{
  *(void *)this = &unk_1EE9F1E98;
  *((void *)this + 3) = &unk_1EE9F1F00;
  *((void *)this + 5) = &unk_1EE9F1F38;
  {
    uint64_t v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v12);
  }
  WebKit::WebProcess::removeWebTransportSession(WebKit::WebProcess::singleton(void)::process, *((void *)this + 7));
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 237;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v14 = v3;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v3, (uint64_t *)this + 7);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v14, 0, 0);
  uint64_t v5 = v14;
  uint64_t v14 = 0;
  if (v5)
  {
    IPC::Encoder::~Encoder(v5, v4);
    WTF::fastFree(v10, v11);
  }
  uint64_t v6 = *((void *)this + 8);
  if (v6)
  {
    uint64_t v7 = *(unsigned int *)(v6 - 4);
    if (v7)
    {
      uint64_t v8 = (_DWORD **)(v6 + 8);
      do
      {
        if (*(v8 - 1) != (_DWORD *)-1)
        {
          uint64_t v9 = *v8;
          *uint64_t v8 = 0;
          if (v9)
          {
            if (v9[8] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
            }
            else {
              --v9[8];
            }
          }
        }
        v8 += 2;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v6 - 16), v4);
  }
  *((void *)this + 3) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 4, v4);
  WebCore::WebTransportSession::~WebTransportSession(this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebTransportSession::~WebTransportSession(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::WebTransportSession::~WebTransportSession(WebKit::WebTransportSession *this)
{
}

{
  WebKit::WebTransportSession::~WebTransportSession((WebKit::WebTransportSession *)((char *)this - 40));
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebTransportSession::~WebTransportSession((WebKit::WebTransportSession *)((char *)this - 24));

  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebTransportSession::~WebTransportSession((WebKit::WebTransportSession *)((char *)this - 40));

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebTransportSession::messageSenderConnection(WebKit::WebTransportSession *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                   + 24);
}

uint64_t non-virtual thunk to'WebKit::WebTransportSession::messageSenderConnection(WebKit::WebTransportSession *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                   + 24);
}

uint64_t WebKit::WebTransportSession::messageSenderDestinationID(WebKit::WebTransportSession *this)
{
  return *((void *)this + 7);
}

uint64_t non-virtual thunk to'WebKit::WebTransportSession::messageSenderDestinationID(WebKit::WebTransportSession *this)
{
  return *((void *)this + 2);
}

atomic_uchar *WebKit::WebTransportSession::receiveDatagram(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(atomic_uchar **)(a1 + 8);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 16), &v9);
    uint64_t result = v9;
    if (v9)
    {
      uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *, uint64_t, uint64_t))(*(void *)v9 + 16))(v9, a2, a3);
      uint64_t v8 = v9;
      uint64_t v9 = 0;
      if (v8) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebTransportSessionClient,(WTF::DestructionThread)0>(*((atomic_uchar **)v8 + 1), v7);
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::WebTransportSession::receiveIncomingUnidirectionalStream(uint64_t a1)
{
  uint64_t result = *(atomic_uchar **)(a1 + 8);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 16), &v5);
    uint64_t result = v5;
    if (v5)
    {
      uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v5 + 24))(v5);
      int v4 = v5;
      uint64_t v5 = 0;
      if (v4) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebTransportSessionClient,(WTF::DestructionThread)0>(*((atomic_uchar **)v4 + 1), v3);
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::WebTransportSession::receiveBidirectionalStream(uint64_t a1)
{
  uint64_t result = *(atomic_uchar **)(a1 + 8);
  if (result)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::WebGPU::ExternalTexture>(result, *(void *)(a1 + 16), &v5);
    uint64_t result = v5;
    if (v5)
    {
      uint64_t result = (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v5 + 32))(v5);
      int v4 = v5;
      uint64_t v5 = 0;
      if (v4) {
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebTransportSessionClient,(WTF::DestructionThread)0>(*((atomic_uchar **)v4 + 1), v3);
      }
    }
  }
  return result;
}

WTF::DeferrableRefCountedBase *WebKit::WebTransportSession::streamReceiveBytes(WTF::DeferrableRefCountedBase *result, uint64_t a2, const void *a3, JSC::ArrayBuffer *this)
{
  uint64_t v4 = *((void *)result + 8);
  if (v4)
  {
    unsigned int v7 = *(_DWORD *)(v4 - 8);
    unint64_t v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    uint64_t v11 = v7 & ((v10 >> 31) ^ v10);
    uint64_t v12 = *(void *)(v4 + 16 * v11);
    if (v12 == a2)
    {
LABEL_6:
      uint64_t v14 = *(unsigned char **)(v4 + 16 * v11 + 8);
      if (v14 && !v14[36])
      {
        JSC::ArrayBuffer::tryCreateUninitialized(this);
        if (v18)
        {
          unint64_t v15 = *((void *)v18 + 2);
          if (v15)
          {
            uint64_t v16 = *(void *)(MEMORY[0x1E4F309C0] + 56);
            if (v16)
            {
              if (*(unsigned char *)(MEMORY[0x1E4F309C0] + 34) || !*MEMORY[0x1E4F309B8]) {
                unint64_t v15 = (v15 & 0x3FFFFFFFFLL) + v16;
              }
            }
          }
          memcpy((void *)v15, a3, (size_t)this);
        }
        if (v14[24])
        {
          if ((WebCore::ReadableStreamDefaultController::enqueue() & 1) == 0) {
            (*(void (**)(unsigned char *))(*(void *)v14 + 64))(v14);
          }
          uint64_t result = v18;
          if (v18) {
            return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v18);
          }
        }
        else
        {
          uint64_t v17 = std::__throw_bad_optional_access[abi:sn180100]();
          return (WTF::DeferrableRefCountedBase *)WebKit::WebTransportSession::sendDatagram(v17);
        }
      }
    }
    else
    {
      int v13 = 1;
      while (v12)
      {
        uint64_t v11 = (v11 + v13) & v7;
        uint64_t v12 = *(void *)(v4 + 16 * v11);
        ++v13;
        if (v12 == a2) {
          goto LABEL_6;
        }
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebTransportSession::sendDatagram(uint64_t a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t v7 = a1 + 40;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 40) + 56))(a1 + 40);
  unint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v9 = 598;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v18 = v9;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v9, a2, a3);
  uint64_t v10 = *a4;
  *a4 = 0;
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v11 = &unk_1EE9F23D8;
  v11[1] = v10;
  v17[0] = v11;
  v17[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v7 + 40))(v7, &v18, v17, 0);
  uint64_t v13 = v17[0];
  v17[0] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebTransportSession::createOutgoingUnidirectionalStream(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 40;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 32), a1 + 24);
  uint64_t v5 = *(atomic_uint **)(a1 + 32);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 40) + 56))(v4);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 595;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v16 = v8;
  unint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v9 = &unk_1EE9F2400;
  v9[1] = a1;
  void v9[2] = v5;
  v9[3] = v6;
  v15[0] = v9;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(a1 + 40) + 40))(v4, &v16, v15, 0);
  uint64_t v11 = v15[0];
  v15[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::WebTransportSession::createBidirectionalStream(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 40;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 32), a1 + 24);
  uint64_t v5 = *(atomic_uint **)(a1 + 32);
  if (v5) {
    atomic_fetch_add(v5, 1u);
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 40) + 56))(v4);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 594;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v16 = v8;
  unint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v9 = &unk_1EE9F2428;
  v9[1] = a1;
  void v9[2] = v5;
  v9[3] = v6;
  v15[0] = v9;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(a1 + 40) + 40))(v4, &v16, v15, 0);
  uint64_t v11 = v15[0];
  v15[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::WebTransportSession::terminate(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = a1 + 40;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 40) + 56))(a1 + 40);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 601;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  uint64_t v8 = (_DWORD *)IPC::Encoder::grow(v7, 4uLL, 4);
  if (v9 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x199177B70);
  }
  *uint64_t v8 = a2;
  uint64_t v10 = *a3;
  if (*a3)
  {
    uint64_t v11 = (const void *)(v10 + 16);
    size_t v12 = *(void *)(v10 + 8);
  }
  else
  {
    size_t v12 = 0;
    uint64_t v11 = 0;
  }
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v7, v11, v12);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v17, 0);
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

uint64_t WebKit::LibWebRTCDnsResolverFactory::CreateAndResolve@<X0>(rtc::SocketAddress *a1@<X1>, uint64_t a2@<X2>, WebKit::LibWebRTCResolver **a3@<X8>)
{
  {
    uint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WebKit::LibWebRTCSocketFactory::createAsyncDnsResolver((WebKit::LibWebRTCSocketFactory *)(v6 + 24), &v15);
  uint64_t v7 = v15;
  (*(void (**)(void, uint64_t, unsigned char *))(a2 + 16))(0, a2, v12);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(void *)(a2 + ++*(_DWORD *)(this + 16) = absl::internal_any_invocable::EmptyManager;
  *(void *)(a2 + 24) = 0;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v8 = &unk_1EE9F2478;
  ((void (*)(void, unsigned char *, uint64_t))v13)(0, v12, v8 + 8);
  *(_OWORD *)(v8 + 24) = v13;
  long long v13 = (unint64_t)absl::internal_any_invocable::EmptyManager;
  uint64_t v14 = v8;
  WebKit::LibWebRTCResolver::start((uint64_t)v7, a1, &v14);
  uint64_t v9 = v14;
  uint64_t v14 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t result = ((uint64_t (*)(uint64_t, unsigned char *, unsigned char *))v13)(1, v12, v12);
  *a3 = v7;
  return result;
}

uint64_t WebKit::LibWebRTCDnsResolverFactory::CreateAndResolve@<X0>(rtc::SocketAddress *a1@<X1>, uint64_t a2@<X3>, WebKit::LibWebRTCResolver **a3@<X8>)
{
  {
    uint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WebKit::LibWebRTCSocketFactory::createAsyncDnsResolver((WebKit::LibWebRTCSocketFactory *)(v6 + 24), &v15);
  uint64_t v7 = v15;
  (*(void (**)(void, uint64_t, unsigned char *))(a2 + 16))(0, a2, v12);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(void *)(a2 + ++*(_DWORD *)(this + 16) = absl::internal_any_invocable::EmptyManager;
  *(void *)(a2 + 24) = 0;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v8 = &unk_1EE9F24A0;
  ((void (*)(void, unsigned char *, uint64_t))v13)(0, v12, v8 + 8);
  *(_OWORD *)(v8 + 24) = v13;
  long long v13 = (unint64_t)absl::internal_any_invocable::EmptyManager;
  uint64_t v14 = v8;
  WebKit::LibWebRTCResolver::start((uint64_t)v7, a1, &v14);
  uint64_t v9 = v14;
  uint64_t v14 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t result = ((uint64_t (*)(uint64_t, unsigned char *, unsigned char *))v13)(1, v12, v12);
  *a3 = v7;
  return result;
}

uint64_t *WebKit::LibWebRTCDnsResolverFactory::Create@<X0>(WebKit::LibWebRTCResolver **a1@<X8>)
{
  {
    uint64_t v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v6);
  }
  WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  uint64_t v4 = (WebKit::LibWebRTCSocketFactory *)(v3 + 24);

  return WebKit::LibWebRTCSocketFactory::createAsyncDnsResolver(v4, a1);
}

uint64_t WebKit::LibWebRTCDnsResolverFactory::Resolver::Start(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void, uint64_t, unsigned char *))(a3 + 16))(0, a3, v9);
  long long v10 = *(_OWORD *)(a3 + 16);
  *(void *)(a3 + ++*(_DWORD *)(this + 16) = absl::internal_any_invocable::EmptyManager;
  *(void *)(a3 + 24) = 0;
  uint64_t v6 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v6 = &unk_1EE9F24C8;
  ((void (*)(void, unsigned char *, uint64_t))v10)(0, v9, v6 + 8);
  *(_OWORD *)(v6 + 24) = v10;
  long long v10 = (unint64_t)absl::internal_any_invocable::EmptyManager;
  uint64_t v11 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 40))(a1, a2, &v11);
  uint64_t v7 = v11;
  uint64_t v11 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return ((uint64_t (*)(uint64_t, unsigned char *, unsigned char *))v10)(1, v9, v9);
}

uint64_t WebKit::LibWebRTCDnsResolverFactory::Resolver::Start(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void, uint64_t, unsigned char *))(a4 + 16))(0, a4, v10);
  long long v11 = *(_OWORD *)(a4 + 16);
  *(void *)(a4 + ++*(_DWORD *)(this + 16) = absl::internal_any_invocable::EmptyManager;
  *(void *)(a4 + 24) = 0;
  uint64_t v7 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v7 = &unk_1EE9F24F0;
  ((void (*)(void, unsigned char *, uint64_t))v11)(0, v10, v7 + 8);
  *(_OWORD *)(v7 + 24) = v11;
  long long v11 = (unint64_t)absl::internal_any_invocable::EmptyManager;
  uint64_t v12 = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 40))(a1, a2, &v12);
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return ((uint64_t (*)(uint64_t, unsigned char *, unsigned char *))v11)(1, v10, v10);
}

void WebKit::LibWebRTCNetwork::~LibWebRTCNetwork(WebKit::LibWebRTCNetwork *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F2828;
  *((void *)this + 1) = &unk_1EE9F2858;
  uint64_t v3 = (atomic_uchar *volatile *)*((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v3)
  {
    char v4 = 0;
    atomic_uchar *volatile v5 = *v3;
    atomic_compare_exchange_strong_explicit(*v3, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      MEMORY[0x19972E8D0](v5);
    }
    uint64_t v6 = *((void *)v5 + 1);
    uint64_t v7 = v6 - 1;
    *((void *)v5 + 1) = v6 - 1;
    if (v6 == 1)
    {
      uint64_t v48 = *((void *)v5 + 2);
      uint64_t v9 = *((void *)v5 + 3);
      *((void *)v5 + 3) = 0;
      BOOL v8 = v48 == 0;
    }
    else
    {
      BOOL v8 = 0;
      uint64_t v9 = 0;
    }
    int v10 = 1;
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 == 1)
    {
      if (v7) {
        goto LABEL_10;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (v7) {
        goto LABEL_10;
      }
    }
    uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v11 = &unk_1EE9B37E8;
    *(void *)(v11 + 8) = v5;
    *(void *)(v11 + ++*(_DWORD *)(this + 16) = v9;
    *(unsigned char *)(v11 + 24) = v8;
    uint64_t v50 = v11;
    WTF::ensureOnMainRunLoop();
    if (v50) {
      (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
    }
  }
LABEL_10:
  uint64_t v12 = *((void *)this + 23);
  if (v12)
  {
    uint64_t v13 = *(unsigned int *)(v12 - 4);
    if (v13)
    {
      uint64_t v14 = (WTF::StringImpl ***)(v12 + 32);
      do
      {
        if (*(v14 - 2) != (WTF::StringImpl **)-1 && *v14) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*v14, a2);
        }
        v14 += 6;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v12 - 16), a2);
  }
  uint64_t v15 = *((void *)this + 22);
  if (v15)
  {
    *(void *)(v15 + 8) = 0;
    uint64_t v16 = (unsigned int *)*((void *)this + 22);
    *((void *)this + 22) = 0;
    if (v16 && atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, a2);
    }
  }
  else
  {
    *((void *)this + 22) = 0;
  }
  WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, a2);
  uint64_t v18 = (unsigned int **)*((void *)this + 12);
  if (v18) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v18, v17);
  }
  unint64_t v19 = *((void *)this + 7);
  unint64_t v20 = *((void *)this + 8);
  __int16 v21 = (WTF *)*((void *)this + 9);
  if (v19 <= v20)
  {
    if (v19 == v20) {
      goto LABEL_44;
    }
    double v28 = (uint64_t *)((char *)v21 + 8 * v19);
    uint64_t v29 = 8 * v20 - 8 * v19;
    do
    {
      uint64_t v30 = *v28;
      *double v28 = 0;
      if (v30) {
        (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
      }
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  else
  {
    if (v20)
    {
      uint64_t v22 = 8 * v20;
      do
      {
        uint64_t v23 = *(void *)v21;
        *(void *)__int16 v21 = 0;
        if (v23) {
          (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
        }
        __int16 v21 = (WTF *)((char *)v21 + 8);
        v22 -= 8;
      }
      while (v22);
      __int16 v21 = (WTF *)*((void *)this + 9);
      unint64_t v19 = *((void *)this + 7);
    }
    uint64_t v24 = *((unsigned int *)this + 20);
    if (v19 != v24)
    {
      uint64_t v25 = (uint64_t *)((char *)v21 + 8 * v19);
      uint64_t v26 = 8 * v24 - 8 * v19;
      do
      {
        uint64_t v27 = *v25;
        *uint64_t v25 = 0;
        if (v27) {
          (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
        }
        ++v25;
        v26 -= 8;
      }
      while (v26);
    }
  }
  __int16 v21 = (WTF *)*((void *)this + 9);
LABEL_44:
  if (v21)
  {
    *((void *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v21, v17);
  }
  uint64_t v31 = (atomic_uchar *volatile *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v31)
  {
    char v32 = 0;
    atomic_uchar *volatile v33 = *v31;
    atomic_compare_exchange_strong_explicit(*v31, (unsigned __int8 *)&v32, 1u, memory_order_acquire, memory_order_acquire);
    if (v32) {
      MEMORY[0x19972E8D0](v33);
    }
    uint64_t v34 = *((void *)v33 + 1);
    uint64_t v35 = v34 - 1;
    *((void *)v33 + 1) = v34 - 1;
    if (v34 == 1)
    {
      uint64_t v49 = *((void *)v33 + 2);
      uint64_t v37 = *((void *)v33 + 3);
      *((void *)v33 + 3) = 0;
      BOOL v36 = v49 == 0;
    }
    else
    {
      BOOL v36 = 0;
      uint64_t v37 = 0;
    }
    int v38 = 1;
    atomic_compare_exchange_strong_explicit(v33, (unsigned __int8 *)&v38, 0, memory_order_release, memory_order_relaxed);
    if (v38 == 1)
    {
      if (v35) {
        goto LABEL_55;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v33);
      if (v35) {
        goto LABEL_55;
      }
    }
    uint64_t v39 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v39 = &unk_1EE9B37E8;
    *(void *)(v39 + 8) = v33;
    *(void *)(v39 + ++*(_DWORD *)(this + 16) = v37;
    *(unsigned char *)(v39 + 24) = v36;
    uint64_t v51 = v39;
    WTF::ensureOnMainRunLoop();
    if (v51) {
      (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
    }
  }
LABEL_55:
  uint64_t v40 = *((void *)this + 4);
  if (v40)
  {
    uint64_t v41 = *(unsigned int *)(v40 - 4);
    if (v41)
    {
      uint64_t v42 = (unsigned int **)(v40 + 8);
      do
      {
        if (*(v42 - 1) != (unsigned int *)-1)
        {
          unint64_t v43 = *v42;
          *uint64_t v42 = 0;
          if (v43)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v43, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v43);
              WTF::fastFree((WTF *)v43, v17);
            }
          }
        }
        v42 += 2;
        --v41;
      }
      while (v41);
    }
    WTF::fastFree((WTF *)(v40 - 16), v17);
  }
  uint64_t v44 = *((void *)this + 3);
  if (v44)
  {
    uint64_t v45 = *(unsigned int *)(v44 - 4);
    if (v45)
    {
      uint64_t v46 = (unsigned int **)(v44 + 8);
      do
      {
        if (*(v46 - 1) != (unsigned int *)-1)
        {
          __int16 v47 = *v46;
          *uint64_t v46 = 0;
          if (v47)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v47, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v47);
              WTF::fastFree((WTF *)v47, v17);
            }
          }
        }
        v46 += 2;
        --v45;
      }
      while (v45);
    }
    WTF::fastFree((WTF *)(v44 - 16), v17);
  }
  *((void *)this + 1) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v17);
  WTF::FunctionDispatcher::~FunctionDispatcher(this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::LibWebRTCNetwork::~LibWebRTCNetwork(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::LibWebRTCNetwork::~LibWebRTCNetwork(WebKit::LibWebRTCNetwork *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::LibWebRTCNetwork::~LibWebRTCNetwork((WebKit::LibWebRTCNetwork *)((char *)this - 8), a2);

  WTF::fastFree(v2, v3);
}

IPC::Encoder *WebKit::LibWebRTCNetwork::setSocketFactoryConnection(WebKit::LibWebRTCNetwork *this)
{
  uint64_t v2 = (atomic_uchar *volatile *)*((void *)this + 25);
  if (v2)
  {
    char v3 = 0;
    atomic_uchar *volatile v4 = *v2;
    int v5 = 1;
    atomic_compare_exchange_strong_explicit(*v2, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
    if (v3) {
      MEMORY[0x19972E8D0](v4);
    }
    ++*((void *)v4 + 1);
    atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
    if (v5 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v6 = &unk_1EE9F2540;
    v6[1] = this;
    uint64_t v6[2] = v2;
    uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    BOOL v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)BOOL v8 = 234;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 66) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 68) = 0;
    *((void *)v8 + 70) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    v15[1] = v7;
    uint64_t v16 = v8;
    v15[0] = (uint64_t)v6;
    IPC::Connection::sendMessageWithAsyncReply((os_unfair_lock_s *)v2, &v16, v15, 0, 0);
    uint64_t v10 = v15[0];
    v15[0] = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t result = v16;
    uint64_t v16 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
  }
  else
  {
    uint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v14 = &unk_1EE9F2518;
    v14[1] = this;
    v15[0] = (uint64_t)v14;
    WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
    uint64_t result = (IPC::Encoder *)v15[0];
    v15[0] = 0;
    if (result) {
      return (IPC::Encoder *)(*(uint64_t (**)(IPC::Encoder *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *WebKit::LibWebRTCNetwork::networkProcessCrashed(WebKit::LibWebRTCNetwork *this)
{
  uint64_t v14 = 0;
  WebKit::LibWebRTCNetwork::setConnection((uint64_t)this, &v14);
  uint64_t v2 = v14;
  uint64_t v14 = 0;
  if (v2)
  {
    char v3 = 0;
    atomic_uchar *volatile v4 = *v2;
    atomic_compare_exchange_strong_explicit(*v2, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
    if (v3) {
      MEMORY[0x19972E8D0](v4);
    }
    uint64_t v5 = *((void *)v4 + 1);
    uint64_t v6 = v5 - 1;
    *((void *)v4 + 1) = v5 - 1;
    if (v5 == 1)
    {
      uint64_t v13 = *((void *)v4 + 2);
      uint64_t v8 = *((void *)v4 + 3);
      *((void *)v4 + 3) = 0;
      BOOL v7 = v13 == 0;
    }
    else
    {
      BOOL v7 = 0;
      uint64_t v8 = 0;
    }
    int v9 = 1;
    atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 == 1)
    {
      if (v6) {
        return WebKit::WebRTCMonitor::networkProcessCrashed((WebKit::LibWebRTCNetwork *)((char *)this + 88));
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
      if (v6) {
        return WebKit::WebRTCMonitor::networkProcessCrashed((WebKit::LibWebRTCNetwork *)((char *)this + 88));
      }
    }
    uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v10 = &unk_1EE9B37E8;
    *(void *)(v10 + 8) = v4;
    *(void *)(v10 + ++*(_DWORD *)(this + 16) = v8;
    *(unsigned char *)(v10 + 24) = v7;
    uint64_t v15 = v10;
    WTF::ensureOnMainRunLoop();
    uint64_t v11 = v15;
    uint64_t v15 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  return WebKit::WebRTCMonitor::networkProcessCrashed((WebKit::LibWebRTCNetwork *)((char *)this + 88));
}

void WebKit::LibWebRTCNetwork::dispatch(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 192))
  {
    WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
  }
  else
  {
    uint64_t v1 = qword_1EB358820;
    if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v2 = 0;
      _os_log_error_impl(&dword_1985F2000, v1, OS_LOG_TYPE_ERROR, "Received WebRTCSocket message while libWebRTCNetwork is not active", v2, 2u);
    }
  }
}

void WebKit::LibWebRTCNetwork::signalAddressReady(uint64_t a1, void *a2, WebKit::RTC::Network::SocketAddress *a3)
{
  __p[0] = a2;
  uint64_t v4 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)(a1 + 24), __p);
  if (v4)
  {
    uint64_t v5 = (WebKit::LibWebRTCSocket *)v4;
    WebKit::RTC::Network::SocketAddress::rtcAddress(a3, (rtc::SocketAddress *)__p);
    WebKit::LibWebRTCSocket::signalAddressReady(v5, (const rtc::SocketAddress *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
}

void WebKit::LibWebRTCNetwork::signalReadPacket(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int *a5)
{
  __p[0] = a2;
  uint64_t v6 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)(a1 + 24), __p);
  if (v6)
  {
    uint64_t v7 = v6;
    WebKit::RTC::Network::IPAddress::rtcAddress(a5, (uint64_t)v8);
    rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)__p, (const rtc::IPAddress *)v8);
    WebKit::LibWebRTCSocket::signalReadPacket(v7);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
}

void WebKit::LibWebRTCNetwork::signalSentPacket(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t v2 = (WebKit::LibWebRTCSocket *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)(a1 + 24), &v3);
  if (v2) {
    WebKit::LibWebRTCSocket::signalSentPacket(v2);
  }
}

uint64_t WebKit::LibWebRTCNetwork::signalConnect(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)(a1 + 24), &v7);
  if (result)
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + 524) = 4;
    uint64_t v4 = result + 240;
    uint64_t result = *(void *)(result + 248);
    *(void *)(v3 + 264) = result;
    while (result != v4)
    {
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))(result + 16);
      uint64_t v5 = result + 16;
      *(void *)(v3 + 264) = *(void *)(v5 - 8);
      v6(v5, v3);
      uint64_t result = *(void *)(v3 + 264);
    }
  }
  return result;
}

WebKit::LibWebRTCSocket *WebKit::LibWebRTCNetwork::signalClose(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a2;
  uint64_t result = (WebKit::LibWebRTCSocket *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)(a1 + 24), &v5);
  if (result) {
    return (WebKit::LibWebRTCSocket *)WebKit::LibWebRTCSocket::signalClose(result, a3);
  }
  return result;
}

uint64_t WebKit::LibWebRTCNetwork::signalUsedInterface(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(void *)&v4[0] = a2;
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)(a1 + 24), v4);
  if (result)
  {
    long long v3 = *(_OWORD *)(result + 608);
    v4[0] = *(_OWORD *)(result + 592);
    v4[1] = v3;
    return WebKit::LibWebRTCNetworkManager::signalUsedInterface(v4);
  }
  return result;
}

uint64_t WebKit::LibWebRTCNetworkManager::getOrCreate(WebCore::Document *a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)WebCore::Document::allDocumentsMap(a1);
  uint64_t v3 = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(v2, (uint64_t *)a1);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  int v5 = *(_DWORD *)(v3 + 28);
  *(_DWORD *)(v3 + 28) = v5 + 2;
  uint64_t v6 = *(void *)(v3 + 3176);
  if (!v6)
  {
    uint64_t v6 = WTF::fastMalloc((WTF *)0x170);
    long long v7 = *((_OWORD *)a1 + 1);
    long long v35 = *(_OWORD *)a1;
    long long v36 = v7;
    *(_DWORD *)(v6 + 8) = 1;
    *(void *)uint64_t v6 = &unk_1EE9F22F8;
    rtc::NetworkManagerBase::NetworkManagerBase((rtc::NetworkManagerBase *)(v6 + 16));
    *(void *)uint64_t v6 = &unk_1EE9F1F88;
    *(void *)(v6 + ++*(_DWORD *)(this + 16) = &unk_1EE9F2000;
    *(void *)(v6 + 24) = &unk_1EE9F2070;
    *(void *)(v6 + 288) = &unk_1EE9F2098;
    *(void *)(v6 + 296) = &unk_1EE9F20C8;
    *(void *)(v6 + 304) = 0;
    long long v8 = v36;
    *(_OWORD *)(v6 + 320) = v35;
    *(_OWORD *)(v6 + 336) = v8;
    *(unsigned char *)(v6 + 352) = 1;
    *(void *)(v6 + 360) = 0;
    *(_DWORD *)(v6 + 353) = 0;
    WebCore::Document::setRTCNetworkManager();
    v33[0] = 0;
    if (v6) {
      WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 8));
    }
    {
      char v32 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v32);
    }
    int v9 = (atomic_uint *volatile *)(v6 + 304);
    WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    uint64_t v12 = (uint64_t *)(v10 + 96);
    unsigned int v13 = *(_DWORD *)(v10 + 108);
    unsigned int v14 = *(_DWORD *)(v10 + 104) + 1;
    *(_DWORD *)(v10 + 104) = v14;
    if (v14 <= v13) {
      goto LABEL_33;
    }
    uint64_t v15 = v10;
    uint64_t v16 = *v12;
    if (*v12)
    {
      int v17 = *(_DWORD *)(v16 - 4);
      if (!v17) {
        goto LABEL_27;
      }
      int v18 = 0;
      unsigned int v19 = v17 - 1;
      do
      {
        uint64_t v20 = v19;
        uint64_t v21 = *(void *)(v16 + 8 * v19);
        if ((unint64_t)(v21 + 1) >= 2 && !*(void *)(v21 + 8))
        {
          *(void *)(v16 + 8 * v19) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v21);
            WTF::fastFree((WTF *)v21, v11);
          }
          *(void *)(v16 + 8 * v19) = -1;
          ++v18;
        }
        --v19;
      }
      while (v20);
      uint64_t v16 = *v12;
      if (v18)
      {
        *(_DWORD *)(v16 - 16) += v18;
        uint64_t v22 = *v12;
        if (*v12) {
          int v23 = *(_DWORD *)(v22 - 12);
        }
        else {
          int v23 = 0;
        }
        *(_DWORD *)(v22 - 12) = v23 - v18;
        uint64_t v16 = *v12;
      }
      if (v16)
      {
        unsigned int v24 = *(_DWORD *)(v16 - 4);
        if (v24 >= 9 && 6 * *(_DWORD *)(v16 - 12) < v24)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v12);
          uint64_t v16 = *(void *)(v15 + 96);
          *(_DWORD *)(v15 + 104) = 0;
          if (!v16)
          {
            unsigned int v26 = 0;
            goto LABEL_31;
          }
          goto LABEL_30;
        }
LABEL_27:
        *(_DWORD *)(v15 + 104) = 0;
LABEL_30:
        unsigned int v26 = *(_DWORD *)(v16 - 12);
        int v27 = 0x7FFFFFFF;
        if (v26 >= 0x7FFFFFFF)
        {
LABEL_32:
          *(_DWORD *)(v15 + 108) = 2 * v27;
LABEL_33:
          WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 304), v6 + 296);
          double v28 = *v9;
          atomic_fetch_add(*v9, 1u);
          atomic_fetch_add(v28, 1u);
          uint64_t v34 = (WTF *)v28;
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v12, &v34, (uint64_t)v33);
          uint64_t v30 = (unsigned int *)v34;
          uint64_t v34 = 0;
          if (v30 && atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v30);
            WTF::fastFree((WTF *)v30, v29);
          }
          if (v28 && atomic_fetch_add(v28, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v28);
            WTF::fastFree((WTF *)v28, v29);
          }
          int v5 = *(_DWORD *)(v4 + 28) - 2;
          goto LABEL_38;
        }
LABEL_31:
        int v27 = v26;
        goto LABEL_32;
      }
    }
    unsigned int v26 = 0;
    *(_DWORD *)(v15 + 104) = 0;
    goto LABEL_31;
  }
LABEL_38:
  if (v5)
  {
    *(_DWORD *)(v4 + 28) = v5;
  }
  else if ((*(_WORD *)(v4 + 34) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  return v6;
}

uint64_t WebKit::LibWebRTCNetworkManager::signalUsedInterface(long long *a1)
{
  long long v4 = *a1;
  *(void *)&long long v5 = *((void *)a1 + 2);
  WTF::String::isolatedCopy();
  uint64_t v1 = WTF::fastMalloc((WTF *)0x40);
  *(void *)uint64_t v1 = &unk_1EE9F25B8;
  *(_OWORD *)(v1 + ++*(_DWORD *)(this + 16) = v4;
  *(_OWORD *)(v1 + 32) = v5;
  *(void *)(v1 + 48) = v6;
  uint64_t v3 = v1;
  WTF::callOnMainRunLoop();
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return 0;
}

void WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager(WebKit::LibWebRTCNetworkManager *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl **)*((void *)this + 45);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 38);
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    long long v5 = (unsigned int *)*((void *)this + 38);
    *((void *)this + 38) = 0;
    if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  else
  {
    *((void *)this + 38) = 0;
  }
  *((void *)this + 2) = MEMORY[0x1E4FB61A0] + 16;
  *((void *)this + 3) = MEMORY[0x1E4FB61A0] + 128;
  std::unique_ptr<rtc::Network>::reset[abi:sn180100]((uint64_t *)this + 26, 0);
  std::unique_ptr<rtc::Network>::reset[abi:sn180100]((uint64_t *)this + 25, 0);
  std::__tree<std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<rtc::Network>>>>::destroy(*((char **)this + 23));
  uint64_t v6 = (void *)*((void *)this + 19);
  if (v6)
  {
    *((void *)this + 20) = v6;
    operator delete(v6);
  }
  *((void *)this + 2) = MEMORY[0x1E4FB6190] + 16;
  *((void *)this + 3) = MEMORY[0x1E4FB6190] + 128;
  sigslot::_signal_base<sigslot::single_threaded>::disconnect_all((uint64_t)this + 88);
  std::__list_imp<sigslot::_opaque_connection>::clear((void *)this + 13);
  sigslot::_signal_base<sigslot::single_threaded>::disconnect_all((uint64_t)this + 32);
  std::__list_imp<sigslot::_opaque_connection>::clear((void *)this + 6);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager(WebKit::LibWebRTCNetworkManager *this, WTF::StringImpl *a2)
{
}

{
  WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager((WebKit::LibWebRTCNetworkManager *)((char *)this - 24), a2);
}

{
  WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager((WebKit::LibWebRTCNetworkManager *)((char *)this - 288), a2);
}

{
  WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager((WebKit::LibWebRTCNetworkManager *)((char *)this - 296), a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager((WebKit::LibWebRTCNetworkManager *)((char *)this - 16), a2);

  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager((WebKit::LibWebRTCNetworkManager *)((char *)this - 24), a2);

  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager((WebKit::LibWebRTCNetworkManager *)((char *)this - 288), a2);

  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::LibWebRTCNetworkManager::~LibWebRTCNetworkManager((WebKit::LibWebRTCNetworkManager *)((char *)this - 296), a2);

  WTF::fastFree(v2, v3);
}

void WebKit::LibWebRTCNetworkManager::close(WebKit::LibWebRTCNetworkManager *this)
{
  {
    int v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v23);
  }
  WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  uint64_t v4 = (uint64_t *)(v2 + 96);
  unsigned int v5 = *(_DWORD *)(v2 + 108);
  unsigned int v6 = *(_DWORD *)(v2 + 104) + 1;
  *(_DWORD *)(v2 + 104) = v6;
  if (v6 > v5)
  {
    uint64_t v7 = v2;
    uint64_t v8 = *v4;
    if (*v4)
    {
      int v9 = *(_DWORD *)(v8 - 4);
      if (!v9) {
        goto LABEL_23;
      }
      int v10 = 0;
      unsigned int v11 = v9 - 1;
      do
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)(v8 + 8 * v11);
        if ((unint64_t)(v13 + 1) >= 2 && !*(void *)(v13 + 8))
        {
          *(void *)(v8 + 8 * v11) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v13);
            WTF::fastFree((WTF *)v13, v3);
          }
          *(void *)(v8 + 8 * v11) = -1;
          ++v10;
        }
        --v11;
      }
      while (v12);
      uint64_t v8 = *v4;
      if (v10)
      {
        *(_DWORD *)(v8 - 16) += v10;
        uint64_t v14 = *v4;
        if (*v4) {
          int v15 = *(_DWORD *)(v14 - 12);
        }
        else {
          int v15 = 0;
        }
        *(_DWORD *)(v14 - 12) = v15 - v10;
        uint64_t v8 = *v4;
      }
      if (v8)
      {
        unsigned int v16 = *(_DWORD *)(v8 - 4);
        if (v16 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v16)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
          uint64_t v8 = *(void *)(v7 + 96);
          *(_DWORD *)(v7 + 104) = 0;
          if (!v8)
          {
            unsigned int v18 = 0;
            goto LABEL_27;
          }
          goto LABEL_26;
        }
LABEL_23:
        *(_DWORD *)(v7 + 104) = 0;
LABEL_26:
        unsigned int v18 = *(_DWORD *)(v8 - 12);
        int v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
        {
LABEL_28:
          *(_DWORD *)(v7 + 108) = 2 * v19;
          goto LABEL_29;
        }
LABEL_27:
        int v19 = v18;
        goto LABEL_28;
      }
    }
    unsigned int v18 = 0;
    *(_DWORD *)(v7 + 104) = 0;
    goto LABEL_27;
  }
LABEL_29:
  uint64_t v20 = *((void *)this + 38);
  if (v20 && *(void *)(v20 + 8))
  {
    uint64_t v24 = *((void *)this + 38);
    uint64_t v21 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v4, &v24);
    if (*v4)
    {
      uint64_t v22 = *v4 + 8 * *(unsigned int *)(*v4 - 4);
      if ((unsigned int **)v22 == v21) {
        return;
      }
    }
    else
    {
      if (!v21) {
        return;
      }
      uint64_t v22 = 0;
    }
    if ((unsigned int **)v22 != v21) {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v4, v21);
    }
  }
}

atomic_uchar *volatile **WebKit::LibWebRTCNetworkManager::unregisterMDNSNames(WebKit::LibWebRTCNetworkManager *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  {
    unsigned int v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  long long v3 = *((_OWORD *)this + 21);
  v6[0] = *((_OWORD *)this + 20);
  v6[1] = v3;
  return WebKit::WebMDNSRegister::unregisterMDNSNames(v2 + 176, (uint64_t *)v6);
}

uint64_t WebKit::LibWebRTCNetworkManager::StartUpdating(WebKit::LibWebRTCNetworkManager *this)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 76, (uint64_t)this + 296);
  uint64_t v2 = (atomic_uint *)*((void *)this + 38);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  long long v3 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v3 = &unk_1EE9F25E0;
  v3[1] = this;
  v3[2] = v2;
  uint64_t v5 = (uint64_t)v3;
  WTF::callOnMainRunLoop();
  uint64_t result = v5;
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::LibWebRTCNetworkManager::StartUpdating(WebKit::LibWebRTCNetworkManager *this)
{
  return WebKit::LibWebRTCNetworkManager::StartUpdating((WebKit::LibWebRTCNetworkManager *)((char *)this - 16));
}

uint64_t WebKit::LibWebRTCNetworkManager::StopUpdating(WebKit::LibWebRTCNetworkManager *this)
{
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 76, (uint64_t)this + 296);
  uint64_t v2 = (atomic_uint *)*((void *)this + 38);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  long long v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EE9F2630;
  v3[1] = v2;
  uint64_t v5 = (uint64_t)v3;
  WTF::callOnMainRunLoop();
  uint64_t result = v5;
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::LibWebRTCNetworkManager::StopUpdating(WebKit::LibWebRTCNetworkManager *this)
{
  return WebKit::LibWebRTCNetworkManager::StopUpdating((WebKit::LibWebRTCNetworkManager *)((char *)this - 16));
}

uint64_t WebKit::LibWebRTCNetworkManager::GetMdnsResponder(WebKit::LibWebRTCNetworkManager *this)
{
  if (*((unsigned char *)this + 352)) {
    uint64_t v1 = this;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1) {
    return (uint64_t)v1 + 288;
  }
  else {
    return 0;
  }
}

char *non-virtual thunk to'WebKit::LibWebRTCNetworkManager::GetMdnsResponder(WebKit::LibWebRTCNetworkManager *this)
{
  uint64_t v1 = (char *)this - 16;
  if (!*((unsigned char *)this + 336)) {
    uint64_t v1 = 0;
  }
  uint64_t v2 = v1 + 288;
  if (*((unsigned char *)this + 336)) {
    return v2;
  }
  else {
    return 0;
  }
}

{
  char *v1;
  char *v2;

  uint64_t v1 = (char *)this - 24;
  if (!*((unsigned char *)this + 328)) {
    uint64_t v1 = 0;
  }
  uint64_t v2 = v1 + 288;
  if (*((unsigned char *)this + 328)) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t WebKit::LibWebRTCNetworkManager::networksChanged(uint64_t a1, int *a2, int *a3, int *a4)
{
  char v4 = *(unsigned char *)(a1 + 353) == 0;
  *(unsigned char *)(a1 + 353) = 1;
  return WebKit::LibWebRTCNetworkManager::networksChanged(a1, a2, a3, a4, v4);
}

uint64_t WebKit::LibWebRTCNetworkManager::networksChanged(uint64_t a1, int *a2, int *a3, int *a4, char a5)
{
  uint64_t v7 = a1;
  *(void *)CFTypeRef v136 = 0;
  uint64_t v137 = 0;
  if (*(unsigned char *)(a1 + 354))
  {
    if (v136 != a2)
    {
      unsigned int v8 = a2[3];
      if (v8)
      {
        WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)v136, 0);
        WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v136, a2[3]);
        unsigned int v8 = HIDWORD(v137);
        uint64_t v9 = *(void *)v136;
        unint64_t v10 = *(void *)a2;
        if (HIDWORD(v137))
        {
          unsigned int v11 = a4;
          unint64_t v12 = v10 + 96 * HIDWORD(v137);
          do
          {
            WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v9, (const void **)v10);
            WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v9 + 16, (const void **)(v10 + 16));
            long long v13 = *(_OWORD *)(v10 + 32);
            long long v14 = *(_OWORD *)(v10 + 48);
            *(_OWORD *)(v9 + 60) = *(_OWORD *)(v10 + 60);
            *(_OWORD *)(v9 + 32) = v13;
            *(_OWORD *)(v9 + 48) = v14;
            if (v10 != v9)
            {
              unint64_t v15 = *(unsigned int *)(v9 + 92);
              unint64_t v16 = *(unsigned int *)(v10 + 92);
              if (v15 <= v16)
              {
                if (v16 > *(unsigned int *)(v9 + 88))
                {
                  WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v9 + 80, 0);
                  WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v9 + 80, *(unsigned int *)(v10 + 92));
                  unint64_t v15 = *(unsigned int *)(v9 + 92);
                }
              }
              else
              {
                *(_DWORD *)(v9 + 92) = v16;
                unint64_t v15 = v16;
              }
              if (v15)
              {
                memmove(*(void **)(v9 + 80), *(const void **)(v10 + 80), 24 * v15);
                unint64_t v15 = *(unsigned int *)(v9 + 92);
              }
              uint64_t v17 = *(unsigned int *)(v10 + 92);
              if (v15 != v17)
              {
                uint64_t v18 = 3 * v15;
                uint64_t v19 = *(void *)(v9 + 80) + 24 * v15;
                uint64_t v20 = *(void *)(v10 + 80) + 8 * v18;
                uint64_t v21 = 24 * v17 - 8 * v18;
                do
                {
                  long long v22 = *(_OWORD *)v20;
                  *(void *)(v19 + ++*(_DWORD *)(this + 16) = *(void *)(v20 + 16);
                  *(_OWORD *)uint64_t v19 = v22;
                  v19 += 24;
                  v20 += 24;
                  v21 -= 24;
                }
                while (v21);
                LODWORD(v15) = *(_DWORD *)(v10 + 92);
              }
              *(_DWORD *)(v9 + 92) = v15;
            }
            v10 += 96;
            v9 += 96;
          }
          while (v10 != v12);
          unint64_t v10 = *(void *)a2;
          unsigned int v8 = HIDWORD(v137);
          uint64_t v9 = *(void *)v136;
          a4 = v11;
        }
      }
      else
      {
        uint64_t v9 = 0;
        unint64_t v10 = *(void *)a2;
      }
      uint64_t v67 = a2[3];
      if (v8 != v67)
      {
        v128 = a4;
        uint64_t v68 = v7;
        uint64_t v69 = 96 * v8;
        uint64_t v70 = 96 * v67;
        do
        {
          unint64_t v71 = v10 + v69;
          uint64_t v72 = (WTF *)*(unsigned int *)(v10 + v69 + 12);
          uint64_t v73 = v9 + v69;
          *(void *)uint64_t v73 = 0;
          *(void *)(v73 + 8) = 0;
          *(_DWORD *)(v73 + 12) = v72;
          if (v72)
          {
            uint64_t v74 = (void *)WTF::fastMalloc(v72);
            *(_DWORD *)(v73 + 8) = v72;
            *(void *)uint64_t v73 = v74;
            memcpy(v74, *(const void **)(v10 + v69), *(unsigned int *)(v71 + 12));
          }
          int v75 = (WTF *)*(unsigned int *)(v71 + 28);
          *(void *)(v73 + ++*(_DWORD *)(this + 16) = 0;
          *(void *)(v73 + 24) = 0;
          uint64_t v76 = v73 + 16;
          *(_DWORD *)(v76 + 12) = v75;
          if (v75)
          {
            uint64_t v77 = (void *)WTF::fastMalloc(v75);
            *(_DWORD *)(v9 + v69 + 24) = v75;
            *(void *)uint64_t v76 = v77;
            memcpy(v77, *(const void **)(v10 + v69 + 16), *(unsigned int *)(v71 + 28));
          }
          uint64_t v78 = (_OWORD *)(v9 + v69);
          long long v79 = *(_OWORD *)(v10 + v69 + 32);
          long long v80 = *(_OWORD *)(v10 + v69 + 48);
          *(_OWORD *)((char *)v78 + 60) = *(_OWORD *)(v10 + v69 + 60);
          v78[2] = v79;
          void v78[3] = v80;
          WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v9 + v69 + 80, (long long **)(v10 + v69 + 80));
          v9 += 96;
          v10 += 96;
          v70 -= 96;
        }
        while (v69 != v70);
        unsigned int v8 = a2[3];
        uint64_t v7 = v68;
        a4 = v128;
      }
      HIDWORD(v137) = v8;
    }
    goto LABEL_72;
  }
  if (!*(unsigned char *)(a1 + 352))
  {
    if (*(unsigned char *)(a1 + 355))
    {
      uint64_t v92 = *(void *)(a1 + 360);
      if ((!v92 || !*(_DWORD *)(v92 - 12)) && !*(unsigned char *)(a1 + 356))
      {
        uint64_t v93 = (uint64_t *)WebCore::Document::allDocumentsMap((WebCore::Document *)a1);
        uint64_t v94 = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(v93, (uint64_t *)(v7 + 320));
        if (v94)
        {
          uint64_t v95 = v94;
          int v96 = *(_DWORD *)(v94 + 28);
          *(_DWORD *)(v94 + 28) = v96 + 2;
          uint64_t v97 = *(void *)(v94 + 544);
          CFTypeRef v129 = a4;
          if (v97)
          {
            uint64_t v98 = *(void *)(v97 + 8);
            if (v98)
            {
              uint64_t v99 = *(void *)(v98 + 24);
              if (v99)
              {
                uint64_t v100 = *(void *)(v99 + 8);
                if (v100)
                {
                  ++*(_DWORD *)v100;
                  char v101 = *(void **)(*(void *)(v100 + 48) + 16);
                  if (((*(uint64_t (**)(void *))(*v101 + 1368))(v101) & 1) == 0)
                  {
                    uint64_t v102 = *(void *)(v101[2] + 8);
                    if (v102)
                    {
                      CFRetain(*(CFTypeRef *)(v102 - 8));
                      *(unsigned char *)(v7 + 356) = 1;
                      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v143, (const WTF::URL *)(v95 + 768));
                      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v132, (const WTF::URL *)(v95 + 1040));
                      char v124 = WTF::equal(v143, v132, v103);
                      char v105 = v132;
                      uint64_t v132 = 0;
                      if (v105)
                      {
                        if (*(_DWORD *)v105 == 2) {
                          WTF::StringImpl::destroy(v105, v104);
                        }
                        else {
                          *(_DWORD *)v105 -= 2;
                        }
                      }
                      {
                        long long v123 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
                        WebKit::WebProcess::WebProcess(v123);
                      }
                      uint64_t v106 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
                      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v142, (uint64_t **)(v106 + 24));
                      BOOL v107 = (os_unfair_lock_s *)v142[0];
                      int v138 = *(void **)(v102 + 2104);
                      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 304), v7 + 296);
                      __int16 v108 = *(atomic_uint **)(v7 + 304);
                      if (v108) {
                        atomic_fetch_add(v108, 1u);
                      }
                      BOOL v109 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                      *(void *)BOOL v109 = &unk_1EE9F2658;
                      *((void *)v109 + 1) = v108;
                      uint64_t v110 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
                      char v111 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
                      *(_WORD *)char v111 = 524;
                      *((void *)v111 + 1) = 0;
                      *((void *)v111 + 66) = (char *)v111 + 16;
                      *((void *)v111 + 67) = 512;
                      *((void *)v111 + 68) = 0;
                      *((void *)v111 + 70) = 0;
                      *((void *)v111 + 69) = 0;
                      IPC::Encoder::encodeHeader(v111);
                      v147[0] = v111;
                      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v111, (uint64_t *)(v95 + 768));
                      IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v111, (uint64_t *)&v138);
                      uint64_t v112 = (unsigned char *)IPC::Encoder::grow(v111, 1uLL, 1);
                      if (!v113)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19917A360);
                      }
                      *uint64_t v112 = v124;
                      long long v114 = (unsigned char *)IPC::Encoder::grow(v111, 1uLL, 1);
                      if (!v115)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19917A380);
                      }
                      *long long v114 = 1;
                      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v111, (uint64_t *)&v143);
                      uint64_t v132 = v109;
                      *(void *)uint64_t v133 = v110;
                      IPC::Connection::sendMessageWithAsyncReply(v107, v147, (uint64_t *)&v132, 0, 0);
                      long long v117 = v132;
                      uint64_t v132 = 0;
                      if (v117) {
                        (*(void (**)(WTF::StringImpl *))(*(void *)v117 + 8))(v117);
                      }
                      long long v118 = v147[0];
                      v147[0] = 0;
                      if (v118)
                      {
                        IPC::Encoder::~Encoder(v118, v116);
                        WTF::fastFree(v121, v122);
                      }
                      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v142);
                      char v120 = v143;
                      uint64_t v143 = 0;
                      if (v120)
                      {
                        if (*(_DWORD *)v120 == 2) {
                          WTF::StringImpl::destroy(v120, v119);
                        }
                        else {
                          *(_DWORD *)v120 -= 2;
                        }
                      }
                      CFRelease(*(CFTypeRef *)(v102 - 8));
                    }
                  }
                  WTF::RefCounted<WebCore::Page>::deref((_DWORD *)v100);
                  int v96 = *(_DWORD *)(v95 + 28) - 2;
                }
              }
            }
          }
          a4 = v129;
          if (v96)
          {
            *(_DWORD *)(v95 + 28) = v96;
          }
          else if ((*(_WORD *)(v95 + 34) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v95);
          }
        }
      }
    }
  }
  unsigned int v23 = a2[3];
  if (v23)
  {
    unint64_t v24 = *(void *)a2;
    v127 = a4;
    unint64_t v130 = v24 + 96 * v23;
    uint64_t v126 = v7;
    do
    {
      uint64_t v25 = *(int **)(v24 + 80);
      int v26 = *(_DWORD *)(v24 + 92);
      if (v26)
      {
        int v27 = &v25[6 * v26];
        while (1)
        {
          WebKit::RTC::Network::IPAddress::rtcAddress(a3, (uint64_t)v147);
          WebKit::RTC::Network::IPAddress::rtcAddress(v25, (uint64_t)&v132);
          int v28 = v25[5];
          int v144 = *(_DWORD *)v133;
          long long v145 = *(_OWORD *)&v133[4];
          uint64_t v143 = (WTF *)&unk_1EE9D05A0;
          int v146 = v28;
          if (rtc::IPAddress::operator==()) {
            break;
          }
          WebKit::RTC::Network::IPAddress::rtcAddress(a4, (uint64_t)v142);
          WebKit::RTC::Network::IPAddress::rtcAddress(v25, (uint64_t)&v132);
          int v29 = v25[5];
          int v139 = *(_DWORD *)v133;
          long long v140 = *(_OWORD *)&v133[4];
          int v138 = &unk_1EE9D05A0;
          int v141 = v29;
          if (rtc::IPAddress::operator==()) {
            break;
          }
          v25 += 6;
          if (v25 == v27) {
            goto LABEL_28;
          }
        }
LABEL_37:
        unsigned int v34 = HIDWORD(v137);
        if (HIDWORD(v137) == v137)
        {
          unint64_t v35 = WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v136, HIDWORD(v137) + 1, v24);
          unsigned int v36 = HIDWORD(v137);
          uint64_t v37 = *(void *)v136;
          uint64_t v38 = *(void *)v136 + 96 * HIDWORD(v137);
          uint64_t v39 = (WTF *)*(unsigned int *)(v35 + 12);
          *(void *)uint64_t v38 = 0;
          *(void *)(v38 + 8) = 0;
          *(_DWORD *)(v38 + 12) = v39;
          if (v39)
          {
            uint64_t v40 = (void *)WTF::fastMalloc(v39);
            *(_DWORD *)(v38 + 8) = v39;
            *(void *)uint64_t v38 = v40;
            memcpy(v40, *(const void **)v35, *(unsigned int *)(v35 + 12));
          }
          uint64_t v41 = v37 + 96 * v36;
          uint64_t v42 = (WTF *)*(unsigned int *)(v35 + 28);
          *(void *)(v41 + ++*(_DWORD *)(this + 16) = 0;
          *(void *)(v41 + 24) = 0;
          uint64_t v43 = v41 + 16;
          *(_DWORD *)(v43 + 12) = v42;
          if (v42)
          {
            uint64_t v44 = (void *)WTF::fastMalloc(v42);
            *(_DWORD *)(v37 + 96 * v36 + 24) = v42;
            *(void *)uint64_t v43 = v44;
            memcpy(v44, *(const void **)(v35 + 16), *(unsigned int *)(v35 + 28));
          }
          uint64_t v45 = (_OWORD *)(v37 + 96 * v36);
          long long v46 = *(_OWORD *)(v35 + 32);
          long long v47 = *(_OWORD *)(v35 + 48);
          *(_OWORD *)((char *)v45 + 60) = *(_OWORD *)(v35 + 60);
          v45[2] = v46;
          v45[3] = v47;
          uint64_t v48 = (uint64_t)(v45 + 5);
          uint64_t v49 = (long long **)(v35 + 80);
        }
        else
        {
          uint64_t v50 = *(void *)v136;
          uint64_t v51 = (WTF *)*(unsigned int *)(v24 + 12);
          uint64_t v52 = *(void *)v136 + 96 * HIDWORD(v137);
          *(void *)uint64_t v52 = 0;
          *(void *)(v52 + 8) = 0;
          *(_DWORD *)(v52 + 12) = v51;
          if (v51)
          {
            uint64_t v53 = (void *)WTF::fastMalloc(v51);
            *(_DWORD *)(v52 + 8) = v51;
            *(void *)uint64_t v52 = v53;
            memcpy(v53, *(const void **)v24, *(unsigned int *)(v24 + 12));
          }
          uint64_t v54 = v50 + 96 * v34;
          uint64_t v55 = (WTF *)*(unsigned int *)(v24 + 28);
          *(void *)(v54 + ++*(_DWORD *)(this + 16) = 0;
          *(void *)(v54 + 24) = 0;
          uint64_t v56 = v54 + 16;
          *(_DWORD *)(v56 + 12) = v55;
          if (v55)
          {
            unint64_t v57 = (void *)WTF::fastMalloc(v55);
            *(_DWORD *)(v50 + 96 * v34 + 24) = v55;
            *(void *)uint64_t v56 = v57;
            memcpy(v57, *(const void **)(v24 + 16), *(unsigned int *)(v24 + 28));
          }
          unint64_t v58 = (_OWORD *)(v50 + 96 * v34);
          long long v59 = *(_OWORD *)(v24 + 32);
          long long v60 = *(_OWORD *)(v24 + 48);
          *(_OWORD *)((char *)v58 + 60) = *(_OWORD *)(v24 + 60);
          v58[2] = v59;
          void v58[3] = v60;
          uint64_t v48 = (uint64_t)(v58 + 5);
          uint64_t v49 = (long long **)(v24 + 80);
        }
        WTF::Vector<WebKit::RTC::Network::InterfaceAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v48, v49);
        ++HIDWORD(v137);
        uint64_t v7 = v126;
        a4 = v127;
        goto LABEL_49;
      }
LABEL_28:
      if (!*(unsigned char *)(v7 + 352) && *(unsigned char *)(v7 + 355))
      {
        WTF::String::fromUTF8();
        uint64_t v32 = *(void *)(v7 + 360);
        atomic_uchar *volatile v33 = v132;
        if (v32)
        {
          int v61 = *(_DWORD *)(v32 - 8);
          unsigned int v62 = *((_DWORD *)v132 + 4);
          if (v62 >= 0x100) {
            unsigned int v63 = v62 >> 8;
          }
          else {
            unsigned int v63 = WTF::StringImpl::hashSlowCase(v132);
          }
          for (int i = 0; ; v63 = i + v65)
          {
            int v65 = v63 & v61;
            uint64_t v66 = *(WTF **)(v32 + 8 * (v63 & v61));
            if (v66 != (WTF *)-1)
            {
              if (!v66)
              {
                LODWORD(v32) = 0;
                goto LABEL_61;
              }
              if (WTF::equal(v66, v132, v31)) {
                break;
              }
            }
            ++i;
          }
          LODWORD(v32) = 1;
LABEL_61:
          atomic_uchar *volatile v33 = v132;
          uint64_t v7 = v126;
          a4 = v127;
        }
        uint64_t v132 = 0;
        if (!v33) {
          goto LABEL_34;
        }
        if (*(_DWORD *)v33 != 2)
        {
          *(_DWORD *)v33 -= 2;
LABEL_34:
          if (v32) {
            goto LABEL_37;
          }
          goto LABEL_49;
        }
        WTF::StringImpl::destroy(v33, v30);
        if (v32) {
          goto LABEL_37;
        }
      }
LABEL_49:
      v24 += 96;
    }
    while (v24 != v130);
  }
LABEL_72:
  uint64_t v132 = (WTF::StringImpl *)v7;
  atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
  uint64_t v81 = a4;
  uint64_t v82 = *(void *)v136;
  *(void *)CFTypeRef v136 = 0;
  long long v134 = *(_OWORD *)a3;
  *(_DWORD *)uint64_t v135 = a3[4];
  *(_OWORD *)&v135[4] = *(_OWORD *)v81;
  *(_DWORD *)&v135[20] = v81[4];
  v135[24] = a5;
  uint64_t v83 = v137;
  uint64_t v137 = 0;
  uint64_t v84 = WTF::fastMalloc((WTF *)0x58);
  *(void *)uint64_t v84 = &unk_1EE9F2680;
  *(void *)(v84 + 8) = v132;
  *(void *)(v84 + ++*(_DWORD *)(this + 16) = v7;
  *(void *)uint64_t v133 = 0;
  *(void *)&v133[8] = 0;
  *(void *)(v84 + 24) = v82;
  *(void *)&v133[16] = 0;
  *(void *)(v84 + 32) = v83;
  long long v85 = *(_OWORD *)&v135[9];
  long long v86 = v134;
  *(_OWORD *)(v84 + 56) = *(_OWORD *)v135;
  *(_OWORD *)(v84 + 65) = v85;
  *(_OWORD *)(v84 + 40) = v86;
  v147[0] = (IPC::Encoder *)v84;
  WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
  uint64_t v88 = v147[0];
  v147[0] = 0;
  if (v88) {
    (*(void (**)(IPC::Encoder *))(*(void *)v88 + 8))(v88);
  }
  WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v133[8], v87);
  uint64_t v90 = *(void *)v133;
  *(void *)uint64_t v133 = 0;
  if (v90) {
    WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref((unsigned int *)(v90 + 8));
  }
  return WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v136, v89);
}